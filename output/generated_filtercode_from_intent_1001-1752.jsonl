{"original_description": "Change the color of a light bulb.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n}", "intent": "When a Triple Knock gesture is detected on the device KNC1-W-00000088, change the color temperature of the living room bulb to 2700K with a transition duration of 2 seconds."}
{"original_description": "Set a Nest Thermostat that is in Heat-Cool mode to the temperature range you specify.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_temperature_range", "Filter code method": "GoogleNestThermostat.setTemperatureRange.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_temperature_range\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setTemperatureRange.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Heat temperature\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Heat Temperature", "Helper text": "Temperature value. Heat temperature must be less than cool temperature.", "Slug": "heat_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setTemperatureRange.setHeat Temperature(string: heat_temperature)"}}, {"section": "Action fields", "title": "Cool temperature\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Cool Temperature", "Helper text": "Set cool temperature. Cool temperature must be more than heat temperature.", "Slug": "cool_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setTemperatureRange.setCool Temperature(string: cool_temperature)"}}], "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n  GoogleNestThermostat.setTemperatureRange.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setTemperatureRange.setHeatTemperature(\"22\");\n  GoogleNestThermostat.setTemperatureRange.setCoolTemperature(\"25\");\n} else {\n  GoogleNestThermostat.setTemperatureRange.skip(\"Wrong device or gesture.\");\n}", "intent": "When the Knocki device KNC1-W-00000088 detects a Triple Knock gesture, set the Living Room Nest Thermostat to a temperature range of 22°C for heating and 25°C for cooling."}
{"original_description": "Locks a Hubitat door, lock, etc. when Flic is clicked.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_lock", "Filter code method": "Hubitat.actionLock.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_lock\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === 'double_click' && Flic.click.ButtonUuid === 'MyFlicButton') {\n  // No need to skip, this is the condition to lock\n} else {\n  Hubitat.actionLock.skip('Not double-click or not MyFlicButton');\n}", "intent": "Lock the Front Door device on Hubitat when the Flic named MyFlicButton is double-clicked."}
{"original_description": "Open garage on Adafruit IO feed event.", "trigger_channel": "Adafruit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "adafruit.monitor_your_data"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Feed", "Helper text": "The name of the feed to check.", "Slug": "feed_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Operator\nDropdown list", "description": "Dropdown list", "details": {"Label": "Relationship", "Helper text": "Relationship between two values.", "Slug": "operator", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Value\nText input", "description": "Text input", "details": {"Label": "Value", "Helper text": "The value to compare against.", "Slug": "value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Feed name\nThe name of your feed.", "description": "The name of your feed.", "details": {"Slug": "feed_name", "Filter code": "Adafruit.monitorYourData.FeedName", "Type": "String", "Example": "humidity"}}, {"section": "Ingredients", "title": "Feed value\nThe value for the given feed.", "description": "The value for the given feed.", "details": {"Slug": "value", "Filter code": "Adafruit.monitorYourData.FeedValue", "Type": "String", "Example": "22"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Adafruit.monitorYourData.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Operator\nThe operator text used to compare the values.", "description": "The operator text used to compare the values.", "details": {"Slug": "operator", "Filter code": "Adafruit.monitorYourData.Operator", "Type": "String", "Example": "greater than"}}, {"section": "Ingredients", "title": "Trigger value\nThe value used in the trigger to compare against your feed data.", "description": "The value used in the trigger to compare against your feed data.", "details": {"Slug": "trigger_value", "Filter code": "Adafruit.monitorYourData.TriggerValue", "Type": "String", "Example": "34"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Adafruit.monitorYourData.FeedName === \"humidity\" && Adafruit.monitorYourData.FeedValue > 34) {\n  Garadget.openDoor();\n} else {\n  Garadget.openDoor.skip(\"Condition not met.\");\n}", "intent": "Open the garage door when the Adafruit IO feed named \"humidity\" has a value greater than \"34\"."}
{"original_description": "You can trigger a MyMilan Scene by pressing the Logitech pop. ", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (LogitechPop.shortPress.Name === \"Living Room\" && LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && parseInt(LogitechPop.shortPress.Battery) > 50 && Meta.currentUserTime.hour() >= 7 && Meta.currentUserTime.hour() < 9) {\n  Mymilan.aScenes.setScenes(\"Good Morning\");\n} else {\n  Mymilan.aScenes.skip(\"Conditions not met for triggering 'Good Morning' scene.\");\n}", "intent": "Trigger a MyMilan scene named \"Good Morning\" when the Logitech POP button with the name \"Living Room\" and ID \"a0:e6:f8:8c:f5:33\" is short pressed, the battery level is above 50%, and the event is triggered between 07:00 and 09:00."}
{"original_description": "Good Morning!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Hager IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hager_iot.run_scene", "Filter code method": "HagerIot.runScene.skip(string?: reason)", "Runtime method": "runAction(\"hager_iot.run_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour === 7 && minute === 0) {\n  HagerIot.runScene.setScene(\"Good Morning\");\n} else {\n  HagerIot.runScene.skip(\"Not 7:00 AM\");\n}", "intent": "Turn on the living room lights at 7:00 AM every day using the Hager IoT system to run the \"Good Morning\" scene."}
{"original_description": "Send your Teams channel a message when an event from search is about to begin. Great for meeting reminders and due dates.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Calendar === \"Work\" && GoogleCalendar.eventFromSearchStarts.Query === \"meeting\") {\n  var messageBody = `The event '${GoogleCalendar.eventFromSearchStarts.Title}' is about to start in 15 minutes at ${GoogleCalendar.eventFromSearchStarts.Where}. Join the video call at ${GoogleCalendar.eventFromSearchStarts.VideoCallUrl}`;\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"general\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Upcoming Event\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Event does not match the specified criteria.\");\n}", "intent": "Send a message to the #general channel in Microsoft Teams with the subject \"Upcoming Event\" and the body \"The event 'Practice Presentation' is about to start in 15 minutes at Building A, Room 101. Join the video call at https://meet.google.com\" when an event from the \"Work\" calendar containing the keyword \"meeting\" is about to begin, 15 minutes before the event starts."}
{"original_description": "Whenever your Husqvarna Automower leaves its charging station, automatically open your garage door so it can begin its mowing job.", "trigger_channel": "Husqvarna Automower®", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "automower.automower_leaving"}, "trigger_details": [{"section": "Trigger fields", "title": "Automower\nDropdown list", "description": "Dropdown list", "details": {"Label": "Automower", "Slug": "automower", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Automower.automowerLeaving.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Automower\nName of your mower", "description": "Name of your mower", "details": {"Slug": "automower", "Filter code": "Automower.automowerLeaving.Automower", "Type": "String", "Example": "Jupiter"}}, {"section": "Ingredients", "title": "Status\nMower status", "description": "Mower status", "details": {"Slug": "status", "Filter code": "Automower.automowerLeaving.Status", "Type": "String", "Example": "LEAVING"}}, {"section": "Ingredients", "title": "Message\nText containing mower name and status.", "description": "Text containing mower name and status.", "details": {"Slug": "message", "Filter code": "Automower.automowerLeaving.Message", "Type": "String", "Example": "Hawaii is on its way to cut your grass."}}], "action_channel": "Garageio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garageio.open_garage_door", "Filter code method": "Garageio.openGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"garageio.open_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to open\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_open", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Automower.automowerLeaving.Automower === \"Jupiter\" && Automower.automowerLeaving.Status === \"LEAVING\") {\n  if (Garageio.openGarageDoor !== undefined) {\n    Garageio.openGarageDoor.setDoorToOpen(\"Main Garage Door\");\n  } else {\n    Garageio.openGarageDoor.skip(\"Action not supported.\");\n  }\n} else {\n  Garageio.openGarageDoor.skip(\"Conditions not met.\");\n}", "intent": "When my Husqvarna Automower named Jupiter leaves its charging station with a status of LEAVING, automatically open the garage door labeled \"Main Garage Door\" so it can begin its mowing job."}
{"original_description": "Every time a form receives a new response, log it in a Googlesheet", "trigger_channel": "Typeform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "typeform.new_form"}, "trigger_details": [{"section": "Ingredients", "title": "Form\nThe ID of the form.", "description": "The ID of the form.", "details": {"Slug": "form_id", "Filter code": "Typeform.newForm.FormId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Form title\nThe title of the form", "description": "The title of the form", "details": {"Slug": "form_title", "Filter code": "Typeform.newForm.FormTitle", "Type": "String", "Example": "My awesome form!"}}, {"section": "Ingredients", "title": "Form url\nURL to access the form", "description": "URL to access the form", "details": {"Slug": "form_url", "Filter code": "Typeform.newForm.FormUrl", "Type": "Web URL", "Example": "https://subdomain.typeform.com/to/abc123"}}, {"section": "Ingredients", "title": "Form is public\nDraft forms return \"false\" and Public forms return \"true\".", "description": "Draft forms return \"false\" and Public forms return \"true\".", "details": {"Slug": "form_is_public", "Filter code": "Typeform.newForm.FormIsPublic", "Type": "String", "Example": "\"false\""}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Typeform.newForm.FormId === \"123\" && Typeform.newForm.FormTitle === \"My awesome form!\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Typeform Responses\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Typeform Data\");\n  var formattedRow = Typeform.newForm.FormTitle + \"|||\" + Typeform.newForm.FormUrl + \"|||\" + Typeform.newForm.FormIsPublic;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Not the target form.\");\n}", "intent": "When a new response is submitted to the Typeform with the ID \"123\" and title \"My awesome form!\", append a row to the Google Sheets spreadsheet named \"Typeform Responses\" in the folder path \"IFTTT/Typeform Data\", with the formatted row containing the form title, response URL, and public status, like this: \"My awesome form!|||https://subdomain.typeform.com/to/abc123|||false\"."}
{"original_description": "Display garage door events as LaMetric notifications", "trigger_channel": "Garadget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "garadget.door_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Garadget.doorEvent.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThis is type of the event: opening, open, closing, closed, stopped, online, offline, initialized", "description": "This is type of the event: opening, open, closing, closed, stopped, online, offline, initialized", "details": {"Slug": "event_type", "Filter code": "Garadget.doorEvent.EventType", "Type": "String", "Example": "opening"}}], "action_channel": "LaMetric", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lametric.notification", "Filter code method": "Lametric.notification.skip(string?: reason)", "Runtime method": "runAction(\"lametric.notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device to display notification on", "Helper text": "If you do not see your device in the list – make sure it runs <a href=\"http://lametric.com/firmware\" target=\"_blank\">firmware 1.6.1</a> or newer.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Icon\nDropdown list", "description": "Dropdown list", "details": {"Label": "Icon or animation", "Helper text": "Preview icons and animations <a href=\"https://developer.lametric.com/icons\" target=\"_blank\">here</a>.", "Slug": "icon", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Lametric.notification.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Helper text": "Notification sound is played on LaMetric TIME when message is delivered.", "Slug": "sound", "Required": "false", "Can have default value": "true", "Filter code method": "Lametric.notification.setSound(string: sound)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Priority", "Helper text": "Only important messages will be delivered when screensaver is active.", "Slug": "priority", "Required": "true", "Can have default value": "true", "Filter code method": "Lametric.notification.setPriority(string: priority)"}}], "filter_code": "if (Garadget.doorEvent.EventType === \"opening\" || Garadget.doorEvent.EventType === \"closing\") {\n  if (Garadget.doorEvent.DoorId === \"main_garage_door\") {\n    Lametric.notification.setText(\"Garage door is \" + Garadget.doorEvent.EventType);\n    Lametric.notification.setSound(\"ding\");\n    Lametric.notification.setPriority(\"info\");\n    Lametric.notification.setIcon(\"car\");\n    Lametric.notification.setDevice(\"Living Room Display\");\n  } else {\n    Lametric.notification.skip(\"Not the main garage door.\");\n  }\n} else {\n  Lametric.notification.skip(\"Event type is not opening or closing.\");\n}", "intent": "When the garage door event type is \"opening\" or \"closing\" on the main garage door, display a LaMetric notification with a \"car\" icon and the message \"Garage door is {event_type}\" on the \"Living Room Display\" device with a priority of \"info\" and the sound \"ding\"."}
{"original_description": "Choose certain days and times to automatically disarm your alarm system.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Uplink Remote", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "uplinkremote.disarmaction", "Filter code method": "Uplinkremote.disarmaction.skip(string?: reason)", "Runtime method": "runAction(\"uplinkremote.disarmaction\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar timeOfDay = DateAndTime.everyWeekdayAt.CheckTime;\n\nif (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\") {\n  var hours = timeOfDay.getHours();\n  var minutes = timeOfDay.getMinutes();\n\n  if (hours === 8 && minutes === 0) {\n    Uplinkremote.disarmaction.setSerialNumber(\"Office Alarm System\");\n  } else {\n    Uplinkremote.disarmaction.skip(\"Not the scheduled disarm time.\");\n  }\n} else {\n  Uplinkremote.disarmaction.skip(\"Not a scheduled disarm day.\");\n}", "intent": "Automatically disarm the alarm system on Mondays, Wednesdays, and Fridays at 8:00 AM using the device named \"Office Alarm System\"."}
{"original_description": "Have your Nanoleaf lights automatically turn red when the air quality in your home is poor.", "trigger_channel": "Kaiterra", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kaiterra.laseregg_aqi_threshold"}, "trigger_details": [{"section": "Trigger fields", "title": "Device udid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to monitor?", "Slug": "device_udid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is your AQI threshold?", "Slug": "threshold", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Kaiterra.lasereggAqiThreshold.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Aqi\nCurrent AQI.", "description": "Current AQI.", "details": {"Slug": "aqi", "Filter code": "Kaiterra.lasereggAqiThreshold.Aqi", "Type": "String", "Example": "20"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (Kaiterra.lasereggAqiThreshold.Aqi > 50) {\n  Nanoleaf.changeColorRequest.setValue(\"red\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Air quality is good.\");\n}", "intent": "When the air quality index (AQI) from my Kaiterra Laseregg device exceeds 50, change the color of my Nanoleaf Smarter Series panel to red (#FF0000)."}
{"original_description": "Have your lights automatically change colour from green to red and purple when your air quality changes. This applet will automatically set the color of your Nanoleaf lights.", "trigger_channel": "Kaiterra", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kaiterra.laseregg_aqi"}, "trigger_details": [{"section": "Trigger fields", "title": "Device udid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to monitor?", "Slug": "device_udid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Kaiterra.lasereggAqi.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Aqi\nCurrent AQI", "description": "Current AQI", "details": {"Slug": "aqi", "Filter code": "Kaiterra.lasereggAqi.Aqi", "Type": "String", "Example": "10"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "let aqi = parseInt(Kaiterra.lasereggAqi.Aqi);\nlet hour = Meta.currentUserTime.hour();\n\nif (aqi > 100) {\n  if (hour >= 7 && hour < 19) {\n    Nanoleaf.changeColorRequest.setValue(\"FF0000\");\n  } else {\n    Nanoleaf.changeColorRequest.setValue(\"7A288A\");\n  }\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Air quality index is not exceeded.\");\n}", "intent": "When the air quality index from my Kaiterra Laseregg device exceeds 100, change the color of my Nanoleaf Smarter Series lights to red (#FF0000) if it's between 07:00 and 19:00, and to purple (#7A288A) otherwise.", "filter_code_old": "let aqi = parseInt(Kaiterra.lasereggAqi.Aqi)\n\nif (aqi >= 0 && aqi <= 50) {\n  Nanoleaf.changeColorRequest.setValue(\"25aa68\")\n} else if (aqi > 50 && aqi <= 100) {\n  Nanoleaf.changeColorRequest.setValue(\"ff9900\")\n} else if (aqi > 100 && aqi <= 150) {\n  Nanoleaf.changeColorRequest.setValue(\"ff6600\")\n} else if (aqi > 150 && aqi <= 200) {\n  Nanoleaf.changeColorRequest.setValue(\"e40000\")\n} else if (aqi > 200 && aqi <= 300) {\n  Nanoleaf.changeColorRequest.setValue(\"ae0043\")\n} else {\n  Nanoleaf.changeColorRequest.setValue(\"6c003b\")   \n}\n\n"}
{"original_description": "This will automatically turn on the WiZ light(s) of your choice whenever your Ivideon camera detects motion.", "trigger_channel": "Ivideon", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ivideon.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which camera?", "Slug": "camera", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Occurred at\nDate and time event was occurred.", "description": "Date and time event was occurred.", "details": {"Slug": "occurred_at", "Filter code": "Ivideon.motionDetected.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the camera that detected motion.", "description": "The name of the camera that detected motion.", "details": {"Slug": "camera_name", "Filter code": "Ivideon.motionDetected.CameraName", "Type": "String", "Example": "Living room camera."}}, {"section": "Ingredients", "title": "Image url\nThe URL to a snapshot of the event.", "description": "The URL to a snapshot of the event.", "details": {"Slug": "image_url", "Filter code": "Ivideon.motionDetected.ImageURL", "Type": "Image URL", "Example": "https://api.ivideon.com/events/snapshots/47987123948fsdffa.jpeg"}}, {"section": "Ingredients", "title": "Clip url\nThe URL to a video clip of the event.", "description": "The URL to a video clip of the event.", "details": {"Slug": "clip_url", "Filter code": "Ivideon.motionDetected.ClipURL", "Type": "File URL", "Example": "https://api.ivideon.com/events/clips/1265459235485612fsdffa.jpeg"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (Ivideon.motionDetected.CameraName === \"Front Door\") {\n    Wiz.turnOn.setMode(\"Warm White\");\n    Wiz.turnOn.setDimming(\"75%\");\n  } else {\n    Wiz.turnOn.skip(\"Motion detected by camera other than Front Door.\");\n  }\n} else {\n  Wiz.turnOn.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}", "intent": "Turn on the WiZ light in the Living Room to 75% brightness with Warm White mode whenever motion is detected by the Ivideon camera named \"Front Door\" between 07:00 and 22:00."}
{"original_description": "This will automatically turn off the WiZ light(s) of your choice when SmartThings no longer detects presence.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_off", "Filter code method": "Wiz.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "Select the lights you want to turn off.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = Meta.currentUserTime.hour();\nvar deviceName = SmartthingsV2.newPresentSmartthings.DeviceName;\nvar arrivedAt = SmartthingsV2.newPresentSmartthings.ArrivedAt;\n\nif (deviceName === \"Bedroom sensor\" && \n    currentTime >= 7 && currentTime < 22 && \n    (new Date() - new Date(arrivedAt)) / 60000 > 10) {\n  Wiz.turnOff.setEntity(\"living room lamp\");\n} else {\n  Wiz.turnOff.skip(\"Conditions not met.\");\n}", "intent": "Turn off the WiZ living room lamp when SmartThings no longer detects presence from the bedroom sensor after 10 minutes of absence between 07:00 and 22:00."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower setpoint", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.sensor_temperature"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.sensorTemperature.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.sensorTemperature.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.sensorTemperature.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.sensorTemperature.Device === \"Living Room Sensor\" && ViewProd.sensorTemperature.State > 25) {\n  Telegram.sendMessage.setText(\"Temperature alert: the living room sensor has reached 25°C\");\n  Telegram.sendMessage.setIncludeWebPagePreview(false);\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Conditions not met\");\n}", "intent": "Send a notification to the Telegram chat \"#home_automation\" with the message \"Temperature alert: the living room sensor has reached 25°C\" when the Vimar VIEW device \"Living Room Sensor\" exceeds the threshold of 25°C."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower setpoint", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.clima_ambient_temperature"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.climaAmbientTemperature.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.climaAmbientTemperature.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.climaAmbientTemperature.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.climaAmbientTemperature.State > 25 || ViewProd.climaAmbientTemperature.State < 18) {\n  Telegram.sendMessage.setText(`Temperature alert: ${ViewProd.climaAmbientTemperature.State}°C in the living room.`);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip(null);\n} else {\n  Telegram.sendMessage.skip(\"Temperature is within the acceptable range.\");\n}", "intent": "Send a notification to the #home_monitoring Telegram chat when the living room temperature exceeds 25°C or drops below 18°C, including a web page preview in the message."}
{"original_description": "활동코스 5교시에서 활용하세요.", "trigger_channel": "EveryKit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "everykit.trigger_fire"}, "trigger_details": [{"section": "Trigger fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger command\nText input", "description": "Text input", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "trigger_command", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Everykit.triggerFire.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Every kit name\nThe EveryKit that is selected.", "description": "The EveryKit that is selected.", "details": {"Slug": "which_every_kit", "Filter code": "Everykit.triggerFire.EveryKitName", "Type": "String", "Example": "Everykit"}}, {"section": "Ingredients", "title": "Message\nThe message that is sent.", "description": "The message that is sent.", "details": {"Slug": "what_message", "Filter code": "Everykit.triggerFire.Message", "Type": "String", "Example": "message"}}, {"section": "Ingredients", "title": "Data\nThe data that is sent.", "description": "The data that is sent.", "details": {"Slug": "data", "Filter code": "Everykit.triggerFire.Data", "Type": "String", "Example": "data"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyDailyKit\" && Everykit.triggerFire.Message === \"SendReminders\" && Everykit.triggerFire.Data === \"Reminder: Meeting at 2 PM\") {\n  AndroidMessages.sendAMessage.setText(\"You have a meeting at 2 PM today\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Conditions not met.\");\n}", "intent": "When the EveryKit named \"MyDailyKit\" sends a message with the command \"SendReminders\" and the data \"Reminder: Meeting at 2 PM\", send an SMS to the phone number \"+1234567890\" with the text \"You have a meeting at 2 PM today\"."}
{"original_description": "활동코스 5교시에서 활용하세요.", "trigger_channel": "EveryKit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "everykit.trigger_fire"}, "trigger_details": [{"section": "Trigger fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger command\nText input", "description": "Text input", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "trigger_command", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Everykit.triggerFire.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Every kit name\nThe EveryKit that is selected.", "description": "The EveryKit that is selected.", "details": {"Slug": "which_every_kit", "Filter code": "Everykit.triggerFire.EveryKitName", "Type": "String", "Example": "Everykit"}}, {"section": "Ingredients", "title": "Message\nThe message that is sent.", "description": "The message that is sent.", "details": {"Slug": "what_message", "Filter code": "Everykit.triggerFire.Message", "Type": "String", "Example": "message"}}, {"section": "Ingredients", "title": "Data\nThe data that is sent.", "description": "The data that is sent.", "details": {"Slug": "data", "Filter code": "Everykit.triggerFire.Data", "Type": "String", "Example": "data"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyDailyKit\" \n    && Everykit.triggerFire.Message === \"StartActivity\" \n    && Everykit.triggerFire.CreatedAt.hour() === 14) {\n  IfNotifications.sendNotification.setMessage(\"It's time for activity class 5\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}", "intent": "When the EveryKit named \"MyDailyKit\" is triggered with the command \"StartActivity\" at 14:00, send a notification with the message \"It's time for activity class 5\"."}
{"original_description": "활동코스 2교시에서 활용하세요.", "trigger_channel": "EveryKit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "everykit.trigger_fire"}, "trigger_details": [{"section": "Trigger fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger command\nText input", "description": "Text input", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "trigger_command", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Everykit.triggerFire.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Every kit name\nThe EveryKit that is selected.", "description": "The EveryKit that is selected.", "details": {"Slug": "which_every_kit", "Filter code": "Everykit.triggerFire.EveryKitName", "Type": "String", "Example": "Everykit"}}, {"section": "Ingredients", "title": "Message\nThe message that is sent.", "description": "The message that is sent.", "details": {"Slug": "what_message", "Filter code": "Everykit.triggerFire.Message", "Type": "String", "Example": "message"}}, {"section": "Ingredients", "title": "Data\nThe data that is sent.", "description": "The data that is sent.", "details": {"Slug": "data", "Filter code": "Everykit.triggerFire.Data", "Type": "String", "Example": "data"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Everykit.triggerFire.EveryKitName === \"My Daily Kit\" && Everykit.triggerFire.Message === \"Reminder for activity class 2\" && Everykit.triggerFire.CreatedAt.getHours() === 14) {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Activity class 2 at 14:00 today\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for adding event to calendar.\");\n}", "intent": "When the EveryKit named \"My Daily Kit\" sends a message with the text \"Reminder for activity class 2\" at 14:00, quickly add an event to my Google Calendar named \"Personal\" with the text \"Activity class 2 at 14:00 today\"."}
{"original_description": "활동코스 4교시에서 활용하세요.", "trigger_channel": "EveryKit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "everykit.trigger_fire"}, "trigger_details": [{"section": "Trigger fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger command\nText input", "description": "Text input", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "trigger_command", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Everykit.triggerFire.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Every kit name\nThe EveryKit that is selected.", "description": "The EveryKit that is selected.", "details": {"Slug": "which_every_kit", "Filter code": "Everykit.triggerFire.EveryKitName", "Type": "String", "Example": "Everykit"}}, {"section": "Ingredients", "title": "Message\nThe message that is sent.", "description": "The message that is sent.", "details": {"Slug": "what_message", "Filter code": "Everykit.triggerFire.Message", "Type": "String", "Example": "message"}}, {"section": "Ingredients", "title": "Data\nThe data that is sent.", "description": "The data that is sent.", "details": {"Slug": "data", "Filter code": "Everykit.triggerFire.Data", "Type": "String", "Example": "data"}}], "action_channel": "MeisterTask", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "meistertask.create_a_task", "Filter code method": "Meistertask.createATask.skip(string?: reason)", "Runtime method": "runAction(\"meistertask.create_a_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which section?", "Slug": "section_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Meistertask.createATask.setTask Description(string: task_description)"}}], "filter_code": "if (Everykit.triggerFire.EveryKitName === \"Everykit\" && Everykit.triggerFire.Message === \"Start activity\" && Meta.currentUserTime.hour() === 10) {\n  Meistertask.createATask.setTaskName(\"Activity Time\");\n  Meistertask.createATask.setSectionId(\"To-Do\");\n  Meistertask.createATask.setTaskDescription(\"It's time for the 4th period activity\");\n} else {\n  Meistertask.createATask.skip(\"Conditions not met.\");\n}", "intent": "When the \"Everykit\" is selected and a message with the text \"Start activity\" is sent through the EveryKit block program at 10:00 AM, create a new task named \"Activity Time\" in the \"To-Do\" section of MeisterTask with the description \"It's time for the 4th period activity\"."}
{"original_description": "활동코스 5교시에서 활용하세요.", "trigger_channel": "EveryKit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "everykit.trigger_fire"}, "trigger_details": [{"section": "Trigger fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger command\nText input", "description": "Text input", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "trigger_command", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Everykit.triggerFire.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Every kit name\nThe EveryKit that is selected.", "description": "The EveryKit that is selected.", "details": {"Slug": "which_every_kit", "Filter code": "Everykit.triggerFire.EveryKitName", "Type": "String", "Example": "Everykit"}}, {"section": "Ingredients", "title": "Message\nThe message that is sent.", "description": "The message that is sent.", "details": {"Slug": "what_message", "Filter code": "Everykit.triggerFire.Message", "Type": "String", "Example": "message"}}, {"section": "Ingredients", "title": "Data\nThe data that is sent.", "description": "The data that is sent.", "details": {"Slug": "data", "Filter code": "Everykit.triggerFire.Data", "Type": "String", "Example": "data"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyEveryKit\" \n    && Everykit.triggerFire.Message === \"Start activity\" \n    && Everykit.triggerFire.CreatedAt.hour() === 10) {\n  AndroidDevice.muteDevice.setVibrate(\"vibrate\");\n} else {\n  AndroidDevice.muteDevice.skip(\"Conditions not met.\");\n}", "intent": "When the EveryKit named \"MyEveryKit\" sends a message with the content \"Start activity\" at 10:00 AM, mute the Android device \"Office Phone\" and set it to vibrate mode."}
{"original_description": "기능코스 8교시에서 활용하세요.", "trigger_channel": "EveryKit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "everykit.trigger_fire"}, "trigger_details": [{"section": "Trigger fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger command\nText input", "description": "Text input", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "trigger_command", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Everykit.triggerFire.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Every kit name\nThe EveryKit that is selected.", "description": "The EveryKit that is selected.", "details": {"Slug": "which_every_kit", "Filter code": "Everykit.triggerFire.EveryKitName", "Type": "String", "Example": "Everykit"}}, {"section": "Ingredients", "title": "Message\nThe message that is sent.", "description": "The message that is sent.", "details": {"Slug": "what_message", "Filter code": "Everykit.triggerFire.Message", "Type": "String", "Example": "message"}}, {"section": "Ingredients", "title": "Data\nThe data that is sent.", "description": "The data that is sent.", "details": {"Slug": "data", "Filter code": "Everykit.triggerFire.Data", "Type": "String", "Example": "data"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyEveryKit\" \n    && Everykit.triggerFire.Message === \"Reminder: 기능코스 8교시\" \n    && Everykit.triggerFire.CreatedAt.getHours() === 14) {\n  AndroidMessages.sendAMessage.setText(\"功能コース 8時限を開始してください\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+821012345678\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Conditions not met.\");\n}", "intent": "When the EveryKit named \"MyEveryKit\" sends a message with the content \"Reminder: 기능코스 8교시\" at 14:00, send an SMS to the phone number \"+821012345678\" with the text \"功能コース 8時限を開始してください\"."}
{"original_description": "Call our trigger hotline, enter your 3-digit trigger code and Scout Alarm disarms all modes.", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_call"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerCall.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerCall.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerCall.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerCall.TriggerCode", "Type": "String", "Example": "123"}}], "action_channel": "Scout Alarm", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "scoutalarm.disarm_all_modes", "Filter code method": "Scoutalarm.disarmAllModes.skip(string?: reason)", "Runtime method": "runAction(\"scoutalarm.disarm_all_modes\", {})"}, "action_details": [{"section": "Action fields", "title": "Location\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which location?", "Slug": "location_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" \n    && Woopla.triggerCall.PhoneNumber === \"+49203987654321\" \n    && Woopla.triggerCall.TriggerCode === \"123\") {\n  var hour = new Date(Woopla.triggerCall.CreatedAt).getHours();\n  if (hour >= 7 && hour < 22) {\n    Scoutalarm.disarmAllModes.setLocationId(\"Home\");\n  } else {\n    Scoutalarm.disarmAllModes.skip(\"Outside of allowed hours (07:00 to 22:00).\");\n  }\n} else {\n  Scoutalarm.disarmAllModes.skip(\"Invalid trigger details.\");\n}", "intent": "When I call the Woopla trigger hotline at +16282222790 from my phone number +49203987654321, and enter the 3-digit trigger code 123 during the call between 07:00 and 22:00, disarm all modes at my Scout Alarm location named \"Home\"."}
{"original_description": "Use this applet to run a Q Command to toggle a HUE Philips lamp", "trigger_channel": "Das Keyboard Q", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "daskeyboardq.deviceZoneAction"}, "trigger_details": [{"section": "Trigger fields", "title": "Pid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "pid", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Iot zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which zone?", "Helper text": "The name of a zone that you created in Q Command Center", "Slug": "iot_zone", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which action?", "Helper text": "The action that is being sent", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Daskeyboardq.deviceZoneAction.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Zone name\nThe zone that is being controlled", "description": "The zone that is being controlled", "details": {"Slug": "iot_zone", "Filter code": "Daskeyboardq.deviceZoneAction.ZoneName", "Type": "String", "Example": "Living Room"}}, {"section": "Ingredients", "title": "Action value\nThe value that is being set.", "description": "The value that is being set.", "details": {"Slug": "action_value", "Filter code": "Daskeyboardq.deviceZoneAction.ActionValue", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Device type\nThe type of device that was triggered.", "description": "The type of device that was triggered.", "details": {"Slug": "pid", "Filter code": "Daskeyboardq.deviceZoneAction.DeviceType", "Type": "String", "Example": "IOT_LIGHTING"}}, {"section": "Ingredients", "title": "Action type\nThe type of action that was triggered.", "description": "The type of action that was triggered.", "details": {"Slug": "action", "Filter code": "Daskeyboardq.deviceZoneAction.ActionType", "Type": "String", "Example": "set_value"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Daskeyboardq.deviceZoneAction.ZoneName === \"Living Room\" \n    && Daskeyboardq.deviceZoneAction.ActionType === \"set_value\" \n    && Daskeyboardq.deviceZoneAction.ActionValue === \"72\") {\n  Hue.toggleAllHue();\n} else {\n  Hue.toggleAllHue.skip(\"Conditions not met to toggle lights.\");\n}", "intent": "When the Das Keyboard Q device in the \"Living Room\" zone is triggered with the \"set_value\" action and the action value is \"72\", toggle all Philips Hue lights."}
{"original_description": "It will activate the wink shortcut when fetchit button is pressed.", "trigger_channel": "ThingaOS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tantiv4.when_fetchit_button_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Fetchit device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Device", "Helper text": "Select device name", "Slug": "fetchit_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Button event\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Button Event", "Helper text": "Select Button Event", "Slug": "button_event_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tantiv4.whenFetchitButtonPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nname of the device with which triggered", "description": "name of the device with which triggered", "details": {"Slug": "device_name", "Filter code": "Tantiv4.whenFetchitButtonPress.DeviceName", "Type": "String", "Example": "Name"}}, {"section": "Ingredients", "title": "Button name\nButton name", "description": "Button name", "details": {"Slug": "button_name", "Filter code": "Tantiv4.whenFetchitButtonPress.ButtonName", "Type": "String", "Example": "string"}}], "action_channel": "Wink: Shortcuts", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wink_shortcuts.activate_scene", "Filter code method": "WinkShortcuts.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"wink_shortcuts.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Tantiv4.whenFetchitButtonPress.ButtonName === \"Office Button\" && Tantiv4.whenFetchitButtonPress.DeviceName === \"Kitchen Fetchit\") {\n  WinkShortcuts.activateScene.setSceneId(\"Welcome Home\");\n} else {\n  WinkShortcuts.activateScene.skip(\"Incorrect button or device.\");\n}", "intent": "When the \"Office Button\" on device \"Kitchen Fetchit\" is pressed, activate the \"Welcome Home\" wink shortcut."}
{"original_description": "This applet lets you store presence information in Apilio, so you can know if someone has been detected by your SmartThings device to automate any home logic", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Someone_Is_Home\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Not the Bedroom sensor device.\");\n}", "intent": "When the Bedroom sensor device detects presence, toggle the \"Someone_Is_Home\" Apilio variable."}
{"original_description": "Notify me when my INSTAR Cloud storage is full.", "trigger_channel": "INSTAR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instar.storage_full"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instar.storageFull.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "IfNotifications.sendNotification.setMessage(\"INSTAR Cloud storage is full\");", "intent": "Send a notification with the message \"INSTAR Cloud storage is full\" when my INSTAR Cloud storage reaches its limit at any time, using the Notifications channel."}
{"original_description": "Turn off a Smart Home Solution device when Motion stops being detected.", "trigger_channel": "Aerial Technologies", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AerialTechnologies.motion_detection_motion_stopped"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event", "description": "Type of event", "details": {"Slug": "type", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Type", "Type": "String", "Example": "motionDetection.humanMotion.stopped"}}, {"section": "Ingredients", "title": "Serial\nSerial", "description": "Serial", "details": {"Slug": "serial", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Serial", "Type": "String", "Example": "ABCDEF"}}, {"section": "Ingredients", "title": "Id\nEvent identifier", "description": "Event identifier", "details": {"Slug": "id", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Id", "Type": "String", "Example": "uuid"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_off", "Filter code method": "SmartHomeSolution.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The name of the device to turn off", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AerialTechnologies.motionDetectionMotionStopped.Type === \"motionDetection.humanMotion.stopped\" && AerialTechnologies.motionDetectionMotionStopped.Serial === \"ABCDEF\") {\n  SmartHomeSolution.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  SmartHomeSolution.turnDeviceOff.skip(\"Conditions not met to turn off the device.\");\n}", "intent": "Turn off the Smart Home Solution device at address \"Living Room Lamp\" when motion stops being detected by the Aerial Technologies sensor with serial number \"ABCDEF\", which is triggered when the type of event is \"motionDetection.humanMotion.stopped\"."}
{"original_description": "This Applet will turn on the light everyday at 6:00pm, or any time you set.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Cloud Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "link_smart_home.Light-LightSwitch", "Filter code method": "LinkSmartHome.lightLightSwitch.skip(string?: reason)", "Runtime method": "runAction(\"link_smart_home.Light-LightSwitch\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turns on or off?", "Slug": "value", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 18 && minute === 0) {\n  LinkSmartHome.lightLightSwitch.setDeviceId(\"Living Room Light\");\n  LinkSmartHome.lightLightSwitch.setValue(\"on\");\n} else {\n  LinkSmartHome.lightLightSwitch.skip(\"Not 6:00 PM\");\n}", "intent": "Turn on the Living Room Light every day at 6:00 PM."}
{"original_description": "You will receive a text message if a client disconnects from your router.", "trigger_channel": "D-Link Wi-Fi Router", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dlink_wifi_router.routerClientDisconnect"}, "trigger_details": [{"section": "Trigger fields", "title": "Client name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which client?", "Slug": "client_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "DlinkWifiRouter.routerClientDisconnect.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Client name\nThe name of the client disconnected.", "description": "The name of the client disconnected.", "details": {"Slug": "client_name", "Filter code": "DlinkWifiRouter.routerClientDisconnect.ClientName", "Type": "String", "Example": "computer"}}, {"section": "Ingredients", "title": "Device name\nThe device that reported the event.", "description": "The device that reported the event.", "details": {"Slug": "device_name", "Filter code": "DlinkWifiRouter.routerClientDisconnect.DeviceName", "Type": "String", "Example": "DIR-2660"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "AndroidMessages.sendAMessage.setText(\"Client \" + DlinkWifiRouter.routerClientDisconnect.ClientName + \" has disconnected from the \" + DlinkWifiRouter.routerClientDisconnect.DeviceName + \" router at \" + DlinkWifiRouter.routerClientDisconnect.CreatedAt);\nAndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");", "intent": "Send a text message to phone number +1234567890 with the message \"Client computer has disconnected from the DIR-2660 router at 04:17:06+05:00\" when a client disconnects from the D-Link Wi-Fi Router."}
{"original_description": "Turn a device on when Motion is detected.", "trigger_channel": "Aerial Technologies", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AerialTechnologies.motion_detection_motion_started"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event", "description": "Type of event", "details": {"Slug": "type", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Type", "Type": "String", "Example": "motionDetection.motion.started"}}, {"section": "Ingredients", "title": "Serial\nSerial", "description": "Serial", "details": {"Slug": "serial", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Serial", "Type": "String", "Example": "ABCDEF"}}, {"section": "Ingredients", "title": "Id\nEvent identifier", "description": "Event identifier", "details": {"Slug": "id", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Id", "Type": "String", "Example": "uuid"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_on", "Filter code method": "SmartHomeSolution.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The device name", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar serialNumber = AerialTechnologies.motionDetectionMotionStarted.Serial;\nif (serialNumber === \"ABCDEF\" && hour >= 7 && hour < 22) {\n  SmartHomeSolution.turnDeviceOn.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Either not the correct device or outside of desired hours.\");\n}", "intent": "Turn on the Living Room Lamp when motion is detected by the device with serial number ABCDEF between 07:00 and 22:00."}
{"original_description": "If your SmartThings device is opened, then turn off your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_spotcam", "Filter code method": "Spotcam.turnOnSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.skip(\"Bedroom contact SmartThings device is opened.\");\n}", "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn off the SpotCam with serial number S123456 automatically."}
{"original_description": "Turn Off any device in ThingaOS hub on leave from room.", "trigger_channel": "LinkDesk", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "linkdesk.leave_room"}, "trigger_details": [{"section": "Trigger fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Helper text": "e.g. living room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Linkdesk.leaveRoom.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Room name\nName of the room that was left.", "description": "Name of the room that was left.", "details": {"Slug": "room_name", "Filter code": "Linkdesk.leaveRoom.RoomName", "Type": "String", "Example": "Bedroom"}}], "action_channel": "ThingaOS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tantiv4.turn_on_off", "Filter code method": "Tantiv4.turnOnOff.skip(string?: reason)", "Runtime method": "runAction(\"tantiv4.turn_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Device", "Helper text": "Turn On/Off action will be sent to the device selected by user.", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn device On/Off", "Helper text": "Update device status to be On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Linkdesk.leaveRoom.RoomName === \"living room\") {\n  if (ThingaOS.selectedDevice === \"Office Lamp\") {\n    Tantiv4.turnOnOff.setTurnOnOff(\"off\");\n  } else {\n    Tantiv4.turnOnOff.skip(\"Selected device is not Office Lamp.\");\n  }\n} else {\n  Tantiv4.turnOnOff.skip(\"Not leaving the living room.\");\n}", "intent": "When leaving the living room, turn off the Office Lamp device in ThingaOS hub."}
{"original_description": "Use the IFTTT app button widget to turn off a device with one click.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Powered by Viva", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "viva.turn_device_off", "Filter code method": "Viva.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"viva.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The name of the device to turn off", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && \n    DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\" && \n    DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\") {\n  Viva.turnDeviceOff.setdevice_address(\"Living Room Lamp\");\n} else {\n  Viva.turnDeviceOff.skip(\"Conditions not met.\");\n}", "intent": "Turn off the Living Room Lamp device when the IFTTT app button is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, occurring at 2020-07-08T04:17:06+05:00."}
{"original_description": "When you turn on your conference room to start a meeting, mute your smartphone to not be disturbed.", "trigger_channel": "iotty Smart Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "iottysmarthome.device_on_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which iotty device was turned on, off, or pressed?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Light state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Check whether the iotty device is on, off, or has been pressed", "Slug": "light_state", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Source\nWas the device turned on manually, by iotty App, or by some smart home platforms?", "description": "Was the device turned on manually, by iotty App, or by some smart home platforms?", "details": {"Slug": "source", "Filter code": "Iottysmarthome.deviceOnOff.Source", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Device name\nThe name of your iotty device", "description": "The name of your iotty device", "details": {"Slug": "device_name", "Filter code": "Iottysmarthome.deviceOnOff.DeviceName", "Type": "String", "Example": "Living Room Light"}}, {"section": "Ingredients", "title": "Created at\nThe exact date and hour when the event happened", "description": "The exact date and hour when the event happened", "details": {"Slug": "created_at", "Filter code": "Iottysmarthome.deviceOnOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Light state\nThe state of the iotty Smart Switch light (on or off)", "description": "The state of the iotty Smart Switch light (on or off)", "details": {"Slug": "light_state", "Filter code": "Iottysmarthome.deviceOnOff.LightState", "Type": "String", "Example": "on"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "if (Iottysmarthome.deviceOnOff.DeviceName === \"Conference Room Light\" && Iottysmarthome.deviceOnOff.Source === \"iotty App\" && Iottysmarthome.deviceOnOff.LightState === \"on\") {\n  AndroidDevice.muteDevice.skip(\"Muting smartphone for a meeting in the conference room.\");\n}", "intent": "When the conference room light, named \"Conference Room Light\", is turned on through the iotty App, mute the smartphone to prevent distractions during meetings."}
{"original_description": "This applet lets Apilio know if a specific SmartThings device has been opened, and saves this information to a variable.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"FrontDoorStatus\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Device is not Bedroom contact\");\n}", "intent": "When the Bedroom contact device in SmartThings is opened at any time, update the Apilio variable identified as \"FrontDoorStatus\" to toggle its current state between true and false."}
{"original_description": "When a specific person unlocks the door then Turn ON/OFF Nexus Home Devices\n", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.devices", "Filter code method": "BrilliantNexus.devices.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.devices\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Select any of the Brilliant Nexus device", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your device", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.devices.setStatus(string: status)"}}], "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" && \n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" && \n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.devices.setStatus(\"ON\");\n} else {\n  BrilliantNexus.devices.skip(\"Conditions not met to turn ON the device.\");\n}", "intent": "When John Smith unlocks the Front Door at the San Diego beach house, then turn ON the Living Room Lights device."}
{"original_description": "Get a message when there is a new top story on Hacker News.", "trigger_channel": "Hacker News", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hacker_news.new_top_story"}, "trigger_details": [{"section": "Trigger fields", "title": "Search\nText input > Other", "description": "Text input > Other", "details": {"Label": "Matching search term", "Helper text": "Optional. Searches for new top stories matching the search term.", "Slug": "search", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HackerNews.newTopStory.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Username\nThe user who posted the story.", "description": "The user who posted the story.", "details": {"Slug": "username", "Filter code": "HackerNews.newTopStory.Username", "Type": "String", "Example": "pg"}}, {"section": "Ingredients", "title": "Points\nThe number of points that the post has.", "description": "The number of points that the post has.", "details": {"Slug": "score", "Filter code": "HackerNews.newTopStory.Points", "Type": "String", "Example": "96"}}, {"section": "Ingredients", "title": "Story url\nThe URL to the story on Hacker News.", "description": "The URL to the story on Hacker News.", "details": {"Slug": "url", "Filter code": "HackerNews.newTopStory.StoryUrl", "Type": "String", "Example": "https://news.ycombinator.com/item?id=10346551"}}, {"section": "Ingredients", "title": "Title\nThe title of the story.", "description": "The title of the story.", "details": {"Slug": "title", "Filter code": "HackerNews.newTopStory.Title", "Type": "String", "Example": "Developing with Docker at IFTTT"}}, {"section": "Ingredients", "title": "Comments count\nThe number of comments.", "description": "The number of comments.", "details": {"Slug": "comments_count", "Filter code": "HackerNews.newTopStory.CommentsCount", "Type": "String", "Example": "28"}}, {"section": "Ingredients", "title": "Text\nIf the story is a self post, this ingredient will contain that text.", "description": "If the story is a self post, this ingredient will contain that text.", "details": {"Slug": "text", "Filter code": "HackerNews.newTopStory.Text", "Type": "String", "Example": "What do you think about this framework?"}}, {"section": "Ingredients", "title": "External url\nIf the story links to an external website, this ingredient will contain that URL.", "description": "If the story links to an external website, this ingredient will contain that URL.", "details": {"Slug": "external_url", "Filter code": "HackerNews.newTopStory.ExternalUrl", "Type": "Web URL", "Example": "https://medium.com/engineering-at-ifttt/developing-with-docker-at-ifttt-5bd03b4e597c"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (HackerNews.newTopStory.Points > 50 && HackerNews.newTopStory.Title.includes(\"AI\")) {\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Top Story on Hacker News\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`A new top story has been posted on Hacker News: ${HackerNews.newTopStory.Title} (${HackerNews.newTopStory.StoryUrl}) by ${HackerNews.newTopStory.Username} with ${HackerNews.newTopStory.Points} points and ${HackerNews.newTopStory.CommentsCount} comments`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Does not meet the conditions.\");\n}", "intent": "Get a notification in the Microsoft Teams channel \"#general\" when a new top story is posted on Hacker News with more than 50 points and containing the keyword \"AI\", and send a message with the subject \"New Top Story on Hacker News\" and the body \"A new top story has been posted on Hacker News: {{title}} ({{url}}) by {{username}} with {{score}} points and {{comments_count}} comments\", marked as Important."}
{"original_description": "Press this button to cancel all orders that are currently open.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.cancel_open_orders", "Filter code method": "Alpaca.cancelOpenOrders.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.cancel_open_orders\", {})"}, "action_details": [], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 9 && hour <= 17) {\n  Alpaca.cancelOpenOrders.skip(\"Canceling all open orders as per button press at specified location and time.\");\n}", "intent": "When the button is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 09:00 and 17:00, cancel all open orders on Alpaca immediately."}
{"original_description": "One-button widget/trigger to set a Nuheat thermostat to a user-defined temperature indefinitely. ", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "nVent Nuheat Signature Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nVent_Nuheat.set_temperature", "Filter code method": "NVentNuheat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"nVent_Nuheat.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to set the temperature for", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.setTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Setpoint temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What setpoint temperature?", "Helper text": "The setpoint temperature", "Slug": "setpoint_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.setTemperature.setSetpoint Temperature(string: setpoint_temperature)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "What duration?", "Helper text": "The time to hold the temperature until", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "NVentNuheat.setTemperature.setDuration(string: duration)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL === \"https://ifttt.com/share/your_comfort_button_widget_url\") {\n  NVentNuheat.setTemperature.setThermostat(\"Living Room\");\n  NVentNuheat.setTemperature.setScale(\"Celsius\");\n  NVentNuheat.setTemperature.setSetpointTemperature(\"22\");\n  NVentNuheat.setTemperature.setDuration(\"indefinitely\");\n}", "intent": "Set the living room Nuheat thermostat to 22°C indefinitely when the \"Comfort\" button widget is pressed."}
{"original_description": "This applet turns all your Philips Hue lights off when a routine (scene) is activated. By using this applet you can turn all your Philips Hue lights off by f.e. pressing your Niko Home Control All-off button", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (Nikohomecontrol.routineActivated.Routine === \"Goodnight\" && hour === 22 && minute === 0) {\n  Hue.turnOffAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Conditions not met\");\n}", "intent": "Turn off all Philips Hue lights in the living room when the \"Goodnight\" routine is activated on Niko Home Control at 22:00."}
{"original_description": "User can Turn On any device present in ThingaOS Hub on entering a room", "trigger_channel": "LinkDesk", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "linkdesk.enter_room"}, "trigger_details": [{"section": "Trigger fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Helper text": "e.g. living room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Linkdesk.enterRoom.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Room name\nName of the Room that was entered.", "description": "Name of the Room that was entered.", "details": {"Slug": "room_name", "Filter code": "Linkdesk.enterRoom.RoomName", "Type": "String", "Example": "Bedroom"}}], "action_channel": "ThingaOS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tantiv4.turn_on_off", "Filter code method": "Tantiv4.turnOnOff.skip(string?: reason)", "Runtime method": "runAction(\"tantiv4.turn_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Device", "Helper text": "Turn On/Off action will be sent to the device selected by user.", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn device On/Off", "Helper text": "Update device status to be On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Linkdesk.enterRoom.RoomName !== \"living room\") {\n  Tantiv4.turnOnOff.skip(\"Not entering the living room.\");\n} else if (Tantiv4.getDeviceByName(\"TV\") === null) {\n  Tantiv4.turnOnOff.skip(\"TV device not found in ThingaOS Hub.\");\n} else {\n  Tantiv4.turnOnOff.setDeviceName(\"TV\");\n  Tantiv4.turnOnOff.setTurnOnOff(true);\n}", "intent": "When a user enters the living room, as detected by LinkDesk, turn on the TV device connected to ThingaOS Hub."}
{"original_description": "Disarm your INSTAR cameras alarm at a specific time of the day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.m_detect_off", "Filter code method": "Instar.mDetectOff.skip(string?: reason)", "Runtime method": "runAction(\"instar.m_detect_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:30\";\nif (time.slice(-8) === targetTime) {\n  Instar.mDetectOff.setCamName(\"Living Room Camera\");\n} else {\n  Instar.mDetectOff.skip(\"Not the scheduled disarm time.\");\n}", "intent": "Disarm the \"Living Room Camera\" INSTAR camera alarm every day at 07:30."}
{"original_description": "When SmartThings detects a presence, then turn on a ceiling fan.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Fansync.onOff.setDevice(\"Living Room ceiling fan\");\n  Fansync.onOff.setOn(true);\n}", "intent": "When the Bedroom sensor device detects presence, as reported by SmartThings at any time, then turn on the Living Room ceiling fan device using Fanimation."}
{"original_description": "Turn OFF Nexus Home lights when someone locks August lock", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.lights", "Filter code method": "BrilliantNexus.lights.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.lights\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Please select any of the Light", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your light", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.lights.setStatus(string: status)"}}], "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  BrilliantNexus.lights.setStatus(\"OFF\");\n}", "intent": "Turn off the Nexus Home lights in the Living Room when John Smith locks the Front Door lock at the San Diego beach house."}
{"original_description": "Share feed item to Microsoft Teams channel.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.EntryTitle === \"Launch Day!\") {\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"team_id\", \"channel_id\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Blog Post\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`New post by ${Feed.newFeedItem.EntryAuthor}: ${Feed.newFeedItem.EntryTitle}\\n\\n${Feed.newFeedItem.EntryContent}`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Feed or entry title does not match.\");\n}", "intent": "When a new item titled \"Launch Day!\" is published in the \"ifttt Blog\" feed, share it to the \"#general\" channel in Microsoft Teams with the subject \"New Blog Post\" and the message body containing the entry title, author, and content. Set the message urgency to \"Important\"."}
{"original_description": "When you post a new photo to Instagram, send it to Microsoft Teams. Perfect for sharing your company's social posts with a team.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (Instagram.anyNewPhotoByYou.Caption === \"Company Update\" && Instagram.anyNewPhotoByYou.CreatedAt.hour() > 8) {\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"your_team_id\", \"your_channel_id\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Company Post\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`Check out our latest company update: ${Instagram.anyNewPhotoByYou.Url}`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Conditions not met.\");\n}", "intent": "When you post a new photo to Instagram with the caption \"Company Update\" and it was taken after 08:00, send a message to the #general channel in Microsoft Teams with the subject \"New Company Post\" and the message body \"Check out our latest company update: http://instagr.am/p/CTGBw/\", marking the message as Important."}
{"original_description": "If your SmartThings device presence no longer detected then turn on SpotCam alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_alert", "Filter code method": "Spotcam.turnOnAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\" && !SmartthingsV2.newPresentSmartthings.ArrivedAt) {\n  Spotcam.turnOnAlert.setSn(\"S123456\");\n} else {\n  Spotcam.turnOnAlert.skip(\"Device presence detected or not Bedroom sensor.\");\n}", "intent": "If the Bedroom sensor device presence is no longer detected in SmartThings, then turn on the SpotCam alert automatically for the device with serial number S123456."}
{"original_description": "Send photos you post on Instagram to a Discord channel. ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Discord", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "discord.post_message_to_channel", "Filter code method": "Discord.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"discord.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which Channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Helper text": "Max limit of 2000 characters. To @mention roles, find the role ID in Discord by running `\\@role`. Ex. 'Hello &lt;@&amp;1234&gt;'", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Allowable mentions\nDropdown list", "description": "Dropdown list", "details": {"Label": "Allowable mentions", "Helper text": "Allows usage of @everyone, &lt;@&amp;(Role ID)&gt;, and &lt;@(User ID)&gt; in the message body", "Slug": "allowable_mentions", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setAllowable Mentions(string: allowable_mentions)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var caption = Instagram.anyNewPhotoByYou.Caption;\n  if (caption === \"A cool photo\") {\n    var url = Instagram.anyNewPhotoByYou.Url;\n    Discord.postMessageToChannel.setChannel(\"general\");\n    Discord.postMessageToChannel.setMessage(\"New photo posted: \" + url);\n    Discord.postMessageToChannel.setAllowableMentions(\"@everyone\");\n  } else {\n    Discord.postMessageToChannel.skip(\"Caption does not match.\");\n  }\n} else {\n  Discord.postMessageToChannel.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When you post a new photo on Instagram with a caption like \"A cool photo\" and it's between 07:00 and 19:00, send the photo's short URL to the Discord channel #general with a message saying \"New photo posted: http://instagr.am/p/CTGBw/\" and allow @everyone mentions."}
{"original_description": "Disarm the alarm system.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Uplink Remote", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "uplinkremote.armaction", "Filter code method": "Uplinkremote.armaction.skip(string?: reason)", "Runtime method": "runAction(\"uplinkremote.armaction\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (lat === \"37.82666360000001\" && lon === \"-122.42301220000003\" && hour >= 7 && hour < 19) {\n  Uplinkremote.armaction.setSerialNumber(\"Office Security System\");\n} else {\n  Uplinkremote.armaction.skip(\"Location or time does not match the disarm criteria.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, disarm the Uplink Remote device named \"Office Security System\" if the button press occurs between 07:00 and 19:00."}
{"original_description": "Automatically turn on your lights at the same time when disarming the system.", "trigger_channel": "Uplink Remote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uplinkremote.armtrigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Notification date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "notification_date", "Filter code": "Uplinkremote.armtrigger.NotificationDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event description\nEvent description", "description": "Event description", "details": {"Slug": "message", "Filter code": "Uplinkremote.armtrigger.EventDescription", "Type": "String", "Example": "Panel is Armed"}}, {"section": "Ingredients", "title": "Device name\nName of unit", "description": "Name of unit", "details": {"Slug": "serial_number", "Filter code": "Uplinkremote.armtrigger.DeviceName", "Type": "String", "Example": "John's Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Uplinkremote.armtrigger.NotificationDate.hour();\nvar deviceName = Uplinkremote.armtrigger.DeviceName;\nvar eventDescription = Uplinkremote.armtrigger.EventDescription;\n\nif (deviceName === \"John's Home\" && eventDescription === \"Panel is Disarmed\" && hour >= 6 && hour <= 22) {\n  Hue.turnOnAllHue.setLights(\"living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the security system is disarmed at John's Home between 06:00 and 22:00, as indicated by the Uplink Remote arm trigger event description \"Panel is Disarmed\", automatically turn on all Philips Hue lights in the living room."}
{"original_description": "Turn on Lutron scene when you arm or disarm your Blue by ADT system. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.issues"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.issues.EventType", "Type": "String", "Example": "System Armed"}}, {"section": "Ingredients", "title": "Formatted message\nThis describes the details of the event", "description": "This describes the details of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.issues.FormattedMessage", "Type": "String", "Example": "System Armed Away by Master User"}}, {"section": "Ingredients", "title": "Timestamp\nThis is the time that the event occurred", "description": "This is the time that the event occurred", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.issues.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_scene", "Filter code method": "LutronCasetaWireless.setScene.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.issues.EventType === \"System Disarmed\" && Bluebyadt.issues.FormattedMessage.includes(\"Master User\")) {\n  LutronCasetaWireless.setScene(\"Welcome Home\");\n} else if (Bluebyadt.issues.EventType === \"System Armed Away\") {\n  LutronCasetaWireless.setScene(\"Goodnight\");\n}", "intent": "Turn on the 'Welcome Home' Lutron scene when the Blue by ADT system is disarmed by the Master User, and turn on the 'Goodnight' Lutron scene when the system is armed away."}
{"original_description": "Button applet allows you to arm Blink. ", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Blink.networkDisarm.setNetwork(\"Home Security\");\n  var notificationMessage = \"Armed Blink system at location: \" + DoButton.doButtonNewCommandCommon.LocationMapImageURL + \". Share URL: \" + DoButton.doButtonNewCommandCommon.ShareURL + \". Triggered at: \" + DoButton.doButtonNewCommandCommon.OccurredAt;\n  // Assuming there's a method to send notifications, replace this with actual method\n  // NotificationService.sendNotification(notificationMessage);\n} else {\n  Blink.networkDisarm.skip(\"Location does not match.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, arm the Blink system named \"Home Security\" and send a notification with the share URL https://ifttt.com/share/McFwJfDH9Ns and a map image of the location http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667 to confirm the action was triggered at the occurred time 2020-07-08T04:17:06+05:00."}
{"original_description": "Turn On Nexus Home Lights when someone unlocks August Lock ", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.lights", "Filter code method": "BrilliantNexus.lights.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.lights\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Please select any of the Light", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your light", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.lights.setStatus(string: status)"}}], "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\") {\n  BrilliantNexus.lights.setStatus(\"on\");\n} else {\n  BrilliantNexus.lights.skip(\"Lock or house does not match.\");\n}", "intent": "Turn on the Nexus Home Lights device named \"Living Room Lamp\" when someone unlocks the August Lock named \"Front Door\" at the \"San Diego Beach House\"."}
{"original_description": "If the Anyware Intrusion Alert is triggered, then blink my LIFX light 10 times for maximized stress effect on the burglar.", "trigger_channel": "Anyware Services", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AnywareServices.intrusion_alert"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AnywareServices.intrusionAlert.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Location\nWhere intrusion was detected", "description": "Where intrusion was detected", "details": {"Slug": "location", "Filter code": "AnywareServices.intrusionAlert.Location", "Type": "String", "Example": "Home"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (AnywareServices.intrusionAlert.Location === \"Home\") {\n  Lifx.blink.setNumberOFBlinks(\"10\");\n  Lifx.blink.setBrightness(\"Maximum\");\n  Lifx.blink.setColor(\"Red\");\n  Lifx.blink.setBlinkIfOff(\"Yes\");\n}", "intent": "When an intrusion alert is detected at my Home location, blink the Living Room light 10 times with maximum brightness and a red color to maximize the stress effect on the burglar, even if the light is turned off."}
{"original_description": "Automatically turn off your lights at the same time when arming the system.", "trigger_channel": "Uplink Remote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uplinkremote.armtrigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Notification date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "notification_date", "Filter code": "Uplinkremote.armtrigger.NotificationDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event description\nEvent description", "description": "Event description", "details": {"Slug": "message", "Filter code": "Uplinkremote.armtrigger.EventDescription", "Type": "String", "Example": "Panel is Armed"}}, {"section": "Ingredients", "title": "Device name\nName of unit", "description": "Name of unit", "details": {"Slug": "serial_number", "Filter code": "Uplinkremote.armtrigger.DeviceName", "Type": "String", "Example": "John's Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Uplinkremote.armtrigger.EventDescription === \"Panel is Armed\" && Uplinkremote.armtrigger.DeviceName === \"John's Home\") {\n  Hue.turnOffAllHue.setLights([\"Living Room\", \"Kitchen\"]);\n}", "intent": "When the security system is armed at John's Home, as indicated by the event description \"Panel is Armed\" from the Uplink Remote device, automatically turn off all lights in the living room and kitchen."}
{"original_description": "When SmartThings detects a presence, then turn on a ceiling fan.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Aisync.onOff.setDevice(\"Living Room ceiling fan\");\n  Aisync.onOff.setOnOff(\"on\");\n}", "intent": "When the Bedroom sensor detects presence, turn on the Living Room ceiling fan."}
{"original_description": "When a Samsung SmartThings IoT sensor detects a device presence, share a custom voice alert with an Orion Group.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Living Room Motion Sensor\") {\n  Orion.sendVoiceMessage.setMessage(\"Someone has entered the living room\");\n  Orion.sendVoiceMessage.setGroup(\"Family Alerts\");\n  Orion.sendVoiceMessage.setUser(\"everyone\");\n} else {\n  Orion.sendVoiceMessage.skip(\"Device is not the Living Room Motion Sensor.\");\n}", "intent": "When the Samsung SmartThings IoT sensor detects presence from the \"Living Room Motion Sensor\" device, share a custom voice alert with the Orion Group \"Family Alerts\" saying \"Someone has entered the living room\" to everyone in the group."}
{"original_description": "When ZenEye motion detected, ASUS Router firmware update.", "trigger_channel": "ASUS ZenEye", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asuszeneye.asus_motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Camera list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name", "Helper text": "Camera Name", "Slug": "camera_list", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asuszeneye.asusMotion.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ASUS Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "asusrouter.check_new_firmware_and_upgrade", "Filter code method": "Asusrouter.checkNewFirmwareAndUpgrade.skip(string?: reason)", "Runtime method": "runAction(\"asusrouter.check_new_firmware_and_upgrade\", {})"}, "action_details": [], "filter_code": "var cameraName = Asuszeneye.asusMotion.CameraName;\nif (cameraName !== \"Front Door\") {\n  Asusrouter.checkNewFirmwareAndUpgrade.skip(\"Motion detected by a different camera.\");\n}", "intent": "When motion is detected by the ASUS ZenEye camera named \"Front Door\" at any time, check for and install new firmware updates on the ASUS Router."}
{"original_description": "Arm your INSTAR cameras alarm at a specific time of the day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.m_detect_on", "Filter code method": "Instar.mDetectOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.m_detect_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (checkTime === targetTime) {\n  Instar.mDetectOn.setCamName(\"Front Door Camera\");\n} else {\n  Instar.mDetectOn.skip(\"Not the targeted time for arming the camera.\");\n}", "intent": "Arm the \"Front Door Camera\" INSTAR camera alarm every day at 8:00 PM."}
{"original_description": "Arm the alarm system.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Uplink Remote", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "uplinkremote.armaction", "Filter code method": "Uplinkremote.armaction.skip(string?: reason)", "Runtime method": "runAction(\"uplinkremote.armaction\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  var occurredAt = new Date(DoButton.doButtonNewCommandCommon.OccurredAt);\n  var hour = occurredAt.getHours();\n  if (hour >= 7 && hour < 22) {\n    Uplinkremote.armaction.setSerialNumber(\"Home Security\");\n    console.log(\"Arming Home Security alarm system. Share URL: \" + DoButton.doButtonNewCommandCommon.ShareURL);\n  } else {\n    Uplinkremote.armaction.skip(\"Outside of armable hours (7 AM to 10 PM).\");\n  }\n} else {\n  Uplinkremote.armaction.skip(\"Incorrect location.\");\n}", "intent": "Arm the \"Home Security\" alarm system when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, which occurs between 07:00 and 22:00, and log the event with the share URL https://ifttt.com/share/McFwJfDH9Ns."}
{"original_description": "RSS feed to note card", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Zoho Notebook", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "notebook.create_link_card", "Filter code method": "Notebook.createLinkCard.skip(string?: reason)", "Runtime method": "runAction(\"notebook.create_link_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Notebook name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Notebook", "Slug": "notebook_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Notecard name\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notecard Name", "Slug": "notecard_name", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createLinkCard.setNotecard Name(string: notecard_name)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "LINK URL", "Slug": "link_url", "Required": "true", "Can have default value": "true", "Filter code method": "Notebook.createLinkCard.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Tags\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "TAGS", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createLinkCard.setTags(string: tags)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\") {\n  Notebook.createLinkCard.setNotecardName(Feed.newFeedItem.EntryTitle);\n  Notebook.createLinkCard.setLinkUrl(Feed.newFeedItem.EntryUrl);\n  Notebook.createLinkCard.setTags(\"News, Updates\");\n} else {\n  Notebook.createLinkCard.skip(\"The RSS feed is not from the 'ifttt Blog'.\");\n}", "intent": "Create a new link card in my \"Personal Notes\" notebook on Zoho Notebook with the notecard name set to the Entry Title from the RSS feed, the link URL set to the Entry Url, and add tags \"News\" and \"Updates\" whenever a new item is published in the \"ifttt Blog\" RSS feed."}
{"original_description": "Turns off motion detection at the same time every weekday.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Wyze", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wyzecam.turn_off_alarm", "Filter code method": "Wyzecam.turnOffAlarm.skip(string?: reason)", "Runtime method": "runAction(\"wyzecam.turn_off_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() === 8 && DateAndTime.everyWeekdayAt.CheckTime.minute() === 0) {\n  Wyzecam.turnOffAlarm.setSerializeDeviceInfo(\"Office Camera\");\n} else {\n  Wyzecam.turnOffAlarm.skip(\"Not the scheduled time for turning off motion detection.\");\n}", "intent": "Turn off the motion detection on the Wyze Cam device labeled \"Office Camera\" every weekday at 8:00 AM."}
{"original_description": "Sent me an email with the number of INSTAR Cloud alarm uploads every day at a specified time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.cloud_alarm_count", "Filter code method": "Instar.cloudAlarmCount.skip(string?: reason)", "Runtime method": "runAction(\"instar.cloud_alarm_count\", {})"}, "action_details": [], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar currentHour = currentTime.hour();\nif (currentHour !== 8) {\n  Instar.cloudAlarmCount.skip(\"Not 8:00 AM\");\n} else {\n  var yesterday = Meta.currentTime.yesterday();\n  var uploadsYesterday = Instar.cloudAlarmCount(yesterday);\n  Gmail.sendEmail.setSubject(\"INSTAR Cloud Alarm Uploads for \" + yesterday.format(\"MMMM d, yyyy\"));\n  Gmail.sendEmail.setMessage(\"There were \" + uploadsYesterday + \" INSTAR Cloud alarm uploads yesterday.\");\n}", "intent": "Send me an email every day at 8:00 AM with the total number of INSTAR Cloud alarm uploads from the previous day."}
{"original_description": "Automatically open garage door when Bouncie-enabled vehicle enter geo-circle", "trigger_channel": "Bouncie", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bouncie.geo_circle_enter"}, "trigger_details": [{"section": "Trigger fields", "title": "Circle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Circle", "Helper text": "The Geo circle that was crossed.", "Slug": "circle", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Bouncie.geoCircleEnter.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Vehicle name\nThe name of the vehicle that crossed a circle", "description": "The name of the vehicle that crossed a circle", "details": {"Slug": "vehicle_name", "Filter code": "Bouncie.geoCircleEnter.VehicleName", "Type": "String", "Example": "Sarah's Subaru"}}, {"section": "Ingredients", "title": "Circle name\nThe name of the circle that was crossed.", "description": "The name of the circle that was crossed.", "details": {"Slug": "circle_name", "Filter code": "Bouncie.geoCircleEnter.CircleName", "Type": "String", "Example": "Home"}}, {"section": "Ingredients", "title": "Time\nThe time of the circle breach as recorded by the Bouncie.", "description": "The time of the circle breach as recorded by the Bouncie.", "details": {"Slug": "time", "Filter code": "Bouncie.geoCircleEnter.Time", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bouncie.geoCircleEnter.CircleName === \"Home\" && Bouncie.geoCircleEnter.VehicleName === \"Sarah's Subaru\") {\n  Garadget.openDoor.setDoorId(\"Main Entrance\");\n} else {\n  Garadget.openDoor.skip(\"Condition not met.\");\n}", "intent": "Open the garage door labeled \"Main Entrance\" when Sarah's Subaru enters the geo-circle named \"Home\"."}
{"original_description": "Use this applet to save the note you take on Evernote into your Histre notebook.", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Histre", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "histre.add_note", "Filter code method": "Histre.addNote.skip(string?: reason)", "Runtime method": "runAction(\"histre.add_note\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setUrl(string: url)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setNote(string: note)"}}], "filter_code": "if (Evernote.newNoteInNotebook.Title === \"Today's Meeting Notes\" \n    && Evernote.newNoteInNotebook.Tags.includes(\"meeting\") \n    && Evernote.newNoteInNotebook.Tags.includes(\"work\") \n    && Evernote.newNoteInNotebook.Tags.includes(\"important\")) {\n  Histre.addNote.setTitle(\"Meeting Summary\");\n  Histre.addNote.setNote(Evernote.newNoteInNotebook.BodyHTML + \"\\nPublic URL: \" + Evernote.newNoteInNotebook.PublicUrl);\n  Histre.addNote.setUrl(Evernote.newNoteInNotebook.PublicUrl);\n} else {\n  Histre.addNote.skip(\"Note does not match the specified title or tags.\");\n}", "intent": "When a new note titled \"Today's Meeting Notes\" is created in the Evernote notebook \"Work Projects\" with tags \"meeting, work, important\", save it to Histre with the title \"Meeting Summary\", including the note body and public URL, under the note \"Key Takeaways from Today\"."}
{"original_description": "Save your Instagram photos to your Google Drive as a back up.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nGoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(\"Instagram_Photo_\" + Instagram.anyNewPhotoByYou.CreatedAt);\nGoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"/Photos/Instagram\");", "intent": "Upload any new photo posted by you on Instagram to Google Drive, using the photo's Source URL as the file URL and setting the filename to \"Instagram_Photo_{CreatedAt}\" where {CreatedAt} is the date and time the photo was taken, and save it in the \"/Photos/Instagram\" folder."}
{"original_description": "Save your Instagram photos as Photo Cards in Notebook", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Zoho Notebook", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "notebook.create_image_card", "Filter code method": "Notebook.createImageCard.skip(string?: reason)", "Runtime method": "runAction(\"notebook.create_image_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Notebook name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Notebook", "Slug": "notebook_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Notecard name\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notecard Name", "Slug": "notecard_name", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createImageCard.setNotecard Name(string: notecard_name)"}}, {"section": "Action fields", "title": "Image url\nText input > Link", "description": "Text input > Link", "details": {"Label": "IMAGE URL", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "Notebook.createImageCard.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Tags\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "TAGS", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createImageCard.setTags(string: tags)"}}], "filter_code": "Notebook.createImageCard.setNotecardName(\"Instagram Capture\");\nNotebook.createImageCard.setImageUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nNotebook.createImageCard.setTags(\"Social Media, Memories\");\nNotebook.createImageCard.setNotebookName(\"Personal Notebook\");", "intent": "Create a new Photo Card in my \"Personal Notebook\" within Zoho Notebook, named \"Instagram Capture\", using the image URL from my latest Instagram photo, and tag it with \"Social Media\" and \"Memories\"."}
{"original_description": "Open garage door when visitor finishes signing in", "trigger_channel": "Envoy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "envoy.entry_created"}, "trigger_details": [{"section": "Ingredients", "title": "Agreement link\nLink to Signed Agreement (secure link; expires after 1 hour)", "description": "Link to Signed Agreement (secure link; expires after 1 hour)", "details": {"Slug": "agreement_link", "Filter code": "Envoy.entryCreated.AgreementLink", "Type": "File URL", "Example": "https://starkindustries.com/visitors/ndas/1.pdf"}}, {"section": "Ingredients", "title": "Visitor email\nEmail address of the visitor.", "description": "Email address of the visitor.", "details": {"Slug": "email", "Filter code": "Envoy.entryCreated.VisitorEmail", "Type": "String", "Example": "director@shield.com"}}, {"section": "Ingredients", "title": "Full name\nFull name of the visitor.", "description": "Full name of the visitor.", "details": {"Slug": "full_name", "Filter code": "Envoy.entryCreated.FullName", "Type": "String", "Example": "Nick Fury"}}, {"section": "Ingredients", "title": "Host name\nThe name of the person hosting the visitor.", "description": "The name of the person hosting the visitor.", "details": {"Slug": "host_name", "Filter code": "Envoy.entryCreated.HostName", "Type": "String", "Example": "Tony Stark"}}, {"section": "Ingredients", "title": "Location name\nLocation where the visitor is signing in.", "description": "Location where the visitor is signing in.", "details": {"Slug": "location_name", "Filter code": "Envoy.entryCreated.LocationName", "Type": "String", "Example": "Stark Industries HQ"}}, {"section": "Ingredients", "title": "Phone number\nThe phone number of the visitor.", "description": "The phone number of the visitor.", "details": {"Slug": "phone_number", "Filter code": "Envoy.entryCreated.PhoneNumber", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Sign in time\nThe date and time the visitor signed in.", "description": "The date and time the visitor signed in.", "details": {"Slug": "sign_in_time", "Filter code": "Envoy.entryCreated.SignInTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Envoy.entryCreated.LocationName === \"Stark Industries HQ\" &&\n      Envoy.entryCreated.FullName === \"Nick Fury\" &&\n      Envoy.entryCreated.HostName === \"Tony Stark\") {\n    Garadget.openDoor.setDoorId(\"Main Garage Door\");\n  } else {\n    Garadget.openDoor.skip(\"Visitor details do not match the required criteria.\");\n  }\n} else {\n  Garadget.openDoor.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Open the Main Garage Door at Stark Industries HQ when Nick Fury, hosted by Tony Stark, finishes signing in between 07:00 and 19:00."}
{"original_description": "Save NAACP news to read later", "trigger_channel": "NAACP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "naacp.new_post_in_naacp_news"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Naacp.newPostInNaacpNews.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Naacp.newPostInNaacpNews.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Naacp.newPostInNaacpNews.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Naacp.newPostInNaacpNews.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Naacp.newPostInNaacpNews.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Naacp.newPostInNaacpNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Naacp.newPostInNaacpNews.EntryTitle === \"Launch Day!\") {\n  Instapaper.saveItem.setUrl(Naacp.newPostInNaacpNews.EntryUrl);\n  Instapaper.saveItem.setDescription(Naacp.newPostInNaacpNews.EntryContent);\n  Instapaper.saveItem.setTitle(\"NAACP News\");\n  // Note: The folder and tags are not directly supported in the provided filter code methods.\n  // The following lines are commented out as they cannot be implemented with the given API.\n  // Instapaper.saveItem.setFolder(\"News\");\n  // Instapaper.saveItem.setTags([\"NAACP\", \"News\"]);\n}", "intent": "When a new post is published in the NAACP news, save the entry titled \"Launch Day!\" to Instapaper with the URL http://blog.ifttt.com/coming-soon, description \"Well here we are on, blah, blah...\", and title \"NAACP News\" in the folder \"News\" with the tags \"NAACP\" and \"News\"."}
{"original_description": "When weather forecast plan rain, move down my shutters in domovea", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "domovea", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "domovea.shade_close", "Filter code method": "Domovea.shadeClose.skip(string?: reason)", "Runtime method": "runAction(\"domovea.shade_close\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shades?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" \n    && Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"18\" \n    && Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"10\") {\n  Domovea.shadeClose.setDeviceId(\"Living Room\");\n} else {\n  Domovea.shadeClose.skip(\"Conditions not met for closing shutters.\");\n}", "intent": "When the weather forecast for my location, Paris, calls for rain tomorrow, with a high temperature of 18°C and a low of 10°C, close my Living Room shutters in Domovea."}
{"original_description": "When Logitech Pop is pressed, turn on a light in domovea", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "domovea", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "domovea.switch_on", "Filter code method": "Domovea.switchOn.skip(string?: reason)", "Runtime method": "runAction(\"domovea.switch_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (LogitechPop.shortPress.Name === \"Living Room\" && LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && parseInt(LogitechPop.shortPress.Battery) > 50) {\n  Domovea.switchOn.setDeviceId(\"Kitchen Light\");\n} else {\n  Domovea.switchOn.skip(\"Conditions not met for turning on the Kitchen Light.\");\n}", "intent": "When the Logitech Pop button with the name \"Living Room\" and ID \"a0:e6:f8:8c:f5:33\" is pressed, and the battery level is above 50, turn on the device named \"Kitchen Light\" in domovea."}
{"original_description": "TP-Link Kasa lights will turn fuschia when the Litter-Robot waste drawer is full.", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Whisker.lr3Events.EventType === \"Waste Drawer Full\" && Whisker.lr3Events.LitterRobotName === \"My Litter Robot\") {\n  Kasa.changeColorTemp.setAdvancedOptions(\"color:#C154C1; transition_duration:2000\");\n} else {\n  Kasa.changeColorTemp.skip(\"Litter-Robot waste drawer is not full or event type does not match.\");\n}", "intent": "When the Litter-Robot waste drawer is full, as indicated by the \"Waste Drawer Full\" event type from my litter robot named \"My Litter Robot\", turn the TP-Link Kasa lights in the living room to fuschia (#C154C1) with a transition duration of 2 seconds."}
{"original_description": "Commuting in Chicago? This Applet posts to a Slack channel of your choosing when there's an alert affecting the pink line during your weekday commute to work (7-10am).", "trigger_channel": "Chicago Transit Authority", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "cta.new_orange_line_alert"}, "trigger_details": [{"section": "Ingredients", "title": "Alert title\nThe alert's title.", "description": "The alert's title.", "details": {"Slug": "EntryTitle", "Filter code": "Cta.newOrangeLineAlert.AlertTitle", "Type": "String", "Example": "Elevator at Cumberland Temporarily Out-of-Service (Elevator Status)"}}, {"section": "Ingredients", "title": "Alert url\nThe alert's URL.", "description": "The alert's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Cta.newOrangeLineAlert.AlertUrl", "Type": "String", "Example": "http://ift.tt/2q1oEoI"}}, {"section": "Ingredients", "title": "Alert content\nThe alert's content.", "description": "The alert's content.", "details": {"Slug": "EntryContent", "Filter code": "Cta.newOrangeLineAlert.AlertContent", "Type": "String", "Example": "(Tue, May 9 2017 5:43 PM to TBD) The mezzanine-to-platform elevator at Cumberland (Blue Line) is temporarily out-of-service."}}, {"section": "Ingredients", "title": "Alert published\nDate alert was created.", "description": "Date alert was created.", "details": {"Slug": "EntryPublished", "Filter code": "Cta.newOrangeLineAlert.AlertPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var Hour = Meta.currentUserTime.hour();\nvar Day = Meta.currentUserTime.day();\n\n// Skip outside of 7-10am\nif (Hour < 7 || Hour > 10) {\n  Slack.postToChannel.skip(\"Outside of morning commuting hours\");\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 0) {\n  Slack.postToChannel.skip(\"Not a weekday\");\n}\n\n// Set the channel\nSlack.postToChannel.setChannel(\"#commute-alerts\");\n\n// Set the title\nSlack.postToChannel.setTitle(\"Pink Line Alert: \" + Cta.newOrangeLineAlert.AlertTitle);\n\n// Set the message\nSlack.postToChannel.setMessage(Cta.newOrangeLineAlert.AlertContent);", "intent": "Post a message to the #commute-alerts channel on Slack with the title \"Pink Line Alert: {{EntryTitle}}\" and the message \"{{EntryContent}}\" whenever there's an alert affecting the pink line during weekday mornings between 7:00 and 10:00 AM.", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\r\nvar Day = Meta.currentUserTime.day()\r\n\r\n// Skip outside of 7-10am\r\nif (Hour <7 || Hour > 10) {\r\n  Slack.postToChannel.skip(\"Outside of morning commuting hours\")\r\n}\r\n\r\n// Skip on weekends\r\nif (Day == 6 || Day == 7) {\r\n  Slack.postToChannel.skip(\"Not a weekday\")\r\n}\r\n\r\n\r\n"}
{"original_description": "Huge fan of a particular Twitch user? Enter their username and track the channels they follow! You'll be sent a push notification and the channel information will be logged in a Google Drive spreadsheet when a new channel is followed by that user.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.followed_new_channel"}, "trigger_details": [{"section": "Ingredients", "title": "Followed at\nDate and time you followed the Channel.", "description": "Date and time you followed the Channel.", "details": {"Slug": "created_at", "Filter code": "Twitch.followedNewChannel.FollowedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel you followed.", "description": "The name of the channel you followed.", "details": {"Slug": "channel_name", "Filter code": "Twitch.followedNewChannel.ChannelName", "Type": "String", "Example": "Gaming Talk Shows"}}, {"section": "Ingredients", "title": "Channel logo\nA url to the image of the channel logo.", "description": "A url to the image of the channel logo.", "details": {"Slug": "channel_logo", "Filter code": "Twitch.followedNewChannel.ChannelLogo", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.followedNewChannel.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Follower count\nThe number of channel followers.", "description": "The number of channel followers.", "details": {"Slug": "channel_followers", "Filter code": "Twitch.followedNewChannel.FollowerCount", "Type": "String", "Example": "215780"}}, {"section": "Ingredients", "title": "List of follows\nA URL to a list of the channels that you follow.", "description": "A URL to a list of the channels that you follow.", "details": {"Slug": "list_of_follows", "Filter code": "Twitch.followedNewChannel.ListOfFollows", "Type": "Web URL", "Example": "twitch.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Twitch.followedNewChannel.ChannelName !== \"Ninja\") {\n  IfNotifications.sendNotification.skip(\"The trigger was not from Ninja's follows.\");\n}\n\nvar message = `Ninja just followed a new channel: ${Twitch.followedNewChannel.ChannelName}`;\nIfNotifications.sendNotification.setMessage(message);\n\n// Log to Google Drive Spreadsheet\nGoogleDrive.appendRowToSpreadsheet.setSpreadsheetName(\"Twitch Follows\");\nGoogleDrive.appendRowToSpreadsheet.setFolder(\"Twitch Tracking\");\nvar rowData = [\n  Twitch.followedNewChannel.ChannelName,\n  Twitch.followedNewChannel.ChannelLogo,\n  Twitch.followedNewChannel.FollowerCount\n];\nGoogleDrive.appendRowToSpreadsheet.addRow(rowData);", "intent": "When Twitch user \"Ninja\" follows a new channel, send a push notification with the message \"Ninja just followed a new channel: {channel_name}\" and log the channel information, including the channel name, logo URL, and follower count, to a Google Drive spreadsheet named \"Twitch Follows\" in the \"Twitch Tracking\" folder."}
{"original_description": "Get an notification when the device's CO2 level exceeds the specified threshold, which is the average for 5 minutes.", "trigger_channel": "Huma-i", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "Huma_i.huma_carbon_dioxide_alert_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Huma-i?", "Helper text": "Humai Device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CO₂ threshold?", "Helper text": "CO₂ Level (AQI Base)", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "createdat", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2\nCO2", "description": "CO2", "details": {"Slug": "co2", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Co2", "Type": "String", "Example": "CO2"}}, {"section": "Ingredients", "title": "Voc\nVOC", "description": "VOC", "details": {"Slug": "voc", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Voc", "Type": "String", "Example": "VOC"}}, {"section": "Ingredients", "title": "Pm2\nPM2.5", "description": "PM2.5", "details": {"Slug": "pm25", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Pm2", "Type": "String", "Example": "PM2.5"}}, {"section": "Ingredients", "title": "Pm1\nPM1.0", "description": "PM1.0", "details": {"Slug": "pm10", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Pm1", "Type": "String", "Example": "PM1.0"}}, {"section": "Ingredients", "title": "Temperature\nTemperature", "description": "Temperature", "details": {"Slug": "temperature", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Temperature", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Humidity\nHumidity", "description": "Humidity", "details": {"Slug": "humidity", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Humidity", "Type": "String", "Example": "Humidity"}}, {"section": "Ingredients", "title": "Home name\nHomeName", "description": "HomeName", "details": {"Slug": "homename", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.HomeName", "Type": "String", "Example": "HomeName"}}, {"section": "Ingredients", "title": "Room name\nRoomName", "description": "RoomName", "details": {"Slug": "roomname", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.RoomName", "Type": "String", "Example": "RoomName"}}, {"section": "Ingredients", "title": "Device name\nDeviceName", "description": "DeviceName", "details": {"Slug": "devicename", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.DeviceName", "Type": "String", "Example": "DeviceName"}}, {"section": "Ingredients", "title": "Threshold\nThreshold Message", "description": "Threshold Message", "details": {"Slug": "threshold", "Filter code": "HumaI.humaCarbonDioxideAlertTrigger.Threshold", "Type": "String", "Example": "Threshold Message"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (HumaI.humaCarbonDioxideAlertTrigger.Co2 > 1000 && HumaI.humaCarbonDioxideAlertTrigger.DeviceName === \"Living Room Air Quality Monitor\") {\n  IfNotifications.sendNotification.setMessage(\"High CO2 levels detected in the living room\");\n} else {\n  IfNotifications.sendNotification.skip(\"CO2 level is not exceeding 1000 ppm or device name does not match.\");\n}", "intent": "Send a notification when the CO2 level from the Huma-i device named \"Living Room Air Quality Monitor\" exceeds 1000 ppm, which is the average for 5 minutes, with a message \"High CO2 levels detected in the living room\"."}
{"original_description": "Do you also have environmental allergies? Get notified in advance. Average pollen count is between 4.9-7.2", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 7.2 && \n    Meta.currentUserTime.hour() === 6 && \n    Weather.currentPollenCountRisesAbove.TempCelsius > 18 && \n    Weather.currentPollenCountRisesAbove.Condition === \"Sunny\") {\n  IfNotifications.sendNotification.setMessage(\"High pollen alert: \" + Weather.currentPollenCountRisesAbove.PollenCount);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met for high pollen alert.\");\n}", "intent": "When the pollen count in New York rises above 7.2, as reported by Weather Underground at 6:00 AM, send a notification with the message \"High pollen alert: 8.1\" to my phone if the current temperature is above 18°C and the weather condition is Sunny."}
{"original_description": "Don't miss those first snow flakes! Get notified with a gentle blink of your LIFX lights.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Snow\" && Weather.currentConditionIs.TempFahrenheit < 32) {\n  Lifx.blink.setNumberOfBirths(\"3\");\n  Lifx.blink.setAdvancedOptions(\"color: blue saturation:0.5; brightness: 50%\");\n  Lifx.blink.setBlinkIfOff(\"Yes\");\n} else {\n  Lifx.blink.skip(\"Condition is not snow or temperature is above 32°F.\");\n}", "intent": "When the current weather condition in New York is Snow and the temperature is below 32°F, blink my Living Room LIFX lights 3 times with a soft blue color at 50% brightness, even if they are turned off."}
{"original_description": "Get an notification when the device's VOC level exceeds the specified threshold, which is the average for 5 minutes.", "trigger_channel": "Huma-i", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "Huma_i.huma_voc_alert_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Huma-i?", "Helper text": "Humai Device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which VOC threshold", "Helper text": "VOC Level(AQI Base)", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "createdat", "Filter code": "HumaI.humaVocAlertTrigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2\nCO2", "description": "CO2", "details": {"Slug": "co2", "Filter code": "HumaI.humaVocAlertTrigger.Co2", "Type": "String", "Example": "CO2"}}, {"section": "Ingredients", "title": "Voc\nVoc", "description": "Voc", "details": {"Slug": "voc", "Filter code": "HumaI.humaVocAlertTrigger.Voc", "Type": "String", "Example": "Voc"}}, {"section": "Ingredients", "title": "Pm2\nPM2.5", "description": "PM2.5", "details": {"Slug": "pm25", "Filter code": "HumaI.humaVocAlertTrigger.Pm2", "Type": "String", "Example": "PM2.5"}}, {"section": "Ingredients", "title": "Pm1\nPM1.0", "description": "PM1.0", "details": {"Slug": "pm10", "Filter code": "HumaI.humaVocAlertTrigger.Pm1", "Type": "String", "Example": "PM1.0"}}, {"section": "Ingredients", "title": "Temperature\nTemperature", "description": "Temperature", "details": {"Slug": "temperature", "Filter code": "HumaI.humaVocAlertTrigger.Temperature", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Humidity\nHumidity", "description": "Humidity", "details": {"Slug": "humidity", "Filter code": "HumaI.humaVocAlertTrigger.Humidity", "Type": "String", "Example": "Humidity"}}, {"section": "Ingredients", "title": "Home name\nHomeName", "description": "HomeName", "details": {"Slug": "homename", "Filter code": "HumaI.humaVocAlertTrigger.HomeName", "Type": "String", "Example": "HomeName"}}, {"section": "Ingredients", "title": "Room name\nRoomName", "description": "RoomName", "details": {"Slug": "roomname", "Filter code": "HumaI.humaVocAlertTrigger.RoomName", "Type": "String", "Example": "RoomName"}}, {"section": "Ingredients", "title": "Device name\nDeviceName", "description": "DeviceName", "details": {"Slug": "devicename", "Filter code": "HumaI.humaVocAlertTrigger.DeviceName", "Type": "String", "Example": "DeviceName"}}, {"section": "Ingredients", "title": "Threshold\nThreshold Message", "description": "Threshold Message", "details": {"Slug": "threshold", "Filter code": "HumaI.humaVocAlertTrigger.Threshold", "Type": "String", "Example": "Threshold Message"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (HumaI.humaVocAlertTrigger.DeviceName === \"Living Room Sensor\" && HumaI.humaVocAlertTrigger.Voc > 500) {\n  IfNotifications.sendNotification.setMessage(\"High VOC levels detected in the living room\");\n} else {\n  IfNotifications.sendNotification.skip(\"VOC level is not exceeded or device name does not match.\");\n}", "intent": "Send a notification when the VOC level from my Huma-i device named \"Living Room Sensor\" exceeds 500 AQI, which is the average for 5 minutes, and include a message saying \"High VOC levels detected in the living room\"."}
{"original_description": "Get a message when the device's AQI level exceeds the specified threshold, which is the average for 5 minutes.", "trigger_channel": "Huma-i", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "Huma_i.huma_dust_level_alert_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Huma-i?", "Helper text": "Humai Device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dust level threshold?", "Helper text": "PM2.5(AQI Base)", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "createdat", "Filter code": "HumaI.humaDustLevelAlertTrigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2\nCO2", "description": "CO2", "details": {"Slug": "co2", "Filter code": "HumaI.humaDustLevelAlertTrigger.Co2", "Type": "String", "Example": "CO2"}}, {"section": "Ingredients", "title": "Voc\nVoc", "description": "Voc", "details": {"Slug": "voc", "Filter code": "HumaI.humaDustLevelAlertTrigger.Voc", "Type": "String", "Example": "Voc"}}, {"section": "Ingredients", "title": "Pm2\nPM2.5", "description": "PM2.5", "details": {"Slug": "pm25", "Filter code": "HumaI.humaDustLevelAlertTrigger.Pm2", "Type": "String", "Example": "PM2.5"}}, {"section": "Ingredients", "title": "Pm1\nPM1.0", "description": "PM1.0", "details": {"Slug": "pm10", "Filter code": "HumaI.humaDustLevelAlertTrigger.Pm1", "Type": "String", "Example": "PM1.0"}}, {"section": "Ingredients", "title": "Temperature\nTemperature", "description": "Temperature", "details": {"Slug": "temperature", "Filter code": "HumaI.humaDustLevelAlertTrigger.Temperature", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Humidity\nHumidity", "description": "Humidity", "details": {"Slug": "humidity", "Filter code": "HumaI.humaDustLevelAlertTrigger.Humidity", "Type": "String", "Example": "Humidity"}}, {"section": "Ingredients", "title": "Home name\nHomeName", "description": "HomeName", "details": {"Slug": "homename", "Filter code": "HumaI.humaDustLevelAlertTrigger.HomeName", "Type": "String", "Example": "HomeName"}}, {"section": "Ingredients", "title": "Room name\nRoomName", "description": "RoomName", "details": {"Slug": "roomname", "Filter code": "HumaI.humaDustLevelAlertTrigger.RoomName", "Type": "String", "Example": "RoomName"}}, {"section": "Ingredients", "title": "Device name\nDeviceName", "description": "DeviceName", "details": {"Slug": "devicename", "Filter code": "HumaI.humaDustLevelAlertTrigger.DeviceName", "Type": "String", "Example": "DeviceName"}}, {"section": "Ingredients", "title": "Threshold\nThreshold Message", "description": "Threshold Message", "details": {"Slug": "threshold", "Filter code": "HumaI.humaDustLevelAlertTrigger.Threshold", "Type": "String", "Example": "Threshold Message"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var deviceName = HumaI.humaDustLevelAlertTrigger.DeviceName;\n  var threshold = HumaI.humaDustLevelAlertTrigger.Threshold;\n  var pm25 = HumaI.humaDustLevelAlertTrigger.Pm2;\n  var temperature = HumaI.humaDustLevelAlertTrigger.Temperature;\n\n  if (deviceName === \"Living Room Air Quality Monitor\" && threshold > 50) {\n    var message = `AQI level exceeded. Current PM2.5: ${pm25}, Temperature: ${temperature}`;\n    IfNotifications.sendNotification.setMessage(message);\n  } else {\n    IfNotifications.sendNotification.skip(\"Conditions not met.\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Send a notification with the message \"AQI level exceeded\" when the Huma-i device named \"Living Room Air Quality Monitor\" exceeds the threshold of 50 AQI for 5 minutes, between 07:00 and 19:00, including the current PM2.5 level and temperature."}
{"original_description": "Get an notification when the device's PM2.5 level exceeds the specified threshold, which is the average for 5 minutes.", "trigger_channel": "Huma-i", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "Huma_i.huma_dust_level_alert_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Huma-i?", "Helper text": "Humai Device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dust level threshold?", "Helper text": "PM2.5(AQI Base)", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "createdat", "Filter code": "HumaI.humaDustLevelAlertTrigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2\nCO2", "description": "CO2", "details": {"Slug": "co2", "Filter code": "HumaI.humaDustLevelAlertTrigger.Co2", "Type": "String", "Example": "CO2"}}, {"section": "Ingredients", "title": "Voc\nVoc", "description": "Voc", "details": {"Slug": "voc", "Filter code": "HumaI.humaDustLevelAlertTrigger.Voc", "Type": "String", "Example": "Voc"}}, {"section": "Ingredients", "title": "Pm2\nPM2.5", "description": "PM2.5", "details": {"Slug": "pm25", "Filter code": "HumaI.humaDustLevelAlertTrigger.Pm2", "Type": "String", "Example": "PM2.5"}}, {"section": "Ingredients", "title": "Pm1\nPM1.0", "description": "PM1.0", "details": {"Slug": "pm10", "Filter code": "HumaI.humaDustLevelAlertTrigger.Pm1", "Type": "String", "Example": "PM1.0"}}, {"section": "Ingredients", "title": "Temperature\nTemperature", "description": "Temperature", "details": {"Slug": "temperature", "Filter code": "HumaI.humaDustLevelAlertTrigger.Temperature", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Humidity\nHumidity", "description": "Humidity", "details": {"Slug": "humidity", "Filter code": "HumaI.humaDustLevelAlertTrigger.Humidity", "Type": "String", "Example": "Humidity"}}, {"section": "Ingredients", "title": "Home name\nHomeName", "description": "HomeName", "details": {"Slug": "homename", "Filter code": "HumaI.humaDustLevelAlertTrigger.HomeName", "Type": "String", "Example": "HomeName"}}, {"section": "Ingredients", "title": "Room name\nRoomName", "description": "RoomName", "details": {"Slug": "roomname", "Filter code": "HumaI.humaDustLevelAlertTrigger.RoomName", "Type": "String", "Example": "RoomName"}}, {"section": "Ingredients", "title": "Device name\nDeviceName", "description": "DeviceName", "details": {"Slug": "devicename", "Filter code": "HumaI.humaDustLevelAlertTrigger.DeviceName", "Type": "String", "Example": "DeviceName"}}, {"section": "Ingredients", "title": "Threshold\nThreshold Message", "description": "Threshold Message", "details": {"Slug": "threshold", "Filter code": "HumaI.humaDustLevelAlertTrigger.Threshold", "Type": "String", "Example": "Threshold Message"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (HumaI.humaDustLevelAlertTrigger.Pm2 > 50 && HumaI.humaDustLevelAlertTrigger.RoomName === \"Living Room\") {\n  IfNotifications.sendNotification.setMessage(\"The current PM2.5 level is \" + HumaI.humaDustLevelAlertTrigger.Pm2 + \" μg/m³ from the \" + HumaI.humaDustLevelAlertTrigger.DeviceName + \" device.\");\n} else {\n  IfNotifications.sendNotification.skip(\"PM2.5 level is below threshold or not from Living Room device.\");\n}", "intent": "Send a notification when the PM2.5 level from the Living Room Huma-i device exceeds 50 μg/m³, which is the average for 5 minutes, with a message including the current PM2.5 level and the device name."}
{"original_description": "Get notified when Wyze detects sound", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.sound_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Sound detected\nSound alarm sensed on your wyze camera.", "description": "Sound alarm sensed on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.soundTrigger.SoundDetected", "Type": "String", "Example": "Sound alarm sensed on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when sound is triggered.", "description": "Time when sound is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.soundTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Routee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "routee.send_sms", "Filter code method": "Routee.sendSms.skip(string?: reason)", "Runtime method": "runAction(\"routee.send_sms\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "The content of the SMS", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setMessage(string: message)"}}, {"section": "Action fields", "title": "From\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "From", "Helper text": "The sender id of the message", "Slug": "from", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setFrom(string: from)"}}, {"section": "Action fields", "title": "To\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "To", "Helper text": "The recipient of the message", "Slug": "to", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setTo(string: to)"}}], "filter_code": "if (Wyzecam.soundTrigger.SoundDetected && Wyzecam.soundTrigger.SerializeDeviceInfo === \"Living Room Camera\") {\n  Routee.sendSms.setMessage(\"Sound alarm detected at Living Room Camera\");\n  Routee.sendSms.setFrom(\"WyzeAlert\");\n  Routee.sendSms.setTo(\"+1234567890\");\n} else {\n  Routee.sendSms.skip(\"Conditions not met for sending SMS.\");\n}", "intent": "When the Wyze camera named \"Living Room Camera\" detects sound, send an SMS with the message \"Sound alarm detected at Living Room Camera\" from the sender ID \"WyzeAlert\" to the recipient's phone number \"+1234567890\"."}
{"original_description": "Get notified of a Phyn alert by changing the color of your Hue bulb.", "trigger_channel": "Phyn", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "phyn.alert_raised"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which home?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Alert type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which type of alert?", "Helper text": "Alert type", "Slug": "alert_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Phyn.alertRaised.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Home name\nName of the home for which the alert is detected.", "description": "Name of the home for which the alert is detected.", "details": {"Slug": "home_name", "Filter code": "Phyn.alertRaised.HomeName", "Type": "String", "Example": "Vacation home"}}, {"section": "Ingredients", "title": "Alert type\nType of the alert detected.", "description": "Type of the alert detected.", "details": {"Slug": "alert_type", "Filter code": "Phyn.alertRaised.AlertType", "Type": "String", "Example": "Leak alert"}}, {"section": "Ingredients", "title": "Alert time\nThe time when this alert is detected.", "description": "The time when this alert is detected.", "details": {"Slug": "alert_time", "Filter code": "Phyn.alertRaised.AlertTime", "Type": "String", "Example": "2019-08-07 16:10 PM PST"}}, {"section": "Ingredients", "title": "Suggested fixtures\nThe fixtures associated with a leak alert.", "description": "The fixtures associated with a leak alert.", "details": {"Slug": "suggested_fixtures", "Filter code": "Phyn.alertRaised.SuggestedFixtures", "Type": "String", "Example": "'sink, shower'"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Phyn.alertRaised.HomeName === \"Vacation home\" && Phyn.alertRaised.AlertType === \"Leak alert\" && hour >= 7 && hour < 22) {\n  if (hour >= 7 && hour < 22) {\n    Hue.setColorAllHue.setColor(\"#FF0000\");\n  } else {\n    Hue.setColorAllHue.skip(\"Outside of active hours (7 AM to 10 PM).\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Alert not for Vacation home or not a leak alert.\");\n}", "intent": "When a leak alert is detected at my Vacation home between 07:00 and 22:00, change the color of all my Living Room lights to red (#FF0000)."}
{"original_description": "Your whole Tribe and all your Watchers are immediately notified when alarm is raised.\r\n\r\nYou can continue to communicate in Zuluhood and check instantly if everyone is ok and who is coming to check on your home.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.smoke_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Smoke detected\nSmoke alarm detected on your wyze camera.", "description": "Smoke alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.smokeTrigger.SmokeDetected", "Type": "String", "Example": "Smoke alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when smoke is triggered.", "description": "Time when smoke is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.smokeTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Wyzecam.smokeTrigger.SmokeDetected === \"Smoke alarm detected on your wyze camera.\") {\n  Zuluhood.raiseAlarm.setHome(\"home location\");\n  Zuluhood.raiseAlarm.setType(\"Smoke Alarm\");\n  Zuluhood.raiseAlarm.setMessage(\"Smoke alarm detected\");\n}", "intent": "When a smoke alarm is detected on the Wyze camera in the living room at any time, immediately raise an alarm in Zuluhood for the home location and notify all tribe members and watchers with the message \"Smoke alarm detected\", allowing them to communicate and check on each other's status."}
{"original_description": "Get notified when tomorrow’s weather forecast calls for specific conditions e.g. rain, snow, cloudy, clear", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Routee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "routee.send_sms", "Filter code method": "Routee.sendSms.skip(string?: reason)", "Runtime method": "runAction(\"routee.send_sms\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "The content of the SMS", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setMessage(string: message)"}}, {"section": "Action fields", "title": "From\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "From", "Helper text": "The sender id of the message", "Slug": "from", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setFrom(string: from)"}}, {"section": "Action fields", "title": "To\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "To", "Helper text": "The recipient of the message", "Slug": "to", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setTo(string: to)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" && \n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Routee.sendSms.setFrom(\"WeatherAlert\");\n  Routee.sendSms.setTo(\"+1234567890\");\n  Routee.sendSms.setMessage(\"Tomorrow's forecast: Rain, High: 60°F, Low: 45°F\");\n} else {\n  Routee.sendSms.skip(\"Tomorrow's weather forecast does not match the conditions.\");\n}", "intent": "Get a notification on your phone when tomorrow's weather forecast in New York calls for rain, with a high temperature of 60°F and a low of 45°F, and receive an SMS from the Routee sender ID \"WeatherAlert\" to the recipient number \"+1234567890\" with the message \"Tomorrow's forecast: Rain, High: 60°F, Low: 45°F\"."}
{"original_description": "Get notified on specific time and days of the week", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Routee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "routee.send_sms", "Filter code method": "Routee.sendSms.skip(string?: reason)", "Runtime method": "runAction(\"routee.send_sms\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "The content of the SMS", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setMessage(string: message)"}}, {"section": "Action fields", "title": "From\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "From", "Helper text": "The sender id of the message", "Slug": "from", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setFrom(string: from)"}}, {"section": "Action fields", "title": "To\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "To", "Helper text": "The recipient of the message", "Slug": "to", "Required": "true", "Can have default value": "true", "Filter code method": "Routee.sendSms.setTo(string: to)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (DateAndTime.everyWeekdayAt.CheckTime.getHours() === 8 && \n      DateAndTime.everyWeekdayAt.CheckTime.getMinutes() === 0) {\n    Routee.sendSms.setMessage(\"Good morning, have a great day!\");\n    Routee.sendSms.setFrom(\"OfficeBot\");\n    Routee.sendSms.setTo(\"+1234567890\");\n  } else {\n    Routee.sendSms.skip(\"Not the correct time.\");\n  }\n} else {\n  Routee.sendSms.skip(\"Not the correct day.\");\n}", "intent": "Send an SMS with the message \"Good morning, have a great day!\" from sender ID \"OfficeBot\" to recipient \"+1234567890\" every Monday, Wednesday, and Friday at 08:00."}
{"original_description": "Every time your SmartThings device detects a door open, you'll hear a message in your Orion group.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\" && Meta.currentUserTime.hour() === 15) {\n  Orion.sendVoiceMessage.setMessage(\"The bedroom door has been opened\");\n  Orion.sendVoiceMessage.setGroup(\"#office-group\");\n  Orion.sendVoiceMessage.setUser(\"everyone\");\n} else {\n  Orion.sendVoiceMessage.skip(\"Conditions not met.\");\n}", "intent": "When the Bedroom contact sensor detects that the door is opened at 3:00 PM, send a voice message to everyone in the #office-group saying \"The bedroom door has been opened\"."}
{"original_description": "Get notified by your blinking Philips Hue Christmas lights that your Home Connect Washer cycle is complete and your Christmas table cloth is ready to go in the dryer", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var location = \"living room\";\n  Hue.blinkAllHue.setLights(location);\n} else {\n  Hue.blinkAllHue.skip(\"Outside of notification hours (7 AM to 7 PM).\");\n}", "intent": "When the Home Connect Washer cycle is complete and it's between 07:00 and 19:00, blink all Philips Hue lights in the living room to notify that the Christmas table cloth is ready to go in the dryer."}
{"original_description": "Your whole Tribe and all your Watchers are immediately notified if your Scout Alarm is triggered.\r\n\r\nYou can continue to communicate in Zuluhood and check instantly if everyone is ok and who is coming to check on your home.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_alarming"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Name\nName of mode.", "description": "Name of mode.", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeAlarming.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Event\nState of Mode.", "description": "State of Mode.", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeAlarming.Event", "Type": "String", "Example": "Alarmed"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeAlarming.FormattedText", "Type": "String", "Example": "Active Alarm in Away mode"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that triggered the alarm.", "description": "The name of the person or thing that triggered the alarm.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeAlarming.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "At\nDate and time alarm was triggered.", "description": "Date and time alarm was triggered.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeAlarming.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Scoutalarm.modeAlarming.Event === \"Alarmed\" && Scoutalarm.modeAlarming.Name === \"Away\") {\n  var message = Scoutalarm.modeAlarming.FormattedText + \" triggered by \" + Scoutalarm.modeAlarming.By;\n  Zuluhood.raiseAlarm.setHome(\"My Home\").setType(\"Alert\").setMessage(message);\n} else {\n  Zuluhood.raiseAlarm.skip(\"Not in Away mode or not alarmed\");\n}", "intent": "When the Scout Alarm is triggered while in Away mode, immediately notify my whole Tribe and all Watchers through Zuluhood, including a message with the formatted text \"Active Alarm in Away mode\" and the details of who triggered it, such as \"Dave via IFTTT\", so we can quickly assess the situation and respond accordingly."}
{"original_description": "Your whole Tribe and all your Watchers are immediately notified if your Arlo camera detects a motion.\r\n\r\nYou can continue to communicate in Zuluhood and check instantly if everyone is ok and who is coming to check on your home.", "trigger_channel": "Arlo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "arlo.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "device_name", "Filter code": "Arlo.motion.DeviceName", "Type": "String", "Example": "48B14C740AD5E"}}, {"section": "Ingredients", "title": "Detection time\nDate and time of motion event detection.", "description": "Date and time of motion event detection.", "details": {"Slug": "detected_at", "Filter code": "Arlo.motion.DetectionTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Arlo.motion.DeviceName === \"48B14C740AD5E\") {\n  Zuluhood.notifyTribeAndWatchers(\"Motion detected by Arlo camera!\");\n  Zuluhood.raiseAlarm.setHome(\"My Primary Residence\");\n  Zuluhood.raiseAlarm.setType(\"Security Breach\");\n  Zuluhood.raiseAlarm.skip();\n}", "intent": "When the Arlo camera named \"48B14C740AD5E\" detects motion at any time, immediately notify my whole Tribe and all my Watchers through Zuluhood, and then raise an alarm for my home selected as \"My Primary Residence\" with the type set to \"Security Breach\"."}
{"original_description": "Your whole Tribe and all your Watchers are immediately notified if your Abode alarm is raised.\r\n\r\nYou can continue to communicate in Zuluhood and check instantly if everyone is ok and who is coming to check on your home.", "trigger_channel": "abode", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "abode.alarm_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Abode.alarmTriggered.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Alarm type\nType of alarm triggered.", "description": "Type of alarm triggered.", "details": {"Slug": "alarm_type", "Filter code": "Abode.alarmTriggered.AlarmType", "Type": "String", "Example": "Fire Alarm Triggered"}}, {"section": "Ingredients", "title": "Device name\nName of device whose alarm is triggered.", "description": "Name of device whose alarm is triggered.", "details": {"Slug": "device_name", "Filter code": "Abode.alarmTriggered.DeviceName", "Type": "String", "Example": "abode Gateway Alarm"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Abode.alarmTriggered.AlarmType === \"Fire Alarm Triggered\" && Abode.alarmTriggered.DeviceName === \"abode Gateway Alarm\") {\n  Zuluhood.raiseAlarm.setHome(\"My Home\");\n  Zuluhood.raiseAlarm.setType(\"Security Alert\");\n} else {\n  Zuluhood.raiseAlarm.skip(\"Not a fire alarm triggered at abode Gateway Alarm.\");\n}", "intent": "When the Abode alarm is triggered, specifically for a \"Fire Alarm Triggered\" event at the device named \"abode Gateway Alarm\", immediately notify my whole Tribe and all Watchers on Zuluhood, and then raise an alarm of type \"Security Alert\" for my home, allowing everyone to check in and confirm who is safe and who is heading to check on our home."}
{"original_description": "Your whole Tribe and all your Watchers are immediately notified when alarm is raised.\r\n\r\nYou can continue to communicate in Zuluhood and check instantly if everyone is ok and who is coming to check on your home.", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time alarm occurred.", "description": "Date and time alarm occurred.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.alarm.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of alarm that occurred.", "description": "The EventType describes the type of alarm that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.alarm.EventType", "Type": "String", "Example": "Fire"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.alarm.FormattedMessage", "Type": "String", "Example": "Medical Alarm"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.alarm.EventType === \"Fire\") {\n  if (Zuluhood.raiseAlarm.setHome(\"selected_home\").setType(\"Medical Alarm\").setMessage(Bluebyadt.alarm.FormattedMessage)) {\n    Zuluhood.notifyTribeAndWatchers(Bluebyadt.alarm.FormattedMessage);\n  } else {\n    Zuluhood.raiseAlarm.skip(\"Failed to set home or type for alarm\");\n  }\n} else {\n  Zuluhood.raiseAlarm.skip(\"Alarm type is not 'Fire'\");\n}", "intent": "When a \"Fire\" alarm is raised at home, immediately notify my whole Tribe and all Watchers in Zuluhood with the formatted message \"Medical Alarm\" and raise an alarm at my selected home."}
{"original_description": "Your whole Tribe and all your Watchers are immediately notified when alarm is raised.\r\n\r\nYou can continue to communicate in Zuluhood and check instantly if everyone is ok and who is coming to check on your home.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.co_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Co detected\nCO alarm detected on your wyze camera.", "description": "CO alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.coTrigger.CoDetected", "Type": "String", "Example": "CO alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when CO is triggered.", "description": "Time when CO is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.coTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Wyzecam.coTrigger.CoDetected === \"CO alarm detected on your wyze camera.\" && Wyzecam.coTrigger.serialize_device_info === \"Living Room Wyze Camera\") {\n  Zuluhood.raiseAlarm.setHome(\"Main Home\");\n  Zuluhood.raiseAlarm.setType(\"CO Alarm\");\n  Zuluhood.raiseAlarm.skip(null);\n}", "intent": "When a CO alarm is detected on the \"Living Room Wyze Camera\" at any time, immediately raise an alarm in Zuluhood for the \"Main Home\" and notify all watchers with the message \"CO alarm detected\", allowing everyone to check in and confirm their safety."}
{"original_description": "Use this applet to create a button on your phone or smart watch that triggers your robot to clean a specific room. For robots with Imprint™ Smart Mapping technology.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.clean_by_room", "Filter code method": "Irobot.cleanByRoom.skip(string?: reason)", "Runtime method": "runAction(\"irobot.clean_by_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Room info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room would you like to clean?", "Slug": "room_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Irobot.cleanByRoom.setroom_info(\"living room\");\n} else {\n  Irobot.cleanByRoom.skip(\"Location does not match the specified coordinates.\");\n}", "intent": "When the button on your phone or smartwatch is pressed at a location with latitude 37.8267 and longitude -122.4230, trigger your iRobot to clean the living room."}
{"original_description": "Record NPR story.", "trigger_channel": "NPR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "npr.news_story_published"}, "trigger_details": [{"section": "Trigger fields", "title": "Category\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a category", "Slug": "category", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Story title\nThe story's title.", "description": "The story's title.", "details": {"Slug": "story_title", "Filter code": "Npr.newsStoryPublished.StoryTitle", "Type": "String", "Example": "From The 'Inside Out,' A Lively Look Inside A Young Mind"}}, {"section": "Ingredients", "title": "Story excerpt\nThe story's excerpt.", "description": "The story's excerpt.", "details": {"Slug": "story_excerpt", "Filter code": "Npr.newsStoryPublished.StoryExcerpt", "Type": "String", "Example": "Pixar's latest creation, which takes place inside a young girl's mind, is visually ambitious, emotionally affecting, and ultimately very wise."}}, {"section": "Ingredients", "title": "Story url\nThe URL to the story.", "description": "The URL to the story.", "details": {"Slug": "story_url", "Filter code": "Npr.newsStoryPublished.StoryURL", "Type": "String", "Example": "http://www.npr.org/2015/06/18/414701069/from-the-inside-out-a-lively-look-inside-a-young-mind?utm_medium=RSS&utm_campaign=storiesfromnpr"}}, {"section": "Ingredients", "title": "Category\nThe story's category.", "description": "The story's category.", "details": {"Slug": "category", "Filter code": "Npr.newsStoryPublished.Category", "Type": "String", "Example": "People & Places"}}, {"section": "Ingredients", "title": "Published at\nDate and time the story was published.", "description": "Date and time the story was published.", "details": {"Slug": "published_at", "Filter code": "Npr.newsStoryPublished.PublishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  var category = Npr.newsStoryPublished.Category;\n  var title = Npr.newsStoryPublished.StoryTitle;\n  var excerpt = Npr.newsStoryPublished.StoryExcerpt;\n  var url = Npr.newsStoryPublished.StoryURL;\n\n  if (category === \"News\" && title.includes(\"From The 'Inside Out,' A Lively Look Inside A Young Mind\")) {\n    var body = {\n      \"title\": title,\n      \"excerpt\": excerpt,\n      \"url\": url,\n      \"start_date\": new Date().toISOString(),\n      \"end_date\": new Date().toISOString()\n    };\n\n    UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n    UnforgettableMe.uploadData.setAugmenterName(\"NPRNewsStory\");\n  } else {\n    UnforgettableMe.uploadData.skip(\"Does not match the desired category or title.\");\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Record an NPR story from the \"News\" category, with a title like \"From The 'Inside Out,' A Lively Look Inside A Young Mind\", and upload it to Unforgettable Me as a new entry named \"NPRNewsStory\" when the story is published between 07:00 and 19:00, including the story's excerpt and URL in the body of the entry."}
{"original_description": "Choose a category and automatically share NPR stores to a Telegram chat.", "trigger_channel": "NPR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "npr.news_story_published"}, "trigger_details": [{"section": "Trigger fields", "title": "Category\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a category", "Slug": "category", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Story title\nThe story's title.", "description": "The story's title.", "details": {"Slug": "story_title", "Filter code": "Npr.newsStoryPublished.StoryTitle", "Type": "String", "Example": "From The 'Inside Out,' A Lively Look Inside A Young Mind"}}, {"section": "Ingredients", "title": "Story excerpt\nThe story's excerpt.", "description": "The story's excerpt.", "details": {"Slug": "story_excerpt", "Filter code": "Npr.newsStoryPublished.StoryExcerpt", "Type": "String", "Example": "Pixar's latest creation, which takes place inside a young girl's mind, is visually ambitious, emotionally affecting, and ultimately very wise."}}, {"section": "Ingredients", "title": "Story url\nThe URL to the story.", "description": "The URL to the story.", "details": {"Slug": "story_url", "Filter code": "Npr.newsStoryPublished.StoryURL", "Type": "String", "Example": "http://www.npr.org/2015/06/18/414701069/from-the-inside-out-a-lively-look-inside-a-young-mind?utm_medium=RSS&utm_campaign=storiesfromnpr"}}, {"section": "Ingredients", "title": "Category\nThe story's category.", "description": "The story's category.", "details": {"Slug": "category", "Filter code": "Npr.newsStoryPublished.Category", "Type": "String", "Example": "People & Places"}}, {"section": "Ingredients", "title": "Published at\nDate and time the story was published.", "description": "Date and time the story was published.", "details": {"Slug": "published_at", "Filter code": "Npr.newsStoryPublished.PublishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Npr.newsStoryPublished.Category === \"Politics\") {\n  var messageText = \"<b>\" + Npr.newsStoryPublished.StoryTitle + \"</b><br>\" + Npr.newsStoryPublished.StoryExcerpt + \"<br><a href='\" + Npr.newsStoryPublished.StoryURL + \"'>Read more</a>\";\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Story is not in the Politics category.\");\n}", "intent": "When a new story is published by NPR in the \"Politics\" category, send a message to the Telegram chat \"#news_updates\" with the story title, excerpt, and URL, including a web page preview."}
{"original_description": "Choose a category and you'll a daily email digest with the stories that are important to you.", "trigger_channel": "NPR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "npr.news_story_published"}, "trigger_details": [{"section": "Trigger fields", "title": "Category\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a category", "Slug": "category", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Story title\nThe story's title.", "description": "The story's title.", "details": {"Slug": "story_title", "Filter code": "Npr.newsStoryPublished.StoryTitle", "Type": "String", "Example": "From The 'Inside Out,' A Lively Look Inside A Young Mind"}}, {"section": "Ingredients", "title": "Story excerpt\nThe story's excerpt.", "description": "The story's excerpt.", "details": {"Slug": "story_excerpt", "Filter code": "Npr.newsStoryPublished.StoryExcerpt", "Type": "String", "Example": "Pixar's latest creation, which takes place inside a young girl's mind, is visually ambitious, emotionally affecting, and ultimately very wise."}}, {"section": "Ingredients", "title": "Story url\nThe URL to the story.", "description": "The URL to the story.", "details": {"Slug": "story_url", "Filter code": "Npr.newsStoryPublished.StoryURL", "Type": "String", "Example": "http://www.npr.org/2015/06/18/414701069/from-the-inside-out-a-lively-look-inside-a-young-mind?utm_medium=RSS&utm_campaign=storiesfromnpr"}}, {"section": "Ingredients", "title": "Category\nThe story's category.", "description": "The story's category.", "details": {"Slug": "category", "Filter code": "Npr.newsStoryPublished.Category", "Type": "String", "Example": "People & Places"}}, {"section": "Ingredients", "title": "Published at\nDate and time the story was published.", "description": "Date and time the story was published.", "details": {"Slug": "published_at", "Filter code": "Npr.newsStoryPublished.PublishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var hour = Npr.newsStoryPublished.PublishedAt.hour();\nvar category = Npr.newsStoryPublished.Category;\nif (category === \"People & Places\" && hour >= 5 && hour <= 20) {\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendDailyEmail.setTitle(\"NPR Daily News\");\n  var message = \"<b>\" + Npr.newsStoryPublished.StoryTitle + \"</b><br/>\" + Npr.newsStoryPublished.StoryExcerpt + \"<br/><a href='\" + Npr.newsStoryPublished.StoryURL + \"'>Read more</a>\";\n  EmailDigest.sendDailyEmail.setMessage(message);\n  EmailDigest.sendDailyEmail.setUrl(Npr.newsStoryPublished.StoryURL);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Does not match category or publication time.\");\n}", "intent": "Send a daily email digest at 08:00 to my inbox with the title \"NPR Daily News\" and a message containing the story title, excerpt, and URL, but only for stories in the \"People & Places\" category that were published between 05:00 and 20:00, with the item URL set to the story's original link."}
{"original_description": "Automatically share stories from NPR to a Slack channel. Select what categories of stories you'd like shared and what Slack channel you'd like them posted in.", "trigger_channel": "NPR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "npr.news_story_published"}, "trigger_details": [{"section": "Trigger fields", "title": "Category\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a category", "Slug": "category", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Story title\nThe story's title.", "description": "The story's title.", "details": {"Slug": "story_title", "Filter code": "Npr.newsStoryPublished.StoryTitle", "Type": "String", "Example": "From The 'Inside Out,' A Lively Look Inside A Young Mind"}}, {"section": "Ingredients", "title": "Story excerpt\nThe story's excerpt.", "description": "The story's excerpt.", "details": {"Slug": "story_excerpt", "Filter code": "Npr.newsStoryPublished.StoryExcerpt", "Type": "String", "Example": "Pixar's latest creation, which takes place inside a young girl's mind, is visually ambitious, emotionally affecting, and ultimately very wise."}}, {"section": "Ingredients", "title": "Story url\nThe URL to the story.", "description": "The URL to the story.", "details": {"Slug": "story_url", "Filter code": "Npr.newsStoryPublished.StoryURL", "Type": "String", "Example": "http://www.npr.org/2015/06/18/414701069/from-the-inside-out-a-lively-look-inside-a-young-mind?utm_medium=RSS&utm_campaign=storiesfromnpr"}}, {"section": "Ingredients", "title": "Category\nThe story's category.", "description": "The story's category.", "details": {"Slug": "category", "Filter code": "Npr.newsStoryPublished.Category", "Type": "String", "Example": "People & Places"}}, {"section": "Ingredients", "title": "Published at\nDate and time the story was published.", "description": "Date and time the story was published.", "details": {"Slug": "published_at", "Filter code": "Npr.newsStoryPublished.PublishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Npr.newsStoryPublished.Category === \"Politics\" && Npr.newsStoryPublished.StoryTitle.includes(\"Election\")) {\n  Slack.postToChannel.setMessage(`New politics story from NPR: ${Npr.newsStoryPublished.StoryTitle} - ${Npr.newsStoryPublished.StoryExcerpt} - ${Npr.newsStoryPublished.StoryURL}`);\n  Slack.postToChannel.setTitle(\"NPR Politics Update\");\n  Slack.postToChannel.setTitleUrl(Npr.newsStoryPublished.StoryURL);\n} else {\n  Slack.postToChannel.skip(\"Story does not match the filter criteria.\");\n}", "intent": "When a new story is published by NPR in the category of \"Politics\" and the story's title contains the keyword \"Election\", automatically post the story's title, excerpt, and URL to the Slack channel \"#news-updates\" with the message \"New politics story from NPR: {{story_title}} - {{story_excerpt}} - {{story_url}}\" and include a title \"NPR Politics Update\" that links to the story."}
{"original_description": "Never miss a story! Choose an NPR category then automatically save stories to your iOS reading list.", "trigger_channel": "NPR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "npr.news_story_published"}, "trigger_details": [{"section": "Trigger fields", "title": "Category\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a category", "Slug": "category", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Story title\nThe story's title.", "description": "The story's title.", "details": {"Slug": "story_title", "Filter code": "Npr.newsStoryPublished.StoryTitle", "Type": "String", "Example": "From The 'Inside Out,' A Lively Look Inside A Young Mind"}}, {"section": "Ingredients", "title": "Story excerpt\nThe story's excerpt.", "description": "The story's excerpt.", "details": {"Slug": "story_excerpt", "Filter code": "Npr.newsStoryPublished.StoryExcerpt", "Type": "String", "Example": "Pixar's latest creation, which takes place inside a young girl's mind, is visually ambitious, emotionally affecting, and ultimately very wise."}}, {"section": "Ingredients", "title": "Story url\nThe URL to the story.", "description": "The URL to the story.", "details": {"Slug": "story_url", "Filter code": "Npr.newsStoryPublished.StoryURL", "Type": "String", "Example": "http://www.npr.org/2015/06/18/414701069/from-the-inside-out-a-lively-look-inside-a-young-mind?utm_medium=RSS&utm_campaign=storiesfromnpr"}}, {"section": "Ingredients", "title": "Category\nThe story's category.", "description": "The story's category.", "details": {"Slug": "category", "Filter code": "Npr.newsStoryPublished.Category", "Type": "String", "Example": "People & Places"}}, {"section": "Ingredients", "title": "Published at\nDate and time the story was published.", "description": "Date and time the story was published.", "details": {"Slug": "published_at", "Filter code": "Npr.newsStoryPublished.PublishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iOS Reading List", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_reading_list.create_reading_list_item", "Filter code method": "IosReadingList.createReadingListItem.skip(string?: reason)", "Runtime method": "runAction(\"ios_reading_list.create_reading_list_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Preview text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Preview text", "Slug": "preview_text", "Required": "false", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setPreview Text(string: preview_text)"}}], "filter_code": "if (Npr.newsStoryPublished.Category === \"News\") {\n  IosReadingList.createReadingListItem.setTitle(Npr.newsStoryPublished.StoryTitle);\n  IosReadingList.createReadingListItem.setUrl(Npr.newsStoryPublished.StoryURL);\n  var previewText = Npr.newsStoryPublished.StoryExcerpt.substring(0, 50);\n  IosReadingList.createReadingListItem.setPreviewText(previewText);\n} else {\n  IosReadingList.createReadingListItem.skip(\"Story is not in the News category.\");\n}", "intent": "When a new story is published by NPR in the \"News\" category, automatically save it to my iOS reading list with the title of the story, the URL of the story, and a preview text that includes the first 50 characters of the story excerpt."}
{"original_description": "Use this applet to withdraw a fixed amount from a pot each day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_withdraw", "Filter code method": "Monzo.potWithdraw.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_withdraw\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potWithdraw.setAmount(string: amount)"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar pot = \"Emergency Fund\";\nvar amount = \"5\";\n\nif (hour === 8) {\n  Monzo.potWithdraw.setPot(pot);\n  Monzo.potWithdraw.setAmount(amount);\n} else {\n  Monzo.potWithdraw.skip(\"Not 8:00 AM\");\n}", "intent": "Withdraw £5 from the \"Emergency Fund\" pot every day at 8:00 AM."}
{"original_description": "Whenever it rains, this applet will move some money to your main account from a pot of your choice.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_withdraw", "Filter code method": "Monzo.potWithdraw.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_withdraw\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potWithdraw.setAmount(string: amount)"}}], "filter_code": "if (Weather.currentConditionIs.Condition !== \"Rain\" || Weather.currentConditionIs.Location !== \"London\") {\n  Monzo.potWithdraw.skip(\"Conditions not met: weather is not rain in London.\");\n} else {\n  Monzo.potWithdraw.setAmount(\"10\");\n  Monzo.potWithdraw.setPot(\"Emergency Fund\");\n}", "intent": "When the weather condition is \"Rain\" in London, move £10 from my \"Emergency Fund\" pot to my main account."}
{"original_description": "A savings challenge that takes today's date, adds up the numbers, and saves the total in a Pot. For example, 24th May 2019 would be 24 + 5 + 19 = 48p. This will move the money into your Pot at 8am every day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var momentObject = Meta.currentUserTime;\nvar date_of_month = momentObject.date();\nvar month = momentObject.month() + 1; // Months are 0-based in Moment.js\nvar year = Number(momentObject.format(\"YY\")); // Get the last two digits of the year\n\n// Calculate the deposit amount by adding the day, month, and year\nvar depositAmountInPence = date_of_month + month + year;\nvar depositAmountInGBP = depositAmountInPence / 100;\n\n// Set the amount to deposit into the \"Savings\" Pot\nMonzo.potDeposit.setAmount(depositAmountInGBP.toString());", "intent": "Every day at 8am, calculate the total of today's date by adding the day, month, and year (for example, for May 24th, 2019, it would be 24 + 5 + 19 = 48), then deposit this amount in pence into the \"Savings\" Pot on my Monzo account.", "filter_code_old": "// if the date is 22/05/2019, we should deposit 46p (22 + 5 + 19)\r\n\r\nvar momentObject = Meta.currentUserTime\r\n\r\nvar date_of_month = momentObject.date()\r\nvar month = momentObject.month() + 1\r\nvar year = Number(momentObject.format(\"YY\"))\r\n\r\nvar depositAmount = ((date_of_month + month + year) / 100).toFixed(2)\r\nvar depositAmountString = depositAmount.toString()\r\n\r\nMonzo.potDeposit.setAmount(depositAmountString);\r\n\r\n"}
{"original_description": "Connect Fitbit to Monzo and save money in the pot of your choice for every day that you hit your step goals.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-step-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Step goal\nYour daily step goal", "description": "Your daily step goal", "details": {"Slug": "StepGoal", "Filter code": "Fitbit.dailyStepGoal.StepGoal", "Type": "String", "Example": "10000"}}, {"section": "Ingredients", "title": "Steps\nNumber of steps you have taken", "description": "Number of steps you have taken", "details": {"Slug": "Steps", "Filter code": "Fitbit.dailyStepGoal.Steps", "Type": "String", "Example": "12546"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your step goal", "description": "Date you achieved your step goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyStepGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Monzo.potDeposit.setPot(\"Holiday Fund\");\n  Monzo.potDeposit.setAmount(\"1\");\n} else {\n  Monzo.potDeposit.skip(\"Did not achieve the step goal of 10000 steps.\");\n}", "intent": "Save £1 in my \"Holiday Fund\" pot on Monzo every day I achieve my 10000 step goal on Fitbit."}
{"original_description": "The UK's version of summer is approaching! Take on our Summer Savings Challenge. Whenever the temperature goes above 20 degrees, you'll save £2 into a pot of your choice. You can customise the temperature and amount, if you like!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius > 22) {\n  Monzo.potDeposit.setAmount(\"3\");\n  Monzo.potDeposit.skip();\n} else {\n  Monzo.potDeposit.skip(\"Temperature is not above 22 degrees Celsius.\");\n}", "intent": "When the temperature in London goes above 22 degrees Celsius, save £3 into my Summer Savings Pot on Monzo."}
{"original_description": "The great British winter is coming! So take on our Winter Savings Challenge. Whenever the temperature drops below 10 degrees, you'll save £2 into a pot of your choice. You can customise the amount too, if you like!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 10) {\n  Monzo.potDeposit.setAmount(\"2\");\n  Monzo.potDeposit.skip();\n}", "intent": "When the temperature in London drops below 10 degrees Celsius, deposit £2 into my Savings Pot on Monzo."}
{"original_description": "Gradually increase the amount you're saving each day to a pot of your choice. On 1st January, you'll save 1p. On 2nd January, you'll save 2p. This goes right up to £3.65 (or £3.66 😁) on the last day of the year!\r\n\r\nFeel free to jump in part way through the year, and see how far you get!\r\n\r\nThe challenge resets automatically on January 1st every year.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var day_of_year = Meta.currentUserTime.format('DDD');\nvar amount = parseInt(day_of_year);\nMonzo.potDeposit.setAmount(amount / 100);\nMonzo.potDeposit.skip(\"Not depositing into Savings pot\");\nif (Meta.currentUserTime.hour() === 0) {\n  Monzo.potDeposit.setPot(\"Savings\");\n}", "intent": "Every day at 12:00 AM, deposit an amount equal to the current day of the year in pence into my \"Savings\" pot on Monzo. For example, on January 1st, deposit 1p, on January 2nd, deposit 2p, and so on, until December 31st when you would deposit 365p (£3.65).", "filter_code_old": "var day_of_year = Meta.currentUserTime.format('DDD');\r\nvar amount = parseInt(day_of_year) / 100;\r\nMonzo.potDeposit.setAmount(amount.toFixed(2));\r\n\r\n"}
{"original_description": "This applet will reward you 1p for every 10 metres you cycle or run, from a pot of your choice, using Strava.", "trigger_channel": "Strava", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "strava.new_activity_by_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "activity_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time the activity was completed.", "description": "Date and time the activity was completed.", "details": {"Slug": "created_at", "Filter code": "Strava.newActivityByYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Activity type\nThe type of activity completed.", "description": "The type of activity completed.", "details": {"Slug": "activity_type", "Filter code": "Strava.newActivityByYou.ActivityType", "Type": "String", "Example": "Ride"}}, {"section": "Ingredients", "title": "Name\nThe name of the activity.", "description": "The name of the activity.", "details": {"Slug": "name", "Filter code": "Strava.newActivityByYou.Name", "Type": "String", "Example": "Evening Ride"}}, {"section": "Ingredients", "title": "Distance meters\nDistance moved in meters.", "description": "Distance moved in meters.", "details": {"Slug": "distance", "Filter code": "Strava.newActivityByYou.DistanceMeters", "Type": "String", "Example": "4475.4"}}, {"section": "Ingredients", "title": "Elapsed time\nTotal duration of the activity.", "description": "Total duration of the activity.", "details": {"Slug": "elapsed_time", "Filter code": "Strava.newActivityByYou.ElapsedTime", "Type": "String", "Example": "22 minutes, 13 seconds"}}, {"section": "Ingredients", "title": "Elapsed time in seconds\nTotal duration of the activity in seconds.", "description": "Total duration of the activity in seconds.", "details": {"Slug": "elapsed_time_in_seconds", "Filter code": "Strava.newActivityByYou.ElapsedTimeInSeconds", "Type": "String", "Example": "1333"}}, {"section": "Ingredients", "title": "Link to activity\nThe URL to the activity on Strava.", "description": "The URL to the activity on Strava.", "details": {"Slug": "link_to_activity", "Filter code": "Strava.newActivityByYou.LinkToActivity", "Type": "Web URL", "Example": "http://www.strava.com/activities/144461028"}}, {"section": "Ingredients", "title": "Route map image url\nURL to a map image of the route.", "description": "URL to a map image of the route.", "details": {"Slug": "route_map_image_url", "Filter code": "Strava.newActivityByYou.RouteMapImageUrl", "Type": "Image URL", "Example": "https://maps.googleapis.com/maps/api/staticmap?size=400x400&path=weight:3|color:0xFC4C02FF|enc:{qreFj}bjVZQ"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_withdraw", "Filter code method": "Monzo.potWithdraw.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_withdraw\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potWithdraw.setAmount(string: amount)"}}], "filter_code": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar activityType = Strava.newActivityByYou.ActivityType;\nif (distance >= 10 && (activityType === \"Ride\" || activityType === \"Run\")) {\n  var amount = (distance / 10) * 0.01; // Calculate the reward amount based on distance\n  Monzo.potWithdraw.setPot(\"Rainy Day\");\n  Monzo.potWithdraw.setAmount(amount.toFixed(2));\n} else {\n  Monzo.potWithdraw.skip(\"Activity distance is less than 10 meters or not a cycling/running activity.\");\n}", "intent": "When I complete a cycling or running activity on Strava with a distance of at least 10 meters, reward me by withdrawing 1p from my \"Rainy Day\" pot on Monzo.", "filter_code_old": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\r\nvar amount = distance/1000;\r\nMonzo.potWithdraw.setAmount(amount.toFixed(2));\r\n\r\n"}
{"original_description": "The great British winter is coming! So take on our Winter Savings Challenge. Whenever the temperature drops below 10 degrees, you'll save £2 into a pot of your choice. You can customise the temperature and amount, if you like!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5) {\n  Monzo.potDeposit.setAmount(\"1\");\n  Monzo.potDeposit.setPot(\"Savings Pot\");\n} else {\n  Monzo.potDeposit.skip(\"Temperature is not below 5 degrees Celsius.\");\n}", "intent": "When the temperature in London drops below 5 degrees Celsius, save £1 into my Savings Pot on Monzo."}
{"original_description": "Stay up to date on all things Harry Potter and the wizarding world by getting updates whenever there's a new story published in the MuggleNet RSS feed.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  IfNotifications.sendRichNotification\n    .setTitle(\"New Harry Potter Story\")\n    .setMessage(\"Check out the latest story from MuggleNet: \" + Feed.newFeedItem.EntryTitle)\n    .setLinkUrl(Feed.newFeedItem.EntryUrl)\n    .setImageUrl(Feed.newFeedItem.EntryImageUrl);\n} else {\n  IfNotifications.sendRichNotification.skip(\"Outside of notification hours (7 AM to 10 PM).\");\n}", "intent": "Get a notification with the title \"New Harry Potter Story\" and the message \"Check out the latest story from MuggleNet: {{EntryTitle}}\" whenever a new story is published in the MuggleNet RSS feed, including a link to the full story at {{EntryUrl}} and an image from the story at {{EntryImageUrl}}, sent between 07:00 and 22:00 every day."}
{"original_description": "Celebrate Earth Day on April 22nd with a Boost to your child's Give pot. You can then choose an environmental charity together they might like to donate this money towards! ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.getMonth() === 3 && DateAndTime.everyYearOn.CheckTime.getDate() === 22 && DateAndTime.everyYearOn.CheckTime.getHours() === 12) {\n  Roostermoney.boost.setAmount(\"10\");\n  Roostermoney.boost.setPot(\"Give pot\");\n  Roostermoney.boost.setDescription(\"Earth Day Donation\");\n  Roostermoney.boost.setChild(\"Emily\");\n} else {\n  Roostermoney.boost.skip(\"Not April 22nd at 12:00 PM.\");\n}", "intent": "On April 22nd every year, at 12:00 PM, boost £10 to my child, Emily's, Give pot with the description \"Earth Day Donation\" so we can choose an environmental charity to donate to together."}
{"original_description": "Celebrate International Children's Day on November 20th with a Boost to your child's Give pot. You can then choose a children's charity together they might like to donate this money towards! \r\n\r\n", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.getMonth() === 10 && DateAndTime.everyYearOn.CheckTime.getDate() === 20) {\n  Roostermoney.boost.setAmount(\"10\");\n  Roostermoney.boost.setPot(\"Give pot\");\n  Roostermoney.boost.setDescription(\"International Children's Day donation\");\n  Roostermoney.boost.setChild(\"Emily\");\n} else {\n  Roostermoney.boost.skip(\"Not November 20th\");\n}", "intent": "On November 20th every year, boost £10 to my child, Emily's, Give pot with the description \"International Children's Day donation\" so we can choose a children's charity to donate to together."}
{"original_description": "Walk for charity! You can boost your child's Give pot an amount whenever they reach their daily step goal. Their steps can help them raise some money for a charity of their choosing.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-step-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Step goal\nYour daily step goal", "description": "Your daily step goal", "details": {"Slug": "StepGoal", "Filter code": "Fitbit.dailyStepGoal.StepGoal", "Type": "String", "Example": "10000"}}, {"section": "Ingredients", "title": "Steps\nNumber of steps you have taken", "description": "Number of steps you have taken", "details": {"Slug": "Steps", "Filter code": "Fitbit.dailyStepGoal.Steps", "Type": "String", "Example": "12546"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your step goal", "description": "Date you achieved your step goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyStepGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "if (Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Roostermoney.boost.setAmount(\"10\");\n  Roostermoney.boost.setPot(\"Charity Fund\");\n  Roostermoney.boost.setDescription(\"Daily Step Goal Reward for Charity\");\n  Roostermoney.boost.child = \"Emily\";\n}", "intent": "When my child reaches their daily step goal of 10000 steps on Fitbit, boost their Give pot by £10, assigning it to the \"Charity Fund\" pot with the description \"Daily Step Goal Reward for Charity\", and apply this reward to my child, Emily."}
{"original_description": "At sunrise, your Mr. Coffee will automatically begin to brew a fresh pot of coffee.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && \n    Weather.sunRises.Condition === \"Sunny\" && \n    Weather.sunRises.TempFahrenheit === \"72\" && \n    location === \"New York City\") {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"start\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Conditions not met\");\n}", "intent": "When the sunrise is at 6:00 AM in New York City and the current weather condition is Sunny with a temperature of 72°F, turn on my WeMo Coffeemaker device named \"Kitchen Coffee\" to start brewing a fresh pot of coffee."}
{"original_description": "Save a set amount toward one of your Goals every time you reach your Fitbit step goal.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-step-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Step goal\nYour daily step goal", "description": "Your daily step goal", "details": {"Slug": "StepGoal", "Filter code": "Fitbit.dailyStepGoal.StepGoal", "Type": "String", "Example": "10000"}}, {"section": "Ingredients", "title": "Steps\nNumber of steps you have taken", "description": "Number of steps you have taken", "details": {"Slug": "Steps", "Filter code": "Fitbit.dailyStepGoal.Steps", "Type": "String", "Example": "12546"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your step goal", "description": "Date you achieved your step goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyStepGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Daily step goal of 10,000 steps not reached.\");\n}", "intent": "Save $5 toward my Summer Vacation goal every time I reach my daily step goal of 10,000 steps on Fitbit."}
{"original_description": "Always hitting public transit delays or traffic? Customize this message and then keep this widget handy — when you press it, it'll tell the Slack channel you choose that you're hitting delays, but will be there soon. ", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {}, "action_details": [], "filter_code": "Slack.postToChannel.setChannel(\"#commute-delays\");\nSlack.postToChannel.setMessage(\"Running late due to traffic, will arrive soon\");\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar mapImageUrl = \"http://maps.google.com/maps/api/staticmap?center=\" + latitude + \",\" + longitude + \"&zoom=15&size=400x200&maptype=roadmap&sensor=false&markers=color:red|\" + latitude + \",\" + longitude;\nSlack.postToChannel.setImageUrl(mapImageUrl);", "intent": "When you press the button widget at a location like 37.8267, -122.4230, send a message to the #commute-delays Slack channel saying \"Running late due to traffic, will arrive soon\" along with a map image of your current location."}
{"original_description": "Automatically re-post any pinned messages from Discord into a Slack channel of your choice.", "trigger_channel": "Discord", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "discord.new_message_in_channel"}, "trigger_details": [{"section": "Trigger fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time when the message was posted.", "description": "Date and time when the message was posted.", "details": {"Slug": "created_at", "Filter code": "Discord.newMessageInChannel.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Message\nThe contents of the message.", "description": "The contents of the message.", "details": {"Slug": "message", "Filter code": "Discord.newMessageInChannel.Message", "Type": "String", "Example": "Hey everyone 👋"}}, {"section": "Ingredients", "title": "Author\nThe author of the message.", "description": "The author of the message.", "details": {"Slug": "author", "Filter code": "Discord.newMessageInChannel.Author", "Type": "String", "Example": "username123"}}, {"section": "Ingredients", "title": "Link to message\nThis is a link to the message in Discord.", "description": "This is a link to the message in Discord.", "details": {"Slug": "link_to_message", "Filter code": "Discord.newMessageInChannel.LinkToMessage", "Type": "Web URL", "Example": "https://discord.com/channels/833856998537166918/833856998537166921/1181411805982105631"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Discord.newMessageInChannel.Channel === \"#general\" \n    && Discord.newMessageInChannel.Author === \"username123\" \n    && Discord.newMessageInChannel.CreatedAt.hour() >= 8 \n    && Discord.newMessageInChannel.CreatedAt.hour() < 18 \n    && Discord.newMessageInChannel.Message.includes(\"pinned\")) {\n  Slack.postToChannel.setMessage(Discord.newMessageInChannel.Message);\n  Slack.postToChannel.setTitle(\"Important Update\");\n  Slack.postToChannel.setTitleUrl(Discord.newMessageInChannel.LinkToMessage);\n  Slack.postToChannel.setImageUrl(null); // No image URL provided in the intent\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}", "intent": "When a new message is posted in the #general channel on Discord after 08:00 and before 18:00, and the message is pinned by username123, re-post the message contents, including any links or images, to the #announcements channel on Slack with the title \"Important Update\" and a link back to the original Discord message."}
{"original_description": "When a leak is detected by the Lyric Wi-Fi water leak and freeze detector it will turn on your chosen lights and make them Blue", "trigger_channel": "Honeywell Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "honeywell_lyric.water_leak"}, "trigger_details": [{"section": "Trigger fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your system", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HoneywellLyric.waterLeak.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the leak detector being monitored", "description": "The name of the leak detector being monitored", "details": {"Slug": "device_name", "Filter code": "HoneywellLyric.waterLeak.DeviceName", "Type": "String", "Example": "Washing machine"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (HoneywellLyric.waterLeak.DeviceName === \"Washing machine\") {\n  PhilipsHue.setColorAllHue.skip(\"Not the Washing machine detector\");\n} else {\n  PhilipsHue.setColorAllHue.setLights(\"Living Room\");\n  PhilipsHue.setColorAllHue.setColor(\"#0000FF\");\n}", "intent": "When the \"Washing machine\" Lyric Wi-Fi water leak and freeze detector detects a leak, turn on the \"Living Room\" lights and set their color to Blue (#0000FF)."}
{"original_description": "The WWF is world’s leading conservation organization, active in 100 countries. Their mission is to \"protect life on our planet — including our own.\" Read up on their insights and actions in Pocket at your leisure — this Applet will save their new stories to your queue.\r\n\r\n", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Pocket", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pocket.read_it_later", "Filter code method": "Pocket.readItLater.skip(string?: reason)", "Runtime method": "runAction(\"pocket.read_it_later\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setUrl(string: url)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setTags(string: tags)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle.includes(\"conservation\") && Feed.newFeedItem.EntryAuthor === \"WWF Official\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"WWF, conservation, wildlife\");\n} else {\n  Pocket.readItLater.skip(\"Entry title does not contain 'conservation' or entry author is not 'WWF Official'\");\n}", "intent": "When a new story is published by the WWF on their RSS feed at https://www.wwf.org.uk/feed, with an entry title containing the keyword \"conservation\" and an entry author named \"WWF Official\", save the article to my Pocket queue with the URL of the entry, tags \"WWF, conservation, wildlife\", so I can read it later at my leisure."}
{"original_description": "Do you regularly check in with your community to ask for feedback or remind them of an event? This Applet auto-posts a message every month to help you stay consistent.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_month_on_the"}, "trigger_details": [{"section": "Trigger fields", "title": "Month day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of the month", "Slug": "month_day", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyMonthOnThe.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Facebook Pages", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "facebook_pages.create_status_message_page", "Filter code method": "FacebookPages.createStatusMessagePage.skip(string?: reason)", "Runtime method": "runAction(\"facebook_pages.create_status_message_page\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Status message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "FacebookPages.createStatusMessagePage.setMessage(string: message)"}}], "filter_code": "if (DateAndTime.everyMonthOnThe.month_day !== \"15\" || DateAndTime.everyMonthOnThe.time !== \"10:00 AM\") {\n  FacebookPages.createStatusMessagePage.skip(\"Not the scheduled time for the monthly reminder.\");\n} else {\n  FacebookPages.createStatusMessagePage.setMessage(\"Hello community, don't forget our monthly meetup!\");\n}", "intent": "Post a status message \"Hello community, don't forget our monthly meetup!\" to the Facebook Page every month on the 15th at 10:00 AM to remind followers of the upcoming event and encourage feedback."}
{"original_description": "This Applet lets your team know via Slack when there's a systemwide service alert on KC Metro between the hours of 7-10am.", "trigger_channel": "King County Metro", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "king_county_metro.new_metro_alert_from_king_county_metro"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryTitle", "Type": "String", "Example": "Transit Alert Correction – Ride Metro to weekend events; note service revisions due to events, the Memorial Day holiday & Tuesday’s closure of the South Bellevue P&R"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryUrl", "Type": "String", "Example": "https://content.govdelivery.com/accounts/WAKING/bulletins/19d5d2d"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, contains HTML.", "description": "The entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "KingCountyMetro.newMetroAlertFromKingCountyMetro.ContentHtml", "Type": "String", "Example": "<p><font face=\"\"arial,helvetica,sans-serif\"\" size=\"\"3\"\">While riding Metro to most events remains a reliable and cost-effective way to go, Metro Transit service <a href=\"\"http://kingcounty.gov/depts/transportation/news/2017/20170524-Memorial-Day-transit.."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\n\n// Skip outside of 7-10am\nif (hour < 7 || hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\");\n}\n\n// Set message and title for the Slack post\nSlack.postToChannel.setMessage(\"Transit Alert: \" + KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryTitle + \" - Check \" + KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryUrl + \" for details\");\nSlack.postToChannel.setTitle(\"Metro Service Alert\");\n\n// Set channel to #commute-alerts", "intent": "When a new systemwide service alert is posted on the King County Metro between 7:00 AM and 10:00 AM, send a message to the #commute-alerts channel on Slack with the title \"Metro Service Alert\" and the message \"Transit Alert: $(EntryTitle) - Check $(EntryUrl) for details\".", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\r\n\r\n// Skip outside of 7-10am\r\nif (Hour < 7 || Hour > 10) {\r\n  Slack.postToChannel.skip(\"Outside of commuting hours\")\r\n}\r\n\r\n\r\n"}
{"original_description": "This Applet sends you a notification from the IFTTT app when there's a service alert on the Rapid Ride C line between 7-10am.", "trigger_channel": "King County Metro", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "king_county_metro.new_service_alert_on_rapid_ride_a_line"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar title = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle;\nvar content = KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml;\n\nif (hour >= 7 && hour < 10) {\n  IfNotifications.sendNotification.setMessage(\"Rapid Ride C Line Alert: \" + title + \" - \" + content);\n} else {\n  IfNotifications.sendNotification.skip(\"Not during the morning commute\");\n}", "intent": "Send a notification from the IFTTT app when there's a service alert on the Rapid Ride C line between 7:00 AM and 10:00 AM with the message \"Rapid Ride C Line Alert: Launch Day! - Well here we are on, blah, blah...\".", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\r\n\r\nif (Hour < 7 || Hour > 10) {\r\n  IfNotifications.sendNotification.skip(\"Not during the morning commute\")\r\n}\r\n\r\n\r\n"}
{"original_description": "This Applet sends you a notification when there's a service alert on Rapid Ride E line between the hours of 7-10am and 5-7pm.", "trigger_channel": "King County Metro", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "king_county_metro.new_service_alert_on_rapid_ride_a_line"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar title = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle;\nvar url = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryUrl;\nvar content = KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml;\nvar published = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryPublished;\n\n// Skip outside of 7-10am and 5-7pm\nif (hour < 7 || (hour > 10 && hour < 17) || hour > 19) {\n  IfNotifications.sendNotification.skip(\"Outside of commuting hours\");\n} else {\n  var message = \"New Service Alert: \" + title + \"\\nURL: \" + url + \"\\nContent: \" + content + \"\\nPublished: \" + published;\n  IfNotifications.sendNotification.setMessage(message);\n}", "intent": "Send a notification to my device when a new service alert is posted on the King County Metro channel for the Rapid Ride E line between 7:00 AM and 10:00 AM or between 5:00 PM and 7:00 PM, including the alert title, URL, content, and publication date in the message.", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\r\n\r\n// Skip outside of 7-10am and 5-7pm\r\nif (Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {\r\n  IfNotifications.sendNotification.skip(\"Outside of commuting hours\")\r\n}\r\n\r\n\r\n"}
{"original_description": "This Applet posts to a Slack channel when there's a service alert on Rapid Ride D line between the hours of 7-10am.", "trigger_channel": "King County Metro", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "king_county_metro.new_service_alert_on_rapid_ride_a_line"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "KingCountyMetro.newServiceAlertOnRapidRideALine.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour < 7 || hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\");\n}\nSlack.postToChannel.setMessage(\"There is a service alert on Rapid Ride D line: \" + KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml);\nSlack.postToChannel.setTitle(\"Rapid Ride D Service Alert\");\nSlack.postToChannel.setChannel(\"#commute-alerts\");", "intent": "Post a message to the #commute-alerts channel on Slack with the title \"Rapid Ride D Service Alert\" and the message \"There is a service alert on Rapid Ride D line: {{EntryContent}}\" whenever a new service alert is published on the King County Metro between 7:00 AM and 10:00 AM.", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\r\n\r\n// Skip outside of 7-10am and 5-7pm\r\nif (Hour < 7 || Hour > 10) {\r\n  Slack.postToChannel.skip(\"Outside of commuting hours\")\r\n}\r\n\r\n\r\n"}
{"original_description": "This connection will Start dishwasher when electricity price is low in your area.", "trigger_channel": "True Energy Smart Home Denmark", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "True_Energy_DK.electricity_price_cheap"}, "trigger_details": [{"section": "Trigger fields", "title": "Area\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Region", "Helper text": "Region you wish to monitor", "Slug": "area", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Region\nDenmark Region being monitored", "description": "Denmark Region being monitored", "details": {"Slug": "area", "Filter code": "TrueEnergyDK.electricityPriceCheap.Region", "Type": "String", "Example": "West Denmark"}}, {"section": "Ingredients", "title": "Valid from\nTime at which electricity price changes", "description": "Time at which electricity price changes", "details": {"Slug": "valid_from", "Filter code": "TrueEnergyDK.electricityPriceCheap.ValidFrom", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Price\nElectricity price per kWh in DKK", "description": "Electricity price per kWh in DKK", "details": {"Slug": "price", "Filter code": "TrueEnergyDK.electricityPriceCheap.Price", "Type": "String", "Example": "167.17"}}, {"section": "Ingredients", "title": "Co2 emission\nCO2 emission per kWh in grams", "description": "CO2 emission per kWh in grams", "details": {"Slug": "co2_emission", "Filter code": "TrueEnergyDK.electricityPriceCheap.Co2Emission", "Type": "String", "Example": "108.77"}}], "action_channel": "Home Connect Dishwasher", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_turn_on", "Filter code method": "HcDishwasher.dishwasherTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_dishwasher.dishwasher_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (TrueEnergyDK.electricityPriceCheap.Region === \"West Denmark\" && parseFloat(TrueEnergyDK.electricityPriceCheap.Price) < 150) {\n  // No action needed, let the dishwasher turn on\n} else {\n  HcDishwasher.dishwasherTurnOn.skip(\"Electricity price is not below 150 DKK per kWh in West Denmark.\");\n}", "intent": "Start the Home Connect Dishwasher when the electricity price in West Denmark is below 150 DKK per kWh."}
{"original_description": "This creates a widget you can add to the home screen on your phone. When you press it,  a specific device you choose will get a faster internet connection on your TP-Link network.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tplink_router.prioritize_device", "Filter code method": "TplinkRouter.prioritizeDevice.skip(string?: reason)", "Runtime method": "runAction(\"tplink_router.prioritize_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Helper text": "The name of the device to be prioritized.", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration of priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Duration of Priority", "Helper text": "The length of time the specified device will be prioritized for.", "Slug": "duration_of_priority", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  TplinkRouter.prioritizeDevice.setDeviceName(\"Office Laptop\");\n  TplinkRouter.prioritizeDevice.setDurationOfPriority(\"2 hours\");\n} else {\n  TplinkRouter.prioritizeDevice.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When you press the button widget on your phone between 07:00 and 19:00, prioritize the internet connection for the device named \"Office Laptop\" on your TP-Link network for a duration of 2 hours."}
{"original_description": "Guarantee a faster internet connection for your Arlo each time a motion event is detected so you can find out what's happened right away.", "trigger_channel": "Arlo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "arlo.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "device_name", "Filter code": "Arlo.motion.DeviceName", "Type": "String", "Example": "48B14C740AD5E"}}, {"section": "Ingredients", "title": "Detection time\nDate and time of motion event detection.", "description": "Date and time of motion event detection.", "details": {"Slug": "detected_at", "Filter code": "Arlo.motion.DetectionTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tplink_router.prioritize_device", "Filter code method": "TplinkRouter.prioritizeDevice.skip(string?: reason)", "Runtime method": "runAction(\"tplink_router.prioritize_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Helper text": "The name of the device to be prioritized.", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration of priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Duration of Priority", "Helper text": "The length of time the specified device will be prioritized for.", "Slug": "duration_of_priority", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Arlo.motion.DeviceName === \"48B14C740AD5E\") {\n  TplinkRouter.prioritizeDevice.setDurationOfPriority(30);\n  TplinkRouter.prioritizeDevice.setDeviceName(\"48B14C740AD5E\");\n} else {\n  TplinkRouter.prioritizeDevice.skip(\"Arlo camera not named 48B14C740AD5E\");\n}", "intent": "Prioritize the internet connection for my Arlo camera named 48B14C740AD5E on my TP-Link Router for 30 minutes every time a motion event is detected, so I can immediately review what triggered the alert."}
{"original_description": "Guarantee a faster internet connection for your Arlo each time a sound event is detected so you can find out what's happened right away.", "trigger_channel": "Arlo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "arlo.audio"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "device_name", "Filter code": "Arlo.audio.DeviceName", "Type": "String", "Example": "48B14C740AD5E"}}, {"section": "Ingredients", "title": "Detected at\nDate and time of audio event detection.", "description": "Date and time of audio event detection.", "details": {"Slug": "detected_at", "Filter code": "Arlo.audio.DetectedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tplink_router.prioritize_device", "Filter code method": "TplinkRouter.prioritizeDevice.skip(string?: reason)", "Runtime method": "runAction(\"tplink_router.prioritize_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Helper text": "The name of the device to be prioritized.", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration of priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Duration of Priority", "Helper text": "The length of time the specified device will be prioritized for.", "Slug": "duration_of_priority", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Arlo.audio.DeviceName === \"48B14C740AD5E\") {\n  TplinkRouter.prioritizeDevice.setDeviceName(\"48B14C740AD5E\");\n  TplinkRouter.prioritizeDevice.setDurationOfPriority(30);\n} else {\n  TplinkRouter.prioritizeDevice.skip(\"Arlo device not matched.\");\n}", "intent": "Prioritize the internet connection for my Arlo device named 48B14C740AD5E on the TP-Link Router for 30 minutes every time a sound event is detected, so I can immediately check what triggered the alert."}
{"original_description": "This Applet will locate and copy over any new event added from an iOS Calendar to a Google Calendar you choose.", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event_in_calendar"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Slug": "calendar_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEventInCalendar.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEventInCalendar.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEventInCalendar.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEventInCalendar.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEventInCalendar.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEventInCalendar.Notes", "Type": "String", "Example": "Let's get together and talk!"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEventInCalendar.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEventInCalendar.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEventInCalendar.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEventInCalendar.URL", "Type": "String", "Example": "https://ifttt.com"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.add_detailed_event", "Filter code method": "GoogleCalendar.addDetailedEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.add_detailed_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Start time", "Helper text": "Ex. 10AM, Next Monday at 3PM.", "Slug": "start_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setStart Time(string: start_time)"}}, {"section": "Action fields", "title": "End time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "End time", "Slug": "end_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setEnd Time(string: end_time)"}}, {"section": "Action fields", "title": "All day\nDropdown list", "description": "Dropdown list", "details": {"Label": "All day?", "Helper text": "No by default. All day events will only consider the date in the start time and end time fields.", "Slug": "all_day", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAll Day(string: all_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setDescription(string: description)"}}, {"section": "Action fields", "title": "Location\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Location", "Helper text": "Optional", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Attendees\nText input > Other", "description": "Text input > Other", "details": {"Label": "Attendees", "Helper text": "Optional comma separated list of attendee emails", "Slug": "attendees", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAttendees(string: attendees)"}}], "filter_code": "if (IosCalendar.newCalendarEventInCalendar.CalendarName === \"Personal\") {\n  GoogleCalendar.addDetailedEvent.setStart_Time(IosCalendar.newCalendarEventInCalendar.StartDate);\n  GoogleCalendar.addDetailedEvent.setEnd_Time(IosCalendar.newCalendarEventInCalendar.EndDate);\n  GoogleCalendar.addDetailedEvent.setTitle(IosCalendar.newCalendarEventInCalendar.Title);\n  GoogleCalendar.addDetailedEvent.setDescription(\"Discuss project updates\");\n  GoogleCalendar.addDetailedEvent.setLocation(\"Conference Room A\");\n  var attendees = IosCalendar.newCalendarEventInCalendar.Invitees;\n  if (attendees.includes(\"John Doe\")) {\n    attendees = attendees.replace(\"John Doe\", \"john.doe@example.com\");\n  }\n  if (attendees.includes(\"Jane Smith\")) {\n    attendees = attendees.replace(\"Jane Smith\", \"jane.smith@example.com\");\n  }\n  GoogleCalendar.addDetailedEvent.setAttendees(attendees);\n} else {\n  GoogleCalendar.addDetailedEvent.skip(\"Event not in Personal calendar\");\n}", "intent": "When a new event is added to my Personal iOS Calendar, such as a meeting titled \"Team Meeting\" starting at 10:00 AM and ending at 11:30 AM on February 12th, with invitees including John Doe and Jane Smith, create a corresponding detailed event in my Google Calendar named \"Work Events\", setting the start time to 10:00 AM, end time to 11:30 AM, title to \"Team Meeting\", description to \"Discuss project updates\", location to \"Conference Room A\", and attendees to john.doe@example.com, jane.smith@example.com."}
{"original_description": "This Applet will locate and copy over any new event added from the iOS Calendar you choose to the Google Calendar you choose. Stay in sync!", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event_in_calendar"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Slug": "calendar_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEventInCalendar.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEventInCalendar.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEventInCalendar.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEventInCalendar.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEventInCalendar.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEventInCalendar.Notes", "Type": "String", "Example": "Let's get together and talk!"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEventInCalendar.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEventInCalendar.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEventInCalendar.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEventInCalendar.URL", "Type": "String", "Example": "https://ifttt.com"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.add_detailed_event", "Filter code method": "GoogleCalendar.addDetailedEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.add_detailed_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Start time", "Helper text": "Ex. 10AM, Next Monday at 3PM.", "Slug": "start_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setStart Time(string: start_time)"}}, {"section": "Action fields", "title": "End time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "End time", "Slug": "end_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setEnd Time(string: end_time)"}}, {"section": "Action fields", "title": "All day\nDropdown list", "description": "Dropdown list", "details": {"Label": "All day?", "Helper text": "No by default. All day events will only consider the date in the start time and end time fields.", "Slug": "all_day", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAll Day(string: all_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setDescription(string: description)"}}, {"section": "Action fields", "title": "Location\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Location", "Helper text": "Optional", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Attendees\nText input > Other", "description": "Text input > Other", "details": {"Label": "Attendees", "Helper text": "Optional comma separated list of attendee emails", "Slug": "attendees", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAttendees(string: attendees)"}}], "filter_code": "if (IosCalendar.newCalendarEventInCalendar.Title === \"Team Meeting\" \n    && IosCalendar.newCalendarEventInCalendar.CalendarName === \"Work\" \n    && IosCalendar.newCalendarEventInCalendar.Invitees.includes(\"john.doe@example.com\") \n    && IosCalendar.newCalendarEventInCalendar.Invitees.includes(\"jane.smith@example.com\") \n    && IosCalendar.newCalendarEventInCalendar.Notes.includes(\"Discuss project updates\")) {\n  GoogleCalendar.addDetailedEvent.setStart Time(\"2024-09-17T10:00:00-07:00\");\n  GoogleCalendar.addDetailedEvent.setEnd Time(\"2024-09-17T11:00:00-07:00\");\n  GoogleCalendar.addDetailedEvent.setTitle(IosCalendar.newCalendarEventInCalendar.Title);\n  GoogleCalendar.addDetailedEvent.setDescription(\"Location: \" + IosCalendar.newCalendarEventInCalendar.Location + \". Original event notes: \" + IosCalendar.newCalendarEventInCalendar.Notes);\n  GoogleCalendar.addDetailedEvent.setAttendees(IosCalendar.newCalendarEventInCalendar.Invitees);\n  GoogleCalendar.addDetailedEvent.setLocation(IosCalendar.newCalendarEventInCalendar.Location);\n} else {\n  GoogleCalendar.addDetailedEvent.skip(\"Event does not match the specified criteria.\");\n}", "intent": "When a new event titled \"Team Meeting\" is added to the \"Work\" calendar on iOS Calendar, with invitees including \"john.doe@example.com, jane.smith@example.com\", and notes containing the phrase \"Discuss project updates\", copy this event to the \"Primary\" calendar on Google Calendar, setting the start time to \"2024-09-17T10:00:00-07:00\", end time to \"2024-09-17T11:00:00-07:00\", and adding a description that includes the original event's location, \"Conference Room A\"."}
{"original_description": "When electricity prices are high, reduce energy consumption buy adjusting the freezer temperature to a bit warmer. ", "trigger_channel": "True Energy Smart Home Denmark", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "True_Energy_DK.electricity_price_expensive"}, "trigger_details": [{"section": "Trigger fields", "title": "Area\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Region", "Helper text": "Region you wish to monitor", "Slug": "area", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Region\nDenmark Region being monitored", "description": "Denmark Region being monitored", "details": {"Slug": "area", "Filter code": "TrueEnergyDK.electricityPriceExpensive.Region", "Type": "String", "Example": "West Denmark"}}, {"section": "Ingredients", "title": "Valid from\nTime at which electricity price changes", "description": "Time at which electricity price changes", "details": {"Slug": "valid_from", "Filter code": "TrueEnergyDK.electricityPriceExpensive.ValidFrom", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Price\nElectricity price per kWh in DKK", "description": "Electricity price per kWh in DKK", "details": {"Slug": "price", "Filter code": "TrueEnergyDK.electricityPriceExpensive.Price", "Type": "String", "Example": "167.17"}}, {"section": "Ingredients", "title": "Co2 emission\nCO2 emission per kWh in grams", "description": "CO2 emission per kWh in grams", "details": {"Slug": "co2_emission", "Filter code": "TrueEnergyDK.electricityPriceExpensive.Co2Emission", "Type": "String", "Example": "108.77"}}], "action_channel": "Home Connect Fridge Freezer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_fridge.freezer_set_temperature", "Filter code method": "HcFridge.freezerSetTemperature.skip(string?: reason)", "Runtime method": "runAction(\"hc_fridge.freezer_set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which fridge?", "Helper text": "Please note that your fridge freezer has to be connected to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Please note that not every temperature is supported by the appliance. For more information please check your user manual.", "Slug": "temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (TrueEnergyDK.electricityPriceExpensive.Price > 170 && TrueEnergyDK.electricityPriceExpensive.Region === \"West Denmark\") {\n  HcFridge.freezerSetTemperature.setTemperature(-18);\n} else {\n  HcFridge.freezerSetTemperature.skip(\"Electricity price is not high or region is not West Denmark.\");\n}", "intent": "When the electricity price exceeds 170 DKK per kWh in West Denmark, adjust the freezer temperature of my Home Connect fridge freezer to -18°C to reduce energy consumption."}
{"original_description": "Change Nexus Home AC modes when temperature reduces", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 18 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  BrilliantNexus.acExecution.setMode(\"Cooling\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n} else {\n  BrilliantNexus.acExecution.skip(\"Temperature in New York is not below 18 degrees Celsius.\");\n}", "intent": "When the temperature in New York drops below 18 degrees Celsius, set the Brilliant Nexus AC device named \"Living Room AC\" to Cooling mode with a temperature of 22 degrees Celsius and a fan speed of Medium."}
{"original_description": "Every time you achieve your daily step goal with Fitbit it will be displayed on your Glance Clock.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-step-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Step goal\nYour daily step goal", "description": "Your daily step goal", "details": {"Slug": "StepGoal", "Filter code": "Fitbit.dailyStepGoal.StepGoal", "Type": "String", "Example": "10000"}}, {"section": "Ingredients", "title": "Steps\nNumber of steps you have taken", "description": "Number of steps you have taken", "details": {"Slug": "Steps", "Filter code": "Fitbit.dailyStepGoal.Steps", "Type": "String", "Example": "12546"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your step goal", "description": "Date you achieved your step goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyStepGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Fitbit.dailyStepGoal.Steps >= 10000) {\n  Glanceclock.notice.setText(\"Daily step goal achieved: \" + Fitbit.dailyStepGoal.StepGoal + \" steps\");\n  // Assuming default or no specific sound, animation, and color options are set in the action details\n}", "intent": "When your Fitbit step count reaches 10000 steps, display a notification on your Glance Clock with the message \"Daily step goal achieved: 10000 steps\" in a cheerful animation with a green color."}
{"original_description": "Every time your Fitbit daily calorie burn goal is achieved, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-calorie-burn-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Calorie burn goal\nYour daily calorie burn goal", "description": "Your daily calorie burn goal", "details": {"Slug": "CalorieBurnGoal", "Filter code": "Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Calories burned\nNumber of calories burned", "description": "Number of calories burned", "details": {"Slug": "CaloriesBurned", "Filter code": "Fitbit.dailyCalorieBurnGoal.CaloriesBurned", "Type": "String", "Example": "2123"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your calorie burn goal", "description": "Date you achieved your calorie burn goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyCalorieBurnGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal === \"2000\" && Fitbit.dailyCalorieBurnGoal.CaloriesBurned >= Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal) {\n  Daskeyboardq.signals.setName(\"Calorie Goal Achieved\");\n  Daskeyboardq.signals.setMessage(`You burned ${Fitbit.dailyCalorieBurnGoal.CaloriesBurned} calories on ${Fitbit.dailyCalorieBurnGoal.DateAchieved}`);\n  Daskeyboardq.signals.setZone(1);\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setEffect(\"blink\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Daily calorie burn goal not achieved.\");\n}", "intent": "When your daily Fitbit calorie burn goal of 2000 calories is achieved, send a Signal to your Das Keyboard named \"Calorie Goal Achieved\" with the message \"You burned 2123 calories on 2020-07-07\", setting the color of the keyboard's Zone 1 to red and displaying it with a blink effect on the device named \"Office Keyboard\"."}
{"original_description": "Save energy and money during SmartHours critical pricing events. ", "trigger_channel": "SmartHours™️", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "oge.price_changes"}, "trigger_details": [{"section": "Ingredients", "title": "Price changed at\nDate and time the price changed.", "description": "Date and time the price changed.", "details": {"Slug": "price_changed_at", "Filter code": "Oge.priceChanges.PriceChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Smart hours price\nCurrent price level (can be low, standard, high or critical).", "description": "Current price level (can be low, standard, high or critical).", "details": {"Slug": "smart_hours_price", "Filter code": "Oge.priceChanges.SmartHoursPrice", "Type": "String", "Example": "standard"}}], "action_channel": "Aquanta", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aquanta.away", "Filter code method": "Aquanta.away.skip(string?: reason)", "Runtime method": "runAction(\"aquanta.away\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What device should be put into Away?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Start\nText input > Other", "description": "Text input > Other", "details": {"Label": "When should the Away start?", "Helper text": "Optional delay before the Away starts. For instance: '1 hour', '15 mins', or '2 days'. Leave blank for immediately.", "Slug": "start", "Required": "false", "Can have default value": "true", "Filter code method": "Aquanta.away.setStart(string: start)"}}, {"section": "Action fields", "title": "End\nText input > Other", "description": "Text input > Other", "details": {"Label": "How long should Away last?", "Helper text": "Duration of Away. For example: '2 hours', '1 day', or '15 mins'", "Slug": "end", "Required": "true", "Can have default value": "true", "Filter code method": "Aquanta.away.setEnd(string: end)"}}], "filter_code": "if (Oge.priceChanges.SmartHoursPrice === \"critical\") {\n  Aquanta.away.setDevice(\"Home Water Heater\");\n  Aquanta.away.setStart(\"\");\n  Aquanta.away.setEnd(\"4 hours\");\n}", "intent": "When the SmartHours price changes to critical, put my Aquanta device named \"Home Water Heater\" into Away mode immediately for a duration of 4 hours to save energy and money during the critical pricing event."}
{"original_description": "Are your kids receiving cash gifts this Christmas? You can schedule a Christmas boost to deliver your child's gift money on the big day, so you don't have to wake up as early as Santa!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.getMonth() === 11 && DateAndTime.everyYearOn.CheckTime.getDate() === 25 && DateAndTime.everyYearOn.CheckTime.getHours() === 8) {\n  Roostermoney.boost.setAmount(\"25\");\n  Roostermoney.boost.setPot(\"Savings\");\n  Roostermoney.boost.setDescription(\"Christmas Gift Money\");\n  Roostermoney.boost.child = \"Emily\";\n} else {\n  Roostermoney.boost.skip(\"Not Christmas morning at 8:00 AM.\");\n}", "intent": "Schedule a Christmas boost of $25 to my child, Emily, in the Savings pot on December 25th every year at 8:00 AM, with the description \"Christmas Gift Money\", so the funds are delivered on the big day without needing to wake up early."}
{"original_description": "Hit your fitness goals and your financial goals at the same time! Specify the type of activity (run or ride) and the amount you'd like to save when you set up the Applet. ", "trigger_channel": "Strava", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "strava.new_activity_by_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "activity_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time the activity was completed.", "description": "Date and time the activity was completed.", "details": {"Slug": "created_at", "Filter code": "Strava.newActivityByYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Activity type\nThe type of activity completed.", "description": "The type of activity completed.", "details": {"Slug": "activity_type", "Filter code": "Strava.newActivityByYou.ActivityType", "Type": "String", "Example": "Ride"}}, {"section": "Ingredients", "title": "Name\nThe name of the activity.", "description": "The name of the activity.", "details": {"Slug": "name", "Filter code": "Strava.newActivityByYou.Name", "Type": "String", "Example": "Evening Ride"}}, {"section": "Ingredients", "title": "Distance meters\nDistance moved in meters.", "description": "Distance moved in meters.", "details": {"Slug": "distance", "Filter code": "Strava.newActivityByYou.DistanceMeters", "Type": "String", "Example": "4475.4"}}, {"section": "Ingredients", "title": "Elapsed time\nTotal duration of the activity.", "description": "Total duration of the activity.", "details": {"Slug": "elapsed_time", "Filter code": "Strava.newActivityByYou.ElapsedTime", "Type": "String", "Example": "22 minutes, 13 seconds"}}, {"section": "Ingredients", "title": "Elapsed time in seconds\nTotal duration of the activity in seconds.", "description": "Total duration of the activity in seconds.", "details": {"Slug": "elapsed_time_in_seconds", "Filter code": "Strava.newActivityByYou.ElapsedTimeInSeconds", "Type": "String", "Example": "1333"}}, {"section": "Ingredients", "title": "Link to activity\nThe URL to the activity on Strava.", "description": "The URL to the activity on Strava.", "details": {"Slug": "link_to_activity", "Filter code": "Strava.newActivityByYou.LinkToActivity", "Type": "Web URL", "Example": "http://www.strava.com/activities/144461028"}}, {"section": "Ingredients", "title": "Route map image url\nURL to a map image of the route.", "description": "URL to a map image of the route.", "details": {"Slug": "route_map_image_url", "Filter code": "Strava.newActivityByYou.RouteMapImageUrl", "Type": "Image URL", "Example": "https://maps.googleapis.com/maps/api/staticmap?size=400x400&path=weight:3|color:0xFC4C02FF|enc:{qreFj}bjVZQ"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if ((Strava.newActivityByYou.ActivityType === \"Run\" && Strava.newActivityByYou.ElapsedTimeInSeconds >= 1800) || \n    (Strava.newActivityByYou.ActivityType === \"Ride\" && Strava.newActivityByYou.DistanceMeters >= 10000)) {\n  Qapital.saveTowardGoal.setGoal(\"Emergency Fund\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Activity does not meet the conditions.\");\n}", "intent": "When I complete a 30-minute run or a 10km ride on Strava, save $5 toward my Emergency Fund goal on Qapital."}
{"original_description": "What's your money worth? Compare any two currencies — every day the new rate will be logged to a Google spreadsheet. Great for trip planning!", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.currency_exchange_rate_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Input currency\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Input currency", "Slug": "input_currency", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Output currency\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Output currency", "Slug": "output_currency", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Helper text": "Based on your time zone settings", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Input currency\nThe symbol for the input currency.", "description": "The symbol for the input currency.", "details": {"Slug": "InputCurrency", "Filter code": "Finance.currencyExchangeRateStocks.InputCurrency", "Type": "String", "Example": "USD"}}, {"section": "Ingredients", "title": "Output currency\nThe symbol for the output currency.", "description": "The symbol for the output currency.", "details": {"Slug": "OutputCurrency", "Filter code": "Finance.currencyExchangeRateStocks.OutputCurrency", "Type": "String", "Example": "EUR"}}, {"section": "Ingredients", "title": "Exchange rate\nThe exchange rate between currencies.", "description": "The exchange rate between currencies.", "details": {"Slug": "ExchangeRate", "Filter code": "Finance.currencyExchangeRateStocks.ExchangeRate", "Type": "String", "Example": "0.75416"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the exchange rate.", "description": "A link to more information about the exchange rate.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.currencyExchangeRateStocks.InfoUrl", "Type": "String", "Example": "http://finance.yahoo.com/q/bc?s=USDEUR=X"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.currencyExchangeRateStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Docs", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_docs.append_to_google_doc", "Filter code method": "GoogleDocs.appendToGoogleDoc.skip(string?: reason)", "Runtime method": "runAction(\"google_docs.append_to_google_doc\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "Document name", "Helper text": "Will create a new file if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Content", "Helper text": "some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setPath(string: path)"}}], "filter_code": "if (Finance.currencyExchangeRateStocks.CheckTime.hour() === 8 && Finance.currencyExchangeRateStocks.InputCurrency === \"USD\" && Finance.currencyExchangeRateStocks.OutputCurrency === \"EUR\") {\n  var body = \"Current exchange rate: 1 USD = \" + Finance.currencyExchangeRateStocks.ExchangeRate + \" EUR. More info: <a href='\" + Finance.currencyExchangeRateStocks.InfoUrl + \"'>Click here</a>\";\n  GoogleDocs.appendToGoogleDoc.setFilename(\"Currency Tracker\");\n  GoogleDocs.appendToGoogleDoc.setPath(\"Financial Reports\");\n  GoogleDocs.appendToGoogleDoc.setBody(body);\n} else {\n  GoogleDocs.appendToGoogleDoc.skip(\"Conditions not met.\");\n}", "intent": "Log the daily exchange rate between USD and EUR to a Google Docs spreadsheet named \"Currency Tracker\" in the folder \"Financial Reports\", every day at 08:00, including the current exchange rate and a link to more information."}
{"original_description": "Whenever it rains at a place of your choice, this Applet will move some money into one of your Monzo pots", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.Location === \"London\") {\n  Monzo.potDeposit.setPot(\"Emergency Fund\");\n  Monzo.potDeposit.setAmount(\"5\");\n} else {\n  Monzo.potDeposit.skip(\"Not raining in London.\");\n}", "intent": "When the weather condition is \"Rain\" at London, move £5 into my \"Emergency Fund\" Monzo pot."}
{"original_description": "Blink the Phillips Hue lights when your child has money removed.", "trigger_channel": "RoosterMoney", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "roostermoney.boosted"}, "trigger_details": [{"section": "Trigger fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Roostermoney.boosted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Amount\nThe amount they were boosted", "description": "The amount they were boosted", "details": {"Slug": "amount", "Filter code": "Roostermoney.boosted.Amount", "Type": "String", "Example": "£1.23"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Roostermoney.boosted.Child !== \"Emily\" || Roostermoney.boosted.Pot !== \"Save\") {\n  Hue.blinkAllHue.skip(\"Child or pot does not match.\");\n} else if (parseFloat(Roostermoney.boosted.Amount.replace(\"£\", \"\")) < 5) {\n  Hue.blinkAllHue.skip(\"Amount removed is less than £5.\");\n} else {\n  var currentTime = new Date();\n  var triggerTime = new Date(Roostermoney.boosted.CreatedAt);\n  if (triggerTime.getHours() < 15) { // 15 is 3 PM in 24-hour format\n    Hue.blinkAllHue.skip(\"Trigger time is before 3 PM.\");\n  } else {\n    // Assuming the lights are selected based on the action details, but since it's not provided in the trigger or intent, \n    // we will directly call the blink method without any condition for light selection.\n    Hue.blinkAllHue();\n  }\n}", "intent": "Blink all the Philips Hue living room lights when your child, Emily, has £5 or more removed from her Save pot on RoosterMoney after 3 PM."}
{"original_description": "The Center is a nonpartisan, independent, nonprofit research group that tracks money in US politics. Stay in the know on their findings and news with an email in your inbox every Wednesday morning. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setTitle(\"The Center's Weekly Updates\");\nvar message = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nAuthor: \" + Feed.newFeedItem.EntryAuthor + \"\\nContent: \" + Feed.newFeedItem.EntryContent;\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.EntryUrl);", "intent": "Send a weekly email digest to my inbox every Wednesday morning at 08:00 with updates from The Center's RSS feed, including the entry title, author, and content, and use \"The Center's Weekly Updates\" as the email title."}
{"original_description": "Turn off your lights when your vehicle exits a Geo-Circle, so that you can save energy and money when you're not home.", "trigger_channel": "Bouncie", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bouncie.geo_circle_exit"}, "trigger_details": [{"section": "Trigger fields", "title": "Circle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Circle", "Helper text": "The circle that was exited", "Slug": "circle", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Bouncie.geoCircleExit.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time\nThe time the bouncie device recorded the breach.", "description": "The time the bouncie device recorded the breach.", "details": {"Slug": "time", "Filter code": "Bouncie.geoCircleExit.Time", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Vehicle name\nThe vehicle name of the vehicle that exited.", "description": "The vehicle name of the vehicle that exited.", "details": {"Slug": "vehicle_name", "Filter code": "Bouncie.geoCircleExit.VehicleName", "Type": "String", "Example": "Marley's Fiat"}}, {"section": "Ingredients", "title": "Circle name\nThe name of the circle that was exited", "description": "The name of the circle that was exited", "details": {"Slug": "circle_name", "Filter code": "Bouncie.geoCircleExit.CircleName", "Type": "String", "Example": "Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bouncie.geoCircleExit.VehicleName === \"Marley's Fiat\" && Bouncie.geoCircleExit.CircleName === \"Home\") {\n  Hue.turnOffAllHue();\n}", "intent": "Turn off all Philips Hue lights in the house when Marley's Fiat exits the Home Geo-Circle, so that energy can be saved when no one is at home."}
{"original_description": "Choose the cheaper lunch? Skipped the daily Starbucks? Click Flic to save the money for your travel instead! ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ButtonUuid === \"TravelSaver\" && Flic.click.ClickType === \"double_click\" && Flic.click.Latitude === \"59.3325800\" && Flic.click.Longitude === \"18.0649000\") {\n  Qapital.saveTowardGoal.setGoal(\"Dream Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Conditions not met.\");\n}", "intent": "When the Flic button named \"TravelSaver\" is double-clicked at latitude 59.3325800 and longitude 18.0649000, save $5 toward the Qapital goal named \"Dream Vacation\"."}
{"original_description": "This Applet sends you a list of new BEA data weekly so you can catch up on the latest without crowding your inbox.", "trigger_channel": "Bureau of Economic Analysis", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bea.new_data_from_the_bea"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Bea.newDataFromTheBea.EntryTitle", "Type": "String", "Example": "Personal Income and Outlays, April 2017"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Bea.newDataFromTheBea.EntryUrl", "Type": "String", "Example": "https://www.bea.gov/newsreleases/national/pi/2017/pi0417.htm"}}, {"section": "Ingredients", "title": "Preview content\nA preview of the entry's content, contains HTML.", "description": "A preview of the entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "Bea.newDataFromTheBea.PreviewContent", "Type": "String", "Example": "Personal income increased $58.4 billion (0.4 percent) in April according to estimates released today by the Bureau of Economic Analysis. Disposable personal income (DPI) increased $56.5 billion (0.4 percent) and personal consumption expenditures (PCE)..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Bea.newDataFromTheBea.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() !== \"Sunday\" || Meta.currentUserTime.hour() !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Sunday at 08:00\");\n}\n\nvar message = \"Weekly BEA Data Update:<br>\";\n\nBea.newDataFromTheBea.entries.forEach(function(entry) {\n  if (entry.EntryTitle.toLowerCase().includes(\"GDP\") || entry.PreviewContent.toLowerCase().includes(\"GDP\")) {\n    message += \"<b>\" + entry.EntryTitle + \"</b>: \" + entry.EntryUrl + \"<br>\" + entry.PreviewContent + \"<br><br>\";\n  }\n});\n\nif (message === \"Weekly BEA Data Update:<br>\") {\n  EmailDigest.sendWeeklyEmail.skip(\"No new data found\");\n} else {\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendWeeklyEmail.setTitle(\"Weekly BEA Data Update\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n}", "intent": "Send a weekly email digest to my inbox every Sunday at 08:00 with the title \"Weekly BEA Data Update\" and a message containing a list of new data from the Bureau of Economic Analysis, including entry titles, URLs, and preview content, filtered by the keyword \"GDP\"."}
{"original_description": "Keep a tracker of BEA releases. This Applet adds a new row whenever new data is published.", "trigger_channel": "Bureau of Economic Analysis", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bea.new_data_from_the_bea"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Bea.newDataFromTheBea.EntryTitle", "Type": "String", "Example": "Personal Income and Outlays, April 2017"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Bea.newDataFromTheBea.EntryUrl", "Type": "String", "Example": "https://www.bea.gov/newsreleases/national/pi/2017/pi0417.htm"}}, {"section": "Ingredients", "title": "Preview content\nA preview of the entry's content, contains HTML.", "description": "A preview of the entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "Bea.newDataFromTheBea.PreviewContent", "Type": "String", "Example": "Personal income increased $58.4 billion (0.4 percent) in April according to estimates released today by the Bureau of Economic Analysis. Disposable personal income (DPI) increased $56.5 billion (0.4 percent) and personal consumption expenditures (PCE)..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Bea.newDataFromTheBea.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"BEA Releases\");\nvar formattedRow = Bea.newDataFromTheBea.EntryTitle + \"|||\" + Bea.newDataFromTheBea.EntryUrl + \"|||\" + Bea.newDataFromTheBea.PreviewContent + \"|||\" + Bea.newDataFromTheBea.EntryPublished;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT\");", "intent": "When the Bureau of Economic Analysis releases new data, such as an update on Personal Income and Outlays, append a new row to a Google Sheets spreadsheet named \"BEA Releases\" with the entry title, entry URL, preview content, and entry published date, using the format \"Entry Title|||Entry URL|||Preview Content|||Entry Published\" in the IFTTT folder."}
{"original_description": "This Applet keeps your team in the loop by posting new data from the BEA to a Slack channel of your choosing.", "trigger_channel": "Bureau of Economic Analysis", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bea.new_data_from_the_bea"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Bea.newDataFromTheBea.EntryTitle", "Type": "String", "Example": "Personal Income and Outlays, April 2017"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Bea.newDataFromTheBea.EntryUrl", "Type": "String", "Example": "https://www.bea.gov/newsreleases/national/pi/2017/pi0417.htm"}}, {"section": "Ingredients", "title": "Preview content\nA preview of the entry's content, contains HTML.", "description": "A preview of the entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "Bea.newDataFromTheBea.PreviewContent", "Type": "String", "Example": "Personal income increased $58.4 billion (0.4 percent) in April according to estimates released today by the Bureau of Economic Analysis. Disposable personal income (DPI) increased $56.5 billion (0.4 percent) and personal consumption expenditures (PCE)..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Bea.newDataFromTheBea.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Bea.newDataFromTheBea.EntryTitle.includes(\"Personal Income\")) {\n  Slack.postToChannel.setChannel(\"#economy-updates\");\n  Slack.postToChannel.setTitle(\"New Economic Data\");\n  Slack.postToChannel.setMessage(Bea.newDataFromTheBea.PreviewContent);\n} else {\n  Slack.postToChannel.skip(\"Entry does not contain 'Personal Income'.\");\n}", "intent": "Post a message to the #economy-updates Slack channel with the title \"New Economic Data\" and the message \"Personal income increased $58.4 billion (0.4 percent) in April according to estimates released today by the Bureau of Economic Analysis.\" whenever new data from the BEA is published, filtering by the keyword \"Personal Income\"."}
{"original_description": "When your EZVIZ camera has triggered an alarm event, a Logicblock evaluation is launched in Apilio. Very useful to launch Logicblocks that must be executed when your camera detects something", "trigger_channel": "EZVIZ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ezviz.alarm_log"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select your device", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which alarm type?", "Helper text": "Select an alarm type", "Slug": "type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Alarm name\nThe camera name and serial number of which the alarm was triggered.", "description": "The camera name and serial number of which the alarm was triggered.", "details": {"Slug": "object_name", "Filter code": "Ezviz.alarmLog.AlarmName", "Type": "String", "Example": "Motion Detection Alarm"}}, {"section": "Ingredients", "title": "Trigger time\nThe date and time when the alarm was triggered.", "description": "The date and time when the alarm was triggered.", "details": {"Slug": "query_time", "Filter code": "Ezviz.alarmLog.TriggerTime", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.logicblock_evaluation_requests", "Filter code method": "Apilio.logicblockEvaluationRequests.skip(string?: reason)", "Runtime method": "runAction(\"apilio.logicblock_evaluation_requests\", {})"}, "action_details": [{"section": "Action fields", "title": "Logicblock identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio logicblock do you want to evaluate?", "Slug": "logicblock_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Ezviz.alarmLog.AlarmName === \"Front Door Camera - 1234567890\" && Ezviz.alarmLog.Type === \"Motion Detection Alarm\") {\n  var hour = new Date(Ezviz.alarmLog.TriggerTime).getHours();\n  if (hour >= 7 && hour <= 19) {\n    Apilio.logicblockEvaluationRequests.setLogicblockIdentifier(\"Home Security Alert\");\n  } else {\n    Apilio.logicblockEvaluationRequests.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  }\n}", "intent": "When the EZVIZ camera named \"Front Door Camera\" with serial number \"1234567890\" triggers a \"Motion Detection Alarm\" event between 07:00 and 19:00, launch the Apilio Logicblock evaluation for the logicblock identified as \"Home Security Alert\" to send notifications to the \"#home-security-alerts\" channel."}
{"original_description": "This applet lets Apilio know that your EZVIZ camera has triggered an alarm event, and saves this information to a variable.", "trigger_channel": "EZVIZ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ezviz.alarm_log"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select your device", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which alarm type?", "Helper text": "Select an alarm type", "Slug": "type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Alarm name\nThe camera name and serial number of which the alarm was triggered.", "description": "The camera name and serial number of which the alarm was triggered.", "details": {"Slug": "object_name", "Filter code": "Ezviz.alarmLog.AlarmName", "Type": "String", "Example": "Motion Detection Alarm"}}, {"section": "Ingredients", "title": "Trigger time\nThe date and time when the alarm was triggered.", "description": "The date and time when the alarm was triggered.", "details": {"Slug": "query_time", "Filter code": "Ezviz.alarmLog.TriggerTime", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Ezviz.alarmLog.AlarmName === \"Front Door Camera\" && Ezviz.alarmLog.Type === \"Motion Detection Alarm\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Security_Breach\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Alarm does not match the specified camera or type.\");\n}", "intent": "When the EZVIZ camera named \"Front Door Camera\" with serial number \"EZVIZ123456\" triggers a \"Motion Detection Alarm\" type of alarm, save this information to the Apilio variable identified as \"Security_Breach\", updating it from false to true if it's currently false or vice versa."}
{"original_description": "/r/worldnews is for major news from around the world except US-internal news and US politics. Great for staying on top of breaking news!", "trigger_channel": "Reddit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "reddit.new_post_in_subreddit"}, "trigger_details": [{"section": "Trigger fields", "title": "Subreddit\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subreddit", "Helper text": "e.g. worldnews", "Slug": "subreddit", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nTitle of this post.", "description": "Title of this post.", "details": {"Slug": "Title", "Filter code": "Reddit.newPostInSubreddit.Title", "Type": "String", "Example": "Little Bobby Tables!"}}, {"section": "Ingredients", "title": "Image url\nURL to the post's image if one exists.", "description": "URL to the post's image if one exists.", "details": {"Slug": "ImageURL", "Filter code": "Reddit.newPostInSubreddit.ImageURL", "Type": "String", "Example": "http://imgs.xkcd.com/comics/exploits_of_a_mom.png"}}, {"section": "Ingredients", "title": "Content\nContent of this post, may be text or external link.", "description": "Content of this post, may be text or external link.", "details": {"Slug": "Content", "Filter code": "Reddit.newPostInSubreddit.Content", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Content html\nContent of this post in HTML.", "description": "Content of this post in HTML.", "details": {"Slug": "ContentHTML", "Filter code": "Reddit.newPostInSubreddit.ContentHTML", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Post url\nURL to this post on reddit.", "description": "URL to this post on reddit.", "details": {"Slug": "PostURL", "Filter code": "Reddit.newPostInSubreddit.PostURL", "Type": "String", "Example": "http://www.reddit.com/r/ProgrammerHumor/comments/16dazp/little_bobby_tables_xkcd/"}}, {"section": "Ingredients", "title": "Subreddit\nName of the subreddit where this item was posted.", "description": "Name of the subreddit where this item was posted.", "details": {"Slug": "Subreddit", "Filter code": "Reddit.newPostInSubreddit.Subreddit", "Type": "String", "Example": "ifttt"}}, {"section": "Ingredients", "title": "Author\nUsername of this post's author.", "description": "Username of this post's author.", "details": {"Slug": "Author", "Filter code": "Reddit.newPostInSubreddit.Author", "Type": "String", "Example": "ltibbets"}}, {"section": "Ingredients", "title": "Posted at\nDate this post was posted.", "description": "Date this post was posted.", "details": {"Slug": "PostedAt", "Filter code": "Reddit.newPostInSubreddit.PostedAt", "Type": "String", "Example": "August 23, 2013 at 05:00PM"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Reddit.newPostInSubreddit.Subreddit === \"worldnews\") {\n  Instapaper.saveItem.setUrl(Reddit.newPostInSubreddit.PostURL);\n  Instapaper.saveItem.setTitle(Reddit.newPostInSubreddit.Title);\n  Instapaper.saveItem.setDescription(Reddit.newPostInSubreddit.Content);\n}", "intent": "When a new post is made in the r/worldnews subreddit on Reddit, save the post's content to Instapaper with the title set to the post's title and the URL set to the post's URL."}
{"original_description": "Clean around the litter box right meow! Following your Litter Robot's cleaning cycle, your robot will start cleaning. ", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Cleaning Cycle Started\") {\n  Irobot.startRobot.setRobotName(\"Roomba\");\n} else {\n  Irobot.startRobot.skip(\"Litter-Robot not starting cleaning cycle or incorrect robot.\");\n}", "intent": "When my Litter-Robot, named My Litter Robot, starts its cleaning cycle, immediately start my iRobot vacuum, Roomba, to clean around the litter box area."}
{"original_description": " Use TTS Speaker to ask Alexa the current weather condition. You need an Amazon Echo device around the TTS Speaker to make this applet work.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-sleep-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Time to leave bed seconds\nThe time spent in bed after awaking, in seconds", "description": "The time spent in bed after awaking, in seconds", "details": {"Slug": "TimeToLeaveBedSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBedSeconds", "Type": "String", "Example": "600"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.newSleepLogged.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Restless count\nNumber of moments you were restless while sleeping", "description": "Number of moments you were restless while sleeping", "details": {"Slug": "RestlessCount", "Filter code": "Fitbit.newSleepLogged.RestlessCount", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept, in seconds", "description": "The total time you slept, in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.newSleepLogged.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Time to fall asleep\nNumber of minutes before falling asleep", "description": "Number of minutes before falling asleep", "details": {"Slug": "TimeToFallAsleep", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleep", "Type": "String", "Example": "7m"}}, {"section": "Ingredients", "title": "Time awake\nThe time spent awake", "description": "The time spent awake", "details": {"Slug": "TimeAwake", "Filter code": "Fitbit.newSleepLogged.TimeAwake", "Type": "String", "Example": "30m"}}, {"section": "Ingredients", "title": "Time awake seconds\nThe time spent awake, in seconds", "description": "The time spent awake, in seconds", "details": {"Slug": "TimeAwakeSeconds", "Filter code": "Fitbit.newSleepLogged.TimeAwakeSeconds", "Type": "String", "Example": "1800"}}, {"section": "Ingredients", "title": "Awake count\nNumber of moments you were awake while trying to sleep", "description": "Number of moments you were awake while trying to sleep", "details": {"Slug": "AwakeCount", "Filter code": "Fitbit.newSleepLogged.AwakeCount", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Fell asleep at\nThe date and time you fell asleep, localized to your Fitbit timezone setting", "description": "The date and time you fell asleep, localized to your Fitbit timezone setting", "details": {"Slug": "FellAsleepAt", "Filter code": "Fitbit.newSleepLogged.FellAsleepAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time to fall asleep seconds\nNumber of seconds before falling asleep", "description": "Number of seconds before falling asleep", "details": {"Slug": "TimeToFallAsleepSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleepSeconds", "Type": "String", "Example": "420"}}, {"section": "Ingredients", "title": "Time to leave bed\nThe time spent in bed after awaking", "description": "The time spent in bed after awaking", "details": {"Slug": "TimeToLeaveBed", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBed", "Type": "String", "Example": "10m"}}, {"section": "Ingredients", "title": "Awoke at\nThe date and time you woke up, localized to your Fitbit timezone setting", "description": "The date and time you woke up, localized to your Fitbit timezone setting", "details": {"Slug": "AwokeAt", "Filter code": "Fitbit.newSleepLogged.AwokeAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Tochie Speaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tochie_speaker.tts_speaker", "Filter code method": "TochieSpeaker.ttsSpeaker.skip(string?: reason)", "Runtime method": "runAction(\"tochie_speaker.tts_speaker\", {})"}, "action_details": [{"section": "Action fields", "title": "Text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Text", "Helper text": "The text to read out", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "TochieSpeaker.ttsSpeaker.setText(string: text)"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speaker", "Helper text": "Your Tochie speaker name", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Chime\nDropdown list", "description": "Dropdown list", "details": {"Label": "Play chime", "Slug": "chime", "Required": "true", "Can have default value": "true", "Filter code method": "TochieSpeaker.ttsSpeaker.setChime(string: chime)"}}], "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSleptInSeconds > 25200 && Fitbit.newSleepLogged.AwakeCount < 3) {\n  TochieSpeaker.ttsSpeaker.setText(\"Alexa, what's the current weather condition?\");\n  TochieSpeaker.ttsSpeaker.setChime(\"play\");\n  TochieSpeaker.ttsSpeaker.setDeviceId(\"Living Room Speaker\");\n} else {\n  TochieSpeaker.ttsSpeaker.skip(\"Sleep conditions not met.\");\n}", "intent": "When a new sleep log is recorded on Fitbit with a total time slept of more than 7 hours and an awake count of less than 3, use the Tochie Speaker to ask Alexa about the current weather condition using the device named \"Living Room Speaker\" and play a chime before speaking."}
{"original_description": "Never miss an official travel alert from the U.S Department of State. Keep your traveling salespeople informed!", "trigger_channel": "Department of State", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dos.travel_alerts"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Dos.travelAlerts.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Dos.travelAlerts.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, contains HTML.", "description": "The entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "Dos.travelAlerts.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Dos.travelAlerts.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setChannel(\"#travel-alerts\");\nSlack.postToChannel.setTitle(\"U.S Department of State Travel Alert\");\nSlack.postToChannel.setMessage(\"New travel alert issued: \" + Dos.travelAlerts.EntryTitle + \". Read more at \" + Dos.travelAlerts.EntryUrl + \". Alert details: \" + Dos.travelAlerts.ContentHtml);", "intent": "Post a message to the #travel-alerts channel on Slack with the title \"U.S Department of State Travel Alert\" and the message \"New travel alert issued: {{EntryTitle}}. Read more at {{EntryUrl}}\" whenever the U.S Department of State publishes a new travel alert, including the alert's content in the message."}
{"original_description": "Like our own official Todoist integration, but can include recurring tasks! If you don't care about those, you should probably use our official integration instead, by selecting Todoist on the goal creation page.", "trigger_channel": "Todoist", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "todoist.new_completed_task"}, "trigger_details": [{"section": "Trigger fields", "title": "Project\nDropdown list", "description": "Dropdown list", "details": {"Label": "Project to watch", "Helper text": "Configure this trigger to fire only when the completed task is in the specified project.", "Slug": "project_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Task content\nContent of the task.", "description": "Content of the task.", "details": {"Slug": "task_content", "Filter code": "Todoist.newCompletedTask.TaskContent", "Type": "String", "Example": "Pay telephone bill"}}, {"section": "Ingredients", "title": "Task description\nDescription of the task.", "description": "Description of the task.", "details": {"Slug": "task_description", "Filter code": "Todoist.newCompletedTask.TaskDescription", "Type": "String", "Example": "Go to gym website and click renew in account settings"}}, {"section": "Ingredients", "title": "Link to task\nThe URL of the task.", "description": "The URL of the task.", "details": {"Slug": "link_to_task", "Filter code": "Todoist.newCompletedTask.LinkToTask", "Type": "Web URL", "Example": "https://todoist.com/showTask?id=999"}}, {"section": "Ingredients", "title": "Project\nProject to which the task belongs.", "description": "Project to which the task belongs.", "details": {"Slug": "project", "Filter code": "Todoist.newCompletedTask.Project", "Type": "String", "Example": "Household Tasks"}}, {"section": "Ingredients", "title": "Labels\nLabels assigned to the task.", "description": "Labels assigned to the task.", "details": {"Slug": "labels", "Filter code": "Todoist.newCompletedTask.Labels", "Type": "String", "Example": "to_follow_up"}}, {"section": "Ingredients", "title": "Priority\nPriority of the task.", "description": "Priority of the task.", "details": {"Slug": "priority", "Filter code": "Todoist.newCompletedTask.Priority", "Type": "String", "Example": "Priority 1"}}, {"section": "Ingredients", "title": "Completed at\nDate and time the task was completed.", "description": "Date and time the task was completed.", "details": {"Slug": "completed_at", "Filter code": "Todoist.newCompletedTask.CompletedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Due date\nDue date of the task.", "description": "Due date of the task.", "details": {"Slug": "due_date", "Filter code": "Todoist.newCompletedTask.DueDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Section\nSection to which the task belongs (if any).", "description": "Section to which the task belongs (if any).", "details": {"Slug": "section", "Filter code": "Todoist.newCompletedTask.Section", "Type": "String", "Example": "Cleaning tasks"}}], "action_channel": "Beeminder", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beeminder.add_data", "Filter code method": "Beeminder.addData.skip(string?: reason)", "Runtime method": "runAction(\"beeminder.add_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Goal to send data to", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Datapoint value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Datapoint value", "Helper text": "The actual number to send to your Beeminder goal", "Slug": "datapoint_value", "Required": "true", "Can have default value": "true", "Filter code method": "Beeminder.addData.setDatapoint Value(string: datapoint_value)"}}, {"section": "Action fields", "title": "Datapoint comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Datapoint comment", "Slug": "datapoint_comment", "Required": "false", "Can have default value": "true", "Filter code method": "Beeminder.addData.setDatapoint Comment(string: datapoint_comment)"}}], "filter_code": "if (Todoist.newCompletedTask.Project === \"Household Tasks\" && Todoist.newCompletedTask.Priority === \"Priority 1\" && Todoist.newCompletedTask.Labels.includes(\"to_follow_up\")) {\n  Beeminder.addData.setDatapointValue(\"1\");\n  Beeminder.addData.setDatapointComment(\"Task completed: \" + Todoist.newCompletedTask.TaskContent);\n} else {\n  Beeminder.addData.skip(\"Conditions not met.\");\n}", "intent": "When a new task is completed in the \"Household Tasks\" project on Todoist with priority \"Priority 1\" and label \"to_follow_up\", send a datapoint value of \"1\" to the \"Productivity\" goal on Beeminder with a comment \"Task completed: Pay telephone bill\"."}
{"original_description": "When the IFTTT Blog (ifttt.com/blog) publishes a new post, this Applet will send it to your inbox. Tips, data stories, new services, and more — be the first to know! 👍", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var subject = \"New Post from IFTTT Blog: \" + Feed.newFeedItem.EntryTitle;\n  var body = Feed.newFeedItem.EntryContent + \"<br><br>Read the full post at <a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryUrl + \"</a>\";\n  Email.sendMeEmail.setSubject(subject);\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"The new post is not from the IFTTT Blog.\");\n}", "intent": "When a new post is published on the IFTTT Blog at http://blog.ifttt.com/, with an entry title like \"Launch Day!\" and an entry author such as \"Linden Tibbets\", send an email to my inbox with the subject \"New Post from IFTTT Blog: {EntryTitle}\" and the body containing the entry content, including any HTML, along with a link to the full post at {EntryUrl}."}
{"original_description": "One of the biggest wedding blogs in the world — get an email every Friday with their posts. Everything from real-life wedding photoshoots to planning tips to DIY projects to giveaways!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"Wedding Blog Updates\");\nvar message = \"Latest updates from \" + Feed.newFeedItem.FeedTitle + \":\\n\";\nmessage += \"- \" + Feed.newFeedItem.EntryTitle + \" by \" + Feed.newFeedItem.EntryAuthor + \" on \" + Feed.newFeedItem.EntryPublished + \"\\n\";\nmessage += \"  Read more: \" + Feed.newFeedItem.EntryUrl + \"\\n\";\nmessage += \"  Image: \" + Feed.newFeedItem.EntryImageUrl + \"\\n\";\nEmailDigest.sendWeeklyEmail.setMessage(message);", "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"Wedding Blog Updates\" and a message containing the latest entry titles, URLs, and images from the wedding blog RSS feed, including the feed title, entry authors, and publication dates, to subscribers who want to stay up-to-date on real-life wedding photoshoots, planning tips, DIY projects, and giveaways."}
{"original_description": "When the IFTTT Blog (ifttt.com/blog) publishes a new post, this Applet will send it to the Telegram chat of your choice. Tips, data stories, new services, and more — spread the news! 👐", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var text = \"New post: <b>\" + Feed.newFeedItem.EntryTitle + \"</b> - \" + Feed.newFeedItem.EntryContent.substring(0, 100) + \"... Read more at: \" + Feed.newFeedItem.EntryUrl;\nTelegram.sendMessage.setText(text);\nTelegram.sendMessage.setChatId(\"@MyNewsChannel\");\nTelegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");", "intent": "When a new post is published on the IFTTT Blog feed (http://blog.ifttt.com/), send a message to the Telegram chat @MyNewsChannel with the post's title, URL, and a brief summary, including a web page preview."}
{"original_description": "When the IFTTT Blog (ifttt.com/blog) publishes a new post, this Applet will share the link to a Facebook page. Keep your community in the know on all things IoT, IFTTT tips, social media, and more. 🙌", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Facebook Pages", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "facebook_pages.create_link_page", "Filter code method": "FacebookPages.createLinkPage.skip(string?: reason)", "Runtime method": "runAction(\"facebook_pages.create_link_page\", {})"}, "action_details": [{"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Slug": "link_url", "Required": "true", "Can have default value": "true", "Filter code method": "FacebookPages.createLinkPage.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createLinkPage.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var message = \"Check out our latest update: \" + Feed.newFeedItem.EntryTitle;\n  FacebookPages.createLinkPage.setLinkUrl(Feed.newFeedItem.EntryUrl);\n  FacebookPages.createLinkPage.setMessage(message);\n} else {\n  FacebookPages.createLinkPage.skip(\"Not an IFTTT Blog post.\");\n}", "intent": "When a new post is published on the IFTTT Blog feed at http://blog.ifttt.com/, with an entry title like \"Launch Day!\" and containing content such as \"Well here we are on, blah, blah...\", share the link to the post on the Facebook page with a message saying \"Check out our latest update: \"."}
{"original_description": "Explore exotic destinations, new restaurants, hotel deals, travel tips, and more when you save the lastest from Travel + Leisure to Pocket. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Pocket", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pocket.read_it_later", "Filter code method": "Pocket.readItLater.skip(string?: reason)", "Runtime method": "runAction(\"pocket.read_it_later\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setUrl(string: url)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setTags(string: tags)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"Travel + Leisure\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"travel, leisure\");\n}", "intent": "When a new article is published in the Travel + Leisure RSS feed, save it to Pocket with the tags \"travel\" and \"leisure\" for later reading."}
{"original_description": "Automatically track your Fitbit sleep information into a Google Calendar.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-sleep-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Time to leave bed seconds\nThe time spent in bed after awaking, in seconds", "description": "The time spent in bed after awaking, in seconds", "details": {"Slug": "TimeToLeaveBedSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBedSeconds", "Type": "String", "Example": "600"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.newSleepLogged.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Restless count\nNumber of moments you were restless while sleeping", "description": "Number of moments you were restless while sleeping", "details": {"Slug": "RestlessCount", "Filter code": "Fitbit.newSleepLogged.RestlessCount", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept, in seconds", "description": "The total time you slept, in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.newSleepLogged.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Time to fall asleep\nNumber of minutes before falling asleep", "description": "Number of minutes before falling asleep", "details": {"Slug": "TimeToFallAsleep", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleep", "Type": "String", "Example": "7m"}}, {"section": "Ingredients", "title": "Time awake\nThe time spent awake", "description": "The time spent awake", "details": {"Slug": "TimeAwake", "Filter code": "Fitbit.newSleepLogged.TimeAwake", "Type": "String", "Example": "30m"}}, {"section": "Ingredients", "title": "Time awake seconds\nThe time spent awake, in seconds", "description": "The time spent awake, in seconds", "details": {"Slug": "TimeAwakeSeconds", "Filter code": "Fitbit.newSleepLogged.TimeAwakeSeconds", "Type": "String", "Example": "1800"}}, {"section": "Ingredients", "title": "Awake count\nNumber of moments you were awake while trying to sleep", "description": "Number of moments you were awake while trying to sleep", "details": {"Slug": "AwakeCount", "Filter code": "Fitbit.newSleepLogged.AwakeCount", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Fell asleep at\nThe date and time you fell asleep, localized to your Fitbit timezone setting", "description": "The date and time you fell asleep, localized to your Fitbit timezone setting", "details": {"Slug": "FellAsleepAt", "Filter code": "Fitbit.newSleepLogged.FellAsleepAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time to fall asleep seconds\nNumber of seconds before falling asleep", "description": "Number of seconds before falling asleep", "details": {"Slug": "TimeToFallAsleepSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleepSeconds", "Type": "String", "Example": "420"}}, {"section": "Ingredients", "title": "Time to leave bed\nThe time spent in bed after awaking", "description": "The time spent in bed after awaking", "details": {"Slug": "TimeToLeaveBed", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBed", "Type": "String", "Example": "10m"}}, {"section": "Ingredients", "title": "Awoke at\nThe date and time you woke up, localized to your Fitbit timezone setting", "description": "The date and time you woke up, localized to your Fitbit timezone setting", "details": {"Slug": "AwokeAt", "Filter code": "Fitbit.newSleepLogged.AwokeAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSleptInSeconds > 25200 && Fitbit.newSleepLogged.TimeToFallAsleepSeconds < 900) {\n  var fellAsleepAt = new Date(Fitbit.newSleepLogged.FellAsleepAt);\n  var awokeAt = new Date(Fitbit.newSleepLogged.AwokeAt);\n  var hours = Math.floor(Fitbit.newSleepLogged.TotalTimeSleptInSeconds / 3600);\n  var minutes = Math.floor((Fitbit.newSleepLogged.TotalTimeSleptInSeconds % 3600) / 60);\n\n  var eventText = `Sleep - ${hours} hours ${minutes} minutes, fell asleep at ${fellAsleepAt.toLocaleTimeString()}, woke up at ${awokeAt.toLocaleTimeString()}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(eventText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Sleep duration or fall asleep time does not meet the criteria.\");\n}", "intent": "When a new sleep session is logged on Fitbit with more than 7 hours of total time slept and the time to fall asleep is less than 15 minutes, quickly add an event to my primary Google Calendar with the text \"Sleep - 7 hours 30 minutes, fell asleep at 10:45 PM, woke up at 6:15 AM\" to track my sleep pattern."}
{"original_description": "How'd you sleep? This Applet will sync your Fitbit readings to Health so you can easily track your Zzzs. ", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-sleep-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Time to leave bed seconds\nThe time spent in bed after awaking, in seconds", "description": "The time spent in bed after awaking, in seconds", "details": {"Slug": "TimeToLeaveBedSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBedSeconds", "Type": "String", "Example": "600"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.newSleepLogged.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Restless count\nNumber of moments you were restless while sleeping", "description": "Number of moments you were restless while sleeping", "details": {"Slug": "RestlessCount", "Filter code": "Fitbit.newSleepLogged.RestlessCount", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept, in seconds", "description": "The total time you slept, in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.newSleepLogged.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Time to fall asleep\nNumber of minutes before falling asleep", "description": "Number of minutes before falling asleep", "details": {"Slug": "TimeToFallAsleep", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleep", "Type": "String", "Example": "7m"}}, {"section": "Ingredients", "title": "Time awake\nThe time spent awake", "description": "The time spent awake", "details": {"Slug": "TimeAwake", "Filter code": "Fitbit.newSleepLogged.TimeAwake", "Type": "String", "Example": "30m"}}, {"section": "Ingredients", "title": "Time awake seconds\nThe time spent awake, in seconds", "description": "The time spent awake, in seconds", "details": {"Slug": "TimeAwakeSeconds", "Filter code": "Fitbit.newSleepLogged.TimeAwakeSeconds", "Type": "String", "Example": "1800"}}, {"section": "Ingredients", "title": "Awake count\nNumber of moments you were awake while trying to sleep", "description": "Number of moments you were awake while trying to sleep", "details": {"Slug": "AwakeCount", "Filter code": "Fitbit.newSleepLogged.AwakeCount", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Fell asleep at\nThe date and time you fell asleep, localized to your Fitbit timezone setting", "description": "The date and time you fell asleep, localized to your Fitbit timezone setting", "details": {"Slug": "FellAsleepAt", "Filter code": "Fitbit.newSleepLogged.FellAsleepAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time to fall asleep seconds\nNumber of seconds before falling asleep", "description": "Number of seconds before falling asleep", "details": {"Slug": "TimeToFallAsleepSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleepSeconds", "Type": "String", "Example": "420"}}, {"section": "Ingredients", "title": "Time to leave bed\nThe time spent in bed after awaking", "description": "The time spent in bed after awaking", "details": {"Slug": "TimeToLeaveBed", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBed", "Type": "String", "Example": "10m"}}, {"section": "Ingredients", "title": "Awoke at\nThe date and time you woke up, localized to your Fitbit timezone setting", "description": "The date and time you woke up, localized to your Fitbit timezone setting", "details": {"Slug": "AwokeAt", "Filter code": "Fitbit.newSleepLogged.AwokeAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iOS Health", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_health.log_sleep", "Filter code method": "IosHealth.logSleep.skip(string?: reason)", "Runtime method": "runAction(\"ios_health.log_sleep\", {})"}, "action_details": [{"section": "Action fields", "title": "Sleep duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration of sleep", "Helper text": "e.g. \"1 hour\" or \"90 minutes\"", "Slug": "sleep_duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logSleep.setSleep Duration(string: sleep_duration)"}}, {"section": "Action fields", "title": "Asleep at\nText input > Other", "description": "Text input > Other", "details": {"Label": "Date and time sleep started", "Helper text": "e.g. \"Today at 9pm\" or \"In two hours\" or \"06/21/2017\"", "Slug": "asleep_at", "Required": "true", "Can have default value": "true", "Filter code method": "IosHealth.logSleep.setAsleep At(string: asleep_at)"}}, {"section": "Action fields", "title": "Date sleep ended\nText input > Other", "description": "Text input > Other", "details": {"Label": "Date and time sleep ended", "Helper text": "Optional e.g. \"Tomorrow at 9am\" or \"In eight hours\" or \"06/22/2017\"", "Slug": "date_sleep_ended", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logSleep.setDate Sleep Ended(string: date_sleep_ended)"}}], "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSleptInSeconds > 27000 && \n    Fitbit.newSleepLogged.RestlessCount < 5 && \n    Fitbit.newSleepLogged.TimeToFallAsleepSeconds < 900 && \n    new Date(Fitbit.newSleepLogged.FellAsleepAt).getHours() < 12) {\n  IosHealth.logSleep.setSleepDuration(Fitbit.newSleepLogged.TotalTimeSlept);\n  IosHealth.logSleep.setAsleepAt(Fitbit.newSleepLogged.FellAsleepAt);\n  var currentDate = new Date();\n  IosHealth.logSleep.setDateSleepEnded(currentDate.toISOString().split('T')[0]);\n} else {\n  IosHealth.logSleep.skip(\"Sleep conditions not met.\");\n}", "intent": "When I sleep for more than 7 hours and 30 minutes, with a restless count of less than 5, and my time to fall asleep is under 15 minutes, log my sleep in the iOS Health app with the duration as the total time slept, the asleep at time as the time I fell asleep at, which is before 12:00 AM, and the date sleep ended as the current date."}
{"original_description": "This Applet uses the Camera widget to quickly take photos and automatically\npost them to the Slack channel you chose.", "trigger_channel": "Camera widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_camera.do_camera_new_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "DoCamera.doCameraNewPhoto.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "DoCamera.doCameraNewPhoto.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Share url\nThe link to the Share page for the photo.", "description": "The link to the Share page for the photo.", "details": {"Slug": "ShareURL", "Filter code": "DoCamera.doCameraNewPhoto.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude", "description": "", "details": {"Slug": "Latitude", "Filter code": "DoCamera.doCameraNewPhoto.Latitude", "Type": "String", "Example": "37.78346333333333"}}, {"section": "Ingredients", "title": "Longitude", "description": "", "details": {"Slug": "Longitude", "Filter code": "DoCamera.doCameraNewPhoto.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the tap.", "description": "The link to the map of the location of the tap.", "details": {"Slug": "LocationMapURL", "Filter code": "DoCamera.doCameraNewPhoto.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the tap.", "description": "The image of the map of the location of the tap.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoCamera.doCameraNewPhoto.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time the photo was taken.", "description": "The date and time the photo was taken.", "details": {"Slug": "OccurredAt", "Filter code": "DoCamera.doCameraNewPhoto.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Caption\nThe text you write on top of a photo.", "description": "The text you write on top of a photo.", "details": {"Slug": "Caption", "Filter code": "DoCamera.doCameraNewPhoto.Caption", "Type": "String", "Example": "A cool photo"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setMessage(\"New Photo\");\nSlack.postToChannel.setTitle(\"Photo taken at \" + DoCamera.doCameraNewPhoto.OccurredAt);\nSlack.postToChannel.setTitleUrl(DoCamera.doCameraNewPhoto.ShareURL);\nSlack.postToChannel.setImageUrl(DoCamera.doCameraNewPhoto.PublicPhotoURL);\nSlack.postToChannel.setChannel(\"#general\");", "intent": "When a new photo is taken using the Camera widget, post the image with the caption \"New Photo\" to the Slack channel #general, including a link to the photo and its location on the map."}
{"original_description": "Simply add a file to the Slack folder this Applet creates in your Dropbox and it will send the file to a Slack channel of your choosing.", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_text_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newTextFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/cool_story.txt"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newTextFileInFolder.Filename", "Type": "String", "Example": "cool_story.txt"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newTextFileInFolder.FilenameNoExt", "Type": "String", "Example": "cool_story"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newTextFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Dropbox.newTextFileInFolder.Filename === \"report.txt\" && Dropbox.newTextFileInFolder.path === \"/Incoming\") {\n  Slack.postToChannel.setMessage(\"New report available\");\n  Slack.postToChannel.setTitle(\"Daily Report\");\n  Slack.postToChannel.setTitleUrl(\"https://www.example.com/reports\");\n  Slack.postToChannel.setImageUrl(\"https://www.example.com/report-image.png\");\n  Slack.postToChannel.setChannel(\"#general\");\n} else {\n  Slack.postToChannel.skip(\"File does not match the report.txt criteria.\");\n}", "intent": "When a new text file named \"report.txt\" is added to the \"/Incoming\" subfolder in Dropbox, send the file to the \"#general\" channel on Slack with the message \"New report available\" and include a title \"Daily Report\" that links to https://www.example.com/reports, along with a thumbnail image from https://www.example.com/report-image.png."}
{"original_description": "Simulating natural sunset and offering relaxing dimming to help you sleep. The light will be completely turned off after 10 minutes. Please select sunset in the dropdown list.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_color", "Filter code method": "Yeelight.setColor.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which color?", "Slug": "color_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() === 21 && DateAndTime.everyDayAt.CheckTime.minute() === 0) {\n  Yeelight.setColor.setDeviceId(\"Bedroom Lamp\");\n  Yeelight.setColor.setColorId(\"Sunset\");\n  setTimeout(function() {\n    var dimInterval = setInterval(function() {\n      var currentBrightness = Yeelight.getColor.brightness();\n      if (currentBrightness > 0) {\n        Yeelight.setColor.setBrightness(currentBrightness - 10);\n      } else {\n        Yeelight.turnOff.skip(\"Dimming completed, turning off the light.\");\n        clearInterval(dimInterval);\n      }\n    }, 60000); // dim every minute\n  }, 0); // start dimming immediately after setting the color\n}", "intent": "Turn on the Yeelight device named \"Bedroom Lamp\" and set it to a warm sunset color at 9:00 PM every day, then gradually dim it over 10 minutes to help me sleep."}
{"original_description": "When you don't hit your target hours of sleep in an evening with Fitbit, your Google Calendar will remind you to head to bed at a reasonable time. You can adjust your target sleep duration and bedtime reminder below.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.sleep-duration-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Target hours\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Target hours", "Helper text": "e.g. 7.5", "Slug": "target_hours", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept in seconds", "description": "The total time you slept in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Date awoken\nDate when you awoke", "description": "Date when you awoke", "details": {"Slug": "DateAwoken", "Filter code": "Fitbit.sleepDurationBelow.DateAwoken", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "var totalHoursSlept = Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds / 3600;\nvar currentHour = Meta.currentUserTime.hour();\nif (totalHoursSlept < 7.5 && currentHour >= 20 && currentHour <= 22) {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Go to bed now\");\n  GoogleCalendar.quickAddEvent.skip(\"Reminder sent.\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not reminding to go to bed now.\");\n}", "intent": "When the total time slept is less than 7.5 hours, as tracked by Fitbit, and it's between 20:00 and 22:00, create a new event in Google Calendar on the primary calendar with the quick add text \"Go to bed now\" to remind you to head to bed at a reasonable time."}
{"original_description": "This Action will post a message to the channel you choose in Slack.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Mesh.events.event_id === \"12345\") {\n    Slack.postToChannel.setMessage(\"Motion detected in the office!\");\n    Slack.postToChannel.setTitle(\"Security Alert\");\n    Slack.postToChannel.setImageUrl(\"https://example.com/alert_image.jpg\");\n    Slack.postToChannel.setChannel(\"#general\");\n  } else {\n    Slack.postToChannel.skip(\"EventID does not match.\");\n  }\n} else {\n  Slack.postToChannel.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Post a message to the #general channel in Slack with the text \"Motion detected in the office!\" and the title \"Security Alert\" whenever a new event is triggered in MESH with the EventID 12345 between 07:00 and 19:00, including a thumbnail URL https://example.com/alert_image.jpg."}
{"original_description": "Share your photos to Instagram and automatically have them posted to a Slack channel.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Instagram.anyNewPhotoByYou.Caption.includes(\"vacation\") && Instagram.anyNewPhotoByYou.CreatedAt.hour() > 17) {\n  Slack.postToChannel.setMessage(`New photo: ${Instagram.anyNewPhotoByYou.Url}`);\n  Slack.postToChannel.setTitle(\"New Vacation Photo\");\n  Slack.postToChannel.setTitleUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Slack.postToChannel.setImageUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Slack.postToChannel.setChannel(\"#travel_pics\");\n} else {\n  Slack.postToChannel.skip(\"Does not match vacation criteria or time.\");\n}", "intent": "When a new photo is posted to Instagram with a caption containing the keyword \"vacation\" and the photo was taken after 5:00 PM, share the photo on the Slack channel #travel_pics, including the photo's short URL in the message, and set the title to \"New Vacation Photo\" with a link to the image file."}
{"original_description": "An easy way to keep coworkers or collaborators in the know — when you publish a new post this Applet will share the title, link, and a thumbnail image to the Slack channel of your choice. ", "trigger_channel": "WordPress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wordpress.any_new_post_wp"}, "trigger_details": [{"section": "Ingredients", "title": "Post title\nThe post's title.", "description": "The post's title.", "details": {"Slug": "PostTitle", "Filter code": "Wordpress.anyNewPostWp.PostTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Post url\nThe post's URL.", "description": "The post's URL.", "details": {"Slug": "PostUrl", "Filter code": "Wordpress.anyNewPostWp.PostUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Post content\nThe post's content, may contain HTML.", "description": "The post's content, may contain HTML.", "details": {"Slug": "PostContent", "Filter code": "Wordpress.anyNewPostWp.PostContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Post image url\nURL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "details": {"Slug": "PostImageUrl", "Filter code": "Wordpress.anyNewPostWp.PostImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Tags and categories\nThe post's tags and categories, comma seperated.", "description": "The post's tags and categories, comma seperated.", "details": {"Slug": "TagsAndCategories", "Filter code": "Wordpress.anyNewPostWp.TagsAndCategories", "Type": "String", "Example": "neato, really cool"}}, {"section": "Ingredients", "title": "Post published\nDate post was created", "description": "Date post was created", "details": {"Slug": "PostPublished", "Filter code": "Wordpress.anyNewPostWp.PostPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Wordpress.anyNewPostWp.PostTitle.includes(\"Update\") && Wordpress.anyNewPostWp.PostImageUrl !== \"http://ifttt.com/images/no_image_card.png\") {\n  Slack.postToChannel.setMessage(`New update: ${Wordpress.anyNewPostWp.PostTitle} - ${Wordpress.anyNewPostWp.PostUrl}`);\n  Slack.postToChannel.setTitle(\"Latest News\");\n  Slack.postToChannel.setTitleUrl(Wordpress.anyNewPostWp.PostUrl);\n  Slack.postToChannel.setImageUrl(Wordpress.anyNewPostWp.PostImageUrl);\n} else {\n  Slack.postToChannel.skip(\"The post does not contain the keyword 'Update' or does not include an image.\");\n}", "intent": "When a new post is published on WordPress with the title containing the keyword \"Update\" and including an image, share the post's title, link, and thumbnail image to the Slack channel #announcements, setting the message to \"New update: {{PostTitle}} - {{PostUrl}}\", the title to \"Latest News\", and the title URL to {{PostUrl}}, along with the thumbnail URL set to {{PostImageUrl}}."}
{"original_description": "Choose a Slack channel and a message will be posted whenever there is a new alert from USCERT.", "trigger_channel": "US-CERT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uscert.new_alert"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Uscert.newAlert.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Uscert.newAlert.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry publisher\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Uscert.newAlert.EntryPublisher", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Uscert.newAlert.EntryContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Uscert.newAlert.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Uscert.newAlert.EntryContentHtml.toLowerCase().includes(\"vulnerability\")) {\n  Slack.postToChannel.setMessage(\"USCERT has issued a new alert: \" + Uscert.newAlert.EntryContentHtml + \". Read more at \" + Uscert.newAlert.EntryUrl);\n  Slack.postToChannel.setTitle(\"New USCERT Alert: \" + Uscert.newAlert.EntryTitle);\n  Slack.postToChannel.setChannel(\"#security-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Does not contain the keyword 'vulnerability'.\");\n}", "intent": "Post a message to the #security-alerts channel on Slack with the title \"New USCERT Alert: {{EntryTitle}}\" and the message \"USCERT has issued a new alert: {{EntryContent}}. Read more at {{EntryUrl}}\" whenever a new alert is published by USCERT, filtered by the keyword \"vulnerability\"."}
{"original_description": "This Applet delivers BrainyQuote's Quote of the Day to a Slack channel of your choosing.", "trigger_channel": "BrainyQuote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "brainyquote.today_s_quote"}, "trigger_details": [{"section": "Ingredients", "title": "Source\nThe source of the quote.", "description": "The source of the quote.", "details": {"Slug": "EntryTitle", "Filter code": "Brainyquote.todaySQuote.Source", "Type": "String", "Example": "Voltaire"}}, {"section": "Ingredients", "title": "Quote url\nThe BrainyQuote URL.", "description": "The BrainyQuote URL.", "details": {"Slug": "EntryUrl", "Filter code": "Brainyquote.todaySQuote.QuoteUrl", "Type": "String", "Example": "https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html"}}, {"section": "Ingredients", "title": "Quote\nThe quote, may contain HTML.", "description": "The quote, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Brainyquote.todaySQuote.Quote", "Type": "String", "Example": "\"Je pense, donc je suis\""}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Brainyquote.todaySQuote.Source === \"Voltaire\") {\n  Slack.postToChannel.setMessage(Brainyquote.todaySQuote.Quote + \" \" + Brainyquote.todaySQuote.QuoteUrl);\n  Slack.postToChannel.setTitle(\"Daily Motivation\");\n  Slack.postToChannel.setTitleUrl(\"https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html\");\n  Slack.postToChannel.setImageUrl(\"https://brainyquote.com/photos/voltaire.jpg\");\n  Slack.postToChannel.setChannel(\"#inspiration\");\n} else {\n  Slack.postToChannel.skip(\"Quote is not from Voltaire.\");\n}", "intent": "Deliver BrainyQuote's daily quote from Voltaire to the #inspiration Slack channel with a message containing the quote and a link to https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html, including an optional title \"Daily Motivation\" and an image URL https://brainyquote.com/photos/voltaire.jpg."}
{"original_description": "Choose the Slack channel when you configure the Applet, and popular business articles will automatically be posted. ", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.any_new_popular_article_today"}, "trigger_details": [{"section": "Trigger fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Section", "Slug": "section", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.anyNewPopularArticleToday.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.anyNewPopularArticleToday.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.anyNewPopularArticleToday.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.anyNewPopularArticleToday.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.anyNewPopularArticleToday.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.anyNewPopularArticleToday.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Nytimes.anyNewPopularArticleToday.Section === \"Business\") {\n  var message = Nytimes.anyNewPopularArticleToday.Title + \" by \" + Nytimes.anyNewPopularArticleToday.Author + \": \" + Nytimes.anyNewPopularArticleToday.ArticleUrl;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(Nytimes.anyNewPopularArticleToday.Title);\n  Slack.postToChannel.setTitleUrl(Nytimes.anyNewPopularArticleToday.ArticleUrl);\n  Slack.postToChannel.setImageUrl(Nytimes.anyNewPopularArticleToday.ImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Article is not from the Business section.\");\n}", "intent": "When a new popular business article is published in the \"Business\" section of The New York Times, post the article title, author, and URL to the \"#business-news\" channel on Slack, including a thumbnail image from the article."}
{"original_description": "Straight from Congress.gov — new items on the day's agenda when the Senate is in session will be posted to the Slack channel of your choice. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setMessage(\"A new item has been added to the day's agenda: \" + Feed.newFeedItem.EntryTitle + \". Read more at \" + Feed.newFeedItem.EntryUrl);\nSlack.postToChannel.setTitle(\"New Senate Agenda Item\");\nSlack.postToChannel.setImageUrl(Feed.newFeedItem.EntryImageUrl);", "intent": "Post a message to the #congress-updates Slack channel with the title \"New Senate Agenda Item\" and the message \"A new item has been added to the day's agenda: {{EntryTitle}}. Read more at {{EntryUrl}}\" whenever a new item is posted to the Congress.gov RSS feed, including an image thumbnail from the entry if available."}
{"original_description": "Keep your colleagues or collaborators in the loop on new outbreaks — perfect for anyone working in global health. ", "trigger_channel": "World Health Organization", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "who.new_disease_outbreak_news_from_who"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Helper text": "E.g. MERS, Zika, Canada", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Who.newDiseaseOutbreakNewsFromWho.EntryTitle", "Type": "String", "Example": "Middle East respiratory syndrome coronavirus (MERS-CoV) – Saudi Arabia, United Arab Emirates, and Qatar"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Who.newDiseaseOutbreakNewsFromWho.EntryUrl", "Type": "String", "Example": "http://www.who.int/entity/csr/don/06-june-2017-mers-saudi-arabia-united-arab-emirates-qatar/en/index.html"}}, {"section": "Ingredients", "title": "Content preview\nA preview of the entry's content.", "description": "A preview of the entry's content.", "details": {"Slug": "EntryContent", "Filter code": "Who.newDiseaseOutbreakNewsFromWho.ContentPreview", "Type": "String", "Example": "Between 21 April and 29 May 2017, the National IHR Focal Point of Saudi Arabia reported 25 additional cases of Middle East Respiratory Syndrome Coronavirus (MERS-CoV) infection including six fatal cases. On 16 May 2017, the IHR NFP of the United Arab Emi"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Who.newDiseaseOutbreakNewsFromWho.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setChannel(\"#globalhealth\");\nSlack.postToChannel.setMessage(Who.newDiseaseOutbreakNewsFromWho.EntryTitle + \" - \" + Who.newDiseaseOutbreakNewsFromWho.EntryUrl);", "intent": "When the World Health Organization reports a new disease outbreak news, such as an update on Middle East respiratory syndrome coronavirus (MERS-CoV) in Saudi Arabia, send a message to the #globalhealth channel on Slack with the entry title, for example \"Middle East respiratory syndrome coronavirus (MERS-CoV) – Saudi Arabia, United Arab Emirates, and Qatar\", and include a link to the full report, like http://www.who.int/entity/csr/don/06-june-2017-mers-saudi-arabia-united-arab-emirates-qatar/en/index.html, to keep colleagues informed about the latest global health updates."}
{"original_description": "This Applet sends you a notification from the IFTTT app when a new \"Ask Slashdot\" article is posted.", "trigger_channel": "Slashdot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "slashdot.new_story"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Slashdot.newStory.EntryTitle", "Type": "String", "Example": "Microsoft Is Bringing Office to the Windows Store"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Slashdot.newStory.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qvWxfd"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Slashdot.newStory.EntryContent", "Type": "String", "Example": "An anonymous reader quotes a report from VentureBeat: At its Microsoft EDU event in New York City today, the company announced it is bringing Microsoft Office to the Windows Store. We're talking about the full Win32 version of Office -- this is not a..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Slashdot.newStory.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var title = Slashdot.newStory.EntryTitle;\nvar subject = 'Ask Slashdot';\nvar url = Slashdot.newStory.EntryUrl;\nvar content = Slashdot.newStory.EntryContent;\n\nif (title.indexOf(subject) >= 0) {\n  IfNotifications.sendNotification.setMessage(\"New 'Ask Slashdot' article: \" + title + \". Read more at \" + url + \". Content: \" + content);\n} else {\n  IfNotifications.sendNotification.skip(\"Not an 'Ask Slashdot' article\");\n}", "intent": "Send a notification from the IFTTT app when a new \"Ask Slashdot\" article is posted with a title like \"Microsoft Is Bringing Office to the Windows Store\", containing the entry's URL, such as http://ift.tt/2qvWxfd, and its content, which may include HTML, to the user immediately after publication.", "filter_code_old": "var title = Trigger.EntryTitle\nvar subject = 'Ask Slashdot'\n\nif (title.indexOf(subject) < 0) {\n   IfNotifications.sendNotification.skip(\"Not an 'Ask Slashdot' article\")\n}\n\n"}
{"original_description": "Save a set amount toward one of your Goals every time FitBit logs you’ve met your target for how long you want to sleep.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.sleep-duration-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Target hours\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Target hours", "Helper text": "e.g. 7.5", "Slug": "target_hours", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept in seconds", "description": "The total time you slept in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Date awoken\nDate when you awoke", "description": "Date when you awoke", "details": {"Slug": "DateAwoken", "Filter code": "Fitbit.sleepDurationBelow.DateAwoken", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal"}, "action_details": [{"section": "Trigger fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Goal name\nName of the goal saved to.", "description": "Name of the goal saved to.", "details": {"Slug": "goal_name", "Filter code": "Qapital.saveTowardGoal.GoalName", "Type": "String", "Example": "Trip to Iceland"}}, {"section": "Ingredients", "title": "Amount\nAmount saved.", "description": "Amount saved.", "details": {"Slug": "amount", "Filter code": "Qapital.saveTowardGoal.Amount", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Save method\nMethod used to save.", "description": "Method used to save.", "details": {"Slug": "save_method", "Filter code": "Qapital.saveTowardGoal.SaveMethod", "Type": "String", "Example": "Round-up"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Qapital.saveTowardGoal.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds >= 7.5 * 60 * 60) {\n  Qapital.saveTowardGoal.setAmount(5);\n  Qapital.saveTowardGoal.setGoalName(\"Vacation Fund\");\n}", "intent": "Save $5 toward my \"Vacation Fund\" goal in Qapital every time I reach my target sleep duration of 7.5 hours as tracked by Fitbit."}
{"original_description": "Stay on top of current services being added. Whether it's a brand new device, a trending mobile app, or the internet's latest connected car — learn about it first here.", "trigger_channel": "IFTTT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ifttt.new_service_published"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nThe name of the new service.", "description": "The name of the new service.", "details": {"Slug": "name", "Filter code": "Ifttt.newServicePublished.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Service url\nURL to the service on IFTTT.", "description": "URL to the service on IFTTT.", "details": {"Slug": "url", "Filter code": "Ifttt.newServicePublished.ServiceUrl", "Type": "Web URL", "Example": "https://ifttt.com/ifttt"}}, {"section": "Ingredients", "title": "Description\nThe description of the service.", "description": "The description of the service.", "details": {"Slug": "description", "Filter code": "Ifttt.newServicePublished.Description", "Type": "String", "Example": "This service provides..."}}, {"section": "Ingredients", "title": "Service logo\nA URL to the service's logo.", "description": "A URL to the service's logo.", "details": {"Slug": "logo_url", "Filter code": "Ifttt.newServicePublished.ServiceLogo", "Type": "Image URL", "Example": "https://assets.ifttt.com/images/channels/1/icons/regular.png"}}, {"section": "Ingredients", "title": "Created at\nDate and time the service was published.", "description": "Date and time the service was published.", "details": {"Slug": "created_at", "Filter code": "Ifttt.newServicePublished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Ifttt.newServicePublished.Name === \"Smart Home Device\" && Ifttt.newServicePublished.Description.includes(\"automation\")) {\n  Slack.postToChannel.setMessage(`A new service called ${Ifttt.newServicePublished.Name} has been published on IFTTT, offering home automation capabilities. Check it out at ${Ifttt.newServicePublished.ServiceUrl}`);\n  Slack.postToChannel.setTitle(\"New Service: Smart Home Automation\");\n  Slack.postToChannel.setTitleUrl(Ifttt.newServicePublished.ServiceUrl);\n  Slack.postToChannel.setImageUrl(Ifttt.newServicePublished.ServiceLogo);\n  Slack.postToChannel.setChannel(\"#new-services\");\n} else {\n  Slack.postToChannel.skip(\"The new service does not match the specified criteria.\");\n}", "intent": "When a new service is published on IFTTT with the name \"Smart Home Device\" and the description contains the keyword \"automation\", post a message to the Slack channel \"#new-services\" with the title \"New Service: Smart Home Automation\" and the message \"A new service called Smart Home Device has been published on IFTTT, offering home automation capabilities. Check it out at https://ifttt.com/SmartHomeDevice\". Include a thumbnail image of the service's logo, which can be found at https://assets.ifttt.com/images/channels/1/icons/regular.png."}
{"original_description": "Keep a group informed on relevant news — just enter the keyword you want to search for and new articles will be posted in the Slack channel you specify.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Nytimes.newArticleMatchingSearch.Keywords.includes(\"climate change\") && Nytimes.newArticleMatchingSearch.Section === \"World News\") {\n  var message = `${Nytimes.newArticleMatchingSearch.Title} by ${Nytimes.newArticleMatchingSearch.Author}: ${Nytimes.newArticleMatchingSearch.Blurb}. Read more at ${Nytimes.newArticleMatchingSearch.ArticleUrl}`;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(Nytimes.newArticleMatchingSearch.Title);\n  Slack.postToChannel.setTitleUrl(Nytimes.newArticleMatchingSearch.ArticleUrl);\n  Slack.postToChannel.setImageUrl(Nytimes.newArticleMatchingSearch.ImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Article does not match the specified criteria.\");\n}", "intent": "When a new article is published in The New York Times with the keyword \"climate change\" and the section is \"World News\", post a message to the Slack channel \"#news-alerts\" with the article title, author, and a brief summary, including a link to the full article and an image of the article's main photo."}
{"original_description": "Choose a keyword that best fits your industry or expertise. When a new grant matches, it'll be posted to the Slack channel of your choice. Good luck!", "trigger_channel": "Grants.gov", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "grants.new_grant_opportunity"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Helper text": "Can be a city, field, or specialty (e.g. &quot;Seattle&quot;, &quot;Education&quot;, &quot;physics&quot;).", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Grant title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Grants.newGrantOpportunity.GrantTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Grant url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Grants.newGrantOpportunity.GrantUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Grant content html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Grants.newGrantOpportunity.GrantContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Grant posted\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Grants.newGrantOpportunity.GrantPosted", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Grants.newGrantOpportunity.GrantContentHtml.includes(\"Education\") || Grants.newGrantOpportunity.GrantTitle.includes(\"Education\")) {\n  Slack.postToChannel.setMessage(`New Grant Opportunity: ${Grants.newGrantOpportunity.GrantTitle} - ${Grants.newGrantOpportunity.GrantUrl}`);\n  Slack.postToChannel.setTitle(Grants.newGrantOpportunity.GrantTitle);\n  Slack.postToChannel.setTitleUrl(Grants.newGrantOpportunity.GrantUrl);\n  // Assuming the image URL can be extracted from the grant content HTML\n  const imageUrl = Grants.newGrantOpportunity.GrantContentHtml.match(/<img src=\"([^\"]+)\"/);\n  if (imageUrl && imageUrl[1]) {\n    Slack.postToChannel.setImageUrl(imageUrl[1]);\n  }\n} else {\n  Slack.postToChannel.skip(\"Grant does not match the keyword 'Education'.\");\n}", "intent": "When a new grant opportunity matching the keyword \"Education\" is posted on Grants.gov, send a message to the Slack channel #education-grants with the grant title, URL, and content. The message should include the title of the grant, a link to the grant URL, and an image thumbnail from the grant content."}
{"original_description": "Keep the team informed and aware — this Applet will post SEC investor alerts to the Slack channel of your choosing.", "trigger_channel": "Securities and Exchange Commission", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "sec.sec_investor_alerts"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Helper text": "E.g. &quot;crowdfunding&quot; or &quot;investor complaints&quot;", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Sec.secInvestorAlerts.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Sec.secInvestorAlerts.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry description\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Sec.secInvestorAlerts.EntryDescription", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Sec.secInvestorAlerts.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Sec.secInvestorAlerts.EntryContent.includes(\"crowdfunding\") || Sec.secInvestorAlerts.EntryTitle.includes(\"crowdfunding\") || Sec.secInvestorAlerts.EntryDescription.includes(\"crowdfunding\")) {\n  Slack.postToChannel.setTitle(\"New SEC Alert\");\n  Slack.postToChannel.setTitleUrl(Sec.secInvestorAlerts.Link);\n  Slack.postToChannel.setMessage(`New SEC Investor Alert: ${Sec.secInvestorAlerts.EntryTitle} - ${Sec.secInvestorAlerts.Link}\\n${Sec.secInvestorAlerts.EntryDescription}`);\n  Slack.postToChannel.setChannel(\"#investor-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Does not contain keyword 'crowdfunding'\");\n}", "intent": "Post new SEC investor alerts containing the keyword \"crowdfunding\" to the Slack channel \"#investor-alerts\" with a message that includes the entry title, link, and description, and set the title to \"New SEC Alert\" with a title URL linking back to the original entry."}
{"original_description": "Have a favorite service on IFTTT? Are you a crafty Applet maker? Want to follow along for all the latest trigger and action releases? If you answered YES to any of those questions, then this Applet is for you!", "trigger_channel": "IFTTT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ifttt.new_trigger_or_action_published"}, "trigger_details": [{"section": "Trigger fields", "title": "Service\nText input", "description": "Text input", "details": {"Label": "Which service?", "Helper text": "Enter the service name or slug (e.g. Google Assistant or google_assistant)", "Slug": "service", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the new trigger or action.", "description": "The name of the new trigger or action.", "details": {"Slug": "name", "Filter code": "Ifttt.newTriggerOrActionPublished.Name", "Type": "String", "Example": "New IFTTT update"}}, {"section": "Ingredients", "title": "Description\nThe description of the new trigger or action.", "description": "The description of the new trigger or action.", "details": {"Slug": "description", "Filter code": "Ifttt.newTriggerOrActionPublished.Description", "Type": "String", "Example": "This trigger fires whenever..."}}, {"section": "Ingredients", "title": "Service url\nThe URL to the service that published the new trigger or action.", "description": "The URL to the service that published the new trigger or action.", "details": {"Slug": "service_url", "Filter code": "Ifttt.newTriggerOrActionPublished.ServiceUrl", "Type": "Web URL", "Example": "https://ifttt.com/ifttt"}}, {"section": "Ingredients", "title": "Service\nThe name of the service that published the new trigger or action.", "description": "The name of the service that published the new trigger or action.", "details": {"Slug": "service", "Filter code": "Ifttt.newTriggerOrActionPublished.Service", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Type\nWhether the addition is a trigger or an action.", "description": "Whether the addition is a trigger or an action.", "details": {"Slug": "type", "Filter code": "Ifttt.newTriggerOrActionPublished.Type", "Type": "String", "Example": "Trigger"}}, {"section": "Ingredients", "title": "Created at\nDate and time the trigger or action was added.", "description": "Date and time the trigger or action was added.", "details": {"Slug": "created_at", "Filter code": "Ifttt.newTriggerOrActionPublished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Ifttt.newTriggerOrActionPublished.Service === \"Google Assistant\" && Ifttt.newTriggerOrActionPublished.Description.includes(\"update\")) {\n  Slack.postToChannel.setTitle(\"New Trigger: \" + Ifttt.newTriggerOrActionPublished.Name);\n  Slack.postToChannel.setMessage(\"A new trigger or action named \" + Ifttt.newTriggerOrActionPublished.Name + \" has been published by Google Assistant. Description: \" + Ifttt.newTriggerOrActionPublished.Description + \". Service URL: \" + Ifttt.newTriggerOrActionPublished.ServiceUrl + \". Type: \" + Ifttt.newTriggerOrActionPublished.Type + \". Created at: \" + Ifttt.newTriggerOrActionPublished.CreatedAt);\n  Slack.postToChannel.setChannel(\"#ifttt-updates\");\n} else {\n  Slack.postToChannel.skip(\"The new trigger or action does not match the specified criteria.\");\n}", "intent": "When a new IFTTT trigger or action is published by the service \"Google Assistant\" and its description contains the word \"update\", post a message to the Slack channel \"#ifttt-updates\" with the title \"New Trigger: {{name}}\" and the message \"A new trigger or action named {{name}} has been published by Google Assistant. Description: {{description}}. Service URL: {{service_url}}. Type: {{type}}. Created at: {{created_at}}\"."}
{"original_description": "Just add the hashtag #Slack (or pick your own) to your Instas — when you publish them, they'll be shared to the Slack channel of your choice. ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#Slack\")) {\n  var captionWithoutHashtag = Instagram.newPhotoByYouTagged.CaptionNoTag;\n  var photoUrl = Instagram.newPhotoByYouTagged.Url;\n  Slack.postToChannel.setMessage(captionWithoutHashtag + \" \" + photoUrl);\n  Slack.postToChannel.setTitle(\"New Photo\");\n  Slack.postToChannel.setTitleUrl(photoUrl);\n  Slack.postToChannel.setImageUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n} else {\n  Slack.postToChannel.skip(\"The photo does not contain the #Slack hashtag.\");\n}", "intent": "When I post a new photo on Instagram with the hashtag #Slack, share it to the #general channel on Slack, including the photo's caption without the hashtag and a link to the photo."}
{"original_description": "Share notes with your co-workers — just tag them and they'll be posted to Slack. ", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.add_tag_to_note"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Specific tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.addTagToNote.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.addTagToNote.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.addTagToNote.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.addTagToNote.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.addTagToNote.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"urgent\")) {\n  Slack.postToChannel.setMessage(`Action Required: ${Evernote.addTagToNote.Title} - ${Evernote.addTagToNote.PublicUrl}`);\n  Slack.postToChannel.setTitle(\"Action Required\");\n  Slack.postToChannel.setTitleUrl(Evernote.addTagToNote.PublicUrl);\n  // Assuming the image URL is available as an ingredient or can be derived\n  // For demonstration, let's assume it's directly available like other ingredients\n  Slack.postToChannel.setImageUrl(\"https://example.com/thumbnail.jpg\"); // Replace with actual image URL logic\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Note is not tagged as urgent.\");\n}", "intent": "When a new note is tagged with \"urgent\" in Evernote, post the note title \"Action Required\" and its public URL to the Slack channel #operations-alerts, including a thumbnail of the note's image."}
{"original_description": "When Withings Sleep detects you get into bed, your Nest Thermostat will adjust the room temperature to be optimal for sleeping.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nvar minute = WithingsSleep.bedin.DateandTime.minute();\nif (WithingsSleep.bedin.DeviceUser === \"Tom\" && \n    WithingsSleep.bedin.device === \"Tom's Withings Sleep\" && \n    GoogleNestThermostat.actionFields.device === \"Living Room Nest Thermostat\" &&\n    (hour === 22 || (hour === 23 && minute <= 30))) {\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celcius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"18\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Conditions not met for adjusting temperature.\");\n}", "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 23:30, his Living Room Nest Thermostat will adjust the room temperature to 18°C for optimal sleeping."}
{"original_description": "Send a predefined Slack message by pressing the pusher. ", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + Kronaby.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Kronaby Pusher Alert\");\n  Slack.postToChannel.setTitleUrl(\"https://ifttt.apps-kronaby.com/map\");\n  Slack.postToChannel.setImageUrl(\"https://ifttt.apps-kronaby.com/map/image\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}", "intent": "When the Kronaby pusher is pressed with a double press type at a location with latitude 55.611947 and longitude 12.978337, send a Slack message to the #general channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Kronaby Pusher Alert\", title URL \"https://ifttt.apps-kronaby.com/map\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map/image\"."}
{"original_description": "Set the folder path, and when you star a new file in it, this Applet will automatically share it with the Slack channel you specify. Easy, breezy, beautiful — Applet world! ", "trigger_channel": "Google Drive", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_drive.new_starred_file"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Drive folder path", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Documents/Photos/Receipts&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "filename", "Filter code": "GoogleDrive.newStarredFile.Filename", "Type": "String", "Example": "filename"}}, {"section": "Ingredients", "title": "Path\nThe path of the file.", "description": "The path of the file.", "details": {"Slug": "path", "Filter code": "GoogleDrive.newStarredFile.Path", "Type": "String", "Example": "/IFTTT/sample.txt"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "file_url", "Filter code": "GoogleDrive.newStarredFile.FileUrl", "Type": "File URL", "Example": "https://google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time file was created.", "description": "Date and time file was created.", "details": {"Slug": "created_at", "Filter code": "GoogleDrive.newStarredFile.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (GoogleDrive.newStarredFile.Path === \"/Documents/Important/Daily Reports\") {\n  Slack.postToChannel.setMessage(\"New daily report available: \" + GoogleDrive.newStarredFile.FileUrl);\n  Slack.postToChannel.setTitle(GoogleDrive.newStarredFile.Filename);\n  Slack.postToChannel.setTitleUrl(GoogleDrive.newStarredFile.FileUrl);\n  Slack.postToChannel.setImageUrl(\"\");\n} else {\n  Slack.postToChannel.skip(\"The starred file is not in the /Documents/Important/Daily Reports folder.\");\n}", "intent": "When a new file is starred in the Google Drive folder path \"/Documents/Important/Daily Reports\", automatically share it with the Slack channel \"#team-updates\" and include a message saying \"New daily report available\" along with the file's public URL."}
{"original_description": "Keep the team updated on the FCC's notices. This Applet posts to Slack when a relevant notice is posted.", "trigger_channel": "Federal Communications Commission", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcc.new_notice"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword(s) (optional)", "Helper text": "E.g. &quot;New Jersey&quot;, &quot;Bronx&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Notice recipient\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Fcc.newNotice.NoticeRecipient", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Fcc.newNotice.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Notice subject\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Fcc.newNotice.NoticeSubject", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Fcc.newNotice.NoticeSubject.toLowerCase().includes(\"spectrum auction\")) {\n  Slack.postToChannel.setMessage(`A new notice has been posted by the Federal Communications Commission: ${Fcc.newNotice.NoticeRecipient} - ${Fcc.newNotice.NoticeSubject}`);\n  Slack.postToChannel.setTitle(\"New FCC Notice\");\n  Slack.postToChannel.setTitleUrl(Fcc.newNotice.Link);\n} else {\n  Slack.postToChannel.skip(\"The notice does not contain the keyword 'spectrum auction'.\");\n}", "intent": "Post a message to the #general channel on Slack with the title \"New FCC Notice\" and the message \"A new notice has been posted by the Federal Communications Commission: {{EntryTitle}} - {{EntryContent}}\" whenever a new notice is posted by the FCC that contains the keyword \"spectrum auction\", including a link to the notice {{EntryUrl}}."}
{"original_description": "Receive a notification in a Slack channel of your choosing whenever Ballotpedia features a new breaking news story.", "trigger_channel": "Ballotpedia", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ballotpedia.breaking_news"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword(s) (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Ballotpedia.breakingNews.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Ballotpedia.breakingNews.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Ballotpedia.breakingNews.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Ballotpedia.breakingNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Ballotpedia.breakingNews.EntryTitle.toLowerCase().includes(\"election\")) {\n  Slack.postToChannel.setMessage(\"New breaking news: \" + Ballotpedia.breakingNews.EntryTitle);\n  Slack.postToChannel.setTitle(Ballotpedia.breakingNews.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Ballotpedia.breakingNews.EntryUrl);\n  if (Ballotpedia.breakingNews.EntryContent.includes(\"img src\")) {\n    var imageUrl = Ballotpedia.breakingNews.EntryContent.match(/img src=\"([^\"]+)\"/)[1];\n    Slack.postToChannel.setImageUrl(imageUrl);\n  }\n  Slack.postToChannel.setChannel(\"#news-updates\");\n} else {\n  Slack.postToChannel.skip(\"Entry title does not contain the keyword 'election'.\");\n}", "intent": "When Ballotpedia publishes a new breaking news story with the keyword \"election\" in its title, send a notification to the Slack channel \"#news-updates\" with the message \"New breaking news: {{EntryTitle}}\", including a link to the full article at {{EntryUrl}}, and attach a thumbnail image from the article if available."}
{"original_description": "Keep your team informed! This Applet posts the latest EPA news to the Slack channel of your choosing.", "trigger_channel": "Environmental Protection Agency", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "epa.latest_news"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Epa.latestNews.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Epa.latestNews.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry region\nThe region publishing the entry.", "description": "The region publishing the entry.", "details": {"Slug": "EntryAuthor", "Filter code": "Epa.latestNews.EntryRegion", "Type": "String", "Example": "Region 03"}}, {"section": "Ingredients", "title": "Entry content preview\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Epa.latestNews.EntryContentPreview", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Epa.latestNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Epa.latestNews.EntryContentPreview.includes(\"climate change\") && new Date(Epa.latestNews.EntryPublished) > new Date(\"August 1, 2022\")) {\n  Slack.postToChannel.setMessage(`*${Epa.latestNews.EntryTitle}* - ${Epa.latestNews.EntryContentPreview} - Published: ${Epa.latestNews.EntryPublished}`);\n  Slack.postToChannel.setTitle(Epa.latestNews.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Epa.latestNews.EntryUrl);\n} else {\n  Slack.postToChannel.skip(\"Entry does not contain 'climate change' or was published before August 1, 2022.\");\n}", "intent": "Post the latest Environmental Protection Agency news to the #general Slack channel, including the entry title, content preview, and published date, but only if the entry contains the keyword \"climate change\" and was published after August 1, 2022."}
{"original_description": "Never miss a story! This Applet delivers breaking news from SFGATE to a Slack channel of your choosing.", "trigger_channel": "SFGATE", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "sfgate.breaking_news"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Sfgate.breakingNews.EntryTitle", "Type": "String", "Example": "Bay Bridge bike ride now goes halfway to SF 7 days a week"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Sfgate.breakingNews.EntryUrl", "Type": "String", "Example": "http://ift.tt/2p3XLwc"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Sfgate.breakingNews.EntryAuthor", "Type": "String", "Example": "Mark Morford"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Sfgate.breakingNews.EntryContent", "Type": "String", "Example": "When three kittens became trapped in a boom lift in Redwood City on Monday, officers from the Peninsula Humane Society (PHS) and SPCA had to think on their feet – and fast."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Sfgate.breakingNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setMessage(\"New breaking news story: \" + Sfgate.breakingNews.EntryTitle + \"\\n\" + Sfgate.breakingNews.EntryUrl + \"\\n\" + Sfgate.breakingNews.EntryContent);\nSlack.postToChannel.setTitle(Sfgate.breakingNews.EntryTitle);\nSlack.postToChannel.setTitleUrl(Sfgate.breakingNews.EntryUrl);\nif (Sfgate.breakingNews.EntryContent.includes(\"img src\")) {\n  var imageUrl = Sfgate.breakingNews.EntryContent.match(/img src=\"([^\"]+)\"/)[1];\n  Slack.postToChannel.setImageUrl(imageUrl);\n}\nSlack.postToChannel.setChannel(\"#breaking-news\");", "intent": "When a new breaking news story is published on SFGATE with a title like \"Bay Bridge bike ride now goes halfway to SF 7 days a week\" and authored by someone like Mark Morford, post the entry title, URL, and content to the #breaking-news channel in Slack, including a thumbnail image if available, so that team members are always up-to-date with the latest news."}
{"original_description": "Post new Pew articles about science to the Slack channel of your choice. ", "trigger_channel": "Pew Research Center", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pew_research.u_s_politics_news"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "What keyword do you want to track?", "Helper text": "Optional", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "PewResearch.uSPoliticsNews.EntryTitle", "Type": "String", "Example": "Muslims and Islam: Key findings in the U.S. and around the world"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "PewResearch.uSPoliticsNews.EntryUrl", "Type": "String", "Example": "http://www.pewresearch.org/fact-tank/2017/05/26/muslims-and-islam-key-findings-in-the-u-s-and-around-the-world/"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "PewResearch.uSPoliticsNews.EntryAuthor", "Type": "String", "Example": "Michael Lipka"}}, {"section": "Ingredients", "title": "Entry preview\nA short preview of the entry's content.", "description": "A short preview of the entry's content.", "details": {"Slug": "EntryContent", "Filter code": "PewResearch.uSPoliticsNews.EntryPreview", "Type": "String", "Example": "Muslims are the fastest-growing religious group in the world. Here are some questions and answers about their public opinions and demographics."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "PewResearch.uSPoliticsNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (PewResearch.uSPoliticsNews.EntryPreview.toLowerCase().includes(\"science\") || PewResearch.uSPoliticsNews.EntryTitle.toLowerCase().includes(\"science\")) {\n  Slack.postToChannel.setTitle(PewResearch.uSPoliticsNews.EntryTitle);\n  Slack.postToChannel.setMessage(`New science article from Pew Research: ${PewResearch.uSPoliticsNews.EntryTitle}`);\n  Slack.postToChannel.setTitleUrl(PewResearch.uSPoliticsNews.EntryUrl);\n  // Note: There's no direct ingredient for an image thumbnail in the provided trigger details.\n  // If an image URL is available, it should be accessed through a similar filter code method as other ingredients.\n  // For this example, we assume there might be an \"EntryImageUrl\" ingredient with its own filter code method.\n  // If such an ingredient exists, you can uncomment and use the following line:\n  // Slack.postToChannel.setImageUrl(PewResearch.uSPoliticsNews.EntryImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Article does not contain the keyword 'science'.\");\n}", "intent": "Post new Pew Research Center articles containing the keyword \"science\" to the Slack channel \"#general\" with the message \"New science article from Pew Research: {EntryTitle}\", including a link to the article {EntryUrl}, and an image thumbnail if available."}
{"original_description": "The fiscal monitor surveys and analyzes the latest public finance developments. When IMF publishes a new report, this Applet will post to a channel in Slack. ", "trigger_channel": "International Monetary Fund", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "imf.fiscal_monitor_reports"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Imf.fiscalMonitorReports.Title", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Imf.fiscalMonitorReports.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Imf.fiscalMonitorReports.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Imf.fiscalMonitorReports.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Imf.fiscalMonitorReports.Title.indexOf(\"Fiscal Monitor Report\") === 0 && \n    new Date(Imf.fiscalMonitorReports.EntryPublished) > new Date('2024-08-01')) {\n  var message = `${Imf.fiscalMonitorReports.Title}: The latest fiscal monitor report highlights global economic trends and risks. Read more at ${Imf.fiscalMonitorReports.Link}`;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(Imf.fiscalMonitorReports.Title);\n  Slack.postToChannel.setTitleUrl(Imf.fiscalMonitorReports.Link);\n  Slack.postToChannel.setImageUrl(\"https://example.com/fiscal-monitor-image.jpg\");\n  Slack.postToChannel.setChannel(\"#economics\");\n} else {\n  Slack.postToChannel.skip(\"Does not match the required conditions.\");\n}", "intent": "When the International Monetary Fund publishes a new fiscal monitor report with a title like \"Fiscal Monitor Report - October 2024\" and the entry is published after August 1, 2024, post a message to the #economics channel in Slack, including the report's title, a brief summary of its content, such as \"The latest fiscal monitor report highlights global economic trends and risks\", and a link to the full report, with an optional thumbnail image from https://example.com/fiscal-monitor-image.jpg."}
{"original_description": "An office full of commuters? This Applet shares Caltrain news to the Slack channel of your choice. ", "trigger_channel": "Caltrain", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "caltrain.new_update"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Caltrain.newUpdate.EntryTitle", "Type": "String", "Example": "SamTrans and Caltrain Get You to the San Mateo County Fair"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Caltrain.newUpdate.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qUi9lf"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Caltrain.newUpdate.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Caltrain.newUpdate.EntryPublished > \"August 23, 2010 at 11:01PM\" && Caltrain.newUpdate.EntryTitle === \"SamTrans and Caltrain Get You to the San Mateo County Fair\") {\n  Slack.postToChannel.setMessage(`New update: ${Caltrain.newUpdate.EntryTitle} - ${Caltrain.newUpdate.EntryUrl} published at ${Caltrain.newUpdate.EntryPublished}`);\n  Slack.postToChannel.setTitle(Caltrain.newUpdate.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Caltrain.newUpdate.EntryUrl);\n  Slack.postToChannel.channel = \"#commuter-alerts\";\n} else {\n  Slack.postToChannel.skip(\"Update does not match criteria.\");\n}", "intent": "When Caltrain publishes a new update with a title like \"SamTrans and Caltrain Get You to the San Mateo County Fair\" and the entry is published after August 23, 2010, at 11:01 PM, share the update's title, URL, and publication date to the #commuter-alerts Slack channel as a message that includes the title of the entry and a link to the full update."}
{"original_description": "Keep the team up-to-date on the FCC's orders. This Applet posts to Slack when the latest relevant orders are published. Filter by keyword to get more relevant results!", "trigger_channel": "Federal Communications Commission", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcc.order"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword(s) (optional)", "Helper text": "E.g. &quot;Sprint&quot;, &quot;Wireline Competition Bureau&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Subject\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Fcc.order.Subject", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Fcc.order.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Preview content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Fcc.order.PreviewContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Fcc.order.PreviewContent.includes(\"Wireline Competition Bureau\")) {\n  Slack.postToChannel.setMessage(Fcc.order.Link);\n  Slack.postToChannel.setTitle(\"New FCC Order\");\n  Slack.postToChannel.setChannel(\"#general\");\n} else {\n  Slack.postToChannel.skip(\"Order does not contain the keyword 'Wireline Competition Bureau'.\");\n}", "intent": "Post a message to the #general Slack channel with the title \"New FCC Order\" and the link to the order when a new Federal Communications Commission order is published and contains the keyword \"Wireline Competition Bureau\"."}
{"original_description": "Productivity: 📉 Learning: 📈", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads_in_books"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Longreads.anyNewPostOnLongreadsInBooks.EntryTitle.includes(\"Launch\") && Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor === \"Linden Tibbets\") {\n  Slack.postToChannel.setMessage(`New book alert: ${Longreads.anyNewPostOnLongreadsInBooks.EntryTitle} by ${Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor}`);\n  Slack.postToChannel.setTitle(\"Book Release\");\n  Slack.postToChannel.setTitleUrl(Longreads.anyNewPostOnLongreadsInBooks.EntryUrl);\n  Slack.postToChannel.setImageUrl(Longreads.anyNewPostOnLongreadsInBooks.EntryImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Does not match the criteria.\");\n}", "intent": "When a new post is published on Longreads in the books category with an entry title containing the word \"Launch\" and the author is \"Linden Tibbets\", send a message to the Slack channel \"#productivity\" with the message \"New book alert: {EntryTitle} by {EntryAuthor}\", including a thumbnail URL of the entry's image, and set the title to \"Book Release\" with a link to the entry's URL."}
{"original_description": "This Applet will share new updates from the U.S. Energy Information Administration to a channel in Slack. ", "trigger_channel": "Energy Information Administration", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "eia.today_in_energy"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Eia.todayInEnergy.EntryTitle", "Type": "String", "Example": "Gasoline prices ahead of Memorial Day are higher than 2016, but second lowest since 2009"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Eia.todayInEnergy.EntryUrl", "Type": "String", "Example": "http://www.eia.gov/todayinenergy/detail.cfm?id=31392"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content.", "description": "The entry's content.", "details": {"Slug": "EntryContent", "Filter code": "Eia.todayInEnergy.EntryContent", "Type": "String", "Example": "Gasoline prices heading into Memorial Day weekend average $2.40 per gallon (gal) nationally, up from last year's price of $2.30/gal. Despite the year-over-year increase, 2017 marks the second-lowest price ahead of the Memorial Day weekend since 2009, when"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Eia.todayInEnergy.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setMessage(\"New energy update: \" + Eia.todayInEnergy.EntryTitle + \" - \" + Eia.todayInEnergy.EntryContent + \" - Read more at \" + Eia.todayInEnergy.EntryUrl);\nSlack.postToChannel.setTitle(Eia.todayInEnergy.EntryTitle);\nSlack.postToChannel.setTitleUrl(Eia.todayInEnergy.EntryUrl);", "intent": "Share new updates from the U.S. Energy Information Administration to the #energy-updates channel in Slack, including the entry title, content, and URL, whenever a new entry is published, using the message format \"New energy update: {{EntryTitle}} - {{EntryContent}} - Read more at {{EntryUrl}}\"."}
{"original_description": "Every time your Fitbit logs new sleep, show it on your Glance Clock.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-sleep-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Time to leave bed seconds\nThe time spent in bed after awaking, in seconds", "description": "The time spent in bed after awaking, in seconds", "details": {"Slug": "TimeToLeaveBedSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBedSeconds", "Type": "String", "Example": "600"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.newSleepLogged.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Restless count\nNumber of moments you were restless while sleeping", "description": "Number of moments you were restless while sleeping", "details": {"Slug": "RestlessCount", "Filter code": "Fitbit.newSleepLogged.RestlessCount", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept, in seconds", "description": "The total time you slept, in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.newSleepLogged.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Time to fall asleep\nNumber of minutes before falling asleep", "description": "Number of minutes before falling asleep", "details": {"Slug": "TimeToFallAsleep", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleep", "Type": "String", "Example": "7m"}}, {"section": "Ingredients", "title": "Time awake\nThe time spent awake", "description": "The time spent awake", "details": {"Slug": "TimeAwake", "Filter code": "Fitbit.newSleepLogged.TimeAwake", "Type": "String", "Example": "30m"}}, {"section": "Ingredients", "title": "Time awake seconds\nThe time spent awake, in seconds", "description": "The time spent awake, in seconds", "details": {"Slug": "TimeAwakeSeconds", "Filter code": "Fitbit.newSleepLogged.TimeAwakeSeconds", "Type": "String", "Example": "1800"}}, {"section": "Ingredients", "title": "Awake count\nNumber of moments you were awake while trying to sleep", "description": "Number of moments you were awake while trying to sleep", "details": {"Slug": "AwakeCount", "Filter code": "Fitbit.newSleepLogged.AwakeCount", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Fell asleep at\nThe date and time you fell asleep, localized to your Fitbit timezone setting", "description": "The date and time you fell asleep, localized to your Fitbit timezone setting", "details": {"Slug": "FellAsleepAt", "Filter code": "Fitbit.newSleepLogged.FellAsleepAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time to fall asleep seconds\nNumber of seconds before falling asleep", "description": "Number of seconds before falling asleep", "details": {"Slug": "TimeToFallAsleepSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleepSeconds", "Type": "String", "Example": "420"}}, {"section": "Ingredients", "title": "Time to leave bed\nThe time spent in bed after awaking", "description": "The time spent in bed after awaking", "details": {"Slug": "TimeToLeaveBed", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBed", "Type": "String", "Example": "10m"}}, {"section": "Ingredients", "title": "Awoke at\nThe date and time you woke up, localized to your Fitbit timezone setting", "description": "The date and time you woke up, localized to your Fitbit timezone setting", "details": {"Slug": "AwokeAt", "Filter code": "Fitbit.newSleepLogged.AwokeAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSlept === \"8h 0m\" && Fitbit.newSleepLogged.AwokeAt.includes(\"07:00\")) {\n  Glanceclock.notice.setText(\"You slept for 8 hours\");\n  Glanceclock.notice.setAnimation(\"gentle\");\n  Glanceclock.notice.setColor(\"blue\");\n} else {\n  Glanceclock.notice.skip(\"Conditions not met.\");\n}", "intent": "When your Fitbit logs new sleep with a total time slept of 8 hours and you woke up at 7:00 AM, show a notification on your Glance Clock with the message \"You slept for 8 hours\" in a gentle animation with a blue color."}
{"original_description": "Have a group of like-minded music lovers at work? Create a Slack channel and share your favorite songs with them", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\" && Spotify.newTrackAddedToPlaylist.AddedBy === \"Linden Tibbets\" && Spotify.newTrackAddedToPlaylist.TrackName === \"Snow (Hey Oh)\" && Spotify.newTrackAddedToPlaylist.ArtistName === \"Red Hot Chili Peppers\") {\n  Slack.postToChannel.setMessage(`New track added: ${Spotify.newTrackAddedToPlaylist.TrackName} by ${Spotify.newTrackAddedToPlaylist.ArtistName}. Listen here: ${Spotify.newTrackAddedToPlaylist.TrackURL}`);\n  Slack.postToChannel.setTitle(\"New Jam Added\");\n  Slack.postToChannel.setTitleUrl(\"https://open.spotify.com/playlist/37i9dQZF1DX5trt9i14X7j\");\n  Slack.postToChannel.setImageUrl(Spotify.newTrackAddedToPlaylist.AlbumCoverURL);\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}", "intent": "When a new track is added to the \"Mid-2000s Jamz\" playlist on Spotify by Linden Tibbets, post a message to the \"#music-lovers\" channel on Slack with the track name \"Snow (Hey Oh)\" by Red Hot Chili Peppers, including a link to the track https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO and an image of the album cover https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d, along with the title \"New Jam Added\" and a title URL https://open.spotify.com/playlist/37i9dQZF1DX5trt9i14X7j."}
{"original_description": "Always sharing company or team photos to a Facebook Page? Make sure every one sees them! Use the hashtag #team (or pick something else) in your caption. That'll tell this Applet to grab the pic and post it to the Slack channel you specify. ", "trigger_channel": "Facebook Pages", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "facebook_pages.new_hashtag_photo_from_page"}, "trigger_details": [{"section": "Trigger fields", "title": "Hashtag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hashtag", "Helper text": "e.g. #hashtag", "Slug": "hashtag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Page name\nYour Facebook Page's name.", "description": "Your Facebook Page's name.", "details": {"Slug": "PageName", "Filter code": "FacebookPages.newHashtagPhotoFromPage.PageName", "Type": "String", "Example": "The ifttt Office"}}, {"section": "Ingredients", "title": "Link\nThe link to the photo's FacebookPages page, may be private.", "description": "The link to the photo's FacebookPages page, may be private.", "details": {"Slug": "Link", "Filter code": "FacebookPages.newHashtagPhotoFromPage.Link", "Type": "String", "Example": "http://www.facebook.com/#!/photo.php?pid=33943077&id=7302486"}}, {"section": "Ingredients", "title": "Image source\nThe URL to the full sized version of the photo itself.", "description": "The URL to the full sized version of the photo itself.", "details": {"Slug": "ImageSource", "Filter code": "FacebookPages.newHashtagPhotoFromPage.ImageSource", "Type": "String", "Example": "http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg"}}, {"section": "Ingredients", "title": "Caption\nThe photo's caption.", "description": "The photo's caption.", "details": {"Slug": "Caption", "Filter code": "FacebookPages.newHashtagPhotoFromPage.Caption", "Type": "String", "Example": "Wow what a fun night! #friends"}}, {"section": "Ingredients", "title": "Caption no hashtag\nThe photo's caption without the hashtag.", "description": "The photo's caption without the hashtag.", "details": {"Slug": "CaptionNoHashtag", "Filter code": "FacebookPages.newHashtagPhotoFromPage.CaptionNoHashtag", "Type": "String", "Example": "Wow what a fun night!"}}, {"section": "Ingredients", "title": "Created at\nDate and time photo was uploaded.", "description": "Date and time photo was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "FacebookPages.newHashtagPhotoFromPage.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Page url\nThe link to the main Facebook Page.", "description": "The link to the main Facebook Page.", "details": {"Slug": "PageUrl", "Filter code": "FacebookPages.newHashtagPhotoFromPage.PageUrl", "Type": "String", "Example": "http://www.facebook.com/pages/The-ifttt-office/108073145941483"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (FacebookPages.newHashtagPhotoFromPage.PageName === \"The ifttt Office\" && FacebookPages.newHashtagPhotoFromPage.Caption.includes(\"#team\")) {\n  Slack.postToChannel.setMessage(\"New team photo!\");\n  Slack.postToChannel.setTitle(\"Team Photo\");\n  Slack.postToChannel.setImageUrl(FacebookPages.newHashtagPhotoFromPage.ImageSource);\n  Slack.postToChannel.setTitleUrl(FacebookPages.newHashtagPhotoFromPage.Link);\n} else {\n  Slack.postToChannel.skip(\"The photo does not match the criteria.\");\n}", "intent": "When a new photo is posted to the Facebook Page \"The ifttt Office\" with the hashtag #team in its caption, send a message to the Slack channel \"#general\" with the photo's caption \"New team photo!\" and include the full-sized image from the URL http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg."}
{"original_description": "Forward the new Android SMS messages you receive to Slack. Ideal for business phones. ", "trigger_channel": "Android SMS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_messages.received_a_message"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the message.", "description": "The contact name associated with the message.", "details": {"Slug": "ContactName", "Filter code": "AndroidMessages.receivedAMessage.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Text\nThe text of the message", "description": "The text of the message", "details": {"Slug": "Text", "Filter code": "AndroidMessages.receivedAMessage.Text", "Type": "String", "Example": "Hey there! How's it going?"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the message was received.", "description": "The time the message was received.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidMessages.receivedAMessage.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe number that sent the message", "description": "The number that sent the message", "details": {"Slug": "FromNumber", "Filter code": "AndroidMessages.receivedAMessage.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidMessages.receivedAMessage.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (AndroidMessages.receivedAMessage.FromNumber !== AndroidMessages.contacts.getContact(AndroidMessages.receivedAMessage.ContactName).number \n    && Meta.currentUserTime.hour() >= 8 \n    && Meta.currentUserTime.hour() < 18 \n    && AndroidMessages.receivedAMessage.Text.toLowerCase().includes(\"urgent\") \n    && AndroidMessages.receivedAMessage.DeviceName === \"Google Pixel 7\") {\n  Slack.postToChannel.setMessage(AndroidMessages.receivedAMessage.Text);\n  Slack.postToChannel.setTitle(\"New Urgent Message\");\n  Slack.postToChannel.setTitleUrl(\"https://example.com/message-details\");\n  Slack.postToChannel.setImageUrl(\"\");\n} else {\n  Slack.postToChannel.skip(\"Does not match the conditions.\");\n}", "intent": "When I receive a new SMS message from an unknown number on my Google Pixel 7 between 08:00 and 18:00, containing the keyword \"urgent\", forward the message text to the Slack channel #business-alerts with the title \"New Urgent Message\" and include a link to the message details at https://example.com/message-details."}
{"original_description": "This Applet will post the latest bills passed by the Texas Legislature to the Slack channel of your choosing. Use the filter keyword to get only the most relevant updates.", "trigger_channel": "Texas Legislature", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "texas_legislature.today_s_passed_bills"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Helper text": "E.g. &quot;disability&quot;, &quot;military&quot;, &quot;tax&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "TexasLegislature.todaySPassedBills.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "TexasLegislature.todaySPassedBills.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "TexasLegislature.todaySPassedBills.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  var query = \"education\";\n  if (TexasLegislature.todaySPassedBills.EntryContent.includes(query) || TexasLegislature.todaySPassedBills.EntryTitle.includes(query)) {\n    Slack.postToChannel.setMessage(\"New bill passed: \" + TexasLegislature.todaySPassedBills.EntryTitle + \". Read more at \" + TexasLegislature.todaySPassedBills.EntryUrl);\n    Slack.postToChannel.setTitle(TexasLegislature.todaySPassedBills.EntryTitle);\n    Slack.postToChannel.setTitleUrl(TexasLegislature.todaySPassedBills.EntryUrl);\n    Slack.postToChannel.channel = \"#texas-legislature-updates\";\n  } else {\n    Slack.postToChannel.skip(\"Bill does not contain the keyword '\" + query + \"'.\");\n  }\n} else {\n  Slack.postToChannel.skip(\"Outside of active hours (8 AM to 5 PM).\");\n}", "intent": "Post the latest bills passed by the Texas Legislature that contain the keyword \"education\" to the Slack channel #texas-legislature-updates, including the bill title, URL, and a brief description, every time a new bill is passed between 08:00 and 17:00."}
{"original_description": "When you don't hit your target hours of sleep with Fitbit, Remember The Milk will remind you to head to bed at a reasonable time. You can set your target sleep duration and bedtime below.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.sleep-duration-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Target hours\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Target hours", "Helper text": "e.g. 7.5", "Slug": "target_hours", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept in seconds", "description": "The total time you slept in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Date awoken\nDate when you awoke", "description": "Date when you awoke", "details": {"Slug": "DateAwoken", "Filter code": "Fitbit.sleepDurationBelow.DateAwoken", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "if (Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds < 7.5 * 60 * 60) {\n  Rememberthemilk.tasksAdd.setTask(\"Get to bed earlier tonight due:10:30PM\");\n}", "intent": "When the total time slept is less than 7.5 hours, as tracked by Fitbit, create a new task in Remember The Milk named \"Get to bed earlier tonight\" with a due time of 10:30 PM to remind yourself to head to bed at a reasonable hour and aim for a full 8 hours of sleep."}
{"original_description": "Keep your coworkers informed and aware: This Applet will monitor the city of Tampa's police calls for any that mention your office's street name. If there's one, it'll send the details to the Slack channel you specify. ", "trigger_channel": "City of Tampa, Florida", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tampa.police_calls_for_service"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (recommended)", "Helper text": "Can be type of call (criminal mischief, building check, disturbance) or address (palmetto st, 25th av, etc.)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Call type\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Tampa.policeCallsForService.CallType", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Tampa.policeCallsForService.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Call detail html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Tampa.policeCallsForService.CallDetailHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Dispatch time\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Tampa.policeCallsForService.DispatchTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  if (Tampa.policeCallsForService.CallDetailHtml.includes(\"Dale Mabry Highway\")) {\n    var message = Tampa.policeCallsForService.CallType + \" at \" + Tampa.policeCallsForService.EntryContent + \" - \" + Tampa.policeCallsForService.Link;\n    Slack.postToChannel.setMessage(message);\n    Slack.postToChannel.setTitle(\"Police Call Near Office\");\n    Slack.postToChannel.setChannel(\"#office-alerts\");\n  } else {\n    Slack.postToChannel.skip(\"Call does not mention Dale Mabry Highway.\");\n  }\n} else {\n  Slack.postToChannel.skip(\"Outside of office hours (08:00 to 17:00).\");\n}", "intent": "When the City of Tampa's police calls for service mention \"Dale Mabry Highway\" between 08:00 and 17:00, send a message to the Slack channel \"#office-alerts\" with the title \"Police Call Near Office\", including the call type and link to the call detail, such as \"Robbery at 123 Main St - http://tampa.gov/police/call/12345\"."}
{"original_description": "Good morning Jersey! This Applet posts to a Slack channel of your choosing when a light rail advisory is affecting your commute between 7-9am.", "trigger_channel": "NJ Transit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nj_transit.new_light_rail_advisory"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by light rail line (optional)", "Helper text": "E.g. &quot;River line&quot;, &quot;Hudson-Bergen&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Advisory time posted\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "NjTransit.newLightRailAdvisory.AdvisoryTimePosted", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "NjTransit.newLightRailAdvisory.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "NjTransit.newLightRailAdvisory.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar day = Meta.currentUserTime.day();\n\nif (day == 0 || day == 6) {\n  Slack.postToChannel.skip(\"Not a weekday\");\n}\n\nelse if (hour < 7 || hour > 9) {\n  Slack.postToChannel.skip(\"Not morning commute hours\");\n}\n\nif (NjTransit.newLightRailAdvisory.ContentHtml.indexOf(\"Hudson-Bergen\") === -1) {\n  Slack.postToChannel.skip(\"Advisory not for Hudson-Bergen line\");\n}\n\nSlack.postToChannel.setMessage(\"New light rail advisory posted at \" + NjTransit.newLightRailAdvisory.AdvisoryTimePosted + \": \" + NjTransit.newLightRailAdvisory.Link);\nSlack.postToChannel.setTitle(\"Commuter Alert: Hudson-Bergen Line\");\nSlack.postToChannel.setTitleUrl(NjTransit.newLightRailAdvisory.Link);", "intent": "Post a message to the #commute-alerts channel on Slack between 7:00 AM and 9:00 AM, Monday through Friday, when a new light rail advisory is posted for the Hudson-Bergen line, including the advisory time and a link to the full announcement.", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\nvar Day = Meta.currentUserTime.day()\n\nif (Day==6 || Day==7) {\n  Slack.postToChannel.skip(\"Not a weekday\")\n}\n\nelse if (Hour < 7 || Hour > 9) {\n  Slack.postToChannel.skip(\"Not morning commute hours\")\n}\n\n\n"}
{"original_description": "Post to Slack each time a new item is created in an app", "trigger_channel": "Podio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "podio.new_app_item"}, "trigger_details": [{"section": "Trigger fields", "title": "App\nDropdown list", "description": "Dropdown list", "details": {"Label": "App", "Helper text": "Podio app.", "Slug": "app", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time item was created.", "description": "Date and time item was created.", "details": {"Slug": "created_at", "Filter code": "Podio.newAppItem.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Id\nApp item id.", "description": "App item id.", "details": {"Slug": "id", "Filter code": "Podio.newAppItem.Id", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Title\nItem's title.", "description": "Item's title.", "details": {"Slug": "title", "Filter code": "Podio.newAppItem.Title", "Type": "String", "Example": "Cars"}}, {"section": "Ingredients", "title": "Created by name\nName of the entity who created the item.", "description": "Name of the entity who created the item.", "details": {"Slug": "created_by_name", "Filter code": "Podio.newAppItem.CreatedByName", "Type": "String", "Example": "Jim"}}, {"section": "Ingredients", "title": "Created by\nId of the entity who created the item.", "description": "Id of the entity who created the item.", "details": {"Slug": "created_by_id", "Filter code": "Podio.newAppItem.CreatedById", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Fields json\nFields of the item in JSON format. See https://developers.podio.com/doc/items/filter-items-4496747.", "description": "Fields of the item in JSON format. See https://developers.podio.com/doc/items/filter-items-4496747.", "details": {"Slug": "fields_json", "Filter code": "Podio.newAppItem.FieldsJson", "Type": "String", "Example": "[{\"field_id\": 11, \"label\": \"Name\", \"values\": [{\"value\": \"Foo\"}]}]"}}, {"section": "Ingredients", "title": "Link\nLink to the item.", "description": "Link to the item.", "details": {"Slug": "link", "Filter code": "Podio.newAppItem.Link", "Type": "Web URL", "Example": "https://podio.com/company/demospace/apps/cool-app/items/4"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Podio.newAppItem.Title === \"Cars\") {\n  var message = `A new item named ${Podio.newAppItem.Title} has been created in the ${Podio.newAppItem.Title} app by ${Podio.newAppItem.CreatedByName} at ${Podio.newAppItem.CreatedAt}. View the item here: ${Podio.newAppItem.Link}`;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(\"New Item Created\");\n  Slack.postToChannel.setChannel(\"#general\");\n}", "intent": "Post a message to the #general channel on Slack with the title \"New Item Created\" and the message \"A new item named {title} has been created in the Cars app by Jim at 2020-07-08T04:17:06+05:00. View the item here: https://podio.com/company/demospace/apps/cool-app/items/4\" whenever a new item is created in the Podio app named \"Cars\"."}
{"original_description": "Send yourself or your team a Slack message when you have a new call recording in Zoom Phone.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_user_recording"}, "trigger_details": [{"section": "Trigger fields", "title": "Recording status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which status should the recording have?", "Helper text": "Is the recording read or unread?", "Slug": "recording_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Recording\nThe id of the recording.", "description": "The id of the recording.", "details": {"Slug": "recording_id", "Filter code": "ZoomPhone.newUserRecording.RecordingId", "Type": "String", "Example": "alkdoweinld"}}, {"section": "Ingredients", "title": "Call date\nThe date and time at which the recording was received.", "description": "The date and time at which the recording was received.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newUserRecording.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Recording duration\nThe duration of the recording in format HH:MM:SS.", "description": "The duration of the recording in format HH:MM:SS.", "details": {"Slug": "recording_duration", "Filter code": "ZoomPhone.newUserRecording.RecordingDuration", "Type": "String", "Example": "03:21"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the caller.", "description": "The name of the caller.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newUserRecording.CallerName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the caller.", "description": "The phone number of the caller.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newUserRecording.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newUserRecording.CallerNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the user who received the recording.", "description": "The name of the user who received the recording.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newUserRecording.CalleeName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the user who received the recording.", "description": "The phone number of the user who received the recording.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newUserRecording.CalleeNumber", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newUserRecording.CalleeNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Call direction\nThe direction of the call -- inbound or outbound", "description": "The direction of the call -- inbound or outbound", "details": {"Slug": "call_direction", "Filter code": "ZoomPhone.newUserRecording.CallDirection", "Type": "String", "Example": "outbound"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (ZoomPhone.newUserRecording.RecordingStatus === \"unread\") {\n  Slack.postToChannel.setMessage(`You have a new call recording from ${ZoomPhone.newUserRecording.CallerName}, duration ${ZoomPhone.newUserRecording.RecordingDuration}, on ${ZoomPhone.newUserRecording.CallDate}`);\n  Slack.postToChannel.setTitle(`New Call Recording from ${ZoomPhone.newUserRecording.CallerName}`);\n  Slack.postToChannel.setChannel(\"#general\");\n}", "intent": "Send a Slack message to the #general channel with the title \"New Call Recording from Biff McIftt\" and the message \"You have a new call recording from Biff McIftt, duration 03:21, on 2020-07-08T04:17:06+05:00\" whenever there is a new call recording in Zoom Phone with an unread status."}
{"original_description": "Get a Slack message to yourself or to your team when there is a new voicemail for you in Zoom Phone.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_user_voicemail"}, "trigger_details": [{"section": "Trigger fields", "title": "Voicemail status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which status should the voicemail have?", "Helper text": "Is the voicemail read or unread?", "Slug": "voicemail_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Voicemail\nThe ID of the voicemail.", "description": "The ID of the voicemail.", "details": {"Slug": "voicemail_id", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailId", "Type": "String", "Example": "alkdoweinld"}}, {"section": "Ingredients", "title": "Call date\nThe start time of the voicemail.", "description": "The start time of the voicemail.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newUserVoicemail.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Voicemail duration\nThe duration of the voicemail in format HH:MM:SS.", "description": "The duration of the voicemail in format HH:MM:SS.", "details": {"Slug": "voicemail_duration", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailDuration", "Type": "String", "Example": "00:03:21"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the caller.", "description": "The phone number of the caller.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the caller.", "description": "The name of the caller.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newUserVoicemail.CallerName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the user who received the voicemail.", "description": "The phone number of the user who received the voicemail.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumber", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the user who received the voicemail.", "description": "The name of the user who received the voicemail.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newUserVoicemail.CalleeName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Voicemail status\nThe status of the voicemail -- read or unread.", "description": "The status of the voicemail -- read or unread.", "details": {"Slug": "voicemail_status", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailStatus", "Type": "String", "Example": "unread"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\" \n    && ZoomPhone.newUserVoicemail.CalleeName === \"Biff McIfttt\" \n    && ZoomPhone.newUserVoicemail.CallerNumberType === \"external\" \n    && Zeit.parseDuration(ZoomPhone.newUserVoicemail.VoicemailDuration) > Zeit.parseDuration(\"00:01:00\")) {\n  Slack.postToChannel.setTitle(\"New Voicemail\");\n  Slack.postToChannel.setMessage(`You have a new voicemail from ${ZoomPhone.newUserVoicemail.CallerName} at ${ZoomPhone.newUserVoicemail.CallDate}. The voicemail is ${ZoomPhone.newUserVoicemail.VoicemailDuration} long.`);\n  Slack.postToChannel.setChannel(\"#notifications\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}", "intent": "When a new unread voicemail from an external caller is received on Zoom Phone, with a duration of more than 00:01:00 and the callee's name being Biff McIfttt, send a Slack message to the #notifications channel with the title \"New Voicemail\" and the message \"You have a new voicemail from {{caller_name}} at {{call_date}}. The voicemail is {{voicemail_duration}} long.\""}
{"original_description": "Set your Security Mode switch to \"Disarmed\" automatically at a specific time every day. Please make sure that your Bosma devices are set up and connected to the internet.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.switch_security_mode", "Filter code method": "Bosma.switchSecurityMode.skip(string?: reason)", "Runtime method": "runAction(\"bosma.switch_security_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Family\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which family do you want to control?", "Slug": "family", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Security Mode do you want to switch to?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Bosma.switchSecurityMode.setMode(string: mode)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() === 7 && DateAndTime.everyDayAt.CheckTime.minute() === 0) {\n  Bosma.switchSecurityMode.setMode(\"Disarmed\");\n} else {\n  Bosma.switchSecurityMode.skip(\"Not 7:00 AM\");\n}", "intent": "Set your Security Mode switch to \"Disarmed\" automatically every day at 7:00 AM, ensuring all Bosma devices are connected and set up properly."}
{"original_description": "Ask FSIS (Food Safety and Inspection Service) is a forum where common qs about food safety and regulations are asked, and answered. Share the latest Qs and their As to a Slack channel — perfect if you and your colleagues work in or support the food services industry. ", "trigger_channel": "Department of Agriculture", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "usda.new_askfsis_entry"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Helper text": "E.g. &quot;cattle,&quot; &quot;training,&quot; etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Usda.newAskfsisEntry.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Usda.newAskfsisEntry.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Usda.newAskfsisEntry.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Usda.newAskfsisEntry.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Usda.newAskfsisEntry.EntryContent.includes(\"food recall\")) {\n  Slack.postToChannel.setMessage(`New question posted: ${Usda.newAskfsisEntry.EntryTitle}\\n${Usda.newAskfsisEntry.EntryContent}\\nRead more: ${Usda.newAskfsisEntry.EntryUrl}`);\n  Slack.postToChannel.setTitle(Usda.newAskfsisEntry.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Usda.newAskfsisEntry.EntryUrl);\n  Slack.postToChannel.setImageUrl(\"https://www.usda.gov/themes/usda/img/usda-logo.png\");\n  Slack.postToChannel.setChannel(\"#food-safety-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Entry does not contain the keyword 'food recall'.\");\n}", "intent": "When a new question is posted on the Ask FSIS forum with the keyword \"food recall\" in the Department of Agriculture channel, send a message to the #food-safety-alerts Slack channel with the entry title, entry content, and a link to the full entry, including an image thumbnail from the USDA website."}
{"original_description": "When my thermostat is in Sleep mode and someone is at home, turn my lights off.", "trigger_channel": "Warmup Smart Thermostat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "warmup_smart_thermostat.sleep"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nDropdown list", "description": "Dropdown list", "details": {"Label": "Location", "Slug": "location", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WarmupSmartThermostat.sleep.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WarmupSmartThermostat.sleep.location === \"Home\" && WarmupSmartThermostat.sleep.someoneIsPresent) {\n  Hue.turnOnAllHue.skip(\"Sleep mode and someone is present at Home\");\n  Hue.turnOffAllHue.setLights(\"Living Room\");\n}", "intent": "When the Warmup Smart Thermostat is in Sleep mode at my Home location and someone is present, turn off all Philips Hue lights in the Living Room."}
{"original_description": "Send a predefined Slack message by pressing the pusher. ", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (JaguarWatches.pusherPressed.Latitude === \"55.611947\" && JaguarWatches.pusherPressed.Longitude === \"12.978337\" && JaguarWatches.pusherPressed.PressType === \"double\") {\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + JaguarWatches.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Urgent Pusher Alert\");\n  Slack.postToChannel.setTitleUrl(\"https://example.com/alert\");\n  Slack.postToChannel.setImageUrl(JaguarWatches.pusherPressed.MapImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Pusher press does not match the specified conditions.\");\n}", "intent": "When the Jaguar Watches pusher is pressed with a double press type at latitude 55.611947 and longitude 12.978337, send a Slack message to the #operations-alerts channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Urgent Pusher Alert\", title URL \"https://example.com/alert\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map\"."}
{"original_description": "Send a predefined Slack message by pressing the pusher. ", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.Longitude === \"12.978337\" && LotusWatches.pusherPressed.PressType === \"double\") {\n  Slack.postToChannel.setChannel(\"#general\");\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + LotusWatches.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Pusher Alert\");\n  Slack.postToChannel.setTitleUrl(\"https://ifttt.apps-kronaby.com/map\");\n  Slack.postToChannel.setImageUrl(\"https://ifttt.apps-kronaby.com/map_image\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}", "intent": "When the pusher is pressed with a double press type at latitude 55.611947 and longitude 12.978337, send a Slack message to the #general channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Pusher Alert\", title URL \"https://ifttt.apps-kronaby.com/map\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map_image\"."}
{"original_description": "Send a predefined Slack message by pressing the pusher. ", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (FestinaWatches.pusherPressed.Latitude === \"55.611947\" && FestinaWatches.pusherPressed.Longitude === \"12.978337\" && FestinaWatches.pusherPressed.PressType === \"double\") {\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + FestinaWatches.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Alert: Pusher Pressed\");\n  Slack.postToChannel.setTitleUrl(\"https://ifttt.apps-kronaby.com/map\");\n  Slack.postToChannel.setImageUrl(\"https://ifttt.apps-kronaby.com/map_image\");\n} else {\n  Slack.postToChannel.skip(\"Pusher press does not match the specified conditions.\");\n}", "intent": "When the Festina Watches pusher is pressed with a double press type at latitude 55.611947 and longitude 12.978337, send a Slack message to the #operations-alerts channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Alert: Pusher Pressed\", title URL \"https://ifttt.apps-kronaby.com/map\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map_image\"."}
{"original_description": "Set your Security Mode to \"Home\" automatically at a specific time every day. Please make sure that your Bosma devices are set up and connected to the internet.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.switch_security_mode", "Filter code method": "Bosma.switchSecurityMode.skip(string?: reason)", "Runtime method": "runAction(\"bosma.switch_security_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Family\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which family do you want to control?", "Slug": "family", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Security Mode do you want to switch to?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Bosma.switchSecurityMode.setMode(string: mode)"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour === 7 && minute === 0) {\n  Bosma.switchSecurityMode.setMode(\"Home\");\n  Bosma.switchSecurityMode.setFamily(\"My Household\");\n} else {\n  Bosma.switchSecurityMode.skip(\"Not the scheduled time.\");\n}", "intent": "Set your Security Mode to \"Home\" automatically every day at 7:00 AM for the family \"My Household\"."}
{"original_description": "Read aloud total sleep time to TTS Speaker when I wake up.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-sleep-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Time to leave bed seconds\nThe time spent in bed after awaking, in seconds", "description": "The time spent in bed after awaking, in seconds", "details": {"Slug": "TimeToLeaveBedSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBedSeconds", "Type": "String", "Example": "600"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.newSleepLogged.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Restless count\nNumber of moments you were restless while sleeping", "description": "Number of moments you were restless while sleeping", "details": {"Slug": "RestlessCount", "Filter code": "Fitbit.newSleepLogged.RestlessCount", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept, in seconds", "description": "The total time you slept, in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.newSleepLogged.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Time to fall asleep\nNumber of minutes before falling asleep", "description": "Number of minutes before falling asleep", "details": {"Slug": "TimeToFallAsleep", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleep", "Type": "String", "Example": "7m"}}, {"section": "Ingredients", "title": "Time awake\nThe time spent awake", "description": "The time spent awake", "details": {"Slug": "TimeAwake", "Filter code": "Fitbit.newSleepLogged.TimeAwake", "Type": "String", "Example": "30m"}}, {"section": "Ingredients", "title": "Time awake seconds\nThe time spent awake, in seconds", "description": "The time spent awake, in seconds", "details": {"Slug": "TimeAwakeSeconds", "Filter code": "Fitbit.newSleepLogged.TimeAwakeSeconds", "Type": "String", "Example": "1800"}}, {"section": "Ingredients", "title": "Awake count\nNumber of moments you were awake while trying to sleep", "description": "Number of moments you were awake while trying to sleep", "details": {"Slug": "AwakeCount", "Filter code": "Fitbit.newSleepLogged.AwakeCount", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Fell asleep at\nThe date and time you fell asleep, localized to your Fitbit timezone setting", "description": "The date and time you fell asleep, localized to your Fitbit timezone setting", "details": {"Slug": "FellAsleepAt", "Filter code": "Fitbit.newSleepLogged.FellAsleepAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time to fall asleep seconds\nNumber of seconds before falling asleep", "description": "Number of seconds before falling asleep", "details": {"Slug": "TimeToFallAsleepSeconds", "Filter code": "Fitbit.newSleepLogged.TimeToFallAsleepSeconds", "Type": "String", "Example": "420"}}, {"section": "Ingredients", "title": "Time to leave bed\nThe time spent in bed after awaking", "description": "The time spent in bed after awaking", "details": {"Slug": "TimeToLeaveBed", "Filter code": "Fitbit.newSleepLogged.TimeToLeaveBed", "Type": "String", "Example": "10m"}}, {"section": "Ingredients", "title": "Awoke at\nThe date and time you woke up, localized to your Fitbit timezone setting", "description": "The date and time you woke up, localized to your Fitbit timezone setting", "details": {"Slug": "AwokeAt", "Filter code": "Fitbit.newSleepLogged.AwokeAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Tochie Speaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tochie_speaker.tts_speaker", "Filter code method": "TochieSpeaker.ttsSpeaker.skip(string?: reason)", "Runtime method": "runAction(\"tochie_speaker.tts_speaker\", {})"}, "action_details": [{"section": "Action fields", "title": "Text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Text", "Helper text": "The text to read out", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "TochieSpeaker.ttsSpeaker.setText(string: text)"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speaker", "Helper text": "Your Tochie speaker name", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Chime\nDropdown list", "description": "Dropdown list", "details": {"Label": "Play chime", "Slug": "chime", "Required": "true", "Can have default value": "true", "Filter code method": "TochieSpeaker.ttsSpeaker.setChime(string: chime)"}}], "filter_code": "TochieSpeaker.ttsSpeaker.setText(\"You slept for \" + Fitbit.newSleepLogged.TotalTimeSlept);\nTochieSpeaker.ttsSpeaker.setChime(\"gentle\");\nTochieSpeaker.ttsSpeaker.setDeviceId(\"Living Room Speaker\");", "intent": "When I wake up, as detected by my Fitbit, read aloud the total time I slept, which is 8 hours and 0 minutes, using my Tochie Speaker named \"Living Room Speaker\" with the gentle chime."}
{"original_description": "Encourage good sleeping habits! You can boost your child whenever they reach their sleep goal on Fitbit. ", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.sleep-duration-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Target hours\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Target hours", "Helper text": "e.g. 7.5", "Slug": "target_hours", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Total time slept\nThe total time you slept", "description": "The total time you slept", "details": {"Slug": "TotalTimeSlept", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSlept", "Type": "String", "Example": "8h 0m"}}, {"section": "Ingredients", "title": "Total time slept in seconds\nThe total time you slept in seconds", "description": "The total time you slept in seconds", "details": {"Slug": "TotalTimeSleptInSeconds", "Filter code": "Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds", "Type": "String", "Example": "28800"}}, {"section": "Ingredients", "title": "Date awoken\nDate when you awoke", "description": "Date when you awoke", "details": {"Slug": "DateAwoken", "Filter code": "Fitbit.sleepDurationBelow.DateAwoken", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "if (parseFloat(Fitbit.sleepDurationBelow.TotalTimeSlept) >= 8) {\n  Roostermoney.boost.setAmount(\"5\");\n  Roostermoney.boost.setPot(\"Sleep Rewards\");\n  Roostermoney.boost.setDescription(\"Great job sleeping well!\");\n  Roostermoney.boost.setChild(\"Emily\");\n} else {\n  Roostermoney.boost.skip(\"Sleep duration is less than 8 hours.\");\n}", "intent": "When my child sleeps for 8 hours or more, as tracked by Fitbit, boost them £5 in their RoosterMoney pot named \"Sleep Rewards\" with the description \"Great job sleeping well!\" and assign it to my child, Emily."}
{"original_description": "Call to post a voice message to a Slack channel", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_recording"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerRecording.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerRecording.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerRecording.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerRecording.TriggerCode", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Recording transcript\nThis is the transcript of your recorded audio message.", "description": "This is the transcript of your recorded audio message.", "details": {"Slug": "recording_transcript", "Filter code": "Woopla.triggerRecording.RecordingTranscript", "Type": "String", "Example": "Hello, this is a transcription of my recorded audio message on the phone."}}, {"section": "Ingredients", "title": "Recording confidence\nA confidence estimate between 0.0 and 1.0. A higher number means the system is more confident that the recognition is correct.", "description": "A confidence estimate between 0.0 and 1.0. A higher number means the system is more confident that the recognition is correct.", "details": {"Slug": "recording_confidence", "Filter code": "Woopla.triggerRecording.RecordingConfidence", "Type": "String", "Example": "0.8439585"}}, {"section": "Ingredients", "title": "Recording url\nDirect URL to an MP3 audio file which holds the recorded audio.", "description": "Direct URL to an MP3 audio file which holds the recorded audio.", "details": {"Slug": "recording_url", "Filter code": "Woopla.triggerRecording.RecordingUrl", "Type": "File URL", "Example": "https://example.com/path/to/file.mp3"}}, {"section": "Ingredients", "title": "Recording language\nThe language of your recording in BCP-47. Language can be configured in your account settings at https://woop.la/ifttt/", "description": "The language of your recording in BCP-47. Language can be configured in your account settings at https://woop.la/ifttt/", "details": {"Slug": "recording_language", "Filter code": "Woopla.triggerRecording.RecordingLanguage", "Type": "String", "Example": "en-US"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Woopla.triggerRecording.TriggerCode === \"123\" && Woopla.triggerRecording.CalledNumber === \"+16282222790\" && Woopla.triggerRecording.PhoneNumber === \"+49203987654321\" && Woopla.triggerRecording.RecordingTranscript.includes(\"URGENT\")) {\n  Slack.postToChannel.setMessage(\"Hello team, this is a new urgent voice message\");\n  Slack.postToChannel.setTitle(\"New Urgent Voice Message\");\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met for posting the urgent voice message.\");\n}", "intent": "When a 3-digit trigger code is entered as \"123\" during a call to the Woopla phone number +16282222790 from my phone number +49203987654321, and the recording transcript contains the keyword \"URGENT\", post a voice message with the title \"New Urgent Voice Message\" and the message \"Hello team, this is a new urgent voice message\" to the Slack channel #operations-alerts."}
{"original_description": "Share the latest NAACP news with your coworkers in Slack", "trigger_channel": "NAACP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "naacp.new_post_in_naacp_news"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Naacp.newPostInNaacpNews.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Naacp.newPostInNaacpNews.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Naacp.newPostInNaacpNews.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Naacp.newPostInNaacpNews.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Naacp.newPostInNaacpNews.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Naacp.newPostInNaacpNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setMessage(\"New update from NAACP: \" + Naacp.newPostInNaacpNews.EntryTitle + \" - \" + Naacp.newPostInNaacpNews.EntryContent);\nSlack.postToChannel.setTitle(Naacp.newPostInNaacpNews.EntryTitle);\nSlack.postToChannel.setTitleUrl(Naacp.newPostInNaacpNews.EntryUrl);\nSlack.postToChannel.setImageUrl(Naacp.newPostInNaacpNews.EntryImageUrl);", "intent": "When a new post is published in the NAACP news, share the entry title, content, and image URL in the #general Slack channel with the message \"New update from NAACP: {{EntryTitle}} - {{EntryContent}}\", including the entry's image if available."}
{"original_description": "Get a signal on your Das Keyboard at the end of the day indicating the market closing price of a specified stock. ", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.price_at_close_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Helper text": "Supported exchanges include NYSE, NASDAQ, and AMEX", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.priceAtCloseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.priceAtCloseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last trade price of the stock.", "description": "The last trade price of the stock.", "details": {"Slug": "Price", "Filter code": "Finance.priceAtCloseStocks.Price", "Type": "String", "Example": "603.7"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.priceAtCloseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Date\nThe date of the last trade.", "description": "The date of the last trade.", "details": {"Slug": "Date", "Filter code": "Finance.priceAtCloseStocks.Date", "Type": "String", "Example": "September 05, 2014"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "Daskeyboardq.signals.setName(\"Office Keyboard\");\nDaskeyboardq.signals.setZone(1);\nDaskeyboardq.signals.setColor(\"red\");\nDaskeyboardq.signals.setMessage(\"Market Close: \" + Finance.priceAtCloseStocks.StockTicker + \" stock price is $\" + Finance.priceAtCloseStocks.Price);\nDaskeyboardq.signals.setDevice(\"Office Keyboard\");", "intent": "When the market closes, send a signal to my Das Keyboard device named \"Office Keyboard\" with the zone set to the number 1 key, colored in red, and display the message \"Market Close: GOOG stock price is $603.7\" to indicate the closing price of Google Inc. stock."}
{"original_description": "Kick off your team's analysis seamlessly when a new Fiscal Monitor report comes out from the IMF. This Applet creates a new Trello card and tags your team.", "trigger_channel": "International Monetary Fund", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "imf.fiscal_monitor_reports"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Imf.fiscalMonitorReports.Title", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Imf.fiscalMonitorReports.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Imf.fiscalMonitorReports.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Imf.fiscalMonitorReports.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Trello", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trello.create_card", "Filter code method": "Trello.createCard.skip(string?: reason)", "Runtime method": "runAction(\"trello.create_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Board\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "List name\nText input > Other", "description": "Text input > Other", "details": {"Label": "List name", "Helper text": "We'll create a new list if one with this name doesn't exist", "Slug": "list_name", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setList Name(string: list_name)"}}, {"section": "Action fields", "title": "Pos\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Slug": "pos", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setPos(string: pos)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setDescription(string: description)"}}, {"section": "Action fields", "title": "Members\nText input > Other", "description": "Text input > Other", "details": {"Label": "Assign members", "Helper text": "Optional comma separated list of @usernames to assign to card", "Slug": "members", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setMembers(string: members)"}}, {"section": "Action fields", "title": "Labels\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Apply labels", "Helper text": "Optional comma separated list of label names — labels that do not exist on the board will be ignored", "Slug": "labels", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setLabels(string: labels)"}}, {"section": "Action fields", "title": "Url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Attachment URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setUrl(string: url)"}}], "filter_code": "Trello.createCard.setTitle(\"New Fiscal Monitor Report\");\nTrello.createCard.setListName(\"To-Do\");\nTrello.createCard.setPos(\"top\");\nTrello.createCard.setDescription(\"A new Fiscal Monitor report has been published by the International Monetary Fund: \" + Imf.fiscalMonitorReports.Link);\nTrello.createCard.setMembers(\"@johnDoe, @janeSmith\");\nTrello.createCard.setLabels(\"IMF, Fiscal Monitor\");\nTrello.createCard.setBoard(\"Economic Analysis\");", "intent": "Create a new Trello card titled \"New Fiscal Monitor Report\" on the \"Economic Analysis\" board, in the \"To-Do\" list, at the top position, with the description \"A new Fiscal Monitor report has been published by the International Monetary Fund: http://example.com/imf-report\", and assign it to @johnDoe and @janeSmith, applying the labels \"IMF\" and \"Fiscal Monitor\"."}
{"original_description": "Choose a stock to monitor and send a signal to your Das Keyboard whenever it rises by a specified percentage.", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_rise_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage increase", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageRiseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageRiseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageRiseStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageRiseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageRiseStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageRiseStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Finance.percentageRiseStocks.StockTicker === \"GOOG\" && Finance.percentageRiseStocks.PercentageChange >= 10) {\n  Daskeyboardq.signals.setName(\"Google Stock Rise\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setMessage(\"Google stock has risen by 10%\");\n  Daskeyboardq.signals.setEffect(\"blink\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met for Google stock rise signal.\");\n}", "intent": "Monitor the stock price of Google Inc. (GOOG) and send a signal to the Das Keyboard device named \"Office Keyboard\" with the name \"Google Stock Rise\" when its price rises by 10%, coloring the center zone in red (#FF0000) with a blink effect, displaying the message \"Google stock has risen by 10%\"."}
{"original_description": "Choose a stock to monitor and send a signal to your Das Keyboard whenever it drops by a specified percentage.", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_rise_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage increase", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageRiseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageRiseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageRiseStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageRiseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageRiseStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageRiseStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Finance.percentageRiseStocks.StockTicker === \"GOOG\" && Finance.percentageRiseStocks.PercentageChange <= -10) {\n  Daskeyboardq.signals.setName(\"Google Stock Alert\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"Google stock price has dropped\");\n  Daskeyboardq.signals.setEffect(\"breathe\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met\");\n}", "intent": "Monitor the stock price of Google Inc. (GOOG) and send a signal to the Das Keyboard device named \"Office Keyboard\" with the name \"Google Stock Alert\" when it drops by 10%, coloring the center zone red, displaying the message \"Google stock price has dropped\", and applying a breathe effect."}
{"original_description": "With Airthings mold risk indication for Wave Mini, you can monitor the risk of mold growth on a 0-10 scale. By integration with IFTTT, we'll notify you when that risk levels go above a set threshold. We recommend 3 as the risk level of when to take action.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.mold-risk-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get mold risk level from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.moldRiskAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nName of the device", "description": "Name of the device", "details": {"Slug": "device", "Filter code": "Airthings.moldRiskAbove.Device", "Type": "String", "Example": "Home - Living Room"}}, {"section": "Ingredients", "title": "Mold risk\nMold risk level, a value between 0 and 10", "description": "Mold risk level, a value between 0 and 10", "details": {"Slug": "value", "Filter code": "Airthings.moldRiskAbove.MoldRisk", "Type": "String", "Example": "5"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Airthings.moldRiskAbove.MoldRisk > 3 && Airthings.moldRiskAbove.Device === \"Home - Living Room\") {\n  IfNotifications.sendNotification.setMessage(\"Mold risk is high in the living room, current level is \" + Airthings.moldRiskAbove.MoldRisk);\n} else {\n  IfNotifications.sendNotification.skip(\"Mold risk level is not high or device does not match.\");\n}", "intent": "When the mold risk level from my Home - Living Room device exceeds 3, send a notification with the message \"Mold risk is high in the living room, current level is {mold risk level}\"."}
{"original_description": "Self explanatory", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_track_from_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Search query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "search_query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newTrackFromSearch.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newTrackFromSearch.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newTrackFromSearch.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newTrackFromSearch.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newTrackFromSearch.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newTrackFromSearch.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newTrackFromSearch.ImageUrl", "Type": "String", "Example": "http://w1.sndcdn.com/jD1KgNMbSVyv_m.png"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newTrackFromSearch.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newTrackFromSearch.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newTrackFromSearch.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newTrackFromSearch.UserId", "Type": "String", "Example": "123"}}], "action_channel": "put.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "putio.new_transfer", "Filter code method": "Putio.newTransfer.skip(string?: reason)", "Runtime method": "runAction(\"putio.new_transfer\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Other", "description": "Text input > Other", "details": {"Label": "What URL?", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Putio.newTransfer.setUrl(string: url)"}}, {"section": "Action fields", "title": "Folder\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which folder ID?", "Helper text": "File will be downloaded into this folder. Folder ID can be found in the address bar when the folder is open in your browser. If the folder with given ID does not exist, the files will be downloaded into your default download folder.", "Slug": "folder_id", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (Soundcloud.newTrackFromSearch.search_query === \"electronic music\" && (Soundcloud.newTrackFromSearch.Tags.includes(\"house\") || Soundcloud.newTrackFromSearch.Tags.includes(\"techno\"))) {\n  Putio.newTransfer.setUrl(Soundcloud.newTrackFromSearch.TrackUrl);\n  Putio.newTransfer.setFolderId(12345);\n} else {\n  Putio.newTransfer.skip(\"Does not match the search query or tags.\");\n}", "intent": "When a new track is uploaded to SoundCloud with the search query \"electronic music\" and has tags including \"house\" or \"techno\", download the track from the URL provided in the track's SoundCloud page to the put.io folder with ID 12345."}
{"original_description": "Select a time during the day to remove the currently running event on the selected thermostat provided the event is not a mandatory demand response event.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.resume_program", "Filter code method": "Ecobee.resumeProgram.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.resume_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"5:00 PM\";\nif (currentTime === targetTime) {\n  Ecobee.resumeProgram.setThermostat(\"Living Room Thermostat\");\n  if (!Ecobee.isMandatoryDemandResponseEvent()) {\n    Ecobee.resumeProgram.skip(\"Removing currently running event on Living Room Thermostat at 5:00 PM.\");\n  }\n}", "intent": "Remove the currently running event on the Living Room Thermostat at 5:00 PM every day, provided the event is not a mandatory demand response event."}
{"original_description": "Activate any Automate scene at sunset to close shades.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  Automateshades.activateScene.setSceneID(\"Evening Mode\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not above 18°C or condition is not Sunny.\");\n}", "intent": "Activate the \"Evening Mode\" scene on Automate Shades at sunset, when the temperature is above 18°C and the condition is Sunny, to close all shades in the living room."}
{"original_description": "Activate any Automate scene at sunrise to open shades. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Automateshades.activateScene.setSceneID(\"Morning Sunrise\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not above 18°C or condition is not Sunny.\");\n}", "intent": "Activate the 'Morning Sunrise' scene in Automate Shades at sunrise when the temperature is above 18°C and the condition is Sunny, to open the shades."}
{"original_description": "Activates an Automate scene to close your shades on a hot day (exterior temperature threshold can be configured). ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 85) {\n  Automateshades.activateScene.setSceneID(\"Close Shades\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not above 85 degrees Fahrenheit.\");\n}", "intent": "Activate the 'Close Shades' scene on Automate Shades when the temperature rises above 85 degrees Fahrenheit in New York City, as reported by Weather Underground, to keep the room cool on a hot day."}
{"original_description": "When the current UV index raises above a specified threshold, activate an Automate Shades scene to close your shades.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 8) {\n  Automateshades.activateScene.setSceneID(\"Close Shades\");\n} else {\n  Automateshades.activateScene.skip(\"UV index is not above 8.\");\n}", "intent": "When the current UV index rises above 8 at your home location, activate the \"Close Shades\" scene on Automate Shades."}
{"original_description": "Protect your privacy by lowering your shades when the sun goes down.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "SOMA Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "soma.set_shade_position", "Filter code method": "Soma.setShadePosition.skip(string?: reason)", "Runtime method": "runAction(\"soma.set_shade_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Helper text": "0 is open, 100 is closed", "Slug": "position", "Required": "true", "Can have default value": "true", "Filter code method": "Soma.setShadePosition.setPosition(string: position)"}}], "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar tempFahrenheit = Weather.sunSets.TempFahrenheit;\nif (sunsetHour >= 16 && sunsetHour <= 20 && tempFahrenheit < 70) {\n  Soma.setShadePosition.setPosition(\"100\");\n  Soma.setShadePosition.setDeviceName(\"Living Room Shades\");\n} else {\n  Soma.setShadePosition.skip(\"Conditions not met\");\n}", "intent": "When the sunset at my location is between 16:00 and 20:00 and the current temperature in degrees Fahrenheit is below 70, lower my \"Living Room Shades\" to position 100."}
{"original_description": "Activates an Automate Pulse room to close your shades on a hot day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_room", "Filter code method": "AutomateshadesV2.activateRoom.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Roomid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "roomID", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Movement position\nText input > Other", "description": "Text input > Other", "details": {"Label": "What percentage?", "Helper text": "Number only (0-100, where 0 is closed and 100 is open).", "Slug": "movement_position", "Required": "true", "Can have default value": "true", "Filter code method": "AutomateshadesV2.activateRoom.setMovement Position(string: movement_position)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 85 && \n    Weather.currentTemperatureRisesAbove.Location === \"New York\" && \n    Weather.currentTemperatureRisesAbove.Condition === \"Sunny\") {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"50\");\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Temperature or location conditions not met.\");\n}", "intent": "When the temperature rises above 85°F in New York, activate the Living Room shades to close at 50% during sunny weather conditions."}
{"original_description": "Activates an Automate scene to close your shades on a hot day (exterior temperature threshold can be configured). ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 82 && Weather.currentTemperatureRisesAbove.Condition === \"Sunny\") {\n  AutomateshadesV2.activateScene.setSceneID(\"Close Shades\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Temperature is not above 82°F or condition is not Sunny.\");\n}", "intent": "When the temperature rises above 82°F (28°C) in New York, and the current weather condition is Sunny, activate the \"Close Shades\" scene on your Automate Shades system to close all shades."}
{"original_description": "Have your shades automatically roll up so that you can wake up with the sun.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "SOMA Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "soma.set_shade_position", "Filter code method": "Soma.setShadePosition.skip(string?: reason)", "Runtime method": "runAction(\"soma.set_shade_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Helper text": "0 is open, 100 is closed", "Slug": "position", "Required": "true", "Can have default value": "true", "Filter code method": "Soma.setShadePosition.setPosition(string: position)"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && \n    Weather.sunRises.Condition === \"Sunny\" && \n    Weather.sunRises.TempFahrenheit === \"64\" && \n    location === \"New York\") {\n  Soma.setShadePosition.setPosition(\"0\");\n} else {\n  Soma.setShadePosition.skip(\"Conditions not met to roll up shades.\");\n}", "intent": "When the sunrise is at 6:00 AM in New York and the current weather condition is Sunny with a temperature of 64°F, automatically roll up the shades of the device named \"Living Room Shades\" to 0% closure so that you can wake up with the sun."}
{"original_description": "Use SmartThings presence detection to automatically open your Somfy-powered shades when you arrive home.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  SomfyMylink.move.setCommand(\"Open\");\n  SomfyMylink.move.setTarget(\"Living Room shades\");\n}", "intent": "When the Bedroom sensor detects your presence and you arrive home at any time, automatically open the Living Room shades using the Somfy myLink \"Open\" command."}
{"original_description": "Use SmartThings presence detection to close your Somfy-powered shades when you're away from home.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\" && SmartthingsV2.newPresentSmartthings.ArrivedAt.includes(\"left\")) {\n  SomfyMylink.move.setCommand(\"Close\");\n  SomfyMylink.move.setTarget(\"Living Room shades\");\n} else {\n  SomfyMylink.move.skip(\"Condition not met\");\n}", "intent": "When the Bedroom sensor detects you've left home, close the Living Room shades using Somfy myLink with the \"Close\" command."}
{"original_description": "When the current UV index raises above a specified threshold, activate an Automate Shades scene to close your shades.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 8) {\n  AutomateshadesV2.activateScene.setSceneID(\"Close All Shades\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"UV index is not above 8.\");\n}", "intent": "When the UV index at my location rises above 8, activate the \"Close All Shades\" scene on Automate Shades to close all shades."}
{"original_description": "Adjust multiple shades at a set time each day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Link Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkShades.set_percent", "Filter code method": "LinkShades.setPercent.skip(string?: reason)", "Runtime method": "runAction(\"LinkShades.set_percent\", {})"}, "action_details": [{"section": "Action fields", "title": "Which shade\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shade?", "Slug": "which_shade", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Percent\nDropdown list", "description": "Dropdown list", "details": {"Label": "Percent", "Helper text": "100% is fully open. 0% is fully closed.", "Slug": "percent", "Required": "true", "Can have default value": "true", "Filter code method": "LinkShades.setPercent.setPercent(string: percent)"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:30\";\nif (time === targetTime) {\n  LinkShades.setPercent.setPercent(\"50\");\n  LinkShades.setPercent.skip(\"Adjusted shades to 50% at \" + targetTime);\n} else {\n  LinkShades.setPercent.skip(\"Not adjustment time: \" + time + \". Expected \" + targetTime);\n}", "intent": "Adjust the living room shade and the bedroom shade to 50% at 07:30 every day."}
{"original_description": "Don't let the sun heat up your room. Close the shades automatically when the forecast says the UV index is going to be over 2.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SOMA Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "soma.set_shade_position", "Filter code method": "Soma.setShadePosition.skip(string?: reason)", "Runtime method": "runAction(\"soma.set_shade_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Helper text": "0 is open, 100 is closed", "Slug": "position", "Required": "true", "Can have default value": "true", "Filter code method": "Soma.setShadePosition.setPosition(string: position)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar uvIndex = Weather.currentUvIndexRisesAbove.UvIndex;\nvar location = \"Home\";\nvar deviceName = \"Living Room Shades\";\n\nif (location === \"Home\" && uvIndex > 2 && hour >= 7 && hour <= 19) {\n  Soma.setShadePosition.setPosition(\"100\");\n} else {\n  Soma.setShadePosition.skip(\"UV index is not above 2 or outside of active hours.\");\n}", "intent": "Close the \"Living Room Shades\" in the SOMA Smart Home system to position 100 when the Weather Underground forecast indicates the UV index at the location of \"Home\" is going to rise above 2, ensuring the room remains cool between 07:00 and 19:00."}
{"original_description": "Press the button widget to activate an Automate shade scene and a Philips Hue light scene.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Automateshades.activateScene.setSceneID(\"Morning Sunrise\");\n  PhilipsHue.activateScene.setSceneID(\"Warm White\");\n} else {\n  Automateshades.activateScene.skip(\"Location does not match.\");\n  PhilipsHue.activateScene.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, activate the \"Morning Sunrise\" scene on Automate Shades and the \"Warm White\" scene on Philips Hue lights."}
{"original_description": "Activate any Automate Shade scene at sunset to close shades.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  AutomateshadesV2.activateScene.setsceneID(\"Evening Shades\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Temperature or condition does not match.\");\n}", "intent": "Activate the 'Evening Shades' scene in Automate Shades V2 at sunset, when the current temperature is 72 degrees Fahrenheit and the condition is Sunny, to close all shades in the living room and kitchen areas."}
{"original_description": "Activate an Automate Scenes at sunrise to open the shades. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && parseFloat(Weather.sunRises.TempCelsius) > 18) {\n  AutomateshadesV2.activateScene.setSceneID(\"Morning Sunrise\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Conditions not met: either not sunny or temperature below 18°C.\");\n}", "intent": "Activate the 'Morning Sunrise' scene on Automate Shades V2 at sunrise, when the current weather condition is Sunny and the temperature is above 18°C, to open the shades in the living room."}
{"original_description": "Close an Automate Shades Device when the wind speed is above a specified mph.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.move_tilt_shade", "Filter code method": "Automateshades.moveTiltShade.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.move_tilt_shade\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Device to lift", "Slug": "deviceID", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Movement position\nText input > Other", "description": "Text input > Other", "details": {"Label": "Movement Position", "Helper text": "Number only (0 is open, 100 is closed. Leave empty if not applicable.)", "Slug": "movement_position", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Tilt position\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tilt Position", "Helper text": "Number only (0 is down, 90 is open, 180 is up. Leave empty if not applicable.)", "Slug": "tilt_position", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 10 && Weather.windSpeedRisesAbove.WindDirection === \"North\" && Weather.windSpeedRisesAbove.location === \"Home\") {\n  Automateshades.moveTiltShade.setDeviceID(\"Living Room Shades\");\n  Automateshades.moveTiltShade.setMovementPosition(100);\n  Automateshades.moveTiltShade.skip();\n} else {\n  Automateshades.moveTiltShade.skip(\"Conditions not met to close the shades.\");\n}", "intent": "Close the \"Living Room Shades\" Automate Shades device when the wind speed rises above 10 mph at the location of \"Home\" with a wind direction of \"North\", using the Weather Underground weather data."}
{"original_description": "Let IFTTT automatically close your shade each day at the time you choose.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Link Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkShades.close", "Filter code method": "LinkShades.close.skip(string?: reason)", "Runtime method": "runAction(\"LinkShades.close\", {})"}, "action_details": [{"section": "Action fields", "title": "Which shade\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shade?", "Slug": "which_shade", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar desiredTime = \"7:00 PM\";\nif (checkTime !== desiredTime) {\n  LinkShades.close.skip(\"Not the desired time to close the shade.\");\n}", "intent": "Close the living room shade every day at 7:00 PM."}
{"original_description": "When a SmartThing device detects temperatures above the threshold, run the Automate Scene of your choice.  ", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.temperature_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Temperature value", "Helper text": "Temperature in threshold as a number", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature units", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nThe temperature measured by the sensor in Fahrenheit.", "description": "The temperature measured by the sensor in Fahrenheit.", "details": {"Slug": "TemperatureFahrenheit", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit", "Type": "String", "Example": "74"}}, {"section": "Ingredients", "title": "Temperature celsius\nThe temperature measured by the sensor in Celsius.", "description": "The temperature measured by the sensor in Celsius.", "details": {"Slug": "TemperatureCelsius", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureCelsius", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Threshold\nThe temperature threshold set in the recipe.", "description": "The temperature threshold set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.Threshold", "Type": "String", "Example": "75"}}, {"section": "Ingredients", "title": "Threshold units\nThe temperature threshold units (C or F).", "description": "The temperature threshold units (C or F).", "details": {"Slug": "ThresholdUnits", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.ThresholdUnits", "Type": "String", "Example": "F"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the temperature.", "description": "The date and time the sensor measured the temperature.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName !== \"Bedroom sensor\") {\n  AutomateshadesV2.activateScene.skip(\"Device is not Bedroom sensor\");\n} else if (SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit <= 78) {\n  AutomateshadesV2.activateScene.skip(\"Temperature is not above 78°F\");\n} else {\n  var sceneID = \"Good Morning\";\n  AutomateshadesV2.activateScene.setsceneID(sceneID);\n}", "intent": "When the Bedroom sensor detects a temperature above 78°F, run the Good Morning scene on Automate Shades V2."}
{"original_description": "Allow SmartThings to open your Somfy-powered shades when light levels get too low.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.brightness_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness value", "Helper text": "In lux (0-1000)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Brightness\nThe brightness (in lux) measured by the sensor.", "description": "The brightness (in lux) measured by the sensor.", "details": {"Slug": "Brightness", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Brightness", "Type": "String", "Example": "751"}}, {"section": "Ingredients", "title": "Threshold\nThe brightness threshold (in lux) set in the recipe.", "description": "The brightness threshold (in lux) set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Threshold", "Type": "String", "Example": "750"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the brightness.", "description": "The date and time the sensor measured the brightness.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Workshop light sensor"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.Brightness < 100 && SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Workshop light sensor\") {\n  SomfyMylink.move.setCommand(\"open\");\n  SomfyMylink.move.setTarget(\"Living Room shades\");\n} else {\n  SomfyMylink.move.skip(\"Brightness is not below 100 lux or device is not Workshop light sensor.\");\n}", "intent": "When the brightness measured by the Workshop light sensor drops below 100 lux, send a command to the Living Room shades to open via Somfy myLink."}
{"original_description": "If the UV index in your area exceeds 11, activate a selected Automate scene.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 11) {\n  AutomateshadesV2.activateScene.setSceneID(\"Sunset\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"UV index is not above 11.\");\n}", "intent": "When the UV index in New York exceeds 11, activate the \"Sunset\" scene on Automate Shades V2."}
{"original_description": "Lower your shades in a room when a WeMo light turns on.", "trigger_channel": "WeMo Lighting", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_lighting.capability_turnOn"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Wemo led name\nName of the WeMo Light.", "description": "Name of the WeMo Light.", "details": {"Slug": "device_name", "Filter code": "WemoLighting.capabilityTurnOn.WemoLEDName", "Type": "String", "Example": "Drawing room bulb"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoLighting.capabilityTurnOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_room", "Filter code method": "AutomateshadesV2.activateRoom.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Roomid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "roomID", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Movement position\nText input > Other", "description": "Text input > Other", "details": {"Label": "What percentage?", "Helper text": "Number only (0-100, where 0 is closed and 100 is open).", "Slug": "movement_position", "Required": "true", "Can have default value": "true", "Filter code method": "AutomateshadesV2.activateRoom.setMovement Position(string: movement_position)"}}], "filter_code": "if (WemoLighting.capabilityTurnOn.WemoLEDName === \"Drawing room bulb\") {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"20\");\n  AutomateshadesV2.activateRoom.skip();\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Not the Drawing room bulb.\");\n}", "intent": "When the Drawing room bulb WeMo light turns on, lower the shades in the Living Room to 20% openness."}
{"original_description": "Active an Automate Shade's Scene to raise your shades when a WeMo light turns off.", "trigger_channel": "WeMo Lighting", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_lighting.capability_turnOff"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Wemo led name\nPlease select a WeMo Light.", "description": "Please select a WeMo Light.", "details": {"Slug": "device_name", "Filter code": "WemoLighting.capabilityTurnOff.WemoLEDName", "Type": "String", "Example": "Drawing room bulb."}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoLighting.capabilityTurnOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (WemoLighting.capabilityTurnOff.WemoLEDName === \"Living Room Lamp\" && hour >= 7 && hour < 9) {\n  Automateshades.activateScene.setSceneID(\"Morning Sunrise\");\n} else {\n  Automateshades.activateScene.skip(\"Condition not met.\");\n}", "intent": "Activate the 'Morning Sunrise' scene on Automate Shades to raise the shades when the 'Living Room Lamp' WeMo light turns off between 07:00 and 09:00."}
{"original_description": "Allow SmartThings to close your Somfy-powered shades when it's too bright.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.brightness_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness value", "Helper text": "In lux (0-1000)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Brightness\nThe brightness (in lux) measured by the sensor.", "description": "The brightness (in lux) measured by the sensor.", "details": {"Slug": "Brightness", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Brightness", "Type": "String", "Example": "751"}}, {"section": "Ingredients", "title": "Threshold\nThe brightness threshold (in lux) set in the recipe.", "description": "The brightness threshold (in lux) set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Threshold", "Type": "String", "Example": "750"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the brightness.", "description": "The date and time the sensor measured the brightness.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Workshop light sensor"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Workshop light sensor\" && SmartthingsV2.brightnessRisesAboveSmartthings.Brightness > 800) {\n  SomfyMylink.move.setCommand(\"close\");\n  SomfyMylink.move.setTarget(\"Living Room Shades\");\n} else {\n  SomfyMylink.move.skip(\"Conditions not met to close the shades.\");\n}", "intent": "Close the \"Living Room Shades\" Somfy-powered shades when the brightness measured by the \"Workshop light sensor\" device rises above 800 lux."}
{"original_description": "Move or tilt your shades in a room when a WeMo light has dimmed to a specific level.", "trigger_channel": "WeMo Lighting", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_lighting.capability_brightness_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dimmed level?", "Slug": "subType", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wemo led device\nName of the WeMo Light.", "description": "Name of the WeMo Light.", "details": {"Slug": "device_name", "Filter code": "WemoLighting.capabilityBrightnessChange.WemoLEDDevice", "Type": "String", "Example": "Drawing room bulb."}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoLighting.capabilityBrightnessChange.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.move_tilt_shade", "Filter code method": "AutomateshadesV2.moveTiltShade.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.move_tilt_shade\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shade?", "Helper text": "Device to lift", "Slug": "deviceID", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Movement position\nText input > Other", "description": "Text input > Other", "details": {"Label": "What percent?", "Helper text": "Number only (0-100, where 0 is closed and 100 is open). Leave empty if not applicable.", "Slug": "movement_position", "Required": "false", "Can have default value": "true", "Filter code method": "AutomateshadesV2.moveTiltShade.setMovement Position(string: movement_position)"}}, {"section": "Action fields", "title": "Tilt position\nText input > Other", "description": "Text input > Other", "details": {"Label": "How much tilt?", "Helper text": "Number only (0 is down, 90 is open, 180 is up). Leave empty if not applicable.", "Slug": "tilt_position", "Required": "false", "Can have default value": "true", "Filter code method": "AutomateshadesV2.moveTiltShade.setTilt Position(string: tilt_position)"}}], "filter_code": "if (WemoLighting.capabilityBrightnessChange.WemoLEDDevice === \"living room\" && \n    WemoLighting.capabilityBrightnessChange.macaddress === \"00:11:22:33:44:55\" && \n    WemoLighting.capabilityBrightnessChange.subType === \"20%\") {\n  AutomateshadesV2.moveTiltShade.setMovementPosition(\"50\");\n  AutomateshadesV2.moveTiltShade.setTiltPosition(\"45\");\n  AutomateshadesV2.moveTiltShade.skip();\n} else {\n  AutomateshadesV2.moveTiltShade.skip(\"Conditions not met.\");\n}", "intent": "When the WeMo light in the living room, with a macaddress of 00:11:22:33:44:55, has dimmed to 20%, move the shade with deviceid 1234567890 to 50% open and tilt it to 45 degrees."}
{"original_description": "Lower your Automate shades in a room when a WeMo light turns on.", "trigger_channel": "WeMo Lighting", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_lighting.capability_turnOn"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Wemo led name\nName of the WeMo Light.", "description": "Name of the WeMo Light.", "details": {"Slug": "device_name", "Filter code": "WemoLighting.capabilityTurnOn.WemoLEDName", "Type": "String", "Example": "Drawing room bulb"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoLighting.capabilityTurnOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_room", "Filter code method": "AutomateshadesV2.activateRoom.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Roomid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "roomID", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Movement position\nText input > Other", "description": "Text input > Other", "details": {"Label": "What percentage?", "Helper text": "Number only (0-100, where 0 is closed and 100 is open).", "Slug": "movement_position", "Required": "true", "Can have default value": "true", "Filter code method": "AutomateshadesV2.activateRoom.setMovement Position(string: movement_position)"}}], "filter_code": "if (WemoLighting.capabilityTurnOn.WemoLEDName === \"Living Room Lamp\") {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"20\");\n  AutomateshadesV2.activateRoom({roomID: \"Kitchen\"});\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Wrong WeMo light\");\n}", "intent": "When the WeMo light named \"Living Room Lamp\" turns on, lower the Automate shades in the room with ID \"Kitchen\" to 20% openness."}
{"original_description": "Close your shades when it gets too dark outside. Do your neighbors a favor and close your shades before undressing in a well lit room when it's dark.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.brightness_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness value", "Helper text": "In lux (0-1000)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Brightness\nThe brightness (in lux) measured by the sensor.", "description": "The brightness (in lux) measured by the sensor.", "details": {"Slug": "Brightness", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Brightness", "Type": "String", "Example": "751"}}, {"section": "Ingredients", "title": "Threshold\nThe brightness threshold (in lux) set in the recipe.", "description": "The brightness threshold (in lux) set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Threshold", "Type": "String", "Example": "750"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the brightness.", "description": "The date and time the sensor measured the brightness.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Workshop light sensor"}}], "action_channel": "SOMA Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "soma.set_shade_position", "Filter code method": "Soma.setShadePosition.skip(string?: reason)", "Runtime method": "runAction(\"soma.set_shade_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Helper text": "0 is open, 100 is closed", "Slug": "position", "Required": "true", "Can have default value": "true", "Filter code method": "Soma.setShadePosition.setPosition(string: position)"}}], "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.Brightness < 50 && SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Workshop light sensor\") {\n  if (Soma.setShadePosition.setPosition !== \"100\" || Soma.setShadePosition.device_name !== \"Living Room Window\") {\n    Soma.setShadePosition.setPosition(\"100\");\n    Soma.setShadePosition.device_name = \"Living Room Window\";\n  }\n} else {\n  Soma.setShadePosition.skip(\"Brightness is above 50 lux or device name does not match.\");\n}", "intent": "Close the shades of your \"Living Room Window\" to position 100 when the brightness measured by the \"Workshop light sensor\" drops below 50 lux."}
{"original_description": "Activate an Automate scene when a SmartThings device detects that brightness rises above a threshold", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.brightness_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness value", "Helper text": "In lux (0-1000)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Brightness\nThe brightness (in lux) measured by the sensor.", "description": "The brightness (in lux) measured by the sensor.", "details": {"Slug": "Brightness", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Brightness", "Type": "String", "Example": "751"}}, {"section": "Ingredients", "title": "Threshold\nThe brightness threshold (in lux) set in the recipe.", "description": "The brightness threshold (in lux) set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.Threshold", "Type": "String", "Example": "750"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the brightness.", "description": "The date and time the sensor measured the brightness.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Workshop light sensor"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_scene", "Filter code method": "AutomateshadesV2.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Living Room Sensor\" && parseInt(SmartthingsV2.brightnessRisesAboveSmartthings.Brightness) > 800) {\n  AutomateshadesV2.activateScene.setSceneID(\"Morning Scene\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Conditions not met to activate the Morning Scene.\");\n}", "intent": "Activate the 'Morning Scene' in Automate when the brightness measured by the 'Living Room Sensor' device in SmartThings rises above 800 lux."}
{"original_description": "Active an Automate Shade's Scene to lower your shades when a WeMo light turns on.", "trigger_channel": "WeMo Lighting", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_lighting.capability_turnOn"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Wemo led name\nName of the WeMo Light.", "description": "Name of the WeMo Light.", "details": {"Slug": "device_name", "Filter code": "WemoLighting.capabilityTurnOn.WemoLEDName", "Type": "String", "Example": "Drawing room bulb"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoLighting.capabilityTurnOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WemoLighting.capabilityTurnOn.WemoLEDName === \"Drawing room bulb\") {\n  Automateshades.activateScene.setSceneID(\"Evening Scene\");\n} else {\n  Automateshades.activateScene.skip(\"Not the Drawing room bulb.\");\n}", "intent": "When the Drawing room bulb WeMo light turns on, activate the \"Evening Scene\" Automate Shade's scene to lower your shades."}
{"original_description": "Once a SafeTrek alarm was fired, call a specified phone number and play a message. No emergency numbers can be called through woopla phone calls. ", "trigger_channel": "Noonlight", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "safetrek.alert_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Safetrek.alertTriggered.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nLatitude that alarm happened", "description": "Latitude that alarm happened", "details": {"Slug": "latitude", "Filter code": "Safetrek.alertTriggered.Latitude", "Type": "String", "Example": "38.6532135"}}, {"section": "Ingredients", "title": "Longitude\nLongitude that alarm happened", "description": "Longitude that alarm happened", "details": {"Slug": "longitude", "Filter code": "Safetrek.alertTriggered.Longitude", "Type": "String", "Example": "-90.313673"}}, {"section": "Ingredients", "title": "Location map url\nUrl to where the alarm occurred", "description": "Url to where the alarm occurred", "details": {"Slug": "location_map_url", "Filter code": "Safetrek.alertTriggered.LocationMapUrl", "Type": "Web URL", "Example": "https://www.google.com/maps/place/St.+Louis,+MO/@38.6532135,-90.313673,12z"}}, {"section": "Ingredients", "title": "Name\nThe name of the person that triggered the alarm", "description": "The name of the person that triggered the alarm", "details": {"Slug": "name", "Filter code": "Safetrek.alertTriggered.Name", "Type": "String", "Example": "Jane Doe"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call_any", "Filter code method": "Woopla.ttsCallAny.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call_any\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setLanguage(string: language)"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone Number", "Helper text": "The phone number to call. International dialing format. Prefix with +. No zeros. Example: +4917098765432", "Slug": "phone_number", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setPhone Number(string: phone_number)"}}], "filter_code": "Woopla.ttsCallAny.setPhone_number(\"+14255551234\");\nWoopla.ttsCallAny.setLanguage(\"English\");\nWoopla.ttsCallAny.setTts(\"Hello, this is an emergency alert from \" + Safetrek.alertTriggered.Name + \". Please check the location \" + Safetrek.alertTriggered.LocationMapUrl + \" for more information.\");", "intent": "When a SafeTrek alarm is triggered at a location like 38.6532135, -90.313673, call the phone number +14255551234 and play a message in English saying \"Hello, this is an emergency alert from Jane Doe. Please check the location https://www.google.com/maps/place/St.+Louis,+MO/@38.6532135,-90.313673,12z for more information.\""}
{"original_description": "When the forecast calls for rain in your area you'll receive a push notification. Remember to bring an umbrella! Keep in mind this Applet requires the IFTTT app.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"18\" && \n    Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"10\" && \n    Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Cloudy\") {\n  IfNotifications.sendNotification.setMessage(\"Remember to bring an umbrella tomorrow, as there's a chance of rain in your area, with temperatures ranging from 10°C to 18°C.\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions do not meet the criteria for sending a notification.\");\n}", "intent": "When the weather forecast for your location calls for rain tomorrow, with a high temperature of 18°C and a low of 10°C, and the condition is expected to be cloudy, send a push notification with the message \"Remember to bring an umbrella tomorrow, as there's a chance of rain in your area, with temperatures ranging from 10°C to 18°C.\""}
{"original_description": "Fingers crossed for a snow day...", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Snow\" \n    && parseFloat(Weather.tomorrowsForecastCallsFor.HighTempFahrenheit) < 32 \n    && parseFloat(Weather.tomorrowsForecastCallsFor.LowTempFahrenheit) > 25) {\n  IfNotifications.sendNotification.setMessage(\"Snow day ahead! Check the 5-day forecast here: \" + Weather.tomorrowsForecastCallsFor.ForecastUrl);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions do not meet snow day criteria.\");\n}", "intent": "When the weather forecast for New York City calls for snow tomorrow with a high temperature below 32°F and a low temperature above 25°F, send a notification with the message \"Snow day ahead! Check the 5-day forecast here: http://www.weather.com/weather/5-day/GMXX1273\" to my phone."}
{"original_description": "Don't get caught in the rain without proper attire or an umbrella!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" && \n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"50\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Bring umbrella and wear waterproof shoes to work at 7:00 AM\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Tomorrow's forecast does not call for rain with specified temperatures.\");\n}", "intent": "If tomorrow's forecast in New York calls for rain with a high temperature of 60°F and a low of 50°F, add an event to my personal Google Calendar saying \"Bring umbrella and wear waterproof shoes to work\" at 7:00 AM."}
{"original_description": "You can change the forecast condition below to snow, clear, or cloudy if you would rather. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Snow\" \n    && parseFloat(Weather.tomorrowsForecastCallsFor.HighTempFahrenheit) > 32 \n    && parseFloat(Weather.tomorrowsForecastCallsFor.LowTempFahrenheit) < 25) {\n  VoipCalls.callMyDevice.setMessage(\"Tomorrow will be snowy in New York, with a high of \" \n                                    + Weather.tomorrowsForecastCallsFor.HighTempFahrenheit \n                                    + \"°F and a low of \" \n                                    + Weather.tomorrowsForecastCallsFor.LowTempFahrenheit \n                                    + \"°F, check the 5-day forecast at \" \n                                    + Weather.tomorrowsForecastCallsFor.ForecastUrl \n                                    + \" for more details.\");\n} else {\n  VoipCalls.callMyDevice.skip(\"Tomorrow's forecast does not match the specified conditions.\");\n}", "intent": "When tomorrow's forecast in New York calls for snow with a high temperature above 32°F and a low temperature below 25°F, make a VoIP call to my device with the message \"Tomorrow will be snowy in New York, with a high of 35°F and a low of 20°F, check the 5-day forecast at http://www.weather.com/weather/5-day/GMXX1273 for more details.\""}
{"original_description": "Throw your sneakers in your bag the night before and you'll be ready to take that midday walk, afternoon run, or any other activity that gets you outside. No excuses!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Sunny\" && \n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"75\" && \n    Weather.tomorrowsForecastCallsFor.Location === \"New York City\") {\n  IfNotifications.sendNotification.setMessage(\"Don't forget your sneakers, perfect walking day ahead! Check the 5-day forecast: \" + Weather.tomorrowsForecastCallsFor.ForecastUrl);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met for notification.\");\n}", "intent": "When tomorrow's forecast calls for sunny weather with a high temperature of 75°F (24°C) in New York City, send a notification to my phone with the message \"Don't forget your sneakers, perfect walking day ahead!\" including a link to the five-day forecast at http://www.weather.com/weather/5-day/GMXX1273."}
{"original_description": "Every day at the time of your choosing (defaults to 6 PM), the weather report for the tomorrow will be added to your iOS Calendar.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (hour === 18 && minute === 0) {\n  IosCalendar.createCalendarEvent.setStart_date(Weather.tomorrowsWeatherAtTime.TomorrowsDate);\n  IosCalendar.createCalendarEvent.setTitle(\"Tomorrow's Weather\");\n  IosCalendar.createCalendarEvent.setDuration(\"all-day\");\n  var notes = \"Tomorrow's forecast: \" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \". High of \" + Weather.tomorrowsWeatherAtTime.HighTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"°C), low of \" + Weather.tomorrowsWeatherAtTime.LowTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"°C). Detailed forecast: \" + Weather.tomorrowsWeatherAtTime.ForecastUrl;\n  IosCalendar.createCalendarEvent.setNotes(notes);\n  IosCalendar.createCalendarEvent.setUrl(Weather.tomorrowsWeatherAtTime.ForecastUrl);\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Not 6:00 PM\");\n}", "intent": "Every day at 6:00 PM, add tomorrow's weather forecast to my iOS Calendar as an all-day event with the title \"Tomorrow's Weather\", including notes about the expected high and low temperatures in both Fahrenheit and Celsius, along with a link to the detailed forecast."}
{"original_description": "When tomorrow's forecast is rain, a task will be added to Remember The Milk. You can set the time that the task is due.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") {\n  var taskName = \"Bring umbrella to work\";\n  var dueTime = \"08:00\";\n  Rememberthemilk.tasksAdd.setTask(taskName + \" due by \" + dueTime);\n}", "intent": "When tomorrow's forecast in New York calls for rain, add a task named \"Bring umbrella to work\" due by 08:00 to Remember The Milk."}
{"original_description": "If Weather Underground reports rain condition tomorrow, do not water my yard for today and tomorrow, or specified number of days. \n", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" \n    && Weather.tomorrowsForecastCallsFor.Location === \"New York City\" \n    && Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"72\" \n    && Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"60\") {\n  Netro.water.setZone(\"1\");\n  Netro.water.skip(\"rain expected\");\n  setTimeout(function() {\n    Netro.water.setZone(\"2\");\n    Netro.water.skip(\"rain expected\");\n  }, 86400000); // 24 hours\n  setTimeout(function() {\n    Netro.water.setZone(\"1\");\n    Netro.water.skip(\"rain expected\");\n  }, 172800000); // 48 hours\n  setTimeout(function() {\n    Netro.water.setZone(\"2\");\n    Netro.water.skip(\"rain expected\");\n  }, 172800000); // 48 hours\n}", "intent": "If Weather Underground reports rain condition tomorrow in New York City, with a high temperature of 72°F and a low of 60°F, do not water my backyard zone 1 and front yard zone 2 for today and the next 2 days using my Netro device named \"Home Lawn\", skipping watering with the reason \"rain expected\"."}
{"original_description": "Set my Moonside lights to raining light scene when weather forecasts tomorrow rains", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Moonside Light", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moonside.set_raining_scene", "Filter code method": "Moonside.setRainingScene.skip(string?: reason)", "Runtime method": "runAction(\"moonside.set_raining_scene\", {})"}, "action_details": [], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") {\n  Moonside.setRainingScene();\n} else {\n  Moonside.setRainingScene.skip(\"Tomorrow's forecast does not call for rain.\");\n}", "intent": "Set my Moonside lights to the raining light scene when tomorrow's weather forecast from Weather Underground calls for rain in New York City."}
{"original_description": "Get tomorrow's weather report for your local area at the time of your choosing. This Applet reports the weather in Celsius.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Weather.tomorrowsWeatherAtTime.Location === \"New York City\" && Weather.tomorrowsWeatherAtTime.Time === \"07:00\") {\n  var message = \"Tomorrow's weather in New York City: \" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \", High: \" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"°C, Low: \" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"°C\";\n  IfNotifications.sendNotification.setMessage(message);\n  IfNotifications.sendNotification.setAttachment(Weather.tomorrowsWeatherAtTime.ConditionImageURL);\n} else {\n  IfNotifications.sendNotification.skip(\"Location or time does not match.\");\n}", "intent": "Get tomorrow's weather report for New York City at 07:00, including the high and low temperatures in Celsius, and receive a notification with the forecast details and an image of the expected weather condition."}
{"original_description": "Send a rich notification if tomorrow's low drops below X degrees", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_low_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsLowDropsBelow.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsLowDropsBelow.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsLowDropsBelow.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsLowDropsBelow.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsLowDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsLowDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "if (Weather.tomorrowsLowDropsBelow.LowTempCelsius < 5) {\n  IfNotifications.sendRichNotification\n    .setTitle(\"Low Temperature Alert\")\n    .setMessage(`Tomorrow's low temperature in New York is expected to drop below 5°C`)\n    .setLinkUrl(\"http://www.weather.com/weather/5-day/GMXX1273\")\n    .setImageUrl(\"http://www.ifttt.com/weather/sunny.png\");\n} else {\n  IfNotifications.sendRichNotification.skip(\"Tomorrow's low temperature is not below 5°C\");\n}", "intent": "Send a rich notification with the title \"Low Temperature Alert\" and the message \"Tomorrow's low temperature in New York is expected to drop below 5°C\" if tomorrow's low temperature in degrees Celsius drops below 5°C in New York, including a link to the five-day forecast at http://www.weather.com/weather/5-day/GMXX1273 and an image of the sunny weather condition at http://www.ifttt.com/weather/sunny.png."}
{"original_description": "Adds a task to your Toodledo to-do list if it is going to rain tomorrow.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Toodledo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "toodledo.add-task", "Filter code method": "Toodledo.addTask.skip(string?: reason)", "Runtime method": "runAction(\"toodledo.add-task\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Toodledo.addTask.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Toodledo.addTask.setNote(string: note)"}}, {"section": "Action fields", "title": "Tag\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tag", "Required": "false", "Can have default value": "true", "Filter code method": "Toodledo.addTask.setTag(string: tag)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Priority", "Slug": "priority", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Add to folder", "Slug": "folder", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" && \n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Toodledo.addTask.setTitle(\"Rain Tomorrow\");\n  Toodledo.addTask.setNote(\"Remember to carry an umbrella\");\n  Toodledo.addTask.setTag(\"weather\");\n  Toodledo.addTask.setFolder(\"Personal\");\n  Toodledo.addTask.setPriority(\"High\");\n} else {\n  Toodledo.addTask.skip(\"Conditions do not meet the criteria.\");\n}", "intent": "Add a task titled \"Rain Tomorrow\" with note \"Remember to carry an umbrella\" and tag \"weather\" to my Toodledo to-do list in the \"Personal\" folder with high priority if tomorrow's forecast in New York calls for rain, with a high temperature of 60°F and a low of 45°F."}
{"original_description": "Every time there are changes in tomorrow’s forecasted weather condition with snow, a Signal will be sent to your Das Keyboard 5Q.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.Condition === \"Snow\" && Weather.currentConditionIs.Location === \"New York\") {\n  Daskeyboardq.signals.setName(\"Snow Alert\");\n  Daskeyboardq.signals.setZone(\"Numeric Keypad\");\n  Daskeyboardq.signals.setColor(\"Blue\");\n  Daskeyboardq.signals.setMessage(\"Snow expected tomorrow\");\n} else {\n  Daskeyboardq.signals.skip(\"Tomorrow's forecast does not indicate snow in New York.\");\n}", "intent": "When the weather forecast for tomorrow in New York indicates snow, send a Signal to the Das Keyboard 5Q device named \"Snow Alert\" with the zone set to the numeric keypad, colored in blue, and displaying the message \"Snow expected tomorrow\"."}
{"original_description": "Every time there are changes in tomorrow’s forecasted weather condition, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" && \n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Daskeyboardq.signals.setName(\"Weather Alert\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"Rain Tomorrow\");\n  Daskeyboardq.signals.setEffect(\"breathing\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met.\");\n}", "intent": "When the forecast for New York City indicates that tomorrow's weather will be rainy with a high temperature of 60°F and a low of 45°F, send a Signal to the Das Keyboard Q device named \"Weather Alert\" with a red color on the center zone, displaying the message \"Rain Tomorrow\" with a breathing effect."}
{"original_description": "Send a rich notification with tomorrow's weather report", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "IfNotifications.sendRichNotification\n  .setMessage(\"Tomorrow's weather in New York City: \" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \", High of \" + Weather.tomorrowsWeatherAtTime.HighTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"°C), Low of \" + Weather.tomorrowsWeatherAtTime.LowTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"°C)\")\n  .setTitle(\"Tomorrow's Weather Forecast\")\n  .setLinkUrl(Weather.tomorrowsWeatherAtTime.ForecastUrl)\n  .setImageUrl(Weather.tomorrowsWeatherAtTime.ConditionImageURL);", "intent": "Send a rich notification with tomorrow's weather report for New York City at 7:00 AM, including the forecast URL http://www.weather.com/weather/5-day/GMXX1273, tomorrow's condition which is expected to be Sunny, the condition image URL http://www.ifttt.com/weather/sunny.png, high temperature of 75°F (24°C), and low temperature of 60°F (16°C), with a link to the full forecast and an image of the weather condition."}
{"original_description": "Send tomorrow's forecast to Teams at 4PM.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour == 16) {\n  var messageSubject = \"Tomorrow's Weather Forecast\";\n  var tomorrowsCondition = Weather.tomorrowsWeatherAtTime.TomorrowsCondition;\n  var highTempFahrenheit = Weather.tomorrowsWeatherAtTime.HighTempFahrenheit;\n  var highTempCelsius = Weather.tomorrowsWeatherAtTime.HighTempCelsius;\n  var lowTempFahrenheit = Weather.tomorrowsWeatherAtTime.LowTempFahrenheit;\n  var lowTempCelsius = Weather.tomorrowsWeatherAtTime.LowTempCelsius;\n  var messageBody = \"Tomorrow's weather will be \" + tomorrowsCondition + \" with a high of \" + highTempFahrenheit + \"°F (\" + highTempCelsius + \"°C) and a low of \" + lowTempFahrenheit + \"°F (\" + lowTempCelsius + \"°C).\";\n  var messageUrgency = \"Normal\";\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(messageSubject);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(messageUrgency);\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not 4:00 PM\");\n}", "intent": "Send a message to the #general channel in Microsoft Teams at 4:00 PM with the subject \"Tomorrow's Weather Forecast\" and the body \"Tomorrow's weather will be Sunny with a high of 72°F (18°C) and a low of 50°F (10°C).\", marked as Normal urgency, using the forecast from Weather Underground for the location of New York City."}
{"original_description": "If Weather Underground reports raining now, do not water my yard for today and tomorrow, or specified number of days. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.TempCelsius === \"18\") {\n  Netro.water.setZone(\"1\");\n  Netro.water.skip(\"Raining now, skipping watering for zone 1.\");\n  Netro.water.setZone(\"2\");\n  Netro.water.skip(\"Raining now, skipping watering for zone 2.\");\n}", "intent": "If Weather Underground reports that it is raining now at my location, with a current condition of \"Rain\" and a temperature of 18°C, then do not water my yard using the Netro device named \"Front Yard Sprinkler\" for the next 2 days, skipping watering for zones 1 and 2."}
{"original_description": "If Netatmo weather station reports rain amount exceeding 5mm (0.2inch), do not water my yard for today and tomorrow, or specified number of days.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-today-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainTodayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainTodayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainTodayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainTodayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Netatmo.rainTodayAmount.DeviceName === \"My Rain gauge\" && parseFloat(Netatmo.rainTodayAmount.MeasuredRainfallMM) > 5) {\n  Netro.water.setZone(\"1\");\n  Netro.water.skip(\"Rainfall exceeding 5mm, skipping watering for the next 2 days.\");\n}", "intent": "When the Netatmo weather station named \"My Rain gauge\" reports a rainfall amount exceeding 5mm, skip watering my yard's zone 1 for the next 2 days using my Netro device.", "filter_code_old": "if(parseFloat(Netatmo.rainTodayAmount.MeasuredRainfallMM)<5){\n  Netro.noWater.skip()\n}\n\n"}
{"original_description": "This applet will stop the irrigation scenario if tomorrow's forecast calls for rain", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Gewiss Smart Home IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gewiss_home.invoke_method_AlwaysOnBehaviour", "Filter code method": "GewissHome.invokeMethodAlwaysOnBehaviour.skip(string?: reason)", "Runtime method": "runAction(\"gewiss_home.invoke_method_AlwaysOnBehaviour\", {})"}, "action_details": [{"section": "Action fields", "title": "Method functional channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scenario would you like to execute in the smart home?", "Helper text": "Choose what you want this applet to do in your home", "Slug": "method_functional_channel", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" \n    && Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" \n    && Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"50\") {\n  GewissHome.invokeMethodAlwaysOnBehaviour.skip(\"Tomorrow's forecast in New York calls for rain with a high of 60°F and a low of 50°F, stopping irrigation scenario.\");\n}", "intent": "If tomorrow's forecast in New York calls for rain with a high temperature of 60°F and a low of 50°F, then stop the irrigation scenario in the backyard using the Gewiss Smart Home IoT system."}
{"original_description": "Every time your Fitbit syncs on a new day, the previous day's stats will be added to a new row in a Google Drive spreadsheet.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-daily-activity-summary"}, "trigger_details": [{"section": "Ingredients", "title": "Date\nThe day of activity", "description": "The day of activity", "details": {"Slug": "date", "Filter code": "Fitbit.newDailyActivitySummary.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Total steps\nNumber of steps taken", "description": "Number of steps taken", "details": {"Slug": "total_steps", "Filter code": "Fitbit.newDailyActivitySummary.TotalSteps", "Type": "String", "Example": "10123"}}, {"section": "Ingredients", "title": "Total floors climbed\nNumber of floors climbed", "description": "Number of floors climbed", "details": {"Slug": "total_floors_climbed", "Filter code": "Fitbit.newDailyActivitySummary.TotalFloorsClimbed", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Total calories burned\nNumber of calories burned from BMR and activity", "description": "Number of calories burned from BMR and activity", "details": {"Slug": "total_calories_burned", "Filter code": "Fitbit.newDailyActivitySummary.TotalCaloriesBurned", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Total elevation gained\nDistance climbed", "description": "Distance climbed", "details": {"Slug": "total_elevation_gained", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGained", "Type": "String", "Example": "200"}}, {"section": "Ingredients", "title": "Total elevation gained unit\nUnit for elevation gain based on your Fitbit preferences", "description": "Unit for elevation gain based on your Fitbit preferences", "details": {"Slug": "total_elevation_gained_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGainedUnit", "Type": "String", "Example": "meters"}}, {"section": "Ingredients", "title": "Total distance covered\nThe total amount of distance covered", "description": "The total amount of distance covered", "details": {"Slug": "total_distance_covered", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCovered", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Total distance covered unit\nUnit for distance covered based on your Fitbit preferences", "description": "Unit for distance covered based on your Fitbit preferences", "details": {"Slug": "total_distance_covered_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit", "Type": "String", "Example": "kilometers"}}, {"section": "Ingredients", "title": "Sedentary minutes\nMinutes in the day you weren't moving much", "description": "Minutes in the day you weren't moving much", "details": {"Slug": "sedentary_minutes", "Filter code": "Fitbit.newDailyActivitySummary.SedentaryMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Lightly active minutes\nMinutes in the day you were moving but not exerting much effort, such as walking", "description": "Minutes in the day you were moving but not exerting much effort, such as walking", "details": {"Slug": "lightly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.LightlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Fairly active minutes\nMinutes in the day you were moving enough to elevate your heart rate", "description": "Minutes in the day you were moving enough to elevate your heart rate", "details": {"Slug": "fairly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.FairlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Very active minutes\nMinutes in the day doing cardio workouts and high-intensity activities like jogging and running", "description": "Minutes in the day doing cardio workouts and high-intensity activities like jogging and running", "details": {"Slug": "very_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.VeryActiveMinutes", "Type": "String", "Example": "20"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Fitness Tracker\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"Fitness/2023\");\nvar formattedRow = Fitbit.newDailyActivitySummary.Date + \"|||\" + \n                   Fitbit.newDailyActivitySummary.TotalSteps + \"|||\" + \n                   Fitbit.newDailyActivitySummary.TotalFloorsClimbed + \"|||\" + \n                   Fitbit.newDailyActivitySummary.TotalCaloriesBurned + \"|||\" + \n                   Fitbit.newDailyActivitySummary.TotalElevationGained + \" \" + \n                   Fitbit.newDailyActivitySummary.TotalElevationGainedUnit + \"|||\" + \n                   Fitbit.newDailyActivitySummary.TotalDistanceCovered + \" \" + \n                   Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit + \"|||\" + \n                   Fitbit.newDailyActivitySummary.SedentaryMinutes + \"|||\" + \n                   Fitbit.newDailyActivitySummary.LightlyActiveMinutes + \"|||\" + \n                   Fitbit.newDailyActivitySummary.FairlyActiveMinutes + \"|||\" + \n                   Fitbit.newDailyActivitySummary.VeryActiveMinutes;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);", "intent": "Every time your Fitbit syncs on a new day, such as 2023-03-08, append a new row to the Google Sheets spreadsheet named \"Fitness Tracker\" with the previous day's stats, including total steps taken (e.g., 10500), total floors climbed (e.g., 12), total calories burned from BMR and activity (e.g., 2200), total elevation gained in meters (e.g., 250), total distance covered in kilometers (e.g., 6.5), sedentary minutes (e.g., 25), lightly active minutes (e.g., 30), fairly active minutes (e.g., 20), and very active minutes (e.g., 15), using the formatted row \"Date|||Total Steps|||Total Floors Climbed|||Total Calories Burned|||Total Elevation Gained|||Total Distance Covered|||Sedentary Minutes|||Lightly Active Minutes|||Fairly Active Minutes|||Very Active Minutes\" and placing the file in the Drive folder path \"Fitness/2023\"."}
{"original_description": "A new Day One journal entry will be created when your daily activity summary is available from Fitbit.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-daily-activity-summary"}, "trigger_details": [{"section": "Ingredients", "title": "Date\nThe day of activity", "description": "The day of activity", "details": {"Slug": "date", "Filter code": "Fitbit.newDailyActivitySummary.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Total steps\nNumber of steps taken", "description": "Number of steps taken", "details": {"Slug": "total_steps", "Filter code": "Fitbit.newDailyActivitySummary.TotalSteps", "Type": "String", "Example": "10123"}}, {"section": "Ingredients", "title": "Total floors climbed\nNumber of floors climbed", "description": "Number of floors climbed", "details": {"Slug": "total_floors_climbed", "Filter code": "Fitbit.newDailyActivitySummary.TotalFloorsClimbed", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Total calories burned\nNumber of calories burned from BMR and activity", "description": "Number of calories burned from BMR and activity", "details": {"Slug": "total_calories_burned", "Filter code": "Fitbit.newDailyActivitySummary.TotalCaloriesBurned", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Total elevation gained\nDistance climbed", "description": "Distance climbed", "details": {"Slug": "total_elevation_gained", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGained", "Type": "String", "Example": "200"}}, {"section": "Ingredients", "title": "Total elevation gained unit\nUnit for elevation gain based on your Fitbit preferences", "description": "Unit for elevation gain based on your Fitbit preferences", "details": {"Slug": "total_elevation_gained_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGainedUnit", "Type": "String", "Example": "meters"}}, {"section": "Ingredients", "title": "Total distance covered\nThe total amount of distance covered", "description": "The total amount of distance covered", "details": {"Slug": "total_distance_covered", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCovered", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Total distance covered unit\nUnit for distance covered based on your Fitbit preferences", "description": "Unit for distance covered based on your Fitbit preferences", "details": {"Slug": "total_distance_covered_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit", "Type": "String", "Example": "kilometers"}}, {"section": "Ingredients", "title": "Sedentary minutes\nMinutes in the day you weren't moving much", "description": "Minutes in the day you weren't moving much", "details": {"Slug": "sedentary_minutes", "Filter code": "Fitbit.newDailyActivitySummary.SedentaryMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Lightly active minutes\nMinutes in the day you were moving but not exerting much effort, such as walking", "description": "Minutes in the day you were moving but not exerting much effort, such as walking", "details": {"Slug": "lightly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.LightlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Fairly active minutes\nMinutes in the day you were moving enough to elevate your heart rate", "description": "Minutes in the day you were moving enough to elevate your heart rate", "details": {"Slug": "fairly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.FairlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Very active minutes\nMinutes in the day doing cardio workouts and high-intensity activities like jogging and running", "description": "Minutes in the day doing cardio workouts and high-intensity activities like jogging and running", "details": {"Slug": "very_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.VeryActiveMinutes", "Type": "String", "Example": "20"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "if (Fitbit.newDailyActivitySummary.TotalSteps >= 10000 && \n    parseFloat(Fitbit.newDailyActivitySummary.TotalDistanceCovered) > 5 && \n    Fitbit.newDailyActivitySummary.TotalCaloriesBurned > 2000) {\n  DayOne.createJournalEntry.setBody(\"Total steps taken: \" + Fitbit.newDailyActivitySummary.TotalSteps + \n                                    \"\\nTotal distance covered: \" + Fitbit.newDailyActivitySummary.TotalDistanceCovered + \" \" + \n                                    Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit + \n                                    \"\\nTotal calories burned: \" + Fitbit.newDailyActivitySummary.TotalCaloriesBurned);\n  DayOne.createJournalEntry.setTags(\"fitness, workout, health\");\n  // Assuming the image URL of the daily activity chart from Fitbit is available as an ingredient\n  // Replace 'Fitbit.dailyActivityChartImage' with the actual Filter code for the image URL\n  DayOne.createJournalEntry.setImage(Fitbit.dailyActivityChartImage);\n} else {\n  DayOne.createJournalEntry.skip(\"Daily fitness goals not met.\");\n}", "intent": "Create a new journal entry in my personal Day One journal titled \"Daily Fitness Summary\" when I receive a daily activity summary from Fitbit, including the total steps taken, which should be at least 10000, the total distance covered in kilometers, which should be more than 5 kilometers, and the total calories burned, which should be over 2000, and add tags like \"fitness\", \"workout\", and \"health\" to the entry, along with an image of my daily activity chart from Fitbit."}
{"original_description": "Start a Harmony Home activity.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.start-activity", "Filter code method": "Harmony.startActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.start-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Incorrect gesture or device.\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, start the Watch TV activity on Harmony."}
{"original_description": "End a Harmony Home activity.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.end-activity", "Filter code method": "Harmony.endActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.end-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Harmony.endActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.endActivity.skip(\"Invalid gesture or device.\");\n}", "intent": "End the \"Watch TV\" Harmony Home activity when a Triple Knock gesture is detected on device KNC1-W-00000088."}
{"original_description": "This creates a widget you can add to the home screen on your phone. When you press it,  the selected online activity will be prioritized on your TP-Link network.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tplink_router.prioritize_online_activity", "Filter code method": "TplinkRouter.prioritizeOnlineActivity.skip(string?: reason)", "Runtime method": "runAction(\"tplink_router.prioritize_online_activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Qos mode name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Online Activity Name", "Helper text": "The online activity you would like to prioritize.", "Slug": "qos_mode_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Router name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Router?", "Helper text": "The name of the TP-Link router you want to prioritize online activity on.", "Slug": "router_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  TplinkRouter.prioritizeOnlineActivity.setQosModeName(\"Gaming\");\n  TplinkRouter.prioritizeOnlineActivity.setRouterName(\"Living Room Router\");\n} else {\n  TplinkRouter.prioritizeOnlineActivity.skip(\"Location does not match.\");\n}", "intent": "When I press the button widget on my home screen at a location with latitude 37.8267 and longitude -122.4230, prioritize the online activity named \"Gaming\" on my TP-Link router named \"Living Room Router\"."}
{"original_description": "Hit your fitness goals and your financial goals at the same time! Specify the type of activity (run or ride) and the amount you'd like to save when you set up the Applet.", "trigger_channel": "Strava", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "strava.new_activity_by_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "activity_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time the activity was completed.", "description": "Date and time the activity was completed.", "details": {"Slug": "created_at", "Filter code": "Strava.newActivityByYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Activity type\nThe type of activity completed.", "description": "The type of activity completed.", "details": {"Slug": "activity_type", "Filter code": "Strava.newActivityByYou.ActivityType", "Type": "String", "Example": "Ride"}}, {"section": "Ingredients", "title": "Name\nThe name of the activity.", "description": "The name of the activity.", "details": {"Slug": "name", "Filter code": "Strava.newActivityByYou.Name", "Type": "String", "Example": "Evening Ride"}}, {"section": "Ingredients", "title": "Distance meters\nDistance moved in meters.", "description": "Distance moved in meters.", "details": {"Slug": "distance", "Filter code": "Strava.newActivityByYou.DistanceMeters", "Type": "String", "Example": "4475.4"}}, {"section": "Ingredients", "title": "Elapsed time\nTotal duration of the activity.", "description": "Total duration of the activity.", "details": {"Slug": "elapsed_time", "Filter code": "Strava.newActivityByYou.ElapsedTime", "Type": "String", "Example": "22 minutes, 13 seconds"}}, {"section": "Ingredients", "title": "Elapsed time in seconds\nTotal duration of the activity in seconds.", "description": "Total duration of the activity in seconds.", "details": {"Slug": "elapsed_time_in_seconds", "Filter code": "Strava.newActivityByYou.ElapsedTimeInSeconds", "Type": "String", "Example": "1333"}}, {"section": "Ingredients", "title": "Link to activity\nThe URL to the activity on Strava.", "description": "The URL to the activity on Strava.", "details": {"Slug": "link_to_activity", "Filter code": "Strava.newActivityByYou.LinkToActivity", "Type": "Web URL", "Example": "http://www.strava.com/activities/144461028"}}, {"section": "Ingredients", "title": "Route map image url\nURL to a map image of the route.", "description": "URL to a map image of the route.", "details": {"Slug": "route_map_image_url", "Filter code": "Strava.newActivityByYou.RouteMapImageUrl", "Type": "Image URL", "Example": "https://maps.googleapis.com/maps/api/staticmap?size=400x400&path=weight:3|color:0xFC4C02FF|enc:{qreFj}bjVZQ"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal"}, "action_details": [{"section": "Trigger fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Goal name\nName of the goal saved to.", "description": "Name of the goal saved to.", "details": {"Slug": "goal_name", "Filter code": "Qapital.saveTowardGoal.GoalName", "Type": "String", "Example": "Trip to Iceland"}}, {"section": "Ingredients", "title": "Amount\nAmount saved.", "description": "Amount saved.", "details": {"Slug": "amount", "Filter code": "Qapital.saveTowardGoal.Amount", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Save method\nMethod used to save.", "description": "Method used to save.", "details": {"Slug": "save_method", "Filter code": "Qapital.saveTowardGoal.SaveMethod", "Type": "String", "Example": "Round-up"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Qapital.saveTowardGoal.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if ((Strava.newActivityByYou.ActivityType === \"Run\" && parseFloat(Strava.newActivityByYou.DistanceMeters) / 1000 >= 5) || \n    (Strava.newActivityByYou.ActivityType === \"Ride\" && parseFloat(Strava.newActivityByYou.DistanceMeters) / 1000 >= 10)) {\n  Qapital.saveTowardGoal.setGoalName(\"Fitness Fund\");\n  Qapital.saveTowardGoal.setAmount(2);\n  Qapital.saveTowardGoal.setSaveMethod(\"Round-up\");\n} else {\n  Qapital.saveTowardGoal.skip(\"Activity distance or type does not meet criteria.\");\n}", "intent": "When I complete a run of at least 5 kilometers or a ride of at least 10 kilometers on Strava, save $2 toward my Qapital goal named \"Fitness Fund\" using the round-up method."}
{"original_description": "This Action will start the Harmony Home activity you specify.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.start-activity", "Filter code method": "Harmony.startActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.start-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Motion detection event text does not match.\");\n}", "intent": "When a motion detection event with the text \"Motion Tag: Detected!\" is triggered at any time, start the Harmony Home \"Watch TV\" activity."}
{"original_description": "Every time your Fitbit tracker syncs for the first time today and your previous day's stats are available, they are displayed on your Glance Clock.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-daily-activity-summary"}, "trigger_details": [{"section": "Ingredients", "title": "Date\nThe day of activity", "description": "The day of activity", "details": {"Slug": "date", "Filter code": "Fitbit.newDailyActivitySummary.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Total steps\nNumber of steps taken", "description": "Number of steps taken", "details": {"Slug": "total_steps", "Filter code": "Fitbit.newDailyActivitySummary.TotalSteps", "Type": "String", "Example": "10123"}}, {"section": "Ingredients", "title": "Total floors climbed\nNumber of floors climbed", "description": "Number of floors climbed", "details": {"Slug": "total_floors_climbed", "Filter code": "Fitbit.newDailyActivitySummary.TotalFloorsClimbed", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Total calories burned\nNumber of calories burned from BMR and activity", "description": "Number of calories burned from BMR and activity", "details": {"Slug": "total_calories_burned", "Filter code": "Fitbit.newDailyActivitySummary.TotalCaloriesBurned", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Total elevation gained\nDistance climbed", "description": "Distance climbed", "details": {"Slug": "total_elevation_gained", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGained", "Type": "String", "Example": "200"}}, {"section": "Ingredients", "title": "Total elevation gained unit\nUnit for elevation gain based on your Fitbit preferences", "description": "Unit for elevation gain based on your Fitbit preferences", "details": {"Slug": "total_elevation_gained_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGainedUnit", "Type": "String", "Example": "meters"}}, {"section": "Ingredients", "title": "Total distance covered\nThe total amount of distance covered", "description": "The total amount of distance covered", "details": {"Slug": "total_distance_covered", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCovered", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Total distance covered unit\nUnit for distance covered based on your Fitbit preferences", "description": "Unit for distance covered based on your Fitbit preferences", "details": {"Slug": "total_distance_covered_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit", "Type": "String", "Example": "kilometers"}}, {"section": "Ingredients", "title": "Sedentary minutes\nMinutes in the day you weren't moving much", "description": "Minutes in the day you weren't moving much", "details": {"Slug": "sedentary_minutes", "Filter code": "Fitbit.newDailyActivitySummary.SedentaryMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Lightly active minutes\nMinutes in the day you were moving but not exerting much effort, such as walking", "description": "Minutes in the day you were moving but not exerting much effort, such as walking", "details": {"Slug": "lightly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.LightlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Fairly active minutes\nMinutes in the day you were moving enough to elevate your heart rate", "description": "Minutes in the day you were moving enough to elevate your heart rate", "details": {"Slug": "fairly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.FairlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Very active minutes\nMinutes in the day doing cardio workouts and high-intensity activities like jogging and running", "description": "Minutes in the day doing cardio workouts and high-intensity activities like jogging and running", "details": {"Slug": "very_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.VeryActiveMinutes", "Type": "String", "Example": "20"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (\n  Fitbit.newDailyActivitySummary.TotalSteps === \"10,000\" &&\n  Fitbit.newDailyActivitySummary.TotalFloorsClimbed === \"5\" &&\n  Fitbit.newDailyActivitySummary.TotalCaloriesBurned === \"1,800\" &&\n  Fitbit.newDailyActivitySummary.TotalElevationGained === \"100\" &&\n  Fitbit.newDailyActivitySummary.TotalDistanceCovered === \"4\" &&\n  Fitbit.newDailyActivitySummary.SedentaryMinutes === \"30\" &&\n  Fitbit.newDailyActivitySummary.LightlyActiveMinutes === \"45\" &&\n  Fitbit.newDailyActivitySummary.FairlyActiveMinutes === \"20\" &&\n  Fitbit.newDailyActivitySummary.VeryActiveMinutes === \"15\"\n) {\n  Glanceclock.notice.setText(\n    `Yesterday's Activity Summary: ${Fitbit.newDailyActivitySummary.TotalSteps} steps, ${Fitbit.newDailyActivitySummary.TotalFloorsClimbed} floors, ${Fitbit.newDailyActivitySummary.TotalCaloriesBurned} calories burned, ${Fitbit.newDailyActivitySummary.TotalElevationGained}m elevation gain, ${Fitbit.newDailyActivitySummary.TotalDistanceCovered}km distance, ${Fitbit.newDailyActivitySummary.SedentaryMinutes}min sedentary, ${Fitbit.newDailyActivitySummary.LightlyActiveMinutes}min lightly active, ${Fitbit.newDailyActivitySummary.FairlyActiveMinutes}min fairly active, ${Fitbit.newDailyActivitySummary.VeryActiveMinutes}min very active`\n  );\n  Glanceclock.notice.setAnimation(\"blue\");\n  Glanceclock.notice.setSound(\"beep\");\n} else {\n  Glanceclock.notice.skip(\"Conditions not met.\");\n}", "intent": "When my Fitbit tracker syncs for the first time today with yesterday's stats available, showing I took 10,000 steps, climbed 5 floors, burned 1,800 calories, gained 100 meters in elevation, covered a distance of 4 kilometers, spent 30 minutes being sedentary, 45 minutes lightly active, 20 minutes fairly active, and 15 minutes very active, then display a notice on my Glance Clock with the message \"Yesterday's Activity Summary: 10,000 steps, 5 floors, 1,800 calories burned, 100m elevation gain, 4km distance, 30min sedentary, 45min lightly active, 20min fairly active, 15min very active\" in a blue animation with a beep sound."}
{"original_description": "Starts a Harmony activity you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.start-activity", "Filter code method": "Harmony.startActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.start-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(Apilio.iftttActionReports.CreatedAt).getHours();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && Apilio.iftttActionReports.ApilioValue1 === \"Green\" && hour >= 19) {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Conditions not met to start Watch TV activity.\");\n}", "intent": "Start the \"Watch TV\" Harmony activity when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value 1 of \"Green\" and the event was created after 19:00."}
{"original_description": "When your Logitech POP is pressed run a My Leviton Activity", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.run_activity", "Filter code method": "MyLeviton.runActivity.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.run_activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && LogitechPop.shortPress.Battery === \"100\" && LogitechPop.shortPress.Name === \"Living Room\") {\n  MyLeviton.runActivity.setname(\"Good Morning\");\n} else {\n  MyLeviton.runActivity.skip(\"Conditions not met for running 'Good Morning' activity.\");\n}", "intent": "When the Logitech POP button named \"Living Room\" with the identifier \"a0:e6:f8:8c:f5:33\" is short pressed and has a battery level of 100, run the My Leviton activity named \"Good Morning\"."}
{"original_description": "This Action will end the Harmony Home activity you specify.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.end-activity", "Filter code method": "Harmony.endActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.end-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\" && Mesh.events.TriggeredAt.hour() === 8) {\n  Harmony.endActivity(\"Watch TV\");\n} else {\n  Harmony.endActivity.skip(\"Conditions not met.\");\n}", "intent": "End the Harmony Home \"Watch TV\" activity when a motion is detected, as indicated by the text \"Motion Tag: Detected!\" in the MESH event triggered at 08:00."}
{"original_description": "Check on all your family or household members at the same time daily.\n\nCommunicate with them safely in Zuluchat and check who's at home while responding.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.start_chat", "Filter code method": "Zuluhood.startChat.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.start_chat\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (hour === 20 && minute === 0) {\n  Zuluhood.startChat.setHome(\"All\");\n  Zuluhood.startChat.setType(\"Family Check-in\");\n} else {\n  Zuluhood.startChat.skip(\"Not the scheduled check-in time.\");\n}", "intent": "Check on all household members daily at 8:00 PM and start a chat with them in Zuluchat to confirm who's at home, using the \"Family Check-in\" type."}
{"original_description": "Some security systems call from specific phone number (usually your landline phone number) to alert you. But what if your phone is silenced, you are on a meeting or on the plane?\n\nConnect to Zuluhood and alert your whole Tribe and all your Watchers immediately if such phone call is missed on you Android phone.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(AndroidPhone.missAPhoneCall.OccurredAt).getHours();\nif (AndroidPhone.missAPhoneCall.FromNumber === \"14155551234\" \n    && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\" \n    && hour >= 7 && hour < 22) {\n  Zuluhood.raiseAlarm.setHome(\"My Home\");\n  Zuluhood.raiseAlarm.setType(\"Security Alert\");\n} else {\n  Zuluhood.raiseAlarm.skip(\"Conditions not met.\");\n}", "intent": "When a call from my landline phone number, 14155551234, is missed on my Google Pixel 7 Android phone, between 07:00 and 22:00, immediately raise an alarm to my whole Tribe and all my Watchers on Zuluhood, selecting \"My Home\" as the home and \"Security Alert\" as the type."}
{"original_description": "Some security systems send SMS notifications to alert you. But what if your phone is silenced, or you are on a meeting or on the plane?\n\nConnect to Zuluhood and alert your whole Tribe and all your Watchers immediately on such SMS. Enter a key words usually sent to you from your system.", "trigger_channel": "Android SMS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_messages.received_a_message"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the message.", "description": "The contact name associated with the message.", "details": {"Slug": "ContactName", "Filter code": "AndroidMessages.receivedAMessage.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Text\nThe text of the message", "description": "The text of the message", "details": {"Slug": "Text", "Filter code": "AndroidMessages.receivedAMessage.Text", "Type": "String", "Example": "Hey there! How's it going?"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the message was received.", "description": "The time the message was received.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidMessages.receivedAMessage.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe number that sent the message", "description": "The number that sent the message", "details": {"Slug": "FromNumber", "Filter code": "AndroidMessages.receivedAMessage.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidMessages.receivedAMessage.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.raise_alarm", "Filter code method": "Zuluhood.raiseAlarm.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.raise_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (AndroidMessages.receivedAMessage.DeviceName === \"Google Pixel 7\" \n      && AndroidMessages.receivedAMessage.FromNumber === \"14155551234\") {\n    if (AndroidMessages.receivedAMessage.Text.includes(\"URGENT\")) {\n      Zuluhood.raiseAlarm.setHome(\"My Primary Residence\");\n      Zuluhood.raiseAlarm.setType(\"Security Breach\");\n    } else {\n      Zuluhood.raiseAlarm.skip(\"No URGENT keyword found in the message.\");\n    }\n  } else {\n    Zuluhood.raiseAlarm.skip(\"Message not from specified device or number.\");\n  }\n} else {\n  Zuluhood.raiseAlarm.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When an SMS is received on my Google Pixel 7 from the number 14155551234 containing the keyword \"URGENT\" between 07:00 and 19:00, raise an alarm in Zuluhood with the home selected as \"My Primary Residence\" and the type set to \"Security Breach\"."}
{"original_description": "If your indoor temperature drops too low, ask people you trust to check on your home, see if everything is ok with your windows or doors, and inform you directly in Zuluhood.", "trigger_channel": "ecobee", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ecobee.indoor_temperature_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Indoor temperature threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Indoor Temperature Threshold", "Helper text": "Enter the temperature threshold value for this Trigger", "Slug": "indoor_temperature_threshold", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Thermostat name\nThe name of the thermostat", "description": "The name of the thermostat", "details": {"Slug": "thermostat_name", "Filter code": "Ecobee.indoorTemperatureBelow.ThermostatName", "Type": "String", "Example": "Living Room"}}, {"section": "Ingredients", "title": "Thermostat identifier\nThe unique thermostat identifier", "description": "The unique thermostat identifier", "details": {"Slug": "thermostat_identifier", "Filter code": "Ecobee.indoorTemperatureBelow.ThermostatIdentifier", "Type": "String", "Example": "123456789012"}}, {"section": "Ingredients", "title": "Indoor humidity\nThe current indoor humidity % as measured by your ecobee", "description": "The current indoor humidity % as measured by your ecobee", "details": {"Slug": "indoor_humidity", "Filter code": "Ecobee.indoorTemperatureBelow.IndoorHumidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Desired humidity\nThe desired indoor humidity %", "description": "The desired indoor humidity %", "details": {"Slug": "desired_humidity", "Filter code": "Ecobee.indoorTemperatureBelow.DesiredHumidity", "Type": "String", "Example": "55"}}, {"section": "Ingredients", "title": "Desired indoor heat temperature\nThe desired indoor heat temperature", "description": "The desired indoor heat temperature", "details": {"Slug": "desired_indoor_heat_temperature", "Filter code": "Ecobee.indoorTemperatureBelow.DesiredIndoorHeatTemperature", "Type": "String", "Example": "78"}}, {"section": "Ingredients", "title": "Thermostat time\nDate and time, in thermostat time, the measurement was taken.", "description": "Date and time, in thermostat time, the measurement was taken.", "details": {"Slug": "thermostat_time", "Filter code": "Ecobee.indoorTemperatureBelow.ThermostatTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Desired indoor cool temperature\nThe desired indoor cool temperature", "description": "The desired indoor cool temperature", "details": {"Slug": "desired_indoor_cool_temperature", "Filter code": "Ecobee.indoorTemperatureBelow.DesiredIndoorCoolTemperature", "Type": "String", "Example": "70"}}, {"section": "Ingredients", "title": "Indoor temperature\nThe current indoor temperature as measured by your ecobee", "description": "The current indoor temperature as measured by your ecobee", "details": {"Slug": "indoor_temperature", "Filter code": "Ecobee.indoorTemperatureBelow.IndoorTemperature", "Type": "String", "Example": "74"}}], "action_channel": "Zuluhood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "zuluhood.start_chat", "Filter code method": "Zuluhood.startChat.skip(string?: reason)", "Runtime method": "runAction(\"zuluhood.start_chat\", {})"}, "action_details": [{"section": "Action fields", "title": "Home\nDropdown list", "description": "Dropdown list", "details": {"Label": "Home", "Slug": "home", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Type", "Slug": "type", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Ecobee.indoorTemperatureBelow.IndoorTemperature < 65 && Ecobee.indoorTemperatureBelow.ThermostatName === \"Living Room\") {\n  Zuluhood.startChat.setHome(\"My Home\");\n  Zuluhood.startChat.setType(\"Check and Inform\");\n  Zuluhood.startChat.setMessage(\"Please check if all windows and doors are closed properly at my home and inform me directly in Zuluhood.\");\n  Zuluhood.startChat.setPeople([\"John\", \"Sarah\"]);\n} else {\n  Zuluhood.startChat.skip(\"Indoor temperature is not below 65°F or thermostat is not Living Room.\");\n}", "intent": "If the indoor temperature at my Living Room thermostat drops below 65°F, ask John and Sarah to check on my home, see if all windows and doors are closed properly, and inform me directly in Zuluhood."}
{"original_description": "This Applet works with NASA JPL's news feed. When they share a new discovery, mission update, or bit of space news — you'll be the first to know with an email in your inbox and a notification on your phone. 🚀", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Feed.newFeedItem.EntryTitle.includes(\"Mars\")) {\n    Email.sendMeEmail.setSubject(\"New NASA Discovery: \" + Feed.newFeedItem.EntryTitle);\n    var body = Feed.newFeedItem.EntryContent + \"<br><br>Read the full entry at: <a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryUrl + \"</a>\";\n    Email.sendMeEmail.setBody(body);\n  } else {\n    Email.sendMeEmail.skip(\"Entry title does not contain 'Mars'.\");\n  }\n} else {\n  Email.sendMeEmail.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When NASA JPL's news feed shares a new discovery with the title containing the keyword \"Mars\" and the entry is published between 07:00 and 19:00, send me an email with the subject \"New NASA Discovery: {EntryTitle}\" and the body \"{EntryContent}\" to my inbox, including a link to the full entry at {EntryUrl}."}
{"original_description": "Be the first to know about the latest breaking news. When there is a new breaking news alert, your Hue lights will start blinking.", "trigger_channel": "Fox News", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foxnews.breaking_news_fnc"}, "trigger_details": [{"section": "Ingredients", "title": "Body\nSubject of the alert.", "description": "Subject of the alert.", "details": {"Slug": "subject", "Filter code": "Foxnews.breakingNewsFnc.Body", "Type": "String", "Example": "WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET"}}, {"section": "Ingredients", "title": "Header\nHeader for a breaking news alert.", "description": "Header for a breaking news alert.", "details": {"Slug": "list_name", "Filter code": "Foxnews.breakingNewsFnc.Header", "Type": "String", "Example": "Fox News Breaking News Alert"}}, {"section": "Ingredients", "title": "Date\nDate and time of the alert.", "description": "Date and time of the alert.", "details": {"Slug": "date", "Filter code": "Foxnews.breakingNewsFnc.Date", "Type": "String", "Example": "02/26/17 3:01 PM"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Foxnews.breakingNewsFnc.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  if (Foxnews.breakingNewsFnc.Header === \"Fox News Breaking News Alert\" && Foxnews.breakingNewsFnc.Body.includes(\"WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET\")) {\n    Hue.blinkAllHue.setLights(\"Living room\");\n  } else {\n    Hue.blinkAllHue.skip(\"Does not match the specific breaking news alert.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}", "intent": "When a new breaking news alert is published by Fox News with a subject like \"WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET\" and the header reads \"Fox News Breaking News Alert\", between 07:00 and 22:00, trigger my Philips Hue lights in the living room to start blinking."}
{"original_description": "Every time there is a breaking news alert on Fox News, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Fox News", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foxnews.breaking_news_fnc"}, "trigger_details": [{"section": "Ingredients", "title": "Body\nSubject of the alert.", "description": "Subject of the alert.", "details": {"Slug": "subject", "Filter code": "Foxnews.breakingNewsFnc.Body", "Type": "String", "Example": "WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET"}}, {"section": "Ingredients", "title": "Header\nHeader for a breaking news alert.", "description": "Header for a breaking news alert.", "details": {"Slug": "list_name", "Filter code": "Foxnews.breakingNewsFnc.Header", "Type": "String", "Example": "Fox News Breaking News Alert"}}, {"section": "Ingredients", "title": "Date\nDate and time of the alert.", "description": "Date and time of the alert.", "details": {"Slug": "date", "Filter code": "Foxnews.breakingNewsFnc.Date", "Type": "String", "Example": "02/26/17 3:01 PM"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Foxnews.breakingNewsFnc.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Foxnews.breakingNewsFnc.Header === \"Fox News Breaking News Alert\" && Foxnews.breakingNewsFnc.Body.includes(\"WATCH LIVE\")) {\n  Daskeyboardq.signals.setName(\"NewsAlert\");\n  Daskeyboardq.signals.setZone(\"All Keys\");\n  Daskeyboardq.signals.setColor(\"Red\");\n  Daskeyboardq.signals.setMessage(\"Breaking News: \" + Foxnews.breakingNewsFnc.Body);\n} else {\n  Daskeyboardq.signals.skip(\"Does not match the breaking news criteria.\");\n}", "intent": "When a breaking news alert is published on Fox News with a subject like \"WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET\" and the header indicates it's a \"Fox News Breaking News Alert\", send a Signal to the Das Keyboard Q device named \"NewsAlert\" to the zone \"All Keys\" with the color \"Red\" and include the message \"Breaking News: {subject of the alert}\"."}
{"original_description": "When you miss an incoming call from an important person on your Android phone blink your LIFX lights a chosen color, even if your lights are off.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"Jon Snow\" \n    && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\" \n    && Meta.currentUserTime.hour() >= 8 \n    && Meta.currentUserTime.hour() < 20) {\n  Lifx.blink.setSelector(\"all\");\n  Lifx.blink.setColor(\"red\");\n  Lifx.blink.setBrightness(\"maximum\");\n  Lifx.blink.setNumberOfWeeks(3);\n  Lifx.blink.setBlinkIfOff(\"yes\");\n} else {\n  Lifx.blink.skip(\"Conditions not met.\");\n}", "intent": "When you miss an incoming call from Jon Snow on your Google Pixel 7 between 08:00 and 20:00, blink all your LIFX lights red at maximum brightness 3 times, even if they are turned off."}
{"original_description": "Missed a phone call on Android? Call back the calling party and play a text message.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call_any", "Filter code method": "Woopla.ttsCallAny.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call_any\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setLanguage(string: language)"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone Number", "Helper text": "The phone number to call. International dialing format. Prefix with +. No zeros. Example: +4917098765432", "Slug": "phone_number", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setPhone Number(string: phone_number)"}}], "filter_code": "if (AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\" && AndroidPhone.missAPhoneCall.FromNumber === \"+14155551234\") {\n  Woopla.ttsCallAny.setPhoneNumber(AndroidPhone.missAPhoneCall.FromNumber);\n  Woopla.ttsCallAny.setTts(\"Hello, this is a call back from Jon Snow\");\n  Woopla.ttsCallAny.setLanguage(\"English\");\n} else {\n  Woopla.ttsCallAny.skip(\"Conditions not met.\");\n}", "intent": "When a missed call is detected on my Google Pixel 7 at any time, and the caller's number is +14155551234, immediately initiate a call back to that number using Woopla phone calls and play a text message saying \"Hello, this is a call back from Jon Snow\" in English."}
{"original_description": "Get a Teams message when you miss a phone call on your Android device.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"Jon Snow\") {\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Missed Call from Jon Snow\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(\"You missed a call from Jon Snow at \" + AndroidPhone.missAPhoneCall.OccurredAt + \" on your \" + AndroidPhone.missAPhoneCall.DeviceName + \" from the number \" + AndroidPhone.missAPhoneCall.FromNumber);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not a call from Jon Snow.\");\n}", "intent": "Send a message to the #general channel in Microsoft Teams with the subject \"Missed Call from Jon Snow\" and the body \"You missed a call from Jon Snow at 04:17:06 on your Google Pixel 7 from the number 14155551234\" when you miss a phone call from Jon Snow on your Android device, marking the message as Urgent."}
{"original_description": "Color of a light will change according to what you have set when a call is missed.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceturnOff", "Filter code method": "Lexi.deviceturnOff.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceturnOff\", {})"}, "action_details": [{"section": "Action fields", "title": "Devicelist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device List", "Slug": "devicelist", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"Jon Snow\" && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\") {\n  Lexi.deviceturnOff.setDevicelist(\"Living Room Light\");\n} else {\n  Lexi.deviceturnOff.skip(\"Conditions not met to turn off the Living Room Light.\");\n}", "intent": "When a call from Jon Snow to my Google Pixel 7 is missed at any time, turn off the Living Room Light."}
{"original_description": "This Applet will create a callback task in Google Tasks when you miss a call.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_call_in_call_log"}, "trigger_details": [{"section": "Trigger fields", "title": "Call status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger for all calls or only missed calls?", "Helper text": "Status of the call", "Slug": "call_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Call\nThe ID of the caller", "description": "The ID of the caller", "details": {"Slug": "call_id", "Filter code": "ZoomPhone.newCallInCallLog.CallId", "Type": "String", "Example": "sjbkfdsbfsdf"}}, {"section": "Ingredients", "title": "Call date\nThe start time of the call.", "description": "The start time of the call.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newCallInCallLog.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the user who made the call.", "description": "The name of the user who made the call.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newCallInCallLog.CallerName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the user who made the call.", "description": "The phone number of the user who made the call.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newCallInCallLog.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newCallInCallLog.CallerNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the person who received the call.", "description": "The name of the person who received the call.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newCallInCallLog.CalleeName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the person who received the call.", "description": "The phone number of the person who received the call.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newCallInCallLog.CalleeNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newCallInCallLog.CalleeNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Call direction\nThe direction of the call -- inbound or outbound.", "description": "The direction of the call -- inbound or outbound.", "details": {"Slug": "call_direction", "Filter code": "ZoomPhone.newCallInCallLog.CallDirection", "Type": "String", "Example": "outbound"}}, {"section": "Ingredients", "title": "Call duration\nThe duration of the call in seconds.", "description": "The duration of the call in seconds.", "details": {"Slug": "call_duration", "Filter code": "ZoomPhone.newCallInCallLog.CallDuration", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Call result\nThe result of the call -- connected, recorded, or no answer.", "description": "The result of the call -- connected, recorded, or no answer.", "details": {"Slug": "call_result", "Filter code": "ZoomPhone.newCallInCallLog.CallResult", "Type": "String", "Example": "no_answer"}}, {"section": "Ingredients", "title": "Call recorded\nWas the call recorded?", "description": "Was the call recorded?", "details": {"Slug": "call_recorded", "Filter code": "ZoomPhone.newCallInCallLog.CallRecorded", "Type": "String", "Example": "false"}}, {"section": "Ingredients", "title": "Call voicemail\nDoes the call have a voicemail?", "description": "Does the call have a voicemail?", "details": {"Slug": "call_voicemail", "Filter code": "ZoomPhone.newCallInCallLog.CallVoicemail", "Type": "String", "Example": "true"}}], "action_channel": "Google Tasks", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_tasks.add_task_to_tasklist", "Filter code method": "GoogleTasks.addTaskToTasklist.skip(string?: reason)", "Runtime method": "runAction(\"google_tasks.add_task_to_tasklist\", {})"}, "action_details": [{"section": "Action fields", "title": "Tasklist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which task list?", "Helper text": "The task list to which the task should be added.", "Slug": "tasklist_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What is the title of the task?", "Slug": "task_title", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Title(string: task_title)"}}, {"section": "Action fields", "title": "Task notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What are the notes to include in the task?", "Helper text": "Notes describing the task", "Slug": "task_notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Notes(string: task_notes)"}}, {"section": "Action fields", "title": "Due date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Does the task have a due date?", "Helper text": "Field only sets the date. Ex. Next Tuesday, Today.", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setDue Date(string: due_date)"}}], "filter_code": "if (ZoomPhone.newCallInCallLog.CallResult === \"no_answer\" \n    && ZoomPhone.newCallInCallLog.CallerName === \"Biff McIfttt\" \n    && ZoomPhone.newCallInCallLog.CallerNumber === \"12345678\" \n    && ZoomPhone.newCallInCallLog.CalleeNumber === \"12345678\") {\n  GoogleTasks.addTaskToTasklist.setTaskTitle(\"Missed call from \" + ZoomPhone.newCallInCallLog.CallerName);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(\"Call from \" + ZoomPhone.newCallInCallLog.CallerNumber \n                                            + \" on \" + ZoomPhone.newCallInCallLog.CallDate \n                                            + \", call duration was \" + ZoomPhone.newCallInCallLog.CallDuration \n                                            + \" seconds and the call result was \" + ZoomPhone.newCallInCallLog.CallResult);\n  GoogleTasks.addTaskToTasklist.setDueDate(Meta.currentUserTime.today());\n} else {\n  GoogleTasks.addTaskToTasklist.skip(\"Conditions not met for creating a task.\");\n}", "intent": "Create a new task in Google Tasks with the title \"Missed call from Biff McIfttt\" and notes \"Call from 12345678 on 2020-07-08T04:17:06+05:00, call duration was 100 seconds and the call result was no answer\" when a missed call is logged in Zoom Phone with the caller name being Biff McIfttt, caller number being 12345678, and callee number being 12345678, and set the due date to today."}
{"original_description": "The Trigger of this Applet fires within 15 minutes of the starting time of an event on your Google Calendar that contains a specific keyword or phrase. The search looks at the event’s Title, Description, and Location. You can select, which project and section in MeisterTask the task will appear in.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "MeisterTask", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "meistertask.create_a_task", "Filter code method": "Meistertask.createATask.skip(string?: reason)", "Runtime method": "runAction(\"meistertask.create_a_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which section?", "Slug": "section_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Meistertask.createATask.setTask Description(string: task_description)"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.calendar === \"primary\" && \n    (GoogleCalendar.eventFromSearchStarts.Title.includes(\"Meeting\") || \n     GoogleCalendar.eventFromSearchStarts.Description.includes(\"Meeting\") || \n     GoogleCalendar.eventFromSearchStarts.Where.includes(\"Meeting\")) && \n    GoogleCalendar.eventFromSearchStarts.offset === \"15 minutes\") {\n  var taskDescription = \"Event Title: \" + GoogleCalendar.eventFromSearchStarts.Title + \"\\n\";\n  taskDescription += \"Event Description: \" + GoogleCalendar.eventFromSearchStarts.Description + \"\\n\";\n  taskDescription += \"Event Location: \" + GoogleCalendar.eventFromSearchStarts.Where;\n  Meistertask.createATask.setSectionId(\"Daily Tasks\");\n  Meistertask.createATask.setTaskName(GoogleCalendar.eventFromSearchStarts.Title);\n  Meistertask.createATask.setTaskDescription(taskDescription);\n} else {\n  Meistertask.createATask.skip(\"Conditions not met.\");\n}", "intent": "Create a new task in MeisterTask's \"Daily Tasks\" section when an event containing the keyword \"Meeting\" starts within 15 minutes on my primary Google Calendar, and include the event title, description, and location in the task description."}
{"original_description": "Keep track of when you meet new contacts by automatically adding an event to your iOS Calendar.", "trigger_channel": "iOS Contacts", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_contacts.new_contact_added"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nName of the contact.", "description": "Name of the contact.", "details": {"Slug": "Name", "Filter code": "IosContacts.newContactAdded.Name", "Type": "String", "Example": "Cousin Bob"}}, {"section": "Ingredients", "title": "Phone number\nPhone number of the contact.", "description": "Phone number of the contact.", "details": {"Slug": "PhoneNumber", "Filter code": "IosContacts.newContactAdded.PhoneNumber", "Type": "String", "Example": "(415) 555-0101"}}, {"section": "Ingredients", "title": "Email\nEmail of the contact.", "description": "Email of the contact.", "details": {"Slug": "Email", "Filter code": "IosContacts.newContactAdded.Email", "Type": "String", "Example": "cousin.bob@example.com"}}, {"section": "Ingredients", "title": "Address\nAddress of the contact.", "description": "Address of the contact.", "details": {"Slug": "Address", "Filter code": "IosContacts.newContactAdded.Address", "Type": "String", "Example": "923 Market St"}}, {"section": "Ingredients", "title": "Organization\nOrganization of the contact.", "description": "Organization of the contact.", "details": {"Slug": "Organization", "Filter code": "IosContacts.newContactAdded.Organization", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Job title\nJob title of the contact.", "description": "Job title of the contact.", "details": {"Slug": "JobTitle", "Filter code": "IosContacts.newContactAdded.JobTitle", "Type": "String", "Example": "Chief"}}, {"section": "Ingredients", "title": "Date added\nDate the contact was added to your address book.", "description": "Date the contact was added to your address book.", "details": {"Slug": "DateAdded", "Filter code": "IosContacts.newContactAdded.DateAdded", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Notes\nAny notes associated with the contact.", "description": "Any notes associated with the contact.", "details": {"Slug": "Notes", "Filter code": "IosContacts.newContactAdded.Notes", "Type": "String", "Example": "This guy is a big deal."}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "IosCalendar.createCalendarEvent.setTitle(\"Meeting with New Contact\");\nIosCalendar.createCalendarEvent.setLocation(\"Conference Room\");\nIosCalendar.createCalendarEvent.setStart_DATE(\"Tomorrow at 2pm\");\nIosCalendar.createCalendarEvent.setDuration(\"60\");\nvar notes = \"Name: \" + IosContacts.newContactAdded.Name + \", Phone Number: \" + IosContacts.newContactAdded.PhoneNumber + \", Email: \" + IosContacts.newContactAdded.Email;\nIosCalendar.createCalendarEvent.setNotes(notes);\nIosCalendar.createCalendarEvent.setAlert(\"15 minutes\");", "intent": "Create a new event in my iOS Calendar named \"Meeting with New Contact\" whenever a new contact is added to my address book, setting the location to \"Conference Room\" and the start date to \"Tomorrow at 2pm\" with a duration of 60 minutes, adding notes that include the contact's name, phone number, and email, and setting an alert for 15 minutes before the event."}
{"original_description": "When you check in using Swarm by Foursquare it will be added to the iOS Calendar you choose.", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.any_new_checkin"}, "trigger_details": [{"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.anyNewCheckin.Shout", "Type": "String", "Example": "Hanging out with my mates!"}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.anyNewCheckin.VenueName", "Type": "String", "Example": "Sydney Opera House"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.anyNewCheckin.VenueUrl", "Type": "String", "Example": "http://4sq.com/67UmdR"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.anyNewCheckin.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=-33.85733737872545,151.21505856513977&zoom=16&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C-33.85733737872545,151.21505856513977"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.anyNewCheckin.CheckinDate", "Type": "String", "Example": "November 26, 2013 at 11:01AM"}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "if (Foursquare.anyNewCheckin.VenueName === \"Sydney Opera House\" && Foursquare.anyNewCheckin.Shout === \"Hanging out with my mates!\") {\n  IosCalendar.createCalendarEvent.setNotes(`Checked in at ${Foursquare.anyNewCheckin.VenueName}! Shout: ${Foursquare.anyNewCheckin.Shout}. Venue URL: ${Foursquare.anyNewCheckin.VenueUrl}`);\n  IosCalendar.createCalendarEvent.setTitle(`Checked in at ${Foursquare.anyNewCheckin.VenueName}`);\n  IosCalendar.createCalendarEvent.setLocation(Foursquare.anyNewCheckin.VenueName);\n  IosCalendar.createCalendarEvent.setStart_date(Foursquare.anyNewCheckin.CheckinDate);\n  IosCalendar.createCalendarEvent.setDuration(\"60\");\n  IosCalendar.createCalendarEvent.setAlert(\"15 minutes\");\n  IosCalendar.createCalendarEvent.setUrl(Foursquare.anyNewCheckin.VenueUrl);\n} else {\n  IosCalendar.createCalendarEvent.skip(`Does not match the Sydney Opera House with shout \"Hanging out with my mates!\"`);\n}", "intent": "When I check in using Swarm by Foursquare at a venue like the Sydney Opera House, with a shout like \"Hanging out with my mates!\", add an event to my iOS Calendar named \"Social Events\" titled \"Checked in at Sydney Opera House\", located at \"Sydney Opera House\", starting at the time of check-in, lasting for 60 minutes, with notes including the shout message and venue URL http://4sq.com/67UmdR, and set an alert 15 minutes before the event."}
{"original_description": "Keep track of when you met new contacts. For every new iOS contact, an event will be made in Google Calendar on the day the contact was added.", "trigger_channel": "iOS Contacts", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_contacts.new_contact_added"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nName of the contact.", "description": "Name of the contact.", "details": {"Slug": "Name", "Filter code": "IosContacts.newContactAdded.Name", "Type": "String", "Example": "Cousin Bob"}}, {"section": "Ingredients", "title": "Phone number\nPhone number of the contact.", "description": "Phone number of the contact.", "details": {"Slug": "PhoneNumber", "Filter code": "IosContacts.newContactAdded.PhoneNumber", "Type": "String", "Example": "(415) 555-0101"}}, {"section": "Ingredients", "title": "Email\nEmail of the contact.", "description": "Email of the contact.", "details": {"Slug": "Email", "Filter code": "IosContacts.newContactAdded.Email", "Type": "String", "Example": "cousin.bob@example.com"}}, {"section": "Ingredients", "title": "Address\nAddress of the contact.", "description": "Address of the contact.", "details": {"Slug": "Address", "Filter code": "IosContacts.newContactAdded.Address", "Type": "String", "Example": "923 Market St"}}, {"section": "Ingredients", "title": "Organization\nOrganization of the contact.", "description": "Organization of the contact.", "details": {"Slug": "Organization", "Filter code": "IosContacts.newContactAdded.Organization", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Job title\nJob title of the contact.", "description": "Job title of the contact.", "details": {"Slug": "JobTitle", "Filter code": "IosContacts.newContactAdded.JobTitle", "Type": "String", "Example": "Chief"}}, {"section": "Ingredients", "title": "Date added\nDate the contact was added to your address book.", "description": "Date the contact was added to your address book.", "details": {"Slug": "DateAdded", "Filter code": "IosContacts.newContactAdded.DateAdded", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Notes\nAny notes associated with the contact.", "description": "Any notes associated with the contact.", "details": {"Slug": "Notes", "Filter code": "IosContacts.newContactAdded.Notes", "Type": "String", "Example": "This guy is a big deal."}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "GoogleCalendar.quickAddEvent.setQuickAdd(\"dinner with \" + IosContacts.newContactAdded.Name + \" at \" + IosContacts.newContactAdded.Address + \" tomorrow 7pm\");", "intent": "Create a Google Calendar event titled \"New Contact: {Name}\" on the day a new contact is added to my iOS address book, using the \"dinner with {Name} at {Address} tomorrow 7pm\" quick add format and selecting my default calendar."}
{"original_description": "Every day at 8pm, you'll get an email with all of the events that have been added to your calendar since 8pm the previous day.", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEvent.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEvent.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEvent.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEvent.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEvent.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEvent.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEvent.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEvent.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEvent.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEvent.Notes", "Type": "String", "Example": "Let's get together and talk!"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 20) {\n  var title = \"Today's New Calendar Events\";\n  EmailDigest.sendDailyEmail.setTitle(title);\n  \n  var message = \"\";\n  if (IosCalendar.newCalendarEvent.CalendarName === \"Personal\") {\n    message += \"<b>\" + IosCalendar.newCalendarEvent.Title + \"</b><br>\";\n    message += \"Start date: \" + IosCalendar.newCalendarEvent.StartDate + \"<br>\";\n    message += \"End date: \" + IosCalendar.newCalendarEvent.EndDate + \"<br>\";\n    message += \"Location: \" + IosCalendar.newCalendarEvent.Location + \"<br>\";\n    message += \"Notes: \" + IosCalendar.newCalendarEvent.Notes + \"<br><br>\";\n  }\n  \n  EmailDigest.sendDailyEmail.setMessage(message);\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"8pm\");\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not 8pm\");\n}", "intent": "Send a daily email digest at 8pm with the title \"Today's New Calendar Events\" to summarize all events added to the \"Personal\" calendar since the previous day, including event titles, start dates, end dates, locations, and notes."}
{"original_description": "Automatically save new iOS Contacts you add to a Google spreadsheet for easy sorting and searching.", "trigger_channel": "iOS Contacts", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_contacts.new_contact_added"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nName of the contact.", "description": "Name of the contact.", "details": {"Slug": "Name", "Filter code": "IosContacts.newContactAdded.Name", "Type": "String", "Example": "Cousin Bob"}}, {"section": "Ingredients", "title": "Phone number\nPhone number of the contact.", "description": "Phone number of the contact.", "details": {"Slug": "PhoneNumber", "Filter code": "IosContacts.newContactAdded.PhoneNumber", "Type": "String", "Example": "(415) 555-0101"}}, {"section": "Ingredients", "title": "Email\nEmail of the contact.", "description": "Email of the contact.", "details": {"Slug": "Email", "Filter code": "IosContacts.newContactAdded.Email", "Type": "String", "Example": "cousin.bob@example.com"}}, {"section": "Ingredients", "title": "Address\nAddress of the contact.", "description": "Address of the contact.", "details": {"Slug": "Address", "Filter code": "IosContacts.newContactAdded.Address", "Type": "String", "Example": "923 Market St"}}, {"section": "Ingredients", "title": "Organization\nOrganization of the contact.", "description": "Organization of the contact.", "details": {"Slug": "Organization", "Filter code": "IosContacts.newContactAdded.Organization", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Job title\nJob title of the contact.", "description": "Job title of the contact.", "details": {"Slug": "JobTitle", "Filter code": "IosContacts.newContactAdded.JobTitle", "Type": "String", "Example": "Chief"}}, {"section": "Ingredients", "title": "Date added\nDate the contact was added to your address book.", "description": "Date the contact was added to your address book.", "details": {"Slug": "DateAdded", "Filter code": "IosContacts.newContactAdded.DateAdded", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Notes\nAny notes associated with the contact.", "description": "Any notes associated with the contact.", "details": {"Slug": "Notes", "Filter code": "IosContacts.newContactAdded.Notes", "Type": "String", "Example": "This guy is a big deal."}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Contacts Backup\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/AddressBook\");\nvar formattedRow = IosContacts.newContactAdded.Name + \"|||\" + IosContacts.newContactAdded.PhoneNumber + \"|||\" + IosContacts.newContactAdded.Email + \"|||\" + IosContacts.newContactAdded.Address + \"|||\" + IosContacts.newContactAdded.Organization + \"|||\" + IosContacts.newContactAdded.JobTitle + \"|||\" + IosContacts.newContactAdded.DateAdded + \"|||\" + IosContacts.newContactAdded.Notes;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);", "intent": "When a new contact named, for example, \"John Doe\" with the phone number \"(123) 456-7890\" and email \"john.doe@example.com\" is added to your iOS Contacts, automatically append a new row to a Google Sheets spreadsheet named \"Contacts Backup\" in the folder path \"IFTTT/AddressBook\", with a formatted row containing the contact's name, phone number, email, address \"123 Main St\", organization \"Example Inc.\", job title \"Manager\", date added \"January 1, 2024 at 12:00PM\", and any associated notes like \"Important client\"."}
{"original_description": "This Applet watches a specific iOS Reminders list for when you complete an item. It's set to your \"Reminders\" list by default.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.any_reminder_completed"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.anyReminderCompleted.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.anyReminderCompleted.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.anyReminderCompleted.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.anyReminderCompleted.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.anyReminderCompleted.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Completed date\nThe date the reminder was completed.", "description": "The date the reminder was completed.", "details": {"Slug": "CompletedDate", "Filter code": "IosReminders.anyReminderCompleted.CompletedDate", "Type": "String", "Example": "August 23, 2014 at 11:31PM"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Pick up groceries\" \n    && IosReminders.anyReminderCompleted.Notes === \"Get 1% for Rick\" \n    && IosReminders.anyReminderCompleted.Priority === \"Medium\" \n    && IosReminders.anyReminderCompleted.List === \"Shopping\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Picked up groceries\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Reminder does not match the specified criteria.\");\n}", "intent": "When a reminder titled \"Pick up groceries\" with notes \"Get 1% for Rick\" and priority \"Medium\" is completed in the \"Shopping\" list, quickly add an event to my Google Calendar named \"Personal\" with the text \"Picked up groceries\"."}
{"original_description": "The Applet allows you to sync new iOS contacts with your most used Google services. New contacts will be added to a Google spreadsheet, added to your Google contacts, and marked in your Google calendar.", "trigger_channel": "iOS Contacts", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_contacts.new_contact_added"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nName of the contact.", "description": "Name of the contact.", "details": {"Slug": "Name", "Filter code": "IosContacts.newContactAdded.Name", "Type": "String", "Example": "Cousin Bob"}}, {"section": "Ingredients", "title": "Phone number\nPhone number of the contact.", "description": "Phone number of the contact.", "details": {"Slug": "PhoneNumber", "Filter code": "IosContacts.newContactAdded.PhoneNumber", "Type": "String", "Example": "(415) 555-0101"}}, {"section": "Ingredients", "title": "Email\nEmail of the contact.", "description": "Email of the contact.", "details": {"Slug": "Email", "Filter code": "IosContacts.newContactAdded.Email", "Type": "String", "Example": "cousin.bob@example.com"}}, {"section": "Ingredients", "title": "Address\nAddress of the contact.", "description": "Address of the contact.", "details": {"Slug": "Address", "Filter code": "IosContacts.newContactAdded.Address", "Type": "String", "Example": "923 Market St"}}, {"section": "Ingredients", "title": "Organization\nOrganization of the contact.", "description": "Organization of the contact.", "details": {"Slug": "Organization", "Filter code": "IosContacts.newContactAdded.Organization", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Job title\nJob title of the contact.", "description": "Job title of the contact.", "details": {"Slug": "JobTitle", "Filter code": "IosContacts.newContactAdded.JobTitle", "Type": "String", "Example": "Chief"}}, {"section": "Ingredients", "title": "Date added\nDate the contact was added to your address book.", "description": "Date the contact was added to your address book.", "details": {"Slug": "DateAdded", "Filter code": "IosContacts.newContactAdded.DateAdded", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Notes\nAny notes associated with the contact.", "description": "Any notes associated with the contact.", "details": {"Slug": "Notes", "Filter code": "IosContacts.newContactAdded.Notes", "Type": "String", "Example": "This guy is a big deal."}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (IosContacts.newContactAdded.Name === \"John Doe\" && IosContacts.newContactAdded.PhoneNumber === \"(123) 456-7890\" && IosContacts.newContactAdded.Email === \"john.doe@example.com\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Contacts\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Contacts\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\"John Doe|||(123) 456-7890|||john.doe@example.com\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Contact does not match the specified criteria.\");\n}", "intent": "When a new contact named John Doe with the phone number (123) 456-7890 and email john.doe@example.com is added to my iOS contacts, append a new row to my Google Sheets spreadsheet named \"Contacts\" in the folder path \"IFTTT/Contacts\", with the formatted row \"John Doe|||(123) 456-7890|||john.doe@example.com\"."}
{"original_description": "Find out how busy you and how your activities affect your body and mind", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEvent.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEvent.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEvent.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEvent.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEvent.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEvent.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEvent.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEvent.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEvent.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEvent.Notes", "Type": "String", "Example": "Let's get together and talk!"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_activity", "Filter code method": "Welltory.sendActivity.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Begin\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we start tracking it?", "Helper text": "Add an ingredient containing {at}, {starts}, or similar", "Slug": "begin", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setBegin(string: begin)"}}, {"section": "Action fields", "title": "End\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we stop tracking it?", "Helper text": "Add an ingredient containing {ends}, {at}, or similar", "Slug": "end", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setEnd(string: end)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setComment(string: comment)"}}], "filter_code": "if (IosCalendar.newCalendarEvent.Title === \"Morning Exercise\" &&\n    IosCalendar.newCalendarEvent.CalendarName === \"Personal\" &&\n    IosCalendar.newCalendarEvent.StartDate.includes(\"7:00 AM\") &&\n    IosCalendar.newCalendarEvent.EndDate.includes(\"8:00 AM\") &&\n    IosCalendar.newCalendarEvent.Notes.includes(\"Let's get moving\")) {\n  Welltory.sendActivity\n    .setDataSource(\"Other\")\n    .setDataType(\"Workout\")\n    .setBegin(IosCalendar.newCalendarEvent.StartDate)\n    .setEnd(IosCalendar.newCalendarEvent.EndDate)\n    .setComment(\"Daily morning jog\");\n} else {\n  Welltory.sendActivity.skip(\"Event does not match the specified criteria.\");\n}", "intent": "When a new calendar event titled \"Morning Exercise\" is created in my Personal calendar on the iOS Calendar, starting at 7:00 AM and ending at 8:00 AM, with notes containing the phrase \"Let's get moving\", send an activity to Welltory with data source set to \"Other\", data type set to \"Workout\", begin time set to the event's start date, end time set to the event's end date, and a comment saying \"Daily morning jog\"."}
{"original_description": "When you complete a reminder in the list you specify, it will be marked on your calendar.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.any_reminder_completed"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.anyReminderCompleted.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.anyReminderCompleted.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.anyReminderCompleted.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.anyReminderCompleted.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.anyReminderCompleted.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Completed date\nThe date the reminder was completed.", "description": "The date the reminder was completed.", "details": {"Slug": "CompletedDate", "Filter code": "IosReminders.anyReminderCompleted.CompletedDate", "Type": "String", "Example": "August 23, 2014 at 11:31PM"}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Pick up milk\" && \n    IosReminders.anyReminderCompleted.Notes === \"Get 1% for Rick\" && \n    IosReminders.anyReminderCompleted.List === \"Shopping\" && \n    IosReminders.anyReminderCompleted.Priority === \"Medium\") {\n  IosCalendar.createCalendarEvent.setTitle(\"Completed: Pick up milk\");\n  IosCalendar.createCalendarEvent.setLocation(\"Home\");\n  IosCalendar.createCalendarEvent.setStartDate(IosReminders.anyReminderCompleted.CompletedDate);\n  IosCalendar.createCalendarEvent.setDuration(\"30 minutes\");\n  IosCalendar.createCalendarEvent.setNotes(\"Reminder completed: Get 1% for Rick\");\n  IosCalendar.createCalendarEvent.setAlert(\"5 minutes\");\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Reminder does not match the specified criteria.\");\n}", "intent": "When a reminder titled \"Pick up milk\" with notes \"Get 1% for Rick\" in the list \"Shopping\" and priority \"Medium\" is completed, create a new calendar event on the \"Personal\" calendar titled \"Completed: Pick up milk\", located at \"Home\", starting at the completion time of the reminder, lasting for 30 minutes, with notes \"Reminder completed: Get 1% for Rick\", and an alert set for 5 minutes before the event."}
{"original_description": "Every morning at 6 AM, the weather report for the day will be added to your Google Calendar. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "var currentTime = Meta.currentUserTime.hour();\nif (currentTime === 6) {\n  var location = \"New York City\";\n  var highTempFahrenheit = Weather.currentWeatherAtTime.HighTempFahrenheit;\n  var lowTempFahrenheit = Weather.currentWeatherAtTime.LowTempFahrenheit;\n  var currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  var forecastUrl = Weather.currentWeatherAtTime.ForecastUrl;\n  \n  var quickAddText = `Weather report for ${location}: High of ${highTempFahrenheit}°F, Low of ${lowTempFahrenheit}°F, currently ${currentCondition}. Five-day forecast: ${forecastUrl}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not 6 AM\");\n}", "intent": "Every morning at 6 AM, add the weather report for New York City to my personal Google Calendar, including today's high and low temperatures in Fahrenheit, the current condition, and a URL to a five-day forecast."}
{"original_description": "Every day at the time of your choosing (defaults to 6 AM), the weather report for the day will be added to your iOS Calendar.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var title = \"Today's Weather\";\n  var location = \"New York\";\n  var startDate = \"today\";\n  var duration = \"30 minutes\";\n  var notes = \"High of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F, low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F, \" + Weather.currentWeatherAtTime.TodaysCondition + \" with a UV index of \" + Weather.currentWeatherAtTime.UvIndex;\n  IosCalendar.createCalendarEvent.setNotes(notes);\n  IosCalendar.createCalendarEvent.setTitle(title);\n  IosCalendar.createCalendarEvent.setLocation(location);\n  IosCalendar.createCalendarEvent.setStartDate(startDate);\n  IosCalendar.createCalendarEvent.setDuration(duration);\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Not 7:00 AM\");\n}", "intent": "Every day at 7:00 AM, create a new event in the calendar named \"Weather Updates\" with the title \"Today's Weather\", location \"New York\", start date \"today\", duration \"30 minutes\", and notes \"High of 75°F, low of 50°F, sunny with a UV index of 6\"."}
{"original_description": "When you archive an item in Pocket, a note of it will be added to Google Calendar. It's easy to look back on what you read, and when! ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_read_item_ril"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newReadItemRil.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newReadItemRil.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newReadItemRil.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newReadItemRil.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newReadItemRil.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newReadItemRil.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 20) {\n  if (Pocket.newReadItemRil.Title === \"My Weekend Plans\" \n    && Pocket.newReadItemRil.Url === \"http://example.com\" \n    && Pocket.newReadItemRil.Tags.includes(\"travel\") \n    && Pocket.newReadItemRil.Tags.includes(\"leisure\")) {\n    GoogleCalendar.quickAddEvent.setQuickAdd(\"Read article: My Weekend Plans about travel and leisure at http://example.com\");\n  } else {\n    GoogleCalendar.quickAddEvent.skip(\"Article does not match the specified criteria.\");\n  }\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Outside of active hours (08:00 to 20:00).\");\n}", "intent": "When an item titled like \"My Weekend Plans\" with a URL such as http://example.com and tags including \"travel, leisure\" is archived in Pocket between 08:00 and 20:00, quickly add an event to my default Google Calendar with the text \"Read article: My Weekend Plans about travel and leisure at http://example.com\"."}
{"original_description": "Find out how your photos correlate with other lifestyle events", "trigger_channel": "iOS Photos", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_photos.new_photo_in_camera_roll"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "IosPhotos.newPhotoInCameraRoll.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "IosPhotos.newPhotoInCameraRoll.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Album name\nThe photo album on your phone that you saved the photo to.", "description": "The photo album on your phone that you saved the photo to.", "details": {"Slug": "AlbumName", "Filter code": "IosPhotos.newPhotoInCameraRoll.AlbumName", "Type": "String", "Example": "Pets"}}, {"section": "Ingredients", "title": "Taken date\nThe time the photo was taken.", "description": "The time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "IosPhotos.newPhotoInCameraRoll.TakenDate", "Type": "String", "Example": "April 19, 2013 at 11:01PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (IosPhotos.newPhotoInCameraRoll.AlbumName === \"Vacation\") {\n  Welltory.sendEvent\n    .setDataSource(\"iOS Photos\")\n    .setDataType(\"Travel\")\n    .setDatetime(IosPhotos.newPhotoInCameraRoll.TakenDate)\n    .setValue(\"1\")\n    .setComment(\"New vacation photo\");\n} else {\n  Welltory.sendEvent.skip(\"Photo not added to Vacation album.\");\n}", "intent": "When a new photo is added to the \"Vacation\" album on my iOS device, send an event to Welltory with the data source set to \"iOS Photos\", data type set to \"Travel\", datetime set to the photo's taken date and time, value set to 1, and comment set to \"New vacation photo\"."}
{"original_description": "Tasks that you create on Toodledo with a due-date will be automatically added to your Google Calendar.", "trigger_channel": "Toodledo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "toodledo.task-added"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the task.", "description": "The title of the task.", "details": {"Slug": "Title", "Filter code": "Toodledo.taskAdded.Title", "Type": "String", "Example": "Finish today's homework"}}, {"section": "Ingredients", "title": "Note\nThe note associated with the task.", "description": "The note associated with the task.", "details": {"Slug": "Note", "Filter code": "Toodledo.taskAdded.Note", "Type": "String", "Example": "Don't forget to read the last Computer Science chapter for bonus points!"}}, {"section": "Ingredients", "title": "Folder\nThe name of the folder the task is in.", "description": "The name of the folder the task is in.", "details": {"Slug": "Folder", "Filter code": "Toodledo.taskAdded.Folder", "Type": "String", "Example": "School To-dos"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the task.", "description": "The priority of the task.", "details": {"Slug": "Priority", "Filter code": "Toodledo.taskAdded.Priority", "Type": "String", "Example": "High"}}, {"section": "Ingredients", "title": "Tags\nTags comma separated.", "description": "Tags comma separated.", "details": {"Slug": "Tags", "Filter code": "Toodledo.taskAdded.Tags", "Type": "String", "Example": "homework, programming"}}, {"section": "Ingredients", "title": "Due date\nThe date the task is due.", "description": "The date the task is due.", "details": {"Slug": "DueDate", "Filter code": "Toodledo.taskAdded.DueDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Context\nThe name of the context the task is in.", "description": "The name of the context the task is in.", "details": {"Slug": "Context", "Filter code": "Toodledo.taskAdded.Context", "Type": "String", "Example": "Work"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Toodledo.taskAdded.Folder === \"School To-dos\" \n    && Toodledo.taskAdded.Priority === \"High\" \n    && Toodledo.taskAdded.Tags.includes(\"homework\") \n    && Toodledo.taskAdded.Tags.includes(\"programming\")) {\n  var dueDate = new Date(Toodledo.taskAdded.DueDate);\n  if (dueDate.getHours() < 19) {\n    GoogleCalendar.quickAddEvent.setQuickAdd(`Task due: ${Toodledo.taskAdded.Title} at ${dueDate.toLocaleTimeString()}`);\n    GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n  } else {\n    GoogleCalendar.quickAddEvent.skip(\"Due date is after 19:00.\");\n  }\n}", "intent": "When a new task with a due date is created on Toodledo in the \"School To-dos\" folder with high priority and tags including \"homework, programming\", and the due date is before 19:00, automatically add an event to my Google Calendar's \"Personal\" calendar using Quick Add with the text \"Task due: Finish today's homework at 18:00\"."}
{"original_description": "Keep track of all your new tasks", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.new_reminder_added"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.newReminderAdded.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.newReminderAdded.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.newReminderAdded.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.newReminderAdded.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.newReminderAdded.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\" && IosReminders.newReminderAdded.Priority === \"Medium\" && IosReminders.newReminderAdded.Title.includes(\"URGENT\")) {\n  Welltory.sendEvent\n    .setData_source(\"iOS Reminders\")\n    .setDataType(\"Tasks\")\n    .setDatetime(IosReminders.newReminderAdded.CreatedDate)\n    .setValue(\"1\")\n    .setComment(\"New urgent shopping task added\");\n} else {\n  Welltory.sendEvent.skip(\"Does not match the shopping list with medium priority and URGENT title.\");\n}", "intent": "When a new reminder is added to the \"Shopping\" list in iOS Reminders with a priority of \"Medium\" and title containing the keyword \"URGENT\", send an event to Welltory with the data source set to \"iOS Reminders\", data type set to \"Tasks\", datetime set to the reminder's created date, value set to \"1\", and comment set to \"New urgent shopping task added\"."}
{"original_description": "When you add a new reminder in the iOS Reminders app, the same task will be added to Remember The Milk.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.new_reminder_added"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.newReminderAdded.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.newReminderAdded.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.newReminderAdded.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.newReminderAdded.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.newReminderAdded.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "if (IosReminders.newReminderAdded.Title === \"Pick up groceries\" \n    && IosReminders.newReminderAdded.Notes === \"Get eggs and milk\" \n    && IosReminders.newReminderAdded.List === \"Shopping\" \n    && IosReminders.newReminderAdded.Priority === \"Medium\") {\n  var currentDate = new Date();\n  var hours = currentDate.getHours();\n  var minutes = currentDate.getMinutes();\n  var taskName = \"Buy groceries at \" + hours + \":\" + minutes + \" today #shopping\";\n  Rememberthemilk.tasksAdd.setTask(taskName);\n} else {\n  Rememberthemilk.tasksAdd.skip(\"Reminder does not match the specified criteria.\");\n}", "intent": "When a new reminder titled \"Pick up groceries\" with notes \"Get eggs and milk\" is added to the \"Shopping\" list in the iOS Reminders app with a medium priority, add a task named \"Buy groceries at 10am today #shopping\" to Remember The Milk."}
{"original_description": "For any new reminder you add using your iOS Reminders app, it will be marked on your calendar at the time of creation.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.new_reminder_added"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.newReminderAdded.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.newReminderAdded.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.newReminderAdded.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.newReminderAdded.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.newReminderAdded.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\" && IosReminders.newReminderAdded.Priority === \"Medium\" && IosReminders.newReminderAdded.Notes.includes(\"URGENT\")) {\n  IosCalendar.createCalendarEvent.setTitle(\"Reminder: \" + IosReminders.newReminderAdded.Title);\n  IosCalendar.createCalendarEvent.setStart_date(\"now\");\n  IosCalendar.createCalendarEvent.setDuration(\"60\");\n  IosCalendar.createCalendarEvent.setNotes(IosReminders.newReminderAdded.Notes);\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Conditions not met.\");\n}", "intent": "When a new reminder is added to the \"Shopping\" list in the iOS Reminders app with a priority of \"Medium\" and notes containing the keyword \"URGENT\", create a new event on the default calendar in the iOS Calendar app titled \"Reminder: Pick up milk\" starting at the current time, lasting for 60 minutes, and including the note \"Get 1% for Rick\"."}
{"original_description": "Upload any new iOS photo to your Unforgettable Me account.", "trigger_channel": "iOS Photos", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_photos.new_photo_in_camera_roll"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "IosPhotos.newPhotoInCameraRoll.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "IosPhotos.newPhotoInCameraRoll.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Album name\nThe photo album on your phone that you saved the photo to.", "description": "The photo album on your phone that you saved the photo to.", "details": {"Slug": "AlbumName", "Filter code": "IosPhotos.newPhotoInCameraRoll.AlbumName", "Type": "String", "Example": "Pets"}}, {"section": "Ingredients", "title": "Taken date\nThe time the photo was taken.", "description": "The time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "IosPhotos.newPhotoInCameraRoll.TakenDate", "Type": "String", "Example": "April 19, 2013 at 11:01PM"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (IosPhotos.newPhotoInCameraRoll.AlbumName === \"Vacation\") {\n  var_takenDate = IosPhotos.newPhotoInCameraRoll.TakenDate;\n  UnforgettableMe.uploadData.setBody(JSON.stringify({\n    \"image_url\": IosPhotos.newPhotoInCameraRoll.PublicPhotoURL,\n    \"start_date\": var_takenDate,\n    \"end_date\": var_takenDate\n  }));\n  UnforgettableMe.uploadData.setAugmenterName(\"iOSPhotoUpload\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Photo not in Vacation album.\");\n}", "intent": "Upload any new photo taken with your iOS device and saved to the \"Vacation\" album to your Unforgettable Me account as a JSON object with \"start_date\" and \"end_date\" fields set to the date the photo was taken, using the augmenter name \"iOSPhotoUpload\"."}
{"original_description": "This Action will add an event to your Google Calendar. Simply include a detailed description of when and what.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Mesh.events.TriggeredAt.hour() === 7 && Mesh.events.Text === \"Motion Tag: Detected!\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"meeting with John tomorrow 9am\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Event trigger time or text does not match the specified condition.\");\n}", "intent": "When a new event is triggered at 07:00 with the text \"Motion Tag: Detected!\" in the MESH app, add an event to my primary Google Calendar with the quick add text \"meeting with John tomorrow 9am\"."}
{"original_description": "This Applet will sync your Fitbit to iOS Health so you can easily track how often you're reaching your step goal. ", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-step-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Step goal\nYour daily step goal", "description": "Your daily step goal", "details": {"Slug": "StepGoal", "Filter code": "Fitbit.dailyStepGoal.StepGoal", "Type": "String", "Example": "10000"}}, {"section": "Ingredients", "title": "Steps\nNumber of steps you have taken", "description": "Number of steps you have taken", "details": {"Slug": "Steps", "Filter code": "Fitbit.dailyStepGoal.Steps", "Type": "String", "Example": "12546"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your step goal", "description": "Date you achieved your step goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyStepGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "iOS Health", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_health.log_workout", "Filter code method": "IosHealth.logWorkout.skip(string?: reason)", "Runtime method": "runAction(\"ios_health.log_workout\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Workout type", "Slug": "activity_type", "Required": "true", "Can have default value": "true", "Filter code method": "IosHealth.logWorkout.setActivity Type(string: activity_type)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration of workout", "Helper text": "e.g. \"60 minutes\"", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "IosHealth.logWorkout.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Energy\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calories burned", "Helper text": "Optional e.g. 225", "Slug": "energy", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logWorkout.setEnergy(string: energy)"}}, {"section": "Action fields", "title": "Distance\nText input > Other", "description": "Text input > Other", "details": {"Label": "Distance", "Helper text": "Optional e.g. 25", "Slug": "distance", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logWorkout.setDistance(string: distance)"}}, {"section": "Action fields", "title": "Distance units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Distance units", "Slug": "distance_units", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logWorkout.setDistance Units(string: distance_units)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Date and time workout started", "Helper text": "Optional and will use current time if blank", "Slug": "start_date", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logWorkout.setStart Date(string: start_date)"}}], "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  IosHealth.logWorkout.setActivityType(\"Walking\");\n  IosHealth.logWorkout.setDuration(\"60 minutes\");\n  IosHealth.logWorkout.setEnergy(\"225\");\n  IosHealth.logWorkout.setDistance(\"5\");\n  IosHealth.logWorkout.setDistanceUnits(\"Kilometers\");\n}", "intent": "When my daily step goal of 10000 steps is reached on Fitbit, log a workout in iOS Health with the activity type set to 'Walking', duration of '60 minutes', energy expended of '225 calories', distance of '5 kilometers', and distance units set to 'Kilometers', starting from the current time."}
{"original_description": "Works best when the task has a due date. If not, an event will be created for the time that the task was created.", "trigger_channel": "Asana", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asana.new_task_in_project"}, "trigger_details": [{"section": "Trigger fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace is the project in?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Project name\nText input", "description": "Text input", "details": {"Label": "Project name or URL:", "Helper text": "Enter the project name exactly as it appears in Asana. The project URL is also accepted.", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asana.newTaskInProject.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Project name\nThe name of the project the task is for.", "description": "The name of the project the task is for.", "details": {"Slug": "project_name", "Filter code": "Asana.newTaskInProject.ProjectName", "Type": "String", "Example": "Cool things to do with Asana!"}}, {"section": "Ingredients", "title": "Task name\nThe name of the task.", "description": "The name of the task.", "details": {"Slug": "task_name", "Filter code": "Asana.newTaskInProject.TaskName", "Type": "String", "Example": "Build the Asana Channel on IFTTT"}}, {"section": "Ingredients", "title": "Task notes\nThe notes associated with the task.", "description": "The notes associated with the task.", "details": {"Slug": "task_notes", "Filter code": "Asana.newTaskInProject.TaskNotes", "Type": "String", "Example": "Make it one of the best on IFTTT!"}}, {"section": "Ingredients", "title": "Due on\nThe date that the task is due.", "description": "The date that the task is due.", "details": {"Slug": "due_on", "Filter code": "Asana.newTaskInProject.DueOn", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Assignee\nThe name of the assignee for the project.", "description": "The name of the assignee for the project.", "details": {"Slug": "assignee", "Filter code": "Asana.newTaskInProject.Assignee", "Type": "String", "Example": "Biff McIFTTT"}}, {"section": "Ingredients", "title": "Workspace\nThe name of the workspace.", "description": "The name of the workspace.", "details": {"Slug": "workspace", "Filter code": "Asana.newTaskInProject.Workspace", "Type": "String", "Example": "Team Asana"}}, {"section": "Ingredients", "title": "Tags\nThe tags associated with the task. Comma separated if more than one.", "description": "The tags associated with the task. Comma separated if more than one.", "details": {"Slug": "tags", "Filter code": "Asana.newTaskInProject.Tags", "Type": "String", "Example": "IFTTT, Integrations"}}, {"section": "Ingredients", "title": "Task url\nThe URL to the task on Asana.", "description": "The URL to the task on Asana.", "details": {"Slug": "task_url", "Filter code": "Asana.newTaskInProject.TaskURL", "Type": "Web URL", "Example": "asana.com/"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Asana.newTaskInProject.ProjectName === \"Cool things to do with Asana!\" && \n    Asana.newTaskInProject.Workspace === \"Team Asana\" && \n    Asana.newTaskInProject.TaskName === \"Build the Asana Channel on IFTTT\" && \n    Asana.newTaskInProject.TaskNotes === \"Make it one of the best on IFTTT!\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"meeting with Biff McIFTTT tomorrow 10am\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"My Calendar\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}", "intent": "Create a Google Calendar event with the task name \"Build the Asana Channel on IFTTT\" and notes \"Make it one of the best on IFTTT!\" when a new task is added to the \"Cool things to do with Asana!\" project in the \"Team Asana\" workspace, using the quick add text \"meeting with Biff McIFTTT tomorrow 10am\" and selecting the calendar \"My Calendar\"."}
{"original_description": "Find out how much time you spend in meetings and how it impacts your body", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEvent.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEvent.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEvent.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEvent.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEvent.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEvent.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEvent.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEvent.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEvent.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEvent.Notes", "Type": "String", "Example": "Let's get together and talk!"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_activity", "Filter code method": "Welltory.sendActivity.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Begin\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we start tracking it?", "Helper text": "Add an ingredient containing {at}, {starts}, or similar", "Slug": "begin", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setBegin(string: begin)"}}, {"section": "Action fields", "title": "End\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we stop tracking it?", "Helper text": "Add an ingredient containing {ends}, {at}, or similar", "Slug": "end", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setEnd(string: end)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setComment(string: comment)"}}], "filter_code": "if (IosCalendar.newCalendarEvent.CalendarName === \"Work\") {\n  var startDate = IosCalendar.newCalendarEvent.StartDate;\n  var endDate = IosCalendar.newCalendarEvent.EndDate;\n  var meetingPurpose = IosCalendar.newCalendarEvent.Title;\n\n  Welltory.sendActivity.setBegin(startDate);\n  Welltory.sendActivity.setEnd(endDate);\n  Welltory.sendActivity.setComment(meetingPurpose);\n  Welltory.sendActivity.setDataSource(\"iOS Calendar\");\n  Welltory.sendActivity.setDataType(\"Meeting\");\n} else {\n  Welltory.sendActivity.skip(\"Calendar event is not from 'Work' calendar.\");\n}", "intent": "Track the time spent in meetings and send the duration to Welltory as a 'Meeting' activity when a new calendar event is added to the 'Work' calendar on iOS Calendar, starting at the event's start date and ending at the event's end date, with a comment describing the meeting purpose."}
{"original_description": "Find correlations between your lifestyle and productivity", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.any_reminder_completed"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.anyReminderCompleted.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.anyReminderCompleted.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.anyReminderCompleted.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.anyReminderCompleted.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.anyReminderCompleted.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Completed date\nThe date the reminder was completed.", "description": "The date the reminder was completed.", "details": {"Slug": "CompletedDate", "Filter code": "IosReminders.anyReminderCompleted.CompletedDate", "Type": "String", "Example": "August 23, 2014 at 11:31PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Morning Routine\" && \n    IosReminders.anyReminderCompleted.List === \"Daily Tasks\" && \n    IosReminders.anyReminderCompleted.Priority === \"Medium\") {\n  Welltory.sendEvent\n    .setData_source(\"iOS Reminders\")\n    .setDataType(\"Productivity\")\n    .setDatetime(IosReminders.anyReminderCompleted.CompletedDate)\n    .setValue(\"1\")\n    .setComment(\"Completed morning routine\");\n}", "intent": "When a reminder titled \"Morning Routine\" is completed in the \"Daily Tasks\" list with a medium priority, send an event to Welltory with the data source as \"iOS Reminders\", data type as \"Productivity\", datetime as the completion date of the reminder, value as 1, and comment as \"Completed morning routine\"."}
{"original_description": "When a new episode of your chosen podcast is released this Applet will automatically block off time at 7 am to listen to it, the start time field can be customized by making this Applet your own and you can then choose a different time of day to block off on your calendar. ", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_episode"}, "trigger_details": [{"section": "Trigger fields", "title": "Show\nDropdown list", "description": "Dropdown list", "details": {"Label": "ShowID", "Slug": "show_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Episode\nThe episode's ID.", "description": "The episode's ID.", "details": {"Slug": "episode_id", "Filter code": "Spotify.newEpisode.EpisodeId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Episode release date\nThe day when the episode was released.", "description": "The day when the episode was released.", "details": {"Slug": "episode_release_date", "Filter code": "Spotify.newEpisode.EpisodeReleaseDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Episode name\nThe episode's name.", "description": "The episode's name.", "details": {"Slug": "episode_name", "Filter code": "Spotify.newEpisode.EpisodeName", "Type": "String", "Example": "Is \\\"Resources\\\" a Dirty Word?"}}, {"section": "Ingredients", "title": "Episode cover url\nEpisode cover art.", "description": "Episode cover art.", "details": {"Slug": "episode_cover_url", "Filter code": "Spotify.newEpisode.EpisodeCoverUrl", "Type": "Image URL", "Example": "https://i.scdn.co/image/a3f8306a743873e12282bf48395d9ad45e704cb7"}}, {"section": "Ingredients", "title": "Episode description\nThe episode's description. May contain HTML.", "description": "The episode's description. May contain HTML.", "details": {"Slug": "episode_description", "Filter code": "Spotify.newEpisode.EpisodeDescription", "Type": "String", "Example": "In this episode, ..."}}, {"section": "Ingredients", "title": "Episode url\nThe URL to the episode on Spotify.", "description": "The URL to the episode on Spotify.", "details": {"Slug": "episode_url", "Filter code": "Spotify.newEpisode.EpisodeUrl", "Type": "Web URL", "Example": "https://open.spotify.com/episode/19TIFzN141JLsIUFVPqS5Q"}}, {"section": "Ingredients", "title": "Episode languages\nA list of the languages used in the episode, identified by their ISO 639 code.", "description": "A list of the languages used in the episode, identified by their ISO 639 code.", "details": {"Slug": "episode_languages", "Filter code": "Spotify.newEpisode.EpisodeLanguages", "Type": "String", "Example": "en,es"}}], "action_channel": "iOS Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_calendar.create_calendar_event", "Filter code method": "IosCalendar.createCalendarEvent.skip(string?: reason)", "Runtime method": "runAction(\"ios_calendar.create_calendar_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Helper text": "If blank or calendar cannot be found, your default calendar will be used.", "Slug": "calendar_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Event title", "Helper text": "E.g. \"Coffee with Max\"", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Location\nText input > Other", "description": "Text input > Other", "details": {"Label": "Location", "Helper text": "E.g. \"Machine Coffee & Deli\"", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Start date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Start date", "Helper text": "E.g. \"Tomorrow at 5pm\" or \"In five hours\" or \"03/20/2017\"", "Slug": "start_date", "Required": "true", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setStart Date(string: start_date)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration in minutes", "Helper text": "Defaults to 60 minutes. Enter \"all-day\" for all day events.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Notes\nText input", "description": "Text input", "details": {"Label": "Notes", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Add URL", "Helper text": "Optional link for the event", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setUrl(string: url)"}}, {"section": "Action fields", "title": "Alert\nText input > Other", "description": "Text input > Other", "details": {"Label": "Alert timing", "Helper text": "Use phrases like \"15 minutes\" or \"one day.\" Leave blank for no alerts.", "Slug": "alert", "Required": "false", "Can have default value": "true", "Filter code method": "IosCalendar.createCalendarEvent.setAlert(string: alert)"}}], "filter_code": "if (Spotify.newEpisode.ShowID === \"The Daily\") {\n  IosCalendar.createCalendarEvent.setTitle(\"Listen to The Daily\");\n  IosCalendar.createCalendarEvent.setLocation(\"Home\");\n  IosCalendar.createCalendarEvent.setStart Date(\"8:00 AM\");\n  IosCalendar.createCalendarEvent.setDuration(\"60\");\n  IosCalendar.createCalendarEvent.setNotes(\"New episode available\");\n  IosCalendar.createCalendarEvent.setUrl(Spotify.newEpisode.EpisodeUrl);\n  IosCalendar.createCalendarEvent.setAlert(\"15 minutes before\");\n  IosCalendar.createCalendarEvent.setCalendarName(\"Personal\");\n} else {\n  IosCalendar.createCalendarEvent.skip(\"The podcast is not 'The Daily'\");\n}", "intent": "When a new episode of the podcast with ShowID \"The Daily\" is released on Spotify, automatically create a 60-minute calendar event in the \"Personal\" calendar on iOS Calendar at 8:00 AM, titled \"Listen to The Daily\", located at \"Home\", with notes \"New episode available\" and URL \"https://open.spotify.com/episode/19TIFzN141JLsIUFVPqS5Q\", setting an alert 15 minutes before the event."}
{"original_description": "Share details of a new calendar event with a group chat on Chatwork.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.new_event_added"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.newEventAdded.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.newEventAdded.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.newEventAdded.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.newEventAdded.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.newEventAdded.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.newEventAdded.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.newEventAdded.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time the event was created.", "description": "Date and time the event was created.", "details": {"Slug": "CreatedAt", "Filter code": "GoogleCalendar.newEventAdded.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.newEventAdded.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (GoogleCalendar.newEventAdded.Title === \"Team Meeting\" \n    && GoogleCalendar.newEventAdded.Starts.startsWith(\"10:00\") \n    && GoogleCalendar.newEventAdded.Ends.startsWith(\"11:30\") \n    && GoogleCalendar.newEventAdded.Description === \"Discuss project updates and goals for the quarter\" \n    && GoogleCalendar.newEventAdded.Where === \"Conference Room\") {\n  var message = \"New team meeting scheduled for today at 10:00 AM - join us to discuss project updates and goals. \"\n              + \"Title: \" + GoogleCalendar.newEventAdded.Title + \", \"\n              + \"Description: \" + GoogleCalendar.newEventAdded.Description + \", \"\n              + \"Location: \" + GoogleCalendar.newEventAdded.Where + \", \"\n              + \"Starts: \" + GoogleCalendar.newEventAdded.Starts + \", \"\n              + \"Ends: \" + GoogleCalendar.newEventAdded.Ends + \", \"\n              + \"Event URL: \" + GoogleCalendar.newEventAdded.EventUrl;\n  Chatwork.postMessages.setRoom(\"#general\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Event does not match the specified criteria.\");\n}", "intent": "When a new event titled \"Team Meeting\" is added to my Google Calendar, starting at 10:00 AM and ending at 11:30 AM, with the description \"Discuss project updates and goals for the quarter\", share the event details, including the title, description, location \"Conference Room\", start and end times, and a link to the event, in the Chatwork room \"#general\" with the message \"New team meeting scheduled for today at 10:00 AM - join us to discuss project updates and goals\"."}
{"original_description": "When radon levels go above a defined level, an event with the time stamp and radon level will be added to your Google Calendar.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.radon-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Measurement unit", "Helper text": "What unit of measurement would you like to receive your radon levels in?", "Slug": "unit", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get radon levels from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.radonAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Radon level\nThe radon level. In the measurement unit specified.", "description": "The radon level. In the measurement unit specified.", "details": {"Slug": "value", "Filter code": "Airthings.radonAbove.RadonLevel", "Type": "String", "Example": "120"}}, {"section": "Ingredients", "title": "Measurement unit\nThe unit of measurement used for radon, Bq/m3 or pCi/L.", "description": "The unit of measurement used for radon, Bq/m3 or pCi/L.", "details": {"Slug": "unit", "Filter code": "Airthings.radonAbove.MeasurementUnit", "Type": "String", "Example": "Bq/m3"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.radonAbove.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Airthings.radonAbove.MeasurementUnit !== \"Bq/m3\" || Airthings.radonAbove.Device !== \"Home - Living Room\" || parseFloat(Airthings.radonAbove.RadonLevel) <= 150) {\n  GoogleCalendar.quickAddEvent.skip(\"Radon level is not above 150 Bq/m3 at Home - Living Room.\");\n} else {\n  var quickAddText = \"High radon levels at \" + Airthings.radonAbove.CreatedAt.slice(11, 16) + \" (\" + Airthings.radonAbove.RadonLevel + \" Bq/m3)\";\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n}", "intent": "When the radon level in Bq/m3 goes above 150 at the Home - Living Room device, add an event to my primary Google Calendar with the quick add text \"High radon levels at 07:00\" including the timestamp and radon level."}
{"original_description": "Post a reminder to Chatwork whenever a calendar event is about to start.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (GoogleCalendar.anyEventStarts.calendar === \"Work\" && GoogleCalendar.anyEventStarts.offset === 15) {\n  var message = \"Reminder: Team Meeting starts soon. Title: \" + GoogleCalendar.anyEventStarts.Title + \", Description: \" + GoogleCalendar.anyEventStarts.Description + \", Location: \" + GoogleCalendar.anyEventStarts.Where + \", Event Link: \" + GoogleCalendar.anyEventStarts.EventUrl;\n  Chatwork.postMessages.setRoom(\"General\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Conditions not met.\");\n}", "intent": "Post a reminder to the \"General\" room in Chatwork 15 minutes before any event starts in my \"Work\" calendar on Google Calendar, including the event title \"Team Meeting\", description \"Discuss new project details\", location \"Conference Room A\", and a link to the event."}
{"original_description": "If you live a calendar driven life, then this recipe will help you out by adding an event into your calendar whenever you have a Beemergency day for one of your Beeminder goals.", "trigger_channel": "Beeminder", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "beeminder.any_goal_red"}, "trigger_details": [{"section": "Ingredients", "title": "Goal\nThe goal that is in danger", "description": "The goal that is in danger", "details": {"Slug": "goal", "Filter code": "Beeminder.anyGoalRed.Goal", "Type": "String", "Example": "productivehours"}}, {"section": "Ingredients", "title": "Goal title\nThe descriptive title of the goal in danger", "description": "The descriptive title of the goal in danger", "details": {"Slug": "goal_title", "Filter code": "Beeminder.anyGoalRed.GoalTitle", "Type": "String", "Example": "My Most Excellent Goal"}}, {"section": "Ingredients", "title": "Goal url\nThe URL to the goal in danger", "description": "The URL to the goal in danger", "details": {"Slug": "goal_url", "Filter code": "Beeminder.anyGoalRed.GoalURL", "Type": "String", "Example": "https://www.beeminder.com/meta/uvi"}}, {"section": "Ingredients", "title": "Deadline\nThe time that this goal is due", "description": "The time that this goal is due", "details": {"Slug": "deadline", "Filter code": "Beeminder.anyGoalRed.Deadline", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Beeminder.anyGoalRed.Goal === \"Stay Focused\" && Beeminder.anyGoalRed.Deadline <= \"2023-03-15T14:30:00+00:00\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Focus time tomorrow at 8am\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"Work\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for adding event to calendar.\");\n}", "intent": "When my Beeminder goal \"Stay Focused\" is in danger and the deadline is approaching, such as by 2023-03-15T14:30:00+00:00, add a new event to my Google Calendar's \"Work\" calendar with a quick add text like \"Focus time tomorrow at 8am\" to ensure I get back on track."}
{"original_description": "When any new article is posted to the SFGATE homepage, you'll find it saved on your iOS reading list to read later.", "trigger_channel": "SFGATE", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "sfgate.sfgate_homepage"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Sfgate.sfgateHomepage.EntryTitle", "Type": "String", "Example": "Bay Bridge bike ride now goes halfway to SF 7 days a week"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Sfgate.sfgateHomepage.EntryUrl", "Type": "String", "Example": "http://ift.tt/2p3XLwc"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Sfgate.sfgateHomepage.EntryAuthor", "Type": "String", "Example": "Mark Morford"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Sfgate.sfgateHomepage.EntryContent", "Type": "String", "Example": "When three kittens became trapped in a boom lift in Redwood City on Monday, officers from the Peninsula Humane Society (PHS) and SPCA had to think on their feet – and fast."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Sfgate.sfgateHomepage.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "iOS Reading List", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_reading_list.create_reading_list_item", "Filter code method": "IosReadingList.createReadingListItem.skip(string?: reason)", "Runtime method": "runAction(\"ios_reading_list.create_reading_list_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Preview text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Preview text", "Slug": "preview_text", "Required": "false", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setPreview Text(string: preview_text)"}}], "filter_code": "var title = Sfgate.sfgateHomepage.EntryTitle;\nvar url = Sfgate.sfgateHomepage.EntryUrl;\nvar author = Sfgate.sfgateHomepage.EntryAuthor;\nvar content = Sfgate.sfgateHomepage.EntryContent;\n\nIosReadingList.createReadingListItem.setTitle(\"New SFGATE Article: \" + title);\nIosReadingList.createReadingListItem.setUrl(url);\nIosReadingList.createReadingListItem.setPreviewText(\"Check out this new article from SFGATE about bay area news\");", "intent": "When a new article titled like \"Bay Bridge bike ride now goes halfway to SF 7 days a week\" and written by an author such as \"Mark Morford\" is posted on the SFGATE homepage, save it to your iOS reading list with the title \"New SFGATE Article: Bay Bridge Bike Ride\" and URL \"http://ift.tt/2p3XLwc\" for later reading, including a preview text that says \"Check out this new article from SFGATE about bay area news\".", "filter_code_old": "var title = Trigger.EntryTitle\nvar subject = 'Mission'\n\nif (title.indexOf(subject) < 0) {\n   IosReadingList.createReadingListItem.skip(\"Not related to the Mission\")\n}\n\n"}
{"original_description": "Use the hashtag #workout in your check-in to add it to your calendar so you can easily keep track of your gym visits, yoga classes, hikes, and more. You beast, you! 💪", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.new_checkin_with_hashtag"}, "trigger_details": [{"section": "Trigger fields", "title": "Hashtag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "hashtag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.newCheckinWithHashtag.Shout", "Type": "String", "Example": "Hanging out with my #IFTTT mates!"}}, {"section": "Ingredients", "title": "Shout no hashtag\nThe shout without the hashtag.", "description": "The shout without the hashtag.", "details": {"Slug": "ShoutNoHashtag", "Filter code": "Foursquare.newCheckinWithHashtag.ShoutNoHashtag", "Type": "String", "Example": "Hanging out with my mates!"}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.newCheckinWithHashtag.VenueName", "Type": "String", "Example": "Sydney Opera House"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.newCheckinWithHashtag.VenueUrl", "Type": "String", "Example": "http://4sq.com/67UmdR"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.newCheckinWithHashtag.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=-33.85733737872545,151.21505856513977&zoom=16&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C-33.85733737872545,151.21505856513977"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.newCheckinWithHashtag.CheckinDate", "Type": "String", "Example": "November 26, 2013 at 11:01AM"}}, {"section": "Ingredients", "title": "Hashtag\nHashtag contained in the shout.", "description": "Hashtag contained in the shout.", "details": {"Slug": "Hashtag", "Filter code": "Foursquare.newCheckinWithHashtag.Hashtag", "Type": "String", "Example": "#IFTTT"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Foursquare.newCheckinWithHashtag.VenueName === \"Sydney Opera House\" && Foursquare.newCheckinWithHashtag.Hashtag === \"#gym\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"gym session tomorrow 7pm\");\n  GoogleCalendar.quickAddEvent.skip();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Does not match the Sydney Opera House with #gym hashtag.\");\n}", "intent": "When I check in on Foursquare with the hashtag #gym at the Sydney Opera House, add a new event to my Google Calendar named \"Workout\" with the details \"Hanging out with my mates!\" and set the quick add text to \"gym session tomorrow 7pm\"."}
{"original_description": "Add a 60 minute event in your Google Calendar so that no one else can book you.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy at \" + Kronaby.pusherPressed.PressedAt + \" for 60 minutes\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}", "intent": "When the Kronaby pusher is pressed with a double press at latitude 55.611947 and longitude 12.978337, add a 60 minute event to my primary Google Calendar starting at the time of the press, titled \"Busy\", so that no one else can book me during this time."}
{"original_description": "This Applet adds a new event to your Google Calendar on the exact date and time your content is scheduled to post to social media.", "trigger_channel": "Buffer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "buffer.new_status_item_buffer"}, "trigger_details": [{"section": "Ingredients", "title": "Text\nThe text of the posts, including any links.", "description": "The text of the posts, including any links.", "details": {"Slug": "Text", "Filter code": "Buffer.newStatusItemBuffer.Text", "Type": "String", "Example": "Having a sandwich"}}, {"section": "Ingredients", "title": "First link url\nThe first link included in the post.", "description": "The first link included in the post.", "details": {"Slug": "FirstLinkUrl", "Filter code": "Buffer.newStatusItemBuffer.FirstLinkUrl", "Type": "String", "Example": "http://wadesabout.tumblr.com/"}}, {"section": "Ingredients", "title": "Due at\nDate and time the post is scheduled to go out.", "description": "Date and time the post is scheduled to go out.", "details": {"Slug": "DueAt", "Filter code": "Buffer.newStatusItemBuffer.DueAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Created at\nDate and time the post was added to Buffer.", "description": "Date and time the post was added to Buffer.", "details": {"Slug": "CreatedAt", "Filter code": "Buffer.newStatusItemBuffer.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Buffer.newStatusItemBuffer.DueAt.hour() === 15 && Buffer.newStatusItemBuffer.Text === \"Meeting at the office\" && Buffer.newStatusItemBuffer.FirstLinkUrl === \"https://www.example.com\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"post meeting at 3:00 PM\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"My Schedule\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Post does not match the specified criteria.\");\n}", "intent": "When a new post is scheduled to go out on Buffer at exactly 3:00 PM with the text \"Meeting at the office\" and the first link being \"https://www.example.com\", add a new event to my Google Calendar named \"Social Media Post\" in the calendar \"My Schedule\" with the quick add text \"post meeting at 3:00 PM\"."}
{"original_description": "Save your laundry history by adding an event to your Google Calendar every time your washer with Home Connect starts.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (HcWasher.washerCycleStarted.HaId === \"My Laundry Washer\") {\n  var createdAt = HcWasher.washerCycleStarted.CreatedAt;\n  var quickAddText = \"Laundry cycle started at \" + createdAt;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n}", "intent": "When the Home Connect Washer named \"My Laundry Washer\" starts a cycle, add an event to my Google Calendar named \"Personal\" with the text \"Laundry cycle started at 2023-03-09 10:00:00+01:00\"."}
{"original_description": "Every time a new event is added to your Google Calendar, this Applet automatically turns it into a MeisterTask task and adds it in the project and section of your choice.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.new_event_added"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.newEventAdded.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.newEventAdded.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.newEventAdded.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.newEventAdded.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.newEventAdded.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.newEventAdded.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.newEventAdded.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time the event was created.", "description": "Date and time the event was created.", "details": {"Slug": "CreatedAt", "Filter code": "GoogleCalendar.newEventAdded.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.newEventAdded.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "MeisterTask", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "meistertask.create_a_task", "Filter code method": "Meistertask.createATask.skip(string?: reason)", "Runtime method": "runAction(\"meistertask.create_a_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which section?", "Slug": "section_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Meistertask.createATask.setTask Description(string: task_description)"}}], "filter_code": "if (GoogleCalendar.newEventAdded.EventType === \"outOfOffice\" \n    && GoogleCalendar.newEventAdded.calendar === \"Work\" \n    && Meta.currentUserTime.hour() >= 8 \n    && Meta.currentUserTime.hour() < 17) {\n  var taskName = \"Team Meeting - \" + GoogleCalendar.newEventAdded.Title;\n  var taskDescription = \"Discuss upcoming projects and deadlines. Event Title: \" \n                      + GoogleCalendar.newEventAdded.Title + \". Description: \" \n                      + GoogleCalendar.newEventAdded.Description + \". Location: \" \n                      + GoogleCalendar.newEventAdded.Where + \". Starts: \" \n                      + GoogleCalendar.newEventAdded.Starts + \". Ends: \" \n                      + GoogleCalendar.newEventAdded.Ends;\n  if (GoogleCalendar.newEventAdded.VideoCallUrl) {\n    taskDescription += \". Video Call URL: \" + GoogleCalendar.newEventAdded.VideoCallUrl;\n  }\n  Meistertask.createATask.setSectionId(\"Daily Tasks\");\n  Meistertask.createATask.setTaskName(taskName);\n  Meistertask.createATask.setTaskDescription(taskDescription);\n} else {\n  Meistertask.createATask.skip(\"Event does not match the specified criteria.\");\n}", "intent": "Create a new task in the \"Daily Tasks\" section of my MeisterTask project titled \"Team Meeting\" with the description \"Discuss upcoming projects and deadlines\" whenever a new event labeled as \"outOfOffice\" is added to my Google Calendar's \"Work\" calendar between 08:00 and 17:00, including the event's title, description, location, start and end times, and video call URL if available."}
{"original_description": "Keep a calendar of all your form submissions. You could identify patterns that help you understand the best days and times to get submissions.", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" && Jotform.latestFormSubmission.FormTitle === \"My Contact Form\") {\n  var quickAddText = `New submission from ${Jotform.latestFormSubmission.FormTitle} on ${Jotform.latestFormSubmission.SubmissionDateTime}`;\n  var eventDescription = `Submission Date Time: ${Jotform.latestFormSubmission.SubmissionDateTime}\\nForm Title: ${Jotform.latestFormSubmission.FormTitle}\\nRich Text Data:\\n${Jotform.latestFormSubmission.RichTextData}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.setEventDescription(eventDescription);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Form ID or title does not match.\");\n}", "intent": "Create a new event in my personal Google Calendar whenever a submission is received from form 1234567890, titled \"My Contact Form\", and add the submission date time, form title, and rich text data to the event description, using quick add text \"New submission from My Contact Form on {submission_date_time}\"."}
{"original_description": "Save your dishwasher history by adding an event to your Google Calendar every time your dishwasher with Home Connect starts.", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_cycle_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherCycleStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (HcDishwasher.dishwasherCycleStarted.ha_id === \"Kitchen Dishwasher\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Dishwasher cycle started at \" + HcDishwasher.dishwasherCycleStarted.CreatedAt);\n  GoogleCalendar.quickAddEvent.skip(null); // Null reason to proceed with the action\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not the Kitchen Dishwasher.\");\n}", "intent": "When my Home Connect dishwasher, labeled \"Kitchen Dishwasher\", starts a cycle, add an event to my Google Calendar named \"Personal\" with the quick add text \"Dishwasher cycle started at {{created_at}}\" to keep a record of all cycles."}
{"original_description": "This Applet automatically creates a task in the MeisterTask project and section of your choice. The trigger fires within 15 minutes of the starting time of any event on your Google Calendar.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "MeisterTask", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "meistertask.create_a_task", "Filter code method": "Meistertask.createATask.skip(string?: reason)", "Runtime method": "runAction(\"meistertask.create_a_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which section?", "Slug": "section_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Meistertask.createATask.setTask Description(string: task_description)"}}], "filter_code": "Meistertask.createATask.setTaskName(\"Upcoming Event: \" + GoogleCalendar.anyEventStarts.Title);\nMeistertask.createATask.setSectionId(\"Today\");\nvar taskDescription = \"Event starts at \" + GoogleCalendar.anyEventStarts.Starts + \" and ends at \" + GoogleCalendar.anyEventStarts.Ends + \", located at \" + GoogleCalendar.anyEventStarts.Where;\nif (GoogleCalendar.anyEventStarts.VideoCallUrl) {\n  taskDescription += \", with a video call URL of \" + GoogleCalendar.anyEventStarts.VideoCallUrl;\n}\nMeistertask.createATask.setTaskDescription(taskDescription);\nMeistertask.createATask.setPriority(\"high\");", "intent": "Create a new task named \"Upcoming Event: {{Title}}\" in the MeisterTask project's \"Today\" section when any event on my Google Calendar starts within 15 minutes, including events titled \"Practice Presentation\", and set the task description to \"Event starts at {{Starts}} and ends at {{Ends}}, located at {{Where}}, with a video call URL of {{HangoutsUrl}} if available, and add this as a high-priority task for immediate attention."}
{"original_description": "Save your dryer history by adding an event to your Google Calendar every time your dryer with Home Connect starts.\n", "trigger_channel": "Home Connect Dryer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dryer.dryer_cycle_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dryer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDryer.dryerCycleStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (HcDryer.dryerCycleStarted.ha_id === \"Laundry Room Dryer\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Dryer cycle started at \" + HcDryer.dryerCycleStarted.CreatedAt);\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not the Laundry Room Dryer.\");\n}", "intent": "Every time my Home Connect dryer, named \"Laundry Room Dryer\", starts a cycle, add an event to my Google Calendar named \"Personal\" with the text \"Dryer cycle started at {created_at}\"."}
{"original_description": "Add Google Calendar event when anti-theft alarm is triggered", "trigger_channel": "Invoxia GPS Tracker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "invoxia_tracker.alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Tracker\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Tracker?", "Slug": "tracker", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "InvoxiaTracker.alarm.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Tracker\nThe Tracker on which disruption alert has been triggered.", "description": "The Tracker on which disruption alert has been triggered.", "details": {"Slug": "tracker", "Filter code": "InvoxiaTracker.alarm.Tracker", "Type": "String", "Example": "Tracker Bike"}}, {"section": "Ingredients", "title": "Event\nEvent that triggered disruption alert.", "description": "Event that triggered disruption alert.", "details": {"Slug": "event", "Filter code": "InvoxiaTracker.alarm.Event", "Type": "String", "Example": "move or orientation change"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (InvoxiaTracker.alarm.Tracker === \"Tracker Bike\" && InvoxiaTracker.alarm.Event === \"anti-theft alarm\") {\n  var createdAt = new Date(InvoxiaTracker.alarm.CreatedAt);\n  var hours = createdAt.getHours();\n  var minutes = createdAt.getMinutes();\n  var seconds = createdAt.getSeconds();\n  var quickAddText = `Tracker Bike stolen at ${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.setCalendar(\"primary calendar\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}", "intent": "Create a Google Calendar event on my primary calendar when the anti-theft alarm is triggered on Tracker Bike, with a quick add text \"Tracker Bike stolen at 04:17:06\" to include the exact time of the alarm."}
{"original_description": "When you turn this Applet on, every weight logged on your Fitbit Aria will automatically get added to the Health app on iOS.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-weight-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Bmi\nYour body mass index", "description": "Your body mass index", "details": {"Slug": "BMI", "Filter code": "Fitbit.newWeightLogged.BMI", "Type": "String", "Example": "19.62"}}, {"section": "Ingredients", "title": "Weight\nYour weight", "description": "Your weight", "details": {"Slug": "Weight", "Filter code": "Fitbit.newWeightLogged.Weight", "Type": "String", "Example": "65.0"}}, {"section": "Ingredients", "title": "Weight unit\nThe unit of your weight measurement (kilograms, pounds, stone)", "description": "The unit of your weight measurement (kilograms, pounds, stone)", "details": {"Slug": "WeightUnit", "Filter code": "Fitbit.newWeightLogged.WeightUnit", "Type": "String", "Example": "kilograms"}}, {"section": "Ingredients", "title": "Date\nThe date and time of the weight log entry", "description": "The date and time of the weight log entry", "details": {"Slug": "Date", "Filter code": "Fitbit.newWeightLogged.Date", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iOS Health", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_health.log_body_mass", "Filter code method": "IosHealth.logBodyMass.skip(string?: reason)", "Runtime method": "runAction(\"ios_health.log_body_mass\", {})"}, "action_details": [{"section": "Action fields", "title": "Number of units\nText input > Other", "description": "Text input > Other", "details": {"Label": "Weight", "Helper text": "e.g. 182", "Slug": "number_of_units", "Required": "true", "Can have default value": "true", "Filter code method": "IosHealth.logBodyMass.setNumber Of Units(string: number_of_units)"}}, {"section": "Action fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true", "Filter code method": "IosHealth.logBodyMass.setUnits(string: units)"}}, {"section": "Action fields", "title": "Occurred at\nText input > Other", "description": "Text input > Other", "details": {"Label": "Date and time weighed", "Helper text": "Optional and will use current time if blank", "Slug": "occurred_at", "Required": "false", "Can have default value": "true", "Filter code method": "IosHealth.logBodyMass.setOccurred At(string: occurred_at)"}}], "filter_code": "if (Fitbit.newWeightLogged.Weight === \"65.0\" && Fitbit.newWeightLogged.BMI === \"19.62\" && Fitbit.newWeightLogged.WeightUnit === \"kilograms\") {\n  IosHealth.logBodyMass.setNumberOfUnits(\"65.0\");\n  IosHealth.logBodyMass.setUnits(\"kilograms\");\n  IosHealth.logBodyMass.setOccurredAt(Meta.currentTime.toISOString());\n} else {\n  IosHealth.logBodyMass.skip(\"Weight or BMI does not match the specified criteria.\");\n}", "intent": "When a new weight of 65.0 kilograms is logged on your Fitbit Aria with a BMI of 19.62, automatically add this weight to the Health app on iOS, setting the number of units to 65.0, the units to kilograms, and the occurred at date and time to the current timestamp, such as 2023-03-09T14:30:00+00:00."}
{"original_description": "Add Google Calendar event when zone alert is triggered", "trigger_channel": "Invoxia GPS Tracker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "invoxia_tracker.zone"}, "trigger_details": [{"section": "Trigger fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Zone?", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "InvoxiaTracker.zone.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Tracker\nThe name of the tracker.", "description": "The name of the tracker.", "details": {"Slug": "tracker", "Filter code": "InvoxiaTracker.zone.Tracker", "Type": "String", "Example": "Tracker Bike"}}, {"section": "Ingredients", "title": "Zone\nThe name of the alerting zone.", "description": "The name of the alerting zone.", "details": {"Slug": "zone", "Filter code": "InvoxiaTracker.zone.Zone", "Type": "String", "Example": "Home"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the tracker.", "description": "Latitude of the tracker.", "details": {"Slug": "lat", "Filter code": "InvoxiaTracker.zone.Latitude", "Type": "String", "Example": "48.828011"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the tracker.", "description": "Longitude of the tracker.", "details": {"Slug": "lng", "Filter code": "InvoxiaTracker.zone.Longitude", "Type": "String", "Example": "2.282976"}}, {"section": "Ingredients", "title": "Event\nEvent that triggered zone alert.", "description": "Event that triggered zone alert.", "details": {"Slug": "event", "Filter code": "InvoxiaTracker.zone.Event", "Type": "String", "Example": "entering or leaving"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (InvoxiaTracker.zone.Tracker === \"Tracker Bike\" && InvoxiaTracker.zone.Zone === \"Home\" && InvoxiaTracker.zone.Latitude === \"48.828011\" && InvoxiaTracker.zone.Longitude === \"2.282976\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Tracker Bike entered Home zone at 48.828011, 2.282976\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}", "intent": "When the Invoxia GPS Tracker detects that the tracker \"Tracker Bike\" has entered or left the zone \"Home\" at latitude \"48.828011\" and longitude \"2.282976\", quickly add an event to the Google Calendar on the calendar \"Personal\" with the text \"Tracker Bike entered Home zone at 48.828011, 2.282976\"."}
{"original_description": "Holding a Flic button displays the calendar on your Atmoph Window. Holding the button again turns off the calendar.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.show_calendar", "Filter code method": "Atmoph.showCalendar.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.show_calendar\", {})"}, "action_details": [], "filter_code": "if (Flic.click.ButtonName === \"MyFlic\" && Flic.click.ClickType === \"hold\") {\n  if (Atmoph.isCalendarOn(\"LivingRoom\")) {\n    Atmoph.showCalendar.skip(\"Turning off the calendar on LivingRoom.\");\n  } else {\n    Atmoph.showCalendar.setWindowName(\"LivingRoom\");\n  }\n}", "intent": "When the Flic button named \"MyFlic\" is held, display the calendar on the Atmoph Window named \"LivingRoom\", and when the same button is held again, turn off the calendar."}
{"original_description": "Each time a photo is uploaded to a specified iOS album, that photo will also be sent to your IntuiFace experiences.", "trigger_channel": "iOS Photos", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_photos.new_photo_in_album"}, "trigger_details": [{"section": "Trigger fields", "title": "Album name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Album name", "Slug": "album_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "IosPhotos.newPhotoInAlbum.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "IosPhotos.newPhotoInAlbum.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Album name\nThe photo album on your phone that you saved the photo to.", "description": "The photo album on your phone that you saved the photo to.", "details": {"Slug": "AlbumName", "Filter code": "IosPhotos.newPhotoInAlbum.AlbumName", "Type": "String", "Example": "Pets"}}, {"section": "Ingredients", "title": "Taken date\nThe time the photo was taken.", "description": "The time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "IosPhotos.newPhotoInAlbum.TakenDate", "Type": "String", "Example": "April 19, 2013 at 11:01PM"}}], "action_channel": "Intuiface", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "intuiface.sendMessage", "Filter code method": "Intuiface.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"intuiface.sendMessage\", {})"}, "action_details": [{"section": "Action fields", "title": "Api key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Credential key", "Helper text": "To get your key, go to the <a href=\"https://myintuiface.intuilab.com/credentialkeys?scope=IFTTT_Webtriggers\" target=\"_blank\">Credential keys page</a> then paste the generated key here.", "Slug": "api_key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Msg\nText input > Other", "description": "Text input > Other", "details": {"Label": "Message", "Helper text": "Value to send to all selected experiences. For details , go to the <a href=\"http://support.intuilab.com/kb/web-triggers/web-triggers-overview\" target=\"_blank\">Web Triggers Interface Asset page</a>.", "Slug": "msg", "Required": "true", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setMsg(string: msg)"}}, {"section": "Action fields", "title": "P1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 1", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p1", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP1(string: p1)"}}, {"section": "Action fields", "title": "P2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 2", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p2", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP2(string: p2)"}}, {"section": "Action fields", "title": "P3\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 3", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p3", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP3(string: p3)"}}, {"section": "Action fields", "title": "Xpnames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Experience name(s)", "Helper text": "Optional: Select experience(s) based on their name(s). For multiple experiences, use a comma separated list.", "Slug": "xpNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setXp Names(string: xpNames)"}}, {"section": "Action fields", "title": "Devicenames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player name(s)", "Helper text": "Optional: Select Player(s) based on their device name(s). For multiple Players, use a comma separated list.", "Slug": "deviceNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setDevice Names(string: deviceNames)"}}, {"section": "Action fields", "title": "Tags\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player tag(s)", "Helper text": "Optional: Select Player(s) based on their tag(s). For multiple tags, use a comma separated list. Players with one or more matching tags will be selected.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setTags(string: tags)"}}], "filter_code": "if (IosPhotos.newPhotoInAlbum.AlbumName === \"Vacation\") {\n  Intuiface.sendMessage.setMsg(\"New vacation photo\");\n  Intuiface.sendMessage.setP1(\"photo taken: \" + IosPhotos.newPhotoInAlbum.TakenDate);\n  Intuiface.sendMessage.setP2(\"album name: \" + IosPhotos.newPhotoInAlbum.AlbumName);\n  Intuiface.sendMessage.setXpNames(\"MyTravelDiary\");\n  Intuiface.sendMessage.setDeviceNames(\"OfficeDisplay\");\n  Intuiface.sendMessage.setTags(\"travel\");\n  Intuiface.sendMessage.setMsg(IosPhotos.newPhotoInAlbum.TemporaryPublicPhotoURL);\n} else {\n  Intuiface.sendMessage.skip(\"Photo not uploaded to Vacation album.\");\n}", "intent": "When a new photo is uploaded to the \"Vacation\" album on my iOS device, send the temporary public URL of the photo, along with the message \"New vacation photo\", and the parameters \"photo taken\" and \"album name\" as Parameter 1 and Parameter 2 respectively, to all Intuiface experiences named \"MyTravelDiary\" running on devices named \"OfficeDisplay\" and tagged with \"travel\"."}
{"original_description": "Add NY Times Best Sellers to an iOS Reading List", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "iOS Reading List", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_reading_list.create_reading_list_item", "Filter code method": "IosReadingList.createReadingListItem.skip(string?: reason)", "Runtime method": "runAction(\"ios_reading_list.create_reading_list_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Preview text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Preview text", "Slug": "preview_text", "Required": "false", "Can have default value": "true", "Filter code method": "IosReadingList.createReadingListItem.setPreview Text(string: preview_text)"}}], "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Fiction\" && Nytimes.newBookOnABestSellerList.Rank === \"1\" && parseInt(Nytimes.newBookOnABestSellerList.WeeksOnList) > 10) {\n  IosReadingList.createReadingListItem.setTitle(Nytimes.newBookOnABestSellerList.Title);\n  IosReadingList.createReadingListItem.setUrl(\"https://www.amazon.com/dp/\" + Nytimes.newBookOnABestSellerList.ISBN);\n  IosReadingList.createReadingListItem.setPreviewText(Nytimes.newBookOnABestSellerList.Description);\n} else {\n  IosReadingList.createReadingListItem.skip(\"Does not match the Fiction best seller criteria.\");\n}", "intent": "When a new book is added to the \"Fiction\" best sellers list by The New York Times, with a rank of 1 and having been on the list for more than 10 weeks, add it to my iOS Reading List with the title set to the book's title, the URL set to the book's Amazon page, and the preview text set to the book's description."}
{"original_description": "Add Google Calendar event when button is pressed", "trigger_channel": "Invoxia GPS Tracker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "invoxia_tracker.button_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Tracker\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Tracker?", "Slug": "tracker", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "InvoxiaTracker.buttonPressed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Tracker\nThe Tracker on which the button has been pressed.", "description": "The Tracker on which the button has been pressed.", "details": {"Slug": "tracker", "Filter code": "InvoxiaTracker.buttonPressed.Tracker", "Type": "String", "Example": "Tracker Bike"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the Tracker.", "description": "Latitude of the Tracker.", "details": {"Slug": "lat", "Filter code": "InvoxiaTracker.buttonPressed.Latitude", "Type": "String", "Example": "48.828011"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the Tracker.", "description": "Longitude of the Tracker.", "details": {"Slug": "lng", "Filter code": "InvoxiaTracker.buttonPressed.Longitude", "Type": "String", "Example": "2.282976"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (InvoxiaTracker.buttonPressed.Tracker === \"Tracker Bike\") {\n  var latitude = InvoxiaTracker.buttonPressed.Latitude;\n  var longitude = InvoxiaTracker.buttonPressed.Longitude;\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Button pressed at \" + latitude + \", \" + longitude);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"The button was not pressed on Tracker Bike.\");\n}", "intent": "When the button is pressed on Tracker Bike, create a Google Calendar event on my primary calendar with the description \"Button pressed at 48.828011, 2.282976\" using Quick Add."}
{"original_description": "New tasks added to your chosen list in iOS Reminders are also added as tasks due today in Google tasks", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.new_reminder_added"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.newReminderAdded.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.newReminderAdded.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.newReminderAdded.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.newReminderAdded.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.newReminderAdded.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}], "action_channel": "Google Tasks", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_tasks.add_task_to_tasklist", "Filter code method": "GoogleTasks.addTaskToTasklist.skip(string?: reason)", "Runtime method": "runAction(\"google_tasks.add_task_to_tasklist\", {})"}, "action_details": [{"section": "Action fields", "title": "Tasklist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which task list?", "Helper text": "The task list to which the task should be added.", "Slug": "tasklist_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What is the title of the task?", "Slug": "task_title", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Title(string: task_title)"}}, {"section": "Action fields", "title": "Task notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What are the notes to include in the task?", "Helper text": "Notes describing the task", "Slug": "task_notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Notes(string: task_notes)"}}, {"section": "Action fields", "title": "Due date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Does the task have a due date?", "Helper text": "Field only sets the date. Ex. Next Tuesday, Today.", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setDue Date(string: due_date)"}}], "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\") {\n  var taskTitle = \"Buy \" + IosReminders.newReminderAdded.Title;\n  if (IosReminders.newReminderAdded.Notes) {\n    taskTitle += \" for \" + IosReminders.newReminderAdded.Notes.split(\" \")[2];\n  }\n  GoogleTasks.addTaskToTasklist.setTaskTitle(taskTitle);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(\"Remember to get \" + IosReminders.newReminderAdded.Notes.split(\" \")[0] + \" \" + IosReminders.newReminderAdded.Title + \" milk\");\n  GoogleTasks.addTaskToTasklist.setDueDate(Meta.currentUserTime.format(\"YYYY-MM-DD\"));\n  GoogleTasks.addTaskToTasklist.setTasklistId(\"Personal\");\n}", "intent": "When a new reminder is added to the \"Shopping\" list in iOS Reminders with a title like \"Pick up milk\" and notes such as \"Get 1% for Rick\", add a task titled \"Buy Milk for Rick\" to the \"Personal\" task list in Google Tasks, including the notes \"Remember to get 1% milk\" and setting the due date to today."}
{"original_description": "When my vacation event in mine calendar start set my smart home mode to Away.", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEvent.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEvent.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEvent.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEvent.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEvent.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEvent.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEvent.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEvent.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEvent.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEvent.Notes", "Type": "String", "Example": "Let's get together and talk!"}}], "action_channel": "myUplink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myuplink.set_smart_home_mode", "Filter code method": "Myuplink.setSmartHomeMode.skip(string?: reason)", "Runtime method": "runAction(\"myuplink.set_smart_home_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Smart home mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Smart home mode", "Slug": "smart_home_mode", "Required": "true", "Can have default value": "true", "Filter code method": "Myuplink.setSmartHomeMode.setSmart Home Mode(string: smart_home_mode)"}}], "filter_code": "if (IosCalendar.newCalendarEvent.Title === \"Vacation\" && IosCalendar.newCalendarEvent.CalendarName === \"Personal\") {\n  Myuplink.setSmartHomeMode.setSmartHomeMode(\"Away\");\n  Myuplink.setSmartHomeMode.setDevice(\"Office\");\n}", "intent": "When a new event titled \"Vacation\" starts in my \"Personal\" calendar, set my smart home mode to \"Away\" on the \"Office\" device."}
{"original_description": "When Google Calendar event \"vacation\" (or your custom name) starts, arm Blink", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_arm", "Filter code method": "Blink.networkArm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to arm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"Vacation\" && GoogleCalendar.eventFromSearchStarts.offset === \"-15\" && GoogleCalendar.eventFromSearchStarts.calendar === \"primary\") {\n  Blink.networkArm.setNetwork(\"home\");\n} else {\n  Blink.networkArm.skip(\"Event title is not 'Vacation' or offset/calendar does not match.\");\n}", "intent": "When a Google Calendar event titled \"Vacation\" starts on my primary calendar, 15 minutes before the event begins, arm my Blink home security system."}
{"original_description": "Automatically play a Smart Life scene whenever the current weather changes. Choose to be alerted about the weather changing to rain, snow, cloudy or clear then pick a Smart Life scene and you're all set.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Smart Life", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smartlife.activate_scene", "Filter code method": "Smartlife.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"smartlife.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Which scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Please set a scene in the app before enabling this action.", "Slug": "which_scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if ([\"rain\", \"snow\", \"cloudy\", \"clear\"].includes(Weather.currentConditionIs.Condition.toLowerCase()) && parseFloat(Weather.currentConditionIs.TempCelsius) < 10) {\n  Smartlife.activateScene(\"Good Morning\");\n} else {\n  Smartlife.activateScene.skip(\"Conditions not met.\");\n}", "intent": "When the weather condition at my location changes to rain, snow, cloudy, or clear, and the current temperature is below 10°C, automatically activate the \"Good Morning\" Smart Life scene."}
{"original_description": "Turn on the music light strip or color-changing RGB light bulb when I press a button.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switch_action", "Filter code method": "Ewelink.switchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switch query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 1-Channel Switch?", "Slug": "switch_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.OccurredAt !== undefined) {\n  Ewelink.switchAction.setSwitchQuery(\"Living Room Music Light Strip\");\n  Ewelink.switchAction.setOnoffActQuery(\"Turn On\");\n}", "intent": "When I press the button, turn on the living room music light strip."}
{"original_description": "When you leave, TMT Chow will automatically activate your Beseye camera.", "trigger_channel": "TMT Chow", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tmt_chow.closed"}, "trigger_details": [{"section": "Trigger fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "TmtChow.closed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nTriggered Device Name", "description": "Triggered Device Name", "details": {"Slug": "device_name", "Filter code": "TmtChow.closed.DeviceName", "Type": "String", "Example": "My Door"}}], "action_channel": "Beseye", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beseye.set_cam_status_off", "Filter code method": "Beseye.setCamStatusOff.skip(string?: reason)", "Runtime method": "runAction(\"beseye.set_cam_status_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Vcam\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which camera?", "Slug": "vcam_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (TmtChow.closed.DeviceName === \"My Front Door\" && TmtChow.closed.CreatedAt === \"2020-07-08T04:17:06+05:00\") {\n  Beseye.setCamStatusOff.skip(\"Camera activation skipped due to non-matching conditions.\");\n} else {\n  // No action is taken when conditions are not met, as per the given intent.\n}", "intent": "When you leave, as indicated by the TMT Chow device named \"My Front Door\" being closed at a time like 2020-07-08T04:17:06+05:00, automatically activate your Beseye camera identified as \"Living Room Camera\"."}
{"original_description": "Let TMT Chow automatically close your gate like daily routine ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.close_door", "Filter code method": "TmtChow.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Helper text": "max 6 digital numbers", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour === 19 && minute === 0) {\n  TmtChow.closeDoor.setUuid(\"Front Gate\");\n  TmtChow.closeDoor.setPincode(123456);\n} else {\n  TmtChow.closeDoor.skip(\"Not the scheduled closing time.\");\n}", "intent": "Close the gate with TMT Chow every day at 7:00 PM using the device named \"Front Gate\" and pin code 123456."}
{"original_description": "Let TMT Chow automatically open your gate like daily routine ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.open_door", "Filter code method": "TmtChow.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Helper text": "Max 6 digital numbers", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 7 && minute === 0) {\n  TmtChow.openDoor.setUuid(\"FrontGate\");\n  TmtChow.openDoor.setPincode(\"123456\");\n} else {\n  TmtChow.openDoor.skip(\"Not the scheduled time.\");\n}", "intent": "Open the gate of device \"FrontGate\" with pin code \"123456\" every day at 7:00 AM using TMT Chow."}
{"original_description": "Let TMT Chow automatically trigger your ChowHub(cycle mode) Door 1 like daily routine", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.call1", "Filter code method": "TmtChow.call1.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.call1\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour == 7 && minute == 0) {\n  TmtChow.call1.setUuid(\"Kitchen Device\");\n  TmtChow.call1.setPincode(\"1234\");\n} else {\n  TmtChow.call1.skip(\"Not the scheduled daily routine time.\");\n}", "intent": "Trigger TMT Chow to automatically activate Door 1 of ChowHub in cycle mode every day at 07:00, using the device named \"Kitchen Device\" and pin code \"1234\", as part of the daily routine."}
{"original_description": "Send IFTTT email by Siri, and IFTTT will help you open the gate", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.open_door", "Filter code method": "TmtChow.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Helper text": "Max 6 digital numbers", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Email.sendIftttAnEmailTagged.Subject === \"Open Gate\" && Email.sendIftttAnEmailTagged.Body.includes(\"#gateopen\")) {\n    TmtChow.openDoor.setUuid(\"Front Gate\");\n    TmtChow.openDoor.setPincode(\"123456\");\n  } else {\n    TmtChow.openDoor.skip(\"Subject or body does not match the required criteria.\");\n  }\n} else {\n  TmtChow.openDoor.skip(\"Outside of allowed hours (7 AM to 7 PM).\");\n}", "intent": "When I send an email to IFTTT with the subject \"Open Gate\" and the body containing the hashtag \"#gateopen\", and the email is received between 07:00 and 19:00, then open the gate using the TMT Chow device named \"Front Gate\" with the pin code \"123456\"."}
{"original_description": "When you open the TMT Chow device, will automatically turn on the Philips Hue.", "trigger_channel": "TMT Chow", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tmt_chow.opening"}, "trigger_details": [{"section": "Trigger fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "TmtChow.opening.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nTriggered Device Name", "description": "Triggered Device Name", "details": {"Slug": "device_name", "Filter code": "TmtChow.opening.DeviceName", "Type": "String", "Example": "My Door"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (TmtChow.opening.DeviceName === \"My Kitchen Door\") {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Not the specified device.\");\n}", "intent": "When the TMT Chow device named \"My Kitchen Door\" is opened, automatically turn on all Philips Hue lights in the living room."}
{"original_description": "Let TMT Chow close your gate when sunset like daily routine", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.close_door", "Filter code method": "TmtChow.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Helper text": "max 6 digital numbers", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  TmtChow.closeDoor.setUuid(\"Front Gate\");\n  TmtChow.closeDoor.setPincode(\"123456\");\n} else {\n  TmtChow.closeDoor.skip(\"Conditions not met to close the gate.\");\n}", "intent": "Close the gate of my device named \"Front Gate\" with the pin code \"123456\" at sunset, which is today at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny."}
{"original_description": "Record open event in you calendar, let you review it more easily.", "trigger_channel": "TMT Chow", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tmt_chow.opened"}, "trigger_details": [{"section": "Trigger fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "TmtChow.opened.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nTriggered Device Name", "description": "Triggered Device Name", "details": {"Slug": "device_name", "Filter code": "TmtChow.opened.DeviceName", "Type": "String", "Example": "My Door"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (TmtChow.opened.DeviceName === \"My Front Door\") {\n  var createdAt = TmtChow.opened.CreatedAt;\n  var date = new Date(createdAt);\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var day = date.getDate();\n  var month = date.toLocaleString('default', { month: 'long' });\n  var year = date.getFullYear();\n  var timezoneOffset = date.getTimezoneOffset();\n  var offsetHours = Math.floor(Math.abs(timezoneOffset) / 60);\n  var offsetMinutes = Math.abs(timezoneOffset) % 60;\n  var sign = timezoneOffset <= 0 ? '+' : '-';\n  var timezoneString = ` ${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n  var quickAddText = `Front door opened at ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}${timezoneString} on ${month} ${day}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Device name does not match \\\"My Front Door\\\".\");\n}", "intent": "When the TMT Chow device named \"My Front Door\" is opened, quickly add an event to my primary Google Calendar with the text \"Front door opened at 04:17:06+05:00 on July 8th\"."}
{"original_description": "Record abnormal event in you\ncalendar, let you review it\nmore easily.", "trigger_channel": "TMT Chow", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tmt_chow.overcurrent"}, "trigger_details": [{"section": "Trigger fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "TmtChow.overcurrent.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nTriggered Device Name", "description": "Triggered Device Name", "details": {"Slug": "device_name", "Filter code": "TmtChow.overcurrent.DeviceName", "Type": "String", "Example": "My Door"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (TmtChow.overcurrent.DeviceName === \"My Kitchen Device\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Abnormal event occurred on My Kitchen Device\");\n  GoogleCalendar.quickAddEvent.skip();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Device name does not match \\\"My Kitchen Device\\\".\");\n}", "intent": "When an overcurrent event is detected by the device named \"My Kitchen Device\" at any time, create a new event in my \"Personal\" Google Calendar with the quick add text \"Abnormal event occurred on My Kitchen Device\"."}
{"original_description": "Let TMT Chow automatically trigger your ChowHub(cycle mode) Door 2 like daily routine", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.call2", "Filter code method": "TmtChow.call2.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.call2\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "door name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.substring(11, 16) !== targetTime) {\n  TmtChow.call2.skip(\"Not the target time\");\n} else {\n  TmtChow.call2.setUuid(\"Door 2\");\n  TmtChow.call2.setPincode(\"1234\");\n}", "intent": "Trigger TMT Chow to automatically open Door 2 in cycle mode on ChowHub every day at 07:00 by calling the TMT Chow action with the door name set to \"Door 2\" and the pin code set to \"1234\"."}
{"original_description": "Let TMT Chow automatically trigger your ChowHub(cycle mode) Door 3 like daily routine", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TMT Chow", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tmt_chow.call3", "Filter code method": "TmtChow.call3.skip(string?: reason)", "Runtime method": "runAction(\"tmt_chow.call3\", {})"}, "action_details": [{"section": "Action fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pincode\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Pin Code", "Slug": "pincode", "Required": "true", "Can have default value": "true"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 7 && minute === 0) {\n  TmtChow.call3.setUuid(\"Kitchen Device\");\n  TmtChow.call3.setPincode(\"1234\");\n} else {\n  TmtChow.call3.skip(\"Not the scheduled time.\");\n}", "intent": "Trigger TMT Chow to automatically activate the ChowHub in cycle mode on Door 3 every day at 7:00 AM, using the device named \"Kitchen Device\" and a pin code of \"1234\"."}
{"original_description": "Record close event in you calendar, help you review it more easily.", "trigger_channel": "TMT Chow", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tmt_chow.closed"}, "trigger_details": [{"section": "Trigger fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "TmtChow.closed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nTriggered Device Name", "description": "Triggered Device Name", "details": {"Slug": "device_name", "Filter code": "TmtChow.closed.DeviceName", "Type": "String", "Example": "My Door"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (TmtChow.closed.DeviceName === \"My Front Door\") {\n  var createdAt = TmtChow.closed.CreatedAt;\n  var dateString = new Date(createdAt).toLocaleString(\"en-US\", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });\n  GoogleCalendar.quickAddEvent.setQuickAdd(`Front door closed at ${dateString}`);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Device name does not match 'My Front Door'.\");\n}", "intent": "When the door named \"My Front Door\" is closed, as indicated by the TMT Chow device, add a new event to my primary Google Calendar with the text \"Front door closed at 04:17:06+05:00 on July 8th\"."}
{"original_description": "Whenever anyone unlocks your lock, the selected Hue lights will turn on.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  Hue.turnOnAllHue.setLights(\"Living Room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met for turning on the Living Room lights.\");\n}", "intent": "When the Front Door lock at San Diego Beach House is unlocked by John Smith, turn on the Living Room Hue lights."}
{"original_description": "Every time a new public track from anyone you follow is added, a Signal will be sent to your Das Keyboard.", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.following_new_public_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.followingNewPublicTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.followingNewPublicTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.followingNewPublicTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.followingNewPublicTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.followingNewPublicTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.followingNewPublicTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.followingNewPublicTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.followingNewPublicTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.followingNewPublicTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.followingNewPublicTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.followingNewPublicTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Soundcloud.followingNewPublicTrack.Username === \"gaga\" && Soundcloud.followingNewPublicTrack.Title === \"A cool track\" && Soundcloud.followingNewPublicTrack.Tags === \"killer, noise\") {\n  Daskeyboardq.signals.setName(\"New Track Alert\");\n  Daskeyboardq.signals.setZone(\"Q Key\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setMessage(\"Check out gaga's new track: \" + Soundcloud.followingNewPublicTrack.TrackUrl);\n  Daskeyboardq.signals.setEffect(\"Breathing\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Does not match the specified conditions.\");\n}", "intent": "When a new public track is uploaded by any artist you follow on SoundCloud, such as when the user \"gaga\" uploads a new track titled \"A cool track\" with tags like \"killer, noise\", send a Signal to your Das Keyboard device named \"Office Keyboard\" with the name \"New Track Alert\", setting the zone to the \"Q Key\" and coloring it red (#FF0000), including a message that says \"Check out gaga's new track: http://soundcloud.com/gaga-digi/john-maus-believer\", and applying a breathing effect."}
{"original_description": "In a Telegram group with coworkers or family members? Allow anyone in the group to turn off the lights at the end of the work day or as they're leaving the house. Simply type '/ifttt lights off' in the group you specify to turn your Hue lights off.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_group_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "You can use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot to <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">connect new groups</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires when anyone sends a message with the command /ifttt and the key phrase to the group.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to the command with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newGroupTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Group title\nThe title of the group.", "description": "The title of the group.", "details": {"Slug": "group_title", "Filter code": "Telegram.newGroupTextFilter.GroupTitle", "Type": "String", "Example": "Bot News Group"}}, {"section": "Ingredients", "title": "Author name\nThe name of the author who triggered the Applet.", "description": "The name of the author who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newGroupTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nAuthor username, when available.", "description": "Author username, when available.", "details": {"Slug": "author_username", "Filter code": "Telegram.newGroupTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents a plain-text message contents. Does not include the 'Key phrase'.", "description": "Represents a plain-text message contents. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newGroupTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newGroupTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newGroupTextFilter.GroupTitle === \"#home_group\" && \n    Telegram.newGroupTextFilter.Text.includes(\"/ifttt lights off\") && \n    hour >= 17 && hour <= 20) {\n  Hue.turnOnAllHue.skip(\"Turning off Living Room lights as requested.\");\n} else {\n  Hue.turnOnAllHue.setLights(\"Living Room\").skip(\"Condition not met to turn off lights.\");\n}", "intent": "When someone types '/ifttt lights off' in the #home_group Telegram chat between 17:00 and 20:00, turn off all the Living Room lights."}
{"original_description": "Use a Flic button to toggle MagicHue Smart Lights on/off. Quick, reliable and simple enough for anyone to use - even your kids!", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.Togglelight", "Filter code method": "Magichue.togglelight.skip(string?: reason)", "Runtime method": "runAction(\"magichue.Togglelight\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ButtonUuid === \"Living Room Flic\" && Flic.click.ClickType === \"double_click\") {\n  MagicHue.togglelight();\n} else {\n  MagicHue.togglelight.skip(\"Flic button 'Living Room Flic' was not double-clicked.\");\n}", "intent": "When the Flic button named \"Living Room Flic\" is double-clicked, toggle the MagicHue Smart Lights in the living room on or off."}
{"original_description": "Use a Flic button to toggle MagicLight WiFi Smart Lights on/off. Quick, reliable and simple enough for anyone to use - even your kids!", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "MagicLight WiFi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "MagicLight.Togglelight", "Filter code method": "MagicLight.togglelight.skip(string?: reason)", "Runtime method": "runAction(\"MagicLight.Togglelight\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ButtonUuid === \"Living Room Controller\" && Flic.click.ClickType === \"double_click\") {\n  MagicLight.togglelight.setWhichLights(\"Bedroom\");\n} else {\n  MagicLight.togglelight.skip(\"Flic button or click type does not match.\");\n}", "intent": "When the Flic button named \"Living Room Controller\" is double-clicked, toggle the MagicLight WiFi Smart Lights in the \"Bedroom\" on or off."}
{"original_description": "Whenever anyone locks your lock, the selected bot will turn off.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_off_bot", "Filter code method": "Switchbot.turnOffBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_off_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  Switchbot.turnOffBot.setChoseADevice(\"Living Room\");\n} else {\n  Switchbot.turnOffBot.skip(\"Conditions not met for turning off the Living Room SwitchBot device.\");\n}", "intent": "When the Front Door lock at my San Diego beach house is locked by John Smith, turn off the Living Room SwitchBot device."}
{"original_description": "This applet will add new Google Sheets in a specified folder to a data.world dataset or data project. \n\nIMPORTANT: This requires sharing permissions on Google Drive for this file to allow \"anyone with a link\" to view the file.", "trigger_channel": "Google Sheets", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_sheets.new_spreadsheet"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Drive folder path", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Recipes/Vegetables.&quot; If blank, will look for files added to &quot;My Drive.&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Spreadsheet url\nThe URL to the spreadsheet on Google Sheets.", "description": "The URL to the spreadsheet on Google Sheets.", "details": {"Slug": "spreadsheet_url", "Filter code": "GoogleSheets.newSpreadsheet.SpreadsheetUrl", "Type": "Web URL", "Example": "https://docs.google.com/spreadsheets/d/1cHROp05l1AvtsvKmfKhiyIl09FoxeZR2GGFtzI9fYcc/edit?usp=sharing"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "GoogleSheets.newSpreadsheet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Filename\nThe name of the spreadsheet.", "description": "The name of the spreadsheet.", "details": {"Slug": "name", "Filter code": "GoogleSheets.newSpreadsheet.Filename", "Type": "String", "Example": "2018 Trip ideas"}}, {"section": "Ingredients", "title": "Path\nPath of the new spreadsheet.", "description": "Path of the new spreadsheet.", "details": {"Slug": "path", "Filter code": "GoogleSheets.newSpreadsheet.Path", "Type": "String", "Example": "IFTTT/Faves"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.upload_file", "Filter code method": "Datadotworld.uploadFile.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.upload_file\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to add this file to? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "What would you like to name this file? IMPORTANT: File names must include a file extension.", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "What is the URL from which the file can be downloaded?", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Url(string: file_url)"}}], "filter_code": "if (GoogleSheets.newSpreadsheet.Path === \"Recipes/Vegetables\") {\n  Datadotworld.uploadFile.setFileName(GoogleSheets.newSpreadsheet.Filename);\n  Datadotworld.uploadFile.setFileUrl(GoogleSheets.newSpreadsheet.SpreadsheetUrl);\n  Datadotworld.uploadFile.setDatasetKey(\"My Personal Recipes\");\n} else {\n  Datadotworld.uploadFile.skip(\"Spreadsheet not in Recipes/Vegetables folder.\");\n}", "intent": "Add new Google Sheets files added to the \"Recipes/Vegetables\" folder in Google Drive to the \"My Personal Recipes\" dataset on data.world, using the spreadsheet URL as the file URL and naming the file with the same name as the spreadsheet."}
{"original_description": "Stop anyone turning your socket off when your phone or tablet is charging by fully locking your socket.", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_plugged_in"}, "trigger_details": [{"section": "Ingredients", "title": "Power source\nThe source of the charge.", "description": "The source of the charge.", "details": {"Slug": "PowerSource", "Filter code": "AndroidBattery.batteryPluggedIn.PowerSource", "Type": "String", "Example": "AC"}}, {"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryPluggedIn.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device was plugged in.", "description": "The time the device was plugged in.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryPluggedIn.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryPluggedIn.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "LightwaveRF Power", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_power.lock_device", "Filter code method": "LightwaverfPower.lockDevice.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_power.lock_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidBattery.batteryPluggedIn.PowerSource === \"AC\" && AndroidBattery.batteryPluggedIn.DeviceName === \"Google Pixel 7\" && parseInt(AndroidBattery.batteryPluggedIn.BatteryPercentage) < 90) {\n  LightwaverfPower.lockDevice.setWhichDevice(\"Living Room socket\");\n} else {\n  LightwaverfPower.lockDevice.skip(\"Conditions not met to lock the Living Room socket.\");\n}", "intent": "When my Google Pixel 7 is charging via AC power and the battery percentage is below 90%, lock the Living Room socket using LightwaveRF Power to prevent it from being turned off until the device is fully charged or the battery percentage reaches 100%."}
{"original_description": "\"They gotta see the BABY!\" — even if they don't have Instagram. When you post a new pic with the hashtag #TheKid (or pick your own), this Applet will send it to up to 20 emails via Gmail. Grandma, grandpa, cousin Sue...up to you!", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#BabyAlbum\")) {\n  var toAddresses = \"grandma@example.com, grandpa@example.com, cousin_sue@example.com\";\n  var subject = \"New Baby Photo!\";\n  var body = \"Check out the latest baby picture: \" + Instagram.newPhotoByYouTagged.EmbedCode;\n  var attachmentUrl = Instagram.newPhotoByYouTagged.SourceUrl;\n\n  Gmail.sendAnEmail.setSubject(subject);\n  Gmail.sendAnEmail.setBody(body);\n  Gmail.sendAnEmail.setTo(toAddresses);\n  Gmail.sendAnEmail.setAttachmentUrl(attachmentUrl);\n} else {\n  Gmail.sendAnEmail.skip(\"The photo does not contain the #BabyAlbum hashtag.\");\n}", "intent": "When I post a new photo on Instagram with the hashtag #BabyAlbum, send an email to grandma@example.com, grandpa@example.com, and cousin_sue@example.com with the subject \"New Baby Photo!\" and the body \"Check out the latest baby picture: http://instagr.am/p/NEWPHOTO/embed\". Attach the image file from the photo's source URL."}
{"original_description": "This Applet will send a notification via the IFTTT app each time the IMF publishes a new World Economic Outlook report. ", "trigger_channel": "International Monetary Fund", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "imf.world_economic_outlook"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Imf.worldEconomicOutlook.Title", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Imf.worldEconomicOutlook.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Imf.worldEconomicOutlook.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Imf.worldEconomicOutlook.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var message = \"New World Economic Outlook report published: \" + Imf.worldEconomicOutlook.Title + \". Link: \" + Imf.worldEconomicOutlook.Link + \". Content: \" + Imf.worldEconomicOutlook.EntryContent;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Send a notification via the IFTTT app with the message \"New World Economic Outlook report published: EntryTitle\" each time the IMF publishes a new report, including the report's title, link, and entry content, whenever the entry is published between 07:00 and 19:00."}
{"original_description": "Automatically adjust my ecobee Thermostat to my preferred temperature setpoint when PTS Hours begin. We recommend raising the setpoint at least 3 degrees (Fahrenheit) or to 78 degrees (Fahrenheit).\n \nPart 2 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_indefinite", "Filter code method": "Ecobee.holdIndefinite.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_indefinite\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\") {\n  Ecobee.holdIndefinite.setDesiredTemperature(78);\n}", "intent": "Adjust my ecobee Thermostat to 78 degrees Fahrenheit when ComEd PTS Hours are scheduled to start, specifically during the \"Scheduled\" stage."}
{"original_description": "When Peak Time Savings Hours end, resume the programmed schedule on my ecobee thermostat.\n\nPart 3 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.resume_program", "Filter code method": "Ecobee.resumeProgram.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.resume_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Ended\" && ComEd.ptsSavingsHours.EndTime <= new Date()) {\n  Ecobee.resumeProgram.setThermostat(\"Home Thermostat\");\n} else {\n  Ecobee.resumeProgram.skip(\"Not at the end of Peak Time Savings Hours.\");\n}", "intent": "When the ComEd Peak Time Savings Hours end at their scheduled end time, resume the programmed schedule on my ecobee thermostat named \"Home Thermostat\"."}
{"original_description": "Update my ecobee Thermostat to the recommended temperature to pre cool before the Peak Time Savings Event starts. We recommend lowering the setpoint at least 3 degrees (Fahrenheit) or to 68 degrees (Fahrenheit).\n \nPart 1 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_indefinite", "Filter code method": "Ecobee.holdIndefinite.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_indefinite\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && \n    Meta.currentTime().before(ComEd.ptsSavingsHours.PrecoolTime) && \n    Meta.currentTime().after(ComEd.ptsSavingsHours.PrecoolTime.minus({hours: 1}))) {\n  Ecobee.holdIndefinite.setDesiredTemperature(68).setThermostat(\"Home Thermostat\");\n}", "intent": "When the ComEd Peak Time Savings Event is scheduled to start and it's an hour before the precooling time, update my ecobee Thermostat, named \"Home Thermostat\", to a desired temperature of 68 degrees Fahrenheit to precool before the event starts."}
{"original_description": "When the price comes back down below my threshold, update my ecobee thermostat to resume schedule.\n\nPart 2 of 2 applets to automate your thermostat's response when the price changes.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.resume_program", "Filter code method": "Ecobee.resumeProgram.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.resume_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.averagePriceChange.AveragePrice < 12 && ComEd.averagePriceChange WHICH_SEASON === \"winter\" && ComEd.averagePriceChange.TRIGGER_TYPE === \"goes under\" && ComEd.averagePriceChange.HOW_OFTEN_TO_TRIGGER === \"first time it goes above or below the value\") {\n  Ecobee.resumeProgram.setThermostat(\"Home Thermostat\");\n} else {\n  Ecobee.resumeProgram.skip(\"Conditions not met to resume schedule.\");\n}", "intent": "When the average price drops below 12 cents during the winter season, and this is the first time it goes under the threshold after a previous high, resume the schedule on my ecobee thermostat named \"Home Thermostat\" at any time."}
{"original_description": "Have your Aquanta mode follow that of your Ecobee thermostat mode. When Ecobee goes into Smart Home or Away mode, your Aquanta will be set to its corresponding Home or Away mode.", "trigger_channel": "ecobee", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ecobee.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Thermostat name\nThe name of the thermostat", "description": "The name of the thermostat", "details": {"Slug": "thermostat_name", "Filter code": "Ecobee.motionDetected.ThermostatName", "Type": "String", "Example": "Living Room"}}, {"section": "Ingredients", "title": "Thermostat identifier\nThe unique thermostat identifier", "description": "The unique thermostat identifier", "details": {"Slug": "thermostat_identifier", "Filter code": "Ecobee.motionDetected.ThermostatIdentifier", "Type": "String", "Example": "123456789012"}}, {"section": "Ingredients", "title": "Indoor humidity\nThe current indoor humidity % as measured by your ecobee", "description": "The current indoor humidity % as measured by your ecobee", "details": {"Slug": "indoor_humidity", "Filter code": "Ecobee.motionDetected.IndoorHumidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Desired humidity\nThe desired indoor humidity %", "description": "The desired indoor humidity %", "details": {"Slug": "desired_humidity", "Filter code": "Ecobee.motionDetected.DesiredHumidity", "Type": "String", "Example": "55"}}, {"section": "Ingredients", "title": "Desired indoor cool temperature\nThe desired indoor cool temperature", "description": "The desired indoor cool temperature", "details": {"Slug": "desired_indoor_cool_temperature", "Filter code": "Ecobee.motionDetected.DesiredIndoorCoolTemperature", "Type": "String", "Example": "70"}}, {"section": "Ingredients", "title": "Indoor temperature\nThe current indoor temperature as measured by your ecobee", "description": "The current indoor temperature as measured by your ecobee", "details": {"Slug": "indoor_temperature", "Filter code": "Ecobee.motionDetected.IndoorTemperature", "Type": "String", "Example": "74"}}, {"section": "Ingredients", "title": "Desired indoor heat temperature\nThe desired indoor heat temperature", "description": "The desired indoor heat temperature", "details": {"Slug": "desired_indoor_heat_temperature", "Filter code": "Ecobee.motionDetected.DesiredIndoorHeatTemperature", "Type": "String", "Example": "78"}}, {"section": "Ingredients", "title": "Event name\nThe name of the event", "description": "The name of the event", "details": {"Slug": "event_name", "Filter code": "Ecobee.motionDetected.EventName", "Type": "String", "Example": "smartHome"}}, {"section": "Ingredients", "title": "Thermostat time\nDate and time, in thermostat time, the measurement was taken.", "description": "Date and time, in thermostat time, the measurement was taken.", "details": {"Slug": "thermostat_time", "Filter code": "Ecobee.motionDetected.ThermostatTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe type of event.", "description": "The type of event.", "details": {"Slug": "event_type", "Filter code": "Ecobee.motionDetected.EventType", "Type": "String", "Example": "vacation"}}], "action_channel": "Aquanta", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aquanta.away", "Filter code method": "Aquanta.away.skip(string?: reason)", "Runtime method": "runAction(\"aquanta.away\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What device should be put into Away?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Start\nText input > Other", "description": "Text input > Other", "details": {"Label": "When should the Away start?", "Helper text": "Optional delay before the Away starts. For instance: '1 hour', '15 mins', or '2 days'. Leave blank for immediately.", "Slug": "start", "Required": "false", "Can have default value": "true", "Filter code method": "Aquanta.away.setStart(string: start)"}}, {"section": "Action fields", "title": "End\nText input > Other", "description": "Text input > Other", "details": {"Label": "How long should Away last?", "Helper text": "Duration of Away. For example: '2 hours', '1 day', or '15 mins'", "Slug": "end", "Required": "true", "Can have default value": "true", "Filter code method": "Aquanta.away.setEnd(string: end)"}}], "filter_code": "var EventType = Ecobee.motionDetected.EventType.toLowerCase();\nvar ThermostatName = Ecobee.motionDetected.ThermostatName;\nvar DeviceName = \"Office Water Heater\";\nvar currentTime = Meta.currentUserTime.hour();\n\nif (ThermostatName === \"Living Room\" && EventType.indexOf(\"smart home\") != -1) {\n  Aquanta.home.skip();\n} else if (ThermostatName === \"Living Room\" && EventType.indexOf(\"away\") != -1 && currentTime >= 8 && currentTime <= 17) {\n  Aquanta.away.setStart(\"30 minutes\");\n  Aquanta.away.setEnd(\"8 hours\");\n  Aquanta.away.skip();\n}", "intent": "When the Ecobee thermostat, located in the Living Room, switches to Smart Home mode at any time, immediately set the Aquanta device named \"Office Water Heater\" to its Home mode. If the Ecobee thermostat goes into Away mode between 08:00 and 17:00, delay the start of the Away mode on the Aquanta device by 30 minutes and have it last for 8 hours.", "filter_code_old": "var EventType = Ecobee.motionDetected.EventType.toLowerCase()\nif (EventType.indexOf(\"away\") != -1) {\n  Aquanta.cancelAway.skip()\n} else if (EventType.indexOf(\"home\") != -1) {\n  Aquanta.away.skip()\n}\n\n"}
{"original_description": "Whenever the price exceeds my threshold, set my ecobee thermostat.\n\nPart 1 of 2 applets to automate your thermostat's response when the price changes.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_indefinite", "Filter code method": "Ecobee.holdIndefinite.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_indefinite\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "var averagePrice = parseFloat(ComEd.averagePriceChange.AveragePrice);\nvar fromHour = parseInt(ComEd.averagePriceChange.FromHour);\nvar toHour = parseInt(ComEd.averagePriceChange.ToHour);\nvar currentHour = Meta.currentUserTime.hour();\n\nif (averagePrice > 15 && \n    ComEd.averagePriceChange.which_season === \"summer\" && \n    currentHour >= 7 && currentHour <= 22) {\n  Ecobee.holdIndefinite.setDesiredTemperature(72);\n} else {\n  Ecobee.holdIndefinite.skip(\"Conditions not met.\");\n}", "intent": "When the average price exceeds 15 cents during the summer season, between 7:00 AM and 10:00 PM, set my ecobee thermostat to 72°F."}
{"original_description": "Set an ecobee Comfort Profile for before, during, or after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.climate_hours", "Filter code method": "Ecobee.climateHours.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.climate_hours\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Hold hours\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of Hours", "Helper text": "The number of hours to hold for", "Slug": "hold_hours", "Required": "true", "Can have default value": "true", "Filter code method": "Ecobee.climateHours.setHold Hours(string: hold_hours)"}}, {"section": "Action fields", "title": "Comfort profile\nDropdown list", "description": "Dropdown list", "details": {"Label": "Comfort Profile", "Helper text": "Select which comfort profile to use for the hold.", "Slug": "comfort_profile", "Required": "true", "Can have default value": "false"}}], "filter_code": "var startTime = ComEd.ptsSavingsHours.StartTime;\nvar endTime = ComEd.ptsSavingsHours.EndTime;\nvar stage = ComEd.ptsSavingsHours.Stage;\n\nif (stage === \"Scheduled\" && startTime.getHours() === 16 && endTime.getHours() === 19) {\n  var holdHoursBefore = 2;\n  var holdHoursDuring = (endTime - startTime) / 3600000;\n  var holdHoursAfter = 1;\n  \n  Ecobee.climateHours.setHoldHours(holdHoursBefore + holdHoursDuring + holdHoursAfter);\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n  Ecobee.climateHours.setThermostat(\"Living Room Thermostat\");\n}", "intent": "Set the ecobee Comfort Profile to \"Home\" when ComEd PTS Hours are scheduled to start at 4:00 PM and end at 7:00 PM, using the thermostat named \"Living Room Thermostat\", for a period of 2 hours before the event starts, during the event, and 1 hour after the event ends."}
{"original_description": "Set EcoBee thermostat to Home or Away based on a change in armed state of your Blue by ADT system. You may select a specific arm type such as Armed Away, Armed Stay, Armed Instant, or Armed - Any mode for your Blue by ADT system. Next, select your Thermostat Name and select Comfort Profile to away, which will hold your comfort profile until next transition. Optionally, you may also select your Arm Type as a Disarmed state, select your Thermostat Name and set Comfort Profile to home.", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.arm_state_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Arm type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Arm Type?", "Slug": "arm_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.armStateChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.armStateChange.EventType", "Type": "String", "Example": "System Disarmed"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.armStateChange.FormattedMessage", "Type": "String", "Example": "Disarmed"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_next_transition", "Filter code method": "Ecobee.holdNextTransition.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_next_transition\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  Ecobee.holdNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.holdNextTransition.setHoldType(\"away\");\n} else if (Bluebyadt.armStateChange.EventType === \"Disarmed\") {\n  Ecobee.holdNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.holdNextTransition.setHoldType(\"home\");\n} else {\n  Ecobee.holdNextTransition.skip(\"Arm type is not Armed Away or Disarmed.\");\n}", "intent": "When the Blue by ADT system is armed away, set the Ecobee thermostat named \"Living Room Thermostat\" to Away mode and hold the comfort profile until the next transition. If the system is disarmed, set the same thermostat to Home mode."}
{"original_description": "Automatically adjust my ecobee Thermostat to my preferred comfort profile when PTS Hours begin. This is an alternative option to setting the temperature setpoint directly.\n \nPart 2 (option b) of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.climate_hours", "Filter code method": "Ecobee.climateHours.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.climate_hours\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Hold hours\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of Hours", "Helper text": "The number of hours to hold for", "Slug": "hold_hours", "Required": "true", "Can have default value": "true", "Filter code method": "Ecobee.climateHours.setHold Hours(string: hold_hours)"}}, {"section": "Action fields", "title": "Comfort profile\nDropdown list", "description": "Dropdown list", "details": {"Label": "Comfort Profile", "Helper text": "Select which comfort profile to use for the hold.", "Slug": "comfort_profile", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && ComEd.ptsSavingsHours.StartTime.getHours() === 4 && ComEd.ptsSavingsHours.StartTime.getMinutes() === 17 && ComEd.ptsSavingsHours.StartTime.getSeconds() === 6) {\n  Ecobee.climateHours.setHoldHours(\"4\");\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n}", "intent": "Adjust my ecobee Thermostat to the \"Home\" comfort profile when ComEd PTS Hours are scheduled to start at 04:17:06, holding for 4 hours."}
{"original_description": "Want to share new pics with your community, fans, or customers? But not *every* pic? Use this Applet to selectively post — just choose the hashtag and when you use it, that photo will be added to an album on your FB page (the hashtag will be removed from the caption, too). ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Facebook Pages", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "facebook_pages.create_photo_page", "Filter code method": "FacebookPages.createPhotoPage.skip(string?: reason)", "Runtime method": "runAction(\"facebook_pages.create_photo_page\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setMessage(string: message)"}}, {"section": "Action fields", "title": "Album\nText input > Other", "description": "Text input > Other", "details": {"Label": "Album name", "Helper text": "Provide the name of an existing album, or leave blank for no album. If a non-existent album name is provided, you'll receive <a href=\"https://help.ifttt.com/hc/en-us/articles/5343334604187\" target=\"_blank\">this error</a>", "Slug": "album", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setAlbum(string: album)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#communityshare\")) {\n  var captionWithoutTag = Instagram.newPhotoByYouTagged.CaptionNoTag;\n  FacebookPages.createPhotoPage.setPhotoUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n  FacebookPages.createPhotoPage.setMessage(captionWithoutTag);\n  FacebookPages.createPhotoPage.setAlbum(\"Community Updates\");\n} else {\n  FacebookPages.createPhotoPage.skip(\"Post does not contain #communityshare hashtag.\");\n}", "intent": "When I post a new photo on Instagram with the hashtag #communityshare, add the photo to the \"Community Updates\" album on my Facebook page, and remove the hashtag from the caption."}
{"original_description": "Close the garage door when leaving the area in your Zubie equipped car.", "trigger_channel": "Zubie", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zubie.departures"}, "trigger_details": [{"section": "Trigger fields", "title": "Vehicle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which vehicle?", "Helper text": "Select the vehicle to trigger the event", "Slug": "vehicle", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Place\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which place?", "Helper text": "Which place? (select from the list of Places defined in Zubie)", "Slug": "place", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event details\nA brief text summary of the departure event", "description": "A brief text summary of the departure event", "details": {"Slug": "event_details", "Filter code": "Zubie.departures.EventDetails", "Type": "String", "Example": "Dad's Honda arrived at Home"}}, {"section": "Ingredients", "title": "Event time\nDate and time of the trip", "description": "Date and time of the trip", "details": {"Slug": "event_time", "Filter code": "Zubie.departures.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Place\nThe place name associated with this location within Zubie", "description": "The place name associated with this location within Zubie", "details": {"Slug": "place", "Filter code": "Zubie.departures.Place", "Type": "String", "Example": "Home"}}, {"section": "Ingredients", "title": "Vehicle\nName of the vehicle defined within Zubie", "description": "Name of the vehicle defined within Zubie", "details": {"Slug": "vehicle", "Filter code": "Zubie.departures.Vehicle", "Type": "String", "Example": "1979 Pinto"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Zubie.departures.Place === \"Home\" && Zubie.departures.Vehicle === \"1979 Pinto\") {\n  Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door.\");\n}", "intent": "Close the garage door identified as \"Main Garage Door\" when departing from the place named \"Home\" in the 1979 Pinto vehicle."}
{"original_description": "Log your arrivals and departures by recording garage door events in Day One", "trigger_channel": "Garadget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "garadget.door_opens"}, "trigger_details": [{"section": "Trigger fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Garadget.doorOpens.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "if (Garadget.doorOpens.DoorId === \"front\") {\n  DayOne.createJournalEntry.setBody(\"Front garage door opened at \" + Garadget.doorOpens.CreatedAt);\n  DayOne.createJournalEntry.setTags(\"garage door, arrival, home\");\n  DayOne.createJournalEntry.setLatitude(37.7749);\n  DayOne.createJournalEntry.setLongitude(-122.4194);\n  DayOne.createJournalEntry.setPlacename(\"Home\");\n  DayOne.createJournalEntry.setImage(\"https://example.com/garage-door-image.jpg\"); // replace with actual image URL\n}", "intent": "When the front garage door opens, as detected by Garadget, create a new journal entry in my \"Home\" Day One journal with the tags \"garage door\", \"arrival\", and \"home\" at the location of my house (latitude: 37.7749, longitude: -122.4194), including an image of the garage door, and log the event with the text \"Front garage door opened at {created_at}\"."}
{"original_description": "Automatically close garage door when Bouncie-enabled vehicle exits geo-circle", "trigger_channel": "Bouncie", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bouncie.geo_circle_exit"}, "trigger_details": [{"section": "Trigger fields", "title": "Circle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Circle", "Helper text": "The circle that was exited", "Slug": "circle", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Bouncie.geoCircleExit.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Time\nThe time the bouncie device recorded the breach.", "description": "The time the bouncie device recorded the breach.", "details": {"Slug": "time", "Filter code": "Bouncie.geoCircleExit.Time", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Vehicle name\nThe vehicle name of the vehicle that exited.", "description": "The vehicle name of the vehicle that exited.", "details": {"Slug": "vehicle_name", "Filter code": "Bouncie.geoCircleExit.VehicleName", "Type": "String", "Example": "Marley's Fiat"}}, {"section": "Ingredients", "title": "Circle name\nThe name of the circle that was exited", "description": "The name of the circle that was exited", "details": {"Slug": "circle_name", "Filter code": "Bouncie.geoCircleExit.CircleName", "Type": "String", "Example": "Home"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Bouncie.geoCircleExit.VehicleName === \"Marley's Fiat\" && \n    Bouncie.geoCircleExit.CircleName === \"Home\" && \n    hour >= 6 && hour < 22) {\n  Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met.\");\n}", "intent": "When Marley's Fiat exits the Home circle, as recorded by Bouncie between 06:00 and 22:00, automatically close the Main Garage Door using Garadget."}
{"original_description": "This Applet will save all Longreads to your Instapaper. Good luck keeping up! 📃⏳\n\nUse Pocket? Try this Applet instead: https://ift.tt/2sMZLg8", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads_in_books"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "Instapaper.saveItem.setUrl(Longreads.anyNewPostOnLongreadsInBooks.EntryUrl);\nInstapaper.saveItem.setTitle(Longreads.anyNewPostOnLongreadsInBooks.EntryTitle);\nInstapaper.saveItem.setDescription(Longreads.anyNewPostOnLongreadsInBooks.EntryContent);\n// Note: The provided JSON does not contain methods for setting folder or tags directly in the filter code.\n// However, based on the action details, we can assume the following:\n// Instapaper.saveItem.setFolder(\"My Favorites\"); // This line is commented out because there's no direct method provided for it.\n// Instapaper.saveItem.setTags([\"Longread\", \"Interesting\"]); // Similarly, this line is commented out due to lack of a direct method.\n\n// Since direct methods for setting folder and tags are not provided in the action details,\n// we proceed with what is available, focusing on saving the item:\nInstapaper.saveItem();", "intent": "Save the article titled \"Launch Day!\" from Longreads to Instapaper with the URL http://blog.ifttt.com/coming-soon, and add it to the folder \"My Favorites\" with the tags \"Longread\" and \"Interesting\"."}
{"original_description": "Let mother nature do the work. Whenever the sun rises, your Philips Hue bulbs will automatically turn off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempCelsius === \"18\") {\n  PhilipsHue.turnOffAllHue.skip(\"Sun has risen and it's sunny with a temperature of 18 degrees Celsius.\");\n}", "intent": "When the sun rises at your location, with a current temperature of 18 degrees Celsius and a sunny condition, turn off all Philips Hue bulbs in the living room."}
{"original_description": "Pick the days of the week and time to send encouraging messages like \"Lunch break, everyone!\" or \"Now back to work, you maggots!\" to your coworkers in a Telegram chat.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var hour = DateAndTime.everyWeekdayAt.CheckTime.hour();\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar chatId = \"YOUR_TELEGRAM_CHAT_ID\"; // Replace with the actual chat ID\n\nif (hour === 12 && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  Telegram.sendMessage.setText(\"Lunch break, everyone!\");\n  Telegram.sendMessage.setChatId(chatId);\n} else if (hour === 13 && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  Telegram.sendMessage.setText(\"Now back to work, you maggots!\");\n  Telegram.sendMessage.setChatId(chatId);\n} else {\n  Telegram.sendMessage.skip(\"Not the scheduled time or day for a message.\");\n}", "intent": "Send a message saying \"Lunch break, everyone!\" to the #general Telegram chat every Monday, Tuesday, Wednesday, Thursday, and Friday at 12:00 PM, and send a message saying \"Now back to work, you maggots!\" to the same chat every Monday, Tuesday, Wednesday, Thursday, and Friday at 1:00 PM."}
{"original_description": "Your bot will turn on at sunset. Let mother nature do the work!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_on_bot", "Filter code method": "Switchbot.turnOnBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_on_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt.includes(new Date().toISOString().split('T')[0]) && parseInt(Weather.sunSets.TempFahrenheit) >= 72) {\n  Switchbot.turnOnBot.setChoseADevice(\"Living Room Bot\");\n} else {\n  Switchbot.turnOnBot.skip(\"Conditions not met to turn on the Living Room Bot.\");\n}", "intent": "When the sunset at your location is today and the current temperature in degrees Fahrenheit is 72 or higher, turn on the SwitchBot device named \"Living Room Bot\"."}
{"original_description": "Whenever you upload a public photo to Flickr, a copy will be saved to a folder in Dropbox. Keep in mind that private photo uploads will not work for this Applet.\n", "trigger_channel": "Flickr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flickr.any_new_public_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Flickr.anyNewPublicPhoto.Title", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Description\nOptional photo description.", "description": "Optional photo description.", "details": {"Slug": "Description", "Filter code": "Flickr.anyNewPublicPhoto.Description", "Type": "String", "Example": "Taken at my birthday party!"}}, {"section": "Ingredients", "title": "Flickr url\nThe long URL to the photo's Flickr page.", "description": "The long URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrl", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrl", "Type": "String", "Example": "http://www.flickr.com/photos/sh4de/5197127926/"}}, {"section": "Ingredients", "title": "Flickr url short\nThe shortened URL to the photo's Flickr page.", "description": "The shortened URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrlShort", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrlShort", "Type": "String", "Example": "http://flic.kr/p/4mdhBE"}}, {"section": "Ingredients", "title": "Source url\nURL to the largest available flickr image file.", "description": "URL to the largest available flickr image file.", "details": {"Slug": "SourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.SourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Original source url\nURL to the orginal image file if available.", "description": "URL to the orginal image file if available.", "details": {"Slug": "OriginalSourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.OriginalSourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Uploaded date\nDate and time the photo was uploaded.", "description": "Date and time the photo was uploaded.", "details": {"Slug": "UploadedDate", "Filter code": "Flickr.anyNewPublicPhoto.UploadedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Taken date\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "Flickr.anyNewPublicPhoto.TakenDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Tags\nTags added to the photo.", "description": "Tags added to the photo.", "details": {"Slug": "Tags", "Filter code": "Flickr.anyNewPublicPhoto.Tags", "Type": "String", "Example": "baby, pumpkin"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 20) {\n  if (Flickr.anyNewPublicPhoto.Title === \"Vacation Memories\" \n      && Flickr.anyNewPublicPhoto.Tags.includes(\"beach\") \n      && Flickr.anyNewPublicPhoto.Tags.includes(\"summer\") \n      && Flickr.anyNewPublicPhoto.TakenDate.includes(\"August 15, 2022\")) {\n    Dropbox.addFileFromUrl.setUrl(Flickr.anyNewPublicPhoto.SourceUrl);\n    Dropbox.addFileFromUrl.setFilename(\"Summer_Vacation_Picture\");\n    Dropbox.addFileFromUrl.setPath(\"/Photos/Vacation\");\n  } else {\n    Dropbox.addFileFromUrl.skip(\"Photo does not match the specified criteria.\");\n  }\n} else {\n  Dropbox.addFileFromUrl.skip(\"Upload is outside the specified time range (08:00-20:00).\");\n}", "intent": "When a new public photo titled \"Vacation Memories\" with the tags \"beach, summer\" is uploaded to Flickr between 08:00 and 20:00, save a copy of the image from the source URL http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg to the Dropbox folder path \"/Photos/Vacation\" with the filename \"Summer_Vacation_Picture\" if the photo was taken on August 15, 2022."}
{"original_description": "This applet lets you store in Apilio if you are connected to a specific WiFi. Use this to know for example if you are at home, or at work, or if you have left a specific place. ", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"is_at_home\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Conditions not met to toggle is_at_home variable.\");\n}", "intent": "When my Google Pixel 7 connects to the WiFi network named \"HomeNetwork\" at any time, toggle the Apilio variable identified as \"is_at_home\"."}
{"original_description": "This applet lets you store in Apilio if you have disconnected from a specific WiFi. Use this to know for example if you are at home, or at work, or if you have left a specific place. ", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"IsAtHome\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Not the HomeNetwork or not the Google Pixel 7 device.\");\n}", "intent": "When my Google Pixel 7 device disconnects from the \"HomeNetwork\" WiFi at any time, toggle the Apilio variable identified as \"IsAtHome\" to update my presence status."}
{"original_description": "Work smarter, not harder! Use this Applet to automatically upload and move starred files (from Drive) to a Dropbox folder", "trigger_channel": "Google Drive", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_drive.new_starred_file"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Drive folder path", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Documents/Photos/Receipts&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "filename", "Filter code": "GoogleDrive.newStarredFile.Filename", "Type": "String", "Example": "filename"}}, {"section": "Ingredients", "title": "Path\nThe path of the file.", "description": "The path of the file.", "details": {"Slug": "path", "Filter code": "GoogleDrive.newStarredFile.Path", "Type": "String", "Example": "/IFTTT/sample.txt"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "file_url", "Filter code": "GoogleDrive.newStarredFile.FileUrl", "Type": "File URL", "Example": "https://google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time file was created.", "description": "Date and time file was created.", "details": {"Slug": "created_at", "Filter code": "GoogleDrive.newStarredFile.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "if (GoogleDrive.newStarredFile.Path === \"/Documents/Important\") {\n  Dropbox.addFileFromUrl.setUrl(GoogleDrive.newStarredFile.FileUrl);\n  Dropbox.addFileFromUrl.setFilename(GoogleDrive.newStarredFile.Filename);\n  Dropbox.addFileFromUrl.setPath(\"/IFTTT/StarredFiles\");\n} else {\n  Dropbox.addFileFromUrl.skip(\"File is not from the /Documents/Important folder.\");\n}", "intent": "When a new file is starred in the Google Drive folder path \"/Documents/Important\", automatically upload it to Dropbox using the file's public URL and add it to the \"/IFTTT/StarredFiles\" folder with the filename unchanged."}
{"original_description": "Press a physical Flic button at home or at work. Press the button when you want attention and flash your MagicHue lights in a color you choose. Blink green when you closed a sale. Blink Red when it's time for meeting. Maybe orange when it's lunch time?", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.BlinkLights", "Filter code method": "Magichue.blinkLights.skip(string?: reason)", "Runtime method": "runAction(\"magichue.BlinkLights\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Keep after blink\nDropdown list", "description": "Dropdown list", "details": {"Label": "Change new status after blink?", "Helper text": "If yes, the light will change to new color and brightness after blink, otherwise will change to original on-off state and color.", "Slug": "keep_after_blink", "Required": "true", "Can have default value": "true", "Filter code method": "Magichue.blinkLights.setKeep After Blink(string: keep_after_blink)"}}], "filter_code": "if (Flic.click.ButtonName === \"OfficeButton\" && Flic.click.ClickType === \"double_click\") {\n  Magichue.blinkLights.setWhichLights(\"living room\");\n  Magichue.blinkLights.setNumberOfBlinks(3);\n  Magichue.blinkLights.setColor(\"green\");\n  Magichue.blinkLights.setBrightness(80);\n  Magichue.blinkLights.setKeepAfterBlink(false);\n} else {\n  Magichue.blinkLights.skip(\"Flic button 'OfficeButton' was not double-clicked.\");\n}", "intent": "When the Flic button named \"OfficeButton\" is double-clicked, blink the living room lights green three times with a brightness of 80%, and then return to their original state."}
{"original_description": "Press a physical Flic button at home or at work. Press the button when you want attention and flash your MagicLights in a color you choose. Blink green when you closed a sale. Blink Red when it's time for meeting. Maybe orange when it's lunch time?", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "MagicLight WiFi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "MagicLight.BlinkLights", "Filter code method": "MagicLight.blinkLights.skip(string?: reason)", "Runtime method": "runAction(\"MagicLight.BlinkLights\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level?", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Keep after blink\nDropdown list", "description": "Dropdown list", "details": {"Label": "Change new status after blink?", "Helper text": "If yes, the will change to new color and brightness after blink, otherwise will change to original on-off state and color.", "Slug": "keep_after_blink", "Required": "true", "Can have default value": "true", "Filter code method": "MagicLight.blinkLights.setKeep After Blink(string: keep_after_blink)"}}], "filter_code": "if (Flic.click.ButtonName === \"OfficeButton\" && Flic.click.ClickType === \"double_click\") {\n  if (Meta.currentUserTime.hour() >= 12 && Meta.currentUserTime.hour() < 13) {\n    MagicLight.blinkLights.setKeepAfterBlink(\"true\");\n    MagicLight.blinkLights.setColor(\"orange\");\n    MagicLight.blinkLights.setBrightness(100);\n    MagicLight.blinkLights.setNumberOfBlinks(0); // Turn on for 5 minutes\n    MagicLight.blinkLights.skip(\"Lunchtime\");\n    setTimeout(function() {\n      MagicLight.blinkLights.setKeepAfterBlink(\"false\");\n      MagicLight.blinkLights.setColor(\"green\");\n      MagicLight.blinkLights.setBrightness(100);\n      MagicLight.blinkLights.setNumberOfBlinks(3); // Blink 3 times\n    }, 300000); // 5 minutes\n  } else {\n    MagicLight.blinkLights.setKeepAfterBlink(\"false\");\n    MagicLight.blinkLights.setColor(\"green\");\n    MagicLight.blinkLights.setBrightness(100);\n    MagicLight.blinkLights.setNumberOfBlinks(3); // Blink 3 times\n  }\n}", "intent": "When the Flic button named \"OfficeButton\" is double-clicked, flash the living room MagicLights 3 times in green to signal a closed sale, and if it's between 12:00 and 13:00, change the color to orange for 5 minutes to indicate lunchtime, then revert to the original state."}
{"original_description": "When you leave for work or head to bed, start your iRobot so you come home or wake up to a clean floor. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.issues"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.issues.EventType", "Type": "String", "Example": "System Armed"}}, {"section": "Ingredients", "title": "Formatted message\nThis describes the details of the event", "description": "This describes the details of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.issues.FormattedMessage", "Type": "String", "Example": "System Armed Away by Master User"}}, {"section": "Ingredients", "title": "Timestamp\nThis is the time that the event occurred", "description": "This is the time that the event occurred", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.issues.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.issues.EventType === \"System Armed Away\" && Bluebyadt.issues.FormattedMessage.includes(\"System Armed Away by Master User\")) {\n  Irobot.startRobot.setRobotName(\"Home Cleaner\");\n} else {\n  Irobot.startRobot.skip(\"Conditions not met to start the robot.\");\n}", "intent": "When the Blue by ADT system is armed away, as indicated by the event type \"System Armed Away\" and a formatted message like \"System Armed Away by Master User\", start the iRobot named \"Home Cleaner\" so that the floor is clean when you return home."}
{"original_description": "When you leave for work or head to bed, start your Neato so you come home or wake up to a clean floor. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.issues"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.issues.EventType", "Type": "String", "Example": "System Armed"}}, {"section": "Ingredients", "title": "Formatted message\nThis describes the details of the event", "description": "This describes the details of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.issues.FormattedMessage", "Type": "String", "Example": "System Armed Away by Master User"}}, {"section": "Ingredients", "title": "Timestamp\nThis is the time that the event occurred", "description": "This is the time that the event occurred", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.issues.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Neato", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "neato.start_cleaning", "Filter code method": "Neato.startCleaning.skip(string?: reason)", "Runtime method": "runAction(\"neato.start_cleaning\", {})"}, "action_details": [{"section": "Action fields", "title": "Select a robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a robot", "Slug": "select_a_robot", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.issues.FormattedMessage === \"System Armed Away by Master User\") {\n  Neato.startCleaning.setSelectARobot(\"Botvac D7 Connected\");\n} else {\n  Neato.startCleaning.skip(\"Not armed away by Master User\");\n}", "intent": "When the Blue by ADT system is armed away by the Master User, start the Neato Botvac D7 Connected robot to clean the floor."}
{"original_description": "Set your Security Mode switch to \"Away\" automatically at a specific time every day. Please make sure that your Bosma devices are set up and connected to the internet.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.switch_security_mode", "Filter code method": "Bosma.switchSecurityMode.skip(string?: reason)", "Runtime method": "runAction(\"bosma.switch_security_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Family\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which family do you want to control?", "Slug": "family", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Security Mode do you want to switch to?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Bosma.switchSecurityMode.setMode(string: mode)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 8 || DateAndTime.everyDayAt.CheckTime.minute() !== 0) {\n  Bosma.switchSecurityMode.skip(\"Not 8:00 AM\");\n} else {\n  Bosma.switchSecurityMode.setMode(\"Away\");\n  Bosma.switchSecurityMode.setFamily(\"Home\");\n}", "intent": "Set your Security Mode switch to \"Away\" automatically every day at 8:00 AM for the \"Home\" family."}
{"original_description": "Your dryer will turn on and air fluff your clothes every morning at a specified day and time of the week. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Home Connect Dryer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_dryer.dryer_start_selected_program", "Filter code method": "HcDryer.dryerStartSelectedProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_dryer.dryer_start_selected_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dryer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar time = DateAndTime.everyWeekdayAt.time;\n\nif (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\") {\n  if (time === \"8:00 AM\") {\n    HcDryer.dryerStartSelectedProgram.setHaId(\"laundry_room_dryer\");\n  } else {\n    HcDryer.dryerStartSelectedProgram.skip(\"Not the correct time\");\n  }\n} else {\n  HcDryer.dryerStartSelectedProgram.skip(\"Not a scheduled day\");\n}", "intent": "Turn on the Home Connect Dryer, which is located in the laundry room, every Monday, Wednesday, and Friday at 8:00 AM to air fluff the clothes."}
{"original_description": "When the current weather condition is changed to Rain, Snow, Cloudy or Clear, a new condition will be displayed on Glance Clock.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if ([\"Rain\", \"Snow\", \"Cloudy\", \"Clear\"].includes(Weather.currentConditionIs.Condition)) {\n  Glanceclock.notice.setText(\"Weather update: the current condition is \" + Weather.currentConditionIs.Condition + \" with a temperature of \" + Weather.currentConditionIs.TempCelsius + \"°C\");\n  Glanceclock.notice.setSound(\"gentle\");\n  Glanceclock.notice.setAnimation(\"fade-in\");\n  Glanceclock.notice.setColor(\"blue\");\n} else {\n  Glanceclock.notice.skip(\"Current weather condition is not Rain, Snow, Cloudy, or Clear.\");\n}", "intent": "When the current weather condition in New York changes to Rain, Snow, Cloudy, or Clear, display a new notice on my Glance Clock with the message \"Weather update: the current condition is Sunny with a temperature of 18°C\" and play a gentle sound with a fade-in animation in blue color."}
{"original_description": "Every hour between 10am and 5pm, get eight notifications to drink a glass of water.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = DateAndTime.everyHourAt.CheckTime.hour();\nif (hour >= 10 && hour <= 17) {\n  for (var i = 0; i < 8; i++) {\n    IfNotifications.sendNotification.setMessage(\"Drink a glass of water\");\n    IfNotifications.sendNotification();\n  }\n}", "intent": "Every hour between 10am and 5pm, send a notification with the message \"Drink a glass of water\" eight times."}
{"original_description": "Whenever the temperature drops below the value you provide, the current temperature will be displayed on your Glance Clock.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5 && Weather.currentTemperatureRisesAbove.location === \"New York\") {\n  Glanceclock.notice.setText(\"Current temperature: \" + Weather.currentTemperatureRisesAbove.TempCelsius + \"°C\");\n  Glanceclock.notice.setAnimation(\"Red\");\n  Glanceclock.notice.setSound(\"Beep\");\n} else {\n  Glanceclock.notice.skip(\"Temperature not below 5°C or not in New York.\");\n}", "intent": "When the temperature drops below 5°C in New York, display the current temperature in Celsius on my Glance Clock with a red animation and a beep sound."}
{"original_description": "Whenever the temperature rises above the value you provide, it will be displayed on your Glance Clock.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.location === \"New York\" && Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Glanceclock.notice.setText(\"It's getting hot!\");\n  Glanceclock.notice.setAnimation(\"sunny\");\n  Glanceclock.notice.setColor(\"red\");\n} else {\n  Glanceclock.notice.skip(\"Conditions not met.\");\n}", "intent": "When the temperature in New York rises above 75 degrees Fahrenheit, display \"It's getting hot!\" on my Glance Clock with a sunny animation and a red color."}
{"original_description": "Every single day at a specific time set by you, show the current time on your Glance Clock.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 7 || DateAndTime.everyDayAt.CheckTime.minute() !== 0) {\n  Glanceclock.notice.skip(\"Not 7:00 AM\");\n} else {\n  Glanceclock.notice.setText(\"Current time: \" + DateAndTime.everyDayAt.CheckTime);\n  Glanceclock.notice.setSound(\"beep\");\n  Glanceclock.notice.setAnimation(\"fade-in\");\n  Glanceclock.notice.setColor(\"red\");\n}", "intent": "Every day at 7:00 AM, display the current time on my Glance Clock with a beep sound and a fade-in animation, using the default clock and red color."}
{"original_description": "Show a message on your Glance Clock every time your SmartThings device is opened", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Glanceclock.notice.setText(\"Device Opened\");\n  Glanceclock.notice.setSound(\"beep\");\n  Glanceclock.notice.setAnimation(\"flash\");\n  Glanceclock.notice.setColor(\"red\");\n} else {\n  Glanceclock.notice.skip(\"Not the Bedroom contact device.\");\n}", "intent": "Show a message \"Device Opened\" on your Glance Clock, with a beep sound and flash animation in red color, every time the \"Bedroom contact\" SmartThings device is opened."}
{"original_description": "Every day between 10am and 5pm, receive eight notifications to drink a glass of water and add a new row to a Google Sheets spreadsheet. Track how much water you drink by editing the spreadsheet.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var currentTime = DateAndTime.everyHourAt.CheckTime;\nvar currentHour = currentTime.hour();\nif (currentHour >= 10 && currentHour <= 17) {\n  IfNotifications.sendNotification.setMessage(\"Drink a glass of water!\");\n  IfNotifications.sendNotification.skip(); // This line should actually be removed to send the notification, but it's here for demonstration purposes.\n  \n  // Since the actual Google Sheets API integration details are not provided in the trigger or action sections,\n  // we'll simulate adding a new row to the \"Water Intake Tracker\" spreadsheet with the current date, time, and amount of water consumed (1 glass).\n  // In real scenarios, you would use the Google Sheets API endpoint provided by IFTTT.\n  var newRowData = {\n    \"Date\": currentTime.date(),\n    \"Time\": currentTime.time(),\n    \"Water Consumed\": \"1 glass\"\n  };\n  \n  // Simulating the addition of a new row to the spreadsheet (actual implementation depends on Google Sheets API details).\n  console.log(\"Adding new row to Water Intake Tracker:\", newRowData);\n}", "intent": "Every day between 10:00 AM and 5:00 PM, send a notification to drink a glass of water every hour, for a total of 8 reminders, and simultaneously update a Google Sheets spreadsheet named \"Water Intake Tracker\" by adding a new row with the current date, time, and amount of water consumed, which is set to 1 glass."}
{"original_description": " Enter the search terms that matter to you and get the latest news on those topics in a Wednesday morning digest. The Hill is weekly political paper that keeps Congress in the know — and can keep you in the know, too!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() === \"Wednesday\" && Meta.currentUserTime.hour() === 8) {\n  var message = \"Latest news from The Hill's RSS feed:<br>\";\n  message += \"<a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryTitle + \"</a><br>\";\n  message += Feed.newFeedItem.EntryContent;\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"8:00 AM\");\n  EmailDigest.sendWeeklyEmail.setTitle(\"The Hill's Weekly Political Digest\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Wednesday morning at 8:00 AM.\");\n}", "intent": "Send a weekly email digest every Wednesday morning at 8:00 AM with the title \"The Hill's Weekly Political Digest\" and a message containing the latest news from The Hill's RSS feed, including the entry title, entry URL, and entry content, to subscribers who are interested in staying up-to-date on the latest political news."}
{"original_description": "The Pew Research Center is a nonpartisan fact tank that conducts public polls, demographic research, content analysis and more. Stay up to date on their latest findings with a weekly email, delivered to your inbox every Wednesday morning. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() === \"Wednesday\" && Meta.currentUserTime.hour() === 8) {\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendWeeklyEmail.setTitle(\"Pew Research Center Weekly Updates\");\n  var message = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItem.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItem.EntryContent;\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  EmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.FeedUrl);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Wednesday at 08:00\");\n}", "intent": "Send a weekly email digest to my inbox every Wednesday morning at 08:00 with updates from the Pew Research Center's RSS feed, including the entry title, entry URL, and entry content, and set the email title to \"Pew Research Center Weekly Updates\" with a link to the feed's regular page."}
{"original_description": "The show airs on Wednesday — so every Thursday you'll get an email with the latest GIFs tagged RHONY. Turtle time!", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (day === 4 && hour === 10 && minute === 0) {\n  var tags = \"RHONY\";\n  var query = \"https://giphy.com/search/\" + tags;\n  var giphyUrl = \"https://giphy.com\";\n\n  var createdDate = Giphy.search.CreatedDate;\n  var wednesdayEpoch = new Date().setDate(new Date().getDate() - 1);\n  var wednesdayDate = new Date(wednesdayEpoch).toISOString();\n\n  if (createdDate > wednesdayDate) {\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Thursday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n    EmailDigest.sendWeeklyEmail.setTitle(\"RHONY GIFs of the Week\");\n    EmailDigest.sendWeeklyEmail.setMessage(\"<p>Turtle time! Check out these funny RHONY GIFs from this week:</p><br>\" + Giphy.search.EmailHTML);\n    EmailDigest.sendWeeklyEmail.setUrl(query);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No new RHONY GIFs were created after Wednesday.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not Thursday at 10:00 AM.\");\n}", "intent": "Every Thursday at 10:00 AM, send a weekly email digest with the subject \"RHONY GIFs of the Week\" to subscribers, including an inline GIF and a link to the Giphy page of the latest GIFs tagged \"RHONY\" that were created after Wednesday, along with a brief message \"Turtle time! Check out these funny RHONY GIFs from this week:\"."}
{"original_description": "This Applet works with NASA JPL's news feed. It'll gather up all the robotic space goodness they're posting and send it to you in a Friday email digest. See you in the stars! 🌟", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 5) { // 5 represents Friday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (hour !== 10 || minute !== 0) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 10:00 AM.\");\n}\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"NASA JPL Robotic Space News\");\nvar message = \"New NASA JPL Robotic Space News:<br>\" + Feed.newFeedItem.EntryTitle + \"<br>\" + Feed.newFeedItem.EntryContent + \"<br>Read more at: \" + Feed.newFeedItem.EntryUrl;\nif (Feed.newFeedItem.EntryImageUrl !== \"\") {\n  message += \"<br><img src='\" + Feed.newFeedItem.EntryImageUrl + \"'>\";\n}\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.EntryUrl);", "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"NASA JPL Robotic Space News\" and a message containing the EntryTitle, EntryContent, and EntryUrl of new feed items from the NASA JPL news feed, including an image from the EntryImageUrl if available."}
{"original_description": "When you set up the Applet just pick the board and your \"Done\" list, and whenever you move a card there it'll be logged in a Google Drive spreadsheet (An IFTTT folder will be created in your drive). Then you can gaze back at your accomplishments with awe, at your leisure. You did it!", "trigger_channel": "Trello", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "trello.card_added_to_list"}, "trigger_details": [{"section": "Trigger fields", "title": "Board\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "List name\nText input", "description": "Text input", "details": {"Label": "List name", "Helper text": "Type a list name as it appears in your Trello board", "Slug": "list_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe title of the card.", "description": "The title of the card.", "details": {"Slug": "title", "Filter code": "Trello.cardAddedToList.Title", "Type": "String", "Example": "Book flights"}}, {"section": "Ingredients", "title": "Description\nThe description of the card.", "description": "The description of the card.", "details": {"Slug": "description", "Filter code": "Trello.cardAddedToList.Description", "Type": "String", "Example": "Check various airline websites to find the best deal."}}, {"section": "Ingredients", "title": "Creator full name\nThe full name of the member who added the card.", "description": "The full name of the member who added the card.", "details": {"Slug": "creator_name", "Filter code": "Trello.cardAddedToList.CreatorFullName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Creator username\nThe username of the member who added the card.", "description": "The username of the member who added the card.", "details": {"Slug": "creator_username", "Filter code": "Trello.cardAddedToList.CreatorUsername", "Type": "String", "Example": "sfjetsetter"}}, {"section": "Ingredients", "title": "List name\nThe name of the list the card was added to.", "description": "The name of the list the card was added to.", "details": {"Slug": "list_name", "Filter code": "Trello.cardAddedToList.ListName", "Type": "String", "Example": "To dos"}}, {"section": "Ingredients", "title": "Board name\nThe name of the board the card was added to.", "description": "The name of the board the card was added to.", "details": {"Slug": "board_name", "Filter code": "Trello.cardAddedToList.BoardName", "Type": "String", "Example": "New Zealand Trip"}}, {"section": "Ingredients", "title": "Card url\nThe URL to the card.", "description": "The URL to the card.", "details": {"Slug": "url", "Filter code": "Trello.cardAddedToList.CardURL", "Type": "Web URL", "Example": "https://trello.com/c/example"}}, {"section": "Ingredients", "title": "Added at\nDate and time the card was added to the list.", "description": "Date and time the card was added to the list.", "details": {"Slug": "added_at", "Filter code": "Trello.cardAddedToList.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Trello.cardAddedToList.ListName === \"Done\" && Trello.cardAddedToList.BoardName === \"My Projects\" && Trello.cardAddedToList.Title === \"Task Completed\" && Trello.cardAddedToList.CreatorFullName === \"John Doe\") {\n  var formattedRow = \"||| Card Title: \" + Trello.cardAddedToList.Title + \" ||| Card Description: \" + Trello.cardAddedToList.Description + \" ||| Card URL: \" + Trello.cardAddedToList.CardURL;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Completed Tasks\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Task Manager\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Card does not match the specified criteria.\");\n}", "intent": "When a new card titled \"Task Completed\" is added to the \"Done\" list on the \"My Projects\" board in Trello by user \"John Doe\", log the card's title, description, and URL in a Google Sheets spreadsheet named \"Completed Tasks\" with the formatted row \"||| Card Title: {{title}} ||| Card Description: {{description}} ||| Card URL: {{url}}\" and save it to the \"IFTTT/Task Manager\" folder."}
{"original_description": "This applet enable users to move UP/DOWN a shutter with a button widget", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Vimar VIEW", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "view_prod.up_down_action_blind", "Filter code method": "ViewProd.upDownActionBlind.skip(string?: reason)", "Runtime method": "runAction(\"view_prod.up_down_action_blind\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Slug": "state", "Required": "false", "Can have default value": "true", "Filter code method": "ViewProd.upDownActionBlind.setState(string: state)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  var hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n  if (hour >= 7 && hour < 19) {\n    ViewProd.upDownActionBlind.setState(\"UP\");\n    ViewProd.upDownActionBlind.setDevice(\"Living Room Shutter\");\n  } else {\n    ViewProd.upDownActionBlind.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  }\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, move the shutter up or down on the device named \"Living Room Shutter\" to the state \"UP\" if the button press occurs between 07:00 and 19:00."}
{"original_description": "On the move and can't type? Call your IFTTT phone number and leave a message. The audio from the message will be sent to the Telegram chat you specify. This only works with US-based phone numbers at the moment.", "trigger_channel": "Phone Call (US only)", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "phone_call.leave_ifttt_a_voicemail"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary mp3 url\nA public URL to the voicemail audio in mp3 format that anyone can visit for 30 days.", "description": "A public URL to the voicemail audio in mp3 format that anyone can visit for 30 days.", "details": {"Slug": "TemporaryMp3Url", "Filter code": "PhoneCall.leaveIftttAVoicemail.TemporaryMp3Url", "Type": "File URL", "Example": "http://media.ifttt.com/calls/4-RE16dd33bca24641284e2bdffc6c246427.mp3"}}, {"section": "Ingredients", "title": "From\nThe phone number you called ifttt from.", "description": "The phone number you called ifttt from.", "details": {"Slug": "From", "Filter code": "PhoneCall.leaveIftttAVoicemail.From", "Type": "String", "Example": "(415)-222-2222"}}, {"section": "Ingredients", "title": "Message\nThe transcribed message.", "description": "The transcribed message.", "details": {"Slug": "Message", "Filter code": "PhoneCall.leaveIftttAVoicemail.Message", "Type": "String", "Example": "Hello, it is a really sunny day in..."}}, {"section": "Ingredients", "title": "Mp3 url\nA public URL to the voicemail audio in mp3 format.", "description": "A public URL to the voicemail audio in mp3 format.", "details": {"Slug": "Mp3Url", "Filter code": "PhoneCall.leaveIftttAVoicemail.Mp3Url", "Type": "String", "Example": "http://media.ifttt.com/calls/4-RE16dd33bca24641284e2bdffc6c246427.mp3"}}, {"section": "Ingredients", "title": "Received at\nThe date and time you called ifttt.", "description": "The date and time you called ifttt.", "details": {"Slug": "ReceivedAt", "Filter code": "PhoneCall.leaveIftttAVoicemail.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_mp3", "Filter code method": "Telegram.sendMp3.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_mp3\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Audio url\nText input > Audio", "description": "Text input > Audio", "details": {"Label": "Audio URL", "Helper text": "Mime type must be audio/mpeg.", "Slug": "audio_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setAudio Url(string: audio_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setCaption(string: caption)"}}, {"section": "Action fields", "title": "Performer\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Performer", "Helper text": "Optional", "Slug": "performer", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setPerformer(string: performer)"}}, {"section": "Action fields", "title": "Title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setTitle(string: title)"}}], "filter_code": "if (PhoneCall.leaveIftttAVoicemail.From === \"(415)-123-4567\" && PhoneCall.leaveIftttAVoicemail.Message.includes(\"Hello, it's raining outside\")) {\n  Telegram.sendMp3.setAudioUrl(PhoneCall.leaveIftttAVoicemail.Mp3Url);\n  Telegram.sendMp3.setCaption(\"Weather Update\");\n  Telegram.sendMp3.setTitle(\"Rain Alert\");\n  Telegram.sendMp3.setChatId(\"#weather_updates\");\n} else {\n  Telegram.sendMp3.skip(\"Conditions not met.\");\n}", "intent": "When I call the IFTTT phone number from my phone (415)-123-4567 and leave a voicemail message saying \"Hello, it's raining outside\", send the audio file to the Telegram chat #weather_updates with the caption \"Weather Update\" and title \"Rain Alert\"."}
{"original_description": "This applet enable users to move a shutter UP/DOWN with a timer schedule", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Vimar VIEW", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "view_prod.up_down_action_blind", "Filter code method": "ViewProd.upDownActionBlind.skip(string?: reason)", "Runtime method": "runAction(\"view_prod.up_down_action_blind\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Slug": "state", "Required": "false", "Can have default value": "true", "Filter code method": "ViewProd.upDownActionBlind.setState(string: state)"}}], "filter_code": "var currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar currentHour = currentTime.hour();\nvar currentMinute = currentTime.minute();\n\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (currentHour === 7 && currentMinute === 30) {\n    ViewProd.upDownActionBlind.setState(\"up\");\n  } else if (currentHour === 18 && currentMinute === 0) {\n    ViewProd.upDownActionBlind.setState(\"down\");\n  } else {\n    ViewProd.upDownActionBlind.skip(\"Not the scheduled time.\");\n  }\n} else {\n  ViewProd.upDownActionBlind.skip(\"Not a weekday.\");\n}", "intent": "Move the living room shutter up at 7:30 AM and down at 6:00 PM, every weekday."}
{"original_description": "With this applet you can activate your Niko Home Control lights when your Fibaro sensors detected any movement", "trigger_channel": "FIBARO", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fibaro.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Fibaro.motionDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nID of device", "description": "ID of device", "details": {"Slug": "device_id", "Filter code": "Fibaro.motionDetected.DeviceId", "Type": "String", "Example": "0"}}, {"section": "Ingredients", "title": "Hub serial\nHub serial number", "description": "Hub serial number", "details": {"Slug": "hub_serial", "Filter code": "Fibaro.motionDetected.HubSerial", "Type": "String", "Example": "HC2-000000"}}], "action_channel": "Niko Home Control", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nikohomecontrol.activate_routine", "Filter code method": "Nikohomecontrol.activateRoutine.skip(string?: reason)", "Runtime method": "runAction(\"nikohomecontrol.activate_routine\", {})"}, "action_details": [{"section": "Action fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be activated?", "Helper text": "Select the Routine which will be activated when a trigger is fired", "Slug": "routine", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Fibaro.motionDetected.DeviceId === \"living_room_sensor_id\") { \n    Nikohomecontrol.activateRoutine.setRoutine(\"Good Morning\");\n  } else {\n    Nikohomecontrol.activateRoutine.skip(\"Movement detected in a different room.\");\n  }\n} else {\n  Nikohomecontrol.activateRoutine.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Activate the \"Good Morning\" routine on Niko Home Control when any movement is detected by the Fibaro motion sensor in the living room between 07:00 and 19:00."}
{"original_description": "Cette applet permet de régler automatiquement la température de vos radiateurs connectés Atlantic à des heures et des jours prédéfinis.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "ATLANTIC Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ATLANTIC_Cozytouch.launch_action_group", "Filter code method": "ATLANTICCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"ATLANTIC_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = DateAndTime.everyWeekdayAt.CheckTime.hour();\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nif ((hour === 7 || hour === 19) && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  if (hour === 7) {\n    ATLANTICCozytouch.launchActionGroup.setActionGroup(\"Good Morning\");\n    ATLANTICCozytouch.launchActionGroup.skip();\n  } else if (hour === 19) {\n    ATLANTICCozytouch.launchActionGroup.setActionGroup(\"Good Evening\");\n    ATLANTICCozytouch.launchActionGroup.skip();\n  }\n}", "intent": "Set the temperature of your Atlantic connected radiators to 20°C every weekday at 07:00 and 19:00, using the \"Good Morning\" and \"Good Evening\" scenarios."}
{"original_description": "You can plug a traditional light into your outlet. You will have your light turn on at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Cloud Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "link_smart_home.Outlet-PowerSwitch", "Filter code method": "LinkSmartHome.outletPowerSwitch.skip(string?: reason)", "Runtime method": "runAction(\"link_smart_home.Outlet-PowerSwitch\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turns on or off?", "Slug": "value", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  var device = \"Office Outlet\";\n  var value = \"On\";\n  if (Meta.currentUserTime.hour() >= Weather.sunSets.SunsetAt.hour()) {\n    LinkSmartHome.outletPowerSwitch.setDevice(device);\n    LinkSmartHome.outletPowerSwitch.setValue(value);\n  } else {\n    LinkSmartHome.outletPowerSwitch.skip(\"Not sunset yet.\");\n  }\n} else {\n  LinkSmartHome.outletPowerSwitch.skip(\"Conditions not met.\");\n}", "intent": "Turn on the living room lamp, which is plugged into the Office Outlet, at sunset when the outside temperature is 72 degrees Fahrenheit and the condition is Sunny."}
{"original_description": "You can plug a traditional light into your outlet. You will have your light turn off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Cloud Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "link_smart_home.Outlet-PowerSwitch", "Filter code method": "LinkSmartHome.outletPowerSwitch.skip(string?: reason)", "Runtime method": "runAction(\"link_smart_home.Outlet-PowerSwitch\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turns on or off?", "Slug": "value", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (new Date() >= new Date(Weather.sunRises.SunriseAt)) {\n  LinkSmartHome.outletPowerSwitch.setDeviceId(\"living_room_lamp\");\n  LinkSmartHome.outletPowerSwitch.setValue(false);\n}", "intent": "When the sunrise occurs at your location, turn off the living room lamp."}
{"original_description": "Turns off TP-Link Smart Plug when electric rates increase during on-peak hours. Use this with anything you plug into an outlet (decorative lighting, beverage cooler, TV, etc.)", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.time_of_day"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nDropdown list", "description": "Dropdown list", "details": {"Label": "This event should trigger when peak rates:", "Slug": "event", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.timeOfDay.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.timeOfDay.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.timeOfDay.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.timeOfDay.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (FcuTod.timeOfDay.Season === \"Summer\" && FcuTod.timeOfDay.DayType === \"Weekday\" && FcuTod.timeOfDay.EventType === \"start\") {\n  Kasa.turnOff();\n}", "intent": "Turn off the Living Room Lamp TP-Link Smart Plug during Summer weekdays when the Fort Collins Utilities Time of Day Pricing enters peak rates at the start of the on-peak hours."}
{"original_description": "Have a fan, portable AC unit, or other cooling device hooked up to a Smart Life plug or outlet? Use this Applet to automatically turn it off whenever the temperature drops below a threshold. Pair this Applet with Applet HZCxKUhq (https://ifttt.com/applets/HZCxKUhq-turn-on-a-smart-life-device-if-the-temperature-rises-above-a-threshold) to also turn your device on when the temperature rises above a threshold. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Smart Life", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smartlife.turn_off", "Filter code method": "Smartlife.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"smartlife.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device/group?", "Helper text": "Not all Smart Life devices are supported by this service. Refer to the device manufacturer for further information.", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 60) {\n  Smartlife.turnOff.skip(\"Temperature in New York dropped below 60°F.\");\n}", "intent": "Turn off the living room fan, which is connected to a Smart Life plug, whenever the temperature in New York drops below 60°F."}
{"original_description": "Have a fan, portable AC unit, or other cooling device hooked up to a Smart Life plug or outlet? Use this Applet to automatically turn it on whenever the temperature rises above a threshold. Pair this Applet with Applet DMmPJCW2 (https://ifttt.com/applets/DMmPJCW2-turn-off-a-smart-life-device-if-the-temperature-drops-below-a-threshold) to also turn your device off when the temperature falls below a threshold. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Smart Life", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smartlife.turn_on", "Filter code method": "Smartlife.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"smartlife.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device/group?", "Helper text": "Not all Smart Life devices are supported by this service. Refer to the device manufacturer for further information.", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= 75) {\n  Smartlife.turnOn.skip(\"Temperature is not above 75°F.\");\n}", "intent": "Turn on my Living Room Fan, a Smart Life device, when the temperature in New York rises above 75°F."}
{"original_description": "Turns on TP-Link Smart Plug when on-peak hours end and electricity becomes less expensive. Use this with anything you plug into an outlet (decorative lighting, beverage cooler, TV, etc.)", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.time_of_day"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nDropdown list", "description": "Dropdown list", "details": {"Label": "This event should trigger when peak rates:", "Slug": "event", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.timeOfDay.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.timeOfDay.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.timeOfDay.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.timeOfDay.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (FcuTod.timeOfDay.EventType === \"end\" && FcuTod.timeOfDay.Season === \"Summer\" && FcuTod.timeOfDay.DayType === \"Weekday\") {\n  Kasa.turnOn();\n} else {\n  Kasa.turnOn.skip(\"Not the desired time or season.\");\n}", "intent": "Turn on the Living Room Lamp TP-Link Smart Plug when off-peak hours begin during the Summer season on Weekdays, specifically at the end of the peak rate event."}
{"original_description": "Adjust the brightness of light when it starts to rain. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_brightness_action", "Filter code method": "Ewelink.lightBrightnessAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_brightness_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light brightness action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_brightness_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Light brightness query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Set brightness", "Slug": "light_brightness_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Ewelink.lightBrightnessAction.setLightBrightnessQuery(50);\n  Ewelink.lightBrightnessAction.setLightBrightnessActionDevice(\"Living Room Lamp\");\n} else {\n  Ewelink.lightBrightnessAction.skip(\"Not raining.\");\n}", "intent": "Adjust the brightness of the Living Room Lamp to 50% when it starts raining in New York City."}
{"original_description": "When you favorite an article on Pocket, send it to the friends you think like similar articles. Great way to start conversations and discussions.", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_favorite_item_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newFavoriteItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newFavoriteItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newFavoriteItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newFavoriteItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newFavoriteItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newFavoriteItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "if (Pocket.newFavoriteItemPocket.Title === \"My first blog post\" && \n    Pocket.newFavoriteItemPocket.Url === \"http://blog.ifttt.com\" && \n    Pocket.newFavoriteItemPocket.Tags.includes(\"neato\") && \n    Pocket.newFavoriteItemPocket.Tags.includes(\"cool\") && \n    Pocket.newFavoriteItemPocket.Tags.includes(\"video\")) {\n  Gmail.sendAnEmail.setSubject(\"Check out this interesting article!\");\n  Gmail.sendAnEmail.setBody(`I just favorited an article about something cool on Pocket: ${Pocket.newFavoriteItemPocket.Url}. Thought you might find it interesting too!`);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");\n}", "intent": "When you favorite an article titled \"My first blog post\" on Pocket, with the URL http://blog.ifttt.com and tags like \"neato, cool, video\", send an email to your friends at john.doe@example.com and jane.smith@example.com with the subject \"Check out this interesting article!\" and body \"I just favorited an article about something cool on Pocket: http://blog.ifttt.com. Thought you might find it interesting too!\"."}
{"original_description": "Hanging in your home town, alma mater, or anywhere else old friends might be lurking? Snap a pic and use the hashtag #CatchMeIfYouCan in the caption. When you post it, this Applet will send it in an email to up to 20 email addresses via your Gmail. Even if no one comes out to meet you, it's a great way to induce FOMO 😂 !", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.indexOf(\"#CatchMeIfYouCan\") !== -1) {\n  Gmail.sendAnEmail.setSubject(\"New Photo Alert\");\n  var body = \"Check out my new photo: \" + Instagram.newPhotoByYouTagged.Caption + \"\\n\" + Instagram.newPhotoByYouTagged.Url;\n  Gmail.sendAnEmail.setBody(body);\n  Gmail.sendAnEmail.setAttachmentUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com, bob.johnson@example.com\");\n} else {\n  Gmail.sendAnEmail.skip(\"The photo does not contain the #CatchMeIfYouCan hashtag.\");\n}", "intent": "When I post a new photo on Instagram with the hashtag #CatchMeIfYouCan, send an email to john.doe@example.com, jane.smith@example.com, and bob.johnson@example.com with the subject \"New Photo Alert\" and the body containing the full caption and a link to the photo, including the image as an attachment."}
{"original_description": "Help your family, friends, or community group stay in the know on reporting from the American Civil Liberties Union. Enter up to 5 emails and they'll get updates with the latest from the ACLU feed (you can include your own!)", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "Gmail.sendAnEmail.setSubject(\"New ACLU Update\");\nGmail.sendAnEmail.setBody(\"Check out the latest news from the ACLU: \" + Feed.newFeedItem.EntryTitle + \" - \" + Feed.newFeedItem.EntryContent);\nGmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");", "intent": "Send an email to john.doe@example.com, jane.smith@example.com with the subject \"New ACLU Update\" and body \"Check out the latest news from the ACLU: EntryTitle - EntryContent\" whenever a new item is posted to the ACLU RSS feed at https://www.aclu.org/news/feed."}
{"original_description": "Auto-share your killer vids with a group of friends — just enter their emails and when you post, this Applet will make sure it gets to their inboxes.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var caption = Instagram.anyNewVideoByYouInstagram.Caption;\n  if (caption === \"A cool video\") {\n    Gmail.sendAnEmail.setSubject(\"New Video Posted\");\n    var body = \"Check out my new video: \" + Instagram.anyNewVideoByYouInstagram.URL + \"\\nThumbnail: \" + Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL;\n    Gmail.sendAnEmail.setBody(body);\n    Gmail.sendAnEmail.setAttachmentUrl(Instagram.anyNewVideoByYouInstagram.VideoSourceURL);\n    Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");\n  } else {\n    Gmail.sendAnEmail.skip(\"Caption does not match.\");\n  }\n} else {\n  Gmail.sendAnEmail.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When you post a new video on Instagram with a caption like \"A cool video\" and it's between 07:00 and 19:00, send an email to john.doe@example.com and jane.smith@example.com with the subject \"New Video Posted\" and the body containing the video's short URL http://instagr.am/p/CTGBw/ and its thumbnail image URL http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg, also including the video source URL http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4 as an attachment."}
{"original_description": "Share the latest NAACP news with your friends in GroupMe", "trigger_channel": "NAACP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "naacp.new_post_in_naacp_news"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Naacp.newPostInNaacpNews.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Naacp.newPostInNaacpNews.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Naacp.newPostInNaacpNews.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Naacp.newPostInNaacpNews.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Naacp.newPostInNaacpNews.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Naacp.newPostInNaacpNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "GroupMe", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "groupme.post-message", "Filter code method": "Groupme.postMessage.skip(string?: reason)", "Runtime method": "runAction(\"groupme.post-message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Slug": "group_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message text\nText input", "description": "Text input", "details": {"Label": "Message", "Helper text": "Image URLs will be automatically attached as images", "Slug": "message_text", "Required": "true", "Can have default value": "true", "Filter code method": "Groupme.postMessage.setMessage Text(string: message_text)"}}], "filter_code": "var entryTitle = Naacp.newPostInNaacpNews.EntryTitle;\nvar entryContent = Naacp.newPostInNaacpNews.EntryContent;\nvar entryImageUrl = Naacp.newPostInNaacpNews.EntryImageUrl;\n\n// Brief summary of the entry content (first 100 characters)\nvar briefSummary = entryContent.substring(0, 100) + \"...\";\n\n// Construct the message text\nvar messageText = entryTitle + \": \" + briefSummary + \" \" + entryImageUrl;\n\nGroupme.postMessage.setGroupName(\"Friends\");\nGroupme.postMessage.setMessageText(messageText);", "intent": "When a new post is published in the NAACP news, share the entry title, content, and image URL with your friends in the GroupMe group named \"Friends\" by sending a message that includes the entry title, a brief summary of the entry content, and the entry image URL."}
{"original_description": "Share your latest Instagram photo in an email. Perfect for keeping up with friends, family, or colleagues who do not use the platform.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "if (Instagram.anyNewPhotoByYou.Caption === \"A cool photo\") {\n  Gmail.sendAnEmail.setSubject(\"My Latest Instagram Photo\");\n  var body = \"Check out my latest photo: \" + Instagram.anyNewPhotoByYou.Url + \"\\n\\n\";\n  body += Instagram.anyNewPhotoByYou.EmbedCode;\n  Gmail.sendAnEmail.setBody(body);\n  Gmail.sendAnEmail.setAttachmentUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");\n} else {\n  Gmail.sendAnEmail.skip(\"Caption does not match.\");\n}", "intent": "When I post a new photo on Instagram with a caption like \"A cool photo\", send an email to my friends at john.doe@example.com and jane.smith@example.com with the subject \"My Latest Instagram Photo\" and include the photo's short URL http://instagr.am/p/CTGBw/ in the body, along with the HTML embed code for the photo <iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>, and attach the image file from the source URL http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg."}
{"original_description": "Your Wi-Fi will turn off at a time you set for family time. That means more time to spend  quality time together without any modern world interference!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "ASUS Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "asusrouter.turn_wifi_off", "Filter code method": "Asusrouter.turnWifiOff.skip(string?: reason)", "Runtime method": "runAction(\"asusrouter.turn_wifi_off\", {})"}, "action_details": [], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 18 && minute === 0) {\n  // No need to skip, this is the condition to turn off WiFi\n} else {\n  Asusrouter.turnWifiOff.skip(\"It's not family time yet.\");\n}", "intent": "Turn off the Wi-Fi on our ASUS Router at 6:00 PM every day for family time, allowing us to spend quality time together without modern world interference."}
{"original_description": "Stop worrying about stray litter. Let your iRobot Roomba handle the cleaning!", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Litter box cleaning\" && new Date(Whisker.lr3Events.CreatedAt).getHours() === 7) {\n  Irobot.startRobot.setRobotName(\"Living Room Roomba\");\n} else {\n  Irobot.startRobot.skip(\"Conditions not met for starting the Roomba.\");\n}", "intent": "When my Litter-Robot, named \"My Litter Robot\", detects a litter box cleaning event at 07:00, start my iRobot Roomba, named \"Living Room Roomba\", to clean the floor."}
{"original_description": "Create a colour loop with your your Hue lights by pressing this widget button.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" && Meta.currentUserTime.hour() === 4 && Meta.currentUserTime.minute() === 17) {\n  Hue.setColorAllHue.setColor(\"#FF69B4\");\n} else {\n  Hue.setColorAllHue.skip(\"Location or time does not match.\");\n}", "intent": "When the button widget is pressed at a location like 37.8267, -122.4230, and at a time such as 04:17:06, change all Philips Hue lights in the living room to a vibrant color like #FF69B4."}
{"original_description": "Use this applet to create a button that triggers your robot to start. Ideal for starting your robot straight from your smart watch or home screen on your phone!", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Irobot.startRobot.setRobotName(\"Home Cleaner\");\n} else {\n  Irobot.startRobot.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, start the robot named \"Home Cleaner\" immediately."}
{"original_description": "Turn on this Applet and each time you post a photo on Instagram it will be set as your Android device's wallpaper", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.set_wallpaper", "Filter code method": "AndroidDevice.setWallpaper.skip(string?: reason)", "Runtime method": "runAction(\"android_device.set_wallpaper\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.setWallpaper.setPhoto Url(string: photo_url)"}}], "filter_code": "AndroidDevice.setWallpaper.setPhotoUrl(Instagram.anyNewPhotoByYou.SourceUrl);", "intent": "Set the wallpaper of my Android device to the image from each new Instagram post I make, using the photo's Source URL as the image source."}
{"original_description": "Every morning at 6:00AM you will receive a mobile notification with the temperature forecast. Tap the notification to open a Weather Underground forecast for your area. Have a nice day!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "IfNotifications.sendRichNotification\n  .setMessage(\"Today's weather forecast: High of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and Low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F with a condition of \" + Weather.currentWeatherAtTime.TodaysCondition)\n  .setTitle(\"Weather Update\")\n  .setLinkUrl(Weather.currentWeatherAtTime.ForecastUrl)\n  .setImageUrl(Weather.currentWeatherAtTime.TodaysConditionImageURL);", "intent": "Every morning at 6:00 AM, send a mobile notification with the message \"Today's weather forecast: High of 75°F and Low of 50°F with a condition of Sunny\" and the title \"Weather Update\". The notification will include a link to the Weather Underground forecast for the user's location and an image of the current weather condition. Tap the notification to open the forecast in the default web browser."}
{"original_description": "A great way to quickly share photos with a Telegram chat.", "trigger_channel": "Camera widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_camera.do_camera_new_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "DoCamera.doCameraNewPhoto.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "DoCamera.doCameraNewPhoto.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Share url\nThe link to the Share page for the photo.", "description": "The link to the Share page for the photo.", "details": {"Slug": "ShareURL", "Filter code": "DoCamera.doCameraNewPhoto.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude", "description": "", "details": {"Slug": "Latitude", "Filter code": "DoCamera.doCameraNewPhoto.Latitude", "Type": "String", "Example": "37.78346333333333"}}, {"section": "Ingredients", "title": "Longitude", "description": "", "details": {"Slug": "Longitude", "Filter code": "DoCamera.doCameraNewPhoto.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the tap.", "description": "The link to the map of the location of the tap.", "details": {"Slug": "LocationMapURL", "Filter code": "DoCamera.doCameraNewPhoto.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the tap.", "description": "The image of the map of the location of the tap.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoCamera.doCameraNewPhoto.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time the photo was taken.", "description": "The date and time the photo was taken.", "details": {"Slug": "OccurredAt", "Filter code": "DoCamera.doCameraNewPhoto.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Caption\nThe text you write on top of a photo.", "description": "The text you write on top of a photo.", "details": {"Slug": "Caption", "Filter code": "DoCamera.doCameraNewPhoto.Caption", "Type": "String", "Example": "A cool photo"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_photo", "Filter code method": "Telegram.sendPhoto.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setCaption(string: caption)"}}], "filter_code": "if (DoCamera.doCameraNewPhoto.Latitude === \"37.78346333333333\" && DoCamera.doCameraNewPhoto.Longitude === \"-122.42301220000003\") {\n  Telegram.sendPhoto.setChatId(\"#general\");\n  Telegram.sendPhoto.setPhotoUrl(DoCamera.doCameraNewPhoto.PublicPhotoURL);\n  Telegram.sendPhoto.setCaption(\"A cool photo taken at \" + DoCamera.doCameraNewPhoto.OccurredAt);\n} else {\n  Telegram.sendPhoto.skip(\"Latitude or longitude does not match.\");\n}", "intent": "When a new photo is taken with the Camera widget at latitude 37.78346333333333 and longitude -122.42301220000003, share it on Telegram in the #general chat with the photo URL https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf and the caption \"A cool photo taken at 2020-07-08T04:17:06+05:00\"."}
{"original_description": "With the press of a button, share your location with a Telegram chat. Includes a map image of your current location and a Google Maps URL.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_photo", "Filter code method": "Telegram.sendPhoto.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setCaption(string: caption)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Telegram.sendPhoto.setChatId(\"@home_notifications\");\n  Telegram.sendPhoto.setPhotoUrl(DoButton.doButtonNewCommandCommon.LocationMapImageURL);\n  Telegram.sendPhoto.setCaption(\"Current Location: 37.8267, -122.4230\");\n} else {\n  Telegram.sendPhoto.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, send a photo to the Telegram chat @home_notifications with a map image of the current location, accessed via https://maps.google.com/?ll=37.78308,-122.417236667&z=21, and include a caption \"Current Location: 37.8267, -122.4230\" to notify family members."}
{"original_description": "Just set the time and we'll give you a call and read you the current weather report. Good morning, and have a great day! 🙌", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "var currentTime = Meta.currentUserTime();\nvar currentHour = currentTime.hour();\nvar currentMinute = currentTime.minute();\n\nif (currentHour == 7 && currentMinute == 30) {\n  var currentTempFahrenheit = Weather.currentWeatherAtTime.CurrentTempFahrenheit;\n  var currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  var highTempFahrenheit = Weather.currentWeatherAtTime.HighTempFahrenheit;\n  var lowTempFahrenheit = Weather.currentWeatherAtTime.LowTempFahrenheit;\n\n  var message = \"Good morning! The current weather in New York is \" + currentCondition + \" with a temperature of \" + currentTempFahrenheit + \" degrees Fahrenheit. Today's high will be \" + highTempFahrenheit + \" degrees Fahrenheit and the low will be \" + lowTempFahrenheit + \" degrees Fahrenheit.\";\n  VoipCalls.callMyDevice.setMessage(message);\n} else {\n  VoipCalls.callMyDevice.skip(\"Not the scheduled call time.\");\n}", "intent": "Call my device at 07:30 and read the current weather report for New York, including the current temperature in degrees Fahrenheit, the current condition, and today's high and low temperatures."}
{"original_description": "Set the mood and dim your Hue lights with this button.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 22 && \n    Math.abs(latitude - 37.8267) < 0.001 && \n    Math.abs(longitude - (-122.4230)) < 0.001) {\n  Hue.setBrightnessAllHue.setLights(\"Living room\");\n  Hue.setBrightnessAllHue.setBrightness(\"50\");\n} else {\n  Hue.setBrightnessAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, dim all Philips Hue lights in the living room to a brightness of 50."}
{"original_description": "Turns the Wi-Fi on during day time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "D-Link Wi-Fi Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dlink_wifi_router.turnOnWifi", "Filter code method": "DlinkWifiRouter.turnOnWifi.skip(string?: reason)", "Runtime method": "runAction(\"dlink_wifi_router.turnOnWifi\", {})"}, "action_details": [{"section": "Action fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nif (hour !== 7) {\n  DlinkWifiRouter.turnOnWifi.skip(\"Not 7:00 AM.\");\n}\nvar mydlinkNo = \"1\"; // Device number as specified in the intent\nDlinkWifiRouter.turnOnWifi.setMydlinkNo(mydlinkNo);", "intent": "Turn on the Wi-Fi on my D-Link Wi-Fi Router, which is device number 1, every day at 7:00 AM."}
{"original_description": "Husqvarna Automower® will be parked until further notice when wind speed rises above high wind (above 50 kph).", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Husqvarna Automower®", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automower.park_until_further_notice", "Filter code method": "Automower.parkUntilFurtherNotice.skip(string?: reason)", "Runtime method": "runAction(\"automower.park_until_further_notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Automower\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Automower", "Slug": "automower", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedKph > 50) {\n  Automower.parkUntilFurtherNotice.skip(\"Wind speed is above 50 kph\");\n}", "intent": "When the wind speed rises above 50 kph at the home location, park the Husqvarna Automower until further notice."}
{"original_description": "What to see in the night sky, updates on the most exciting new missions, deep dives into exoplanet discoveries — Universe Today covers all things outer space. This Applet will send their latest content straight to your inbox. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "Email.sendMeEmail.setSubject(\"New Universe Today Article\");\nEmail.sendMeEmail.setBody(Feed.newFeedItem.EntryTitle + \"<br>\" + Feed.newFeedItem.EntryContent + \"<br><a href='\" + Feed.newFeedItem.EntryUrl + \"'>Read more</a>\");", "intent": "Send an email to my inbox with the subject \"New Universe Today Article\" and the body containing the entry title, entry content, and a link to the entry URL whenever a new article is published on the Universe Today RSS feed."}
{"original_description": "101 Cookbooks is an award-winning food blog by Heidi Swanson. It keeps the focus on foods and recipes that are fresh, seasonal, healthy and delicious. Turn on this Applet to get the latest posts in a convenient Friday digest so you can plan your meals and find inspiration for the week to come! ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== \"Friday\") {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\n\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (!(hour === 10 && minute === 0)) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 10:00 AM.\");\n}\n\nEmailDigest.sendWeeklyEmail.setTitle(\"Weekly Recipe Inspiration\");\nEmailDigest.sendWeeklyEmail.setMessage(\"Plan your meals for the week ahead with these fresh and delicious recipes from 101 Cookbooks\");\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.FeedUrl);\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\n\nvar entryInfo = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItem.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItem.EntryContent;\nEmailDigest.sendWeeklyEmail.setMessage(EmailDigest.sendWeeklyEmail.getMessage() + \"\\n\\n\" + entryInfo);", "intent": "Send a weekly email digest every Friday at 10:00 AM with the latest posts from the 101 Cookbooks RSS feed, including the entry title, entry URL, and entry content, and set the email title to \"Weekly Recipe Inspiration\" with a message that says \"Plan your meals for the week ahead with these fresh and delicious recipes from 101 Cookbooks\"."}
{"original_description": "Open garage door with button widget on your smartphone.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Garadget.openDoor.setDoorId(\"Main Entrance\");\n} else {\n  Garadget.openDoor.skip(\"Button pressed at incorrect location\");\n}", "intent": "When the button widget on your smartphone is pressed at a location with latitude 37.8267 and longitude -122.4230, open the garage door labeled \"Main Entrance\" using the Garadget service."}
{"original_description": "Close garage door with button widget on your smartphone", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && \n    DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" && \n    DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\" && \n    DoButton.doButtonNewCommandCommon.ShareURL === \"https://ifttt.com/share/McFwJfDH9Ns\") {\n  Garadget.closeDoor.skip(\"Garage door closed via button widget\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door\");\n}", "intent": "Close the garage door using the Garadget channel when the button widget on your smartphone is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring at 04:17:06+05:00, and share the event via https://ifttt.com/share/McFwJfDH9Ns."}
{"original_description": "Straight from Congress.gov — when they're in session, you'll get an email with the bills and resolutions scheduled for the Senate floor at 9 AM every day.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 9) {\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"09:00\");\n  EmailDigest.sendDailyEmail.setTitle(\"Today's Senate Floor Schedule\");\n  EmailDigest.sendDailyEmail.setMessage(\"Bills and resolutions scheduled for the Senate floor today: \" + Feed.newFeedItem.EntryContent);\n  EmailDigest.sendDailyEmail.setUrl(Feed.newFeedItem.EntryUrl);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not 9:00 AM\");\n}", "intent": "Send a daily email digest at 9:00 AM with the title \"Today's Senate Floor Schedule\" and the message \"Bills and resolutions scheduled for the Senate floor today: {{EntryContent}}\" to subscribers who have opted-in to receive updates from Congress.gov, including the feed title \"Congress.gov Updates\" and the entry URL \"{{EntryUrl}}\", when a new feed item is published."}
{"original_description": "Every day at the time you specify, a draft journal entry will be created in your Day One and you'll get a push notification reminding you to write.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour == 7 && minute == 0) {\n  DayOne.createDraftJournalEntry.setTitle(\"Morning Reflections\");\n  IfNotifications.sendNotification.setMessage(\"Start your day by reflecting on your thoughts and goals\");\n} else {\n  IfNotifications.sendNotification.skip(\"Not the scheduled time for reflection.\");\n}", "intent": "Every day at 7:00 AM, create a draft journal entry in Day One titled \"Morning Reflections\" and send a push notification with the message \"Start your day by reflecting on your thoughts and goals\" to remind you to write."}
{"original_description": "This applet will save 1p for every 10 metres you cycle or run using Strava.", "trigger_channel": "Strava", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "strava.new_activity_by_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "activity_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time the activity was completed.", "description": "Date and time the activity was completed.", "details": {"Slug": "created_at", "Filter code": "Strava.newActivityByYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Activity type\nThe type of activity completed.", "description": "The type of activity completed.", "details": {"Slug": "activity_type", "Filter code": "Strava.newActivityByYou.ActivityType", "Type": "String", "Example": "Ride"}}, {"section": "Ingredients", "title": "Name\nThe name of the activity.", "description": "The name of the activity.", "details": {"Slug": "name", "Filter code": "Strava.newActivityByYou.Name", "Type": "String", "Example": "Evening Ride"}}, {"section": "Ingredients", "title": "Distance meters\nDistance moved in meters.", "description": "Distance moved in meters.", "details": {"Slug": "distance", "Filter code": "Strava.newActivityByYou.DistanceMeters", "Type": "String", "Example": "4475.4"}}, {"section": "Ingredients", "title": "Elapsed time\nTotal duration of the activity.", "description": "Total duration of the activity.", "details": {"Slug": "elapsed_time", "Filter code": "Strava.newActivityByYou.ElapsedTime", "Type": "String", "Example": "22 minutes, 13 seconds"}}, {"section": "Ingredients", "title": "Elapsed time in seconds\nTotal duration of the activity in seconds.", "description": "Total duration of the activity in seconds.", "details": {"Slug": "elapsed_time_in_seconds", "Filter code": "Strava.newActivityByYou.ElapsedTimeInSeconds", "Type": "String", "Example": "1333"}}, {"section": "Ingredients", "title": "Link to activity\nThe URL to the activity on Strava.", "description": "The URL to the activity on Strava.", "details": {"Slug": "link_to_activity", "Filter code": "Strava.newActivityByYou.LinkToActivity", "Type": "Web URL", "Example": "http://www.strava.com/activities/144461028"}}, {"section": "Ingredients", "title": "Route map image url\nURL to a map image of the route.", "description": "URL to a map image of the route.", "details": {"Slug": "route_map_image_url", "Filter code": "Strava.newActivityByYou.RouteMapImageUrl", "Type": "Image URL", "Example": "https://maps.googleapis.com/maps/api/staticmap?size=400x400&path=weight:3|color:0xFC4C02FF|enc:{qreFj}bjVZQ"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar activityType = Strava.newActivityByYou.ActivityType;\nif ((activityType === \"Ride\" || activityType === \"Run\") && distance > 1000) {\n  var amount = (distance / 10) * 0.01; // calculate amount in GBP\n  Monzo.potDeposit.setAmount(amount.toFixed(2));\n  Monzo.potDeposit.skip(); // This line should be removed as it will skip the action, instead we should let the action proceed with the calculated amount\n} else {\n  Monzo.potDeposit.skip(\"Activity type is not 'Ride' or 'Run', or distance is less than 1000 meters.\");\n}", "intent": "Save 1p to my 'Savings' pot on Monzo for every 10 meters I cycle or run using Strava, but only when the activity type is either 'Ride' or 'Run', and the distance covered is more than 1000 meters.", "filter_code_old": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar amount = distance/1000;\nMonzo.potDeposit.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "Up your style game with this Applet. Every Saturday you'll get an email with the most popular articles in the Style section. Then it's up to you to hit the shops!", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.any_new_popular_article_today"}, "trigger_details": [{"section": "Trigger fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Section", "Slug": "section", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.anyNewPopularArticleToday.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.anyNewPopularArticleToday.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.anyNewPopularArticleToday.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.anyNewPopularArticleToday.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.anyNewPopularArticleToday.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.anyNewPopularArticleToday.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (day === 6 && hour === 10 && minute === 0) {\n  var articles = [];\n  var section = \"Style\";\n  var startDate = new Date();\n  startDate.setDate(startDate.getDate() - 1);\n  startDate.setHours(0, 0, 0, 0);\n  var endDate = new Date();\n  endDate.setHours(0, 0, 0, 0);\n\n  if (Nytimes.anyNewPopularArticleToday.Section === section && \n      Nytimes.anyNewPopularArticleToday.PublishedDate >= startDate.toISOString() && \n      Nytimes.anyNewPopularArticleToday.PublishedDate < endDate.toISOString()) {\n    articles.push({\n      title: Nytimes.anyNewPopularArticleToday.Title,\n      author: Nytimes.anyNewPopularArticleToday.Author,\n      blurb: Nytimes.anyNewPopularArticleToday.Blurb,\n      articleUrl: Nytimes.anyNewPopularArticleToday.ArticleUrl,\n      imageUrl: Nytimes.anyNewPopularArticleToday.ImageUrl\n    });\n  }\n\n  if (articles.length > 0) {\n    var title = \"Saturday Style Updates\";\n    var message = \"Check out this week's top style stories\";\n    var url = \"\";\n    EmailDigest.sendWeeklyEmail.setTitle(title);\n    EmailDigest.sendWeeklyEmail.setMessage(message);\n    EmailDigest.sendWeeklyEmail.setUrl(url);\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n\n    var articleList = \"\";\n    for (var i = 0; i < articles.length; i++) {\n      articleList += \"<p><a href='\" + articles[i].articleUrl + \"'>\" + articles[i].title + \"</a> by \" + articles[i].author + \": \" + articles[i].blurb + \" <img src='\" + articles[i].imageUrl + \"'></p>\";\n    }\n    EmailDigest.sendWeeklyEmail.setMessage(message + \"<br>\" + articleList);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No new articles found.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Saturday at 10:00 AM.\");\n}", "intent": "Every Saturday at 10:00 AM, send a weekly email digest with the title \"Saturday Style Updates\" to subscribers, including a list of the most popular articles from The New York Times Style section published between Friday at 12:00 AM and Saturday at 12:00 AM, along with their titles, authors, blurbs, article URLs, and image URLs, and set the email message to \"Check out this week's top style stories\"."}
{"original_description": "When you tag an Evernote note with a specific tag, a new Day One journal entry will be created.", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.add_tag_to_note"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Specific tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.addTagToNote.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.addTagToNote.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.addTagToNote.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.addTagToNote.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.addTagToNote.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"Important\")) {\n  DayOne.createJournalEntry.setBody(Evernote.addTagToNote.BodyHTML);\n  DayOne.createJournalEntry.setTags(\"from_evernote, important_note\");\n  // Assuming the journal_id is set to \"Personal\" by default or through other means\n}", "intent": "When you add the tag \"Important\" to an Evernote note, a new entry will be created in your \"Personal\" Day One journal with the note title as the entry title, the HTML note body as the entry body, and tags including \"from_evernote\" and \"important_note\", without specifying a location or image."}
{"original_description": "Use the Button widget to quickly and easily change the comfort profile of your ecobee.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_next_transition", "Filter code method": "Ecobee.holdNextTransition.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_next_transition\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Ecobee.holdNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.holdNextTransition.setDesiredTemperature(22);\n} else {\n  Ecobee.holdNextTransition.skip(\"Location does not match.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, change the comfort profile of the \"Living Room Thermostat\" ecobee to a desired temperature of 22°C."}
{"original_description": "A great way to automatically turn on your lights as the sun goes down. Select a shortcut that controls your lights and it'll run every day at sunset!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wink: Shortcuts", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wink_shortcuts.activate_scene", "Filter code method": "WinkShortcuts.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"wink_shortcuts.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.Condition === \"Sunny\" && parseFloat(Weather.sunSets.TempCelsius) > 18) {\n  WinkShortcuts.activateScene({ scene_id: \"Living Room Lights\" });\n} else {\n  WinkShortcuts.activateScene.skip(\"Condition or temperature does not meet the criteria.\");\n}", "intent": "Turn on the 'Living Room Lights' shortcut from Wink: Shortcuts every day at sunset, as reported by Weather Underground for my location, when the current condition is Sunny and the temperature is above 18°C."}
{"original_description": "Straight from Congress.gov — you'll get an email with the bills and resolutions scheduled for the House floor at 9 AM every day (when they're in session).", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 9) {\n  var message = \"Bills and resolutions scheduled for the House floor today: \" + Feed.newFeedItem.EntryTitle + \" (\" + Feed.newFeedItem.EntryUrl + \")\";\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"9:00 AM\");\n  EmailDigest.sendDailyEmail.setTitle(\"Today's Congressional Schedule\");\n  EmailDigest.sendDailyEmail.setMessage(message);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not 9:00 AM\");\n}", "intent": "Send a daily email digest at 9:00 AM at congress@example.com with the subject \"Today's Congressional Schedule\" and the message \"Bills and resolutions scheduled for the House floor today: {{EntryTitle}} ({{EntryUrl}})\" whenever a new item is published in the Congress.gov RSS feed, including the entry title, URL, and publication date."}
{"original_description": "Wind down to a brief forecast of the day when the sun sets.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "var location = \"New York City\";\nvar condition = Weather.sunSets.Condition;\nvar tempFahrenheit = Weather.sunSets.TempFahrenheit;\nvar highTempFahrenheit = Weather.sunSets.HighTempFahrenheit;\nvar lowTempFahrenheit = Weather.sunSets.LowTempFahrenheit;\nvar forecastUrl = Weather.sunSets.ForecastUrl;\n\nif (location === \"New York City\" && Weather.sunSets.SunsetAt) {\n  var message = `Good evening, the current weather is ${condition} with a temperature of ${tempFahrenheit} degrees Fahrenheit and today's high will be ${highTempFahrenheit} degrees Fahrenheit while the low will be ${lowTempFahrenheit} degrees Fahrenheit, for more details check ${forecastUrl}`;\n  VoipCalls.callMyDevice.setMessage(message);\n} else {\n  VoipCalls.callMyDevice.skip(\"Sun has not set in New York City yet.\");\n}", "intent": "When the sun sets in New York City, make a VoIP call to my device with a voice message saying \"Good evening, the current weather is Sunny with a temperature of 72 degrees Fahrenheit and today's high will be 75 degrees Fahrenheit while the low will be 65 degrees Fahrenheit, for more details check http://www.weather.com/weather/5-day/GMXX1273\"."}
{"original_description": "Add some visual flair to your journal. When you add the hashtag #journal to your Instagram caption, it'll tell this Applet this one's a keeper. It'll be added to Day One along with the caption (with the hashtag stripped out). ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#journal\")) {\n  DayOne.createJournalEntry.setBody(Instagram.newPhotoByYouTagged.CaptionNoTag);\n  DayOne.createJournalEntry.setImage(Instagram.newPhotoByYouTagged.SourceUrl);\n  DayOne.createJournalEntry.setTags(\"instagram, journal\");\n} else {\n  DayOne.createJournalEntry.skip(\"Post does not contain #journal hashtag.\");\n}", "intent": "When I post a new photo on Instagram with the hashtag #journal, automatically create a new journal entry in Day One's \"Personal\" journal, including the caption without the hashtag and the image from the Instagram post."}
{"original_description": "Because nothing brightens your day like a superhero in your inbox. ", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.translate"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.translate.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.translate.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.translate.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.translate.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.translate.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Created date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_date", "Filter code": "Giphy.translate.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "EmailDigest.sendDailyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendDailyEmail.setTitle(\"Morning Giphy Delight\");\nvar searchQuery = \"cute cats playing\";\nEmailDigest.sendDailyEmail.setMessage(Giphy.translate.EmailHTML);\nEmailDigest.sendDailyEmail.setUrl(Giphy.translate.URL);", "intent": "Send a daily email at 08:00 with the title \"Morning Giphy Delight\" and including an in-line GIF from the search query \"cute cats playing\", using the HTML provided by Giphy for embedding, to brighten up the recipient's day."}
{"original_description": "When you post a new video with the hashtag you specify, it will be sent to a Telegram chat.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_video", "Filter code method": "Telegram.sendVideo.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_video\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Video url\nText input > File", "description": "Text input > File", "details": {"Label": "Video URL", "Helper text": "Mime type should be video/mp4.", "Slug": "video_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendVideo.setVideo Url(string: video_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendVideo.setCaption(string: caption)"}}], "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"#mynewvideo\")) {\n  var videoUrl = \"http://instagr.am/p/CTGBw/\";\n  var caption = \"Check out my latest video!\";\n  Telegram.sendVideo.setVideoUrl(videoUrl);\n  Telegram.sendVideo.setCaption(caption);\n} else {\n  Telegram.sendVideo.skip(\"The Instagram post does not contain the hashtag #mynewvideo.\");\n}", "intent": "When you post a new video with the hashtag #mynewvideo on Instagram, send the video to the Telegram chat @mychatroom with the caption \"Check out my latest video!\" and include the video URL http://instagr.am/p/CTGBw/."}
{"original_description": "Build your own weekend edition! This Applet will take your search term and gather up relevant New York Times articles in an email that you'll get every Sunday.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var searchTerm = \"climate change\";\nvar dayOfWeek = \"Sunday\";\nvar timeOfDay = \"10:00 AM\";\nvar title = \"Weekly Climate Change News\";\nvar message = \"Stay updated on the latest climate change news\";\n\nif (Nytimes.newArticleMatchingSearch.term === searchTerm) {\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(dayOfWeek);\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(timeOfDay);\n  EmailDigest.sendWeeklyEmail.setTitle(title);\n  var articleInfo = \"Title: \" + Nytimes.newArticleMatchingSearch.Title + \"<br>\" +\n                    \"Author: \" + Nytimes.newArticleMatchingSearch.Author + \"<br>\" +\n                    \"Blurb: \" + Nytimes.newArticleMatchingSearch.Blurb + \"<br>\" +\n                    \"URL: <a href='\" + Nytimes.newArticleMatchingSearch.ArticleUrl + \"'>Read more</a>\";\n  EmailDigest.sendWeeklyEmail.setMessage(message + \"<br><br>\" + articleInfo);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No matching articles found for '\" + searchTerm + \"'\");\n}", "intent": "Send me a weekly email digest every Sunday at 10:00 AM with New York Times articles matching the search term \"climate change\" and including the article title, author, blurb, and URL, with the email titled \"Weekly Climate Change News\" and a message \"Stay updated on the latest climate change news\"."}
{"original_description": "When it's Christmas Day, set a Scene on your Nanoleaf Aurora. Works great with holiday-themed featured Scenes =)", "trigger_channel": "Is It Christmas?", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "isitchristmas.christmas"}, "trigger_details": [{"section": "Trigger fields", "title": "Timezone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which timezone?", "Slug": "timezone", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Year\nThe year in which it is Christmas.", "description": "The year in which it is Christmas.", "details": {"Slug": "year", "Filter code": "Isitchristmas.christmas.Year", "Type": "String", "Example": "2014"}}, {"section": "Ingredients", "title": "Created at\nChristmas time.", "description": "Christmas time.", "details": {"Slug": "created_at", "Filter code": "Isitchristmas.christmas.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Answer\nIt will always be \"YES\".", "description": "It will always be \"YES\".", "details": {"Slug": "answer", "Filter code": "Isitchristmas.christmas.Answer", "Type": "String", "Example": "YES"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_scene", "Filter code method": "Nanoleaf.turnOnScene.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "My scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "my_scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Isitchristmas.christmas.Answer === \"YES\" && Isitchristmas.christmas.timezone === \"Eastern Standard Time\") {\n  Nanoleaf.turnOnScene.setMyScenes(\"Winter Wonderland\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"It's not Christmas Day in the Eastern Standard Time timezone.\");\n}", "intent": "When it is Christmas Day in the Eastern Standard Time timezone, set the \"Winter Wonderland\" Scene on your Nanoleaf Aurora."}
{"original_description": "Toggle your Hue lights with this shortcut widget button.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Hue.toggleAllHue.setLights(\"Living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Location does not match living room coordinates.\");\n}", "intent": "Toggle all Philips Hue lights in the living room when the button widget is pressed at 37.82666360000001 latitude and -122.42301220000003 longitude."}
{"original_description": "Every day at 5:00 PM this Applet will roundup and send you an email with the latest Winter Olympic news coverage.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (hour === 17 && minute === 0) {\n  var searchTerm = \"Winter Olympics\";\n  var section = \"Sports\";\n  var title = \"Today's Winter Olympics Updates\";\n  var message = \"Stay up-to-date with the latest Winter Olympics news\";\n\n  if (Nytimes.newArticleMatchingSearch.Term === searchTerm && Nytimes.newArticleMatchingSearch.Section === section) {\n    EmailDigest.sendDailyEmail.setTimeOfDay(\"5:00 PM\");\n    EmailDigest.sendDailyEmail.setTitle(title);\n    EmailDigest.sendDailyEmail.setMessage(message);\n    EmailDigest.sendDailyEmail.setUrl(Nytimes.newArticleMatchingSearch.ArticleUrl);\n  } else {\n    EmailDigest.sendDailyEmail.skip(\"No matching articles found.\");\n  }\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not the scheduled time.\");\n}", "intent": "Every day at 5:00 PM, send a daily email digest with the latest Winter Olympic news coverage to my inbox, including articles from The New York Times that match the search term \"Winter Olympics\" and are published in the Sports section, with a title like \"Today's Winter Olympics Updates\", and a message that says \"Stay up-to-date with the latest Winter Olympics news\"."}
{"original_description": "Time your sleep patterns to mother nature with this handy Applet — configure this as the sun rises, your LIFX bulbs will turn on slowly.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_on", "Filter code method": "Lifx.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade in duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade in duration", "Helper text": "How long should it take for the lights to fade in.", "Slug": "fade_in_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not available? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; fade_in_duration: 12&quot; for red at 30% brightness, 12 second fade in. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOn.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Weather.sunRises.TempFahrenheit > 60) {\n  Lifx.turnOn.setSelector(\"Living Room\");\n  Lifx.turnOn.setColor(\"Warm White\");\n  Lifx.turnOn.setBrightness(0.8);\n  Lifx.turnOn.setFadeInDuration(10);\n} else {\n  Lifx.turnOn.skip(\"Temperature is not above 60°F\");\n}", "intent": "When the sun rises at my location, which is set to New York City, and the current temperature is above 60°F, turn on my LIFX bulbs in the living room with a warm white color, at 80% brightness, and a fade-in duration of 10 seconds."}
{"original_description": "Dark and dreary winters? Start your morning off with daylight white to clear away the sleepy brain cobwebs quicker. Just pick a time to start!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 7 || DateAndTime.everyDayAt.CheckTime.minute() !== 0) {\n  Nanoleaf.changeColorRequest.skip(\"Not 7:00 AM\");\n} else {\n  Nanoleaf.changeColorRequest.setValue(\"daylight white\");\n}", "intent": "Turn on the living room Nanoleaf lights to daylight white at 7:00 AM every day to start the morning with a refreshing ambiance."}
{"original_description": "Great for keep tabs on specific categories and types of apps. Search terms like \"camera,\" \"photography,\" and \"home\" are easy to get started with. ", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_from_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Search query\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "search_query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppFromSearch.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppFromSearch.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppFromSearch.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppFromSearch.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppFromSearch.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppFromSearch.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppFromSearch.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppFromSearch.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppFromSearch.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppFromSearch.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppFromSearch.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (AppStore.newAppFromSearch.SearchQuery === \"photography\" && AppStore.newAppFromSearch.Category === \"Productivity\") {\n  var formattedRow = AppStore.newAppFromSearch.Name + \"|||\" + AppStore.newAppFromSearch.Description + \"|||\" + AppStore.newAppFromSearch.Price + \"|||\" + AppStore.newAppFromSearch.Rating + \"|||\" + AppStore.newAppFromSearch.Version;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"New_Apps\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Applications\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"App does not match the search query or category.\");\n}", "intent": "When a new app is found in the Apple App Store with a search query for \"photography\" and its category is \"Productivity\", append a new row to a Google Sheets spreadsheet named \"New_Apps\" in the folder path \"IFTTT/Applications\", with a formatted row containing the app's name, description, price, rating, and version, separated by \"|||\", such as \"IFTTT|||An app that brings services together|||$9.99|||5 stars|||2.1.3\"."}
{"original_description": "Want to sync some of your notes to GDrive, but not all of them? This Applet will append them to a Google Doc when you use the Drive tag. ", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.add_tag_to_note"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Specific tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.addTagToNote.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.addTagToNote.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.addTagToNote.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.addTagToNote.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.addTagToNote.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Google Docs", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_docs.append_to_google_doc", "Filter code method": "GoogleDocs.appendToGoogleDoc.skip(string?: reason)", "Runtime method": "runAction(\"google_docs.append_to_google_doc\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "Document name", "Helper text": "Will create a new file if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Content", "Helper text": "some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setPath(string: path)"}}], "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"Drive\") && Evernote.addTagToNote.Tags.includes(\"Important\")) {\n  GoogleDocs.appendToGoogleDoc.setFilename(\"Daily Notes\");\n  GoogleDocs.appendToGoogleDoc.setPath(\"Notes\");\n  var noteContent = \"<h1>\" + Evernote.addTagToNote.Title + \"</h1>\";\n  noteContent += Evernote.addTagToNote.BodyHTML;\n  noteContent += \"<p>Public URL: <a href='\" + Evernote.addTagToNote.PublicUrl + \"'>\" + Evernote.addTagToNote.PublicUrl + \"</a></p>\";\n  noteContent += \"<p>Tags: \" + Evernote.addTagToNote.Tags + \"</p>\";\n  noteContent += \"<p>Created at: \" + Evernote.addTagToNote.CreatedAt + \"</p>\";\n  GoogleDocs.appendToGoogleDoc.setBody(noteContent);\n} else {\n  GoogleDocs.appendToGoogleDoc.skip(\"Note is not tagged with both 'Drive' and 'Important'.\");\n}", "intent": "Append notes tagged with \"Important\" from Evernote to a Google Doc named \"Daily Notes\" in the \"Notes\" folder, including the note title, body HTML, public URL, tags, and creation time, whenever the \"Drive\" tag is added to a note."}
{"original_description": "Taco tuesday on your plate! Taco tuesday in your...inbox?! Yes. This Applet will send any new GIFs tagged \"Taco\" to your email every Tuesday.  🌮 ❤️", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Tuesday\") {\n  var tags = Giphy.search.Tags;\n  if (tags.includes(\"Taco\")) {\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Tuesday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"12:00 PM\");\n    EmailDigest.sendWeeklyEmail.setTitle(\"Taco Tuesday Fun\");\n    EmailDigest.sendWeeklyEmail.setMessage(Giphy.search.ImageURL);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No Taco tagged GIFs found.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Tuesday.\");\n}", "intent": "Send a weekly email digest with new GIFs tagged \"Taco\" from Giphy to my inbox every Tuesday at 12:00 PM, including the GIF image URL and a title that says \"Taco Tuesday Fun\"."}
{"original_description": "Turn on your SwitchBot with one tap on your phone", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_on_bot", "Filter code method": "Switchbot.turnOnBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_on_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 22) {\n  Switchbot.turnOnBot.setChoseADevice(\"Living Room Bot\");\n} else {\n  Switchbot.turnOnBot.skip(\"Location or time does not match the criteria.\");\n}\n\nvar locationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n// Assuming there's a way to send notifications with images, \n// for simplicity, we'll just log it here. In real scenarios, \n// you'd replace this with actual notification sending code.\nconsole.log(\"Notification: Turned on Living Room Bot at \" + locationMapImageURL);", "intent": "Turn on the SwitchBot device named \"Living Room Bot\" when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, and send a notification with the map image of the location."}
{"original_description": "Universe Today covers all things outer space, from aliens and exoplanets to solar flares and satellites. This Applet will gather up their news and share it with you every Friday in an email digest. Weekend plans: Oh just traveling to outer space...WITH MY MIND! 💫", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== \"Friday\") {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (!(hour === 10 && minute === 0)) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 10:00 AM.\");\n}\n\nvar message = \"Universe Today News:<br/>\";\nvar entries = Feed.newFeedItem;\nfor (var i = 0; i < entries.length; i++) {\n  var title = entries[i].EntryTitle;\n  var url = entries[i].EntryUrl;\n  var image = entries[i].EntryImageUrl;\n  message += \"<a href='\" + url + \"'>\" + title + \"</a><br/>\";\n  if (image) {\n    message += \"<img src='\" + image + \"'/><br/>\";\n  }\n}\n\nEmailDigest.sendWeeklyEmail.setTitle(\"Universe Today News\");\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");", "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"Universe Today News\" and a message containing the entry titles and URLs from the Universe Today RSS feed, including images if available."}
{"original_description": "Keep track of stormy days", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.gust-speed-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.gustSpeedAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.gustSpeedAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target gust speed kmh\nThe target gust speed in km/h.", "description": "The target gust speed in km/h.", "details": {"Slug": "TargetGustSpeedKmh", "Filter code": "Netatmo.gustSpeedAbove.TargetGustSpeedKmh", "Type": "String", "Example": "38.6"}}, {"section": "Ingredients", "title": "Target gust speed mph\nThe target gust speed in mph.", "description": "The target gust speed in mph.", "details": {"Slug": "TargetGustSpeedMph", "Filter code": "Netatmo.gustSpeedAbove.TargetGustSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Gust speed kmh\nThe measured gust speed in km/h.", "description": "The measured gust speed in km/h.", "details": {"Slug": "GustSpeedKmh", "Filter code": "Netatmo.gustSpeedAbove.GustSpeedKmh", "Type": "String", "Example": "38.6"}}, {"section": "Ingredients", "title": "Gust speed mph\nThe measured gust speed in mph.", "description": "The measured gust speed in mph.", "details": {"Slug": "GustSpeedMph", "Filter code": "Netatmo.gustSpeedAbove.GustSpeedMph", "Type": "String", "Example": "24"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Netatmo.gustSpeedAbove.GustSpeedKmh > 38.6 && Netatmo.gustSpeedAbove.DeviceName === \"My Home - Wind gauge\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Stormy Days\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Weather/Reports\");\n  var formattedRow = Netatmo.gustSpeedAbove.MeasuredAt + \"|||\" + Netatmo.gustSpeedAbove.DeviceName + \"|||\" + Netatmo.gustSpeedAbove.TargetGustSpeedKmh;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Gust speed is not above threshold or device name does not match.\");\n}", "intent": "When the gust speed exceeds 38.6 km/h, as measured by my Netatmo device named \"My Home - Wind gauge\", append a new row to the Google Sheets spreadsheet named \"Stormy Days\" with the formatted row containing the date and time of measurement, the device name, and the target gust speed, and place this spreadsheet in the Drive folder path \"Weather/Reports\"."}
{"original_description": "Turn your phone into a history museum and art gallery! When the LOC publishes something new to \"Picture this\" it'll become your Android wallpaper. ", "trigger_channel": "Library of Congress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "loc.new_picture_this_post"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe post's title.", "description": "The post's title.", "details": {"Slug": "EntryTitle", "Filter code": "Loc.newPictureThisPost.Title", "Type": "String", "Example": "Sumo Sights"}}, {"section": "Ingredients", "title": "Post url\nThe URL to the blog post.", "description": "The URL to the blog post.", "details": {"Slug": "EntryUrl", "Filter code": "Loc.newPictureThisPost.PostUrl", "Type": "String", "Example": "http://blogs.loc.gov/picturethis/2017/06/sumo-sights/"}}, {"section": "Ingredients", "title": "Blog author\nThe author of the blog post.", "description": "The author of the blog post.", "details": {"Slug": "EntryAuthor", "Filter code": "Loc.newPictureThisPost.BlogAuthor", "Type": "String", "Example": "Lara Szypszak"}}, {"section": "Ingredients", "title": "Post content html\nThe blog post content, may contain HTML.", "description": "The blog post content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Loc.newPictureThisPost.PostContentHtml", "Type": "String", "Example": "<p>On a recent trip to Japan, I was on a tour bus from Nikko to Tokyo..."}}, {"section": "Ingredients", "title": "Post image url\nURL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Loc.newPictureThisPost.PostImageUrl", "Type": "String", "Example": "http://blogs.loc.gov/picturethis/files/2017/05/3g14324u.jpg"}}, {"section": "Ingredients", "title": "Published date\nDate the post was published.", "description": "Date the post was published.", "details": {"Slug": "EntryPublished", "Filter code": "Loc.newPictureThisPost.PublishedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.set_wallpaper", "Filter code method": "AndroidDevice.setWallpaper.skip(string?: reason)", "Runtime method": "runAction(\"android_device.set_wallpaper\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.setWallpaper.setPhoto Url(string: photo_url)"}}], "filter_code": "if (Loc.newPictureThisPost.PostImageUrl !== \"http://blogs.loc.gov/picturethis/files/placeholder_image.jpg\") {\n  AndroidDevice.setWallpaper.setPhotoUrl(Loc.newPictureThisPost.PostImageUrl);\n} else {\n  AndroidDevice.setWallpaper.skip(\"No image available in the post.\");\n}", "intent": "When the Library of Congress publishes a new post to \"Picture this\" with a title like \"Sumo Sights\" and an image URL such as \"http://blogs.loc.gov/picturethis/files/2017/05/3g14324u.jpg\", set the Android wallpaper to the image from the post's image URL."}
{"original_description": "This Applet sends you a notification with the FCC's latest news. Use the keyword filter to only receive the most relevant updates.", "trigger_channel": "Federal Communications Commission", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcc.new_news_release"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword(s) (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Fcc.newNewsRelease.Title", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Fcc.newNewsRelease.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Preview content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Fcc.newNewsRelease.PreviewContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Fcc.newNewsRelease.PreviewContent.toLowerCase().includes(\"spectrum auction\") || Fcc.newNewsRelease.PreviewContent.toLowerCase().includes(\"5g deployment\")) {\n  IfNotifications.sendNotification.setMessage(Fcc.newNewsRelease.Title + \": \" + Fcc.newNewsRelease.Link + \". Preview: \" + Fcc.newNewsRelease.PreviewContent);\n} else {\n  IfNotifications.sendNotification.skip(\"Does not contain 'spectrum auction' or '5G deployment'.\");\n}", "intent": "Send a notification with the title, link, and preview content of the latest news release from the Federal Communications Commission when it contains the keyword \"spectrum auction\" or \"5G deployment\"."}
{"original_description": "This Applet uses the VoIP service, powered by the IFTTT mobile app, to call your device every morning at the time you choose. Expect to hear the highs and lows for the day in Fahrenheit, wind speed, conditions, and the UV Index.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var message = \"Today's weather forecast is \" + Weather.currentWeatherAtTime.TodaysCondition + \" with a high of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and a low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F, the current UV index is \" + Weather.currentWeatherAtTime.UvIndex + \", wind speed is \" + Weather.currentWeatherAtTime.WindSpeedMph + \" mph from the \" + Weather.currentWeatherAtTime.WindDirection + \", and humidity is \" + Weather.currentWeatherAtTime.Humidity + \"%.\";\n  VoipCalls.callMyDevice.setMessage(message);\n} else {\n  VoipCalls.callMyDevice.skip(\"Not morning time\");\n}", "intent": "Call my device every morning at 07:00 with a voice message saying \"Today's weather forecast is Sunny with a high of 75°F and a low of 50°F, the current UV index is 6, wind speed is 5 mph from the North, and humidity is 60%.\""}
{"original_description": "This applet enable users to switch a light ON/OFF with a button widget", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Vimar VIEW", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "view_prod.on_off_action_light", "Filter code method": "ViewProd.onOffActionLight.skip(string?: reason)", "Runtime method": "runAction(\"view_prod.on_off_action_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Slug": "state", "Required": "false", "Can have default value": "true", "Filter code method": "ViewProd.onOffActionLight.setState(string: state)"}}], "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 22) {\n  ViewProd.onOffActionLight.setDevice(\"Living Room Lamp\");\n  var currentState = ViewProd.onOffActionLight.getState();\n  if (currentState === \"on\") {\n    ViewProd.onOffActionLight.setState(\"off\");\n  } else {\n    ViewProd.onOffActionLight.setState(\"on\");\n  }\n} else {\n  ViewProd.onOffActionLight.skip(\"Button pressed outside of specified location or time.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, turn the living room light on if it's off, or off if it's on, using the Vimar VIEW device named \"Living Room Lamp\"."}
{"original_description": "Turn of your sprinklers that are managed with Rachio if your Ambient Weather device shows that it's too windy.", "trigger_channel": "Ambient Weather", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ambient_weather.windspdmph_gt"}, "trigger_details": [{"section": "Trigger fields", "title": "Value\nText input", "description": "Text input", "details": {"Label": "What wind speed?", "Helper text": "in mph", "Slug": "value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "If you have more than one device, choose the one you'd like to watch.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Wind speed\nThe Wind Speed", "description": "The Wind Speed", "details": {"Slug": "value", "Filter code": "AmbientWeather.windspdmphGt.WindSpeed", "Type": "String", "Example": "1.2"}}, {"section": "Ingredients", "title": "Date\nThe date and time the event took place", "description": "The date and time the event took place", "details": {"Slug": "dateutc", "Filter code": "AmbientWeather.windspdmphGt.Date", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Rachio Irrigation Controller", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rachio_iro.stop_watering", "Filter code method": "RachioIro.stopWatering.skip(string?: reason)", "Runtime method": "runAction(\"rachio_iro.stop_watering\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AmbientWeather.windspdmphGt.WindSpeed > 15 && AmbientWeather.windspdmphGt.Device === \"Backyard Station\" && RachioIro.stopWatering.device_id === \"Front Yard\") {\n  RachioIro.stopWatering.skip(\"Wind speed exceeds 15 mph.\");\n}", "intent": "Turn off the sprinklers controlled by Rachio on the \"Front Yard\" device when the wind speed from the Ambient Weather device named \"Backyard Station\" exceeds 15 mph."}
{"original_description": "Turn on a ​device with SwitchBot (mechanically) or with SwitchBot Hub Plus (via infrared).", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_on_bot", "Filter code method": "Switchbot.turnOnBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_on_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar shareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 19) {\n  if (shareUrl === \"https://ifttt.com/share/McFwJfDH9Ns\") {\n    Switchbot.turnOnBot.skip(\"SwitchBot Device 1\");\n  } else {\n    Switchbot.turnOnBot.skip(\"Sharing URL does not match.\");\n  }\n} else {\n  Switchbot.turnOnBot.skip(\"Outside of specified location or time.\");\n}", "intent": "Turn on the SwitchBot Device 1 with SwitchBot Hub Plus via infrared when the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, and share the event on https://ifttt.com/share/McFwJfDH9Ns."}
{"original_description": "All you have to do is \"Favorite\" an article in Pocket and this Applet will add it to your Buffer queue with a headline and image. Share great content easily! ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_favorite_item_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newFavoriteItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newFavoriteItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newFavoriteItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newFavoriteItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newFavoriteItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newFavoriteItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "if (Pocket.newFavoriteItemPocket.Title === \"My Blog Post\" && \n    Pocket.newFavoriteItemPocket.Url === \"http://blog.ifttt.com\" && \n    Pocket.newFavoriteItemPocket.Excerpt === \"This is an interesting blog post about IFTTT.\" && \n    Pocket.newFavoriteItemPocket.ImageUrl === \"http://example.com/image.jpg\" && \n    Pocket.newFavoriteItemPocket.Tags === \"technology, innovation, apps\") {\n  var message = \"Check out this great article: \" + Pocket.newFavoriteItemPocket.Title + \" - \" + Pocket.newFavoriteItemPocket.Url;\n  Buffer.addToBuffer.setMessage(message);\n  Buffer.addToBuffer.setThumbnailUrl(Pocket.newFavoriteItemPocket.ImageUrl);\n} else {\n  Buffer.addToBuffer.skip(\"The favorited article does not match the specified criteria.\");\n}", "intent": "When a new article is favorited in Pocket with the title \"My Blog Post\", URL \"http://blog.ifttt.com\", excerpt \"This is an interesting blog post about IFTTT.\", image URL \"http://example.com/image.jpg\", and tags \"technology, innovation, apps\", add it to Buffer as a new update with the message \"Check out this great article: My Blog Post - http://blog.ifttt.com\" including the image."}
{"original_description": "This applet enable users to acivate a scene with a button widget", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Vimar VIEW", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "view_prod.scene_action", "Filter code method": "ViewProd.sceneAction.skip(string?: reason)", "Runtime method": "runAction(\"view_prod.scene_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "false", "Can have default value": "false"}}], "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nvar device = \"Living Room Lights\";\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 19) {\n  ViewProd.sceneAction.setDevice(device);\n} else {\n  ViewProd.sceneAction.skip(\"Conditions not met\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the occurrence time is between 07:00 and 19:00, activate the scene on device \"Living Room Lights\" using the Vimar VIEW channel."}
{"original_description": "Alert me via my Hue if the wind gets dangerous", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.gust-speed-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.gustSpeedAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.gustSpeedAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target gust speed kmh\nThe target gust speed in km/h.", "description": "The target gust speed in km/h.", "details": {"Slug": "TargetGustSpeedKmh", "Filter code": "Netatmo.gustSpeedAbove.TargetGustSpeedKmh", "Type": "String", "Example": "38.6"}}, {"section": "Ingredients", "title": "Target gust speed mph\nThe target gust speed in mph.", "description": "The target gust speed in mph.", "details": {"Slug": "TargetGustSpeedMph", "Filter code": "Netatmo.gustSpeedAbove.TargetGustSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Gust speed kmh\nThe measured gust speed in km/h.", "description": "The measured gust speed in km/h.", "details": {"Slug": "GustSpeedKmh", "Filter code": "Netatmo.gustSpeedAbove.GustSpeedKmh", "Type": "String", "Example": "38.6"}}, {"section": "Ingredients", "title": "Gust speed mph\nThe measured gust speed in mph.", "description": "The measured gust speed in mph.", "details": {"Slug": "GustSpeedMph", "Filter code": "Netatmo.gustSpeedAbove.GustSpeedMph", "Type": "String", "Example": "24"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Netatmo.gustSpeedAbove.DeviceName === \"My Home - Wind gauge\" && Netatmo.gustSpeedAbove.GustSpeedKmh > 40) {\n  Hue.setColorAllHue.setLights(\"Living Room\");\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Gust speed is below threshold or device is not My Home - Wind gauge.\");\n}", "intent": "If the gust speed exceeds 40 km/h at My Home - Wind gauge, then set all Philips Hue lights in the Living Room to red (#FF0000)."}
{"original_description": "Make savings easy by setting an amount to automatically save each month", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_month_on_the"}, "trigger_details": [{"section": "Trigger fields", "title": "Month day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of the month", "Slug": "month_day", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyMonthOnThe.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (DateAndTime.everyMonthOnThe.month_day !== \"15\" || DateAndTime.everyMonthOnThe.time !== \"08:00\") {\n  Monzo.potDeposit.skip(\"Not the scheduled time for savings transfer.\");\n} else {\n  Monzo.potDeposit.setPot(\"Savings\");\n  Monzo.potDeposit.setAmount(\"20\");\n}", "intent": "Set aside £20 into my \"Savings\" pot on the 15th of every month at 08:00."}
{"original_description": "Start one of your preset media at a given time on a specified Triby", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.play_media_preset_on_specified_triby", "Filter code method": "InvoxiaTriby.playMediaPresetOnSpecifiedTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.play_media_preset_on_specified_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Triby\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Triby IO?", "Slug": "triby", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Preset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which media?", "Helper text": "A preset media is a media that has been attributed to at least one button of a Triby in your group.", "Slug": "preset", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Volume\nDropdown list", "description": "Dropdown list", "details": {"Label": "What volume?", "Slug": "volume", "Required": "true", "Can have default value": "false"}}], "filter_code": "var weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\nvar currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (weekdays.includes(dayOfWeek) && hour === 7 && minute === 30) {\n  InvoxiaTriby.playMediaPresetOnSpecifiedTriby.setTriby(\"Living Room Triby\");\n  InvoxiaTriby.playMediaPresetOnSpecifiedTriby.setPreset(\"Morning News\");\n} else {\n  InvoxiaTriby.playMediaPresetOnSpecifiedTriby.skip(\"Conditions not met.\");\n}", "intent": "Start the \"Morning News\" preset media at 07:30 on the \"Living Room Triby\" every Monday, Tuesday, Wednesday, Thursday, and Friday."}
{"original_description": "New GIFs that are tagged \"drag race\" will be tucked up into an email for you weekly. Sissy that walk. ", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var tags = Giphy.search.Tags;\nif (tags.includes(\"drag race\")) {\n  var emailHTML = Giphy.search.EmailHTML;\n  var title = \"Drag Race GIFs\";\n  var message = emailHTML;\n  var dayOfWeek = \"Sunday\";\n  var timeOfDay = \"10:00 AM\";\n  \n  EmailDigest.sendWeeklyEmail.setTitle(title);\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(dayOfWeek);\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(timeOfDay);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No drag race GIFs found.\");\n}", "intent": "Send a weekly email digest every Sunday at 10:00 AM with the subject \"Drag Race GIFs\" and a message containing the HTML of new Giphy GIFs tagged with \"drag race\", including their inline images, to be sent via Email Digest."}
{"original_description": "With the push of a button on your phone, your Signature thermostat is set to a certain temperature.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "nVent Nuheat Signature Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nVent_Nuheat.set_temperature", "Filter code method": "NVentNuheat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"nVent_Nuheat.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to set the temperature for", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.setTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Setpoint temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What setpoint temperature?", "Helper text": "The setpoint temperature", "Slug": "setpoint_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.setTemperature.setSetpoint Temperature(string: setpoint_temperature)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "What duration?", "Helper text": "The time to hold the temperature until", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "NVentNuheat.setTemperature.setDuration(string: duration)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  NVentNuheat.setTemperature.setThermostat(\"living room\");\n  NVentNuheat.setTemperature.setScale(\"Celsius\");\n  NVentNuheat.setTemperature.setSetpointTemperature(\"22\");\n  NVentNuheat.setTemperature.setDuration(\"2 hours\");\n} else {\n  NVentNuheat.setTemperature.skip(\"Location does not match.\");\n}", "intent": "When you press the button on your phone at a location like 37.82666360000001 latitude and -122.42301220000003 longitude, set your living room Signature thermostat to 22°C for the next 2 hours."}
{"original_description": "Send @IFTTT a message with #tvon to turn on your Harmony connected TV.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_group_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "You can use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot to <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">connect new groups</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires when anyone sends a message with the command /ifttt and the key phrase to the group.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to the command with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newGroupTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Group title\nThe title of the group.", "description": "The title of the group.", "details": {"Slug": "group_title", "Filter code": "Telegram.newGroupTextFilter.GroupTitle", "Type": "String", "Example": "Bot News Group"}}, {"section": "Ingredients", "title": "Author name\nThe name of the author who triggered the Applet.", "description": "The name of the author who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newGroupTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nAuthor username, when available.", "description": "Author username, when available.", "details": {"Slug": "author_username", "Filter code": "Telegram.newGroupTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents a plain-text message contents. Does not include the 'Key phrase'.", "description": "Represents a plain-text message contents. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newGroupTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newGroupTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.start-activity", "Filter code method": "Harmony.startActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.start-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Telegram.newGroupTextFilter.Text === \"#tvon\" && Telegram.newGroupTextFilter.GroupTitle === \"Living Room\") {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Invalid command or group.\");\n}", "intent": "Send a message with \"#tvon\" to the \"@IFTTT\" bot in the \"Living Room\" group on Telegram to turn on the Harmony connected TV using the \"Watch TV\" activity."}
{"original_description": "This boat trip will be a blast.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.wind-average-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.windAverageAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.windAverageAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target wind speed kmh\nThe target wind speed in km/h.", "description": "The target wind speed in km/h.", "details": {"Slug": "TargetWindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedKmh", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Target wind speed mph\nThe target wind speed in mph.", "description": "The target wind speed in mph.", "details": {"Slug": "TargetWindSpeedMph", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Wind speed kmh\nThe measured wind speed in km/h.", "description": "The measured wind speed in km/h.", "details": {"Slug": "WindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.WindSpeedKmh", "Type": "String", "Example": "13"}}, {"section": "Ingredients", "title": "Wind speed mph\nThe measured wind speed in mph.", "description": "The measured wind speed in mph.", "details": {"Slug": "WindSpeedMph", "Filter code": "Netatmo.windAverageAbove.WindSpeedMph", "Type": "String", "Example": "8"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.windAverageAbove.WindSpeedKmh > Netatmo.windAverageAbove.TargetWindSpeedKmh) {\n  IfNotifications.sendNotification.setMessage(\"High wind warning: wind speed is above \" + Netatmo.windAverageAbove.TargetWindSpeedKmh + \" km/h\");\n} else {\n  IfNotifications.sendNotification.skip(\"Wind speed is not above threshold.\");\n}", "intent": "When the wind speed measured by my Netatmo device named \"My Home - Wind gauge\" exceeds 24 km/h, send a notification with the message \"High wind warning: wind speed is above 24 km/h\"."}
{"original_description": "When IFTTT Do button is pressed, AirTouch will turn on the home air conditioning.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_power", "Filter code method": "Airtouch.acPower.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_power\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or turn off?", "Slug": "power_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acPower.setPower On Off(string: power_on_off)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Airtouch.acPower.setPowerOnOff(\"on\");\n  Airtouch.acPower.skip();\n}", "intent": "When the IFTTT Do button is pressed at a location like 37.8267, -122.4230, turn on the living room air conditioning using AirTouch."}
{"original_description": "Flicボタンを一回クリックすると、Atmoph Window がつきます。もう一度クリックすると画面スリープになります。", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.turn_on", "Filter code method": "Atmoph.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.turn_on\", {})"}, "action_details": [], "filter_code": "var lastClickTime = null;\nvar lastClickType = null;\nvar lastLongitude = null;\nvar lastLatitude = null;\n\nif (Flic.click.ClickType === 'click' && Flic.click.ButtonUuid === 'MyFlicButton') {\n  Atmoph.turnOn();\n} else if (Flic.click.ClickType === 'double_click' && Flic.click.ButtonUuid === 'MyFlicButton' \n           && Flic.click.Longitude === 18.0649000 && Flic.click.Latitude === 59.3325800) {\n  var currentTime = new Date(Flic.click.ClickedAt).getTime();\n  if (lastClickTime !== null && lastClickType === 'click' && lastLongitude === 18.0649000 \n      && lastLatitude === 59.3325800 && (currentTime - lastClickTime) / 1000 <= 5) {\n    Atmoph.sleep();\n  }\n  lastClickTime = currentTime;\n  lastClickType = Flic.click.ClickType;\n  lastLongitude = Flic.click.Longitude;\n  lastLatitude = Flic.click.Latitude;\n} else {\n  Atmoph.turnOn.skip('Not a single click or double click within 5 seconds');\n}", "intent": "When the Flic button named \"MyFlicButton\" is single-clicked, turn on the Atmoph Window, and if it's double-clicked within 5 seconds by the same user at a location with longitude 18.0649000 and latitude 59.3325800, put the screen to sleep."}
{"original_description": "Turn your WIFIPLUG on everyday at sunset. This Applet means that you no longer have to update your timers throughout the year. Let IFTTT do it for you!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WIFIPLUG", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wifiplug.turn_on", "Filter code method": "Wifiplug.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wifiplug.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Which switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Switch?", "Helper text": "Please choose your device.", "Slug": "which_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt) {\n  Wifiplug.turnOn.setWhichSwitch(\"Living Room\");\n} else {\n  Wifiplug.turnOn.skip(\"It's not sunset yet.\");\n}", "intent": "Turn on the Living Room WIFIPLUG switch at sunset every day, based on the Weather Underground forecast for New York City."}
{"original_description": "Just click on a button and turn on/off your device", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Fansync.onOff.setDevice(\"Living Room Fan\");\n  Fansync.onOff.setOnOff(\"on\");\n} else {\n  Fansync.onOff.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, turn on the Living Room Fan device using the Fanimation service."}
{"original_description": "Refreshes your Wi-Fi network by rebooting it once in awhile.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "D-Link Wi-Fi Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dlink_wifi_router.reboot", "Filter code method": "DlinkWifiRouter.reboot.skip(string?: reason)", "Runtime method": "runAction(\"dlink_wifi_router.reboot\", {})"}, "action_details": [{"section": "Action fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 3 && minute === 0) {\n  DlinkWifiRouter.reboot.setMydlinkNo(1);\n} else {\n  DlinkWifiRouter.reboot.skip(\"Not 3:00 AM\");\n}", "intent": "Reboot the D-Link Wi-Fi Router, specifically device number 1, every day at 3:00 AM to refresh the network."}
{"original_description": "When IFTTT Do button is pressed, AirTouch will turn off the home air conditioning.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_power", "Filter code method": "Airtouch.acPower.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_power\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or turn off?", "Slug": "power_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acPower.setPower On Off(string: power_on_off)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Airtouch.acPower.setAcIndex(\"living_room\");\n  Airtouch.acPower.setPowerOnOff(\"off\");\n} else {\n  Airtouch.acPower.skip(\"Location does not match.\");\n}", "intent": "When the IFTTT Do button is pressed at a location like 37.82666360000001 latitude and -122.42301220000003 longitude, turn off the living room air conditioning using AirTouch."}
{"original_description": "Use Weather Underground to automatically close your awning when winds reach a speed of 10mph or higher to prevent damage.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 10 && Weather.windSpeedRisesAbove.Location === \"New York\") {\n  SomfyMylink.move.setCommand(\"close\");\n} else {\n  SomfyMylink.move.skip(\"Wind speed is below 10mph or not in New York.\");\n}", "intent": "Close the awning when the wind speed rises above 10mph in New York to prevent damage."}
{"original_description": "When you tag an item with a specific tag in Pocket, a task will be added to Remember The Milk to remind you to (actually!) read it later.", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_tagged_item_pocket"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Single tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newTaggedItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newTaggedItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newTaggedItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newTaggedItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newTaggedItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newTaggedItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "if (Pocket.newTaggedItemPocket.Tags.includes(\"ReadLater\")) {\n  var taskName = \"Read \" + Pocket.newTaggedItemPocket.Title + \" later\";\n  Rememberthemilk.tasksAdd.setTask(taskName);\n  Rememberthemilk.tasksAdd.setUrl(Pocket.newTaggedItemPocket.Url);\n}", "intent": "When you tag an item with the tag \"ReadLater\" in Pocket, a task named \"Read My first blog post later\" will be added to Remember The Milk to remind you to read http://blog.ifttt.com later."}
{"original_description": "Try the label \"Telegram\" — when you make a new task with it, the details will be sent to the Telegram chat of your choice. ", "trigger_channel": "Todoist", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "todoist.new_task_created"}, "trigger_details": [{"section": "Trigger fields", "title": "Project\nDropdown list", "description": "Dropdown list", "details": {"Label": "Project to watch", "Helper text": "Configure this trigger to fire only when a task is created in the specified project.", "Slug": "project_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Task content\nContent of the task.", "description": "Content of the task.", "details": {"Slug": "task_content", "Filter code": "Todoist.newTaskCreated.TaskContent", "Type": "String", "Example": "Pay telephone bill"}}, {"section": "Ingredients", "title": "Task description\nDescription of the task.", "description": "Description of the task.", "details": {"Slug": "task_description", "Filter code": "Todoist.newTaskCreated.TaskDescription", "Type": "String", "Example": "Go to gym website and click renew in account settings"}}, {"section": "Ingredients", "title": "Link to task\nThe URL of the task.", "description": "The URL of the task.", "details": {"Slug": "link_to_task", "Filter code": "Todoist.newTaskCreated.LinkToTask", "Type": "Web URL", "Example": "https://todoist.com/showTask?id=999"}}, {"section": "Ingredients", "title": "Project\nProject to which the task belongs.", "description": "Project to which the task belongs.", "details": {"Slug": "project", "Filter code": "Todoist.newTaskCreated.Project", "Type": "String", "Example": "Household Tasks"}}, {"section": "Ingredients", "title": "Labels\nLabels assigned to the task.", "description": "Labels assigned to the task.", "details": {"Slug": "labels", "Filter code": "Todoist.newTaskCreated.Labels", "Type": "String", "Example": "to_follow_up"}}, {"section": "Ingredients", "title": "Priority\nPriority of the task.", "description": "Priority of the task.", "details": {"Slug": "priority", "Filter code": "Todoist.newTaskCreated.Priority", "Type": "String", "Example": "Priority 1"}}, {"section": "Ingredients", "title": "Created at\nDate and time the task was created.", "description": "Date and time the task was created.", "details": {"Slug": "created_at", "Filter code": "Todoist.newTaskCreated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Due date\nDue date of the task.", "description": "Due date of the task.", "details": {"Slug": "due_date", "Filter code": "Todoist.newTaskCreated.DueDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Section\nSection to which the task belongs (if any).", "description": "Section to which the task belongs (if any).", "details": {"Slug": "section", "Filter code": "Todoist.newTaskCreated.Section", "Type": "String", "Example": "Cleaning tasks"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Todoist.newTaskCreated.Labels.includes(\"Groceries\") \n    && Todoist.newTaskCreated.Project === \"Shopping\" \n    && Todoist.newTaskCreated.DueDate.startsWith(new Date().toISOString().split('T')[0]) \n    && Todoist.newTaskCreated.Priority === \"Priority 1\") {\n  var messageText = `Task: ${Todoist.newTaskCreated.TaskContent}\\nDescription: ${Todoist.newTaskCreated.TaskDescription}\\nLink: ${Todoist.newTaskCreated.LinkToTask}`;\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Conditions not met.\");\n}", "intent": "When a new task labeled \"Groceries\" is created in the \"Shopping\" project on Todoist with a due date today and priority set to \"Priority 1\", send a message to the Telegram chat \"#household\" that includes the task content, task description, and a link to the task, and enable web page preview for any URLs included in the message."}
{"original_description": "Press a button to close Skylink Atoms Garage Door Opener", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.gdo_close", "Filter code method": "Skylinknet.gdoClose.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.gdo_close\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub dev\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Garage Door?", "Slug": "hub_dev", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Skylinknet.gdoClose.setHubDev(\"MyGarage\");\n  Skylinknet.gdoClose.setKey(\"MySecurePassword123\");\n} else {\n  Skylinknet.gdoClose.skip(\"Button press not at the specified location.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, close the Skylink Atoms Garage Door Opener associated with the hub device named \"MyGarage\" using the hub password \"MySecurePassword123\"."}
{"original_description": "Wake up softly with a LightwaveRF Dimmer switched to a low dim level in the morning and avoid the groggy feeling from a loud alarm clock", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "LightwaveRF Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_lighting.dim_a_light", "Filter code method": "LightwaverfLighting.dimALight.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_lighting.dim_a_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Which light\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Light?", "Slug": "which_light", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What dim level\nText input > Other", "description": "Text input > Other", "details": {"Label": "What Dim Level?", "Helper text": "Enter any numeric value between 0 and 100 (increments are 5%, closest match will be used)", "Slug": "what_dim_level", "Required": "true", "Can have default value": "true", "Filter code method": "LightwaverfLighting.dimALight.setWhat Dim Level(string: what_dim_level)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.hour() == 7 && currentTime.minute() == 0) {\n  LightwaverfLighting.dimALight.setWhatDimLevel(\"20\");\n  LightwaverfLighting.dimALight.skip(\"Woke up softly at 07:00\");\n} else {\n  LightwaverfLighting.dimALight.skip(\"Not wake-up time\");\n}", "intent": "Wake me up softly every day at 07:00 by switching the Bedroom Light to a dim level of 20 using my LightwaveRF Dimmer, providing a gentle start to the morning and avoiding the jarring effect of a traditional alarm clock."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-heat-mode", "Filter code method": "Heatzy.aSetHeatMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-heat-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && latitude === \"37.82666360000001\" && longitude === \"-122.42301220000003\") {\n  Heatzy.aSetHeatMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetHeatMode.skip(\"Outside of specified location or time.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, between 07:00 and 19:00, set the Heatzy device named \"Living Room Thermostat\" to heat mode."}
{"original_description": "Open Garage door by pressing on the Flic button", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.tag"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Helper text": "The tag that should be triggered", "Slug": "tag", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.tag.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.tag.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.tag.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.tag.ClickType", "Type": "String", "Example": "double_click"}}, {"section": "Ingredients", "title": "Flic name\nThe name of the Flic.", "description": "The name of the Flic.", "details": {"Slug": "flic_name", "Filter code": "Flic.tag.FlicName", "Type": "String", "Example": "My New Flic"}}, {"section": "Ingredients", "title": "Tag\nThe Tag used.", "description": "The Tag used.", "details": {"Slug": "tag", "Filter code": "Flic.tag.Tag", "Type": "String", "Example": "Living Room"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.tag.FlicName === \"My New Flic\" && \n    Flic.tag.ClickType === \"double_click\" && \n    Flic.tag.Latitude === \"59.3325800\" && \n    Flic.tag.Longitude === \"18.0649000\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Conditions not met to open the garage door.\");\n}", "intent": "When the Flic button named \"My New Flic\" is double-clicked at a location with latitude 59.3325800 and longitude 18.0649000, open the Garadget door identified as \"Main Garage Door\"."}
{"original_description": "Whenever my Android Phone connects to the Wifi in my home, the QNAP Device will start playing some playlist from Music Station \n\n(This applet requires IFTTT Agent v1.1 or above, Music Station v5.0.4 or above and Media Streaming addon v430.1.0.3 or above to be installed on your QNAP device)", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.control_music_on_qnap_device", "Filter code method": "Qnap.controlMusicOnQnapDevice.skip(string?: reason)", "Runtime method": "runAction(\"qnap.control_music_on_qnap_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Choose your device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Audio interface\nDropdown list", "description": "Dropdown list", "details": {"Label": "Audio Interface", "Helper text": "Choose the audio interface for your Music Station", "Slug": "audio_interface", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.controlMusicOnQnapDevice.setAudio Interface(string: audio_interface)"}}, {"section": "Action fields", "title": "Function\nDropdown list", "description": "Dropdown list", "details": {"Label": "Music Station Control", "Helper text": "Function", "Slug": "function", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.controlMusicOnQnapDevice.setFunction(string: function)"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Qnap.controlMusicOnQnapDevice.setAudioInterface(\"HDMI\");\n  Qnap.controlMusicOnQnapDevice.setFunction(\"play\");\n  Qnap.controlMusicOnQnapDevice.setPlaylist(\"MorningPlaylist\");\n}", "intent": "When my Google Pixel 7 connects to the Wifi network named \"HomeNetwork\" at any time, the QNAP Device named \"LivingRoomQNAP\" will start playing the \"MorningPlaylist\" from Music Station using the \"HDMI\" audio interface."}
{"original_description": "This Applet uses a button widget on your phone to turn on your device. Simply add the button widget with the IFTTT mobile app to access it. Learn more at https://help.ifttt.com/hc/en-us/articles/115010361688", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LinkJapan eHome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkJapan_eHome.powerState", "Filter code method": "LinkJapanEHome.powerState.skip(string?: reason)", "Runtime method": "runAction(\"LinkJapan_eHome.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Helper text": "choose power", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "LinkJapanEHome.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && \n    Math.abs(lat - 37.8267) < 0.001 && \n    Math.abs(lon - (-122.4230)) < 0.001) {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Outside of active hours or incorrect location.\");\n}", "intent": "Turn on the Living Room Lamp device using LinkJapan eHome when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and it's between 07:00 and 19:00."}
{"original_description": "Close Garage door by pressing on the Flic button", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.tag"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Helper text": "The tag that should be triggered", "Slug": "tag", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.tag.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.tag.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.tag.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.tag.ClickType", "Type": "String", "Example": "double_click"}}, {"section": "Ingredients", "title": "Flic name\nThe name of the Flic.", "description": "The name of the Flic.", "details": {"Slug": "flic_name", "Filter code": "Flic.tag.FlicName", "Type": "String", "Example": "My New Flic"}}, {"section": "Ingredients", "title": "Tag\nThe Tag used.", "description": "The Tag used.", "details": {"Slug": "tag", "Filter code": "Flic.tag.Tag", "Type": "String", "Example": "Living Room"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.tag.FlicName === \"My New Flic\" && \n    Flic.tag.ClickType === \"double_click\" && \n    Flic.tag.Longitude === \"18.0649000\" && \n    Flic.tag.Latitude === \"59.3325800\") {\n  Garadget.closeDoor.skip(\"Flic button double-clicked at specified location.\");\n} else {\n  Garadget.closeDoor.setDoorId(null);\n}", "intent": "When the Flic button named \"My New Flic\" is double-clicked at a location with longitude 18.0649000 and latitude 59.3325800, close the garage door."}
{"original_description": "Prepare your favorite coffee drink with milk using the Button widget. Choose between Americano, Caffe Latte, Cappuccino, Espresso Macchiato, Flat White and Latte Macchiato together with your preferred coffee settings.\n", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_start_milk_mix_program", "Filter code method": "HcCoffeeMachine.coffeeMakerStartMilkMixProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_start_milk_mix_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Helper text": "Please note that your coffee machine has to be connected and turned on (but not active) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Bean amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Strength", "Helper text": "Please note that not every value is supported by each program. For more information please check your user manual.", "Slug": "bean_amount", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fill quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Size", "Slug": "fill_quantity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Milk amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Milk amount", "Helper text": "Please note that this option is only supported by coffee machines with activated barista mode. In all other cases you have to select the value 'Default' in order to use the default coffee milk ratio. For more information please check your user manual.", "Slug": "milk_amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setHaId(\"MyMorningBrew\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setProgram(\"Cappuccino\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setBeanAmount(\"medium\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setFillQuantity(\"large\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setMilkAmount(\"extra foamy\");\n} else {\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.skip(\"Location does not match.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, start the Home Connect Coffee Machine with the program set to Cappuccino, strength set to medium, size set to large, and milk amount set to extra foamy, using the coffee machine named MyMorningBrew."}
{"original_description": "This applet enable users to switch a light ON/OFF with a timer schedule", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Vimar VIEW", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "view_prod.on_off_action_light", "Filter code method": "ViewProd.onOffActionLight.skip(string?: reason)", "Runtime method": "runAction(\"view_prod.on_off_action_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Slug": "state", "Required": "false", "Can have default value": "true", "Filter code method": "ViewProd.onOffActionLight.setState(string: state)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.getHours() === 7) {\n  ViewProd.onOffActionLight.setState(\"on\");\n} else if (DateAndTime.everyWeekdayAt.CheckTime.getHours() === 18) {\n  ViewProd.onOffActionLight.setState(\"off\");\n}", "intent": "Turn on the living room light every weekday at 7:00 AM and turn it off at 6:00 PM using the Vimar VIEW device."}
{"original_description": "Turn your WIFIPLUG off everyday at sunrise. This Applet means that you no longer have to update your timers throughout the year. Let IFTTT do it for you!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WIFIPLUG", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wifiplug.turn_off", "Filter code method": "Wifiplug.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"wifiplug.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Which switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Switch?", "Helper text": "Please choose your device.", "Slug": "which_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt !== null && Weather.sunRises.SunriseAt !== undefined) {\n  Wifiplug.turnOff.setWhichSwitch(\"Living Room Lamp\");\n} else {\n  Wifiplug.turnOff.skip(\"Sunrise time is not available.\");\n}", "intent": "Turn off my WIFIPLUG switch, labeled \"Living Room Lamp\", every day at sunrise."}
{"original_description": "This applet enable users to activate a scene with a timer schedule", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Vimar VIEW", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "view_prod.scene_action", "Filter code method": "ViewProd.sceneAction.skip(string?: reason)", "Runtime method": "runAction(\"view_prod.scene_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() === 7 && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Saturday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Sunday\") {\n  ViewProd.sceneAction.setDevice(\"Living Room\");\n  ViewProd.sceneAction.setScene(\"Good Morning\");\n} else {\n  ViewProd.sceneAction.skip(\"Not the scheduled time or day for the 'Good Morning' scene.\");\n}", "intent": "Activate the 'Good Morning' scene on my 'Living Room' Vimar VIEW device every weekday at 7:00 AM."}
{"original_description": "Clicking a Flic button turns on your Atmoph Window. Clicking the button again turns off the window.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.turn_on", "Filter code method": "Atmoph.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.turn_on\", {})"}, "action_details": [], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = Flic.click.Latitude;\nvar longitude = Flic.click.Longitude;\nvar clickType = Flic.click.ClickType;\n\nif (hour >= 7 && hour < 19 && \n    Math.abs(latitude - 59.3325800) <= 0.009 && \n    Math.abs(longitude - 18.0649000) <= 0.009 && \n    Flic.click.ButtonUuid === \"MyOfficeButton\") {\n  if (clickType === \"double_click\") {\n    Atmoph.turnOn.setWindowName(\"LivingRoomView\");\n  } else if (clickType === \"click\" && Atmoph.getWindowName() === \"LivingRoomView\") {\n    Atmoph.turnOff.skip(\"Turning off LivingRoomView\");\n  }\n}", "intent": "When the Flic button named \"MyOfficeButton\" is double-clicked between 07:00 and 19:00, and the click occurs within a 1km radius of latitude 59.3325800 and longitude 18.0649000, turn on the Atmoph Window named \"LivingRoomView\". If the same button is clicked again with the same conditions, turn off the Atmoph Window."}
{"original_description": "Wake up by turning on the lights and playing the Sonos", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_stream", "Filter code method": "Sonos.playStream.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_stream\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "What do you want to play?", "Helper text": "Enter the URL of the audio stream you want to play", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setUrl(string: url)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Name\nText input > Title", "description": "Text input > Title", "details": {"Label": "What name do you want to show for this stream?", "Slug": "name", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setName(string: name)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image do you want to show for this stream?", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\n\nif (hour === 7 && minute === 0) {\n  // Turn on the living room lights\n  // NOTE: The provided JSON does not contain information about controlling lights.\n  // This part of the intent cannot be implemented with the given data.\n\n  // Play a gentle morning playlist from https://www.npr.org/podcasts/510310/morning-edition on the Sonos speaker in the bedroom\n  Sonos.playStream.setUrl(\"https://www.npr.org/podcasts/510310/morning-edition\");\n  Sonos.playStream.setName(\"Morning Edition\");\n  Sonos.playStream.setImageUrl(\"https://www.npr.org/assets/img/2021/07/13/morning-edition_podcast-art.png\"); // Replace with the actual image URL if needed\n  Sonos.playStream.setRoom(\"Bedroom\"); // Assuming \"Bedroom\" is a valid room name\n  Sonos.playStream.setIncludeGroupedRooms(false); // Play in this room only\n} else {\n  Sonos.playStream.skip(\"Not 7:00 AM\");\n}", "intent": "Turn on the living room lights and play a gentle morning playlist from https://www.npr.org/podcasts/510310/morning-edition on the Sonos speaker in the bedroom at 7:00 AM every day."}
{"original_description": "Deactivates Away Mode at a time you specify. This will run every day until switched off. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Wiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_heat.set_away", "Filter code method": "WiserHeat.setAway.skip(string?: reason)", "Runtime method": "runAction(\"wiser_heat.set_away\", {})"}, "action_details": [{"section": "Action fields", "title": "Away mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or Off", "Slug": "away_mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserHeat.setAway.setAway Mode(string: away_mode)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 7 && minute === 0) {\n  WiserHeat.setAway.setAwayMode(\"Off\");\n} else {\n  WiserHeat.setAway.skip(\"Not 7:00 AM\");\n}", "intent": "Deactivate Away Mode every day at 7:00 AM."}
{"original_description": "Every JotForm submission creates a new contact or updates a contact in MailChimp", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Mailchimp", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mailchimp.add_new_subscriber", "Filter code method": "Mailchimp.addNewSubscriber.skip(string?: reason)", "Runtime method": "runAction(\"mailchimp.add_new_subscriber\", {})"}, "action_details": [{"section": "Action fields", "title": "Which list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which list?", "Slug": "which_list", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What email address\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What email address?", "Slug": "what_email_address", "Required": "true", "Can have default value": "true", "Filter code method": "Mailchimp.addNewSubscriber.setWhat Email Address(string: what_email_address)"}}, {"section": "Action fields", "title": "First name\nText input > Title", "description": "Text input > Title", "details": {"Label": "First Name", "Helper text": "Optional", "Slug": "first_name", "Required": "false", "Can have default value": "true", "Filter code method": "Mailchimp.addNewSubscriber.setFirst Name(string: first_name)"}}, {"section": "Action fields", "title": "Last name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Last Name", "Helper text": "Optional", "Slug": "last_name", "Required": "false", "Can have default value": "true", "Filter code method": "Mailchimp.addNewSubscriber.setLast Name(string: last_name)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Jotform.latestFormSubmission.FormID === \"1234567890\" && \n    Jotform.latestFormSubmission.FilteredRichTextData.includes(\"Email\") && \n    hour >= 7 && hour <= 19) {\n  var email = Jotform.latestFormSubmission.FilteredRichTextData.match(/<td>E-mail</td>(.*?)</tr>/)[1].trim();\n  var firstName = Jotform.latestFormSubmission.FilteredRichTextData.match(/<td>First Name</td>(.*?)</tr>/);\n  var lastName = Jotform.latestFormSubmission.FilteredRichTextData.match(/<td>Last Name</td>(.*?)</tr>/);\n  \n  if (email) {\n    Mailchimp.addNewSubscriber.setWhatEmailAddress(email);\n    if (firstName) Mailchimp.addNewSubscriber.setFirstName(firstName[1].trim());\n    if (lastName) Mailchimp.addNewSubscriber.setLast_name(lastName[1].trim());\n  } else {\n    Mailchimp.addNewSubscriber.skip(\"No email address found in the form data.\");\n  }\n} else {\n  Mailchimp.addNewSubscriber.skip(\"Form ID or question filter does not match, or outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When a new submission is received from form 1234567890 on JotForm, specifically when the question filter \"Email\" is filled out and the submission date time is between 07:00 and 19:00, create a new contact or update an existing one in MailChimp list \"My Newsletter\" with the email address provided in the form data, including the first name \"John\" and last name \"Doe\" if available."}
{"original_description": "This Applet will sync any tasks with a specific\nlabel (you could use Google Tasks) to a Google Tasks tasklist.", "trigger_channel": "Todoist", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "todoist.new_task_created"}, "trigger_details": [{"section": "Trigger fields", "title": "Project\nDropdown list", "description": "Dropdown list", "details": {"Label": "Project to watch", "Helper text": "Configure this trigger to fire only when a task is created in the specified project.", "Slug": "project_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Task content\nContent of the task.", "description": "Content of the task.", "details": {"Slug": "task_content", "Filter code": "Todoist.newTaskCreated.TaskContent", "Type": "String", "Example": "Pay telephone bill"}}, {"section": "Ingredients", "title": "Task description\nDescription of the task.", "description": "Description of the task.", "details": {"Slug": "task_description", "Filter code": "Todoist.newTaskCreated.TaskDescription", "Type": "String", "Example": "Go to gym website and click renew in account settings"}}, {"section": "Ingredients", "title": "Link to task\nThe URL of the task.", "description": "The URL of the task.", "details": {"Slug": "link_to_task", "Filter code": "Todoist.newTaskCreated.LinkToTask", "Type": "Web URL", "Example": "https://todoist.com/showTask?id=999"}}, {"section": "Ingredients", "title": "Project\nProject to which the task belongs.", "description": "Project to which the task belongs.", "details": {"Slug": "project", "Filter code": "Todoist.newTaskCreated.Project", "Type": "String", "Example": "Household Tasks"}}, {"section": "Ingredients", "title": "Labels\nLabels assigned to the task.", "description": "Labels assigned to the task.", "details": {"Slug": "labels", "Filter code": "Todoist.newTaskCreated.Labels", "Type": "String", "Example": "to_follow_up"}}, {"section": "Ingredients", "title": "Priority\nPriority of the task.", "description": "Priority of the task.", "details": {"Slug": "priority", "Filter code": "Todoist.newTaskCreated.Priority", "Type": "String", "Example": "Priority 1"}}, {"section": "Ingredients", "title": "Created at\nDate and time the task was created.", "description": "Date and time the task was created.", "details": {"Slug": "created_at", "Filter code": "Todoist.newTaskCreated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Due date\nDue date of the task.", "description": "Due date of the task.", "details": {"Slug": "due_date", "Filter code": "Todoist.newTaskCreated.DueDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Section\nSection to which the task belongs (if any).", "description": "Section to which the task belongs (if any).", "details": {"Slug": "section", "Filter code": "Todoist.newTaskCreated.Section", "Type": "String", "Example": "Cleaning tasks"}}], "action_channel": "Google Tasks", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_tasks.add_task_to_tasklist", "Filter code method": "GoogleTasks.addTaskToTasklist.skip(string?: reason)", "Runtime method": "runAction(\"google_tasks.add_task_to_tasklist\", {})"}, "action_details": [{"section": "Action fields", "title": "Tasklist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which task list?", "Helper text": "The task list to which the task should be added.", "Slug": "tasklist_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What is the title of the task?", "Slug": "task_title", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Title(string: task_title)"}}, {"section": "Action fields", "title": "Task notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What are the notes to include in the task?", "Helper text": "Notes describing the task", "Slug": "task_notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Notes(string: task_notes)"}}, {"section": "Action fields", "title": "Due date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Does the task have a due date?", "Helper text": "Field only sets the date. Ex. Next Tuesday, Today.", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setDue Date(string: due_date)"}}], "filter_code": "if (Todoist.newTaskCreated.Project === \"Household Tasks\" && Todoist.newTaskCreated.Labels.includes(\"to_follow_up\") && Todoist.newTaskCreated.Priority === \"Priority 1\") {\n  GoogleTasks.addTaskToTasklist.setTaskTitle(Todoist.newTaskCreated.TaskContent);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(Todoist.newTaskCreated.TaskDescription + \"\\n\" + Todoist.newTaskCreated.LinkToTask);\n  if (Todoist.newTaskCreated.DueDate) {\n    GoogleTasks.addTaskToTasklist.setDueDate(Todoist.newTaskCreated.DueDate);\n  }\n} else {\n  GoogleTasks.addTaskToTasklist.skip(\"Task does not match the specified conditions.\");\n}", "intent": "When a new task is created in the \"Household Tasks\" project on Todoist with the label \"to_follow_up\" and priority \"Priority 1\", add the task to the \"Personal Tasks\" task list on Google Tasks with the task title set to the content of the Todoist task, notes including the description and link to the task, and due date matching the one set in Todoist."}
{"original_description": "Run any Logicblocks on demand simply using your phone! Every time you tap on the widget button, Apilio will run a Logicblock for you.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.logicblock_evaluation_requests", "Filter code method": "Apilio.logicblockEvaluationRequests.skip(string?: reason)", "Runtime method": "runAction(\"apilio.logicblock_evaluation_requests\", {})"}, "action_details": [{"section": "Action fields", "title": "Logicblock identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio logicblock do you want to evaluate?", "Slug": "logicblock_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Apilio.logicblockEvaluationRequests.setLogicblockIdentifier(\"Morning Routine\");\n  Apilio.logicblockEvaluationRequests.skip();\n} else {\n  Apilio.logicblockEvaluationRequests.skip(\"Location does not match.\");\n}", "intent": "Run the \"Morning Routine\" Logicblock in Apilio every time the button widget is tapped on the phone, using the location where the button was pressed, which is latitude 37.8267 and longitude -122.4230, and the current date and time, such as 2020-07-08T04:17:06+05:00, to trigger the evaluation of the Logicblock."}
{"original_description": "Use the IFTTT app button widget to turn on a device with one click.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_on", "Filter code method": "SmartHomeSolution.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The device name", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  SmartHomeSolution.turnDeviceOn.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Location does not match.\");\n}", "intent": "Turn on the Living Room Lamp device with one click using the IFTTT app button widget when the button is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, and record the event with a share URL https://ifttt.com/share/McFwJfDH9Ns and occurred at date and time 2020-07-08T04:17:06+05:00."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-turn-off", "Filter code method": "Heatzy.aTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-turn-off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour <= 19) {\n  Heatzy.aTurnOff.setDevice(\"Living Room Heater\");\n} else {\n  Heatzy.aTurnOff.skip(\"Conditions not met.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, turn off the Heatzy device named \"Living Room Heater\" if the current time is between 07:00 and 19:00."}
{"original_description": "Use the IFTTT app button widget to turn off a device with one click.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_off", "Filter code method": "SmartHomeSolution.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The name of the device to turn off", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  SmartHomeSolution.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n  var shareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\n  var occurredAt = DoButton.doButtonNewCommandCommon.OccurredAt;\n  // Assuming recording the event is handled externally or implicitly\n} else {\n  SmartHomeSolution.turnDeviceOff.skip(\"Location does not match.\");\n}", "intent": "Turn off the Living Room Lamp device with one click using the IFTTT app button widget when pressed at a location with latitude 37.8267 and longitude -122.4230, and record the event with a share URL https://ifttt.com/share/McFwJfDH9Ns and occurrence time 2020-07-08T04:17:06+05:00."}
{"original_description": "If the outdoor temperature drops below 55°F, then set your Wiser Air to heat mode.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Wiser Air", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_air.set_thermostats_system_mode", "Filter code method": "WiserAir.setThermostatsSystemMode.skip(string?: reason)", "Runtime method": "runAction(\"wiser_air.set_thermostats_system_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserAir.setThermostatsSystemMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 55) {\n  WiserAir.setThermostatsSystemMode.setMode(\"heat\");\n}", "intent": "If the current temperature in degrees Fahrenheit at your location drops below 55°F, then set your Wiser Air device to heat mode."}
{"original_description": "When you complete a task with Remember The Milk, your Philips Hue lights will blink.", "trigger_channel": "Remember The Milk", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "rememberthemilk.task_completed"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Rememberthemilk.taskCompleted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nThe name of the task.", "description": "The name of the task.", "details": {"Slug": "name", "Filter code": "Rememberthemilk.taskCompleted.Name", "Type": "String", "Example": "Pick up the milk"}}, {"section": "Ingredients", "title": "List\nThe name of the list.", "description": "The name of the list.", "details": {"Slug": "list", "Filter code": "Rememberthemilk.taskCompleted.List", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the task.", "description": "The priority of the task.", "details": {"Slug": "priority", "Filter code": "Rememberthemilk.taskCompleted.Priority", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Link to task\nThe URL of the task.", "description": "The URL of the task.", "details": {"Slug": "link_to_task", "Filter code": "Rememberthemilk.taskCompleted.LinkToTask", "Type": "String", "Example": "https://www.rememberthemilk.com/app/#all/123456"}}, {"section": "Ingredients", "title": "Tags\nComma-separated list of task tags.", "description": "Comma-separated list of task tags.", "details": {"Slug": "tags", "Filter code": "Rememberthemilk.taskCompleted.Tags", "Type": "String", "Example": "meeting, archived, asap"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Rememberthemilk.taskCompleted.Name === \"Pick up the groceries\" && \n    Rememberthemilk.taskCompleted.Priority === \"High\" && \n    Rememberthemilk.taskCompleted.List === \"Shopping\") {\n  Hue.blinkAllHue.setLights(\"Living room\");\n} else {\n  Hue.blinkAllHue.skip(\"Task does not match the criteria.\");\n}", "intent": "When you complete a task named \"Pick up the groceries\" with high priority in your \"Shopping\" list on Remember The Milk, your Philips Hue lights in the living room will blink."}
{"original_description": "When IFTTT Do button is pressed, AirTouch will turn on the home air conditioning and set to cool mode.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Airtouch.acMode.setAcIndex(\"Living Room AC\");\n  Airtouch.acMode.setMode(\"cool\");\n} else {\n  Airtouch.acMode.skip(\"Location does not match.\");\n}", "intent": "When the IFTTT Do button is pressed at a location like 37.8267, -122.4230, turn on the home air conditioning unit indexed as \"Living Room AC\" and set it to cool mode."}
{"original_description": "When your oven has finished, then set a scene with your Philips Hue lights.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcOven.ovenFinished.HaId === \"Kitchen Oven\") {\n  Hue.setScene.setScene(\"Relax\");\n} else {\n  Hue.setScene.skip(\"Oven name does not match 'Kitchen Oven'\");\n}", "intent": "When the oven named \"Kitchen Oven\" has finished, then set the \"Relax\" scene with your Philips Hue lights."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-cool-mode", "Filter code method": "Heatzy.aSetCoolMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-cool-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Heatzy.aSetCoolMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetCoolMode.skip(\"Location does not match.\");\n}", "intent": "When you press the button widget at a location with latitude 37.8267 and longitude -122.4230, turn on the Heatzy device named \"Living Room Thermostat\" to cool mode."}
{"original_description": "Close garage door when wind speed increases.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 10) {\n  Garadget.closeDoor.skip(\"Wind speed is above 10 mph\");\n}", "intent": "Close the garage door when the wind speed rises above 10 mph at my home location in any direction."}
{"original_description": "If the outdoor temperature rises above 70°F, then set your Wiser Air to cool mode.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Wiser Air", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_air.set_thermostats_system_mode", "Filter code method": "WiserAir.setThermostatsSystemMode.skip(string?: reason)", "Runtime method": "runAction(\"wiser_air.set_thermostats_system_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserAir.setThermostatsSystemMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  WiserAir.setThermostatsSystemMode.setMode(\"cool\");\n}", "intent": "If the outdoor temperature in New York rises above 75°F, then set your Living Room Wiser Air device to cool mode."}
{"original_description": "Turn on the AC at specified mode at given time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Monday\" && \n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Tuesday\" && \n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Wednesday\" && \n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Thursday\" && \n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Friday\") {\n  Airtouch.acMode.skip(\"Not a weekday\");\n} else if (Meta.currentUserTime.hour() !== 7) {\n  Airtouch.acMode.skip(\"Not 7:00 AM\");\n} else {\n  Airtouch.acMode.setAcIndex(\"living room\");\n  Airtouch.acMode.setMode(\"cool\");\n}", "intent": "Turn on the living room air conditioning in cool mode at 7:00 AM every Monday, Tuesday, Wednesday, Thursday, and Friday."}
{"original_description": "When IFTTT Do button is pressed, AirTouch will turn on the home air conditioning and set to heat mode.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Airtouch.acMode.setAcIndex(1);\n  Airtouch.acMode.setMode(\"heat\");\n}", "intent": "When the IFTTT Do button is pressed at a location like 37.8267, -122.4230, turn on the home air conditioning unit indexed as 1 and set it to heat mode."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote et d'activer la programmation hebdomadaire.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-heat-mode", "Filter code method": "Heatzy.aSetHeatMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-heat-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && latitude === \"37.8267\" && longitude === \"-122.4230\") {\n  Heatzy.aSetHeatMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetHeatMode.skip(\"Outside of active hours or incorrect location.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, then activate the programmation hebdomadaire on the Heatzy device named \"Living Room Thermostat\"."}
{"original_description": "Activates Away Mode at a time you specify. This will run every day until switched off. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Wiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_heat.set_away", "Filter code method": "WiserHeat.setAway.skip(string?: reason)", "Runtime method": "runAction(\"wiser_heat.set_away\", {})"}, "action_details": [{"section": "Action fields", "title": "Away mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or Off", "Slug": "away_mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserHeat.setAway.setAway Mode(string: away_mode)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 19 && minute === 30) {\n  WiserHeat.setAway.skip(); // Activate Away Mode\n} else {\n  WiserHeat.setAway.skip(\"Not the specified time\");\n}", "intent": "Activate Away Mode every day at 7:30 PM to run until switched off."}
{"original_description": "Quickly send a photo to Teams with the Camera widget.", "trigger_channel": "Camera widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_camera.do_camera_new_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "DoCamera.doCameraNewPhoto.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "DoCamera.doCameraNewPhoto.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Share url\nThe link to the Share page for the photo.", "description": "The link to the Share page for the photo.", "details": {"Slug": "ShareURL", "Filter code": "DoCamera.doCameraNewPhoto.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude", "description": "", "details": {"Slug": "Latitude", "Filter code": "DoCamera.doCameraNewPhoto.Latitude", "Type": "String", "Example": "37.78346333333333"}}, {"section": "Ingredients", "title": "Longitude", "description": "", "details": {"Slug": "Longitude", "Filter code": "DoCamera.doCameraNewPhoto.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the tap.", "description": "The link to the map of the location of the tap.", "details": {"Slug": "LocationMapURL", "Filter code": "DoCamera.doCameraNewPhoto.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the tap.", "description": "The image of the map of the location of the tap.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoCamera.doCameraNewPhoto.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time the photo was taken.", "description": "The date and time the photo was taken.", "details": {"Slug": "OccurredAt", "Filter code": "DoCamera.doCameraNewPhoto.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Caption\nThe text you write on top of a photo.", "description": "The text you write on top of a photo.", "details": {"Slug": "Caption", "Filter code": "DoCamera.doCameraNewPhoto.Caption", "Type": "String", "Example": "A cool photo"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"your_team_id\", \"general\");\nMicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Photo\");\nvar messageBody = \"Check out this new photo taken at \" + DoCamera.doCameraNewPhoto.Latitude + \" latitude and \" + DoCamera.doCameraNewPhoto.Longitude + \" longitude on \" + DoCamera.doCameraNewPhoto.OccurredAt + \". Photo: \" + DoCamera.doCameraNewPhoto.TemporaryPublicPhotoURL;\nMicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\nMicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");", "intent": "Send a photo to the #general channel in Microsoft Teams with the subject \"New Photo\" and the message body \"Check out this new photo taken at 37.78346333333333 latitude and -122.42301220000003 longitude on 2020-07-08T04:17:06+05:00\" when a new photo is taken with the Camera widget, including the Temporary Public Photo URL https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf and marked as Important."}
{"original_description": "Play music with your Android when you turn on a iotty home light!", "trigger_channel": "iotty Smart Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "iottysmarthome.device_on_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which iotty device was turned on, off, or pressed?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Light state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Check whether the iotty device is on, off, or has been pressed", "Slug": "light_state", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Source\nWas the device turned on manually, by iotty App, or by some smart home platforms?", "description": "Was the device turned on manually, by iotty App, or by some smart home platforms?", "details": {"Slug": "source", "Filter code": "Iottysmarthome.deviceOnOff.Source", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Device name\nThe name of your iotty device", "description": "The name of your iotty device", "details": {"Slug": "device_name", "Filter code": "Iottysmarthome.deviceOnOff.DeviceName", "Type": "String", "Example": "Living Room Light"}}, {"section": "Ingredients", "title": "Created at\nThe exact date and hour when the event happened", "description": "The exact date and hour when the event happened", "details": {"Slug": "created_at", "Filter code": "Iottysmarthome.deviceOnOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Light state\nThe state of the iotty Smart Switch light (on or off)", "description": "The state of the iotty Smart Switch light (on or off)", "details": {"Slug": "light_state", "Filter code": "Iottysmarthome.deviceOnOff.LightState", "Type": "String", "Example": "on"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_best_song", "Filter code method": "AndroidDevice.playBestSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_best_song\", {})"}, "action_details": [], "filter_code": "if (Iottysmarthome.deviceOnOff.DeviceName === \"Living Room Light\" && Iottysmarthome.deviceOnOff.LightState === \"on\") {\n  AndroidDevice.playBestSong();\n} else {\n  AndroidDevice.playBestSong.skip(\"Condition not met\");\n}", "intent": "Play the best song on your Android device when the Living Room Light iotty smart home device is turned on."}
{"original_description": "If the outdoor temperature drops below 70°F, then set your Wiser Air to auto-changeover mode.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Wiser Air", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_air.set_thermostats_system_mode", "Filter code method": "WiserAir.setThermostatsSystemMode.skip(string?: reason)", "Runtime method": "runAction(\"wiser_air.set_thermostats_system_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserAir.setThermostatsSystemMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 68) {\n  WiserAir.setThermostatsSystemMode.setMode(\"auto-changeover\");\n}", "intent": "If the current outdoor temperature in degrees Fahrenheit at your location drops below 68°F, then set your Wiser Air device to auto-changeover mode."}
{"original_description": "Flic is really small and can attach to any surface. With this Applet, you can click one to Arm your blink security system! ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_arm", "Filter code method": "Blink.networkArm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to arm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"Security Button\") {\n    Blink.networkArm.setNetwork(\"Home Security\");\n  } else {\n    Blink.networkArm.skip(\"Either not a double click or wrong Flic button.\");\n  }\n} else {\n  Blink.networkArm.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Arm my Blink security system named \"Home Security\" when I double-click my Flic button named \"Security Button\" between 07:00 and 19:00."}
{"original_description": "Share a message with an Orion Group at specific times. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar message;\n\nif (hour === 8) {\n  message = \"Good morning, daily briefing upcoming\";\n} else if (hour === 17) {\n  message = \"Reminder, tomorrow's tasks are pending\";\n} else {\n  Orion.sendVoiceMessage.skip(\"Not the scheduled time.\");\n  return;\n}\n\nOrion.sendVoiceMessage.setGroup(\"Sales Team\");\nOrion.sendVoiceMessage.setUser(\"everyone\");\nOrion.sendVoiceMessage.setMessage(message);", "intent": "Share a message with the Sales Team group in Orion at 8:00 AM and 5:00 PM every day, saying \"Good morning, daily briefing upcoming\" in the morning and \"Reminder, tomorrow's tasks are pending\" in the evening, so that everyone in the group hears it."}
{"original_description": "Hide the Flic button well! ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_arm", "Filter code method": "Blink.networkArm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to arm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ButtonUuid === \"MyFlicButton\" && Flic.click.ClickType === \"double_click\" && Flic.click.Longitude === \"18.0649000\" && Flic.click.Latitude === \"59.3325800\") {\n  Blink.networkArm.setNetwork(\"HomeSecurity\");\n} else {\n  Blink.networkArm.skip(\"Conditions not met for arming the network.\");\n}", "intent": "When the Flic button named \"MyFlicButton\" is double-clicked at a location with longitude 18.0649000 and latitude 59.3325800, arm the Blink network system named \"HomeSecurity\"."}
{"original_description": "If the outdoor temperature rises above 55°F, then set your Wiser Air to auto-changeover mode.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Wiser Air", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_air.set_thermostats_system_mode", "Filter code method": "WiserAir.setThermostatsSystemMode.skip(string?: reason)", "Runtime method": "runAction(\"wiser_air.set_thermostats_system_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserAir.setThermostatsSystemMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 55) {\n  WiserAir.setThermostatsSystemMode.setMode(\"auto-changeover\");\n}", "intent": "If the outdoor temperature in New York rises above 55°F, then set your Living Room Wiser Air to auto-changeover mode."}
{"original_description": "Use the IFTTT app button widget to turn on a device with one click.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Powered by Viva", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "viva.turn_device_off", "Filter code method": "Viva.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"viva.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The name of the device to turn off", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 22) {\n  Viva.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  Viva.turnDeviceOff.skip(\"Conditions not met to turn on the device.\");\n}", "intent": "Turn on the Living Room Lamp device when the IFTTT app button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring between 07:00 and 22:00."}
{"original_description": "Your Airtable is automatically updated every time you get a new JotForm submission", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Airtable", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtable.create_record", "Filter code method": "Airtable.createRecord.skip(string?: reason)", "Runtime method": "runAction(\"airtable.create_record\", {})"}, "action_details": [{"section": "Action fields", "title": "Base\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Base?", "Slug": "base_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Table id or name\nText input > File name", "description": "Text input > File name", "details": {"Label": "Table", "Helper text": "The new record will be added to this table.", "Slug": "table_id_or_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Record content\nText input > Other", "description": "Text input > Other", "details": {"Label": "Record content", "Helper text": "You'll need to prefix the content of each Airtable field with ::airtable::FieldName:: <a href=\"https://support.airtable.com/hc/en-us/articles/220336747-Using-IFTTT-to-integrate-Airtable-with-other-apps-and-services#airaction\" target=\"_blank\">Learn more</a>", "Slug": "record_content", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" && Jotform.latestFormSubmission.FilteredRichTextData.includes(\"Email\")) {\n  var name = \"\";\n  var email = \"\";\n  var message = \"\";\n  \n  // Parse the rich text data to extract the values\n  var lines = Jotform.latestFormSubmission.RichTextData.split(\"<tr>\");\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    if (line.includes(\"Name\")) {\n      name = line.split(\"</td>\")[1].split(\"<\")[0].trim();\n    } else if (line.includes(\"Email\")) {\n      email = line.split(\"</td>\")[1].split(\"<\")[0].trim();\n    } else if (line.includes(\"Message\")) {\n      message = line.split(\"</td>\")[1].split(\"<\")[0].trim();\n    }\n  }\n  \n  // Create a new record in Airtable\n  var recordContent = `::airtable::Name::${name} ::airtable::Email::${email} ::airtable::Message::${message}`;\n  Airtable.createRecord.setRecordContent(recordContent);\n  Airtable.createRecord.setBaseID(\"My Base\");\n  Airtable.createRecord.setTableID(\"Submissions\");\n} else {\n  Airtable.createRecord.skip(\"Conditions not met.\");\n}", "intent": "When a new submission is received on form 1234567890, and the question \"Email\" is answered, create a new record in Airtable base \"My Base\" and table \"Submissions\", with the record content set to \"::airtable::Name::{Name} ::airtable::Email::{Email} ::airtable::Message::{Message}\", where {Name}, {Email}, and {Message} are the corresponding values from the JotForm submission."}
{"original_description": "IF your android device disconnects from your home WiFi network THEN turn on your AC off using Ambi Climate", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_power_off", "Filter code method": "Ambiclimate.devicePowerOff.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_power_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"linksys\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Ambiclimate.devicePowerOff.setDeviceName(\"Living Room AC\");\n  Ambiclimate.devicePowerOff.skip(\"Google Pixel 7 disconnected from linksys WiFi network\");\n}", "intent": "If your Google Pixel 7 disconnects from the linksys WiFi network at any time, then turn off the Living Room AC using Ambi Climate."}
{"original_description": "Organize and save your memories. Add photos with a specific hashtag to an iOS photo album.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "iOS Photos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ios_photos.create_photo_ios_photos", "Filter code method": "IosPhotos.createPhotoIosPhotos.skip(string?: reason)", "Runtime method": "runAction(\"ios_photos.create_photo_ios_photos\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "IosPhotos.createPhotoIosPhotos.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Album\nText input > Other", "description": "Text input > Other", "details": {"Label": "Album name", "Helper text": "Defaults to “IFTTT”", "Slug": "album", "Required": "false", "Can have default value": "true", "Filter code method": "IosPhotos.createPhotoIosPhotos.setAlbum(string: album)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.indexOf(\"#vacation\") === -1) {\n  IosPhotos.createPhotoIosPhotos.skip(\"Photo does not contain #vacation hashtag.\");\n} else {\n  IosPhotos.createPhotoIosPhotos.setPhotoUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n  IosPhotos.createPhotoIosPhotos.setAlbum(\"Summer Memories\");\n}", "intent": "Add photos from Instagram with the hashtag #vacation to the \"Summer Memories\" album in iOS Photos."}
{"original_description": "This will change the WiZ light(s) of your choice to yellow if your Netatmo Weather Station records winds going faster than the speed you chose. A handy reminder to secure everything outside and be cautious on the road. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.wind-average-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.windAverageAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.windAverageAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target wind speed kmh\nThe target wind speed in km/h.", "description": "The target wind speed in km/h.", "details": {"Slug": "TargetWindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedKmh", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Target wind speed mph\nThe target wind speed in mph.", "description": "The target wind speed in mph.", "details": {"Slug": "TargetWindSpeedMph", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Wind speed kmh\nThe measured wind speed in km/h.", "description": "The measured wind speed in km/h.", "details": {"Slug": "WindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.WindSpeedKmh", "Type": "String", "Example": "13"}}, {"section": "Ingredients", "title": "Wind speed mph\nThe measured wind speed in mph.", "description": "The measured wind speed in mph.", "details": {"Slug": "WindSpeedMph", "Filter code": "Netatmo.windAverageAbove.WindSpeedMph", "Type": "String", "Example": "8"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Netatmo.windAverageAbove.DeviceName === \"My Home - Wind gauge\" && Netatmo.windAverageAbove.WindSpeedKmh > 24) {\n  Wiz.turnOn.setMode(\"yellow\");\n  Wiz.turnOn.setDimming(\"80%\");\n  Wiz.turnOn.skip(null);\n} else {\n  Wiz.turnOn.skip(\"Wind speed is not above 24 km/h or device name does not match.\");\n}", "intent": "When the Netatmo Weather Station at \"My Home - Wind gauge\" measures wind speeds above 24 km/h, turn on the WiZ light in the \"Living Room\" and set it to yellow with a brightness of 80%."}
{"original_description": "This Applet uses a button widget on your phone to change the mode on your device. Simply add the button widget with the IFTTT mobile app to access it. Learn more at https://help.ifttt.com/hc/en-us/articles/115010361688", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LinkJapan eHome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkJapan_eHome.mode", "Filter code method": "LinkJapanEHome.mode.skip(string?: reason)", "Runtime method": "runAction(\"LinkJapan_eHome.mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Thermostatcontrol setmode string\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Helper text": "choose mode", "Slug": "ThermostatControl_SetMode_string", "Required": "true", "Can have default value": "true", "Filter code method": "LinkJapanEHome.mode.setThermostat Control Set Mode String(string: ThermostatControl_SetMode_string)"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  LinkJapanEHome.mode.setThermostatControlSetModeString(\"Cooling\");\n  LinkJapanEHome.mode.setDeviceinfo(\"Living Room Thermostat\");\n} else {\n  LinkJapanEHome.mode.skip(\"Button press does not match the specified conditions.\");\n}", "intent": "When the button widget on your phone is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, change the mode of your LinkJapan eHome device named \"Living Room Thermostat\" to \"Cooling\" mode."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote et de désactiver la programmation hebdomadaire.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-manual-mode", "Filter code method": "Heatzy.aSetManualMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-manual-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Heatzy.aSetManualMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetManualMode.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, set the Heatzy device named \"Living Room Thermostat\" to manual mode, disabling its weekly programming schedule."}
{"original_description": "Open garage door when approaching the location in your Zubie equipped car.", "trigger_channel": "Zubie", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zubie.arrivals"}, "trigger_details": [{"section": "Trigger fields", "title": "Vehicle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which vehicle?", "Helper text": "Select the vehicle to trigger the event", "Slug": "vehicle", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Place\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which place?", "Helper text": "Which place? (select from the list of Places defined in Zubie)", "Slug": "place", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time when this arrival event occured", "description": "Date and time when this arrival event occured", "details": {"Slug": "event_time", "Filter code": "Zubie.arrivals.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Place\nThe place name associated with this location within Zubie", "description": "The place name associated with this location within Zubie", "details": {"Slug": "place", "Filter code": "Zubie.arrivals.Place", "Type": "String", "Example": "Work"}}, {"section": "Ingredients", "title": "Vehicle\nName of the vehicle defined within Zubie", "description": "Name of the vehicle defined within Zubie", "details": {"Slug": "vehicle", "Filter code": "Zubie.arrivals.Vehicle", "Type": "String", "Example": "Mom's Van"}}, {"section": "Ingredients", "title": "Event details\nA brief text summary of the arrival event", "description": "A brief text summary of the arrival event", "details": {"Slug": "event_details", "Filter code": "Zubie.arrivals.EventDetails", "Type": "String", "Example": "Dad's Honda arrived at Home"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Zubie.arrivals.Place === \"Home\" && Zubie.arrivals.Vehicle === \"Mom's Van\") {\n  Garadget.openDoor.setDoorId(\"Main Garage\");\n} else {\n  Garadget.openDoor.skip(\"Not arriving at Home in Mom's Van.\");\n}", "intent": "Open the garage door labeled \"Main Garage\" when arriving at the place named \"Home\" in the vehicle named \"Mom's Van\"."}
{"original_description": "Mark something as a favorite in Pocket, and it'll go straight to your Buffer Queue with a picture attached. ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_favorite_item_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newFavoriteItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newFavoriteItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newFavoriteItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newFavoriteItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newFavoriteItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newFavoriteItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "if (Pocket.newFavoriteItemPocket.Title === \"My Favorite Article\" \n    && Pocket.newFavoriteItemPocket.Url === \"http://blog.ifttt.com/my-favorite-article\" \n    && Pocket.newFavoriteItemPocket.Excerpt === \"This is an amazing article about something cool.\" \n    && Pocket.newFavoriteItemPocket.Tags === \"neato, cool, article\" \n    && Pocket.newFavoriteItemPocket.ImageUrl === \"http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg\") {\n  Buffer.addToBuffer.setMessage(\"Check out this great article: http://blog.ifttt.com/my-favorite-article\");\n  Buffer.addToBuffer.setPictureUrl(Pocket.newFavoriteItemPocket.ImageUrl);\n} else {\n  Buffer.addToBuffer.skip(\"The favorited item does not match the specified criteria.\");\n}", "intent": "When a new item titled \"My Favorite Article\" with the URL \"http://blog.ifttt.com/my-favorite-article\" and excerpt \"This is an amazing article about something cool.\" is favorited in Pocket, with tags \"neato, cool, article\" and an image URL \"http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg\", add it to my Buffer Queue with the message \"Check out this great article: http://blog.ifttt.com/my-favorite-article\" and attach the image from the provided URL."}
{"original_description": "Call our trigger hotline and enter your 3-digit trigger code to disarm your Arlo cam.", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_call"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerCall.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerCall.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerCall.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerCall.TriggerCode", "Type": "String", "Example": "123"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.arm", "Filter code method": "Arlo.arm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" && Woopla.triggerCall.TriggerCode === \"421\") {\n  Arlo.disarm.setDeviceName(\"Front Door Cam\");\n} else {\n  Arlo.disarm.skip(\"Incorrect trigger code or called number.\");\n}", "intent": "When I call the Woopla trigger hotline at +16282222790 and enter the 3-digit trigger code 421, disarm my Arlo camera named \"Front Door Cam\"."}
{"original_description": "Call our trigger hotline and enter your 3-digit trigger code to arm your Arlo cam.", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_call"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerCall.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerCall.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerCall.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerCall.TriggerCode", "Type": "String", "Example": "123"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.arm", "Filter code method": "Arlo.arm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" && Woopla.triggerCall.TriggerCode === \"142\") {\n  Arlo.arm.setDeviceName(\"Front Door Cam\");\n} else {\n  Arlo.arm.skip(\"Trigger code or called number does not match.\");\n}", "intent": "When I call the Woopla trigger hotline at +16282222790 and enter the trigger code 142, arm my Arlo camera named \"Front Door Cam\"."}
{"original_description": "Netflix lagging? Boost it. Click Flic to Prioritize your TV's WiFi in your OnHub WiFi Network. ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Google Wifi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_wifi.prioritize_device", "Filter code method": "GoogleWifi.prioritizeDevice.skip(string?: reason)", "Runtime method": "runAction(\"google_wifi.prioritize_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the device to prioritize", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ButtonUuid === \"Living Room Controller\" && Flic.click.ClickType === \"double_click\" && hour >= 18 && hour <= 22) {\n  GoogleWifi.prioritizeDevice.setDeviceName(\"Samsung QLED TV\");\n} else {\n  GoogleWifi.prioritizeDevice.skip(\"Condition not met.\");\n}", "intent": "When the Flic button named \"Living Room Controller\" is double-clicked between 18:00 and 22:00, prioritize the device \"Samsung QLED TV\" on the Google Wifi network to boost Netflix streaming."}
{"original_description": "Open garage door when Android phone reconnects to the home WiFi network.", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt).getHours();\nvar ssid = AndroidDevice.connectToWifiNetworkWithSsid.SSID;\nvar deviceName = AndroidDevice.connectToWifiNetworkWithSsid.DeviceName;\n\nif (ssid === \"HomeNetwork\" && deviceName === \"Google Pixel 7\" && hour >= 6 && hour < 22) {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Conditions not met to open the garage door.\");\n}", "intent": "Open the garage door named \"Main Garage Door\" when my Google Pixel 7 Android phone reconnects to the home WiFi network with the SSID \"HomeNetwork\" between 06:00 and 22:00."}
{"original_description": "Call our trigger hotline to start a video recording.", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_call"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerCall.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerCall.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerCall.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerCall.TriggerCode", "Type": "String", "Example": "123"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.record", "Filter code method": "Arlo.record.skip(string?: reason)", "Runtime method": "runAction(\"arlo.record\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "How long?", "Helper text": "How long Arlo will record in seconds.", "Slug": "duration", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" && Woopla.triggerCall.PhoneNumber === \"+49203987654321\" && Woopla.triggerCall.TriggerCode === \"123\") {\n  Arlo.record.setDeviceName(\"Front Door Camera\");\n  Arlo.record.setDuration(300);\n} else {\n  Arlo.record.skip(\"Trigger conditions not met.\");\n}", "intent": "When a call is made to the trigger hotline at +16282222790 from phone number +49203987654321, and the 3-digit trigger code entered during the call is 123, start a 300-second video recording on the Arlo device named \"Front Door Camera\"."}
{"original_description": "This will automatically turn on the WiZ light(s) of your choice whenever your Withings Home detects motion.", "trigger_channel": "Withings Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "withingshome.motiondetection"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which camera?", "Helper text": "Device name as displayed in app settings", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Date and time\nDate and time motion was detected by Withings Home", "description": "Date and time motion was detected by Withings Home", "details": {"Slug": "time", "Filter code": "Withingshome.motiondetection.DateAndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nDevice name as displayed in app settings", "description": "Device name as displayed in app settings", "details": {"Slug": "device_name", "Filter code": "Withingshome.motiondetection.DeviceName", "Type": "String", "Example": "Motion was detected by your Withings Home \"Living Room\""}}, {"section": "Ingredients", "title": "Device mac\nDevice full mac address.", "description": "Device full mac address.", "details": {"Slug": "device_mac", "Filter code": "Withingshome.motiondetection.DeviceMAC", "Type": "String", "Example": "Motion has been detected by your Withings Home \"00:24:E4:2B:2C:2A\""}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var hour = Withingshome.motiondetection.DateAndTime.hour();\nvar deviceName = Withingshome.motiondetection.DeviceName;\nvar entity = \"Living Room\";\nvar mode = \"Relax\";\nvar dimming = \"75%\";\n\nif (deviceName === \"Motion Detector\" && hour >= 7 && hour < 22) {\n  Wiz.turnOn.setMode(mode);\n  Wiz.turnOn.setDimming(dimming);\n} else {\n  Wiz.turnOn.skip(\"Either not between 07:00 and 22:00 or wrong device.\");\n}", "intent": "Turn on the WiZ light in the \"Living Room\" to 75% brightness with the \"Relax\" mode whenever motion is detected by the Withings Home device named \"Motion Detector\" between 07:00 and 22:00."}
{"original_description": "If Netatmo weather station reports strong wind (e.g. >20mph), do not water my yard for today.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.wind-average-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.windAverageAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.windAverageAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target wind speed kmh\nThe target wind speed in km/h.", "description": "The target wind speed in km/h.", "details": {"Slug": "TargetWindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedKmh", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Target wind speed mph\nThe target wind speed in mph.", "description": "The target wind speed in mph.", "details": {"Slug": "TargetWindSpeedMph", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Wind speed kmh\nThe measured wind speed in km/h.", "description": "The measured wind speed in km/h.", "details": {"Slug": "WindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.WindSpeedKmh", "Type": "String", "Example": "13"}}, {"section": "Ingredients", "title": "Wind speed mph\nThe measured wind speed in mph.", "description": "The measured wind speed in mph.", "details": {"Slug": "WindSpeedMph", "Filter code": "Netatmo.windAverageAbove.WindSpeedMph", "Type": "String", "Example": "8"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Netatmo.windAverageAbove.WindSpeedMph > 25 && Netatmo.windAverageAbove.DeviceName === \"My Home - Wind gauge\") {\n  Netro.water.skip(\"High wind speed, skipping watering for today.\");\n}", "intent": "When the Netatmo weather station named \"My Home - Wind gauge\" reports a wind speed above 25 mph, skip watering my yard for today using the Netro device named \"Front Yard Sprinkler\", which is set to water all zones with a default duration of 30 minutes."}
{"original_description": "Decrease the volume on Sonos speakers or Rooms from your\nXtactor wristband by sending \"I SD \" (the\nargument \"SD\" is editable).", "trigger_channel": "Xtactor", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "xtactor.command"}, "trigger_details": [{"section": "Trigger fields", "title": "Shortname\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Shortname", "Helper text": "Only triggers with matching shortname will fire. Only capital letters and numbers allowed.", "Slug": "shortname", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Xtactor.command.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.decrease_volume", "Filter code method": "Sonos.decreaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.decrease_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.decreaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var hour = new Date(Xtactor.command.CreatedAt).getHours();\nif (hour >= 7 && hour < 22) {\n  if (Xtactor.command.shortname === \"I SD\") {\n    Sonos.decreaseVolume.setRoom(\"Living Room\");\n    Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n  } else {\n    Sonos.decreaseVolume.skip(\"Invalid command.\");\n  }\n} else {\n  Sonos.decreaseVolume.skip(\"Outside of allowed hours (7 AM to 10 PM).\");\n}", "intent": "When the Xtactor wristband receives the command \"I SD\" between 07:00 and 22:00, decrease the volume on the Sonos speaker in the \"Living Room\" and include grouped rooms."}
{"original_description": "Increase the volume on Sonos speakers or Rooms from your\nXtactor wristband by sending \"I SU \" (the\nargument \"SU\" is editable).", "trigger_channel": "Xtactor", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "xtactor.command"}, "trigger_details": [{"section": "Trigger fields", "title": "Shortname\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Shortname", "Helper text": "Only triggers with matching shortname will fire. Only capital letters and numbers allowed.", "Slug": "shortname", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Xtactor.command.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.decrease_volume", "Filter code method": "Sonos.decreaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.decrease_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.decreaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var hour = Xtactor.command.CreatedAt.hour();\nvar minute = Xtactor.command.CreatedAt.minute();\nif (hour >= 7 && hour < 22) {\n  if (Xtactor.command.shortname === \"I SU VOLUMEUP\") {\n    Sonos.decreaseVolume.setRoom(\"Living Room\");\n    Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n    Sonos.decreaseVolume.skip(\"Increasing volume as per command.\");\n  }\n}", "intent": "When the Xtactor wristband receives the command \"I SU VOLUMEUP\" between 07:00 and 22:00, increase the volume on the Sonos speaker in the \"Living Room\" and include grouped rooms."}
{"original_description": "Create your own visual alert with your Lutron switch if you no longer have sufficient fresh air in your home.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_light_level", "Filter code method": "LutronCasetaWireless.setLightLevel.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_light_level\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light?", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Level\nDropdown list", "description": "Dropdown list", "details": {"Label": "Set light level", "Slug": "level", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Uhoo.sensorNotification.UhooName === \"My Home\" && Uhoo.sensorNotification.SensorName === \"Carbon Dioxide (CO2)\" && parseFloat(Uhoo.sensorNotification.SensorValue) > 800) {\n  LutronCasetaWireless.setLightLevel.setZone(\"Living Room\");\n  LutronCasetaWireless.setLightLevel.setLevel(50);\n} else {\n  LutronCasetaWireless.setLightLevel.skip(\"CO2 level is not exceeded or uHoo sensor is not in My Home.\");\n}", "intent": "When the uHoo sensor in My Home detects that the CO2 level exceeds 800 ppm, turn on the Living Room light to 50% brightness using the Lutron Caséta and RA2 Select."}
{"original_description": "Keep a journal of your vacation memories! When you add the tag #vacation (or choose your own for extra *flair* points) to a pic, it'll create a journal entry in Day One that includes the caption and the date. ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#vacationmode\")) {\n  var captionWithoutTag = Instagram.newPhotoByYouTagged.CaptionNoTag;\n  var body = `${captionWithoutTag}\\nPosted on: ${Instagram.newPhotoByYouTagged.CreatedAt}\\nImage URL: ${Instagram.newPhotoByYouTagged.Url}`;\n  DayOne.createJournalEntry.setBody(body);\n  DayOne.createJournalEntry.setTags(\"travel, photography\");\n  // Note: The location (latitude and longitude) is not directly available from the Instagram trigger.\n  // If you have the location information in a different format or service, you would set it like this:\n  // DayOne.createJournalEntry.setLatitude(latitude);\n  // DayOne.createJournalEntry.setLongitude(longitude);\n} else {\n  DayOne.createJournalEntry.skip(\"The photo does not contain the #vacationmode tag.\");\n}", "intent": "When I post a photo on Instagram with the tag #vacationmode, create a new journal entry in my \"Travel\" journal on Day One that includes the caption without the tag, the date and time the photo was taken, and the short URL to the photo's Instagram page as the body, with tags \"travel\", \"photography\", and the location set to the latitude and longitude of the photo."}
{"original_description": "IF your android device connects to your home WiFi network THEN turn on your AC in comfort mode using Ambi Climate", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_mode_comfort", "Filter code method": "Ambiclimate.deviceModeComfort.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_mode_comfort\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"MyHomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room AC\");\n} else {\n  Ambiclimate.deviceModeComfort.skip(\"Condition not met\");\n}", "intent": "If your Google Pixel 7 Android device connects to your home WiFi network with SSID \"MyHomeNetwork\" then turn on your Living Room AC in comfort mode using Ambi Climate."}
{"original_description": "Pilotez vos radiateurs connectés Sauter grâce à la déconnexion de votre réseau WiFi de votre smartphone Android.\n", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\" && !AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt) {\n  SAUTERCozytouch.launchActionGroup.setActionGroup(\"Goodbye\");\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Conditions not met to launch Goodbye action group.\");\n}", "intent": "When your Android device, specifically a Google Pixel 7, disconnects from the WiFi network named \"HomeNetwork\" at any time, launch the \"Goodbye\" action group on your SAUTER Cozytouch system to automatically turn off the radiateurs connectés."}
{"original_description": "When a visitor arrives & checks in on an Envoy application, share a voice message with my Orion Group letting everyone know. ", "trigger_channel": "Envoy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "envoy.entry_created"}, "trigger_details": [{"section": "Ingredients", "title": "Agreement link\nLink to Signed Agreement (secure link; expires after 1 hour)", "description": "Link to Signed Agreement (secure link; expires after 1 hour)", "details": {"Slug": "agreement_link", "Filter code": "Envoy.entryCreated.AgreementLink", "Type": "File URL", "Example": "https://starkindustries.com/visitors/ndas/1.pdf"}}, {"section": "Ingredients", "title": "Visitor email\nEmail address of the visitor.", "description": "Email address of the visitor.", "details": {"Slug": "email", "Filter code": "Envoy.entryCreated.VisitorEmail", "Type": "String", "Example": "director@shield.com"}}, {"section": "Ingredients", "title": "Full name\nFull name of the visitor.", "description": "Full name of the visitor.", "details": {"Slug": "full_name", "Filter code": "Envoy.entryCreated.FullName", "Type": "String", "Example": "Nick Fury"}}, {"section": "Ingredients", "title": "Host name\nThe name of the person hosting the visitor.", "description": "The name of the person hosting the visitor.", "details": {"Slug": "host_name", "Filter code": "Envoy.entryCreated.HostName", "Type": "String", "Example": "Tony Stark"}}, {"section": "Ingredients", "title": "Location name\nLocation where the visitor is signing in.", "description": "Location where the visitor is signing in.", "details": {"Slug": "location_name", "Filter code": "Envoy.entryCreated.LocationName", "Type": "String", "Example": "Stark Industries HQ"}}, {"section": "Ingredients", "title": "Phone number\nThe phone number of the visitor.", "description": "The phone number of the visitor.", "details": {"Slug": "phone_number", "Filter code": "Envoy.entryCreated.PhoneNumber", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Sign in time\nThe date and time the visitor signed in.", "description": "The date and time the visitor signed in.", "details": {"Slug": "sign_in_time", "Filter code": "Envoy.entryCreated.SignInTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "if (Envoy.entryCreated.LocationName === \"Stark Industries HQ\") {\n  var message = `Visitor ${Envoy.entryCreated.FullName} has arrived and is being hosted by ${Envoy.entryCreated.HostName}, please welcome them.`;\n  Orion.sendVoiceMessage.setMessage(message);\n  Orion.sendVoiceMessage.setGroup(\"Orion Group\");\n  Orion.sendVoiceMessage.setUser(\"Everyone\");\n}", "intent": "When a visitor checks in at the Stark Industries HQ location on the Envoy application, send a voice message to the entire Orion Group saying \"Visitor Nick Fury has arrived and is being hosted by Tony Stark, please welcome them.\""}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-close-child-lock-mode", "Filter code method": "Heatzy.aCloseChildLockMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-close-child-lock-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Heatzy.aCloseChildLockMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aCloseChildLockMode.skip(\"Conditions not met.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and it's between 07:00 and 19:00, then close the child lock mode on the Heatzy device named \"Living Room Thermostat\"."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote.\nLorsque vous appuyez sur le bouton, le pilote passe en mode lock et les LEDs de contrôle s'éteignent.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-close-child-lock-mode", "Filter code method": "Heatzy.aCloseChildLockMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-close-child-lock-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Heatzy.aCloseChildLockMode.setDevice(\"Living Room Thermostat\");\n  // Note: The provided API does not explicitly support switching off control LEDs.\n  // If such functionality is available, it should be used here.\n}", "intent": "When you press the button widget at a location like 37.8267, -122.4230, turn on the child lock mode of your Heatzy device named \"Living Room Thermostat\" and switch off its control LEDs."}
{"original_description": "Every day at the pre-set time send a signal to your sRemo based on a pre-chosen condition in your sCloud.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "sRemo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sRemo.send_signal_t", "Filter code method": "SRemo.sendSignalT.skip(string?: reason)", "Runtime method": "runAction(\"sRemo.send_signal_t\", {})"}, "action_details": [{"section": "Action fields", "title": "Sremo\nDropdown list", "description": "Dropdown list", "details": {"Label": "sremo", "Helper text": "select your sRemo which is registered in sCloud", "Slug": "sremo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Signal number\nText input > Other", "description": "Text input > Other", "details": {"Label": "signal_number", "Helper text": "select 1 - 141 number of sRemo signal", "Slug": "signal_number", "Required": "true", "Can have default value": "true", "Filter code method": "SRemo.sendSignalT.setSignal Number(string: signal_number)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 AM\";\nif (currentTime.indexOf(targetTime) === -1) {\n  SRemo.sendSignalT.skip(\"Not the target time\");\n} else {\n  SRemo.sendSignalT.setSignalNumber(\"105\");\n  SRemo.sendSignalT();\n}", "intent": "Every day at 8:00 AM, send signal number 105 to the Office sRemo device based on the current time."}
{"original_description": "Toggle on/off Phillips Hue lights from your Xtactor wristband by sending \"I T\" (the argument \"T\" is editable).", "trigger_channel": "Xtactor", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "xtactor.command"}, "trigger_details": [{"section": "Trigger fields", "title": "Shortname\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Shortname", "Helper text": "Only triggers with matching shortname will fire. Only capital letters and numbers allowed.", "Slug": "shortname", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Xtactor.command.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var command = Xtactor.command.Text;\nif (command === \"I T\") {\n  Hue.toggleAllHue();\n}", "intent": "When the Xtactor wristband receives the command \"I T\" where T is editable, toggle on or off all Philips Hue lights."}
{"original_description": "If Weather Underground reports strong wind (e.g. >20mph), do not water my yard for today.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 20 && Weather.windSpeedRisesAbove.WindDirection === \"North\" && Weather.windSpeedRisesAbove.Location === \"New York\") {\n  Netro.water.skip(\"Wind speed is too high, skipping watering for today.\");\n}", "intent": "If the wind speed in mph is greater than 20 at my location, which is set to New York, with a wind direction of North, then skip watering all zones on my Netro device today."}
{"original_description": "Turns the Wi-Fi off during night time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "D-Link Wi-Fi Router", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dlink_wifi_router.turnOffWifi", "Filter code method": "DlinkWifiRouter.turnOffWifi.skip(string?: reason)", "Runtime method": "runAction(\"dlink_wifi_router.turnOffWifi\", {})"}, "action_details": [{"section": "Action fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (hour === 22 && minute === 0) {\n  DlinkWifiRouter.turnOffWifi.setMydlinkNo(1);\n} else {\n  DlinkWifiRouter.turnOffWifi.skip(\"Not 10:00 PM.\");\n}", "intent": "Turn off the Wi-Fi on my D-Link Wi-Fi Router, specifically device number 1, every day at 10:00 PM."}
{"original_description": "Open garage door with the press on Thinga button.", "trigger_channel": "Thinga", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "thinga.thinga_is_clicked"}, "trigger_details": [{"section": "Trigger fields", "title": "Fetchit device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Helper text": "Your unique Thinga Device ID", "Slug": "fetchit_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Button\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Number", "Helper text": "Button Number", "Slug": "button_id", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Thinga click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Click Type", "Helper text": "Thing Click Type", "Slug": "thinga_click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nButton ID on Thinga", "description": "Button ID on Thinga", "details": {"Slug": "button_id", "Filter code": "Thinga.thingaIsClicked.ButtonID", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Date time\nTime at which Thinga was clicked.", "description": "Time at which Thinga was clicked.", "details": {"Slug": "date_time", "Filter code": "Thinga.thingaIsClicked.DateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Thinga click type\nThinga Click Type", "description": "Thinga Click Type", "details": {"Slug": "thinga_click_type", "Filter code": "Thinga.thingaIsClicked.ThingaClickType", "Type": "String", "Example": "click"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Thinga.thingaIsClicked.ButtonID === \"1\" && Thinga.thingaIsClicked.ThingaClickType === \"click\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Button ID or click type does not match the specified conditions.\");\n}", "intent": "When the button with ID \"1\" on Thinga is clicked with a click type of \"click\", open the garage door identified as \"Main Garage Door\" using Garadget."}
{"original_description": "Keep track of all the forms you've created. Logs include helpful links for quick access to form information.", "trigger_channel": "Typeform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "typeform.new_form"}, "trigger_details": [{"section": "Ingredients", "title": "Form\nThe ID of the form.", "description": "The ID of the form.", "details": {"Slug": "form_id", "Filter code": "Typeform.newForm.FormId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Form title\nThe title of the form", "description": "The title of the form", "details": {"Slug": "form_title", "Filter code": "Typeform.newForm.FormTitle", "Type": "String", "Example": "My awesome form!"}}, {"section": "Ingredients", "title": "Form url\nURL to access the form", "description": "URL to access the form", "details": {"Slug": "form_url", "Filter code": "Typeform.newForm.FormUrl", "Type": "Web URL", "Example": "https://subdomain.typeform.com/to/abc123"}}, {"section": "Ingredients", "title": "Form is public\nDraft forms return \"false\" and Public forms return \"true\".", "description": "Draft forms return \"false\" and Public forms return \"true\".", "details": {"Slug": "form_is_public", "Filter code": "Typeform.newForm.FormIsPublic", "Type": "String", "Example": "\"false\""}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Typeform.newForm.FormTitle === \"My New Form\" && Typeform.newForm.FormId === \"456\") {\n  var formStatus = Typeform.newForm.FormIsPublic === \"true\" ? \"Public\" : \"Draft\";\n  var formattedRow = `${Typeform.newForm.FormTitle}|||${Typeform.newForm.FormUrl}|||${formStatus}`;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Typeform Logs\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Documents/IFTTT/Typeform\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Form title or ID does not match.\");\n}", "intent": "When a new form is created in Typeform with the title \"My New Form\" and the form ID \"456\", append a row to the Google Sheets spreadsheet named \"Typeform Logs\" in the folder path \"Documents/IFTTT/Typeform\", including the form title, form URL \"https://subdomain.typeform.com/to/def456\", and form status as \"Public\" if the form is public or \"Draft\" if it's not, using the formatted row \"Form Title|||Form URL|||Form Status\" to log the creation of this new form for easy access."}
{"original_description": "Record a voice message on our hotline and send both audio and transcription to a telegram chat.", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_recording"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerRecording.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerRecording.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerRecording.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerRecording.TriggerCode", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Recording transcript\nThis is the transcript of your recorded audio message.", "description": "This is the transcript of your recorded audio message.", "details": {"Slug": "recording_transcript", "Filter code": "Woopla.triggerRecording.RecordingTranscript", "Type": "String", "Example": "Hello, this is a transcription of my recorded audio message on the phone."}}, {"section": "Ingredients", "title": "Recording confidence\nA confidence estimate between 0.0 and 1.0. A higher number means the system is more confident that the recognition is correct.", "description": "A confidence estimate between 0.0 and 1.0. A higher number means the system is more confident that the recognition is correct.", "details": {"Slug": "recording_confidence", "Filter code": "Woopla.triggerRecording.RecordingConfidence", "Type": "String", "Example": "0.8439585"}}, {"section": "Ingredients", "title": "Recording url\nDirect URL to an MP3 audio file which holds the recorded audio.", "description": "Direct URL to an MP3 audio file which holds the recorded audio.", "details": {"Slug": "recording_url", "Filter code": "Woopla.triggerRecording.RecordingUrl", "Type": "File URL", "Example": "https://example.com/path/to/file.mp3"}}, {"section": "Ingredients", "title": "Recording language\nThe language of your recording in BCP-47. Language can be configured in your account settings at https://woop.la/ifttt/", "description": "The language of your recording in BCP-47. Language can be configured in your account settings at https://woop.la/ifttt/", "details": {"Slug": "recording_language", "Filter code": "Woopla.triggerRecording.RecordingLanguage", "Type": "String", "Example": "en-US"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_mp3", "Filter code method": "Telegram.sendMp3.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_mp3\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Audio url\nText input > Audio", "description": "Text input > Audio", "details": {"Label": "Audio URL", "Helper text": "Mime type must be audio/mpeg.", "Slug": "audio_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setAudio Url(string: audio_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setCaption(string: caption)"}}, {"section": "Action fields", "title": "Performer\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Performer", "Helper text": "Optional", "Slug": "performer", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setPerformer(string: performer)"}}, {"section": "Action fields", "title": "Title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMp3.setTitle(string: title)"}}], "filter_code": "if (Woopla.triggerRecording.TriggerCode === \"123\" \n    && Woopla.triggerRecording.CalledNumber === \"+16282222790\" \n    && Woopla.triggerRecording.RecordingConfidence > 0.8 \n    && Woopla.triggerRecording.RecordingLanguage === \"en-US\") {\n  var caption = \"New voice message from \" + Woopla.triggerRecording.PhoneNumber;\n  Telegram.sendMp3.setAudioUrl(Woopla.triggerRecording.RecordingUrl);\n  Telegram.sendMp3.setCaption(caption);\n  Telegram.sendMp3.setPerformer(\"Hotline Bot\");\n  Telegram.sendMp3.setTitle(\"Voice Message\");\n  Telegram.sendMp3.chatId = \"#office_notifications\";\n} else {\n  Telegram.sendMp3.skip(\"Conditions not met.\");\n}", "intent": "When a 3-digit trigger code is entered as \"123\" during a call to our hotline at \"+16282222790\" from any phone number, record the audio message and send both the MP3 audio file from the URL provided by Woopla and its transcription to the Telegram chat \"#office_notifications\" with a caption \"New voice message from +49203987654321\" and performer \"Hotline Bot\", but only if the recording confidence is above 0.8 and the recording language is set to \"en-US\"."}
{"original_description": "Whenever one of your favorite Feeds has a new item, send a message to a Telegram chat.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var messageText = `<b>New Post:</b> <a href='${Feed.newFeedItem.EntryUrl}'>${Feed.newFeedItem.EntryTitle}</a> by ${Feed.newFeedItem.EntryAuthor}`;\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Feed does not match or is not from the specified URL.\");\n}", "intent": "When a new item is posted to the \"ifttt Blog\" feed, located at http://blog.ifttt.com/, send a message to the \"@IFTTT_News\" chat on Telegram with the text \"<b>New Post:</b> <a href='{{EntryUrl}}'>{{EntryTitle}}</a> by {{EntryAuthor}}\" and include a web page preview."}
{"original_description": "Let your chat buddies know about your latest musical discoveries. When you save a track to \"Your Music\" the details, including album art, will be shared to the chat you specify.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_saved_track"}, "trigger_details": [{"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newSavedTrack.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newSavedTrack.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newSavedTrack.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newSavedTrack.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newSavedTrack.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Saved at\nThe time at which the track was saved.", "description": "The time at which the track was saved.", "details": {"Slug": "saved_at", "Filter code": "Spotify.newSavedTrack.SavedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newSavedTrack.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newSavedTrack.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "Telegram.sendMessage.setText(\"Just discovered a new song: <b>\" + Spotify.newSavedTrack.TrackName + \"</b> by <i>\" + Spotify.newSavedTrack.ArtistName + \"</i>! Check it out: \" + Spotify.newSavedTrack.TrackURL);\nTelegram.sendMessage.setIncludeWebPagePreview(\"Yes\");", "intent": "When I save a new track to \"Your Music\" on Spotify, such as \"Happy\" by Pharrell Williams from the album \"G I R L\", send a message to my Telegram chat \"#MusicLovers\" with the text \"Just discovered a new song: <b>Happy</b> by <i>Pharrell Williams</i>! Check it out: https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO\" and include a web page preview of the track."}
{"original_description": "When you publish something new, the content will be posted in the chat of your choice. Cool Telegram sticker not included 😎", "trigger_channel": "WordPress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wordpress.any_new_post_wp"}, "trigger_details": [{"section": "Ingredients", "title": "Post title\nThe post's title.", "description": "The post's title.", "details": {"Slug": "PostTitle", "Filter code": "Wordpress.anyNewPostWp.PostTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Post url\nThe post's URL.", "description": "The post's URL.", "details": {"Slug": "PostUrl", "Filter code": "Wordpress.anyNewPostWp.PostUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Post content\nThe post's content, may contain HTML.", "description": "The post's content, may contain HTML.", "details": {"Slug": "PostContent", "Filter code": "Wordpress.anyNewPostWp.PostContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Post image url\nURL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "details": {"Slug": "PostImageUrl", "Filter code": "Wordpress.anyNewPostWp.PostImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Tags and categories\nThe post's tags and categories, comma seperated.", "description": "The post's tags and categories, comma seperated.", "details": {"Slug": "TagsAndCategories", "Filter code": "Wordpress.anyNewPostWp.TagsAndCategories", "Type": "String", "Example": "neato, really cool"}}, {"section": "Ingredients", "title": "Post published\nDate post was created", "description": "Date post was created", "details": {"Slug": "PostPublished", "Filter code": "Wordpress.anyNewPostWp.PostPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Wordpress.anyNewPostWp.PostTitle === \"New Update\" && Wordpress.anyNewPostWp.PostContent.includes(\"urgent\")) {\n  Telegram.sendMessage.setText(`<b>New Post:</b> ${Wordpress.anyNewPostWp.PostTitle} - ${Wordpress.anyNewPostWp.PostContent}`);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip(`Post titled \"${Wordpress.anyNewPostWp.PostTitle}\" does not match the criteria.`);\n}", "intent": "When a new post is published on WordPress with the title \"New Update\" and containing the keyword \"urgent\", send a message to the Telegram chat \"#office-notifications\" with the text \"<b>New Post:</b> {{PostTitle}} - {{PostContent}}\" and include a web page preview of the post URL."}
{"original_description": "Spread your photo-sharing tentacles to new regions at no added cost. This will automatically send new photos you post on Instagram to a Telegram group or channel. ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_photo", "Filter code method": "Telegram.sendPhoto.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setCaption(string: caption)"}}], "filter_code": "Telegram.sendPhoto.setChatId(\"@Friends\");\nTelegram.sendPhoto.setPhotoUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nvar caption = Instagram.anyNewPhotoByYou.Caption + \" \" + Instagram.anyNewPhotoByYou.Url;\nTelegram.sendPhoto.setCaption(caption);", "intent": "Automatically send new photos you post on Instagram to the Telegram group \"@Friends\" with a caption including the original photo's caption and the short URL to the photo's Instagram page, using the image file URL as the photo source."}
{"original_description": "Pick the Notebook, and any new note will be sent into the Telegram chat of your choice. Presto! 👍", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Evernote.newNoteInNotebook.notebook === \"Personal\") {\n  var text = Evernote.newNoteInNotebook.Title;\n  Telegram.sendMessage.setText(text);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.chatId = \"#family\";\n}", "intent": "When a new note is created in the \"Personal\" notebook on Evernote, send a message to the \"#family\" chat on Telegram with the note title, including a web page preview if the note contains a URL."}
{"original_description": "Google カレンダーに予定が追加された場合、グループチャットに通知します。", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.new_event_added"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.newEventAdded.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.newEventAdded.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.newEventAdded.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.newEventAdded.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.newEventAdded.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.newEventAdded.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.newEventAdded.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time the event was created.", "description": "Date and time the event was created.", "details": {"Slug": "CreatedAt", "Filter code": "GoogleCalendar.newEventAdded.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.newEventAdded.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (GoogleCalendar.newEventAdded.Title === \"Team Meeting\" && \n    GoogleCalendar.newEventAdded.Starts.hour() >= 9 && \n    GoogleCalendar.newEventAdded.Starts.hour() <= 17) {\n  var message = \"New team meeting scheduled at \" + GoogleCalendar.newEventAdded.Where + \". Join via \" + GoogleCalendar.newEventAdded.VideoCallUrl;\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Condition not met\");\n}", "intent": "When a new event titled \"Team Meeting\" is added to my Google Calendar, starting between 09:00 and 17:00, send a notification message \"New team meeting scheduled at Building A, Room 101. Join via https://meet.google.com\" to the #general room in Chatwork."}
{"original_description": "毎週、指定した曜日の時刻に、グループチャットにリマインドを通知します。", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Friday\" || DateAndTime.everyWeekdayAt.CheckTime.hour() !== 19) {\n  Chatwork.postMessages.skip(\"Not Friday at 7 PM.\");\n} else {\n  Chatwork.postMessages.setMessage(\"今夜の予定は？\");\n  Chatwork.postMessages.setRoom(\"#general\");\n}", "intent": "毎週金曜日の19:00に、グループチャットルーム「#general」に「今夜の予定は？」というリマインドメッセージを通知します。"}
{"original_description": "Google カレンダーに登録されている予定が開始される◯◯分前に、グループチャットにリマインドを通知します。", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Team Meeting\" && GoogleCalendar.anyEventStarts.offset === 15) {\n  var message = \"Reminder: Team Meeting is about to start at \" + GoogleCalendar.anyEventStarts.Where;\n  Chatwork.postMessages.setMessage(message);\n  Chatwork.postMessages.setRoom(\"#general\");\n} else {\n  Chatwork.postMessages.skip(\"Event title or offset does not match.\");\n}", "intent": "When an event titled \"Team Meeting\" starts in 15 minutes on my Google Calendar, send a reminder message to the #general room in Chatwork with the text \"Reminder: Team Meeting is about to start at Building A, Room 101\"."}
{"original_description": "Google スプレッドシートに新しい行が追加された場合、追加された行の情報（A列〜J列までの値）をグループチャットに通知します。", "trigger_channel": "Google Sheets", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_sheets.new_row_in_spreadsheet"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Enter the folder path...", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Recipes/Vegetables&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Filename\nText input > Other", "description": "Text input > Other", "details": {"Label": "and enter the filename", "Helper text": "E.g. Vegetable Recipes", "Slug": "filename", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Spreadsheet url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Or copy and paste the spreadsheet URL", "Helper text": "Must be a valid spreadsheet URL", "Slug": "spreadsheet_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the spreadsheet.", "description": "The name of the spreadsheet.", "details": {"Slug": "spreadsheet_name", "Filter code": "GoogleSheets.newRowInSpreadsheet.Filename", "Type": "String", "Example": "2018 Trip ideas"}}, {"section": "Ingredients", "title": "Path\nPath of the new spreadsheet.", "description": "Path of the new spreadsheet.", "details": {"Slug": "path", "Filter code": "GoogleSheets.newRowInSpreadsheet.Path", "Type": "String", "Example": "IFTTT/Faves"}}, {"section": "Ingredients", "title": "Spreadsheet url\nThe URL to the spreadsheet on Google Sheets.", "description": "The URL to the spreadsheet on Google Sheets.", "details": {"Slug": "spreadsheet_url", "Filter code": "GoogleSheets.newRowInSpreadsheet.SpreadsheetUrl", "Type": "Web URL", "Example": "https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0"}}, {"section": "Ingredients", "title": "Created at\nDate and time row was added.", "description": "Date and time row was added.", "details": {"Slug": "created_at", "Filter code": "GoogleSheets.newRowInSpreadsheet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Row index\nThe numerical value of the new row.", "description": "The numerical value of the new row.", "details": {"Slug": "row_index", "Filter code": "GoogleSheets.newRowInSpreadsheet.RowIndex", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Column a\nValue in column A", "description": "Value in column A", "details": {"Slug": "column_a", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnA", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Column b\nValue in column B", "description": "Value in column B", "details": {"Slug": "column_b", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnB", "Type": "String", "Example": "$99"}}, {"section": "Ingredients", "title": "Column c\nValue in column C", "description": "Value in column C", "details": {"Slug": "column_c", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnC", "Type": "String", "Example": "Towel"}}, {"section": "Ingredients", "title": "Column d\nValue in column D", "description": "Value in column D", "details": {"Slug": "column_d", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnD", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Column e\nValue in column E", "description": "Value in column E", "details": {"Slug": "column_e", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnE", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column f\nValue in column F", "description": "Value in column F", "details": {"Slug": "column_f", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnF", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column g\nValue in column G", "description": "Value in column G", "details": {"Slug": "column_g", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnG", "Type": "String", "Example": "Delivery Date"}}, {"section": "Ingredients", "title": "Column h\nValue in column H", "description": "Value in column H", "details": {"Slug": "column_h", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnH", "Type": "String", "Example": "November 7th, 2017"}}, {"section": "Ingredients", "title": "Column i\nValue in column I", "description": "Value in column I", "details": {"Slug": "column_i", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnI", "Type": "String", "Example": "Delivery Address"}}, {"section": "Ingredients", "title": "Column j\nValue in column J", "description": "Value in column J", "details": {"Slug": "column_j", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnJ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column k\nValue in column K", "description": "Value in column K", "details": {"Slug": "column_k", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnK", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column l\nValue in column L", "description": "Value in column L", "details": {"Slug": "column_l", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnL", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column m\nValue in column M", "description": "Value in column M", "details": {"Slug": "column_m", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnM", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column n\nValue in column N", "description": "Value in column N", "details": {"Slug": "column_n", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnN", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column o\nValue in column O", "description": "Value in column O", "details": {"Slug": "column_o", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnO", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column p\nValue in column P", "description": "Value in column P", "details": {"Slug": "column_p", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnP", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column q\nValue in column Q", "description": "Value in column Q", "details": {"Slug": "column_q", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnQ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column r\nValue in column R", "description": "Value in column R", "details": {"Slug": "column_r", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnR", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column s\nValue in column S", "description": "Value in column S", "details": {"Slug": "column_s", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnS", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column t\nValue in column T", "description": "Value in column T", "details": {"Slug": "column_t", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnT", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column u\nValue in column U", "description": "Value in column U", "details": {"Slug": "column_u", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnU", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column v\nValue in column V", "description": "Value in column V", "details": {"Slug": "column_v", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnV", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column w\nValue in column W", "description": "Value in column W", "details": {"Slug": "column_w", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnW", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column x\nValue in column X", "description": "Value in column X", "details": {"Slug": "column_x", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnX", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column y\nValue in column Y", "description": "Value in column Y", "details": {"Slug": "column_y", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnY", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column z\nValue in column Z", "description": "Value in column Z", "details": {"Slug": "column_z", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnZ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "var message = \"New row added to spreadsheet: \\n\" +\n               \"Column A: \" + GoogleSheets.newRowInSpreadsheet.ColumnA + \"\\n\" +\n               \"Column B: \" + GoogleSheets.newRowInSpreadsheet.ColumnB + \"\\n\" +\n               \"Column C: \" + GoogleSheets.newRowInSpreadsheet.ColumnC + \"\\n\" +\n               \"Column D: \" + GoogleSheets.newRowInSpreadsheet.ColumnD + \"\\n\" +\n               \"Column E: \" + GoogleSheets.newRowInSpreadsheet.ColumnE + \"\\n\" +\n               \"Column F: \" + GoogleSheets.newRowInSpreadsheet.ColumnF + \"\\n\" +\n               \"Column G: \" + GoogleSheets.newRowInSpreadsheet.ColumnG + \"\\n\" +\n               \"Column H: \" + GoogleSheets.newRowInSpreadsheet.ColumnH + \"\\n\" +\n               \"Column I: \" + GoogleSheets.newRowInSpreadsheet.ColumnI + \"\\n\" +\n               \"Column J: \" + GoogleSheets.newRowInSpreadsheet.ColumnJ;\nChatwork.postMessages.setRoom(\"General\");\nChatwork.postMessages.setMessage(message);", "intent": "When a new row is added to the Google Sheets spreadsheet located at https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0, send a message to the Chatwork room \"General\" with the information from columns A to J of the newly added row, including the values in columns A (e.g., 1234), B (e.g., $99), C (e.g., Towel), D (e.g., Blue), E (e.g., FREE SHIPPING), F (e.g., FREE SHIPPING), G (e.g., Delivery Date), H (e.g., November 7th, 2017), I (e.g., Delivery Address), and J (e.g., 923 Market St. San Francisco, CA 94117)."}
{"original_description": "毎月、指定した日時に、グループチャットにリマインドを通知します。", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_month_on_the"}, "trigger_details": [{"section": "Trigger fields", "title": "Month day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of the month", "Slug": "month_day", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyMonthOnThe.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (DateAndTime.everyMonthOnThe.month_day === \"15\" && DateAndTime.everyMonthOnThe.time === \"19:00\") {\n  Chatwork.postMessages.setMessage(\"今月のタスクを確認してください\");\n  Chatwork.postMessages.setRoom(\"#general\");\n} else {\n  Chatwork.postMessages.skip(\"Not the scheduled time for reminder.\");\n}", "intent": "毎月15日、19:00に、「#general」グループチャットに「今月のタスクを確認してください」というリマインドメッセージを通知します。"}
{"original_description": "毎日指定した時刻に、今日の天気・最高気温・最低気温を、グループチャットに通知します。", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Meta.currentUserTime.hour() === 7) {\n  var message = \"東京の今日の天気: \" + Weather.currentWeatherAtTime.TodaysCondition + \"\\n\"\n                + \"最高気温: \" + Weather.currentWeatherAtTime.HighTempCelsius + \"度\\n\"\n                + \"最低気温: \" + Weather.currentWeatherAtTime.LowTempCelsius + \"度\";\n  Chatwork.postMessages.setMessage(message);\n  Chatwork.postMessages.setRoom(\"#weather_updates\");\n} else {\n  Chatwork.postMessages.skip(\"Not 7:00 AM\");\n}", "intent": "毎日7:00に、東京の今日の天気、最高気温、最低気温を「#weather_updates」チャットルームに通知します。"}
{"original_description": "Trelloの指定したボードに新しいカードが追加された場合、グループチャットに通知します。", "trigger_channel": "Trello", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "trello.card_added_to_board"}, "trigger_details": [{"section": "Trigger fields", "title": "Board\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe title of the card.", "description": "The title of the card.", "details": {"Slug": "title", "Filter code": "Trello.cardAddedToBoard.Title", "Type": "String", "Example": "Book flights"}}, {"section": "Ingredients", "title": "Description\nThe description of the card.", "description": "The description of the card.", "details": {"Slug": "description", "Filter code": "Trello.cardAddedToBoard.Description", "Type": "String", "Example": "Check various airline websites to find the best deal."}}, {"section": "Ingredients", "title": "Creator full name\nThe full name of the member who added the card.", "description": "The full name of the member who added the card.", "details": {"Slug": "creator_name", "Filter code": "Trello.cardAddedToBoard.CreatorFullName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Creator username\nThe username of the member who added the card.", "description": "The username of the member who added the card.", "details": {"Slug": "creator_username", "Filter code": "Trello.cardAddedToBoard.CreatorUsername", "Type": "String", "Example": "sfjetsetter"}}, {"section": "Ingredients", "title": "List name\nThe name of the list the card was added to.", "description": "The name of the list the card was added to.", "details": {"Slug": "list_name", "Filter code": "Trello.cardAddedToBoard.ListName", "Type": "String", "Example": "To dos"}}, {"section": "Ingredients", "title": "Board name\nThe name of the board the card was added to.", "description": "The name of the board the card was added to.", "details": {"Slug": "board_name", "Filter code": "Trello.cardAddedToBoard.BoardName", "Type": "String", "Example": "New Zealand Trip"}}, {"section": "Ingredients", "title": "Card url\nThe URL to the card.", "description": "The URL to the card.", "details": {"Slug": "url", "Filter code": "Trello.cardAddedToBoard.CardURL", "Type": "Web URL", "Example": "https://trello.com/c/example"}}, {"section": "Ingredients", "title": "Added at\nDate and time the card was added to the board.", "description": "Date and time the card was added to the board.", "details": {"Slug": "added_at", "Filter code": "Trello.cardAddedToBoard.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Trello.cardAddedToBoard.Title === \"Book Hotel\" && Trello.cardAddedToBoard.BoardName === \"New Zealand Trip\" && Trello.cardAddedToBoard.CreatorFullName === \"John Smith\") {\n  Chatwork.postMessages.setMessage(`John Smith added a new card 'Book Hotel' to the New Zealand Trip board: ${Trello.cardAddedToBoard.CardURL}`);\n} else {\n  Chatwork.postMessages.skip(\"Card title, board name, or creator does not match.\");\n}", "intent": "When a new card titled \"Book Hotel\" is added to the Trello board named \"New Zealand Trip\" by John Smith, send a notification to the Chatwork room \"#team-discussion\" with the message \"John Smith added a new card 'Book Hotel' to the New Zealand Trip board: https://trello.com/c/example\"."}
{"original_description": "ChatWork 公式ブログの更新情報をグループチャットに通知します。", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.FeedUrl === \"http://blog.chatwork.com/\" && Feed.newFeedItem.EntryTitle === \"New Blog Post\") {\n  var message = `New blog post: ${Feed.newFeedItem.EntryTitle} by ${Feed.newFeedItem.EntryAuthor}. Read more at ${Feed.newFeedItem.EntryUrl}`;\n  if (Feed.newFeedItem.EntryImageUrl) {\n    message += ` Image: ${Feed.newFeedItem.EntryImageUrl}`;\n  }\n  Chatwork.postMessages.setRoom(\"#general\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Entry does not match the specified title or feed URL.\");\n}", "intent": "When a new entry titled \"New Blog Post\" is published on the ChatWork公式ブログ RSS feed at http://blog.chatwork.com/, send a message to the #general room in Chatwork with the entry title, author, and URL, including an image if available."}
{"original_description": "This Applet sends the BrainyQuote quote of the day to the Telegram chat of your choosing.", "trigger_channel": "BrainyQuote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "brainyquote.today_s_quote"}, "trigger_details": [{"section": "Ingredients", "title": "Source\nThe source of the quote.", "description": "The source of the quote.", "details": {"Slug": "EntryTitle", "Filter code": "Brainyquote.todaySQuote.Source", "Type": "String", "Example": "Voltaire"}}, {"section": "Ingredients", "title": "Quote url\nThe BrainyQuote URL.", "description": "The BrainyQuote URL.", "details": {"Slug": "EntryUrl", "Filter code": "Brainyquote.todaySQuote.QuoteUrl", "Type": "String", "Example": "https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html"}}, {"section": "Ingredients", "title": "Quote\nThe quote, may contain HTML.", "description": "The quote, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Brainyquote.todaySQuote.Quote", "Type": "String", "Example": "\"Je pense, donc je suis\""}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Brainyquote.todaySQuote.Source === \"Voltaire\" && Brainyquote.todaySQuote.Quote === \"\\\"Je pense, donc je suis\\\"\") {\n  Telegram.sendMessage.setText(Brainyquote.todaySQuote.Quote + \" - \" + Brainyquote.todaySQuote.Source);\n  Telegram.sendMessage.setChatId(\"Motivational Quotes\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"yes\");\n} else {\n  Telegram.sendMessage.skip(\"The quote is not from Voltaire or does not match the expected text.\");\n}", "intent": "Send the daily BrainyQuote quote from Voltaire to the Telegram chat named \"Motivational Quotes\" with a web page preview included, using the quote \"Je pense, donc je suis\" as the message text."}
{"original_description": "指定したRSSフィールドの更新情報をグループチャットに通知します。", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var message = \"New blog post by \" + Feed.newFeedItem.EntryAuthor + \": \" + Feed.newFeedItem.EntryTitle + \" - \" + Feed.newFeedItem.EntryUrl;\n  Chatwork.postMessages.setRoom(\"General\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Feed title or URL does not match.\");\n}", "intent": "When a new item is published in the \"ifttt Blog\" RSS feed, located at http://blog.ifttt.com/, send a message to the \"General\" room in Chatwork with the entry title, author, and URL. The message should include the text: \"New blog post by {EntryAuthor}: {EntryTitle} - {EntryUrl}\"."}
{"original_description": "毎日指定した時刻に、明日の天気・最高気温・最低気温を、グループチャットに通知します。", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Meta.currentUserTime.hour() === 7 && Weather.tomorrowsWeatherAtTime.TomorrowsCondition !== \"\" && Weather.tomorrowsWeatherAtTime.HighTempCelsius === \"18\" && Weather.tomorrowsWeatherAtTime.LowTempCelsius === \"10\") {\n  Chatwork.postMessages.setMessage(\"東京の明日の天気は、\" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \"です。最高気温は\" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"度、最低気温は\" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"度です。\");\n  Chatwork.postMessages.setRoom(\"#weather-alerts\");\n} else {\n  Chatwork.postMessages.skip(\"Conditions not met.\");\n}", "intent": "毎日07:00に、東京の明日の天気、最高気温18度、最低気温10度を、#weather-alertsグループチャットに通知します。"}
{"original_description": "Dropboxの指定されたフォルダに新しいファイルが追加された場合、グループチャットに通知します。", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_text_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newTextFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/cool_story.txt"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newTextFileInFolder.Filename", "Type": "String", "Example": "cool_story.txt"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newTextFileInFolder.FilenameNoExt", "Type": "String", "Example": "cool_story"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newTextFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (Dropbox.newTextFileInFolder.Filename === \"example_file.txt\" && Dropbox.newTextFileInFolder.path === \"/Important_Documents\") {\n    var message = \"New file uploaded: \" + Dropbox.newTextFileInFolder.Filename + \", File URL: \" + Dropbox.newTextFileInFolder.FileUrl + \", Modified Date: \" + Dropbox.newTextFileInFolder.ModifiedDate;\n    Chatwork.postMessages.setMessage(message);\n    Chatwork.postMessages.setRoom(\"#general\");\n  } else {\n    Chatwork.postMessages.skip(\"File does not match the specified name or subfolder.\");\n  }\n} else {\n  Chatwork.postMessages.skip(\"Outside of notification hours (08:00 to 18:00).\");\n}", "intent": "When a new file named \"example_file.txt\" is added to the \"/Important_Documents\" subfolder in Dropbox after 08:00 and before 18:00, send a notification to the \"#general\" room in Chatwork with the message \"New file uploaded: example_file.txt, File URL: https://www.dropbox.com/s/qp3cqdjqachyr2x/example_file.txt, Modified Date: 2023-03-09T10:00:00+09:00\"."}
{"original_description": "Google ドライブの指定されたフォルダに新しいファイルが追加された場合、グループチャットに通知します。また、キーワードを指定することで、ファイル名にキーワードが含まれる場合だけ通知することも可能です。", "trigger_channel": "Google Drive", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_drive.new_file_from_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Drive folder path", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Documents/Photos/Receipts&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search query", "Helper text": "Searches for filenames that match your query.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "filename", "Filter code": "GoogleDrive.newFileFromSearch.Filename", "Type": "String", "Example": "filename"}}, {"section": "Ingredients", "title": "Path\nThe path of the file.", "description": "The path of the file.", "details": {"Slug": "path", "Filter code": "GoogleDrive.newFileFromSearch.Path", "Type": "String", "Example": "/IFTTT/sample.txt"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "file_url", "Filter code": "GoogleDrive.newFileFromSearch.FileUrl", "Type": "File URL", "Example": "https://google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time file was created.", "description": "Date and time file was created.", "details": {"Slug": "created_at", "Filter code": "GoogleDrive.newFileFromSearch.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (GoogleDrive.newFileFromSearch.Path === \"/Documents/Shared/Team Files\" && GoogleDrive.newFileFromSearch.Filename === \"example_document\" && GoogleDrive.newFileFromSearch.Filename.includes(\"report\")) {\n  Chatwork.postMessages.setMessage(\"New report uploaded: \" + GoogleDrive.newFileFromSearch.Filename);\n} else {\n  Chatwork.postMessages.skip(\"Filename does not match the criteria.\");\n}", "intent": "When a new file named \"example_document\" is added to the Google Drive folder path \"/Documents/Shared/Team Files\" and the filename contains the keyword \"report\", post a message in the Chatwork room \"#general\" with the text \"New report uploaded: example_document\"."}
{"original_description": "毎週、指定した曜日の時刻に、グループチャットにタスクを設定します。", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_tasks", "Filter code method": "Chatwork.postTasks.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_tasks\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select group chat", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Contents\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "contents", "Helper text": "Describe the task", "Slug": "contents", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Limit\nText input > Other", "description": "Text input > Other", "details": {"Label": "days until due date", "Helper text": "Set the due date in days", "Slug": "limit", "Required": "false", "Can have default value": "true", "Filter code method": "Chatwork.postTasks.setLimit(string: limit)"}}, {"section": "Action fields", "title": "To ids\nText input > Other", "description": "Text input > Other", "details": {"Label": "assign to", "Helper text": "Set Chatwork account IDs separated by commas. Enter all to assign everyone", "Slug": "to_ids", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" && DateAndTime.everyWeekdayAt.CheckTime.getHours() === 18) {\n  Chatwork.postTasks.setRoom(\"#general\");\n  Chatwork.postTasks.setContents(\"プロジェクトレポートの提出\");\n  Chatwork.postTasks.setLimit(\"3\");\n  Chatwork.postTasks.setToIds(\"all\");\n} else {\n  Chatwork.postTasks.skip(\"Not Thursday at 18:00.\");\n}", "intent": "毎週木曜日、18:00に、「#general」というグループチャットルームで、タスク「プロジェクトレポートの提出」を設定し、3日後の期限を設け、すべてのチームメンバーに割り当てます。"}
{"original_description": "Post a monthly reminder to Chatwork.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_month_on_the"}, "trigger_details": [{"section": "Trigger fields", "title": "Month day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of the month", "Slug": "month_day", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyMonthOnThe.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (DateAndTime.everyMonthOnThe.month_day === \"15\" && DateAndTime.everyMonthOnThe.time === \"10:00 AM\") {\n  Chatwork.postMessages.setMessage(\"Monthly team meeting at 2 PM\");\n  Chatwork.postMessages.setRoom(\"General\");\n} else {\n  Chatwork.postMessages.skip(\"Not the scheduled time for the monthly reminder.\");\n}", "intent": "Post a reminder message \"Monthly team meeting at 2 PM\" to the Chatwork room \"General\" every month on the 15th at 10:00 AM."}
{"original_description": "This Applet will post a message to the group chat you choose in Chatwork.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  var triggeredAt = Mesh.events.TriggeredAt;\n  var message = \"Movement alert: Motion detected in the area at \" + triggeredAt.substring(11, 19) + \" on \" + triggeredAt.substring(0, 10);\n  Chatwork.postMessages.setRoom(\"#general\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Motion not detected.\");\n}", "intent": "When a new motion is detected by the MESH app, as indicated by the event text \"Motion Tag: Detected!\" and triggered at any time, post a message to the \"#general\" room in Chatwork saying \"Movement alert: Motion detected in the area at 04:17:06+05:00\"."}
{"original_description": "All you have to do is paste in a specific RSS Feed in the field below and select the group chat you want to keep up-to-date with the latest news.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.FeedUrl === \"https://www.example.com/news\" && Feed.newFeedItem.EntryTitle.includes(\"Breaking News\")) {\n  Chatwork.postMessages.setMessage(`New news alert: ${Feed.newFeedItem.EntryTitle} - ${Feed.newFeedItem.EntryContent}`);\n  Chatwork.postMessages.setRoom(\"News Updates\");\n} else {\n  Chatwork.postMessages.skip(\"Entry does not match the filter criteria.\");\n}", "intent": "When a new item is published in the RSS feed with the URL https://www.example.com/news, and the entry title contains the keyword \"Breaking News\", post a message to the Chatwork room named \"News Updates\" with the message \"New news alert: {EntryTitle} - {EntryContent}\", including the entry's title and content."}
{"original_description": "Google カレンダーで、キーワードを含む予定が開始される◯◯分前に、グループチャットにリマインドを通知します。", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.offset === \"15\" && GoogleCalendar.eventFromSearchStarts.Title.includes(\"Meeting\")) {\n  var message = \"Upcoming meeting: \" + GoogleCalendar.eventFromSearchStarts.Title + \" at \" + GoogleCalendar.eventFromSearchStarts.Where;\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Event does not match the condition.\");\n}", "intent": "When a Google Calendar event containing the keyword \"Meeting\" starts in 15 minutes, send a reminder notification to the \"#general\" room in Chatwork with the message \"Upcoming meeting: {{Title}} at {{Where}}\"."}
{"original_description": "毎日、指定した時刻に、グループチャットにリマインドを通知します。", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour == 19 && minute == 0) {\n  Chatwork.postMessages.setMessage(\"本日のタスクを確認してください\");\n  Chatwork.postMessages.setRoom(\"general\");\n} else {\n  Chatwork.postMessages.skip(\"Not 7:00 PM\");\n}", "intent": "毎日19時00分に、グループチャットルーム「general」に「本日のタスクを確認してください」というリマインドメッセージを通知します。"}
{"original_description": "When you get a notification from a specific app, the notification will be forwarded to a Telegram chat.", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.new_notification_from_app"}, "trigger_details": [{"section": "Trigger fields", "title": "App name\nText input", "description": "Text input", "details": {"Label": "App name", "Helper text": "e.g. Twitter", "Slug": "app_name", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by notification keyword", "Helper text": "e.g. mentioned", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Received at\nThe time the notification was received.", "description": "The time the notification was received.", "details": {"Slug": "ReceivedAt", "Filter code": "AndroidDevice.newNotificationFromApp.ReceivedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "App name\nThe application name of the notification", "description": "The application name of the notification", "details": {"Slug": "AppName", "Filter code": "AndroidDevice.newNotificationFromApp.AppName", "Type": "String", "Example": "Twitter"}}, {"section": "Ingredients", "title": "Notification message\nMessage text of the notification", "description": "Message text of the notification", "details": {"Slug": "NotificationMessage", "Filter code": "AndroidDevice.newNotificationFromApp.NotificationMessage", "Type": "String", "Example": "@jamisonross12 oh I love that song by Toto too!"}}, {"section": "Ingredients", "title": "Notification title\nTitle of the notification", "description": "Title of the notification", "details": {"Slug": "NotificationTitle", "Filter code": "AndroidDevice.newNotificationFromApp.NotificationTitle", "Type": "String", "Example": "Mentioned by @MrTibbets"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the notification was received.", "description": "The name of your device where the notification was received.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.newNotificationFromApp.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (AndroidDevice.newNotificationFromApp.AppName === \"Twitter\" && \n    AndroidDevice.newNotificationFromApp.DeviceName === \"Google Pixel 7\" && \n    AndroidDevice.newNotificationFromApp.NotificationMessage.includes(\"mentioned\")) {\n  var messageText = `<b>${AndroidDevice.newNotificationFromApp.NotificationTitle}</b>\\n${AndroidDevice.newNotificationFromApp.NotificationMessage}`;\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n} else {\n  Telegram.sendMessage.skip(\"Notification does not match the filter criteria.\");\n}", "intent": "When a notification from the Twitter app containing the keyword \"mentioned\" is received on my Google Pixel 7 device, forward the notification message and title to the #ifttt_test_chat Telegram chat, including a web page preview if available."}
{"original_description": "Post a daily reminder to Chatwork.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.includes(\"08:00\") && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(DateAndTime.everyWeekdayAt.DayOfWeek)) {\n  Chatwork.postMessages.setMessage(`Good morning, today is ${DateAndTime.everyWeekdayAt.DayOfWeek}, please review your tasks.`);\n  Chatwork.postMessages.setRoom(\"General\");\n} else {\n  Chatwork.postMessages.skip(\"Not the scheduled time or day.\");\n}", "intent": "Post a daily reminder to the \"General\" room in Chatwork at 08:00 every weekday, with the message \"Good morning, today is Friday, please review your tasks\"."}
{"original_description": "指定したRSSフィールドの更新情報のうち、指定したキーワードを含む情報をグループチャットに通知します。", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Chatwork", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "chatwork.post_messages", "Filter code method": "Chatwork.postMessages.skip(string?: reason)", "Runtime method": "runAction(\"chatwork.post_messages\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Helper text": "post message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Chatwork.postMessages.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"IFTTT Blog\" && Feed.newFeedItem.EntryTitle.includes(\"URGENT\")) {\n  Chatwork.postMessages.setMessage(`New urgent post: ${Feed.newFeedItem.EntryTitle} - ${Feed.newFeedItem.EntryUrl}`);\n  Chatwork.postMessages.setRoom(\"#general\");\n} else {\n  Chatwork.postMessages.skip(\"Does not match the feed title or keyword.\");\n}", "intent": "When a new RSS feed item is published on the \"IFTTT Blog\" feed, and the entry title contains the keyword \"URGENT\", send a message to the \"#general\" room in Chatwork with the message \"New urgent post: {{EntryTitle}} - {{EntryUrl}}\" including the entry title and URL."}
{"original_description": "The Fact Checker is a Washington Post section designed to dig into the data behind the headlines. This Applet will send new articles directly into the Telegram chat of your choice, so you can stay informed.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "Telegram.sendMessage.setChatId(\"#FactChecker\");\nTelegram.sendMessage.setText(\"New Article: \" + Feed.newFeedItem.EntryTitle + \"\\n\" + Feed.newFeedItem.EntryUrl + \"\\n\\n\" + Feed.newFeedItem.EntryContent);\nTelegram.sendMessage.setIncludeWebPagePreview(\"true\");", "intent": "Send a message to the #FactChecker chat on Telegram with the title, URL, and content of new articles from The Washington Post's Fact Checker RSS feed, including a web page preview, whenever a new article is published."}
{"original_description": "This Applet posts Caltrain news to a Telegram chat of your choosing.", "trigger_channel": "Caltrain", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "caltrain.new_update"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Caltrain.newUpdate.EntryTitle", "Type": "String", "Example": "SamTrans and Caltrain Get You to the San Mateo County Fair"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Caltrain.newUpdate.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qUi9lf"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Caltrain.newUpdate.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var telegramChat = \"@caltrain_updates\";\nvar entryTitle = Caltrain.newUpdate.EntryTitle;\nvar entryUrl = Caltrain.newUpdate.EntryUrl;\nvar messageText = \"<b>\" + entryTitle + \"</b>: \" + entryUrl;\n\nTelegram.sendMessage.setText(messageText);\nTelegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\nTelegram.sendMessage.setChatId(telegramChat);", "intent": "Post the latest Caltrain news update, including the entry title and URL, to a designated Telegram chat, such as \"@caltrain_updates\", whenever a new update is published, including a web page preview of the entry URL in the message."}
{"original_description": "Set a weekly reminder to your Teams chat. Choose the day(s) of the week, the time, and customize the message.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Monday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Thursday\") {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not scheduled for today.\");\n} else if (DateAndTime.everyWeekdayAt.CheckTime.getHours() !== 8) {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not the scheduled time.\");\n} else {\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Weekly Task Reminder\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(\"Remember to review your tasks for the week.\");\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n}", "intent": "Set a weekly reminder every Monday and Thursday at 08:00 to the #general channel in Microsoft Teams with the subject \"Weekly Task Reminder\" and the message body \"Remember to review your tasks for the week.\", marked as Important."}
{"original_description": "We got you, Dallas: this Applet sends you a Telegram message to the chat of your choosing when there's a DART rider alert during weekday commute hours (7-10am and 5-7pm).", "trigger_channel": "DART", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dart.new_dart_rider_alert"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (recommended)", "Helper text": "Station name, route color, &quot;streetcar&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title, includes abbreviated timestamp.", "description": "The entry's title, includes abbreviated timestamp.", "details": {"Slug": "EntryTitle", "Filter code": "Dart.newDartRiderAlert.EntryTitle", "Type": "String", "Example": "TRE Update 5/22 9:50a"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Dart.newDartRiderAlert.EntryUrl", "Type": "String", "Example": "http://ift.tt/2rIxmGN"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content.", "description": "The entry's content.", "details": {"Slug": "EntryContent", "Filter code": "Dart.newDartRiderAlert.EntryContent", "Type": "String", "Example": "Earlier mechanical problem near Union Station has cleared. All trains resuming normal schedule. Thank you for your patience."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Dart.newDartRiderAlert.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var Hour = Meta.currentUserTime.hour();\nvar Day = Meta.currentUserTime.day();\n\n// Skip outside of 7-10am and 5-7pm\nif (Hour < 7 || (Hour > 10 && Hour < 17) || Hour > 19) {\n  Telegram.sendMessage.skip(\"Outside of commuting hours\");\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 7) {\n  Telegram.sendMessage.skip(\"Not a weekday\");\n}\n\nTelegram.sendMessage.setChatId(\"#commute_alerts\");\nTelegram.sendMessage.setText(\"DART Rider Alert: \" + Dart.newDartRiderAlert.EntryTitle);\nTelegram.sendMessage.setIncludeWebPagePreview(\"Yes\");", "intent": "Send a Telegram message to the #commute_alerts chat with the text \"DART Rider Alert: <EntryTitle>\" including a web page preview, but only between 7:00 AM and 10:00 AM or 5:00 PM and 7:00 PM on weekdays when a new DART rider alert is published.", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\nvar Day = Meta.currentUserTime.day()\n\n// Skip outside of 7-10am and 5-7pm\nif (Hour <7 || (Hour > 10 && Hour < 17) || Hour > 19) {\n  Telegram.sendMessage.skip(\"Outside of commuting hours\")\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 7) {\n  Telegram.sendMessage.skip(\"Not a weekday\")\n}\n\n\n"}
{"original_description": "This Applet will send the love quote of the day as an SMS from your Android to the phone number you specify. Who says romance is dead? ", "trigger_channel": "BrainyQuote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "brainyquote.love_quotes"}, "trigger_details": [{"section": "Ingredients", "title": "Source\nThe source of the quote.", "description": "The source of the quote.", "details": {"Slug": "EntryTitle", "Filter code": "Brainyquote.loveQuotes.Source", "Type": "String", "Example": "Voltaire"}}, {"section": "Ingredients", "title": "Quote url\nThe BrainyQuote URL.", "description": "The BrainyQuote URL.", "details": {"Slug": "EntryUrl", "Filter code": "Brainyquote.loveQuotes.QuoteUrl", "Type": "String", "Example": "https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html"}}, {"section": "Ingredients", "title": "Quote\nThe quote, may contain HTML.", "description": "The quote, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Brainyquote.loveQuotes.Quote", "Type": "String", "Example": "\"Je pense, donc je suis\""}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "AndroidMessages.sendAMessage.setText(`\"${Brainyquote.loveQuotes.Source}\" says: ${Brainyquote.loveQuotes.Quote}`);\nAndroidMessages.sendAMessage.setPhoneNumber(\"+1-555-1234\");", "intent": "Send a daily SMS to phone number +1-555-1234 with the love quote of the day from BrainyQuote, including the quote and its source, such as \"Voltaire\" saying \"\\\"Je pense, donc je suis\\\"\"."}
{"original_description": "This Applet sends you BrainyQuote's art quote of the day via a push notification from the IFTTT app.", "trigger_channel": "BrainyQuote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "brainyquote.art_quotes"}, "trigger_details": [{"section": "Ingredients", "title": "Source\nThe source of the quote.", "description": "The source of the quote.", "details": {"Slug": "EntryTitle", "Filter code": "Brainyquote.artQuotes.Source", "Type": "String", "Example": "Voltaire"}}, {"section": "Ingredients", "title": "Quote url\nThe BrainyQuote URL.", "description": "The BrainyQuote URL.", "details": {"Slug": "EntryUrl", "Filter code": "Brainyquote.artQuotes.QuoteUrl", "Type": "String", "Example": "https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html"}}, {"section": "Ingredients", "title": "Quote\nThe quote, may contain HTML.", "description": "The quote, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Brainyquote.artQuotes.Quote", "Type": "String", "Example": "\"Je pense, donc je suis\""}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "IfNotifications.sendNotification.setMessage(Brainyquote.artQuotes.Quote + \" by \" + Brainyquote.artQuotes.Source + \". Read more at \" + Brainyquote.artQuotes.QuoteUrl);", "intent": "Send a push notification with the art quote of the day from BrainyQuote, including the quote \"Je pense, donc je suis\" by Voltaire, and the URL https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html, as the daily message."}
{"original_description": "Add a little flair to your daily journals — this Applet will make an entry with the QotD for you. ", "trigger_channel": "BrainyQuote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "brainyquote.today_s_quote"}, "trigger_details": [{"section": "Ingredients", "title": "Source\nThe source of the quote.", "description": "The source of the quote.", "details": {"Slug": "EntryTitle", "Filter code": "Brainyquote.todaySQuote.Source", "Type": "String", "Example": "Voltaire"}}, {"section": "Ingredients", "title": "Quote url\nThe BrainyQuote URL.", "description": "The BrainyQuote URL.", "details": {"Slug": "EntryUrl", "Filter code": "Brainyquote.todaySQuote.QuoteUrl", "Type": "String", "Example": "https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html"}}, {"section": "Ingredients", "title": "Quote\nThe quote, may contain HTML.", "description": "The quote, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Brainyquote.todaySQuote.Quote", "Type": "String", "Example": "\"Je pense, donc je suis\""}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "DayOne.createJournalEntry.setBody(Brainyquote.todaySQuote.Quote + \"\\n\\n\" + \"— \" + Brainyquote.todaySQuote.Source);\nDayOne.createJournalEntry.setTags(\"#QOTD #Inspiration\");\nDayOne.createJournalEntry.setImage(\"https://example.com/serene-landscape.jpg\");", "intent": "Create a new journal entry in my personal Day One journal with the quote of the day from BrainyQuote, including the quote \"Je pense, donc je suis\" by Voltaire, and add relevant tags like #QOTD and #Inspiration, along with a photo of a serene landscape to set a contemplative mood."}
{"original_description": "Automate a little love note — this will call the # you choose via Woopla and play the text of the quote and the source. ", "trigger_channel": "BrainyQuote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "brainyquote.love_quotes"}, "trigger_details": [{"section": "Ingredients", "title": "Source\nThe source of the quote.", "description": "The source of the quote.", "details": {"Slug": "EntryTitle", "Filter code": "Brainyquote.loveQuotes.Source", "Type": "String", "Example": "Voltaire"}}, {"section": "Ingredients", "title": "Quote url\nThe BrainyQuote URL.", "description": "The BrainyQuote URL.", "details": {"Slug": "EntryUrl", "Filter code": "Brainyquote.loveQuotes.QuoteUrl", "Type": "String", "Example": "https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html"}}, {"section": "Ingredients", "title": "Quote\nThe quote, may contain HTML.", "description": "The quote, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Brainyquote.loveQuotes.Quote", "Type": "String", "Example": "\"Je pense, donc je suis\""}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call_any", "Filter code method": "Woopla.ttsCallAny.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call_any\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setLanguage(string: language)"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone Number", "Helper text": "The phone number to call. International dialing format. Prefix with +. No zeros. Example: +4917098765432", "Slug": "phone_number", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setPhone Number(string: phone_number)"}}], "filter_code": "Woopla.ttsCallAny.setPhoneNumber(\"+14250000000\");\nWoopla.ttsCallAny.setLanguage(\"English\");\nvar quoteText = Brainyquote.loveQuotes.Quote + \" by \" + Brainyquote.loveQuotes.Source;\nWoopla.ttsCallAny.setTts(quoteText);", "intent": "When a new love quote is available from BrainyQuote, call the phone number +14250000000 via Woopla and play the text of the quote, such as \"\\\"Je pense, donc je suis\\\"\", and its source, for example, \"Voltaire\", in English."}
{"original_description": "When it is sunset at my location, close a LightwaveRF Relay device such as electric curtains", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LightwaveRF Power", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_power.close_relay", "Filter code method": "LightwaverfPower.closeRelay.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_power.close_relay\", {})"}, "action_details": [{"section": "Action fields", "title": "Which relay\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which relay?", "Slug": "which_relay", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  LightwaverfPower.closeRelay.setWhichRelay(\"Electric Curtains\");\n} else {\n  LightwaverfPower.closeRelay.skip(\"Temperature or condition does not match.\");\n}", "intent": "When the sunset occurs at my location, with a temperature of 18 degrees Celsius and a condition of Sunny, close the Electric Curtains relay device."}
{"original_description": "It is not good for your grass to mow in such cold conditions. This applet will ensure that your Indego Connect will avoid these conditions.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Indego Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "indegoconnect.send_dock", "Filter code method": "Indegoconnect.sendDock.skip(string?: reason)", "Runtime method": "runAction(\"indegoconnect.send_dock\", {})"}, "action_details": [], "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 5) {\n  Indegoconnect.sendDock.skip(\"Cold weather conditions\");\n}", "intent": "When the temperature drops below 5°C at My Home - Indoor station, send the Indego Connect to dock with the reason \"Cold weather conditions\"."}
{"original_description": "Set Nest thermostat temperature based on a change in armed state of your LifeShield system. You may select a specific arm type such as Armed Away, Armed Stay, Armed Instant, or Armed - Any mode for your LifeShield system. Next, select your Thermostat Name, enter your target temperature and set degrees. Optionally, you may also select your Arm Type as a Disarmed state, select your Thermostat Name, enter your target temperature and set degrees.", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.arm_state_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Arm type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Arm Type?", "Slug": "arm_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.armStateChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.armStateChange.EventType", "Type": "String", "Example": "System Disarmed"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.armStateChange.FormattedMessage", "Type": "String", "Example": "Disarmed"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.skip();\n} else if (Bluebyadt.armStateChange.EventType === \"Disarmed\") {\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"20\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.skip();\n}", "intent": "When the LifeShield system is armed away, set the Living Room Nest Thermostat to 22°C. When the LifeShield system is disarmed, set the Living Room Nest Thermostat to 20°C."}
{"original_description": "Set Honeywell Total Connect thermostat temperature based on a change in armed state of your Blue by ADT system. You may select a specific arm type such as Armed Away, Armed Stay, Armed Instant, or Armed - Any mode for your Blue by ADT system. Next, select your Thermostat Name, set to Heat or Cool and set your target temperature to hold. Optionally, you may also select your Arm Type as a Disarmed state, select your Thermostat Name, set to Heat or Cool and set your target temperature to hold.", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.arm_state_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Arm type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Arm Type?", "Slug": "arm_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.armStateChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.armStateChange.EventType", "Type": "String", "Example": "System Disarmed"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.armStateChange.FormattedMessage", "Type": "String", "Example": "Disarmed"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setsystemtemperature", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "For heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Temperature in degrees e.g. 71", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature in", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}, {"section": "Action fields", "title": "Hours\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hours", "Helper text": "In whole numbers e.g. 3", "Slug": "hours", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setHours(string: hours)"}}], "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"72\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureType(\"Heat\");\n} else if (Bluebyadt.armStateChange.EventType === \"Disarmed\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"68\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureType(\"Cool\");\n}", "intent": "When the Blue by ADT system is armed away, set the Honeywell Total Connect thermostat temperature to 72 degrees Fahrenheit for heating, and when disarmed, set it to 68 degrees Fahrenheit for cooling."}
{"original_description": "This Applet monitors your Google Calendar for any event with the words LinkJapan in it. When such an event is about to start, the Applet will turn your LinkJapan on or off.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "LinkJapan eHome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkJapan_eHome.powerState", "Filter code method": "LinkJapanEHome.powerState.skip(string?: reason)", "Runtime method": "runAction(\"LinkJapan_eHome.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Helper text": "choose power", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "LinkJapanEHome.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.query === \"LinkJapan\" && GoogleCalendar.eventFromSearchStarts.calendar === \"Work\" && GoogleCalendar.eventFromSearchStarts.offset === \"15 minutes\") {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n  LinkJapanEHome.powerState.setDeviceinfo(\"Living Room Light\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Conditions not met.\");\n}", "intent": "When an event containing the keyword \"LinkJapan\" is about to start in 15 minutes on my Google Calendar's \"Work\" calendar, turn on the LinkJapan device named \"Living Room Light\"."}
{"original_description": "With a simple tap, secure your home with smanos and enjoy your time away with complete peace of mind.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "smanos connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smanos.arm_away", "Filter code method": "Smanos.armAway.skip(string?: reason)", "Runtime method": "runAction(\"smanos.arm_away\", {})"}, "action_details": [{"section": "Action fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar shareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\nvar locationMapImageUrl = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n\nif (hour >= 7 && hour <= 19 && latitude === \"37.8267\" && longitude === \"-122.4230\") {\n  Smanos.armAway.setWhichSystem(\"Home Security\");\n  Notification.sendNotification.setMessage(\"Arming Home Security in away mode at \" + latitude + \", \" + longitude);\n  Notification.sendNotification.setAttachment(shareUrl);\n  Notification.sendNotification.setImage(locationMapImageUrl);\n} else {\n  Smanos.armAway.skip(\"Not arming system: outside of active hours or incorrect location\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, arm the smanos system named \"Home Security\" in away mode, and send a notification with the share URL https://ifttt.com/share/McFwJfDH9Ns and the location map image URL http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667."}
{"original_description": "Connect SmartThings with Angelcam platform and make your home secure. When SmartThings detects motion, it sends this information to Angelcam platform, marks it on camera timeline and starts recording (optional).", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.any_new_motion_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Detected at\nThe date and time motion was sensed.", "description": "The date and time motion was sensed.", "details": {"Slug": "DetectedAt", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DetectedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Angelcam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "angelcam.receive_event", "Filter code method": "Angelcam.receiveEvent.skip(string?: reason)", "Runtime method": "runAction(\"angelcam.receive_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sensor", "Slug": "sensor", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Occurred at\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Event timestamp", "Helper text": "If sensor can provide timestamp of an event you can use is, otherwise we use time when we recieve the event.", "Slug": "occurred_at", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Event title (will be displayed in the timeline)", "Slug": "title", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (SmartthingsV2.anyNewMotionSmartthings.DeviceName === \"Bedroom sensor\") {\n  var occurredAt = SmartthingsV2.anyNewMotionSmartthings.DetectedAt;\n  var title = \"Motion Detected in Bedroom\";\n  Angelcam.receiveEvent.setOccurredAt(occurredAt);\n  Angelcam.receiveEvent.setTitle(title);\n  // Assuming there's a method to start recording for 5 minutes\n  // This part might need adjustment based on actual Angelcam API\n  Angelcam.startRecordingForDuration(300); // 300 seconds = 5 minutes\n} else {\n  Angelcam.receiveEvent.skip(\"Motion not detected by Bedroom sensor\");\n}", "intent": "When the Bedroom sensor detects motion, send a notification to Angelcam with the event title \"Motion Detected in Bedroom\" and the exact timestamp of detection, then mark this event on the camera timeline and start recording for 5 minutes."}
{"original_description": "This will change the WiZ light(s) of your choice to yellow if your Netatmo Weather Station records gusts faster than a certain speed. An ideal warning to secure things left outdoor and be extra cautious on the road. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.gust-speed-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.gustSpeedAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.gustSpeedAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target gust speed kmh\nThe target gust speed in km/h.", "description": "The target gust speed in km/h.", "details": {"Slug": "TargetGustSpeedKmh", "Filter code": "Netatmo.gustSpeedAbove.TargetGustSpeedKmh", "Type": "String", "Example": "38.6"}}, {"section": "Ingredients", "title": "Target gust speed mph\nThe target gust speed in mph.", "description": "The target gust speed in mph.", "details": {"Slug": "TargetGustSpeedMph", "Filter code": "Netatmo.gustSpeedAbove.TargetGustSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Gust speed kmh\nThe measured gust speed in km/h.", "description": "The measured gust speed in km/h.", "details": {"Slug": "GustSpeedKmh", "Filter code": "Netatmo.gustSpeedAbove.GustSpeedKmh", "Type": "String", "Example": "38.6"}}, {"section": "Ingredients", "title": "Gust speed mph\nThe measured gust speed in mph.", "description": "The measured gust speed in mph.", "details": {"Slug": "GustSpeedMph", "Filter code": "Netatmo.gustSpeedAbove.GustSpeedMph", "Type": "String", "Example": "24"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Netatmo.gustSpeedAbove.DeviceName === \"My Home - Wind gauge\" && Netatmo.gustSpeedAbove.GustSpeedKmh > 38.6) {\n  Wiz.turnOn.setEntity(\"Living Room\");\n  Wiz.turnOn.setMode(\"yellow\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"Gust speed is not above 38.6 km/h or device name does not match.\");\n}", "intent": "When the Netatmo Weather Station at \"My Home - Wind gauge\" records gusts above 38.6 km/h, change the WiZ light in the \"Living Room\" to yellow with a brightness of 80%, serving as a warning to secure outdoor items and exercise caution on the road."}
{"original_description": "Uploads a short video to the cloud every hour.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Wyze", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wyzecam.upload_alarm_video", "Filter code method": "Wyzecam.uploadAlarmVideo.skip(string?: reason)", "Runtime method": "runAction(\"wyzecam.upload_alarm_video\", {})"}, "action_details": [{"section": "Action fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyHourAt.CheckTime.getMinutes() !== 15) {\n  Wyzecam.uploadAlarmVideo.skip(\"Not 15 minutes past the hour.\");\n} else if (serialize_device_info !== \"Living Room Camera\") {\n  Wyzecam.uploadAlarmVideo.skip(\"Device is not the Living Room Camera.\");\n} else {\n  var videoDuration = 10; // seconds\n  Wyzecam.uploadAlarmVideo.setDuration(videoDuration);\n}", "intent": "Upload a 10-second video to the cloud from the \"Living Room Camera\" every hour, at 15 minutes past the hour."}
{"original_description": "This applet will start playing a Sonos favourite when you run a shortcut in Futurehome", "trigger_channel": "Futurehome", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "futurehome.shortcut_run"}, "trigger_details": [{"section": "Trigger fields", "title": "Shortcut\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "shortcut", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Shortcut\nThe name of the shortcut.", "description": "The name of the shortcut.", "details": {"Slug": "shortcut", "Filter code": "Futurehome.shortcutRun.Shortcut", "Type": "String", "Example": "Arm House"}}, {"section": "Ingredients", "title": "Site name\nName of the site the shortcut was triggered in.", "description": "Name of the site the shortcut was triggered in.", "details": {"Slug": "site_name", "Filter code": "Futurehome.shortcutRun.SiteName", "Type": "String", "Example": "Home"}}, {"section": "Ingredients", "title": "Triggered at\nThe time when the shortcut was triggered.", "description": "The time when the shortcut was triggered.", "details": {"Slug": "triggered_at", "Filter code": "Futurehome.shortcutRun.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Futurehome.shortcutRun.Shortcut === \"Arm House\" && Futurehome.shortcutRun.SiteName === \"Home\") {\n  Sonos.playFavorite.setFavorite(\"Morning Music\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Conditions not met.\");\n}", "intent": "When the \"Arm House\" shortcut is run in Futurehome at \"Home\" site, play the \"Morning Music\" Sonos favorite in the \"Living Room\" and include grouped rooms."}
{"original_description": "Automatically adjust my Honeywell Thermostat to my preferred temperature setpoint when PTS Hours begin. We recommend raising the setpoint at least 3 degrees (Fahrenheit) or to 78 degrees (Fahrenheit).\n \nPart 2 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Honeywell Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_lyric.setsystemtemperature", "Filter code method": "HoneywellLyric.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_lyric.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "Select a thermostat", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "Enter 'heat' or 'cool' or an ingredient from a trigger, for heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Type(string: temperature_type)"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Enter a temperature in degrees (such as 71) or an ingredient from a trigger", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature scale", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\") {\n  HoneywellLyric.setsystemtemperature.setTemperatureType(\"cool\");\n  HoneywellLyric.setsystemtemperature.setTargetTemperature(78);\n  HoneywellLyric.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"Not during ComEd's PTS Hours start.\");\n}", "intent": "When ComEd's PTS Hours start, set the target temperature of my Honeywell Home thermostat to 78 degrees Fahrenheit for cooling."}
{"original_description": "When Peak Time Savings Hours end, set a new setpoint on my Honeywell thermostat.\n\n\nPart 3 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Honeywell Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_lyric.setsystemtemperature", "Filter code method": "HoneywellLyric.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_lyric.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "Select a thermostat", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "Enter 'heat' or 'cool' or an ingredient from a trigger, for heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Type(string: temperature_type)"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Enter a temperature in degrees (such as 71) or an ingredient from a trigger", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature scale", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Ended\" && ComEd.ptsSavingsHours.EndTime === new Date()) {\n  HoneywellLyric.setsystemtemperature.setTemperatureType(\"cool\");\n  HoneywellLyric.setsystemtemperature.setTargetTemperature(72);\n  HoneywellLyric.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellLyric.setsystemtemperature.skip();\n}", "intent": "When the ComEd Peak Time Savings Hours end at their scheduled end time, such as 2020-07-08T04:17:06+05:00, set the target temperature to 72 degrees Fahrenheit on my Honeywell Home thermostat, ensuring it's in auto mode to effectively adjust between heating and cooling as necessary."}
{"original_description": "Update my Honeywell Thermostat to the recommended temperature to pre cool before the Peak Time Savings Event starts. We recommend lowering the setpoint at least 3 degrees (Fahrenheit) or to 68 degrees (Fahrenheit).\n \nPart 1 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Honeywell Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_lyric.setsystemtemperature", "Filter code method": "HoneywellLyric.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_lyric.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "Select a thermostat", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "Enter 'heat' or 'cool' or an ingredient from a trigger, for heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Type(string: temperature_type)"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Enter a temperature in degrees (such as 71) or an ingredient from a trigger", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature scale", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && Meta.currentUserTime.iso8601() < ComEd.ptsSavingsHours.PrecoolTime) {\n  if (Meta.currentUserTime.iso8601() >= ComEd.ptsSavingsHours.PrecoolTime - 3600000) { // one hour before precool time\n    HoneywellLyric.setsystemtemperature.setSystem(\"living room\");\n    HoneywellLyric.setsystemtemperature.setTemperatureType(\"cool\");\n    HoneywellLyric.setsystemtemperature.setTargetTemperature(68);\n    HoneywellLyric.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  } else {\n    HoneywellLyric.setsystemtemperature.skip(\"Not yet time to precool.\");\n  }\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"ComEd Peak Time Savings Event not scheduled or already started.\");\n}", "intent": "Set the living room Honeywell Thermostat to cool at 68 degrees Fahrenheit one hour before the ComEd Peak Time Savings Event starts, using the precool time provided by ComEd."}
{"original_description": "Update my ecobee Thermostat to a specific comfort profile to pre cool before the Peak Time Savings Event starts. We recommend lowering the setpoint at least 3 degrees (Fahrenheit) or to 68 degrees (Fahrenheit). This is an alternative option to setting your setpoint directly for precooling.\n \nPart 1 of 3 applets to automate your thermostat's response before, during, and after PTS Hours.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.climate_hours", "Filter code method": "Ecobee.climateHours.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.climate_hours\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Hold hours\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of Hours", "Helper text": "The number of hours to hold for", "Slug": "hold_hours", "Required": "true", "Can have default value": "true", "Filter code method": "Ecobee.climateHours.setHold Hours(string: hold_hours)"}}, {"section": "Action fields", "title": "Comfort profile\nDropdown list", "description": "Dropdown list", "details": {"Label": "Comfort Profile", "Helper text": "Select which comfort profile to use for the hold.", "Slug": "comfort_profile", "Required": "true", "Can have default value": "false"}}], "filter_code": "var startTime = new Date(ComEd.ptsSavingsHours.StartTime);\nvar precoolTime = new Date(startTime.getTime() - 60 * 60 * 1000); // 1 hour before start time\nvar currentTime = new Date();\n\nif (currentTime >= precoolTime && currentTime < startTime) {\n  Ecobee.climateHours.setHoldHours(\"2\");\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n  Ecobee.climateHours.setThermostat(\"Living Room Thermostat\");\n  Ecobee.climateHours.setSetpoint(68);\n} else {\n  Ecobee.climateHours.skip(\"Not within precooling time frame.\");\n}", "intent": "Update my ecobee Thermostat to the \"Home\" comfort profile 1 hour before the Peak Time Savings Event starts, to precool by lowering the setpoint to 68 degrees Fahrenheit, using my \"Living Room Thermostat\" and holding for 2 hours."}
{"original_description": "When Peak Time Savings (PTS) Hours begin, automatically turn off specified Philips Hue lights.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.pts_savings_hours"}, "trigger_details": [{"section": "Trigger fields", "title": "Stage\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which event stage do you want this to trigger?", "Helper text": "Allows you to select a specific event stage you want to use or all stages. Precooling is typically triggered an hour before start time.", "Slug": "stage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Event date\nDate for the event", "description": "Date for the event", "details": {"Slug": "event_date", "Filter code": "ComEd.ptsSavingsHours.EventDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Stage\nWhich stage the event is currently in", "description": "Which stage the event is currently in", "details": {"Slug": "stage", "Filter code": "ComEd.ptsSavingsHours.Stage", "Type": "String", "Example": "Scheduled"}}, {"section": "Ingredients", "title": "Precool time\nThe recommended time to start precooling", "description": "The recommended time to start precooling", "details": {"Slug": "precool_time", "Filter code": "ComEd.ptsSavingsHours.PrecoolTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe start time of the savings hours", "description": "The start time of the savings hours", "details": {"Slug": "start_time", "Filter code": "ComEd.ptsSavingsHours.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nThe end time of the savings hours", "description": "The end time of the savings hours", "details": {"Slug": "end_time", "Filter code": "ComEd.ptsSavingsHours.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && ComEd.ptsSavingsHours.StartTime <= new Date()) {\n  Hue.turnOffAllHue.setLights([\"living room\", \"kitchen\"]).skip(\"Peak Time Savings Hours have started\");\n}", "intent": "When the ComEd Peak Time Savings (PTS) Hours start at the scheduled time, such as 2020-07-08T04:17:06+05:00, automatically turn off the specified Philips Hue lights in the living room and kitchen."}
{"original_description": "Toggle your Philip Hue lights on and off by pressing the pusher on your Jaguar watch.", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\" && \n    JaguarWatches.pusherPressed.Latitude === \"55.611947\" && \n    JaguarWatches.pusherPressed.Longitude === \"12.978337\") {\n  Hue.toggleAllHue();\n} else {\n  Hue.toggleAllHue.skip(\"Push type or location does not match.\");\n}", "intent": "When the pusher on your Jaguar watch is pressed with a double press at latitude 55.611947 and longitude 12.978337, toggle all Philips Hue lights."}
{"original_description": "Toggle your Philip Hue lights on and off by pressing the pusher on your Lotus watch.", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(LotusWatches.pusherPressed.PressedAt).getHours();\nvar pressType = LotusWatches.pusherPressed.PressType;\nif (hour === 12 && pressType === \"double\") {\n  Hue.toggleAllHue.setLights(\"living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Not a double press at 12:00 PM.\");\n}", "intent": "When the pusher on your Lotus watch is pressed with a double press at 12:00 PM, toggle all Philips Hue lights in the living room on or off."}
{"original_description": "Add your current location and time to a Google Drive spreadsheet by pressing the pusher on your Lotus watch. (Make sure you enable \"Include location\" in the IFTTT trigger in the Lotus app).", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (LotusWatches.pusherPressed.PressType !== \"double\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Not a double press\");\n}\n\nvar formattedRow = LotusWatches.pusherPressed.PressedAt + \"|||\" + LotusWatches.pusherPressed.Latitude + \"|||\" + LotusWatches.pusherPressed.Longitude + \"|||\" + LotusWatches.pusherPressed.MapImageUrl;\n\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Location Log\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/My Locations\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);", "intent": "When the pusher on my Lotus watch is pressed with a double press, add a new row to my Google Sheets spreadsheet named \"Location Log\" in the folder \"IFTTT/My Locations\", with the formatted row containing the current date and time in ISO8601 format, latitude, longitude, and map image URL, separated by \"|||\", such as \"{{PressedAt}}|||{{Latitude}}|||{{Longitude}}|||{{MapImageUrl}}\" to keep track of my locations."}
{"original_description": "Get a daily reminder on your Festina watch to do that thing you always forget to do.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Festina Watches", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "festina_watches.notify", "Filter code method": "FestinaWatches.notify.skip(string?: reason)", "Runtime method": "runAction(\"festina_watches.notify\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "Enter a message", "Helper text": "This optional message will be sent as a notification to your phone.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "FestinaWatches.notify.setBody(string: body)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 8) {\n  FestinaWatches.notify.skip(\"Not the scheduled reminder time.\");\n} else {\n  FestinaWatches.notify.setBody(\"Remember to take your morning pill\");\n}", "intent": "Send a daily reminder to my Festina watch at 08:00 to take my daily medication, with the notification message \"Remember to take your morning pill\"."}
{"original_description": "Add a 60 minute event in your Google Calendar so that no one else can book you.", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy - Do not book\");\n  GoogleCalendar.quickAddEvent.setDuration(60);\n}", "intent": "When the pusher is pressed with a double press type on the Jaguar Watches, add a 60 minute event in my primary Google Calendar with the quick add text \"Busy - Do not book\" to prevent others from scheduling over it."}
{"original_description": "Toggle your LIFX lights on and off by pressing the pusher on your Lotus watch.", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.toggle", "Filter code method": "Lifx.toggle.skip(string?: reason)", "Runtime method": "runAction(\"lifx.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want to toggle with a duration? Specify it here. Example: &quot;transition_duration: 5&quot; for a 5 second fade duration. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.toggle.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (LotusWatches.pusherPressed.PressType === \"double\" && LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.Longitude === \"12.978337\") {\n  Lifx.toggle.setSelector(\"living room\");\n  Lifx.toggle.setAdvancedOptions(\"transition_duration: 5\");\n} else {\n  Lifx.toggle.skip(\"Conditions not met for toggling living room lights.\");\n}", "intent": "When the pusher on your Lotus watch is pressed with a double press at latitude 55.611947 and longitude 12.978337, toggle your LIFX living room lights on and off with a transition duration of 5 seconds."}
{"original_description": "Toggle your WeMo Insight Switch on and of by pressing the pusher on your Lotus watch.", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_insightToggleDiscrete", "Filter code method": "WemoInsightSwitch.attributeInsightToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_insightToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (LotusWatches.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.setMacaddress(\"00:11:22:33:44:55\");\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press.\");\n}", "intent": "When the pusher on your Lotus watch is pressed with a double press at any time, toggle your WeMo Insight Switch located at the office, which has the macaddress 00:11:22:33:44:55, on and off."}
{"original_description": "Turn off your LIFX lights and WeMo Insight switch by pressing the pusher on your Jaguar watch.", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTOFF", "Filter code method": "WemoInsightSwitch.attributeINSIGHTOFF.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_INSIGHTOFF\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\" && \n    JaguarWatches.pusherPressed.Latitude === \"55.611947\" && \n    JaguarWatches.pusherPressed.Longitude === \"12.978337\") {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOff();\n}", "intent": "When the pusher on your Jaguar watch is pressed with a double press at latitude 55.611947 and longitude 12.978337, turn off your WeMo Insight switch named \"Living Room Switch\" and also turn off your LIFX lights."}
{"original_description": "Get a daily reminder on your Lotus watch to do that thing you always forget to do.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Lotus Watches", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lotus_watches.notify", "Filter code method": "LotusWatches.notify.skip(string?: reason)", "Runtime method": "runAction(\"lotus_watches.notify\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "Enter a message", "Helper text": "This optional message will be sent as a notification to your phone.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "LotusWatches.notify.setBody(string: body)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nif (hour === 8) {\n  LotusWatches.notify.setBody(\"Don't forget to take your morning pills\");\n} else {\n  LotusWatches.notify.skip(\"Not the scheduled time for medication reminder.\");\n}", "intent": "Send a daily reminder to my Lotus watch at 08:00 to take medication, with the notification message \"Don't forget to take your morning pills\"."}
{"original_description": "Toggle your WeMo Insight Switch on and of by pressing the pusher on your Jaguar watch.", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_insightToggleDiscrete", "Filter code method": "WemoInsightSwitch.attributeInsightToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_insightToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = JaguarWatches.pusherPressed.PressedAt.hour();\nvar minutes = JaguarWatches.pusherPressed.PressedAt.minute();\nvar pressType = JaguarWatches.pusherPressed.PressType;\nif (hour === 12 && minutes === 0 && pressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete();\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press at 12:00 PM.\");\n}", "intent": "When the pusher on your Jaguar watch is pressed with a double press at 12:00 PM, toggle your WeMo Insight Switch located in the living room."}
{"original_description": "Set Mr.Coffee to brew when you press a pusher on your Lotus watch.", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var pressType = LotusWatches.pusherPressed.PressType;\nvar latitude = parseFloat(LotusWatches.pusherPressed.Latitude);\nvar longitude = parseFloat(LotusWatches.pusherPressed.Longitude);\nvar homeLatitude = 37.7749;\nvar homeLongitude = -122.4194;\nvar distance = getDistanceFromLatLonInMiles(homeLatitude, homeLongitude, latitude, longitude);\n\nif (pressType === \"double\" && distance <= 1) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"on\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Push type is not double press or out of range.\");\n}\n\nfunction getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {\n  var R = 3959; // Radius of the earth in miles\n  var dLat = deg2rad(lat2 - lat1);\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}", "intent": "When the pusher on your Lotus watch is pressed with a double press at any time, and you are within a 1-mile radius of home, defined by latitude 37.7749 and longitude -122.4194, then turn on the Mr.Coffee WeMo Coffeemaker device to start brewing."}
{"original_description": "Add your current location and time to a Google Drive spreadsheet by pressing the pusher on your Jaguar watch. (Make sure you enable \"Include location\" in the IFTTT trigger in the Jaguar app).", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (JaguarWatches.pusherPressed.PressType !== \"double\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Push type was not double press.\");\n}\n\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Daily Locations\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Watch Logs\");\nvar formattedRow = JaguarWatches.pusherPressed.PressedAt + \"|||\" + JaguarWatches.pusherPressed.Latitude + \"|||\" + JaguarWatches.pusherPressed.Longitude + \"|||\" + JaguarWatches.pusherPressed.MapImageUrl;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);", "intent": "When the pusher on your Jaguar watch is pressed with a double press, add a new row to your Google Sheets spreadsheet named \"Daily Locations\" in the folder \"IFTTT/Watch Logs\", with the formatted row containing the current date and time in ISO8601 format, latitude, longitude, and map image URL, separated by \"|||\", such as \"{{pressed_at}}|||{{latitude}}|||{{longitude}}|||{{map_image_url}}\"."}
{"original_description": "Going away for the weekend? Want to make sure to not waste unnecessary energy? Press your Lotus pusher to set the Nest thermostat at the desired \"away\" temperature. ", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (LotusWatches.pusherPressed.Longitude === \"12.978337\" && LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.PressType === \"double\") {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room Thermostat\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"18\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Conditions not met.\");\n}", "intent": "When the Lotus pusher is pressed with a double press at 12.978337 longitude and 55.611947 latitude, set the Google Nest Thermostat device named \"Living Room Thermostat\" to 18 degrees Celsius."}
{"original_description": "Set Mr.Coffee to brew when you press a pusher on your Jaguar watch.", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var latitude = JaguarWatches.pusherPressed.Latitude;\nvar longitude = JaguarWatches.pusherPressed.Longitude;\nvar pressType = JaguarWatches.pusherPressed.PressType;\n\n// Assuming home location is predefined as variables homeLatitude and homeLongitude\nvar homeLatitude = 55.612347; // Replace with actual home latitude\nvar homeLongitude = 12.979031; // Replace with actual home longitude\n\nfunction distanceBetweenTwoPoints(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n  var dLat = (lat2 - lat1) * Math.PI / 180;\n  var dLon = (lon2 - lon1) * Math.PI / 180;\n  var lat1Rad = lat1 * Math.PI / 180;\n  var lat2Rad = lat2 * Math.PI / 180;\n\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1Rad) * Math.cos(lat2Rad); \n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); \n  var d = R * c;\n  return d;\n}\n\nvar distanceFromHome = distanceBetweenTwoPoints(homeLatitude, homeLongitude, latitude, longitude);\n\nif (pressType === \"double\" && distanceFromHome <= 1) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"brew\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Conditions not met for brewing coffee.\");\n}", "intent": "When the pusher is pressed with a double press type on the Jaguar watch at any time, and the geographic location is within a 1 km radius of home, then set the WeMo Coffeemaker with MAC address 34:12:64:11:23:45 to brew a fresh pot of coffee."}
{"original_description": "Turn off your LIFX lights and WeMo Insight switch by pressing the pusher on your Festina watch.", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTOFF", "Filter code method": "WemoInsightSwitch.attributeINSIGHTOFF.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_INSIGHTOFF\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOffLights();\n}", "intent": "When the pusher on your Festina watch is pressed with a double press at any time, turn off your WeMo Insight switch named \"Living Room Switch\" and also switch off your LIFX lights."}
{"original_description": "Going away for the weekend? Want to make sure to not waste unnecessary energy? Press your Festina pusher to set the Nest thermostat at the desired \"away\" temperature. ", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\" && \n    FestinaWatches.pusherPressed.Latitude >= 40.7128 && \n    FestinaWatches.pusherPressed.Latitude <= 51.5074) {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"living room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"18\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Conditions not met.\");\n}", "intent": "When the Festina pusher is pressed with a double press at any time, and the current location's latitude is between 40.7128 and 51.5074, set the Google Nest Thermostat, located in the living room, to 18 degrees Celsius."}
{"original_description": "Toggle your LIFX lights on and off by pressing the pusher on your Festina watch.", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.toggle", "Filter code method": "Lifx.toggle.skip(string?: reason)", "Runtime method": "runAction(\"lifx.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want to toggle with a duration? Specify it here. Example: &quot;transition_duration: 5&quot; for a 5 second fade duration. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.toggle.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  Lifx.toggle.setSelector(\"Living Room\");\n  Lifx.toggle.setAdvancedOptions(\"transition_duration: 2\");\n  Lifx.toggle.skip();\n}", "intent": "When the pusher on your Festina watch is pressed with a double press type at any time, toggle your LIFX lights in the \"Living Room\" selector on and off, using a transition duration of 2 seconds for a smooth fade."}
{"original_description": "Add a 60 minute event in your Google Calendar so that no one else can book you.", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (LotusWatches.pusherPressed.PressType === \"double\" && LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.Longitude === \"12.978337\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy - Unavailable for 60 minutes\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}", "intent": "When the pusher is pressed with a double press type on the Lotus Watches, and the geographic latitude is 55.611947 and the geographic longitude is 12.978337, add a 60-minute event to my primary Google Calendar with the quick add text \"Busy - Unavailable\" to prevent others from booking me during this time."}
{"original_description": "Get a daily reminder on your Jaguar watch to do that thing you always forget to do.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Jaguar Watches", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "jaguar_watches.notify", "Filter code method": "JaguarWatches.notify.skip(string?: reason)", "Runtime method": "runAction(\"jaguar_watches.notify\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "Enter a message", "Helper text": "This optional message will be sent as a notification to your phone.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "JaguarWatches.notify.setBody(string: body)"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nif (hour === 8) {\n  JaguarWatches.notify.setBody(\"Remember to take your morning pills\");\n} else {\n  JaguarWatches.notify.skip(\"Not the scheduled reminder time.\");\n}", "intent": "Send a daily reminder to my Jaguar watch at 08:00 to take medication, with the notification message \"Remember to take your morning pills\"."}
{"original_description": "Going away for the weekend? Want to make sure to not waste unnecessary energy? Press your Jaguar pusher to set the Nest thermostat at the desired \"away\" temperature. ", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "var pressType = JaguarWatches.pusherPressed.PressType;\nvar hour = Meta.currentUserTime.hour();\nif (pressType === \"double\" && hour >= 7 && hour < 19) {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"15\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Condition not met.\");\n}", "intent": "When the Jaguar pusher is double-pressed between 07:00 and 19:00, set the Living Room Nest Thermostat to 15°C."}
{"original_description": "Toggle your LIFX lights on and off by pressing the pusher on your Jaguar watch.", "trigger_channel": "Jaguar Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jaguar_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "JaguarWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "JaguarWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "JaguarWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "JaguarWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "JaguarWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.toggle", "Filter code method": "Lifx.toggle.skip(string?: reason)", "Runtime method": "runAction(\"lifx.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want to toggle with a duration? Specify it here. Example: &quot;transition_duration: 5&quot; for a 5 second fade duration. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.toggle.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\") {\n  Lifx.toggle.setSelector(\"Living Room\");\n  Lifx.toggle.skip();\n}", "intent": "When the pusher on your Jaguar watch is pressed with a double press type at any time, toggle your Living Room LIFX light on or off."}
{"original_description": "Toggle your WeMo Insight Switch on and of by pressing the pusher on your Festina watch.", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_insightToggleDiscrete", "Filter code method": "WemoInsightSwitch.attributeInsightToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_insightToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.setMacaddress(\"Living Room Lamp\");\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press.\");\n}", "intent": "When the pusher on my Festina watch is pressed with a double press at any time, toggle my WeMo Insight Switch, which is named \"Living Room Lamp\"."}
{"original_description": "Add a 60 minute event in your Google Calendar so that no one else can book you.", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\" && FestinaWatches.pusherPressed.Latitude === \"55.611947\" && FestinaWatches.pusherPressed.Longitude === \"12.978337\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy for 60 minutes\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for adding event.\");\n}", "intent": "When the Festina Watches pusher is pressed with a double press at latitude 55.611947 and longitude 12.978337, add a 60 minute event to my primary Google Calendar titled \"Busy\" so that no one else can book me."}
{"original_description": "Set Mr.Coffee to brew when you press a pusher on your Festina watch.", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar pressType = FestinaWatches.pusherPressed.PressType;\nif (pressType === \"double\" && hour >= 6 && hour < 10) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.setMacaddress(\"Kitchen Coffee Maker\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Either not a double press or outside of brewing hours (06:00-10:00).\");\n}", "intent": "When the pusher on your Festina watch is pressed with a double press, and the current time is between 06:00 and 10:00, then start brewing coffee using your WeMo Coffeemaker device named \"Kitchen Coffee Maker\"."}
{"original_description": "Turn off your LIFX lights and WeMo Insight switch by pressing the pusher on your Lotus watch.", "trigger_channel": "Lotus Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "lotus_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "LotusWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "LotusWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "LotusWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "LotusWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "LotusWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTOFF", "Filter code method": "WemoInsightSwitch.attributeINSIGHTOFF.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_INSIGHTOFF\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var pressedAt = LotusWatches.pusherPressed.PressedAt;\nvar pressType = LotusWatches.pusherPressed.PressType;\nvar latitude = parseFloat(LotusWatches.pusherPressed.Latitude);\nvar longitude = parseFloat(LotusWatches.pusherPressed.Longitude);\nvar targetLatitude = 55.611947;\nvar targetLongitude = 12.978337;\nvar distance = getDistanceFromLatLonInKm(latitude, longitude, targetLatitude, targetLongitude);\n\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2 - lat1);\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nif (pressType === \"double\" && getHour(pressedAt) === 12 && distance <= 1) {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOffAllLights();\n} else {\n  WemoInsightSwitch.attributeINSIGHTOFF.skip(\"Conditions not met.\");\n  LIFX.turnOffAllLights.skip(\"Conditions not met.\");\n}\n\nfunction getHour(dateString) {\n  var date = new Date(dateString);\n  return date.getHours();\n}", "intent": "When the pusher on your Lotus watch is pressed with a double press at 12:00 PM and you are within 1 kilometer of latitude 55.611947 and longitude 12.978337, turn off your WeMo Insight switch named \"Living Room Switch\" and also turn off your LIFX lights."}
{"original_description": "Add your current location and time to a Google Drive spreadsheet by pressing the pusher on your Festina watch. (Make sure you enable \"Include location\" in the IFTTT trigger in the Festina app).", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  var formattedRow = FestinaWatches.pusherPressed.PressedAt + \"|||\" + FestinaWatches.pusherPressed.Latitude + \"|||\" + FestinaWatches.pusherPressed.Longitude + \"|||\" + FestinaWatches.pusherPressed.MapImageUrl;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Location Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Logs\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Push type was not double press.\");\n}", "intent": "When the pusher on your Festina watch is pressed with a double press, add a new row to your Google Sheets spreadsheet named \"Location Log\" in the folder path \"IFTTT/Logs\", with the formatted row containing the current date and time, latitude, longitude, and map image URL, using the format \"2023-03-09 14:30:00|||55.611947|||12.978337|||https://ifttt.apps-kronaby.com/map\"."}
{"original_description": "Toggle your Philip Hue lights on and off by pressing the pusher on your Festina watch.", "trigger_channel": "Festina Watches", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "festina_watches.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "FestinaWatches.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "FestinaWatches.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "FestinaWatches.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "FestinaWatches.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "FestinaWatches.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  Hue.toggleAllHue();\n}", "intent": "When the pusher on your Festina watch is pressed with a double press action at any time, toggle all Philips Hue lights."}
{"original_description": "Every time there is a new task assigned to you in the specified project on Asana, a Signal will be sent to your Das Keyboard.\n", "trigger_channel": "Asana", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asana.new_task_assigned_to_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace is the project in?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Project name\nText input", "description": "Text input", "details": {"Label": "Project name or URL:", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asana.newTaskAssignedToYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Project name\nThe name of the project the task is for.", "description": "The name of the project the task is for.", "details": {"Slug": "project_name", "Filter code": "Asana.newTaskAssignedToYou.ProjectName", "Type": "String", "Example": "Cool things to do with Asana!"}}, {"section": "Ingredients", "title": "Task name\nThe name of the task.", "description": "The name of the task.", "details": {"Slug": "task_name", "Filter code": "Asana.newTaskAssignedToYou.TaskName", "Type": "String", "Example": "Build the Asana Channel on IFTTT"}}, {"section": "Ingredients", "title": "Task notes\nThe notes associated with the task.", "description": "The notes associated with the task.", "details": {"Slug": "task_notes", "Filter code": "Asana.newTaskAssignedToYou.TaskNotes", "Type": "String", "Example": "Make it one of the best on IFTTT!"}}, {"section": "Ingredients", "title": "Due on\nThe date that the task is due.", "description": "The date that the task is due.", "details": {"Slug": "due_on", "Filter code": "Asana.newTaskAssignedToYou.DueOn", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Workspace\nThe name of the workspace.", "description": "The name of the workspace.", "details": {"Slug": "workspace", "Filter code": "Asana.newTaskAssignedToYou.Workspace", "Type": "String", "Example": "Team Asana"}}, {"section": "Ingredients", "title": "Tags\nThe tags associated with the task. Comma separated if more than one.", "description": "The tags associated with the task. Comma separated if more than one.", "details": {"Slug": "tags", "Filter code": "Asana.newTaskAssignedToYou.Tags", "Type": "String", "Example": "IFTTT, Integrations"}}, {"section": "Ingredients", "title": "Task url\nThe URL to the task on Asana.", "description": "The URL to the task on Asana.", "details": {"Slug": "task_url", "Filter code": "Asana.newTaskAssignedToYou.TaskURL", "Type": "Web URL", "Example": "asana.com/"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Asana.newTaskAssignedToYou.TaskName === \"Urgent Project Update\" \n    && Asana.newTaskAssignedToYou.ProjectName === \"Marketing Campaigns\" \n    && Asana.newTaskAssignedToYou.Workspace === \"Team Workspace\" \n    && new Date(Asana.newTaskAssignedToYou.DueOn) <= new Date(\"2023-03-15\")) {\n  Daskeyboardq.signals.setName(\"New Task Alert\");\n  Daskeyboardq.signals.setZone(\"Office Keyboard\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setEffect(\"Breathe\");\n  Daskeyboardq.signals.setMessage(\"Task due soon: URGENT\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met for sending signal.\");\n}", "intent": "When a new task named \"Urgent Project Update\" is assigned to me in the \"Marketing Campaigns\" project on Asana, located in the \"Team Workspace\" workspace, and due on or before 2023-03-15, send a Signal to my Das Keyboard device named \"Office Keyboard\", with the name \"New Task Alert\", zoning the key with color #FF0000 (red), displaying an effect of \"Breathe\", and including a message \"Task due soon: URGENT\"."}
{"original_description": "Toss out that noisy alarm clock and set your Nanoleaf Light Panels to Sunrise mode to wake up gently with a simulated sunrise. Choose the Sunrise scene that ships with your Light Panels when asked to specify a scene and device (or create your own!). Pro tip: works best if you wake up in the same room as your Light Panels =)", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_scene", "Filter code method": "Nanoleaf.turnOnScene.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "My scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "my_scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() === 7 && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Saturday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Sunday\") {\n  Nanoleaf.turnOnScene.setMyScenes(\"Sunrise\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"Not the scheduled time or day for turning on the Sunrise scene.\");\n}", "intent": "Turn on the Nanoleaf Light Panels to the Sunrise scene every weekday at 7:00 AM."}
{"original_description": "Every time the temperature drops below the value you provide, a Signal will be sent to your Das Keyboard 5Q.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Daskeyboardq.signals.setName(\"Cold Weather Alert\");\n  Daskeyboardq.signals.setZone(\"Function Keys\");\n  Daskeyboardq.signals.setColor(\"Red\");\n  Daskeyboardq.signals.setEffect(\"Breathing\");\n  Daskeyboardq.signals.setMessage(\"Temperature has dropped below 5°C\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met.\");\n}", "intent": "When the temperature in New York drops below 5°C, send a Signal to the Das Keyboard 5Q device named \"Office Keyboard\" with the name \"Cold Weather Alert\", zoning it to the function keys, coloring them red, and displaying an effect of breathing, accompanied by the message \"Temperature has dropped below 5°C\"."}
{"original_description": "Start your favorite coffee world program with your preferred settings using the Button widget. \n", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_start_world_program", "Filter code method": "HcCoffeeMachine.coffeeMakerStartWorldProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_start_world_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Helper text": "Please note that your coffee machine has to be connected and turned on (but not active) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Bean amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Strength", "Helper text": "Please note that not every value is supported by each program. For more information please check your user manual.", "Slug": "bean_amount", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fill quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Size", "Slug": "fill_quantity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  var hour = Meta.currentUserTime.hour();\n  if (hour >= 7 && hour < 10) {\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setHaId(\"YourCoffeeMachineID\");\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setProgram(\"Morning Delight\");\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setBeanAmount(\"Medium\");\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setFillQuantity(\"Large\");\n  } else {\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.skip(\"Outside of the specified time range (07:00-10:00).\");\n  }\n} else {\n  HcCoffeeMachine.coffeeMakerStartWorldProgram.skip(\"Button press location does not match the specified coordinates.\");\n}", "intent": "Start the \"Morning Delight\" program on your Home Connect Coffee Machine, with a strength of \"Medium\" and size of \"Large\", when you press the Button widget at a location with latitude 37.8267 and longitude -122.4230, and it's between 07:00 and 10:00."}
{"original_description": "A savings challenge that takes today's date, adds up the numbers, and saves the total in a Pot. For example, 24th May 2019 would be 24 + 5 + 19 = 48p. This will move the money into your Pot at 8am every day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var momentObject = Meta.currentUserTime;\n\nvar day = momentObject.date();\nvar month = momentObject.month() + 1;\nvar year = Number(momentObject.format(\"YYYY\"));\n\n// Calculate the sum of digits for each part of the date\nvar daySum = Array.from(String(day), Number).reduce((a, b) => a + b, 0);\nvar monthSum = Array.from(String(month), Number).reduce((a, b) => a + b, 0);\nvar yearSum = Array.from(String(year), Number).reduce((a, b) => a + b, 0);\n\n// Calculate the total sum\nvar totalSum = daySum + monthSum + yearSum;\n\n// Convert the total to pence (as a string)\nvar depositAmountString = (totalSum / 100).toFixed(2);\n\nMonzo.potDeposit.setAmount(depositAmountString);", "intent": "Every day at 8am, calculate the total of today's date by adding the day, month, and year (e.g., 24th May 2019 would be 2+4+5+2+0+1+9 = 23), then move this total as pence into my \"Savings\" Pot on Monzo.", "filter_code_old": "// if the date is 22/05/2019, we should deposit 46p (22 + 5 + 19)\n\nvar momentObject = Meta.currentUserTime\n\nvar date_of_month = momentObject.date()\nvar month = momentObject.month() + 1\nvar year = Number(momentObject.format(\"YY\"))\n\nvar depositAmount = ((date_of_month + month + year) / 100).toFixed(2)\nvar depositAmountString = depositAmount.toString()\n\nMonzo.potDeposit.setAmount(depositAmountString);\n\n"}
{"original_description": "Gradually increase the amount you're saving each day to a pot of your choice. On 1st January, you'll save 1p. On 2nd January, you'll save 2p. This goes right up to £3.65 (or £3.66 😁) on the last day of the year!\n\nFeel free to jump in part way through the year, and see how far you get!\n\nThe challenge resets automatically on January 1st every year.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var day_of_year = Meta.currentUserTime.format('DDD');\nvar amount = parseInt(day_of_year) / 100;\nMonzo.potDeposit.setAmount(amount.toFixed(2));\nMonzo.potDeposit.skip(\"Not saving to pot today\");\nif (DateAndTime.everyDayAt.CheckTime.getHours() === 8) {\n  Monzo.potDeposit.setPot(\"Savings\");\n} else {\n  Monzo.potDeposit.skip(\"Wrong time of day\");\n}", "intent": "Save an amount equal to the current day of the year in pence to my \"Savings\" pot on Monzo every day at 08:00, starting from 1p on January 1st and increasing by 1p each day, so that on December 31st, I save £3.65.", "filter_code_old": "var day_of_year = Meta.currentUserTime.format('DDD');\nvar amount = parseInt(day_of_year) / 100;\nMonzo.potDeposit.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "This applet will reward you 1p for every 10 metres you cycle or run, from a pot of your choice, using Strava.", "trigger_channel": "Strava", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "strava.new_activity_by_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "activity_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time the activity was completed.", "description": "Date and time the activity was completed.", "details": {"Slug": "created_at", "Filter code": "Strava.newActivityByYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Activity type\nThe type of activity completed.", "description": "The type of activity completed.", "details": {"Slug": "activity_type", "Filter code": "Strava.newActivityByYou.ActivityType", "Type": "String", "Example": "Ride"}}, {"section": "Ingredients", "title": "Name\nThe name of the activity.", "description": "The name of the activity.", "details": {"Slug": "name", "Filter code": "Strava.newActivityByYou.Name", "Type": "String", "Example": "Evening Ride"}}, {"section": "Ingredients", "title": "Distance meters\nDistance moved in meters.", "description": "Distance moved in meters.", "details": {"Slug": "distance", "Filter code": "Strava.newActivityByYou.DistanceMeters", "Type": "String", "Example": "4475.4"}}, {"section": "Ingredients", "title": "Elapsed time\nTotal duration of the activity.", "description": "Total duration of the activity.", "details": {"Slug": "elapsed_time", "Filter code": "Strava.newActivityByYou.ElapsedTime", "Type": "String", "Example": "22 minutes, 13 seconds"}}, {"section": "Ingredients", "title": "Elapsed time in seconds\nTotal duration of the activity in seconds.", "description": "Total duration of the activity in seconds.", "details": {"Slug": "elapsed_time_in_seconds", "Filter code": "Strava.newActivityByYou.ElapsedTimeInSeconds", "Type": "String", "Example": "1333"}}, {"section": "Ingredients", "title": "Link to activity\nThe URL to the activity on Strava.", "description": "The URL to the activity on Strava.", "details": {"Slug": "link_to_activity", "Filter code": "Strava.newActivityByYou.LinkToActivity", "Type": "Web URL", "Example": "http://www.strava.com/activities/144461028"}}, {"section": "Ingredients", "title": "Route map image url\nURL to a map image of the route.", "description": "URL to a map image of the route.", "details": {"Slug": "route_map_image_url", "Filter code": "Strava.newActivityByYou.RouteMapImageUrl", "Type": "Image URL", "Example": "https://maps.googleapis.com/maps/api/staticmap?size=400x400&path=weight:3|color:0xFC4C02FF|enc:{qreFj}bjVZQ"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_withdraw", "Filter code method": "Monzo.potWithdraw.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_withdraw\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potWithdraw.setAmount(string: amount)"}}], "filter_code": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar activityType = Strava.newActivityByYou.ActivityType;\nif (activityType === \"Ride\" && distance >= 10) {\n  var amount = (distance / 10) * 0.01; // 1p for every 10 meters\n  Monzo.potWithdraw.setPot(\"Savings\");\n  Monzo.potWithdraw.setAmount(amount.toFixed(2));\n} else {\n  Monzo.potWithdraw.skip(\"Activity type is not cycling or distance is less than 10 meters.\");\n}", "intent": "When a new cycling activity is logged on Strava with a distance of at least 10 meters, reward myself by withdrawing 1p from the \"Savings\" pot on Monzo.", "filter_code_old": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar amount = distance/1000;\nMonzo.potWithdraw.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "Save a set amount toward one of your Goals every time you reach your Fitbit step goal.", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-step-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Step goal\nYour daily step goal", "description": "Your daily step goal", "details": {"Slug": "StepGoal", "Filter code": "Fitbit.dailyStepGoal.StepGoal", "Type": "String", "Example": "10000"}}, {"section": "Ingredients", "title": "Steps\nNumber of steps you have taken", "description": "Number of steps you have taken", "details": {"Slug": "Steps", "Filter code": "Fitbit.dailyStepGoal.Steps", "Type": "String", "Example": "12546"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your step goal", "description": "Date you achieved your step goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyStepGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal"}, "action_details": [{"section": "Trigger fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Goal name\nName of the goal saved to.", "description": "Name of the goal saved to.", "details": {"Slug": "goal_name", "Filter code": "Qapital.saveTowardGoal.GoalName", "Type": "String", "Example": "Trip to Iceland"}}, {"section": "Ingredients", "title": "Amount\nAmount saved.", "description": "Amount saved.", "details": {"Slug": "amount", "Filter code": "Qapital.saveTowardGoal.Amount", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Save method\nMethod used to save.", "description": "Method used to save.", "details": {"Slug": "save_method", "Filter code": "Qapital.saveTowardGoal.SaveMethod", "Type": "String", "Example": "Round-up"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Qapital.saveTowardGoal.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Qapital.saveTowardGoal.setGoalName(\"Vacation Fund\");\n  Qapital.saveTowardGoal.setAmount(\"5\");\n  Qapital.saveTowardGoal.skip(false);\n}", "intent": "Save $5 toward my \"Vacation Fund\" goal in Qapital every time I reach my daily step goal of 10,000 steps on Fitbit."}
{"original_description": "Always hitting public transit delays or traffic? Customize this message and then keep this widget handy — when you press it, it'll tell the Slack channel you choose that you're hitting delays, but will be there soon. ", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setMessage(\"Running late due to traffic, will arrive soon\");\nSlack.postToChannel.setTitle(\"Traffic Alert\");\nSlack.postToChannel.setTitleUrl(\"https://maps.google.com/?ll=\" + DoButton.doButtonNewCommandCommon.Latitude + \",\" + DoButton.doButtonNewCommandCommon.Longitude + \"&z=21\");\nSlack.postToChannel.setChannel(\"#commuter-updates\");", "intent": "When the \"Commuter Alert\" button is pressed on the Do Button widget at a location like 37.8267, -122.4230, send a message to the #commuter-updates Slack channel saying \"Running late due to traffic, will arrive soon\" with a title \"Traffic Alert\" and a link to the current location map https://maps.google.com/?ll=37.78308,-122.417236667&z=21."}
{"original_description": "The WWF is world’s leading conservation organization, active in 100 countries. Their mission is to \"protect life on our planet — including our own.\" Read up on their insights and actions in Pocket at your leisure — this Applet will save their new stories to your queue.\n\n", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Pocket", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pocket.read_it_later", "Filter code method": "Pocket.readItLater.skip(string?: reason)", "Runtime method": "runAction(\"pocket.read_it_later\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setUrl(string: url)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setTags(string: tags)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle.includes(\"conservation\") && Feed.newFeedItem.EntryAuthor === \"WWF Staff\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"conservation, wildlife, WWF\");\n} else {\n  Pocket.readItLater.skip(\"Entry title does not contain 'conservation' or author is not 'WWF Staff'\");\n}", "intent": "When a new story is published by the WWF on their RSS feed at https://www.worldwildlife.org/feed, with an entry title containing the keyword \"conservation\" and an entry author named \"WWF Staff\", save the article to Pocket with the URL from the entry, tags set to \"conservation, wildlife, WWF\", so it can be read later."}
{"original_description": "This Applet will locate and copy over any new event added from an iOS Calendar to a Google Calendar you choose.", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEvent.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEvent.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEvent.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEvent.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEvent.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEvent.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEvent.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEvent.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEvent.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEvent.Notes", "Type": "String", "Example": "Let's get together and talk!"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.add_detailed_event", "Filter code method": "GoogleCalendar.addDetailedEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.add_detailed_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Start time", "Helper text": "Ex. 10AM, Next Monday at 3PM.", "Slug": "start_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setStart Time(string: start_time)"}}, {"section": "Action fields", "title": "End time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "End time", "Slug": "end_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setEnd Time(string: end_time)"}}, {"section": "Action fields", "title": "All day\nDropdown list", "description": "Dropdown list", "details": {"Label": "All day?", "Helper text": "No by default. All day events will only consider the date in the start time and end time fields.", "Slug": "all_day", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAll Day(string: all_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setDescription(string: description)"}}, {"section": "Action fields", "title": "Location\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Location", "Helper text": "Optional", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Attendees\nText input > Other", "description": "Text input > Other", "details": {"Label": "Attendees", "Helper text": "Optional comma separated list of attendee emails", "Slug": "attendees", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAttendees(string: attendees)"}}], "filter_code": "if (IosCalendar.newCalendarEvent.Title === \"Team Meeting\" \n    && IosCalendar.newCalendarEvent.CalendarName === \"Personal\" \n    && IosCalendar.newCalendarEvent.StartDate === \"February 12th, 2024 at 10:00AM\" \n    && IosCalendar.newCalendarEvent.EndDate === \"February 12th, 2024 at 11:30AM\" \n    && IosCalendar.newCalendarEvent.Invitees.includes(\"John\") \n    && IosCalendar.newCalendarEvent.Invitees.includes(\"Emily\")) {\n  GoogleCalendar.addDetailedEvent.setStart_time(\"10:00AM\");\n  GoogleCalendar.addDetailedEvent.setEnd_time(\"11:30AM\");\n  GoogleCalendar.addDetailedEvent.setTitle(\"Team Meeting\");\n  GoogleCalendar.addDetailedEvent.setAttendees(\"john@example.com, emily@example.com\");\n} else {\n  GoogleCalendar.addDetailedEvent.skip(\"Conditions not met for Team Meeting event.\");\n}", "intent": "When a new event titled \"Team Meeting\" is added to the \"Personal\" calendar on iOS Calendar, with a start date of February 12th, 2024 at 10:00AM and an end date of February 12th, 2024 at 11:30AM, and invitees including John and Emily, create a detailed event on Google Calendar in the \"Work\" calendar, setting the title to \"Team Meeting\", start time to 10:00AM, end time to 11:30AM, and attendees to john@example.com, emily@example.com."}
{"original_description": "This Applet will locate and copy over any new event added from the iOS Calendar you choose to the Google Calendar you choose. Stay in sync!", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEvent.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEvent.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEvent.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEvent.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEvent.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEvent.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEvent.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEvent.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEvent.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEvent.Notes", "Type": "String", "Example": "Let's get together and talk!"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.add_detailed_event", "Filter code method": "GoogleCalendar.addDetailedEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.add_detailed_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Start time", "Helper text": "Ex. 10AM, Next Monday at 3PM.", "Slug": "start_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setStart Time(string: start_time)"}}, {"section": "Action fields", "title": "End time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "End time", "Slug": "end_time", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setEnd Time(string: end_time)"}}, {"section": "Action fields", "title": "All day\nDropdown list", "description": "Dropdown list", "details": {"Label": "All day?", "Helper text": "No by default. All day events will only consider the date in the start time and end time fields.", "Slug": "all_day", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAll Day(string: all_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setDescription(string: description)"}}, {"section": "Action fields", "title": "Location\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Location", "Helper text": "Optional", "Slug": "location", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setLocation(string: location)"}}, {"section": "Action fields", "title": "Attendees\nText input > Other", "description": "Text input > Other", "details": {"Label": "Attendees", "Helper text": "Optional comma separated list of attendee emails", "Slug": "attendees", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleCalendar.addDetailedEvent.setAttendees(string: attendees)"}}], "filter_code": "if (IosCalendar.newCalendarEvent.CalendarName === \"Personal\") {\n  var title = IosCalendar.newCalendarEvent.Title;\n  var start_time = IosCalendar.newCalendarEvent.StartDate;\n  var end_time = IosCalendar.newCalendarEvent.EndDate;\n  var location = IosCalendar.newCalendarEvent.Location;\n  var description = IosCalendar.newCalendarEvent.Notes;\n  var attendees = IosCalendar.newCalendarEvent.Invitees;\n\n  GoogleCalendar.addDetailedEvent.setStart Time(start_time);\n  GoogleCalendar.addDetailedEvent.setEnd Time(end_time);\n  GoogleCalendar.addDetailedEvent.setTitle(title);\n  GoogleCalendar.addDetailedEvent.setDescription(description);\n  GoogleCalendar.addDetailedEvent.setLocation(location);\n  GoogleCalendar.addDetailedEvent.setAttendees(attendees);\n}", "intent": "When a new event is added to my Personal calendar on iOS Calendar, such as \"Coffee with Max\" at \"Machine Coffee & Deli\" starting at 10:30AM and ending at 11:00AM, with notes like \"Let's get together and talk!\", then add a detailed event to my Work calendar on Google Calendar with the same title, start time, end time, location, and description, and invite attendees like Eric, Jon, Max, and Zhe."}
{"original_description": "Hit your fitness goals and your financial goals at the same time! Specify the type of activity (run or ride) and the amount you'd like to save when you set up the Applet. ", "trigger_channel": "Strava", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "strava.new_activity_by_you"}, "trigger_details": [{"section": "Trigger fields", "title": "Activity type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Slug": "activity_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time the activity was completed.", "description": "Date and time the activity was completed.", "details": {"Slug": "created_at", "Filter code": "Strava.newActivityByYou.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Activity type\nThe type of activity completed.", "description": "The type of activity completed.", "details": {"Slug": "activity_type", "Filter code": "Strava.newActivityByYou.ActivityType", "Type": "String", "Example": "Ride"}}, {"section": "Ingredients", "title": "Name\nThe name of the activity.", "description": "The name of the activity.", "details": {"Slug": "name", "Filter code": "Strava.newActivityByYou.Name", "Type": "String", "Example": "Evening Ride"}}, {"section": "Ingredients", "title": "Distance meters\nDistance moved in meters.", "description": "Distance moved in meters.", "details": {"Slug": "distance", "Filter code": "Strava.newActivityByYou.DistanceMeters", "Type": "String", "Example": "4475.4"}}, {"section": "Ingredients", "title": "Elapsed time\nTotal duration of the activity.", "description": "Total duration of the activity.", "details": {"Slug": "elapsed_time", "Filter code": "Strava.newActivityByYou.ElapsedTime", "Type": "String", "Example": "22 minutes, 13 seconds"}}, {"section": "Ingredients", "title": "Elapsed time in seconds\nTotal duration of the activity in seconds.", "description": "Total duration of the activity in seconds.", "details": {"Slug": "elapsed_time_in_seconds", "Filter code": "Strava.newActivityByYou.ElapsedTimeInSeconds", "Type": "String", "Example": "1333"}}, {"section": "Ingredients", "title": "Link to activity\nThe URL to the activity on Strava.", "description": "The URL to the activity on Strava.", "details": {"Slug": "link_to_activity", "Filter code": "Strava.newActivityByYou.LinkToActivity", "Type": "Web URL", "Example": "http://www.strava.com/activities/144461028"}}, {"section": "Ingredients", "title": "Route map image url\nURL to a map image of the route.", "description": "URL to a map image of the route.", "details": {"Slug": "route_map_image_url", "Filter code": "Strava.newActivityByYou.RouteMapImageUrl", "Type": "Image URL", "Example": "https://maps.googleapis.com/maps/api/staticmap?size=400x400&path=weight:3|color:0xFC4C02FF|enc:{qreFj}bjVZQ"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal"}, "action_details": [{"section": "Trigger fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Goal name\nName of the goal saved to.", "description": "Name of the goal saved to.", "details": {"Slug": "goal_name", "Filter code": "Qapital.saveTowardGoal.GoalName", "Type": "String", "Example": "Trip to Iceland"}}, {"section": "Ingredients", "title": "Amount\nAmount saved.", "description": "Amount saved.", "details": {"Slug": "amount", "Filter code": "Qapital.saveTowardGoal.Amount", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Save method\nMethod used to save.", "description": "Method used to save.", "details": {"Slug": "save_method", "Filter code": "Qapital.saveTowardGoal.SaveMethod", "Type": "String", "Example": "Round-up"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Qapital.saveTowardGoal.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Strava.newActivityByYou.ElapsedTimeInSeconds >= 1800 && Strava.newActivityByYou.ActivityType === \"Ride\") {\n  Qapital.saveTowardGoal.setGoalName(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n}", "intent": "When I complete a 30-minute ride on Strava, save $5 toward my 'Summer Vacation' goal on Qapital."}
{"original_description": "/r/worldnews is for major news from around the world except US-internal news and US politics. Great for staying on top of breaking news!", "trigger_channel": "Reddit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "reddit.new_top_post_in_subreddit"}, "trigger_details": [{"section": "Trigger fields", "title": "Subreddit\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subreddit", "Helper text": "e.g. worldnews", "Slug": "subreddit", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Subreddit\nName of the subreddit where this item was posted.", "description": "Name of the subreddit where this item was posted.", "details": {"Slug": "Subreddit", "Filter code": "Reddit.newTopPostInSubreddit.Subreddit", "Type": "String", "Example": "ifttt"}}, {"section": "Ingredients", "title": "Title\nTitle of this post.", "description": "Title of this post.", "details": {"Slug": "Title", "Filter code": "Reddit.newTopPostInSubreddit.Title", "Type": "String", "Example": "Little Bobby Tables!"}}, {"section": "Ingredients", "title": "Image url\nURL to the post's image if one exists.", "description": "URL to the post's image if one exists.", "details": {"Slug": "ImageURL", "Filter code": "Reddit.newTopPostInSubreddit.ImageURL", "Type": "String", "Example": "http://imgs.xkcd.com/comics/exploits_of_a_mom.png"}}, {"section": "Ingredients", "title": "Content\nContent of this post, may be text or external link.", "description": "Content of this post, may be text or external link.", "details": {"Slug": "Content", "Filter code": "Reddit.newTopPostInSubreddit.Content", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Content html\nContent of this post in HTML.", "description": "Content of this post in HTML.", "details": {"Slug": "ContentHTML", "Filter code": "Reddit.newTopPostInSubreddit.ContentHTML", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Post url\nURL to this post on reddit.", "description": "URL to this post on reddit.", "details": {"Slug": "PostURL", "Filter code": "Reddit.newTopPostInSubreddit.PostURL", "Type": "String", "Example": "http://www.reddit.com/r/ProgrammerHumor/comments/16dazp/little_bobby_tables_xkcd/"}}, {"section": "Ingredients", "title": "Author\nUsername of this post's author.", "description": "Username of this post's author.", "details": {"Slug": "Author", "Filter code": "Reddit.newTopPostInSubreddit.Author", "Type": "String", "Example": "ltibbets"}}, {"section": "Ingredients", "title": "Posted at\nDate this post was posted.", "description": "Date this post was posted.", "details": {"Slug": "PostedAt", "Filter code": "Reddit.newTopPostInSubreddit.PostedAt", "Type": "String", "Example": "August 23, 2013 at 05:00PM"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Reddit.newTopPostInSubreddit.Subreddit === \"worldnews\") {\n  Instapaper.saveItem.setUrl(Reddit.newTopPostInSubreddit.PostURL);\n  Instapaper.saveItem.setTitle(Reddit.newTopPostInSubreddit.Title);\n  Instapaper.saveItem.setDescription(\"\");\n  // Note: The provided JSON does not include a method for setting the folder or tags.\n  // If such methods were available, they would be used as follows:\n  // Instapaper.saveItem.setFolder(\"News\");\n  // Instapaper.saveItem.setTags([\"World News\", \"Breaking News\"]);\n} else {\n  Instapaper.saveItem.skip(\"Post not from 'worldnews' subreddit.\");\n}", "intent": "When a new top post is made in the subreddit \"worldnews\" on Reddit, save the post's URL to Instapaper with the title set to the post's title and add it to the folder \"News\" with the tags \"World News\" and \"Breaking News\"."}
{"original_description": "Activates an Automate scene to close your shades on a hot day (exterior temperature threshold can be configured). ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 80 && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\") {\n  Automateshades.activateScene.setSceneID(\"Close Shades\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not below 80°F or it's not sunny.\");\n}", "intent": "Activate the 'Close Shades' scene on Automate Shades when the temperature in New York drops below 80°F (27°C) during sunny weather conditions."}
{"original_description": "When the current UV index raises above a specified threshold, activate an Automate Shades scene to close your shades.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_humidity_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Humidity\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Humidity (%)", "Slug": "humidity", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentHumidityRisesAbove.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentHumidityRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentHumidityRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentHumidityRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentHumidityRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentHumidityRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades.activate_scene", "Filter code method": "Automateshades.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"automateshades.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Sceneid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The scene to activate.", "Slug": "sceneID", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentHumidityRisesAbove.UVIndex > 8) {\n  Automateshades.activateScene.setSceneID(\"Close All Shades\");\n} else {\n  Automateshades.activateScene.skip(\"UV index is not above 8.\");\n}", "intent": "When the UV index rises above 8 at my home location, activate the \"Close All Shades\" scene on Automate Shades to close all the shades."}
{"original_description": "Activates an Automate Pulse room to close your shades on a hot day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Automate Shades V2", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automateshades_v2.activate_room", "Filter code method": "AutomateshadesV2.activateRoom.skip(string?: reason)", "Runtime method": "runAction(\"automateshades_v2.activate_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Roomid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "roomID", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Movement position\nText input > Other", "description": "Text input > Other", "details": {"Label": "What percentage?", "Helper text": "Number only (0-100, where 0 is closed and 100 is open).", "Slug": "movement_position", "Required": "true", "Can have default value": "true", "Filter code method": "AutomateshadesV2.activateRoom.setMovement Position(string: movement_position)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 75 && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\" && Meta.currentUserTime.hour() >= 11 && Meta.currentUserTime.hour() <= 15) {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"20\");\n  AutomateshadesV2.activateRoom.skip(\"Temperature is below threshold on a sunny day.\");\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Conditions not met.\");\n}", "intent": "When the temperature in New York drops below 75°F on a sunny day, activate the Living Room shades in Automate Pulse to close them at 80% during the hottest part of the day."}
{"original_description": "When you miss an incoming call from an important person on your Android phone blink your LIFX lights a chosen color, even if your lights are off.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call_from_number"}, "trigger_details": [{"section": "Trigger fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Include country code e.g. 12024561111", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCallFromNumber.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCallFromNumber.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCallFromNumber.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCallFromNumber.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCallFromNumber.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (AndroidPhone.receiveAPhoneCallFromNumber.ContactName === \"Jon Snow\" && AndroidPhone.receiveAPhoneCallFromNumber.DeviceName === \"Google Pixel 7\" && AndroidPhone.receiveAPhoneCallFromNumber.CallLength === \"0\") {\n  Lifx.blink.setSelector(\"all\");\n  Lifx.blink.setColor(\"red\");\n  Lifx.blink.setBrightness(\"maximum\");\n  Lifx.blink.setNumber_Of_Blinks(\"3\");\n  Lifx.blink.setBlink_If_Off(\"yes\");\n}", "intent": "When you miss an incoming call from Jon Snow on your Google Pixel 7, blink all your LIFX lights red at maximum brightness 3 times, even if they are off."}
{"original_description": "Find out how much time you spend in meetings and how it impacts your body", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event_from_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Helper text": "Searches an event's attributes, including title, location, notes, and invitees.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEventFromSearch.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEventFromSearch.Notes", "Type": "String", "Example": "Let's get together and talk!"}}, {"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEventFromSearch.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEventFromSearch.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEventFromSearch.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEventFromSearch.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEventFromSearch.URL", "Type": "String", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEventFromSearch.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEventFromSearch.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEventFromSearch.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_activity", "Filter code method": "Welltory.sendActivity.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Begin\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we start tracking it?", "Helper text": "Add an ingredient containing {at}, {starts}, or similar", "Slug": "begin", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setBegin(string: begin)"}}, {"section": "Action fields", "title": "End\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we stop tracking it?", "Helper text": "Add an ingredient containing {ends}, {at}, or similar", "Slug": "end", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setEnd(string: end)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setComment(string: comment)"}}], "filter_code": "if (IosCalendar.newCalendarEventFromSearch.Title.includes(\"team\") || IosCalendar.newCalendarEventFromSearch.Title.includes(\"project\")) {\n  if (IosCalendar.newCalendarEventFromSearch.Organizer === Meta.currentUserFullName) {\n    if (IosCalendar.newCalendarEventFromSearch.CalendarName === \"Personal\") {\n      var startTime = new Date(IosCalendar.newCalendarEventFromSearch.StartDate);\n      var endTime = new Date(IosCalendar.newCalendarEventFromSearch.EndDate);\n      if (startTime.getHours() >= 9 && startTime.getHours() < 17) {\n        if (endTime.getHours() >= 9 && endTime.getHours() < 17) {\n          Welltory.sendActivity.setDataSource(\"iOS Calendar\");\n          Welltory.sendActivity.setDataType(\"meeting\");\n          Welltory.sendActivity.setBegin(IosCalendar.newCalendarEventFromSearch.StartDate);\n          Welltory.sendActivity.setEnd(IosCalendar.newCalendarEventFromSearch.EndDate);\n          Welltory.sendActivity.setComment(\"Daily team meeting\");\n        } else {\n          Welltory.sendActivity.skip(\"Meeting ends outside of working hours.\");\n        }\n      } else {\n        Welltory.sendActivity.skip(\"Meeting starts outside of working hours.\");\n      }\n    } else {\n      Welltory.sendActivity.skip(\"Event is not on the Personal calendar.\");\n    }\n  } else {\n    Welltory.sendActivity.skip(\"You are not the organizer of this event.\");\n  }\n} else {\n  Welltory.sendActivity.skip(\"The keywords 'team' or 'project' were not found in the title.\");\n}", "intent": "Track the time spent in meetings with the keyword \"team\" or \"project\" in the title, and where I am the organizer, on my Personal calendar, between 09:00 and 17:00, and send this data to Welltory as a \"meeting\" activity type from the \"iOS Calendar\" service, starting when the event begins, ending when it ends, with a comment saying \"Daily team meeting\"."}
{"original_description": "If you live a calendar driven life, then this recipe will help you out by adding an event into your calendar whenever you have a Beemergency day for one of your Beeminder goals.", "trigger_channel": "Beeminder", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "beeminder.goal_red"}, "trigger_details": [{"section": "Trigger fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Goal", "Helper text": "Specific goal to Trigger on", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Deadline\nThe time that this goal is due", "description": "The time that this goal is due", "details": {"Slug": "deadline", "Filter code": "Beeminder.goalRed.Deadline", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Goal title\nThe descriptive title of the goal in danger", "description": "The descriptive title of the goal in danger", "details": {"Slug": "goal_title", "Filter code": "Beeminder.goalRed.GoalTitle", "Type": "String", "Example": "My Most Excellent Goal"}}, {"section": "Ingredients", "title": "Goal\nThe name of the goal that's in danger", "description": "The name of the goal that's in danger", "details": {"Slug": "goal", "Filter code": "Beeminder.goalRed.Goal", "Type": "String", "Example": "productivehours"}}, {"section": "Ingredients", "title": "Goal url\nThe URL to the goal page on Beeminder", "description": "The URL to the goal page on Beeminder", "details": {"Slug": "goal_url", "Filter code": "Beeminder.goalRed.GoalURL", "Type": "String", "Example": "https://www.beeminder.com/meta/running"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (Beeminder.goalRed.Goal === \"productivehours\" && Beeminder.goalRed.Deadline <= \"2023-03-15T14:30:00+00:00\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Beeminder alert for productivehours goal due soon\");\n  GoogleCalendar.quickAddEvent.run();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for Beeminder goal 'productivehours' alert.\");\n}", "intent": "When my Beeminder goal \"productivehours\" is in danger and the deadline is approaching, such as by 2023-03-15T14:30:00+00:00, add a new event to my Google Calendar named \"Personal\" with the quick add text \"Beeminder alert for productivehours goal due soon\"."}
{"original_description": "New tasks added to your chosen list in iOS Reminders are also added as tasks due today in Google tasks", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.new_reminder_added_to_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List name\nText input > Other", "description": "Text input > Other", "details": {"Label": "List name", "Slug": "list_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.newReminderAddedToList.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.newReminderAddedToList.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.newReminderAddedToList.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.newReminderAddedToList.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.newReminderAddedToList.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}], "action_channel": "Google Tasks", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_tasks.add_task_to_tasklist", "Filter code method": "GoogleTasks.addTaskToTasklist.skip(string?: reason)", "Runtime method": "runAction(\"google_tasks.add_task_to_tasklist\", {})"}, "action_details": [{"section": "Action fields", "title": "Tasklist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which task list?", "Helper text": "The task list to which the task should be added.", "Slug": "tasklist_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What is the title of the task?", "Slug": "task_title", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Title(string: task_title)"}}, {"section": "Action fields", "title": "Task notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What are the notes to include in the task?", "Helper text": "Notes describing the task", "Slug": "task_notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Notes(string: task_notes)"}}, {"section": "Action fields", "title": "Due date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Does the task have a due date?", "Helper text": "Field only sets the date. Ex. Next Tuesday, Today.", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setDue Date(string: due_date)"}}], "filter_code": "if (IosReminders.newReminderAddedToList.List === \"Shopping\") {\n  var taskTitle = \"Buy \" + IosReminders.newReminderAddedToList.Title;\n  if (IosReminders.newReminderAddedToList.Notes.includes(\"Get 1% for Rick\")) {\n    taskTitle += \" for Rick\";\n    var taskNotes = \"Remember to get 1% milk\";\n  } else {\n    taskNotes = IosReminders.newReminderAddedToList.Notes;\n  }\n  \n  GoogleTasks.addTaskToTasklist.setTaskTitle(taskTitle);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(taskNotes);\n  GoogleTasks.addTaskToTasklist.setDueDate(\"Today\");\n}", "intent": "When a new reminder is added to the \"Shopping\" list in iOS Reminders with a title like \"Pick up milk\" and notes such as \"Get 1% for Rick\", add a task titled \"Buy Milk for Rick\" with notes \"Remember to get 1% milk\" to the \"Personal\" task list in Google Tasks, due today."}
{"original_description": "When Google Calendar event \"vacation\" (or your custom name) starts, arm Blink", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"vacation\" && GoogleCalendar.eventFromSearchStarts.offset === \"-PT15M\" && GoogleCalendar.eventFromSearchStarts.calendar === \"primary\") {\n  Blink.networkArm.setNetwork(\"Home Security\");\n} else {\n  Blink.networkArm.skip(\"Conditions not met to arm the Blink system.\");\n}", "intent": "When a Google Calendar event titled \"vacation\" starts on my primary calendar, 15 minutes before the event begins, arm the Blink system named \"Home Security\"."}
{"original_description": "Whenever anyone unlocks your lock, the selected Hue lights will turn on.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  PhilipsHue.turnOnLights();\n} else {\n  PhilipsHue.turnOnLights.skip(\"Conditions not met\");\n}", "intent": "When the Front Door lock at my San Diego Beach House is unlocked by John Smith, turn on the Living Room Hue lights."}
{"original_description": "In a Telegram group with coworkers or family members? Allow anyone in the group to turn off the lights at the end of the work day or as they're leaving the house. Simply type '/ifttt lights off' in the group you specify to turn your Hue lights off.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_group_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "You can use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot to <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">connect new groups</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires when anyone sends a message with the command /ifttt and the key phrase to the group.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to the command with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newGroupTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Group title\nThe title of the group.", "description": "The title of the group.", "details": {"Slug": "group_title", "Filter code": "Telegram.newGroupTextFilter.GroupTitle", "Type": "String", "Example": "Bot News Group"}}, {"section": "Ingredients", "title": "Author name\nThe name of the author who triggered the Applet.", "description": "The name of the author who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newGroupTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nAuthor username, when available.", "description": "Author username, when available.", "details": {"Slug": "author_username", "Filter code": "Telegram.newGroupTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents a plain-text message contents. Does not include the 'Key phrase'.", "description": "Represents a plain-text message contents. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newGroupTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newGroupTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newGroupTextFilter.GroupTitle === \"#office-chat\" && \n    Telegram.newGroupTextFilter.Text.includes(\"/ifttt lights off\") && \n    hour >= 17 && hour < 19) {\n  Hue.turnOffAllHue.setLights(\"living room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Condition not met.\");\n}", "intent": "When anyone types '/ifttt lights off' in the #office-chat group on Telegram between 17:00 and 19:00, turn off all the living room lights."}
{"original_description": "This Applet will save all Longreads to your Instapaper. Good luck keeping up! 📃⏳\n\nUse Pocket? Try this Applet instead: https://ift.tt/2sMZLg8", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreads.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreads.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreads.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreads.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreads.EntryImageUrl", "Type": "String", "Example": "https://longreadsblog.files.wordpress.com/2018/06/26474-books-origjpg.jpg?w=320&amp;h=483"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreads.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "Instapaper.saveItem.setUrl(Longreads.anyNewPostOnLongreads.EntryUrl);\nInstapaper.saveItem.setDescription(\"Well here we are on, blah, blah...\");\nInstapaper.saveItem.setTitle(\"Launch Day!\");\n// Note: Folder and Tags are not directly supported in the provided Filter code methods.\n// The following lines are based on the assumption that such functionality could be added or is already available through other means not specified in the provided JSON structure.\n// Instapaper.saveItem.setFolder(\"My Favorite Articles\");\n// Instapaper.saveItem.setTags([\"Longreads\", \"Must Read\"]);", "intent": "Save the Longreads article titled \"Launch Day!\" with URL \"http://blog.ifttt.com/coming-soon\" by author \"Linden Tibbets\" to Instapaper with the description \"Well here we are on, blah, blah...\" and title \"New Article\", in the folder \"My Favorite Articles\" with tags \"Longreads\" and \"Must Read\"."}
{"original_description": "Let mother nature do the work. Whenever the sun rises, your Philips Hue bulbs will automatically turn off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempFahrenheit === \"72\" && Weather.sunRises.SunriseAt) {\n  Hue.turnOffAllHue.setLights(\"Living Room lights\");\n}", "intent": "When the sun rises at my location, which is set to New York City, and the current weather condition is Sunny with a temperature of 72 degrees Fahrenheit, turn off all Philips Hue bulbs in my Living Room lights."}
{"original_description": "Whenever the temperature drops below the value you provide, the current temperature will be displayed on your Glance Clock.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Glanceclock.notice.setText(\"It's getting cold! Current temperature is \" + Weather.currentTemperatureDropsBelow.TempCelsius + \"°C\");\n  Glanceclock.notice.setAnimation(\"red\");\n} else {\n  Glanceclock.notice.skip(\"Temperature not below 5°C or location not New York.\");\n}", "intent": "When the temperature drops below 5°C in New York, display \"It's getting cold! Current temperature is {{temp_celsius}}°C\" on my Glance Clock with a red animation."}
{"original_description": "Whenever the temperature rises above the value you provide, it will be displayed on your Glance Clock.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Glanceclock.notice.setText(\"Temperature: \" + Weather.currentTemperatureDropsBelow.TempCelsius + \"°C, Condition: Sunny\");\n  Glanceclock.notice.setImage(Weather.currentTemperatureDropsBelow.ConditionImageURL);\n}", "intent": "Display the temperature on my Glance Clock whenever it rises above 75 degrees Fahrenheit in New York, using the Celsius scale for the display and including a sunny condition image."}
{"original_description": " Enter the search terms that matter to you and get the latest news on those topics in a Wednesday morning digest. The Hill is weekly political paper that keeps Congress in the know — and can keep you in the know, too!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() !== \"Wednesday\" || Meta.currentUserTime.hour() !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Wednesday at 8:00 AM\");\n}\n\nvar feedUrl = \"https://thehill.com/rss/syndication\";\nvar keyword = \"Congress, Politics\";\n\nif (Feed.newFeedItemMatches.feed_url !== feedUrl || !Feed.newFeedItemMatches.EntryContent.includes(keyword)) {\n  EmailDigest.sendWeeklyEmail.skip(\"Does not match the required feed or keywords\");\n}\n\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"8:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"The Hill's Weekly Political Update\");\nEmailDigest.sendWeeklyEmail.setMessage(\n  \"<h2>\" + Feed.newFeedItemMatches.EntryTitle + \"</h2>\" +\n  \"<p>By \" + Feed.newFeedItemMatches.EntryAuthor + \"</p>\" +\n  \"<p>\" + Feed.newFeedItemMatches.EntryContent + \"</p>\" +\n  \"<img src='\" + Feed.newFeedItemMatches.EntryImageUrl + \"'/>\" +\n  \"<p>Read more at <a href='\" + Feed.newFeedItemMatches.EntryUrl + \"'>\" + Feed.newFeedItemMatches.EntryUrl + \"</a></p>\"\n);\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItemMatches.FeedUrl);", "intent": "Send a weekly email digest every Wednesday morning at 8:00 AM with the title \"The Hill's Weekly Political Update\" and a message containing the latest news on topics related to \"Congress\" and \"Politics\", retrieved from the RSS feed at \"https://thehill.com/rss/syndication\", including the entry title, entry URL, entry author, entry content, and entry image URL."}
{"original_description": "Have a fan, portable AC unit, or other cooling device hooked up to a Smart Life plug or outlet? Use this Applet to automatically turn it off whenever the temperature drops below a threshold. Pair this Applet with Applet HZCxKUhq (https://ifttt.com/applets/HZCxKUhq-turn-on-a-smart-life-device-if-the-temperature-rises-above-a-threshold) to also turn your device on when the temperature rises above a threshold. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Smart Life", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smartlife.turn_off", "Filter code method": "Smartlife.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"smartlife.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device/group?", "Helper text": "Not all Smart Life devices are supported by this service. Refer to the device manufacturer for further information.", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 60) {\n  Smartlife.turnOff.skip(\"Temperature dropped below 60°F.\");\n}", "intent": "Turn off my portable AC unit, which is connected to a Smart Life plug, whenever the temperature in New York drops below 60°F."}
{"original_description": "Use the Button widget to quickly and easily change the comfort profile of your ecobee.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.climate_next_transition", "Filter code method": "Ecobee.climateNextTransition.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.climate_next_transition\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the climate hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Comfort profile\nDropdown list", "description": "Dropdown list", "details": {"Label": "Comfort Profile", "Helper text": "Select which comfort profile to use for the hold.", "Slug": "comfort_profile", "Required": "true", "Can have default value": "false"}}], "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 19) {\n  Ecobee.climateNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.climateNextTransition.setComfortProfile(\"Home\");\n} else {\n  Ecobee.climateNextTransition.skip(\"Conditions not met.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the press occurs between 07:00 and 19:00, change the comfort profile of the \"Living Room Thermostat\" ecobee to \"Home\" to quickly and easily adjust the temperature for comfort."}
{"original_description": "All you have to do is \"Favorite\" an article in Pocket and this Applet will add it to your Buffer queue with a headline and image. Share great content easily! ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_favorite_item_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newFavoriteItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newFavoriteItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newFavoriteItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newFavoriteItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newFavoriteItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newFavoriteItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer_with_photo", "Filter code method": "Buffer.addToBufferWithPhoto.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer_with_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Description", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  var title = Pocket.newFavoriteItemPocket.Title;\n  var tags = Pocket.newFavoriteItemPocket.Tags;\n  var excerpt = Pocket.newFavoriteItemPocket.Excerpt;\n  var imageUrl = Pocket.newFavoriteItemPocket.ImageUrl;\n\n  if (title.startsWith(\"Morning News\") && tags.includes(\"news\")) {\n    Buffer.addToBufferWithPhoto.setPhotoUrl(imageUrl);\n    Buffer.addToBufferWithPhoto.setMessage(excerpt);\n  } else {\n    Buffer.addToBufferWithPhoto.skip(\"Article does not match the criteria.\");\n  }\n} else {\n  Buffer.addToBufferWithPhoto.skip(\"Outside of active hours (8 AM to 5 PM).\");\n}", "intent": "When a new article is favorited in Pocket with the title starting with \"Morning News\" and containing the tag \"news\", add it to Buffer with the photo from the item's image URL and a message including the item's excerpt, between 8:00 AM and 5:00 PM."}
{"original_description": "Whenever my Android Phone connects to the Wifi in my home, the QNAP Device will start playing some playlist from Music Station \n\n(This applet requires IFTTT Agent v1.1 or above, Music Station v5.0.4 or above and Media Streaming addon v430.1.0.3 or above to be installed on your QNAP device)", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.play_music_on_qnap_device", "Filter code method": "Qnap.playMusicOnQnapDevice.skip(string?: reason)", "Runtime method": "runAction(\"qnap.play_music_on_qnap_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Option playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Playlist", "Helper text": "Select the playlist you want to play", "Slug": "option_playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Audio interface\nDropdown list", "description": "Dropdown list", "details": {"Label": "Audio interface", "Helper text": "The audio interface for Music Station", "Slug": "audio_interface", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.playMusicOnQnapDevice.setAudio Interface(string: audio_interface)"}}], "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && \n    AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Qnap.playMusicOnQnapDevice.setOptionPlaylist(\"FavoriteTracks\");\n  Qnap.playMusicOnQnapDevice.setAudioInterface(\"default\");\n} else {\n  Qnap.playMusicOnQnapDevice.skip(\"Conditions not met.\");\n}", "intent": "When my Google Pixel 7 connects to the Wifi network with SSID \"HomeNetwork\" at any time, play the \"FavoriteTracks\" playlist on the QNAP device using the default audio interface."}
{"original_description": "Prepare your favorite coffee drink with milk using the Button widget. Choose between Americano, Caffe Latte, Cappuccino, Espresso Macchiato, Flat White and Latte Macchiato together with your preferred coffee settings.\n", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_start_milk_program", "Filter code method": "HcCoffeeMachine.coffeeMakerStartMilkProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_start_milk_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Helper text": "Please note that your coffee machine has to be connected and turned on (but not active) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fill quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Size", "Slug": "fill_quantity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.setHaId(\"your_ha_id\"); // Replace \"your_ha_id\" with the actual Home Connect Coffee Machine ID\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.setProgram(\"Cappuccino\");\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.setFillQuantity(\"medium\");\n} else {\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.skip(\"Button not pressed at the specified location.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, start the Cappuccino program on my Home Connect Coffee Machine with a fill quantity of medium size."}
{"original_description": "If the outdoor temperature drops below 55°F, then set your Wiser Air to heat mode.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Wiser Air", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiser_air.set_thermostats_system_mode", "Filter code method": "WiserAir.setThermostatsSystemMode.skip(string?: reason)", "Runtime method": "runAction(\"wiser_air.set_thermostats_system_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "WiserAir.setThermostatsSystemMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 55) {\n  WiserAir.setThermostatsSystemMode.setMode(\"heat\");\n}", "intent": "If the outdoor temperature in New York drops below 55°F, then set your Living Room Wiser Air to heat mode."}
{"original_description": "Turn on light switch at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_on", "Filter code method": "Ecobee.turnSwitchOn.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  Ecobee.turnSwitchOn.setName(\"Living Room Light\");\n} else {\n  Ecobee.turnSwitchOn.skip(\"Conditions not met to turn on the Living Room Light switch.\");\n}", "intent": "Turn on the Living Room Light switch at sunset when the outside temperature is 72 degrees Fahrenheit and the condition is Sunny."}
{"original_description": "Just pop in the company name you'd like to track, and articles in TC that mention it will be sent straight to your inbox. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItemMatches.EntryContent.includes(\"Apple\") || Feed.newFeedItemMatches.EntryTitle.includes(\"Apple\")) {\n  Email.sendMeEmail.setSubject(\"New Article from TechCrunch\");\n  var body = \"Entry Title: \" + Feed.newFeedItemMatches.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItemMatches.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItemMatches.EntryContent;\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"Article does not mention Apple.\");\n}", "intent": "Send an email to my inbox with the subject \"New Article from TechCrunch\" and the body containing the entry title, entry URL, and entry content whenever a new article is published in the TechCrunch RSS feed that mentions the company name \"Apple\"."}
{"original_description": "Every time a new file is saved in the specified Dropbox folder, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_text_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newTextFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/cool_story.txt"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newTextFileInFolder.Filename", "Type": "String", "Example": "cool_story.txt"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newTextFileInFolder.FilenameNoExt", "Type": "String", "Example": "cool_story"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newTextFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (Dropbox.newTextFileInFolder.path === \"/Office/Meetings\" && Dropbox.newTextFileInFolder.Filename === \"meeting_notes.txt\") {\n    Daskeyboardq.signals.setName(\"New Meeting Notes\");\n    Daskeyboardq.signals.setZone(\"Key 1\");\n    Daskeyboardq.signals.setColor(\"Red\");\n    Daskeyboardq.signals.setMessage(\"Check meeting notes\");\n    Daskeyboardq.signals.setEffect(\"Blink\");\n    Daskeyboardq.signals.setDevice(\"Conference Room Keyboard\");\n    Daskeyboardq.signals.setMessage(Dropbox.newTextFileInFolder.FileUrl);\n  } else {\n    Daskeyboardq.signals.skip(\"Filename or path does not match.\");\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Outside of office hours (8 AM to 6 PM).\");\n}", "intent": "When a new file named \"meeting_notes.txt\" is saved in the Dropbox folder \"/Office/Meetings\" after 08:00 and before 18:00, send a Signal to the Das Keyboard device \"Conference Room Keyboard\" with the name \"New Meeting Notes\", zone set to \"Key 1\", color set to \"Red\", message \"Check meeting notes\", effect \"Blink\", and the file's public URL as \"https://www.dropbox.com/s/qp3cqdjqachyr2x/meeting_notes.txt\"."}
{"original_description": "When the sun sets, your WeMo switch will turn on. A great way to automatically control your lights.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WeMo Smart Plug", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_switch.attribute_socketOnOffDiscrete", "Filter code method": "WemoSwitch.attributeSocketOnOffDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_switch.attribute_socketOnOffDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius < 18) {\n  WemoSwitch.attributeSocketOnOffDiscrete.setMacaddress(\"Living Room Lamp\");\n} else {\n  WemoSwitch.attributeSocketOnOffDiscrete.skip(\"Conditions not met to turn on the switch.\");\n}", "intent": "When the sunset at New York occurs and the temperature is below 18 degrees Celsius, turn on my WeMo Smart Plug switch named \"Living Room Lamp\"."}
{"original_description": "Whenever you add a file in your specified Dropbox folder, this applet will automatically download that file to your QNAP Device", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_text_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newTextFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/cool_story.txt"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newTextFileInFolder.Filename", "Type": "String", "Example": "cool_story.txt"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newTextFileInFolder.FilenameNoExt", "Type": "String", "Example": "cool_story"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newTextFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (Dropbox.newTextFileInFolder.Filename === \"example_document.txt\" && Dropbox.newTextFileInFolder.path === \"/Documents/Work\") {\n    Qnap.downloadFileFromUrl.setFileUrl(Dropbox.newTextFileInFolder.FileUrl);\n    Qnap.downloadFileFromUrl.setFileName(\"example_document\");\n    Qnap.downloadFileFromUrl.setFolderPath(\"office/documents\");\n    Qnap.downloadFileFromUrl.setOptionSharedFolder(\"Shared/Downloads\");\n  } else {\n    Qnap.downloadFileFromUrl.skip(\"Filename or path does not match.\");\n  }\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Outside of active hours (8 AM to 6 PM).\");\n}", "intent": "When a new file named \"example_document.txt\" is added to the \"/Documents/Work\" subfolder in Dropbox after 08:00 and before 18:00, download the file from its public URL https://www.dropbox.com/s/qp3cqdjqachyr2x/example_document.txt to the QNAP device in the shared folder \"Shared/Downloads\", saving it with the filename \"example_document\" in the subfolder path \"office/documents\"."}
{"original_description": "Whenever you upload a video on Instagram, this applet will automatically download that video to the QNAP Device", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"newvideo\") && Instagram.anyNewVideoByYouInstagram.VideoSourceURL.startsWith(\"http://distilleryimage7.s3.amazonaws.com/\")) {\n  var createdAt = Instagram.anyNewVideoByYouInstagram.CreatedAt;\n  var dateParts = createdAt.split(\" \");\n  var month = dateParts[0];\n  var day = dateParts[1].replace(\",\", \"\");\n  var year = dateParts[2];\n  var timeParts = dateParts[3].split(\":\");\n  var hour = timeParts[0];\n  var minute = timeParts[1];\n  var seconds = \"00\";\n  var formattedDate = year + getMonthNumber(month) + padZero(day) + \"_\" + padZero(hour) + padZero(minute) + seconds;\n  Qnap.downloadFileFromUrl.setFileUrl(Instagram.anyNewVideoByYouInstagram.VideoSourceURL);\n  Qnap.downloadFileFromUrl.setFileName(\"instagram_video_\" + formattedDate + \".mp4\");\n  Qnap.downloadFileFromUrl.setFolderPath(\"videos/instagram/downloads\");\n  Qnap.downloadFileFromUrl.setOptionSharedFolder(\"MyInstagramVideos\");\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Does not match the conditions.\");\n}\n\nfunction getMonthNumber(month) {\n  var monthNumbers = {\n    \"January\": \"01\",\n    \"February\": \"02\",\n    \"March\": \"03\",\n    \"April\": \"04\",\n    \"May\": \"05\",\n    \"June\": \"06\",\n    \"July\": \"07\",\n    \"August\": \"08\",\n    \"September\": \"09\",\n    \"October\": \"10\",\n    \"November\": \"11\",\n    \"December\": \"12\"\n  };\n  return monthNumbers[month];\n}\n\nfunction padZero(value) {\n  if (value < 10) {\n    return \"0\" + value;\n  } else {\n    return value.toString();\n  }\n}", "intent": "When a new video is uploaded to Instagram with a caption containing the keyword \"newvideo\" and the video source URL starts with \"http://distilleryimage7.s3.amazonaws.com/\", automatically download the video file from the provided VideoSourceURL to the QNAP device, saving it in the shared folder named \"MyInstagramVideos\" with the filename set to \"instagram_video_<CreatedAt>.mp4\", where <CreatedAt> is the date and time the video was taken, formatted as YYYYMMDD_HHMMSS, and store it in the subfolder path \"videos/instagram/downloads\"."}
{"original_description": "This Applet will bundle up the week's Longreads posts and send you a digest of them every Saturday at 7am. (The digest includes the full posts. Only want links? Try this Applet instead: https://ift.tt/2yAD0Pi)", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreads.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreads.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreads.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreads.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreads.EntryImageUrl", "Type": "String", "Example": "https://longreadsblog.files.wordpress.com/2018/06/26474-books-origjpg.jpg?w=320&amp;h=483"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreads.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 6) { // 6 represents Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Saturday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nif (hour !== 7) { // 7 represents 7:00 AM\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 7:00 AM yet.\");\n}\nvar title = \"This Week's Longreads\";\nvar message = \"\";\nvar entries = [\n  {\"title\": Longreads.anyNewPostOnLongreads.EntryTitle, \n   \"author\": Longreads.anyNewPostOnLongreads.EntryAuthor, \n   \"content\": Longreads.anyNewPostOnLongreads.EntryContent, \n   \"image\": Longreads.anyNewPostOnLongreads.EntryImageUrl}\n];\nfor (var i = 0; i < entries.length; i++) {\n  message += \"<h2>\" + entries[i].title + \"</h2>\";\n  message += \"<p>By \" + entries[i].author + \"</p>\";\n  message += \"<img src='\" + entries[i].image + \"' />\";\n  message += \"<div>\" + entries[i].content + \"</div>\";\n}\nEmailDigest.sendWeeklyEmail.setTitle(title);\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"7:00 AM\");", "intent": "Send a weekly email digest every Saturday at 7:00 AM with the title \"This Week's Longreads\" and a message containing the full content of all new posts from Longreads, including their titles, authors, and images, to subscribers who want to stay updated on the latest articles."}
{"original_description": "When the sun sets, your eWeLink 4 Channels Switch will turn on or off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches3_action", "Filter code method": "Ewelink.switches3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Switch?", "Slug": "switches3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempFahrenheit === \"72\") {\n  Ewelink.switches3Action.setSwitches3Query(\"eWeLink 4 Channels Switch\");\n  Ewelink.switches3Action.setSwitches3OutletQuery(\"Channel 1\");\n  Ewelink.switches3Action.setOnoffActQuery(\"Turn on\");\n} else {\n  Ewelink.switches3Action.skip(\"Conditions not met to turn on the switch.\");\n}", "intent": "When the sunset at New York occurs and the current temperature is 72 degrees Fahrenheit, turn on channel 1 of your eWeLink 4 Channels Switch."}
{"original_description": "Every new Instagram video you post will be automatically added to your Buffer Queue!", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 10 && hour <= 17) {\n  if (Instagram.anyNewVideoByYouInstagram.Caption === \"Summer Vibes\") {\n    var message = \"New video alert: check out our latest post at \" + Instagram.anyNewVideoByYouInstagram.URL;\n    Buffer.addToBuffer.setMessage(message);\n  } else {\n    Buffer.addToBuffer.skip(\"Caption does not match 'Summer Vibes'.\");\n  }\n} else {\n  Buffer.addToBuffer.skip(\"Outside of active hours (10 AM to 5 PM).\");\n}", "intent": "When you post a new video on Instagram with a caption like \"Summer Vibes\" and it's between 10:00 AM and 5:00 PM, automatically add the video to your Buffer Queue as an update with the message \"New video alert: check out our latest post at http://instagr.am/p/CTGBw/\"."}
{"original_description": "Create your own email newsletter from any RSS Feed URL you paste in the field below. Enter a keyword too and this Applet will send you an email for every new entry that matches.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItemMatches.feed_url === \"http://blog.ifttt.com/\" && Feed.newFeedItemMatches.EntryContent.includes(\"IFTTT\")) {\n  Email.sendMeEmail.setSubject(\"New Blog Post\");\n  var body = \"Entry Title: \" + Feed.newFeedItemMatches.EntryTitle + \"<br><br>\" + Feed.newFeedItemMatches.EntryContent + \"<br><br>Entry Image URL: \" + Feed.newFeedItemMatches.EntryImageUrl;\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"Does not match the criteria.\");\n}", "intent": "Send me an email with the subject \"New Blog Post\" and the body containing the entry title, entry content, and entry image URL whenever a new entry is published in the RSS feed located at http://blog.ifttt.com/ that matches the keyword \"IFTTT\"."}
{"original_description": "Hey Chicago: this Applet will send you a notification from the IFTTT app when there's an alert during your morning commute (7-9am on weekdays).", "trigger_channel": "Chicago Transit Authority", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "cta.new_purple_line_alert"}, "trigger_details": [{"section": "Ingredients", "title": "Alert title\nThe alert's title.", "description": "The alert's title.", "details": {"Slug": "EntryTitle", "Filter code": "Cta.newPurpleLineAlert.AlertTitle", "Type": "String", "Example": "Elevator at Cumberland Temporarily Out-of-Service (Elevator Status)"}}, {"section": "Ingredients", "title": "Alert url\nThe alert's URL.", "description": "The alert's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Cta.newPurpleLineAlert.AlertUrl", "Type": "String", "Example": "http://ift.tt/2q1oEoI"}}, {"section": "Ingredients", "title": "Alert content\nThe alert's content.", "description": "The alert's content.", "details": {"Slug": "EntryContent", "Filter code": "Cta.newPurpleLineAlert.AlertContent", "Type": "String", "Example": "(Tue, May 9 2017 5:43 PM to TBD) The mezzanine-to-platform elevator at Cumberland (Blue Line) is temporarily out-of-service."}}, {"section": "Ingredients", "title": "Alert published\nDate alert was created.", "description": "Date alert was created.", "details": {"Slug": "EntryPublished", "Filter code": "Cta.newPurpleLineAlert.AlertPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var Day = Meta.currentUserTime.day()\nvar Hour = Meta.currentUserTime.hour()\nvar AlertTitle = Cta.newPurpleLineAlert.AlertTitle\n\nif (Day == 6 || Day == 7) {\n  IfNotifications.sendNotification.skip(\"Not a weekday\")\n}\n\nif (Hour < 7 || Hour > 9) {\n  IfNotifications.sendNotification.skip(\"Not commuting hours\")\n}\n\nIfNotifications.sendNotification.setMessage(\"Chicago Transit Alert: \" + AlertTitle)", "intent": "Send a notification to the user's IFTTT app with the message \"Chicago Transit Alert: Elevator at Cumberland Temporarily Out-of-Service (Elevator Status)\" when there's an alert from the Chicago Transit Authority during their morning commute, which is between 7:00 AM and 9:00 AM on weekdays.", "filter_code_old": "var Day = Meta.currentUserTime.day()\nvar Hour = Meta.currentUserTime.hour()\n\nif (Day == 6 || Day ==7) {\n  IfNotifications.sendNotification.skip(\"Not a weekday\")\n}\n\nif (Hour < 7 || Hour > 9) {\n  IfNotifications.sendNotification.skip(\"Not commuting hours\")\n}\n\n"}
{"original_description": "This Applet will bundle up the week's Longreads posts and send you a digest of links to them every Saturday at 7am.", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreads.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreads.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreads.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreads.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreads.EntryImageUrl", "Type": "String", "Example": "https://longreadsblog.files.wordpress.com/2018/06/26474-books-origjpg.jpg?w=320&amp;h=483"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreads.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 6) { // 6 represents Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Saturday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nif (hour !== 7) { // 7 represents 7:00 AM\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 7:00 AM yet.\");\n}\nvar title = \"This Week's Longreads\";\nvar message = \"\";\nvar entries = []; // Assuming this is where new Longreads posts are stored\nfor (var i = 0; i < entries.length; i++) {\n  var entryTitle = Longreads.anyNewPostOnLongreads.EntryTitle;\n  var entryUrl = Longreads.anyNewPostOnLongreads.EntryUrl;\n  var entryAuthor = Longreads.anyNewPostOnLongreads.EntryAuthor;\n  message += \"<p><a href='\" + entryUrl + \"'>\" + entryTitle + \"</a> by \" + entryAuthor + \"</p>\";\n}\nEmailDigest.sendWeeklyEmail.setTitle(title);\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"7:00 AM\");", "intent": "Send a weekly email digest every Saturday at 7:00 AM with the title \"This Week's Longreads\" and a message containing links to all new Longreads posts from the past week, including their entry titles, entry URLs, and entry authors."}
{"original_description": "When a new subscriber joins your Twitch channel, your Kasa light bulb will change color. Color, brightness, and transition time is fully customizable by the user.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_follower_on_your_channel"}, "trigger_details": [{"section": "Ingredients", "title": "Followed at\nDate and time the user followed your Channel.", "description": "Date and time the user followed your Channel.", "details": {"Slug": "created_at", "Filter code": "Twitch.newFollowerOnYourChannel.FollowedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Follower name\nThe name of the user who followed your channel.", "description": "The name of the user who followed your channel.", "details": {"Slug": "follower_name", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Follower bio\nThe bio of the user that followed you.", "description": "The bio of the user that followed you.", "details": {"Slug": "follower_bio", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerBio", "Type": "String", "Example": "A gaming fanatic from Boston."}}, {"section": "Ingredients", "title": "Follower url\nA url to the follower's profile on Twitch.", "description": "A url to the follower's profile on Twitch.", "details": {"Slug": "follower_url", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Follower count\nThe number of followers of your channel.", "description": "The number of followers of your channel.", "details": {"Slug": "follower_count", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerCount", "Type": "String", "Example": "215780"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "Kasa.changeColorTemp.setKelvin(\"2700\");\nKasa.changeColorTemp.setTransitionDuration(\"2000\");", "intent": "When a new subscriber joins your Twitch channel, change the color of your Kasa light bulb to a warm white at 2700K with a transition duration of 2 seconds."}
{"original_description": "This applet will turn on your 1-channel switch/plug at sunset", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches3_action", "Filter code method": "Ewelink.switches3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Switch?", "Slug": "switches3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  if (new Date() >= new Date(Weather.sunSets.SunsetAt)) {\n    Ewelink.switches3Action.setSwitches3Query(\"My 3-Channel Switch\");\n    Ewelink.switches3Action.setSwitches3OutletQuery(\"Channel 1\");\n    Ewelink.switches3Action.setOnoffActQuery(\"Turn on\");\n  } else {\n    Ewelink.switches3Action.skip(\"Not sunset yet or conditions not met.\");\n  }\n}", "intent": "Turn on the living room lamp, which is connected to channel 1 of my 3-channel switch, at sunset today when the temperature is 72 degrees Fahrenheit and the condition is sunny."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to green if the price of the stock you selected rises by more than a certain percentage compared to the last closing price. (Only for WiZ Colors lights)", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_rise_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage increase", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageRiseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageRiseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageRiseStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageRiseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageRiseStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageRiseStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Finance.percentageRiseStocks.StockName === \"Google Inc.\" && Finance.percentageRiseStocks.StockTicker === \"GOOG\" && parseFloat(Finance.percentageRiseStocks.PercentageChange) > 10) {\n  Wiz.turnOn.setMode(\"green\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}", "intent": "When the stock price of Google Inc. (GOOG) rises by more than 10% compared to its last closing price, turn on the living room WiZ Colors lights in green color at 80% brightness."}
{"original_description": "When a Twitch stream for a channel you follow goes live, your Kasa light bulb will change color. Color, brightness, and transition time is fully customizable by the user.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"Ninja\") {\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n  Kasa.changeColorTemp.skip();\n} else {\n  Kasa.changeColorTemp.skip(\"Stream is not from Ninja.\");\n}", "intent": "When a new Twitch stream from \"Ninja\" goes live, change the color of my \"Living Room Lamp\" to a warm white (2700K) with a transition duration of 2 seconds."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to red whenever the price of the stock you have selected falls by more than a certain percentage compared to the previous closing price. (Only for WiZ Colors lights)", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_rise_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage increase", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageRiseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageRiseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageRiseStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageRiseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageRiseStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageRiseStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Finance.percentageRiseStocks.StockName === \"Google Inc.\" && Finance.percentageRiseStocks.StockTicker === \"GOOG\" && parseFloat(Finance.percentageRiseStocks.PercentageChange) < -10) {\n  Wiz.turnOn.setMode(\"red\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Condition not met.\");\n}", "intent": "When the stock price of Google Inc. (GOOG) falls by more than 10% compared to the previous closing price, turn on the living room WiZ Colors light in red mode at 50% brightness."}
{"original_description": "This will change the WiZ light(s) of your choice to red whenever the CO₂ level measured by your Netatmo Weather Station rises above a certain point. We suggest 1,000ppm as default - you can change it to fit your needs. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.noise-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target noise level", "Helper text": "In decibels (dB)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured noise level\nThe measured noise level in decibels", "description": "The measured noise level in decibels", "details": {"Slug": "MeasuredNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.MeasuredNoiseLevel", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Target noise level\nThe target noise level in decibels", "description": "The target noise level in decibels", "details": {"Slug": "TargetNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.TargetNoiseLevel", "Type": "String", "Example": "53"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.noiseRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the noise", "description": "This is the name of the Netamo device where you are reading the noise", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.noiseRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Netatmo.co2LevelRisesAbove.MeasuredCO2Level > 1000 && Netatmo.co2LevelRisesAbove.DeviceName === \"My Home - Indoor station\") {\n  Wiz.turnOn.setMode(\"red\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"CO₂ level is below 1000ppm or device name does not match.\");\n}", "intent": "When the CO₂ level measured by the Netatmo Weather Station at \"My Home - Indoor station\" rises above 1000ppm, change the WiZ light in the \"Living Room\" to red with a brightness of 50%."}
{"original_description": "Wake up with the sun by having your WeMo dimmer turn on at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wemo Dimmer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_dimmer.attribute_dimmerOnDiscrete", "Filter code method": "WemoDimmer.attributeDimmerOnDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_dimmer.attribute_dimmerOnDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Dimmer?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempFahrenheit > 60 && Weather.sunRises.Condition === \"Sunny\") {\n  WemoDimmer.attributeDimmerOnDiscrete.setMacaddress(\"living_room_dimmer\");\n} else {\n  WemoDimmer.attributeDimmerOnDiscrete.skip(\"Temperature is not above 60°F or weather condition is not sunny.\");\n}", "intent": "Turn on the WeMo dimmer located in the living room at sunrise when the outside temperature is above 60°F and the weather condition is sunny."}
{"original_description": "At sunrise of your location, turn on/off 1-channel switch or plug. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches3_action", "Filter code method": "Ewelink.switches3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Switch?", "Slug": "switches3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Location === \"New York\") {\n  Ewelink.switches3Action.setSwitches3Query(\"Living Room Switch\");\n  Ewelink.switches3Action.setSwitches3OutletQuery(1);\n  Ewelink.switches3Action.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.switches3Action.skip(\"Sunrise not in New York\");\n}", "intent": "At sunrise in New York, turn on channel 1 of the Living Room Switch."}
{"original_description": "Use with an abode light switch to turn outside lights off after each day's sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.turn_on_switch", "Filter code method": "Abode.turnOnSwitch.skip(string?: reason)", "Runtime method": "runAction(\"abode.turn_on_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Select switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Slug": "select_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "Abode.turnOnSwitch.skip(\"Outside lights are turned off at sunrise.\");", "intent": "Turn off the outside lights connected to the abode light switch at sunrise, which is at 04:17:06+05:00 today, when the temperature in New York is expected to be around 72 degrees Fahrenheit and the weather condition is sunny."}
{"original_description": "Go to bed without having to thinking about turning off the hood light. Just define a time every evening when the light shall turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_off_functional_light", "Filter code method": "HcHood.hoodTurnOffFunctionalLight.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_off_functional_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var triggerTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"10:00 PM\";\nif (triggerTime.indexOf(targetTime) === -1) {\n  HcHood.hoodTurnOffFunctionalLight.skip(\"Not the target time\");\n}", "intent": "Turn off the kitchen hood light every evening at 10:00 PM."}
{"original_description": "Reason is a monthly US-based Libertarian magazine. Stay up to date on the topics you care about, from a Libertarian perspective, by adding the keyword or phrase you want to track. You'll get an email whenever a new article matches the term!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var feedUrl = \"https://reason.com/feed\";\nvar keyword = \"Libertarian policy\";\n\nif (Feed.newFeedItemMatches.feed_url === feedUrl && Feed.newFeedItemMatches.EntryContent.includes(keyword)) {\n  var subject = \"New Reason Article: \" + Feed.newFeedItemMatches.EntryTitle;\n  var body = \"<h2>\" + Feed.newFeedItemMatches.EntryTitle + \"</h2><p>\" + Feed.newFeedItemMatches.EntryContent + \"</p><p>Read the full article at <a href='\" + Feed.newFeedItemMatches.EntryUrl + \"'>\" + Feed.newFeedItemMatches.EntryUrl + \"</a></p>\";\n  Email.sendMeEmail.setSubject(subject);\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"Article does not match the keyword or feed.\");\n}", "intent": "When a new article is published in the Reason magazine RSS feed, https://reason.com/feed, containing the keyword \"Libertarian policy\", send me an email with the subject \"New Reason Article: {{EntryTitle}}\" and the body \"<h2>{{EntryTitle}}</h2><p>{{EntryContent}}</p><p>Read the full article at <a href='{{EntryUrl}}'>{{EntryUrl}}</a></p>\"."}
{"original_description": "Always scanning Soundcloud for something new but like to listen on Spotify? Enter a search term and when this Applet finds a new track on the former, it'll automatically add it to a playlist on the latter (if it's available). Be specific in your search to get the best results! ", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_track_from_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Search query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "search_query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newTrackFromSearch.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newTrackFromSearch.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newTrackFromSearch.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newTrackFromSearch.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newTrackFromSearch.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newTrackFromSearch.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newTrackFromSearch.ImageUrl", "Type": "String", "Example": "http://w1.sndcdn.com/jD1KgNMbSVyv_m.png"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newTrackFromSearch.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newTrackFromSearch.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newTrackFromSearch.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newTrackFromSearch.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.add_a_track_to_a_playlist_by_track_id", "Filter code method": "Spotify.addATrackToAPlaylistByTrackId.skip(string?: reason)", "Runtime method": "runAction(\"spotify.add_a_track_to_a_playlist_by_track_id\", {})"}, "action_details": [{"section": "Action fields", "title": "Playlist\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Playlist name", "Helper text": "Must be a playlist owned by you. If a playlist with the name given can't be found, a new private playlist will be created.", "Slug": "playlist", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylistByTrackId.setPlaylist(string: playlist)"}}, {"section": "Action fields", "title": "Track\nText input > Other", "description": "Text input > Other", "details": {"Label": "Track ID", "Slug": "track_id", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylistByTrackId.setTrack(string: track_id)"}}], "filter_code": "if (Soundcloud.newTrackFromSearch.search_query === \"electronic music\" && Soundcloud.newTrackFromSearch.Title.includes(\"summer\")) {\n  var trackId = Soundcloud.newTrackFromSearch.TrackId;\n  Spotify.addATrackToAPlaylistByTrackId.setPlaylist(\"My Favorite Tracks\");\n  Spotify.addATrackToAPlaylistByTrackId.setTrack(trackId);\n} else {\n  Spotify.addATrackToAPlaylistByTrackId.skip(\"The track does not match the search query or title criteria.\");\n}", "intent": "When a new track is found on SoundCloud with the search query \"electronic music\" and the track's title contains the word \"summer\", add it to the Spotify playlist named \"My Favorite Tracks\" if the track is available."}
{"original_description": "Find out how your videos correlate with other lifestyle events", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"workout\") && Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL.startsWith(\"http://distilleryimage\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Instagram\")\n    .setDataType(\"Fitness\")\n    .setDatetime(Instagram.anyNewVideoByYouInstagram.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"New workout video posted\");\n}", "intent": "When a new video is posted on Instagram with a caption containing the keyword \"workout\" and the video's thumbnail image URL starts with \"http://distilleryimage\", send an event to Welltory with the data source set to \"Instagram\", data type set to \"Fitness\", datetime set to the time the video was taken, value set to 1, and a comment saying \"New workout video posted\"."}
{"original_description": "Turn on my Nanoleaf lights when my SmartThings sensor detects motion. Works best if the motion sensor is in the same room as the lights =)", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.any_new_motion_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Detected at\nThe date and time motion was sensed.", "description": "The date and time motion was sensed.", "details": {"Slug": "DetectedAt", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DetectedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_request", "Filter code method": "Nanoleaf.turnOnRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = SmartthingsV2.anyNewMotionSmartthings.DeviceName;\nif (deviceName === \"Living Room Sensor\" && hour >= 7 && hour < 22) {\n  // Do nothing, let the action proceed\n} else {\n  Nanoleaf.turnOnRequest.skip(\"Either not in living room or outside of desired hours (07:00 to 22:00).\");\n}", "intent": "Turn on my Nanoleaf lights in the living room when the SmartThings motion sensor named 'Living Room Sensor' detects motion between 07:00 and 22:00."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights OFF.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Hue.turnOffAllHue();\n}", "intent": "When the \"iH\" button on the iHome device is pressed, turn off all Philips Hue Lights."}
{"original_description": "Use RainMachine and WUnderground IFTTT services to start a zone with the desired amount of time when the outside temperature rises above the value you provide.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.start_zone", "Filter code method": "RainMachine.startZone.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.start_zone\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone number?", "Helper text": "The gardening zone number", "Slug": "zone_number", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Time\nDropdown list", "description": "Dropdown list", "details": {"Label": "For how long?", "Helper text": "Duration in minutes.", "Slug": "time", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit <= 75) {\n  RainMachine.startZone.skip(\"Outside temperature is not above 75°F.\");\n} else {\n  var zoneNumber = 3;\n  var durationMinutes = 30;\n  RainMachine.startZone.setZoneNumber(zoneNumber);\n  RainMachine.startZone.setTime(durationMinutes);\n}", "intent": "Start zone 3 on the RainMachine for 30 minutes when the outside temperature rises above 75°F in New York."}
{"original_description": "Let a friend know you're back in town — and need a ride! Just put in their number and when you check-in near the airport they'll get an SMS from your Android telling them it's time to hop in the car and get you that VIP curbside pickup. ", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.new_checkin_by_you_at_location"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input", "description": "Location input", "details": {"Label": "Locate an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.newCheckinByYouAtLocation.Shout", "Type": "String", "Example": "Best muffins ever."}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.newCheckinByYouAtLocation.VenueName", "Type": "String", "Example": "The ifttt office"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.newCheckinByYouAtLocation.VenueUrl", "Type": "String", "Example": "http://4sq.com/cjWcVg"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.newCheckinByYouAtLocation.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.776024,-122.425632&zoom=16&size=420x260&maptype=roadmap&sensor=false&markers=color:red|37.776024,-122.425632"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map at this location.", "description": "The image of the map at this location.", "details": {"Slug": "LocationMapImageUrl", "Filter code": "Foursquare.newCheckinByYouAtLocation.LocationMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map at this location.", "description": "The link to the map at this location.", "details": {"Slug": "LocationMapUrl", "Filter code": "Foursquare.newCheckinByYouAtLocation.LocationMapUrl", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.newCheckinByYouAtLocation.CheckinDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Foursquare.newCheckinByYouAtLocation.VenueName === \"San Francisco International Airport\") {\n  AndroidMessages.sendAMessage.setText(\"Just landed, can you pick me up?\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"555-1234\");\n}", "intent": "When I check in at San Francisco International Airport on Foursquare, send an SMS to 555-1234 saying \"Just landed, can you pick me up?\" from my Android device."}
{"original_description": "Cold climes now have a silver lining... every time the temperature hits freezing, you’ll save a set amount toward one of your Goals.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 32 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature is above 32°F or not in New York.\");\n}", "intent": "Every time the temperature drops below 32°F in New York, save $5 toward my Summer Vacation goal."}
{"original_description": "Give your savings a boost every time it gets hot... save a set amount toward one of your Goals every time the temperature where you are exceeds 75℉.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature in New York is not above 75℉.\");\n}", "intent": "Save $5 toward my Summer Vacation goal every time the temperature in New York exceeds 75℉."}
{"original_description": "Husqvarna Automower® is parked until further notice when the temperature drops below 5 °C / 41 °F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Husqvarna Automower®", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automower.park_until_further_notice", "Filter code method": "Automower.parkUntilFurtherNotice.skip(string?: reason)", "Runtime method": "runAction(\"automower.park_until_further_notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Automower\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Automower", "Slug": "automower", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5) {\n  Automower.parkUntilFurtherNotice.skip(\"Temperature in Copenhagen dropped below 5°C.\");\n}", "intent": "When the temperature in Copenhagen drops below 5°C, park the Husqvarna Automower until further notice."}
{"original_description": "Have a product's night light turn off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_nightlight_off", "Filter code method": "Idevices.turnNightlightOff.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_nightlight_off\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What product's night light?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar currentTime = new Date();\nif (currentTime >= sunriseTime) {\n  Idevices.turnNightlightOff.setWhatDevice(\"Bedroom Lamp\");\n  Idevices.turnNightlightOff.skip(\"Turning off night light at sunrise.\");\n}", "intent": "Turn off the night light of the Bedroom Lamp at sunrise, which is today at 04:17:06+05:00, when the temperature is expected to be around 18 degrees Celsius and the condition is Sunny."}
{"original_description": "Configure a Nexia automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  Nexia.nexiaAutomation.setNexiaAutomationName(\"Summer Mode\");\n  Nexia.nexiaAutomation.skip(\"Running Summer Mode automation.\");\n}", "intent": "Configure a Nexia automation named \"Summer Mode\" to run when the outdoor temperature in New York rises above 75 degrees Fahrenheit."}
{"original_description": "Change the home air conditioning mode to cool when the current temperature exceeds the pre-set value. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 80) {\n  Airtouch.acMode.setMode(\"cool\");\n}", "intent": "When the current temperature in degrees Fahrenheit exceeds 80 at home, change the living room air conditioning mode to cool."}
{"original_description": "Every week, you can automatically add your favorite tracks to a playlist of your choice", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.add_a_track_to_a_playlist_by_track_id", "Filter code method": "Spotify.addATrackToAPlaylistByTrackId.skip(string?: reason)", "Runtime method": "runAction(\"spotify.add_a_track_to_a_playlist_by_track_id\", {})"}, "action_details": [{"section": "Action fields", "title": "Playlist\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Playlist name", "Helper text": "Must be a playlist owned by you. If a playlist with the name given can't be found, a new private playlist will be created.", "Slug": "playlist", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylistByTrackId.setPlaylist(string: playlist)"}}, {"section": "Action fields", "title": "Track\nText input > Other", "description": "Text input > Other", "details": {"Label": "Track ID", "Slug": "track_id", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylistByTrackId.setTrack(string: track_id)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\" && DateAndTime.everyWeekdayAt.CheckTime.hour() === 15) {\n  Spotify.addATrackToAPlaylistByTrackId.setPlaylist(\"Weekly Favorites\");\n  Spotify.addATrackToAPlaylistByTrackId.setTrack(\"4iV5W9uYEdYUVa79Axb7Rh\");\n} else {\n  Spotify.addATrackToAPlaylistByTrackId.skip(\"Not Friday at 15:00.\");\n}", "intent": "Add my favorite track with ID \"4iV5W9uYEdYUVa79Axb7Rh\" to the playlist named \"Weekly Favorites\" every Friday at 15:00."}
{"original_description": "This applet turns off your Hue light when Withings Sleep detects that you get into bed.\n", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WithingsSleep.bedin.DeviceUser === \"Tom\" && \n    WithingsSleep.bedin.DateandTime.hour() >= 22 || \n    WithingsSleep.bedin.DateandTime.hour() <= 6) {\n  Hue.turnOffAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Not Tom's device or outside of time range.\");\n}", "intent": "Turn off all Philips Hue lights in the living room when Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00."}
{"original_description": "Send automated birthday wishes via phone call. Better than E-Mail :-)", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call_any", "Filter code method": "Woopla.ttsCallAny.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call_any\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setLanguage(string: language)"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone Number", "Helper text": "The phone number to call. International dialing format. Prefix with +. No zeros. Example: +4917098765432", "Slug": "phone_number", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCallAny.setPhone Number(string: phone_number)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime === \"August 23 at 11:01PM\") {\n  Woopla.ttsCallAny.setTts(\"Happy Birthday, have a wonderful day and year ahead!\");\n  Woopla.ttsCallAny.setLanguage(\"English\");\n  Woopla.ttsCallAny.setPhoneNumber(\"+1234567890\");\n} else {\n  Woopla.ttsCallAny.skip(\"It's not the birthday time.\");\n}", "intent": "Send a personalized birthday wish via a phone call to +1234567890 every year on August 23rd at 11:01 PM, speaking in English, with the text \"Happy Birthday, have a wonderful day and year ahead!\""}
{"original_description": "Volume Down", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.increase_volume", "Filter code method": "Sonos.increaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.increase_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.increaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.decreaseVolume.setRoom(\"Living Room\");\n  Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.decreaseVolume.skip(\"Incorrect gesture or device.\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, turn down the volume in the Living Room, including all grouped rooms."}
{"original_description": "Disarms Arlo when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.disarm", "Filter code method": "Arlo.disarm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode === \"Day\") {\n  Arlo.disarm.setDeviceName(\"Living Room Camera\");\n} else {\n  Arlo.disarm.skip(\"Not disarming because mode is not 'Day'.\");\n}", "intent": "Disarm the Arlo security system on the \"Living Room Camera\" when the Hubitat mode changes to \"Day\"."}
{"original_description": "Volume Up", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.increase_volume", "Filter code method": "Sonos.increaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.increase_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.increaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.increaseVolume.setRoom(\"Living Room\");\n  Sonos.increaseVolume.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.increaseVolume.skip(\"Invalid gesture or device.\");\n}", "intent": "When a Triple Knock gesture is detected on my device KNC1-W-00000088, increase the volume in the Living Room and include grouped rooms."}
{"original_description": "Unmute", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.mute", "Filter code method": "Sonos.mute.skip(string?: reason)", "Runtime method": "runAction(\"sonos.mute\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to mute?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Mute in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.mute.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.mute.setRoom(\"Living Room\");\n  Sonos.mute.setIncludeGroupedRooms(\"true\");\n  Sonos.unmute();\n} else {\n  Sonos.mute.skip(\"Incorrect gesture or device.\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, unmute the Sonos speaker in the Living Room, including all grouped rooms."}
{"original_description": "Find out how busy you and how your activities affect your body and mind", "trigger_channel": "iOS Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_calendar.new_calendar_event_in_calendar"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Calendar name", "Slug": "calendar_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nTitle of the calendar event.", "description": "Title of the calendar event.", "details": {"Slug": "Title", "Filter code": "IosCalendar.newCalendarEventInCalendar.Title", "Type": "String", "Example": "Coffee with Max"}}, {"section": "Ingredients", "title": "Start date\nThe date the event starts.", "description": "The date the event starts.", "details": {"Slug": "StartDate", "Filter code": "IosCalendar.newCalendarEventInCalendar.StartDate", "Type": "String", "Example": "February 9th, 2017 at 10:30AM"}}, {"section": "Ingredients", "title": "Invitees\nA comma-separated list of people invited to the event.", "description": "A comma-separated list of people invited to the event.", "details": {"Slug": "Invitees", "Filter code": "IosCalendar.newCalendarEventInCalendar.Invitees", "Type": "String", "Example": "Eric, Jon, Max, and Zhe"}}, {"section": "Ingredients", "title": "Organizer\nThe organizer of the event, if any.", "description": "The organizer of the event, if any.", "details": {"Slug": "Organizer", "Filter code": "IosCalendar.newCalendarEventInCalendar.Organizer", "Type": "String", "Example": "Max Meyers"}}, {"section": "Ingredients", "title": "Location\nThe location of the event, if any.", "description": "The location of the event, if any.", "details": {"Slug": "Location", "Filter code": "IosCalendar.newCalendarEventInCalendar.Location", "Type": "String", "Example": "Machine Coffee & Deli"}}, {"section": "Ingredients", "title": "Notes\nThe notes associated with the event, if any.", "description": "The notes associated with the event, if any.", "details": {"Slug": "Notes", "Filter code": "IosCalendar.newCalendarEventInCalendar.Notes", "Type": "String", "Example": "Let's get together and talk!"}}, {"section": "Ingredients", "title": "Date created\nThe date the event was added to the calendar.", "description": "The date the event was added to the calendar.", "details": {"Slug": "DateCreated", "Filter code": "IosCalendar.newCalendarEventInCalendar.DateCreated", "Type": "String", "Example": "February 6th, 2017 at 3:00PM"}}, {"section": "Ingredients", "title": "End date\nThe date the event ends.", "description": "The date the event ends.", "details": {"Slug": "EndDate", "Filter code": "IosCalendar.newCalendarEventInCalendar.EndDate", "Type": "String", "Example": "February 9th, 2017 at 11:00AM"}}, {"section": "Ingredients", "title": "Calendar name\nThe name of the event's calendar.", "description": "The name of the event's calendar.", "details": {"Slug": "CalendarName", "Filter code": "IosCalendar.newCalendarEventInCalendar.CalendarName", "Type": "String", "Example": "Personal"}}, {"section": "Ingredients", "title": "Url\nThe URL associated with the event, if any.", "description": "The URL associated with the event, if any.", "details": {"Slug": "URL", "Filter code": "IosCalendar.newCalendarEventInCalendar.URL", "Type": "String", "Example": "https://ifttt.com"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_activity", "Filter code method": "Welltory.sendActivity.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Begin\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we start tracking it?", "Helper text": "Add an ingredient containing {at}, {starts}, or similar", "Slug": "begin", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setBegin(string: begin)"}}, {"section": "Action fields", "title": "End\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When should we stop tracking it?", "Helper text": "Add an ingredient containing {ends}, {at}, or similar", "Slug": "end", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setEnd(string: end)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendActivity.setComment(string: comment)"}}], "filter_code": "if (IosCalendar.newCalendarEventInCalendar.Title === \"Morning Jog\" && \n    IosCalendar.newCalendarEventInCalendar.CalendarName === \"Personal\" && \n    IosCalendar.newCalendarEventInCalendar.StartDate.includes(\"7:00 AM\") && \n    IosCalendar.newCalendarEventInCalendar.EndDate.includes(\"8:00 AM\") && \n    IosCalendar.newCalendarEventInCalendar.Invitees.includes(\"myself\")) {\n  Welltory.sendActivity.setDataSource(\"iOS Calendar\");\n  Welltory.sendActivity.setDataType(\"Exercise\");\n  Welltory.sendActivity.setBegin(IosCalendar.newCalendarEventInCalendar.StartDate);\n  Welltory.sendActivity.setEnd(IosCalendar.newCalendarEventInCalendar.EndDate);\n  Welltory.sendActivity.setComment(\"Daily morning run\");\n} else {\n  Welltory.sendActivity.skip(\"Does not match the 'Morning Jog' event criteria.\");\n}", "intent": "When a new event titled \"Morning Jog\" is added to my \"Personal\" calendar on iOS, starting at 7:00 AM and ending at 8:00 AM, with invitees including myself, track this activity in Welltory as an \"Exercise\" data type from \"iOS Calendar\", beginning at the event's start time and ending at the event's end time, and add a comment \"Daily morning run\"."}
{"original_description": "In a Telegram group with coworkers or family members? Allow anyone in the group to turn off the lights at the end of the work day or as they're leaving the house. Simply type '/ifttt lights off' in the group you specify to turn your Hue lights off.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_group_text"}, "trigger_details": [{"section": "Trigger fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Source group", "Helper text": "You can use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot to <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">connect new groups</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to the message with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Telegram.newGroupText.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Author name\nName of the sender.", "description": "Name of the sender.", "details": {"Slug": "author_name", "Filter code": "Telegram.newGroupText.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nSender's username, when available.", "description": "Sender's username, when available.", "details": {"Slug": "author_username", "Filter code": "Telegram.newGroupText.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Group title\nName of the group.", "description": "Name of the group.", "details": {"Slug": "group_title", "Filter code": "Telegram.newGroupText.GroupTitle", "Type": "String", "Example": "Bot News Group"}}, {"section": "Ingredients", "title": "Text\nRepresents the contents of a plain-text message.", "description": "Represents the contents of a plain-text message.", "details": {"Slug": "text", "Filter code": "Telegram.newGroupText.Text", "Type": "String", "Example": "Hello word!"}}, {"section": "Ingredients", "title": "Html\nRepresents the contents of an HTML-formatted message.", "description": "Represents the contents of an HTML-formatted message.", "details": {"Slug": "html", "Filter code": "Telegram.newGroupText.Html", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Telegram.newGroupText.GroupTitle === \"#officechat\" && Telegram.newGroupText.Text.includes(\"/ifttt lights off\")) {\n  Hue.turnOffAllHue.setLights(\"Living Room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Message does not contain '/ifttt lights off' or is not from '#officechat'\");\n}", "intent": "When a message containing the text \"/ifttt lights off\" is sent in the \"#officechat\" Telegram group by anyone, turn off all the living room lights connected to Philips Hue."}
{"original_description": "With the push of a button on your phone, your Signature thermostat is set to a certain temperature.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "nVent Nuheat Signature Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nVent_Nuheat.decrease_temperature", "Filter code method": "NVentNuheat.decreaseTemperature.skip(string?: reason)", "Runtime method": "runAction(\"nVent_Nuheat.decrease_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to increase the temperature of", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or Fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.decreaseTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Delta\nDropdown list", "description": "Dropdown list", "details": {"Label": "How many degrees?", "Helper text": "How many degrees to add to the setpoint temperature", "Slug": "delta", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.decreaseTemperature.setDelta(string: delta)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  NVentNuheat.decreaseTemperature.setThermostat(\"Living Room\");\n  NVentNuheat.decreaseTemperature.setScale(\"Celsius\");\n  NVentNuheat.decreaseTemperature.setDelta(\"-2\"); // Assuming current temperature is around 24°C to reach 22°C\n}", "intent": "When you press the button on your phone at a location like 37.8267, -122.4230, set your Signature thermostat, located in the living room, to 22°C."}
{"original_description": "Send @IFTTT a message with #tvon to turn on your Harmony connected TV.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_pm_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires if your message to the bot contains the key phrase.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to your message with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newPmTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Author name\nName of the user who triggered the Applet.", "description": "Name of the user who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newPmTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nUsername of the author, when available", "description": "Username of the author, when available", "details": {"Slug": "author_username", "Filter code": "Telegram.newPmTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents the contents of a plain-text message. Does not include the 'Key phrase'.", "description": "Represents the contents of a plain-text message. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newPmTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newPmTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.start-activity", "Filter code method": "Harmony.startActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.start-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newPmTextFilter.AuthorName === \"Pavel Durov\" && \n    Telegram.newPmTextFilter.Text.includes(\"#tvon\") && \n    hour >= 18 && hour <= 22) {\n  // Do nothing, let the action proceed\n} else {\n  Harmony.startActivity.skip(\"Condition not met\");\n}", "intent": "When Pavel Durov sends a message to @IFTTT with the keyword #tvon via Telegram between 18:00 and 22:00, turn on the Living Room TV activity using Harmony."}
{"original_description": "Ajout d'un bouton raccourci pour votre smartphone.\nCe bouton permet de contrôler votre heatzy pilote.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-auto-mode", "Filter code method": "Heatzy.aSetAutoMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-auto-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Heatzy.aSetAutoMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetAutoMode.skip(\"Conditions not met.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, then set the Heatzy device \"Living Room Thermostat\" to auto mode."}
{"original_description": "When you send #partymode to @IFTTT in Telegram, your Hue lights will start a color loop.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_pm_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires if your message to the bot contains the key phrase.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to your message with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newPmTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Author name\nName of the user who triggered the Applet.", "description": "Name of the user who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newPmTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nUsername of the author, when available", "description": "Username of the author, when available", "details": {"Slug": "author_username", "Filter code": "Telegram.newPmTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents the contents of a plain-text message. Does not include the 'Key phrase'.", "description": "Represents the contents of a plain-text message. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newPmTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newPmTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 18 && hour < 23) {\n  if (Telegram.newPmTextFilter.Text.includes(\"#partymode\")) {\n    Hue.setColorAllHue.setLights(\"Living room\");\n    Hue.setColorAllHue.setColor(\"#FF69B4\");\n  } else {\n    Hue.setColorAllHue.skip(\"Message does not contain #partymode.\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Outside of party hours (6 PM to 11 PM).\");\n}", "intent": "When you send \"#partymode\" to @IFTTT in Telegram between 18:00 and 23:00, your living room Hue lights will start a color loop with the color \"#FF69B4\"."}
{"original_description": "Message the @IFTTT bot on Telegram with #color followed by the desired color name or CSS hex color value. E.g. '#color blue' or '#color #f0c080'.   If no matching color is found, lights will turn to white.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_pm_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires if your message to the bot contains the key phrase.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to your message with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newPmTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Author name\nName of the user who triggered the Applet.", "description": "Name of the user who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newPmTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nUsername of the author, when available", "description": "Username of the author, when available", "details": {"Slug": "author_username", "Filter code": "Telegram.newPmTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents the contents of a plain-text message. Does not include the 'Key phrase'.", "description": "Represents the contents of a plain-text message. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newPmTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newPmTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var text = Telegram.newPmTextFilter.Text;\nvar colorMatch = text.match(/#color\\s*(.*)/i);\nif (colorMatch) {\n  var color = colorMatch[1].trim();\n  if (color === \"#ff99cc\") {\n    Hue.setColorAllHue.setColor(color);\n  } else {\n    Hue.setColorAllHue.skip(\"Unrecognized color. Defaulting to white.\");\n    Hue.setColorAllHue.setColor(\"#ffffff\");\n  }\n}", "intent": "Message the @IFTTT bot on Telegram with '#color #ff99cc' to set all Philips Hue lights in the living room to a pastel pink color. If the message contains the keyword '#color' followed by an unrecognized color name or code, the lights will default to white."}
{"original_description": "This applet will let you turn on motion detection at specific time of the day", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Smitch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Smitch.turn_on_sound_detection", "Filter code method": "Smitch.turnOnSoundDetection.skip(string?: reason)", "Runtime method": "runAction(\"Smitch.turn_on_sound_detection\", {})"}, "action_details": [{"section": "Action fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera", "Helper text": "Choose the camera to turn on sound detection", "Slug": "camera", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Sound detection type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound Detection Type", "Helper text": "Choose the sound detection type", "Slug": "sound_detection_type", "Required": "true", "Can have default value": "true", "Filter code method": "Smitch.turnOnSoundDetection.setSound Detection Type(string: sound_detection_type)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.hour() === 7 && currentTime.minute() === 0) {\n  Smitch.turnOnSoundDetection.setCamera(\"Living Room Camera\");\n  Smitch.turnOnSoundDetection.setSoundDetectionType(\"Baby Crying\");\n} else {\n  Smitch.turnOnSoundDetection.skip(\"Not the target time\");\n}", "intent": "Turn on motion detection on the Living Room Camera with sound detection type set to Baby Crying at 07:00 every day."}
{"original_description": "Select a time that you normally go to bed and your eWeLink 4 Channels Plug will let you know it's time to go to sleep.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plugs2_action", "Filter code method": "Ewelink.plugs2Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plugs2_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plugs2 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 2-Channel Plug?", "Slug": "plugs2_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Plugs2 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "plugs2_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 22 || DateAndTime.everyDayAt.CheckTime.minute() !== 30) {\n  Ewelink.plugs2Action.skip(\"Not the designated bedtime reminder time.\");\n} else {\n  Ewelink.setPlugs2Query(\"eWeLink 4 Channels Plug\");\n  Ewelink.setPlugs2OutletQuery(\"Channel 1\");\n  Ewelink.setOnoffActQuery(\"Turn on\");\n}", "intent": "Every day at 10:30 PM, turn on the living room lamp plugged into channel 1 of my eWeLink 4 Channels Plug to remind me it's time to go to sleep."}
{"original_description": "Set it and forget it. When your SmartThings device no longer detects a presence in your home, this applet will enable your robot to start cleaning.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Irobot.startRobot.setRobotName(\"Roomba i7+\");\n} else {\n  Irobot.startRobot.skip(\"Device is not the Bedroom sensor.\");\n}", "intent": "When the Bedroom sensor in SmartThings no longer detects presence, start the Roomba i7+ robot to clean the house."}
{"original_description": "Go to bed without having to thinking about turning off the hood light. Just define a time every evening when the light shall turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_on_functional_light", "Filter code method": "HcHood.hoodTurnOnFunctionalLight.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_on_functional_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetHour = 22; // 10:00 PM in 24-hour format\nif (checkTime.hour() === targetHour && checkTime.minute() === 0) {\n  HcHood.hoodTurnOnFunctionalLight.skip(\"Turning off kitchen hood light at 10:00 PM.\");\n}", "intent": "Turn off the kitchen hood light every evening at 10:00 PM."}
{"original_description": "Press the Button widget to activate the Super Cooling mode of the refrigerator.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Fridge Freezer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_fridge.refrigerator_activate_super_cooling", "Filter code method": "HcFridge.refrigeratorActivateSuperCooling.skip(string?: reason)", "Runtime method": "runAction(\"hc_fridge.refrigerator_activate_super_cooling\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which fridge?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 22) {\n  HcFridge.refrigeratorActivateSuperCooling.setHaId(\"kitchen_fridge\");\n} else {\n  HcFridge.refrigeratorActivateSuperCooling.skip(\"Conditions not met.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the press occurs between 07:00 and 22:00, activate the Super Cooling mode of the Home Connect Fridge Freezer, specifically the fridge located in the kitchen."}
{"original_description": "Press the Button widget to activate the Super Freezing mode of the freezer.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Fridge Freezer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_fridge.refrigerator_activate_super_cooling", "Filter code method": "HcFridge.refrigeratorActivateSuperCooling.skip(string?: reason)", "Runtime method": "runAction(\"hc_fridge.refrigerator_activate_super_cooling\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which fridge?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 22) {\n  HcFridge.refrigeratorActivateSuperCooling.setHaId(\"My Kitchen Fridge\");\n} else {\n  HcFridge.refrigeratorActivateSuperCooling.skip(\"Conditions not met.\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, activate the Super Freezing mode of the Home Connect Fridge Freezer, identified as \"My Kitchen Fridge\", at the occurred time, such as 2020-07-08T04:17:06+05:00."}
{"original_description": "Have a product's night light turn on after sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_nightlight_on", "Filter code method": "Idevices.turnNightlightOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_nightlight_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What product's night light?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt >= new Date() && Weather.sunSets.TempCelsius <= 18) {\n  Idevices.turnNightlightOn.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnNightlightOn.skip(\"Not sunset or too warm.\");\n}", "intent": "Turn on the night light of my Living Room Lamp after sunset, which is typically around 04:17:06+05:00 in my location, when the temperature cools down to 18 degrees Celsius and the condition becomes darker."}
{"original_description": "This applet lets Apilio know that the sun has set at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Apilio.booleanVariableToggleUpdates.skip(\"Updated by sunset notifier\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Conditions not met for sunset notifier\");\n}", "intent": "When the sunset at your location occurs, with a temperature of 18 degrees Celsius and the condition being Sunny, update the Apilio variable \"SunsetNotifier\" to toggle its boolean state."}
{"original_description": "This applet lets Apilio know that the sun has risen at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempCelsius === \"18\" && Weather.sunRises.Condition === \"Sunny\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Sunrise_Status\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Conditions not met for sunrise status update.\");\n}", "intent": "When the sunrise is detected at my location, with a current temperature of 18°C and a condition of Sunny, trigger Apilio to toggle the variable identified as \"Sunrise_Status\" to update the boolean status, indicating that the sun has risen."}
{"original_description": "One-button widget/trigger to set a Nuheat thermostat to a user-defined temperature indefinitely. ", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "nVent Nuheat Signature Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nVent_Nuheat.decrease_temperature", "Filter code method": "NVentNuheat.decreaseTemperature.skip(string?: reason)", "Runtime method": "runAction(\"nVent_Nuheat.decrease_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to increase the temperature of", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or Fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.decreaseTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Delta\nDropdown list", "description": "Dropdown list", "details": {"Label": "How many degrees?", "Helper text": "How many degrees to add to the setpoint temperature", "Slug": "delta", "Required": "true", "Can have default value": "true", "Filter code method": "NVentNuheat.decreaseTemperature.setDelta(string: delta)"}}], "filter_code": "var thermostatLocation = \"living room\";\nvar desiredTemperature = 22;\nvar scale = \"Celsius\";\n\nNVentNuheat.setThermostatTemperature.setThermostat(thermostatLocation);\nNVentNuheat.setThermostatTemperature.setSetpoint(desiredTemperature);\nNVentNuheat.setThermostatTemperature.setScale(scale);\nNVentNuheat.setThermostatTemperature.setDuration(\"indefinite\");", "intent": "Set the living room Nuheat thermostat to 22°C indefinitely when the button widget is pressed at any time."}
{"original_description": "When the sun sets, your WeMo switch will turn on. A great way to automatically control your lights.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WeMo Smart Plug", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_switch.attribute_socketOnDiscrete", "Filter code method": "WemoSwitch.attributeSocketOnDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_switch.attribute_socketOnDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius > 18) {\n  WemoSwitch.attributeSocketOnDiscrete.setMacaddress(\"Living Room Lamp\");\n} else {\n  WemoSwitch.attributeSocketOnDiscrete.skip(\"Conditions not met to turn on the switch.\");\n}", "intent": "When the sunset at New York occurs and the temperature is above 18 degrees Celsius, turn on my WeMo Smart Plug switch named \"Living Room Lamp\"."}
{"original_description": "When you miss an incoming call from an important person on your Android phone blink your LIFX lights a chosen color, even if your lights are off.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call_from_number"}, "trigger_details": [{"section": "Trigger fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Include country code e.g. 12024561111", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCallFromNumber.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCallFromNumber.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCallFromNumber.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCallFromNumber.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (AndroidPhone.missAPhoneCallFromNumber.ContactName === \"Jon Snow\" && AndroidPhone.missAPhoneCallFromNumber.DeviceName === \"Google Pixel 7\") {\n  Lifx.blink.setSelector(\"all lights in the living room\");\n  Lifx.blink.setColor(\"red\");\n  Lifx.blink.setBrightness(\"maximum\");\n  Lifx.blink.setNumber_of_Blinks(\"3\");\n  Lifx.blink.setBlink_If_Off(\"yes\");\n}", "intent": "When you miss an incoming call from Jon Snow on your Google Pixel 7 Android phone, blink all lights in the living room to red at maximum brightness 3 times, even if they are off."}
{"original_description": "Let the party begin! If your weather station registers noise above a certain threshold it will activate a color loop for your Philips Hue lights.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.noise-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target noise level", "Helper text": "In decibels (dB)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured noise level\nThe measured noise level in decibels", "description": "The measured noise level in decibels", "details": {"Slug": "MeasuredNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.MeasuredNoiseLevel", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Target noise level\nThe target noise level in decibels", "description": "The target noise level in decibels", "details": {"Slug": "TargetNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.TargetNoiseLevel", "Type": "String", "Example": "53"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.noiseRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the noise", "description": "This is the name of the Netamo device where you are reading the noise", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.noiseRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.colorloop_all_hue", "Filter code method": "Hue.colorloopAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.colorloop_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.noiseRisesAbove.MeasuredNoiseLevel > 60 && Netatmo.noiseRisesAbove.DeviceName === \"My Home - Indoor station\") {\n  Hue.colorloopAllHue.skip();\n} else {\n  Hue.colorloopAllHue.skip(\"Noise level is below threshold or not measured at My Home - Indoor station.\");\n}", "intent": "When the noise level at My Home - Indoor station exceeds 60 decibels, start a color loop on all Philips Hue lights."}
{"original_description": "Perfect for adding to a playlist while the party is going — the color loop will let everyone know a new jam is in the mix. 🎉  GET HYPE! ", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.colorloop_all_hue", "Filter code method": "Hue.colorloopAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.colorloop_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\" && Spotify.newTrackAddedToPlaylist.AddedBy === \"Linden Tibbets\") {\n  Hue.colorloopAllHue.skip();\n} else {\n  Hue.colorloopAllHue.skip(\"Conditions not met to start color loop.\");\n}", "intent": "When a new track is added to the \"Mid-2000s Jamz\" playlist on Spotify by user \"Linden Tibbets\", start a color loop on all Philips Hue lights."}
{"original_description": "Set smart light bulb color at the press of a button. This works with TP-Link LB130 and LB230 smart wifi light bulbs.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color", "Filter code method": "Kasa.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setColor(string: color)"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Helper text": "Choose a brightness", "Slug": "brightness", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setBrightness(string: brightness)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors?", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color: #ffff00; brightness: 50; transition_duration: 3000” for yellow at 50% brightness, 3 seconds transition duration.", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Kasa.changeColor.setDevice(\"Living Room\");\n  Kasa.changeColor.setColor(\"#FFFF00\");\n  Kasa.changeColor.setBrightness(\"75\");\n  Kasa.changeColor.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColor.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, set the TP-Link LB130 smart wifi light bulb in the living room to a bright yellow color (#FFFF00) with 75% brightness and a transition duration of 2 seconds."}
{"original_description": "When you send #partymode to @IFTTT in Telegram, your Hue lights will start a color loop.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_pm_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires if your message to the bot contains the key phrase.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to your message with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newPmTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Author name\nName of the user who triggered the Applet.", "description": "Name of the user who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newPmTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nUsername of the author, when available", "description": "Username of the author, when available", "details": {"Slug": "author_username", "Filter code": "Telegram.newPmTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents the contents of a plain-text message. Does not include the 'Key phrase'.", "description": "Represents the contents of a plain-text message. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newPmTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newPmTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.colorloop_all_hue", "Filter code method": "Hue.colorloopAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.colorloop_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar text = Telegram.newPmTextFilter.Text;\nif (text.includes(\"party\") && Telegram.newPmTextFilter.Text.includes(\"#partymode\") && hour >= 18 && hour < 22) {\n  // Do nothing, let the action proceed\n} else {\n  Hue.colorloopAllHue.skip(\"Condition not met\");\n}", "intent": "When you send \"#partymode\" to @IFTTT in Telegram between 18:00 and 22:00, and the message contains the keyword \"party\", your Hue lights, specifically the living room lamps, will start a color loop."}
{"original_description": "Set the color of your smart bulb with a button press", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color", "Filter code method": "Kasa.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setColor(string: color)"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Helper text": "Choose a brightness", "Slug": "brightness", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setBrightness(string: brightness)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors?", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color: #ffff00; brightness: 50; transition_duration: 3000” for yellow at 50% brightness, 3 seconds transition duration.", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Kasa.changeColor.setDevice(\"Living Room Bulb\");\n  Kasa.changeColor.setColor(\"red\");\n  Kasa.changeColor.setBrightness(\"75%\");\n  Kasa.changeColor.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColor.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, set the color of the TP-Link Kasa device \"Living Room Bulb\" to red, with brightness at 75%, and a transition duration of 2 seconds."}
{"original_description": "The Green Light Signal is a UK service that you connect your smart bulb to. It will make your bulb turn green every time the electricity in your area is generated with lowest possible CO2 levels. Simply put: when it turns green you can plug-in!", "trigger_channel": "Green Light Signal", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "green_light_signal.co2_level"}, "trigger_details": [{"section": "Trigger fields", "title": "Postcode\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "What is your postcode?", "Helper text": "Example 'LE6 7TR'", "Slug": "postcode", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Co2 index\nCO2 index", "description": "CO2 index", "details": {"Slug": "co2_index", "Filter code": "GreenLightSignal.co2Level.Co2Index", "Type": "String", "Example": "Low"}}, {"section": "Ingredients", "title": "Co2 level value\nCO2 level value", "description": "CO2 level value", "details": {"Slug": "co2_level_value", "Filter code": "GreenLightSignal.co2Level.Co2LevelValue", "Type": "String", "Example": "0"}}, {"section": "Ingredients", "title": "Date\nDate Created", "description": "Date Created", "details": {"Slug": "date", "Filter code": "GreenLightSignal.co2Level.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.color", "Filter code method": "Lifx.color.skip(string?: reason)", "Runtime method": "runAction(\"lifx.color\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights turn on to the color, even when they are turned off in the app.", "Slug": "color_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.color.setColor If Off(string: color_if_off)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; duration: 12&quot; for red at 30% brightness, 12 second fade. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.color.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (GreenLightSignal.co2Level.Co2Index === \"Low\" && GreenLightSignal.co2Level.Co2LevelValue === \"0\" && postcode === \"LE6 7TR\") {\n  Lifx.color.setSelector(\"living room\");\n  Lifx.color.setColor(\"green\");\n  Lifx.color.setBrightness(50);\n  Lifx.color.setColorIfOff(\"Yes\");\n  Lifx.color.setTransitionDuration(5);\n}", "intent": "When the Green Light Signal service reports a low CO2 index in the postcode area LE6 7TR, and the current CO2 level value is 0, turn on the living room lights to green with a brightness of 50% and a transition duration of 5 seconds, even if they are turned off."}
{"original_description": "In a Telegram group with coworkers or family members? Allow anyone in the group to turn off the lights at the end of the work day or as they're leaving the house. Simply type '/ifttt lights off' in the group you specify to turn your Hue lights off.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_pm_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires if your message to the bot contains the key phrase.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to your message with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newPmTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Author name\nName of the user who triggered the Applet.", "description": "Name of the user who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newPmTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nUsername of the author, when available", "description": "Username of the author, when available", "details": {"Slug": "author_username", "Filter code": "Telegram.newPmTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents the contents of a plain-text message. Does not include the 'Key phrase'.", "description": "Represents the contents of a plain-text message. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newPmTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newPmTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Telegram.newPmTextFilter.Text === \"/ifttt lights off\") {\n  Hue.turnOffAllHue();\n} else {\n  Hue.turnOffAllHue.skip(\"Key phrase '/ifttt lights off' not found in the message.\");\n}", "intent": "When a message containing the key phrase '/ifttt lights off' is sent in the Telegram group, turn off all Philips Hue lights."}
{"original_description": "Checks the Weather Underground service for the current UV Index based on your threshold, and then sets the Aurora to a color you choose.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 8 && Weather.currentUvIndexRisesAbove.location === \"New York\") {\n  Nanoleaf.changeColorRequest.setValue(\"#FF0000\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"UV index is not above 8 or location is not New York.\");\n}", "intent": "When the UV index rises above 8 in New York, set the Aurora device to red (#FF0000)."}
{"original_description": "When the sun sets, your eWeLink 4 Channels Switch will turn on or off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switch_action", "Filter code method": "Ewelink.switchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switch query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 1-Channel Switch?", "Slug": "switch_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.SunsetAt) {\n  Ewelink.switchAction.setSwitchQuery(\"first channel\");\n  Ewelink.switchAction.setOnoffActQuery(\"turn on\");\n} else {\n  Ewelink.switchAction.skip(\"Conditions not met\");\n}", "intent": "When the sunset at New York occurs and the current temperature is 18 degrees Celsius, turn on the first channel of your eWeLink 4 Channels Switch."}
{"original_description": "When Wyze Cam detects your smoke alarm ringing, Noonlight will send the fire department to your location", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.smoke_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Smoke detected\nSmoke alarm detected on your wyze camera.", "description": "Smoke alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.smokeTrigger.SmokeDetected", "Type": "String", "Example": "Smoke alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when smoke is triggered.", "description": "Time when smoke is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.smokeTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Noonlight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "safetrek.alert", "Filter code method": "Safetrek.alert.skip(string?: reason)", "Runtime method": "runAction(\"safetrek.alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Lat\nText input > Other", "description": "Text input > Other", "details": {"Label": "Latitude", "Slug": "lat", "Required": "true", "Can have default value": "true", "Filter code method": "Safetrek.alert.setLat(string: lat)"}}, {"section": "Action fields", "title": "Lon\nText input > Other", "description": "Text input > Other", "details": {"Label": "Longitude", "Slug": "lon", "Required": "true", "Can have default value": "true", "Filter code method": "Safetrek.alert.setLon(string: lon)"}}], "filter_code": "if (Wyzecam.smokeTrigger.SmokeDetected === \"Smoke alarm detected on your wyze camera.\" && Wyzecam.serialize_device_info === \"Living Room Camera\") {\n  Safetrek.alert.setLat(\"37.7749\");\n  Safetrek.alert.setLon(\"-122.4194\");\n} else {\n  Safetrek.alert.skip(\"Conditions not met for sending fire department.\");\n}", "intent": "When the Wyze Cam named \"Living Room Camera\" detects a smoke alarm ringing, Noonlight will immediately send the fire department to the location at latitude 37.7749 and longitude -122.4194."}
{"original_description": "When Wyze detects your CO alarm ringing, Noonlight will send the fire department to your location", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.co_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Co detected\nCO alarm detected on your wyze camera.", "description": "CO alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.coTrigger.CoDetected", "Type": "String", "Example": "CO alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when CO is triggered.", "description": "Time when CO is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.coTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Noonlight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "safetrek.alert", "Filter code method": "Safetrek.alert.skip(string?: reason)", "Runtime method": "runAction(\"safetrek.alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Lat\nText input > Other", "description": "Text input > Other", "details": {"Label": "Latitude", "Slug": "lat", "Required": "true", "Can have default value": "true", "Filter code method": "Safetrek.alert.setLat(string: lat)"}}, {"section": "Action fields", "title": "Lon\nText input > Other", "description": "Text input > Other", "details": {"Label": "Longitude", "Slug": "lon", "Required": "true", "Can have default value": "true", "Filter code method": "Safetrek.alert.setLon(string: lon)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  var coDetected = Wyzecam.coTrigger.CoDetected;\n  if (coDetected === \"CO alarm detected on your wyze camera.\") {\n    var lat = \"37.7749\";\n    var lon = \"-122.4194\";\n    Safetrek.alert.setLat(lat);\n    Safetrek.alert.setLon(lon);\n  } else {\n    Safetrek.alert.skip(\"No CO alarm detected.\");\n  }\n} else {\n  Safetrek.alert.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}", "intent": "When the Wyze camera detects a CO alarm at your location, between 07:00 and 22:00, and you are home, send the fire department to your exact latitude 37.7749 and longitude -122.4194 using Noonlight."}
{"original_description": "This applet lets Apilio know that the sun has set at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.SunsetAt <= new Date()) {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Sunset notification updated to false\");\n} else {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Conditions not met for sunset notification update\");\n}", "intent": "When the sunset at your location occurs, as determined by Weather Underground, and the current temperature is 18 degrees Celsius, update the Apilio variable identified as \"sunset_notification\" to false."}
{"original_description": "This applet lets Apilio know that the sun has risen at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Location === \"New York City\" && parseFloat(Weather.sunRises.TempFahrenheit) > 60) {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Sun has risen and temperature is above 60°F\");\n} else {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Conditions not met\");\n}", "intent": "When the sun rises at my location, which is New York City, and the current temperature is above 60°F, update the Apilio variable \"Sunrise_Notified\" to false."}
{"original_description": "Disarm a tag at your local sunrise time", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wireless Tag", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wirelesstag.arm", "Filter code method": "Wirelesstag.arm.skip(string?: reason)", "Runtime method": "runAction(\"wirelesstag.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Tagid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Slug": "tagid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Doormodesetclosed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Define closed angle?", "Helper text": "Only applicable to angle based motion sensor in door/gate mode. If not specified, does not re-define closed angle (requires the tag be armed in door mode at least once)", "Slug": "doorModeSetClosed", "Required": "false", "Can have default value": "true", "Filter code method": "Wirelesstag.arm.setDoor Mode Set Closed(string: doorModeSetClosed)"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === new Date().getHours() && \n    Weather.sunRises.SunriseAt.getMinutes() === new Date().getMinutes()) {\n  Wirelesstag.disarm.setTagid(\"My Office Door\");\n}", "intent": "Disarm the Wireless Tag labeled \"My Office Door\" at sunrise time in New York City, which is obtained from the Weather Underground's weather forecast for that location."}
