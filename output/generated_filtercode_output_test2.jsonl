{"original_description": "Includes total time tracked, productive, neutral and distracting, and a link to the full report on RescueTime.", "trigger_channel": "RescueTime", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "rescuetime.daily_summary"}, "trigger_details": [{"section": "Ingredients", "title": "Date\nThe date of the summary.", "description": "The date of the summary.", "details": {"Slug": "date", "Filter code": "Rescuetime.dailySummary.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Date for urls\nA machine readable date that can be used in URLs.", "description": "A machine readable date that can be used in URLs.", "details": {"Slug": "date_for_urls", "Filter code": "Rescuetime.dailySummary.DateForUrls", "Type": "String", "Example": "2015-01-31"}}, {"section": "Ingredients", "title": "Total time\nThe total time logged.", "description": "The total time logged.", "details": {"Slug": "total_time", "Filter code": "Rescuetime.dailySummary.TotalTime", "Type": "String", "Example": "8h 30m"}}, {"section": "Ingredients", "title": "All productive time\nThe total 'productive' and 'very productive' time logged.", "description": "The total 'productive' and 'very productive' time logged.", "details": {"Slug": "all_productive_time", "Filter code": "Rescuetime.dailySummary.AllProductiveTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Very productive time\nThe total 'very productive' time logged.", "description": "The total 'very productive' time logged.", "details": {"Slug": "very_productive_time", "Filter code": "Rescuetime.dailySummary.VeryProductiveTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Productive time\nThe total 'productive' time logged.", "description": "The total 'productive' time logged.", "details": {"Slug": "productive_time", "Filter code": "Rescuetime.dailySummary.ProductiveTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Neutral time\nThe total 'neutral' time logged.", "description": "The total 'neutral' time logged.", "details": {"Slug": "neutral_time", "Filter code": "Rescuetime.dailySummary.NeutralTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Distracting time\nThe total 'distracting' time logged.", "description": "The total 'distracting' time logged.", "details": {"Slug": "distracting_time", "Filter code": "Rescuetime.dailySummary.DistractingTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Very distracting time\nThe total 'very distracting' time logged.", "description": "The total 'very distracting' time logged.", "details": {"Slug": "very_distracting_time", "Filter code": "Rescuetime.dailySummary.VeryDistractingTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "All distracting time\nThe total 'distracting' and 'very distracting' time logged.", "description": "The total 'distracting' and 'very distracting' time logged.", "details": {"Slug": "all_distracting_time", "Filter code": "Rescuetime.dailySummary.AllDistractingTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Uncategorized time\nThe total 'uncategorized' time logged.", "description": "The total 'uncategorized' time logged.", "details": {"Slug": "uncategorized_time", "Filter code": "Rescuetime.dailySummary.UncategorizedTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Business time\nThe total 'business' time logged.", "description": "The total 'business' time logged.", "details": {"Slug": "business_time", "Filter code": "Rescuetime.dailySummary.BusinessTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Communication and scheduling time\nThe total 'communication and scheduling' time logged.", "description": "The total 'communication and scheduling' time logged.", "details": {"Slug": "communication_and_scheduling_time", "Filter code": "Rescuetime.dailySummary.CommunicationAndSchedulingTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Social networking time\nThe total 'social networking' time logged.", "description": "The total 'social networking' time logged.", "details": {"Slug": "social_networking_time", "Filter code": "Rescuetime.dailySummary.SocialNetworkingTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Design and composition time\nThe total 'design and composition' time logged.", "description": "The total 'design and composition' time logged.", "details": {"Slug": "design_and_composition_time", "Filter code": "Rescuetime.dailySummary.DesignAndCompositionTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Entertainment time\nThe total 'entertainment' time logged.", "description": "The total 'entertainment' time logged.", "details": {"Slug": "entertainment_time", "Filter code": "Rescuetime.dailySummary.EntertainmentTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "News time\nThe total 'news' time logged.", "description": "The total 'news' time logged.", "details": {"Slug": "news_time", "Filter code": "Rescuetime.dailySummary.NewsTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Software development time\nThe total 'software development' time.", "description": "The total 'software development' time.", "details": {"Slug": "software_development_time", "Filter code": "Rescuetime.dailySummary.SoftwareDevelopmentTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Reference and learning time\nThe total 'reference and learning' time logged.", "description": "The total 'reference and learning' time logged.", "details": {"Slug": "reference_and_learning_time", "Filter code": "Rescuetime.dailySummary.ReferenceAndLearningTime", "Type": "String", "Example": "3h 30m"}}, {"section": "Ingredients", "title": "Shopping time\nThe total 'shopping' time logged.", "description": "The total 'shopping' time logged.", "details": {"Slug": "shopping_time", "Filter code": "Rescuetime.dailySummary.ShoppingTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Utilities time\nThe total 'utilities' time logged.", "description": "The total 'utilities' time logged.", "details": {"Slug": "utilities_time", "Filter code": "Rescuetime.dailySummary.UtilitiesTime", "Type": "String", "Example": "30m 30s"}}, {"section": "Ingredients", "title": "Productivity pulse\nThe average Productivity score for the day.", "description": "The average Productivity score for the day.", "details": {"Slug": "productivity_pulse", "Filter code": "Rescuetime.dailySummary.ProductivityPulse", "Type": "String", "Example": "85"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "if (Rescuetime.dailySummary.TotalTime > 0) {\n  var journalBody = \"Total time tracked: \" + Rescuetime.dailySummary.TotalTime;\n  if (Rescuetime.dailySummary.AllProductiveTime > 0) {\n    journalBody += \"\\nAll productive time: \" + Rescuetime.dailySummary.AllProductiveTime;\n  }\n  if (Rescuetime.dailySummary.VeryProductiveTime > 0) {\n    journalBody += \"\\nVery productive time: \" + Rescuetime.dailySummary.VeryProductiveTime;\n  }\n  if (Rescuetime.dailySummary.ProductiveTime > 0) {\n    journalBody += \"\\nProductive time: \" + Rescuetime.dailySummary.ProductiveTime;\n  }\n  if (Rescuetime.dailySummary.NeutralTime > 0) {\n    journalBody += \"\\nNeutral time: \" + Rescuetime.dailySummary.NeutralTime;\n  }\n  if (Rescuetime.dailySummary.DistractingTime > 0) {\n    journalBody += \"\\nDistracting time: \" + Rescuetime.dailySummary.DistractingTime;\n  }\n  if (Rescuetime.dailySummary.VeryDistractingTime > 0) {\n    journalBody += \"\\nVery distracting time: \" + Rescuetime.dailySummary.VeryDistractingTime;\n  }\n  DayOne.createJournalEntry.setBody(journalBody).skip();\n}", "intent": "Automates creation of a journal entry in Day One with summary details from RescueTime."}
{"original_description": "Record Spotify tracks that you save to your Unforgettable Me account.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_saved_track"}, "trigger_details": [{"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newSavedTrack.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newSavedTrack.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newSavedTrack.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newSavedTrack.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newSavedTrack.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Saved at\nThe time at which the track was saved.", "description": "The time at which the track was saved.", "details": {"Slug": "saved_at", "Filter code": "Spotify.newSavedTrack.SavedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newSavedTrack.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newSavedTrack.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Spotify.newSavedTrack.TrackName !== \"\") {\n  var body = '{\"start_date\": \"' + Meta.currentUserTime.date() + '\", \"end_date\": \"' + Meta.currentUserTime.date() + '\", \"track_name\": \"' + Spotify.newSavedTrack.TrackName + '\", \"artist_name\": \"' + Spotify.newSavedTrack.ArtistName + '\", \"album_name\": \"' + Spotify.newSavedTrack.AlbumName + '\", \"album_cover_url\": \"' + Spotify.newSavedTrack.AlbumCoverURL + '\"}';\n  UnforgettableMe.uploadData.setBody(body).setAugmenterName(// Track name as augmenter name);\n}", "intent": "Record Spotify tracks that you save to your Unforgettable Me account by uploading the track information as a new data entry."}
{"original_description": "Self explanatory", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_public_favorite_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newPublicFavoriteTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newPublicFavoriteTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newPublicFavoriteTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newPublicFavoriteTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newPublicFavoriteTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newPublicFavoriteTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "put.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "putio.new_transfer", "Filter code method": "Putio.newTransfer.skip(string?: reason)", "Runtime method": "runAction(\"putio.new_transfer\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Other", "description": "Text input > Other", "details": {"Label": "What URL?", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Putio.newTransfer.setUrl(string: url)"}}, {"section": "Action fields", "title": "Folder\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which folder ID?", "Helper text": "File will be downloaded into this folder. Folder ID can be found in the address bar when the folder is open in your browser. If the folder with given ID does not exist, the files will be downloaded into your default download folder.", "Slug": "folder_id", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (Soundcloud.newPublicFavoriteTrack.Title !== \"\") {\n  var title = Soundcloud.newPublicFavoriteTrack.Title;\n  var description = Soundcloud.newPublicFavoriteTrack.Description;\n  var tags = Soundcloud.newPublicFavoriteTrack.Tags;\n  var trackUrl = Soundcloud.newPublicFavoriteTrack.TrackUrl;\n  var username = Soundcloud.newPublicFavoriteTrack.Username;\n  var userProfileUrl = Soundcloud.newPublicFavoriteTrack.UserProfileUrl;\n  var imageUrl = Soundcloud.newPublicFavoriteTrack.ImageUrl;\n  var embedCode = Soundcloud.newPublicFavoriteTrack.EmbedCode;\n  var createdAt = Soundcloud.newPublicFavoriteTrack.CreatedAt;\n  var trackId = Soundcloud.newPublicFavoriteTrack.TrackId;\n  var userId = Soundcloud.newPublicFavoriteTrack.UserId;\n\n  Putio.newTransfer.skip(\"New favorite track detected\");\n  Putio.newTransfer.setUrl(trackUrl);\n}", "intent": "Check if it's a new favorite track on SoundCloud and create a transfer to Put.io."}
{"original_description": "This Applet will change the color of your hue lights to match the dominant colors found in the cover art image of the show you last saved on Spotify.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_saved_show"}, "trigger_details": [{"section": "Ingredients", "title": "Show name\nThe name of the show.", "description": "The name of the show.", "details": {"Slug": "show_name", "Filter code": "Spotify.newSavedShow.ShowName", "Type": "String", "Example": "Darknet Diaries"}}, {"section": "Ingredients", "title": "Show description\nThe description of the show.", "description": "The description of the show.", "details": {"Slug": "show_description", "Filter code": "Spotify.newSavedShow.ShowDescription", "Type": "String", "Example": "Explore the dark side of the Internet with host Jack Rhysider as he takes you on a journey through the chilling world of privacy hacks, data breaches, and cyber crime. The masterful criminal hackers who dwell on the dark side show us just how vulnerable w"}}, {"section": "Ingredients", "title": "Show url\nThe URL to the show on Spotify.", "description": "The URL to the show on Spotify.", "details": {"Slug": "show_url", "Filter code": "Spotify.newSavedShow.ShowUrl", "Type": "Web URL", "Example": "https://open.spotify.com/show/4XPl3uEEL9hvqMkoZrzbx5"}}, {"section": "Ingredients", "title": "Show cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "show_cover_url", "Filter code": "Spotify.newSavedShow.ShowCoverUrl", "Type": "Image URL", "Example": "https://i.scdn.co/image/53ba2adaaf2d3e47898aed9edb64026145032e7b"}}, {"section": "Ingredients", "title": "Saved at\nThe time at which the show was saved.", "description": "The time at which the show was saved.", "details": {"Slug": "saved_at", "Filter code": "Spotify.newSavedShow.SavedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Show\nThe show's ID.", "description": "The show's ID.", "details": {"Slug": "show_id", "Filter code": "Spotify.newSavedShow.ShowId", "Type": "String", "Example": "123"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_from_image_all_hue", "Filter code method": "Hue.setColorFromImageAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_from_image_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Color mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color mode", "Slug": "color_mode", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorFromImageAllHue.setColor Mode(string: color_mode)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorFromImageAllHue.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Every time a new file is saved in the specified Dropbox folder, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/ifttt_wordmark.png"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newFileInFolder.Filename", "Type": "String", "Example": "coolbeans.jpg"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newFileInFolder.FilenameNoExt", "Type": "String", "Example": "coolbeans"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Dropbox.newFileInFolder.Filename !== \"\") {\n  Daskeyboardq.signals.setName(Dropbox.newFileInFolder.Filename)\n  Daskeyboardq.signals.setMessage(\"New File: \" + Dropbox.newFileInFolder.Filename + \", Modified Date: \" + Dropbox.newFileInFolder.ModifiedDate)\n} else {\n  Daskeyboardq.signals.skip(\"No file name provided\")\n}", "intent": "When a new file is saved in the specified Dropbox folder, send a Signal to your Das Keyboard with the file name, modified date, and an optional message."}
{"original_description": "Copy links saved in Pocket as Link Cards to Notebook", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Zoho Notebook", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "notebook.create_link_card", "Filter code method": "Notebook.createLinkCard.skip(string?: reason)", "Runtime method": "runAction(\"notebook.create_link_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Notebook name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Notebook", "Slug": "notebook_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Notecard name\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notecard Name", "Slug": "notecard_name", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createLinkCard.setNotecard Name(string: notecard_name)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "LINK URL", "Slug": "link_url", "Required": "true", "Can have default value": "true", "Filter code method": "Notebook.createLinkCard.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Tags\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "TAGS", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createLinkCard.setTags(string: tags)"}}], "filter_code": "var Title = Pocket.newItemAddedPocket.Title\nvar Url = Pocket.newItemAddedPocket.Url\nvar Excerpt = Pocket.newItemAddedPocket.Excerpt\nvar ImageUrl = Pocket.newItemAddedPocket.ImageUrl\nvar Tags = Pocket.newItemAddedPocket.Tags\nvar AddedAt = Pocket.newItemAddedPocket.AddedAt\n\nif (Tags !== \"\") {\n  var notecardName = \"Link Card: \" + Title\n  Notebook.createLinkCard.setNotecard Name(notecardName).setLink Url(Url).setTags(Tags)\n} else {\n  Notebook.createLinkCard.skip(\"No tags found\")\n}", "intent": "When a new item is added to Pocket, copy its title, URL, excerpt, image URL, and tags as Link Cards to Zoho Notebook."}
{"original_description": "Whenever you post a new photo on Instagram, a copy will be saved to a folder in Dropbox. Note: only works for single photo posts.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "var Caption = Instagram.anyNewPhotoByYou.Caption\nvar Url = Instagram.anyNewPhotoByYou.Url\nvar SourceUrl = Instagram.anyNewPhotoByYou.SourceUrl\nvar CreatedAt = Instagram.anyNewPhotoByYou.CreatedAt\nvar EmbedCode = Instagram.anyNewPhotoByYou.EmbedCode\n\nif (Caption !== \"\" && Url !== \"\") {\n  var filePath = \"some/folder/path\" // adjust to your desired path\n  Dropbox.addFileFromUrl.setPath(filePath)\n  Dropbox.addFileFromUrl.setUrl(SourceUrl).skip(\"No URL provided\")\n} else {\n  Dropbox.addFileFromUrl.skip(\"Invalid data received\")\n}", "intent": "Whenever a new photo is posted on Instagram, the corresponding file will be saved to a specified folder in Dropbox."}
{"original_description": "Self explanatory", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.following_new_public_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.followingNewPublicTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.followingNewPublicTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.followingNewPublicTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.followingNewPublicTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.followingNewPublicTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.followingNewPublicTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.followingNewPublicTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.followingNewPublicTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.followingNewPublicTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.followingNewPublicTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.followingNewPublicTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "put.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "putio.new_transfer", "Filter code method": "Putio.newTransfer.skip(string?: reason)", "Runtime method": "runAction(\"putio.new_transfer\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Other", "description": "Text input > Other", "details": {"Label": "What URL?", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Putio.newTransfer.setUrl(string: url)"}}, {"section": "Action fields", "title": "Folder\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which folder ID?", "Helper text": "File will be downloaded into this folder. Folder ID can be found in the address bar when the folder is open in your browser. If the folder with given ID does not exist, the files will be downloaded into your default download folder.", "Slug": "folder_id", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (Soundcloud.followingNewPublicTrack.Tags.includes(\"killer\")) {\n  Putio.newTransfer.skip(\"Track contains killer tag\")\n} else {\n  // Set URL\n  var url = Soundcloud.followingNewPublicTrack.TrackUrl;\n  Putio.newTransfer.setUrl(url);\n  \n  // Set folder ID\n  if (Soundcloud.followingNewPublicTrack.Tags.includes(\"noise\")) {\n    Putio.newTransfer.setFolderId(\"folder_id_for_noise_tracks\");\n  } else {\n    Putio.newTransfer.setFolderId(\"default_folder_id\");\n  }\n  \n  Putio.newTransfer.runAction();\n}", "intent": "When a new public track is added to SoundCloud, check if the track's tags contain the keyword 'killer'. If they do, skip the action."}
{"original_description": "An entry is saved with title, description, and URL.", "trigger_channel": "Instapaper", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instapaper.new_liked_item"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the liked item.", "description": "The title of the liked item.", "details": {"Slug": "title", "Filter code": "Instapaper.newLikedItem.Title", "Type": "String", "Example": "The Computer for the 21st Century"}}, {"section": "Ingredients", "title": "Description\nThe description of the liked item.", "description": "The description of the liked item.", "details": {"Slug": "description", "Filter code": "Instapaper.newLikedItem.Description", "Type": "String", "Example": "The most profound technologies are those that disappear. They weave themselves into the fabric of everyday life until they are indistinguishable from it. Consider writing, perhaps the first information..."}}, {"section": "Ingredients", "title": "Url\nThe URL of the liked item.", "description": "The URL of the liked item.", "details": {"Slug": "url", "Filter code": "Instapaper.newLikedItem.URL", "Type": "Web URL", "Example": "http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instapaper.newLikedItem.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Day One", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "day_one.create_journal_entry", "Filter code method": "DayOne.createJournalEntry.skip(string?: reason)", "Runtime method": "runAction(\"day_one.create_journal_entry\", {})"}, "action_details": [{"section": "Action fields", "title": "Journal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Journal?", "Helper text": "Select a specific Journal. New Journals must be created in the Day One app.", "Slug": "journal_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "Add plain text and Markdown, HTML will be stripped.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setBody(string: body)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated, spaces are ok.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setTags(string: tags)"}}, {"section": "Action fields", "title": "Latitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Latitude", "Helper text": "The latitude of the entry location.", "Slug": "latitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Longitude\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Longitude", "Helper text": "The longitude of the entry location.", "Slug": "longitude", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Placename\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Place Name", "Helper text": "The name of the entry location.", "Slug": "placename", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Image\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image", "Required": "false", "Can have default value": "true", "Filter code method": "DayOne.createJournalEntry.setImage(string: image)"}}], "filter_code": "", "intent": ""}
{"original_description": "When you mark some item as favorite in Pocket, it will be automatically saved to Raindrop.io collection", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_favorite_item_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newFavoriteItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newFavoriteItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newFavoriteItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newFavoriteItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newFavoriteItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newFavoriteItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Raindrop.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "raindrop.raindrop", "Filter code method": "Raindrop.raindrop.skip(string?: reason)", "Runtime method": "runAction(\"raindrop.raindrop\", {})"}, "action_details": [{"section": "Action fields", "title": "Link\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "link", "Required": "true", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setLink(string: link)"}}, {"section": "Action fields", "title": "Collectionid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Collection", "Slug": "collectionId", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Excerpt\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Slug": "excerpt", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setExcerpt(string: excerpt)"}}, {"section": "Action fields", "title": "Cover\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Slug": "cover", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCover(string: cover)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Single or multiple separated by comma", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTags(string: tags)"}}, {"section": "Action fields", "title": "Created\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Creation date", "Slug": "created", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCreated(string: created)"}}], "filter_code": "if (Pocket.newFavoriteItemPocket.Title !== \"\") {\n  Raindrop.raindrop.setTitle(Root.getVar(\"Title\"));\n}\nRaindrop.raindrop.setLink(Pocket.newFavoriteItemPocket.Url);\nRaindrop.raindrop.setExcerpt(Pocket.newFavoriteItemPocket.Excerpt);\nRaindrop.raindrop.setImageUrl(Pocket.newFavoriteItemPocket.ImageUrl);\nif (Pocket.newFavoriteItemPocket.Tags !== \"\") {\n  Raindrop.raindrop.setTags(Root.getVar(\"Tags\"));\n}\nif (Pocket.newFavoriteItemPocket.AddedAt !== \"\") {\n  Raindrop.raindrop.setCreated(Root.getVar(\"AddedAt\"));\n}\nRaindrop.raindrop.skip();", "intent": "When a favorite item is marked in Pocket, it will be automatically saved to Raindrop.io collection."}
{"original_description": "Whenever you post a new photo on Instagram, a copy will be saved to a folder in your Google Drive. Auto-pic archive! ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "// Check if new Instagram photo is available\nif (Instagram.anyNewPhotoByYou) {\n  // Extract caption, URL, source URL, created at, and embed code from the trigger data\n  var Caption = Instagram.anyNewPhotoByYou.Caption;\n  var Url = Instagram.anyNewPhotoByYou.Url;\n  var SourceUrl = Instagram.anyNewPhotoByYou.SourceUrl;\n  var CreatedAt = Instagram.anyNewPhotoByYou.CreatedAt;\n  var EmbedCode = Instagram.anyNewPhotoByYou.EmbedCode;\n\n  // Upload the file to Google Drive\n  if (Caption && Url && SourceUrl) {\n    // Set file URL, filename, and path in the action fields\n    GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Url);\n    var Filename = \"Instagram Photo - \" + CreatedAt;\n    GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(Filename);\n    var Path = \"IFTTT\";\n    GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(Path);\n\n    // Skip the action if any of the required fields are missing\n  } else {\n    GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"Incomplete photo metadata\");\n  }\n}", "intent": "This IFTTT automation saves a copy of your new Instagram photos to a folder in Google Drive. The filter code checks if the photo was posted and extracts the necessary information (caption, URL, source URL, created at, and embed code). If all conditions are met, it uploads the file to Google Drive."}
{"original_description": "Record to Unforgettable Me any new item saved to pocket ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var Title = Pocket.newItemAddedPocket.Title\nvar Url = Pocket.newItemAddedPocket.Url\nvar Excerpt = Pocket.newItemAddedPocket.Excerpt\nvar ImageUrl = Pocket.newItemAddedPocket.ImageUrl\nvar Tags = Pocket.newItemAddedPocket.Tags\nvar AddedAt = Pocket.newItemAddedPocket.AddedAt\n\nif (Title !== \"\" && Url !== \"\" && Excerpt !== \"\" && ImageUrl !== \"\" && Tags !== \"\") {\n  UnforgettableMe.uploadData.setBody({\"start_date\": AddedAt, \"end_date\": AddedAt, \"body\": {}})\n  UnforgettableMe.uploadData.setAugmenterName(\"PocketItem\")\n} else {\n  UnforgettableMe.uploadData.skip(\"Incomplete item data\")\n}", "intent": "The IFTTT automation is triggered when a new item is saved to Pocket. It captures the title, URL, excerpt, image URL, tags, and added at time of the new item. If these values are recorded, it then uploads the data to Unforgettable Me along with the body text input (in JSON format) and an augmenter name."}
{"original_description": "The spreadsheet is saved in a folder called \"Buffer\" in your Google Drive and will automatically track every single new post created in Buffer.", "trigger_channel": "Buffer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "buffer.new_status_item_buffer"}, "trigger_details": [{"section": "Ingredients", "title": "Text\nThe text of the posts, including any links.", "description": "The text of the posts, including any links.", "details": {"Slug": "Text", "Filter code": "Buffer.newStatusItemBuffer.Text", "Type": "String", "Example": "Having a sandwich"}}, {"section": "Ingredients", "title": "First link url\nThe first link included in the post.", "description": "The first link included in the post.", "details": {"Slug": "FirstLinkUrl", "Filter code": "Buffer.newStatusItemBuffer.FirstLinkUrl", "Type": "String", "Example": "http://wadesabout.tumblr.com/"}}, {"section": "Ingredients", "title": "Due at\nDate and time the post is scheduled to go out.", "description": "Date and time the post is scheduled to go out.", "details": {"Slug": "DueAt", "Filter code": "Buffer.newStatusItemBuffer.DueAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Created at\nDate and time the post was added to Buffer.", "description": "Date and time the post was added to Buffer.", "details": {"Slug": "CreatedAt", "Filter code": "Buffer.newStatusItemBuffer.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Buffer.newStatusItemBuffer.DueAt) {\n  var filename = \"Buffer Posts\";\n  var formatted_row = Buffer.newStatusItemBuffer.Text + \"|||\" + Buffer.newStatusItemBuffer.FirstLinkUrl;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename).setFormattedRow(formatted_row).append();\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No scheduled posts to save\")\n}", "intent": "Automatically save new Buffer posts to a Google Sheets spreadsheet."}
{"original_description": "It's easy to automatically backup your Facebook Page photos! For any new photo uploaded by you, a copy will be saved in a Dropbox folder.", "trigger_channel": "Facebook Pages", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "facebook_pages.new_photo_from_page"}, "trigger_details": [{"section": "Ingredients", "title": "Page name\nYour Facebook Page's name.", "description": "Your Facebook Page's name.", "details": {"Slug": "PageName", "Filter code": "FacebookPages.newPhotoFromPage.PageName", "Type": "String", "Example": "The ifttt Office"}}, {"section": "Ingredients", "title": "Link\nThe link to the photo's FacebookPages page, may be private.", "description": "The link to the photo's FacebookPages page, may be private.", "details": {"Slug": "Link", "Filter code": "FacebookPages.newPhotoFromPage.Link", "Type": "String", "Example": "http://www.facebook.com/#!/photo.php?pid=33943077&id=7302486"}}, {"section": "Ingredients", "title": "Image source\nThe URL to the full sized version of the photo itself.", "description": "The URL to the full sized version of the photo itself.", "details": {"Slug": "ImageSource", "Filter code": "FacebookPages.newPhotoFromPage.ImageSource", "Type": "String", "Example": "http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg"}}, {"section": "Ingredients", "title": "Caption\nThe photo's caption.", "description": "The photo's caption.", "details": {"Slug": "Caption", "Filter code": "FacebookPages.newPhotoFromPage.Caption", "Type": "String", "Example": "Wow what a fun night!"}}, {"section": "Ingredients", "title": "Created at\nDate and time photo was uploaded.", "description": "Date and time photo was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "FacebookPages.newPhotoFromPage.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Page url\nThe link to the main Facebook Page.", "description": "The link to the main Facebook Page.", "details": {"Slug": "PageUrl", "Filter code": "FacebookPages.newPhotoFromPage.PageUrl", "Type": "String", "Example": "http://www.facebook.com/pages/The-ifttt-office/108073145941483"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "if (FacebookPages.newPhotoFromPage.PageName !== \"\") {\n  var fileName = FacebookPages.newPhotoFromPage.ImageSource.match(/[^\\/]+$/)[0];\n  var filePath = \"IFTTT/\" + fileName;\n  Dropbox.addFileFromUrl.setUrl(FacebookPages.newPhotoFromPage.ImageSource)\n    .setFilename(fileName)\n    .setPath(filePath);\n}", "intent": "Automatically backup new Facebook Page photos in a Dropbox folder."}
{"original_description": "Any Article that matches your search will be saved to Instapaper", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Nytimes.newArticleMatchingSearch.Title !== \"\") {\n  Instapaper.saveItem.setUrl(Nytimes.newArticleMatchingSearch.ArticleUrl)\n    .setDescription(Nytimes.newArticleMatchingSearch.Blurb)\n    .setTitle(Nytimes.newArticleMatchingSearch.Title)\n    .setTags(Nytimes.newArticleMatchingSearch.Keywords.split(\", \"))\n    .save()\n} else {\n  Instapaper.saveItem.skip(\"No title provided\")\n}", "intent": "Save articles from The New York Times matching the search term to Instapaper."}
{"original_description": "Save the hourly average of your device's readings directly to a Google Spreadsheet. Every hour, when a new average of the past 60 minutes of readings is available for your device, it will be automatically saved to a spreadsheet.", "trigger_channel": "Kaiterra", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kaiterra.laseregg_aqi"}, "trigger_details": [{"section": "Trigger fields", "title": "Device udid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to monitor?", "Slug": "device_udid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Kaiterra.lasereggAqi.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Aqi\nCurrent AQI", "description": "Current AQI", "details": {"Slug": "aqi", "Filter code": "Kaiterra.lasereggAqi.Aqi", "Type": "String", "Example": "10"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "", "intent": ""}
{"original_description": "Save all of your device's readings directly to a Google Spreadsheet! Whenever new readings are available for your device, they will be automatically saved to a spreadsheet.", "trigger_channel": "Kaiterra", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kaiterra.laseregg_aqi"}, "trigger_details": [{"section": "Trigger fields", "title": "Device udid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to monitor?", "Slug": "device_udid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Kaiterra.lasereggAqi.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Aqi\nCurrent AQI", "description": "Current AQI", "details": {"Slug": "aqi", "Filter code": "Kaiterra.lasereggAqi.Aqi", "Type": "String", "Example": "10"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var CreatedAt = Kaiterra.lasereggAqi.CreatedAt;\nvar Aqi = Kaiterra.lasereggAqi.Aqi;\nvar DeviceUdid = Device_udid;\n\nif (DeviceUdid !== \"\") {\n  var filename = \"Kaiterra_\" + DeviceUdid;\n  var formatted_row = CreatedAt + \"|||\" + Aqi;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename).setFormattedRow(formatted_row);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No device selected\");\n}", "intent": "Automatically save Kaiterra device readings to a Google Spreadsheet. Whenever new readings are available, they will be saved to a spreadsheet."}
{"original_description": "When public air quality data is available for a location you select, this data is saved in a Google Spreadsheet.", "trigger_channel": "Kaiterra", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kaiterra.location_aqi"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "What is your location?", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Kaiterra.locationAqi.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Aqi\nThe current aqi value in your location", "description": "The current aqi value in your location", "details": {"Slug": "aqi", "Filter code": "Kaiterra.locationAqi.Aqi", "Type": "String", "Example": "20"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var createdAt = Kaiterra.locationAqi.CreatedAt;\nvar aqiValue = Kaiterra.locationAqi.Aqi;\n\nif (createdAt && aqiValue) {\n  var formattedRow = \"|||Location: |||\" + aqiValue + \"|| AQI: \" + createdAt;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Public Air Quality Data\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No data available\")\n}", "intent": "When public air quality data is available, save it in a Google Spreadsheet."}
{"original_description": "This trigger will start your dryer at the optimal time. You set which dryer should activate which program. The Trigger will then start the when electricity is cheap.", "trigger_channel": "True Energy Smart Home Denmark", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "True_Energy_DK.electricity_price_cheap"}, "trigger_details": [{"section": "Trigger fields", "title": "Area\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Region", "Helper text": "Region you wish to monitor", "Slug": "area", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Region\nDenmark Region being monitored", "description": "Denmark Region being monitored", "details": {"Slug": "area", "Filter code": "TrueEnergyDK.electricityPriceCheap.Region", "Type": "String", "Example": "West Denmark"}}, {"section": "Ingredients", "title": "Valid from\nTime at which electricity price changes", "description": "Time at which electricity price changes", "details": {"Slug": "valid_from", "Filter code": "TrueEnergyDK.electricityPriceCheap.ValidFrom", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Price\nElectricity price per kWh in DKK", "description": "Electricity price per kWh in DKK", "details": {"Slug": "price", "Filter code": "TrueEnergyDK.electricityPriceCheap.Price", "Type": "String", "Example": "167.17"}}, {"section": "Ingredients", "title": "Co2 emission\nCO2 emission per kWh in grams", "description": "CO2 emission per kWh in grams", "details": {"Slug": "co2_emission", "Filter code": "TrueEnergyDK.electricityPriceCheap.Co2Emission", "Type": "String", "Example": "108.77"}}], "action_channel": "Home Connect Dryer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_dryer.dryer_start_program", "Filter code method": "HcDryer.dryerStartProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_dryer.dryer_start_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dryer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Drying target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Drying target", "Helper text": "Please note that not every drying target is supported by each program. For more information please check your user manual.", "Slug": "drying_target", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get relevant ingredients\nvar Area = TrueEnergyDK.electricityPriceCheap.Region;\nvar ValidFrom = new Date(TrueEnergyDK.electricityPriceCheap.ValidFrom);\nvar Price = TrueEnergyDK.electricityPriceCheap.Price;\nvar Co2Emission = TrueEnergyDK.electricityPriceCheap.Co2Emission;\n\n// Check if it's the optimal time to start the dryer\nif (ValidFrom <= new Date() && Price < 200) {\n  // Get the selected dryer and program\n  var HaId = \"Select Region\";\n  var Program = \"Default Program\";\n  var DryingTarget = \"Normal Drying\";\n  \n  // Start the selected program on the selected dryer\n  HcDryer.dryerStartProgram(HaId, Program).then(function() {\n    console.log(\"Dryer started with program: \" + Program);\n  }).catch(function(error) {\n    console.error(\"Error starting dryer: \", error);\n  });\n} else {\n  // Skip the action if it's not the optimal time\n  HcDryer.dryerStartProgram.skip(\"Not at optimal price\");\n}", "intent": "This IFTTT automation triggers when electricity price becomes cheap in a specific region, then starts the selected dryer program."}
{"original_description": "Too busy to check your phone? With this applet, your home will elegantly let you know when your laundry is ready for hanging out. ", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcWasher.washerCycleFinished.ha_id != null) {\n  var CreatedAt = new Date(HcWasher.washerCycleFinished.CreatedAt);\n  if (CreatedAt.getHours() < 7 || CreatedAt.getHours() > 22) {\n    Hue.blinkAllHue.skip(\"Outside of active hours\")\n  } else {\n    Hue.blinkAllHue(CreatedAt.toString())\n  }\n}", "intent": "This applet checks if the Home Connect Washer has finished its cycle and the user selected a specific washer. If so, it uses Philips Hue to blink all lights with a reason message."}
{"original_description": "Notify me when my INSTAR Cloud storage will expire in the specified amount of days.", "trigger_channel": "INSTAR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instar.expiration"}, "trigger_details": [{"section": "Trigger fields", "title": "Expiration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Cloud storage will expire after", "Helper text": "Days before expiration", "Slug": "expiration", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instar.expiration.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var ExpirationDays = $$Expiration$$;\nif (ExpirationDays > 0) {\n  var CreatedAt = new Date(Instar.expiration.CreatedAt);\n  var ExpireDate = new Date(CreatedAt.getTime() + ExpirationDays * 24 * 60 * 60 * 1000);\n  if (ExpireDate < Meta.currentUserTime) {\n    IfNotifications.sendNotification.skip(\"Cloud storage expiration is in the past\");\n  } else {\n    var Message = \"Alert: Cloud storage will expire in \" + ExpirationDays + \" days\";\n    IfNotifications.sendNotification.setMessage(Message);\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Expiration period is invalid\");\n}", "intent": "Notify the user when their INSTAR Cloud storage will expire in a specified number of days, based on the provided expiration dropdown list."}
{"original_description": "Every morning you will receive a simple weather report notification at 7 AM. Keep in mind this Applet requires the IFTTT app.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Meta.currentUserTime.hour() === 7) {\n  var message = \"Today's weather: \" + Weather.currentWeatherAtTime.CurrentTempFahrenheit + \"°F (\" + Weather.currentWeatherAtTime.CurrentCondition + \") with a high of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and a low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F.\"\n  IfNotifications.sendNotification.setMessage(message)\n} else {\n  IfNotifications.sendNotification.skip(\"Not 7 AM yet\")\n}", "intent": "This Applet will send a weather report notification at 7 AM every morning, using Weather Underground's current weather data."}
{"original_description": "Never be left in the dark. Whenever the sun starts to set, your Philips Hue bulbs will automatically turn on. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.Condition !== \"Rain\" && Weather.sunSets.TempFahrenheit < 72) {\n  Hue.turnOffAllHue.skip(\"Not a good weather for lighting\")\n} else {\n  Hue.turnOffAllHue()\n}", "intent": "Automatically turn off all Philips Hue lights when the sun sets, unless it's raining or the temperature is too high."}
{"original_description": "Each day at the time that you choose below, this Applet will mute your Android device. Don't forget to unmute it in the morning!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "var CheckTime = DateAndTime.everyWeekdayAt.CheckTime\nvar DayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek\n\nif (weekdays.includes(DayOfWeek) && Time === \"\" + CheckTime.slice(11, 16)) {\n  AndroidDevice.muteDevice()\n} else {\n  AndroidDevice.muteDevice.skip(\"Not a weekday or time not matched\")\n}", "intent": "Check if it's a weekday and the current time matches the chosen time, then mute the Android device. If not, skip the action."}
{"original_description": "This Applet will save your Flickr photos in one place.", "trigger_channel": "Flickr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flickr.any_new_public_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Flickr.anyNewPublicPhoto.Title", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Description\nOptional photo description.", "description": "Optional photo description.", "details": {"Slug": "Description", "Filter code": "Flickr.anyNewPublicPhoto.Description", "Type": "String", "Example": "Taken at my birthday party!"}}, {"section": "Ingredients", "title": "Flickr url\nThe long URL to the photo's Flickr page.", "description": "The long URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrl", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrl", "Type": "String", "Example": "http://www.flickr.com/photos/sh4de/5197127926/"}}, {"section": "Ingredients", "title": "Flickr url short\nThe shortened URL to the photo's Flickr page.", "description": "The shortened URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrlShort", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrlShort", "Type": "String", "Example": "http://flic.kr/p/4mdhBE"}}, {"section": "Ingredients", "title": "Source url\nURL to the largest available flickr image file.", "description": "URL to the largest available flickr image file.", "details": {"Slug": "SourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.SourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Original source url\nURL to the orginal image file if available.", "description": "URL to the orginal image file if available.", "details": {"Slug": "OriginalSourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.OriginalSourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Uploaded date\nDate and time the photo was uploaded.", "description": "Date and time the photo was uploaded.", "details": {"Slug": "UploadedDate", "Filter code": "Flickr.anyNewPublicPhoto.UploadedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Taken date\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "Flickr.anyNewPublicPhoto.TakenDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Tags\nTags added to the photo.", "description": "Tags added to the photo.", "details": {"Slug": "Tags", "Filter code": "Flickr.anyNewPublicPhoto.Tags", "Type": "String", "Example": "baby, pumpkin"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "var Title = Flickr.anyNewPublicPhoto.Title\nvar Description = Flickr.anyNewPublicPhoto.Description || \"\"\nvar FlickrUrl = Flickr.anyNewPublicPhoto.FlickrUrl\nvar FlickrUrlShort = Flickr.anyNewPublicPhoto.FlickrUrlShort\nvar SourceUrl = Flickr.anyNewPublicPhoto.SourceUrl\nvar OriginalSourceUrl = Flickr.anyNewPublicPhoto.OriginalSourceUrl\nvar UploadedDate = Flickr.anyNewPublicPhoto.UploadedDate\nvar TakenDate = Flickr.anyNewPublicPhoto.TakenDate\nvar Tags = Flickr.anyNewPublicPhoto.Tags\n\nif (Tags.includes(\"baby\")) {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(SourceUrl)\n    .setFilename(Title.replace(/\\W+/g, \"_\") + \".jpg\")\n    .setPath(\"some/folder/path\") // Defaults to \"IFTTT\" if not set\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"No baby tag detected\")\n}", "intent": "The Applet will save Flickr photos to Google Drive."}
{"original_description": "This Applet will turn your WeMo Light Switch on at sunset every day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsOnDiscrete", "Filter code method": "WemoLightSwitch.attributeLsOnDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsOnDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo light switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Sunset = Weather.sunSets.SunsetAt;\nif (new Date().getTime() > Sunset.getTime()) {\n  WemoLightSwitch.attributeLsOnDiscrete(\"true\", \"Sunset\");\n} else {\n  WemoLightSwitch.attributeLsOnDiscrete.skip(\"Not yet sunset\");\n}", "intent": "Turn the Wemo Light Switch on at sunset every day."}
{"original_description": "Keep your Facebook Page fresh and up-to-date with your latest Instagram photos. The pictures will be uploaded to an album called Instagram Photos.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Facebook Pages", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "facebook_pages.create_photo_page", "Filter code method": "FacebookPages.createPhotoPage.skip(string?: reason)", "Runtime method": "runAction(\"facebook_pages.create_photo_page\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setMessage(string: message)"}}, {"section": "Action fields", "title": "Album\nText input > Other", "description": "Text input > Other", "details": {"Label": "Album name", "Helper text": "Provide the name of an existing album, or leave blank for no album. If a non-existent album name is provided, you'll receive <a href=\"https://help.ifttt.com/hc/en-us/articles/5343334604187\" target=\"_blank\">this error</a>", "Slug": "album", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setAlbum(string: album)"}}], "filter_code": "var photoUrl = Instagram.anyNewPhotoByYou.Url\nvar caption = Instagram.anyNewPhotoByYou.Caption\nvar createdAt = Instagram.anyNewPhotoByYou.CreatedAt\nvar embedCode = Instagram.anyNewPhotoByYou.EmbedCode\n\nif (album === \"\") {\n  FacebookPages.createPhotoPage.setAlbum(\"Instagram Photos\")\n}\n\nFacebookPages.createPhotoPage.setPhotoUrl(photoUrl)\nFacebookPages.createPhotoPage.setMessage(caption + \" (\" + createdAt + \")\")\n\n// Additional actions can be added here for more complex logic.", "intent": "Upload Instagram photos to Facebook Page albums."}
{"original_description": "Like a track on Soundcloud to add it to your Spotify My Music collection (subject to track availability; this will add the first search result to your Spotify library).", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_public_favorite_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newPublicFavoriteTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newPublicFavoriteTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newPublicFavoriteTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newPublicFavoriteTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newPublicFavoriteTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newPublicFavoriteTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.save_a_track", "Filter code method": "Spotify.saveATrack.skip(string?: reason)", "Runtime method": "runAction(\"spotify.save_a_track\", {})"}, "action_details": [{"section": "Action fields", "title": "Search query\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Search query", "Helper text": "For maximum accuracy, include the song title here and the artist name in the &quot;Artist name&quot; field", "Slug": "search_query", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.saveATrack.setSearch Query(string: search_query)"}}, {"section": "Action fields", "title": "Artist name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Artist name", "Helper text": "Optional", "Slug": "artist_name", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.saveATrack.setArtist Name(string: artist_name)"}}], "filter_code": "if (Soundcloud.newPublicFavoriteTrack.Title) {\n  var searchQuery = \"title:\" + Soundcloud.newPublicFavoriteTrack.Title;\n  if (Soundcloud.newPublicFavoriteTrack.ArtistName) {\n    searchQuery += \", artist:\" + Soundcloud.newPublicFavoriteTrack.ArtistName;\n  }\n  Spotify.saveATrack.setSearchQuery(searchQuery);\n  Spotify.saveATrack.skip(\"Track added to Spotify My Music collection\");\n} else {\n  Spotify.saveATrack.skip(\"No track available\")\n}", "intent": "Check if it's possible to add a track from SoundCloud to Spotify My Music collection."}
{"original_description": "Select what time and day you want a simple phone call and this Applet will deliver it for you, right on time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "", "intent": ""}
{"original_description": "Automatically backup your Tumblr photos. For any photo you post, a copy will be uploaded in a Dropbox folder.", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_photo_post"}, "trigger_details": [{"section": "Trigger fields", "title": "Tumblelog\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tumblelog", "Helper text": "Enter the tumblelog name that this trigger should fire for", "Slug": "tumblelog", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Post body text\nThe post's body (text only)", "description": "The post's body (text only)", "details": {"Slug": "post_body_text", "Filter code": "Tumblr.newPhotoPost.PostBodyText", "Type": "String", "Example": "This is the body of a post. Neat."}}, {"section": "Ingredients", "title": "Url\nThe post URL", "description": "The post URL", "details": {"Slug": "url", "Filter code": "Tumblr.newPhotoPost.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post body html\nThe post's body (HTML)", "description": "The post's body (HTML)", "details": {"Slug": "post_body_html", "Filter code": "Tumblr.newPhotoPost.PostBodyHtml", "Type": "String", "Example": "<figure class=\"tmblr-full\"><img src=\"https://64.media.tumblr.com/a-photo.jpg\"></figure><p>This is an HTML body.</p>"}}, {"section": "Ingredients", "title": "Thumbnail url\nThe thumbnail image URL for the post", "description": "The thumbnail image URL for the post", "details": {"Slug": "thumbnail_url", "Filter code": "Tumblr.newPhotoPost.ThumbnailUrl", "Type": "Web URL", "Example": "https://64.media.tumblr.com/a18c8063bf9d095d99f12b51d3dd1eda/57803298a6ae7123-0a/s1280x1920/fb2fce67958156e2231da15522ddb6850e1559ff.gifv"}}, {"section": "Ingredients", "title": "Full image url\nThe full size image URL", "description": "The full size image URL", "details": {"Slug": "full_image_url", "Filter code": "Tumblr.newPhotoPost.FullImageUrl", "Type": "Image URL", "Example": "https://64.media.tumblr.com/fd654c32f041cb02c757b5646c1cf9e1/a4c5782524284f82-d5/s1280x1920/8e97caae5a975889b3e170e42ea064b68410300a.jpg"}}, {"section": "Ingredients", "title": "Post tags\nThe post's tags", "description": "The post's tags", "details": {"Slug": "post_tags", "Filter code": "Tumblr.newPhotoPost.PostTags", "Type": "String", "Example": "Sky,Earth,Wind,Fire"}}, {"section": "Ingredients", "title": "Post\nThe ID of the post that has been created", "description": "The ID of the post that has been created", "details": {"Slug": "post_id", "Filter code": "Tumblr.newPhotoPost.PostId", "Type": "String", "Example": "123456789"}}, {"section": "Ingredients", "title": "Tumblelog\nThe name of the Tumblelog that published the post", "description": "The name of the Tumblelog that published the post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newPhotoPost.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newPhotoPost.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "// Check if it's a weekday\nif (Meta.currentUserTime.day() != 6 && Meta.currentUserTime.day() != 7) {\n  // Get the post URL and thumbnail URL\n  var postUrl = Tumblr.newPhotoPost.Url;\n  var thumbnailUrl = Tumblr.newPhotoPost.ThumbnailUrl;\n\n  // Upload the photo to Dropbox\n  Dropbox.addFileFromUrl.skip(\"Failed to upload file\")(\n    \"url\", postUrl,\n    \"filename\", Tumblr.newPhotoPost.PostBodyText.replace(/[^a-zA-Z0-9]/g, \"_\").replace(/^ +/g, \"\").toLowerCase() + \".jpg\",\n    \"path\", \"some/folder/path\"\n  );\n}", "intent": "Automatically backup Tumblr photos by uploading a copy of each photo in a Dropbox folder."}
{"original_description": "This Applet will attempt to close your garage door or gate every night. If the garage door is already closed, it will remain closed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.close_door", "Filter code method": "Garagewifi.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.indexOf(\"PM\") !== -1) {\n  if (GarageWiFi.GarageDoorStatus === \"Open\") {\n    GarageWiFi.closeDoor(\"Closing garage door at night\")\n  }\n}", "intent": "The Applet closes the garage door or gate every night if it is not already closed."}
{"original_description": "This Applet will send a mobile notification from the IFTTT app for every new entry in the RSS Feed you copy/paste in the field below. The notification will open the IFTTT app where you can then click through to the new article.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle !== \"\") {\n  IfNotifications.sendNotification.setMessage(\"New Article: \" + Feed.newFeedItem.EntryTitle)\n} else {\n  IfNotifications.sendNotification.skip(\"No title available\")\n}", "intent": "This Applet will send a mobile notification from the IFTTT app for every new entry in the RSS Feed you copy/paste in the field below. The notification will open the IFTTT app where you can then click through to the new article."}
{"original_description": "When the Automower® change status, information about the status will be recorded in a Google spreadsheet.", "trigger_channel": "Husqvarna Automower®", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "automower.automower_newstatus"}, "trigger_details": [{"section": "Trigger fields", "title": "Automower\nDropdown list", "description": "Dropdown list", "details": {"Label": "Automower", "Slug": "automower", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Automower\nName of your mower", "description": "Name of your mower", "details": {"Slug": "automower", "Filter code": "Automower.automowerNewstatus.Automower", "Type": "String", "Example": "Apollo"}}, {"section": "Ingredients", "title": "Status\nCurrent status", "description": "Current status", "details": {"Slug": "status", "Filter code": "Automower.automowerNewstatus.Status", "Type": "String", "Example": "MOWING"}}, {"section": "Ingredients", "title": "Message\nText describing the status.", "description": "Text describing the status.", "details": {"Slug": "message", "Filter code": "Automower.automowerNewstatus.Message", "Type": "String", "Example": "Your Automower needs your help in the lawn."}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Automower.automowerNewstatus.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Timestamp\nTimestamp", "description": "Timestamp", "details": {"Slug": "timestamp", "Filter code": "Automower.automowerNewstatus.Timestamp", "Type": "String", "Example": "1548251631750"}}, {"section": "Ingredients", "title": "Latitude\nLatitude for Automower location", "description": "Latitude for Automower location", "details": {"Slug": "latitude", "Filter code": "Automower.automowerNewstatus.Latitude", "Type": "String", "Example": "57.7907083"}}, {"section": "Ingredients", "title": "Longitude\nLongitude for Automower location", "description": "Longitude for Automower location", "details": {"Slug": "longitude", "Filter code": "Automower.automowerNewstatus.Longitude", "Type": "String", "Example": "14.28353"}}, {"section": "Ingredients", "title": "Google maps url\nLink to Google maps with a pin on the location of Automower", "description": "Link to Google maps with a pin on the location of Automower", "details": {"Slug": "google_maps_url", "Filter code": "Automower.automowerNewstatus.GoogleMapsUrl", "Type": "String", "Example": "https://www.google.com/maps/search/?api=1&query=57.7907083,14.28353"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var filename = \"Automower Status\"\nvar formatted_row = \"|||\" + Automower.automowerNewstatus.Automower + \"|||\" + Automower.automowerNewstatus.Status + \"|||\" + Automower.automowerNewstatus.Message + \"|||\" + Automower.automowerNewstatus.CreatedAt + \"|||\" + Automower.automowerNewstatus.Timestamp + \"|||\" + Automower.automowerNewstatus.Latitude + \"|||\" + Automower.automowerNewstatus.Longitude + \"|||\" + Automower.automowerNewstatus.GoogleMapsUrl\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(filename).setFormattedRow(formatted_row)", "intent": "Record Automower status in a Google spreadsheet whenever its status changes."}
{"original_description": "This Applet will blink your Hue lights when Roomba® completes a cleaning job", "trigger_channel": "iRobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "irobot.mission_report"}, "trigger_details": [{"section": "Trigger fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Square footage\nSquare Footage of the job.", "description": "Square Footage of the job.", "details": {"Slug": "square_footage", "Filter code": "Irobot.missionReport.SquareFootage", "Type": "String", "Example": "975"}}, {"section": "Ingredients", "title": "Timestamp\nTime the job completed.", "description": "Time the job completed.", "details": {"Slug": "iso_timestamp", "Filter code": "Irobot.missionReport.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Start time\nThe time the job started.", "description": "The time the job started.", "details": {"Slug": "start_time", "Filter code": "Irobot.missionReport.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Minutes running\nThe number of minutes the robot spent running.", "description": "The number of minutes the robot spent running.", "details": {"Slug": "minutes_cleaning", "Filter code": "Irobot.missionReport.MinutesRunning", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Minutes paused\nThe number of minutes the robot spent paused.", "description": "The number of minutes the robot spent paused.", "details": {"Slug": "minutes_paused", "Filter code": "Irobot.missionReport.MinutesPaused", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Minutes charging\nThe number of minutes the robot spent charging.", "description": "The number of minutes the robot spent charging.", "details": {"Slug": "minutes_charging", "Filter code": "Irobot.missionReport.MinutesCharging", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Dirt detect events\nThe number of dirt detect events in the job.", "description": "The number of dirt detect events in the job.", "details": {"Slug": "dirt_detect_events", "Filter code": "Irobot.missionReport.DirtDetectEvents", "Type": "String", "Example": "2"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Irobot.missionReport.MissionStatus === \"Complete\") {\n  var reason = \"Roomba has completed the cleaning job\"\n  if (Hue.blinkAllHue) {\n    Hue.blinkAllHue(reason)\n  } else {\n    Hue.blinkAllHue.skip(reason)\n  }\n}", "intent": "This Applet will blink your Hue lights when Roomba completes a cleaning job."}
{"original_description": "This will automatically turn on the WiZ light(s) of your choice a few minutes before Sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt;\nvar TimeNow = new Date();\nif (TimeNow.getTime() > SunsetTime.getTime() - 15 * 60 * 1000) { // 15 minutes before sunset\n  if (Weather.sunSets.Condition === \"Rain\" || Weather.sunSets.TempFahrenheit < 50) {\n    Wiz.turnOn.skip(\"Unpleasant weather conditions\")\n  } else {\n    var Entity = Wiz.getEntity(); // Get the chosen light(s)\n    Wiz.turnOn.setMode(Entity.mode); // Set the chosen mode\n    Wiz.turnOn.setDimming(Entity.dimming); // Set the chosen dimming level\n    Wiz.turnOn.run(); // Turn on the lights\n  }\n}", "intent": "Automatically turn on WiZ lights of your choice a few minutes before Sunset, taking into account the current weather conditions."}
{"original_description": "When the sun sets, your WeMo switch will turn on. A great way to automatically control your lights.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WeMo Smart Plug", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_switch.attribute_socketToggleDiscrete", "Filter code method": "WemoSwitch.attributeSocketToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_switch.attribute_socketToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt\nif (SunsetTime >= Meta.currentUserTime.date()) {\n  WemoSwitch.attributeSocketToggleDiscrete(\"turnOn\", \"The sun has set\")\n} else {\n  WemoSwitch.attributeSocketToggleDiscrete.skip(\"Not yet sunset\")\n}", "intent": "Automate the WeMo Smart Plug to turn on when the sun sets."}
{"original_description": "Sync your systems: this Applet will transform your new notes to Trello cards on the board and list you specify.", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Trello", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trello.create_card", "Filter code method": "Trello.createCard.skip(string?: reason)", "Runtime method": "runAction(\"trello.create_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Board\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "List name\nText input > Other", "description": "Text input > Other", "details": {"Label": "List name", "Helper text": "We'll create a new list if one with this name doesn't exist", "Slug": "list_name", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setList Name(string: list_name)"}}, {"section": "Action fields", "title": "Pos\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Slug": "pos", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setPos(string: pos)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setDescription(string: description)"}}, {"section": "Action fields", "title": "Members\nText input > Other", "description": "Text input > Other", "details": {"Label": "Assign members", "Helper text": "Optional comma separated list of @usernames to assign to card", "Slug": "members", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setMembers(string: members)"}}, {"section": "Action fields", "title": "Labels\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Apply labels", "Helper text": "Optional comma separated list of label names — labels that do not exist on the board will be ignored", "Slug": "labels", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setLabels(string: labels)"}}, {"section": "Action fields", "title": "Url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Attachment URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setUrl(string: url)"}}], "filter_code": "if (Evernote.newNoteInNotebook.Tags !== \"\") {\n  var board = notebook;\n  var listName = list_name;\n  var cardTitle = Title;\n  var cardDescription = BodyHTML;\n  var cardUrl = PublicUrl;\n  \n  Trello.createCard.setBoard(board).setList(listName).setTitle(cardTitle).setDescription(cardDescription).setUrl(cardUrl).setTags(Evernote.newNoteInNotebook.Tags).setLabels(labels).setMembers(members);\n} else {\n  Trello.createCard.skip(\"No tags detected\");\n}", "intent": "Transform new Evernote notes to Trello cards on a specified board and list."}
{"original_description": "Save new items from Pocket to Raindrop.io.\nTags will be the same +IFTTT, Pocket", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Raindrop.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "raindrop.raindrop", "Filter code method": "Raindrop.raindrop.skip(string?: reason)", "Runtime method": "runAction(\"raindrop.raindrop\", {})"}, "action_details": [{"section": "Action fields", "title": "Link\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "link", "Required": "true", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setLink(string: link)"}}, {"section": "Action fields", "title": "Collectionid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Collection", "Slug": "collectionId", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Excerpt\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Slug": "excerpt", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setExcerpt(string: excerpt)"}}, {"section": "Action fields", "title": "Cover\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Slug": "cover", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCover(string: cover)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Single or multiple separated by comma", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTags(string: tags)"}}, {"section": "Action fields", "title": "Created\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Creation date", "Slug": "created", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCreated(string: created)"}}], "filter_code": "", "intent": ""}
{"original_description": "This applet will mute your phone every time you get into bed. Once muted, your phone will notify you with a quick vibration. Works with Android only.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "var DeviceUser = WithingsSleep.bedin.DeviceUser\nvar DateandTime = WithingsSleep.bedin.DateandTime\nif (DateandTime > start_date && DateandTime < end_date) {\n  if (device === \"Bed in\") {\n    AndroidDevice.muteDevice.skip(\"Not in bed\")\n  } else {\n    var reason = \"Incorrect device detected\"\n    AndroidDevice.muteDevice(skip(reason))\n  }\n} else {\n  AndroidDevice.muteDevice.skip(\"Not within specified time range\")\n}\nif (vibrate === true) {\n  AndroidDevice.vibrate()\n}", "intent": "Mute phone when getting into bed and notify with a vibration."}
{"original_description": "Add the #hashtag you choose to the caption your next Instagram post and this Applet will upload the photo to a Facebook Page. Note: only works for single photo posts.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Facebook Pages", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "facebook_pages.create_photo_page", "Filter code method": "FacebookPages.createPhotoPage.skip(string?: reason)", "Runtime method": "runAction(\"facebook_pages.create_photo_page\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setMessage(string: message)"}}, {"section": "Action fields", "title": "Album\nText input > Other", "description": "Text input > Other", "details": {"Label": "Album name", "Helper text": "Provide the name of an existing album, or leave blank for no album. If a non-existent album name is provided, you'll receive <a href=\"https://help.ifttt.com/hc/en-us/articles/5343334604187\" target=\"_blank\">this error</a>", "Slug": "album", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setAlbum(string: album)"}}], "filter_code": "var Hashtag = Instagram.newPhotoByYouTagged.tag\nif (Hashtag.includes(\"#\")) {\n  var CaptionNoTag = Instagram.newPhotoByYouTagged.Caption.replace(RegExp(\"#\" + Hashtag), \"\")\n  FacebookPages.createPhotoPage.setCaption(CaptionNoTag)\n}\nFacebookPages.createPhotoPage.uploadPhoto(Instagram.newPhotoByYouTagged.SourceUrl)\nFacebookPages.createPhotoPage.setMessage(\"A cool photo\")", "intent": "When a new Instagram photo is posted with a specified hashtag, the Applet will upload the photo to a Facebook Page, along with the caption without the specified tag."}
{"original_description": "This will automatically turn off the WiZ light(s) of your choice a few minutes before Sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_off", "Filter code method": "Wiz.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "Select the lights you want to turn off.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nvar TimeDiff = 15 * 60 // 15 minutes in seconds\nif (Meta.currentUserTime.hour() < SunriseAt.getHours() + TimeDiff) {\n  Wiz.turnOff.skip(\"Too early for the sunrise automation\")\n} else if (Weather.sunRises.TempFahrenheit > 65 || Weather.sunRises.TempCelsius > 18) { // adjust temperature threshold as needed\n  Wiz.turnOff.skip(\"Temperature is not suitable for turning off lights\")\n} else {\n  var entity = Domovea.getEntities()\n  if (entity.length === 0) {\n    Wiz.turnOff.skip(\"No light selected\")\n  } else {\n    Wiz.turnOff(entity)\n  }\n}", "intent": "Automatically turn off WiZ lights a few minutes before Sunrise, considering current weather conditions."}
{"original_description": "Every time Withings Sleep detects you get into bed, the time will be logged in a Google Spreadsheet. ", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var DeviceUser = WithingsSleep.bedin.DeviceUser\nvar Time = WithingsSleep.bedin.DateandTime\nif (start_date <= Time && end_date >= Time) {\n  var filename = \"Bed_in_Log\"\n  var formatted_row = \"||\" + Time + \"||\" + DeviceUser\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename)\n  .setFormattedRow(formatted_row)\n}", "intent": "This automation logs the time when Withings Sleep detects you get into bed in a Google Spreadsheet."}
{"original_description": "This will arm your SkylinkNet every night by midnight. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.alarm", "Filter code method": "Skylinknet.alarm.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Hub?", "Slug": "hub_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Alarm\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Mode?", "Slug": "alarm", "Required": "true", "Can have default value": "true", "Filter code method": "Skylinknet.alarm.setAlarm(string: alarm)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime\nif (checkTime >= \"23:59\") {\n  if (!Skylinknet.alarm.skip(\"Not triggered at midnight\")) {\n    var hubId = //Hub input value\n    var key = //Key input value\n    var alarm = //Alarm input value\n    Skylinknet.alarm.setAlarm(alarm)\n  }\n}", "intent": "This automation will arm SkylinkNet every night at midnight."}
{"original_description": "Whenever you get a new follower on Twitch, your LIFX lights will blink!", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_follower_on_your_channel"}, "trigger_details": [{"section": "Ingredients", "title": "Followed at\nDate and time the user followed your Channel.", "description": "Date and time the user followed your Channel.", "details": {"Slug": "created_at", "Filter code": "Twitch.newFollowerOnYourChannel.FollowedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Follower name\nThe name of the user who followed your channel.", "description": "The name of the user who followed your channel.", "details": {"Slug": "follower_name", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Follower bio\nThe bio of the user that followed you.", "description": "The bio of the user that followed you.", "details": {"Slug": "follower_bio", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerBio", "Type": "String", "Example": "A gaming fanatic from Boston."}}, {"section": "Ingredients", "title": "Follower url\nA url to the follower's profile on Twitch.", "description": "A url to the follower's profile on Twitch.", "details": {"Slug": "follower_url", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Follower count\nThe number of followers of your channel.", "description": "The number of followers of your channel.", "details": {"Slug": "follower_count", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerCount", "Type": "String", "Example": "215780"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Twitch.newFollowerOnYourChannel.FollowedAt) {\n  Lifx.blink({\n    selector: \"Living Room\",\n    color: \"Red\",\n    brightness: \"50%\",\n    number_of_blinks: \"3\",\n    blink_if_off: true,\n    advanced_options: \"\"\n  })\n}", "intent": "Whenever a new follower is detected on Twitch, the LIFX lights will blink in a customizable pattern."}
{"original_description": "Just pick your time and this Applet will send you a helpful daily notification. 💊  Yum. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "function checkTime(time) {\n  var CheckTime = DateAndTime.everyDayAt.CheckTime\n  if (time !== CheckTime) {\n    IfNotifications.sendNotification.skip(\"Not the scheduled time\")\n  } else {\n    var Message = \"Just pick your time and this Applet will send you a helpful daily notification. 🌊 Yum.\"\n    IfNotifications.sendNotification.setMessage(Message)\n  }\n}", "intent": "This Applet sends a daily notification with a helpful message at the specified time."}
{"original_description": "Never touch that dial again — when the temperature dips, this Applet will fire up your Nest. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "var Temperature = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (Temperature < 50) {\n  GoogleNestThermostat.setHotTemperature.skip(\"It's not cold enough\")\n} else if (Weather.currentTemperatureDropsBelow.Condition === \"Rain\") {\n  GoogleNestThermostat.setHotTemperature.skip(\"No rain detected\")\n} else {\n  var degrees = Temperature - 5\n  GoogleNestThermostat.setHotTemperature.setDegrees(degrees).setTemperatureUnit('Fahrenheit')\n}", "intent": "When the temperature drops below a certain threshold, this Applet will fire up your Nest Thermostat to adjust the temperature."}
{"original_description": "Every time Withings Sleep detects you get out of bed, the time will be logged in a Google Spreadsheet.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (WithingsSleep.bedout.DeviceUser !== \"\") {\n  var start_date = \"|||Start date: \" + WithingsSleep.bedout.start_date;\n  var end_date = \"|||End date: \" + WithingsSleep.bedout.end_date;\n  var formatted_row = start_date + \"|||\" + end_date + \"|||Device: \" + WithingsSleep.bedout.device;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Withings Sleep Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formatted_row);\n}", "intent": "Automatically log every time Withings Sleep detects user getting out of bed in a Google Spreadsheet."}
{"original_description": "This Applet will attempt to close your garage door or gate every night. If the garage door is already closed, it will remain closed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gogogate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gogogate.close_door", "Filter code method": "Gogogate.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"gogogate.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time >= \"22:00:00\" && DoorNumber !== \"Closed\") {\n  Gogogate.closeDoor(\"Garage door not closed at night\")\n}", "intent": "This Applet checks if it's nighttime and the garage door is open, then attempts to close the door. If the door is already closed, it remains closed."}
{"original_description": "Whenever you add a file in your specified Dropbox folder, this applet will automatically download that file to your QNAP Device", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/ifttt_wordmark.png"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newFileInFolder.Filename", "Type": "String", "Example": "coolbeans.jpg"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newFileInFolder.FilenameNoExt", "Type": "String", "Example": "coolbeans"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "var FileUrl = Dropbox.newFileInFolder.FileUrl;\nvar FileNameNoExt = Dropbox.newFileInFolder.FilenameNoExt;\nif (QNAP.option_shared_folder === \"\") {\n  Qnap.downloadFileFromUrl.skip(\"Shared folder not specified\")\n}\nelse {\n  Qnap.downloadFileFromUrl.setFileUrl(FileUrl).setFileName(FileNameNoExt).setFolderPath(QNAP.folder_path || \"\")\n}", "intent": "Automatically download files from a specified Dropbox folder to a QNAP device whenever a new file is added."}
{"original_description": "When you send #partymode to @IFTTT in Telegram, your Hue lights will start a color loop.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_group_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "You can use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot to <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">connect new groups</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires when anyone sends a message with the command /ifttt and the key phrase to the group.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to the command with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newGroupTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Group title\nThe title of the group.", "description": "The title of the group.", "details": {"Slug": "group_title", "Filter code": "Telegram.newGroupTextFilter.GroupTitle", "Type": "String", "Example": "Bot News Group"}}, {"section": "Ingredients", "title": "Author name\nThe name of the author who triggered the Applet.", "description": "The name of the author who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newGroupTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nAuthor username, when available.", "description": "Author username, when available.", "details": {"Slug": "author_username", "Filter code": "Telegram.newGroupTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents a plain-text message contents. Does not include the 'Key phrase'.", "description": "Represents a plain-text message contents. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newGroupTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newGroupTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Telegram.newGroupTextFilter.AuthorName === \"Pavel Durov\") {\n  if (Telegram.newGroupTextFilter.Text.includes(\"#partymode\")) {\n    var lights = [\"Living Room\", \"Kitchen\", \"Backyard\"]; // Replace with actual lights\n    Hue.setColorAllHue.setColor(lights, \"random-color-loop\"); // Use a random color loop\n  } else {\n    Hue.setColorAllHue.skip(\"Invalid command\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Not triggered by Pavel Durov\");\n}", "intent": "Trigger a Philips Hue color loop when the #partymode command is sent in a Telegram group."}
{"original_description": "Your Hue lights will automatically change to the color of your choice every weekday at the time of your choosing.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var Weekday = DateAndTime.everyWeekdayAt.DayOfWeek\nif (Weekday !== \"Sunday\" && Weekday !== \"Saturday\") {\n  var Time = DateAndTime.everyWeekdayAt.CheckTime\n  if (Time == \"your chosen time here\") {\n    Hue.setColorAllHue.setColor(\"your chosen color or name here\")\n  } else {\n    Hue.setColorAllHue.skip(\"Not at the scheduled time\")\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Outside of workdays\")\n}", "intent": "This automation will check if it is a weekday and at the specified time, then set the Philips Hue lights to the desired color."}
{"original_description": "This Applet will add all new notes in a notebook as a new doc in a folder under IFTTT/Evernote in your Drive. ", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Google Docs", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_docs.create_google_doc", "Filter code method": "GoogleDocs.createGoogleDoc.skip(string?: reason)", "Runtime method": "runAction(\"google_docs.create_google_doc\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "Document name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.createGoogleDoc.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Content", "Helper text": "Some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.createGoogleDoc.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Documents/Photos/Receipts&quot; (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDocs.createGoogleDoc.setPath(string: path)"}}], "filter_code": "var Notebook = $$Notebook$$\nif (Notebook === \"\") {\n  GoogleDocs.createGoogleDoc.skip(\"No notebook selected\")\n} else {\n  var Title = Evernote.newNoteInNotebook.Title\n  var BodyHTML = Evernote.newNoteInNotebook.BodyHTML\n  var PublicUrl = Evernote.newNoteInNotebook.PublicUrl\n  var Tags = Evernote.newNoteInNotebook.Tags\n  var CreatedAt = Evernote.newNoteInNotebook.CreatedAt\n  \n  // Set the filename\n  var filename = \"IFTTT/\" + Notebook + \"/\" + Title.replace(/\\s+/g, \"_\") + \".md\"\n  \n  // Create the document with the title and body\n  GoogleDocs.createGoogleDoc.setFilename(filename).setBody(BodyHTML)\n  \n  // Add a path to the folder if specified\n  var Path = $$Path$$\n  if (Path !== \"\") {\n    var folders = Path.split(\"/\")\n    for (var i = 0; i < folders.length - 1; i++) {\n      GoogleDocs.createGoogleDoc.skip(\"Creating folder: \" + folders[i])\n    }\n    GoogleDocs.createGoogleDoc.setPath(IFFTT + \"/\" + Path)\n  } else {\n    GoogleDocs.createGoogleDoc.setPath(IFFTT + \"/IFTTT\")\n  }\n}", "intent": "This Applet will add all new notes in a notebook as a new doc in a folder under IFTTT/Evernote in your Drive."}
{"original_description": "Let the party begin! If your weather station registers noise above a certain threshold it will activate a color loop for your Philips Hue lights.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.noise-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target noise level", "Helper text": "In decibels (dB)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured noise level\nThe measured noise level in decibels", "description": "The measured noise level in decibels", "details": {"Slug": "MeasuredNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.MeasuredNoiseLevel", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Target noise level\nThe target noise level in decibels", "description": "The target noise level in decibels", "details": {"Slug": "TargetNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.TargetNoiseLevel", "Type": "String", "Example": "53"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.noiseRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the noise", "description": "This is the name of the Netamo device where you are reading the noise", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.noiseRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Netatmo.noiseRisesAbove.MeasuredNoiseLevel > Netatmo.noiseRisesAbove.TargetNoiseLevel) {\n  Hue.setColorAllHue.set(Hue.getColorAllHue.skip(\"Color Loop Activated\"))\n}", "intent": "Check if the measured noise level exceeds the target threshold, then set the Philips Hue lights to a specified color."}
{"original_description": "This Applet will add the closing price for the stock of your choice to a spreadsheet in your Google Drive. Remember: if you analyze the data, crack the code and figure out how to make big $$$ — we get a cut! 🤑", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.price_at_close_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Helper text": "Supported exchanges include NYSE, NASDAQ, and AMEX", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.priceAtCloseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.priceAtCloseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last trade price of the stock.", "description": "The last trade price of the stock.", "details": {"Slug": "Price", "Filter code": "Finance.priceAtCloseStocks.Price", "Type": "String", "Example": "603.7"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.priceAtCloseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Date\nThe date of the last trade.", "description": "The date of the last trade.", "details": {"Slug": "Date", "Filter code": "Finance.priceAtCloseStocks.Date", "Type": "String", "Example": "September 05, 2014"}}], "action_channel": "Google Docs", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_docs.append_to_google_doc", "Filter code method": "GoogleDocs.appendToGoogleDoc.skip(string?: reason)", "Runtime method": "runAction(\"google_docs.append_to_google_doc\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "Document name", "Helper text": "Will create a new file if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Content", "Helper text": "some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setPath(string: path)"}}], "filter_code": "// Get the symbol, stock name, and ticker\nvar Symbol = $$Symbol$$;\nvar StockName = Finance.priceAtCloseStocks.StockName;\nvar StockTicker = Finance.priceAtCloseStocks.StockTicker;\n\n// Check if it's a valid stock\nif (StockName === \"\" || StockTicker === \"\") {\n  GoogleDocs.appendToGoogleDoc.skip(\"Invalid stock symbol\")\n}\n\n// Get the price and date from the API\nvar Price = Finance.priceAtCloseStocks.Price;\nvar Date = Finance.priceAtCloseStocks.Date;\n\n// Format the body of the document\nvar Body = \"<h1>Stock: \" + StockName + \"</h1><p>Last trade price: $\" + Price + \"</p><p>Date: \" + Date + \"</p>\";\n\n// Get the file name and path from action fields\nvar filename = GoogleDocs.appendToGoogleDoc.getFilename();\nvar path = GoogleDocs.appendToGoogleDoc.getPath();\n\n// Append to the document\nGoogleDocs.appendToGoogleDoc.setBody(Body).setPath(path);", "intent": "This Applet will add the closing price for a stock to a spreadsheet in Google Drive."}
{"original_description": "This Applet will turn on or off your BroadLink device when the sun sets in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "BroadLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "broadlink.powerState", "Filter code method": "Broadlink.powerState.skip(string?: reason)", "Runtime method": "runAction(\"broadlink.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "Broadlink.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt\nvar Condition = Weather.sunSets.Condition\nif (Condition === \"Sunny\") {\n  if (Weather.currentTempFahrenheit >= 72) {\n    if (Meta.currentUserTime.hour() < SunsetTime.getHours() || Meta.currentUserTime.hour() > SunsetTime.getHours() + 1) {\n      Broadlink.powerState.setPowerControlChangePowerStateString(\"On\")\n    } else {\n      Broadlink.powerState.skip(\"Inside active hours\")\n    }\n  } else {\n    if (Meta.currentUserTime.hour() < SunsetTime.getHours() || Meta.currentUserTime.hour() > SunsetTime.getHours() + 1) {\n      Broadlink.powerState.setPowerControlChangePowerStateString(\"Off\")\n    } else {\n      Broadlink.powerState.skip(\"Inside active hours\")\n    }\n  }\n} else {\n  Broadlink.powerState.skip(\"Not sunny today\")\n}", "intent": "This Applet will turn on or off your BroadLink device when the sun sets in your area."}
{"original_description": "Just pick the board and the list, and when a card is added in Trello, a corresponding task will be created in Todoist automatically. Get. More. Done!", "trigger_channel": "Trello", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "trello.card_added_to_list"}, "trigger_details": [{"section": "Trigger fields", "title": "Board\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "List name\nText input", "description": "Text input", "details": {"Label": "List name", "Helper text": "Type a list name as it appears in your Trello board", "Slug": "list_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe title of the card.", "description": "The title of the card.", "details": {"Slug": "title", "Filter code": "Trello.cardAddedToList.Title", "Type": "String", "Example": "Book flights"}}, {"section": "Ingredients", "title": "Description\nThe description of the card.", "description": "The description of the card.", "details": {"Slug": "description", "Filter code": "Trello.cardAddedToList.Description", "Type": "String", "Example": "Check various airline websites to find the best deal."}}, {"section": "Ingredients", "title": "Creator full name\nThe full name of the member who added the card.", "description": "The full name of the member who added the card.", "details": {"Slug": "creator_name", "Filter code": "Trello.cardAddedToList.CreatorFullName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Creator username\nThe username of the member who added the card.", "description": "The username of the member who added the card.", "details": {"Slug": "creator_username", "Filter code": "Trello.cardAddedToList.CreatorUsername", "Type": "String", "Example": "sfjetsetter"}}, {"section": "Ingredients", "title": "List name\nThe name of the list the card was added to.", "description": "The name of the list the card was added to.", "details": {"Slug": "list_name", "Filter code": "Trello.cardAddedToList.ListName", "Type": "String", "Example": "To dos"}}, {"section": "Ingredients", "title": "Board name\nThe name of the board the card was added to.", "description": "The name of the board the card was added to.", "details": {"Slug": "board_name", "Filter code": "Trello.cardAddedToList.BoardName", "Type": "String", "Example": "New Zealand Trip"}}, {"section": "Ingredients", "title": "Card url\nThe URL to the card.", "description": "The URL to the card.", "details": {"Slug": "url", "Filter code": "Trello.cardAddedToList.CardURL", "Type": "Web URL", "Example": "https://trello.com/c/example"}}, {"section": "Ingredients", "title": "Added at\nDate and time the card was added to the list.", "description": "Date and time the card was added to the list.", "details": {"Slug": "added_at", "Filter code": "Trello.cardAddedToList.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Todoist", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "todoist.create_task", "Filter code method": "Todoist.createTask.skip(string?: reason)", "Runtime method": "runAction(\"todoist.create_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Project\nDropdown list", "description": "Dropdown list", "details": {"Label": "Project and section", "Helper text": "Project and section to which the task belongs", "Slug": "project_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task content\nText input", "description": "Text input", "details": {"Label": "Task content", "Helper text": "<a href=\"https://todoist.com/help/articles/205195102\" target=\"_blank\">Text formatting guide</a> and <a href=\"https://todoist.com/help/articles/360000029000\" target=\"_blank\">label format guide</a>", "Slug": "task_content", "Required": "true", "Can have default value": "true", "Filter code method": "Todoist.createTask.setTask Content(string: task_content)"}}, {"section": "Action fields", "title": "Note\nText input > Other", "description": "Text input > Other", "details": {"Label": "Note", "Helper text": "Add additional task note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setNote(string: note)"}}, {"section": "Action fields", "title": "Due date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Task's due date", "Helper text": "Check the <a href=\"https://todoist.com/help/articles/205325931\" target=\"_blank\">Due dates and times format guide</a>", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setDue Date(string: due_date)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Priority", "Helper text": "Task's priority", "Slug": "priority", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setPriority(string: priority)"}}, {"section": "Action fields", "title": "Task description\nText input > Other", "description": "Text input > Other", "details": {"Label": "Task description", "Helper text": "Task's description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setTask Description(string: task_description)"}}], "filter_code": "if (Trello.cardAddedToList.ListName === $$Board$$ && Trello.cardAddedToList.ListName === $$List_name$$.toLowerCase()) {\n  var task_content = \"Card added: \" + Trello.cardAddedToList.Title;\n  Todoist.createTask.setTaskContent(task_content).setProjectId($$Project_id$$.trim()).setPriority(\"low\").skip();\n} else {\n  Todoist.createTask.skip(\"Wrong list or board\");\n}", "intent": "When a card is added to a Trello list, create a corresponding task in Todoist with the specified details."}
{"original_description": "Create your own email newsletter from any RSS Feed URL you paste in the field below. This Applet will send you an email for every new entry that a feed adds.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var EntryTitle = Feed.newFeedItem.EntryTitle\nvar Subject = \"New article from \" + Feed.newFeedItem.FeedTitle + \": \" + EntryTitle\nif (EntryContent !== \"\") {\n  var Body = \"Check out the latest article: \" + EntryTitle + \"\\n\\n\" + EntryContent.substring(0, 200) + \"... Read more at \" + EntryUrl\n} else {\n  var Body = \"New article from \" + Feed.newFeedItem.FeedTitle + \": \" + EntryTitle\n}\nEmail.sendMeEmail.setSubject(Subject)\nEmail.sendMeEmail.setBody(Body)", "intent": "Check if a new RSS feed item is available, and send an email with the entry title as the subject and a brief summary of the content."}
{"original_description": "Every new Instagram photo you post will be automatically added to your Buffer Queue!", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer_with_photo", "Filter code method": "Buffer.addToBufferWithPhoto.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer_with_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Description", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setMessage(string: message)"}}], "filter_code": "// Get caption, URL, source URL, created at, and embed code from the trigger\nvar Caption = Instagram.anyNewPhotoByYou.Caption;\nvar Url = Instagram.anyNewPhotoByYou.Url;\nvar SourceUrl = Instagram.anyNewPhotoByYou.SourceUrl;\nvar CreatedAt = Instagram.anyNewPhotoByYou.CreatedAt;\nvar EmbedCode = Instagram.anyNewPhotoByYou.EmbedCode;\n\n// Add the photo to Buffer Queue with caption and URL\nBuffer.addToBufferWithPhoto.setPhotoUrl(Url).setMessage(Caption);", "intent": "Automatically add new Instagram photos to the Buffer Queue."}
{"original_description": "This applet will turn up the volume on your Sonos speaker when your robot starts cleaning. ", "trigger_channel": "iRobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "irobot.robot_start"}, "trigger_details": [{"section": "Trigger fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nTime the robot started.", "description": "Time the robot started.", "details": {"Slug": "iso_timestamp", "Filter code": "Irobot.robotStart.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.increase_volume", "Filter code method": "Sonos.increaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.increase_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.increaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "// Get robot name\nvar RobotName = $$trigger_details[0].details.Slug$$;\nif (Irobot.robotStart.RobotName !== RobotName) {\n  Irobot.robotStart.skip(\"Robot not recognized\");\n}\n// Get timestamp of robot start\nvar Timestamp = Irobot.robotStart.Timestamp;\n// Set action parameters\nSonos.increaseVolume.setRoom($$action_details[0].details.Slug$$);\nif ($$action_details[1].details.Required === \"false\" && $$action_details[1].details.Can have default value === \"true\") {\n  Sonos.increaseVolume.setIncludeGroupedRooms(true);\n}\n// Check if it is during the specified hours\nvar Hour = Meta.currentUserTime.hour();\nif (Hour < 7 || Hour > 22) {\n  Irobot.robotStart.skip(\"Outside of active hours\");\n}\nSonos.increaseVolume.run();", "intent": "When the iRobot starts cleaning, turn up the volume on Sonos in a specified room."}
{"original_description": "Looking for another perspective? CD is the largest English-language paper circulating in China. This Applet will send a roundup of their world news articles to your inbox every Tuesday morning.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() === 2) { // Tuesday\n  EmailDigest.sendWeeklyEmail.setTitle(\"CD World News Roundup\")\n  if (Feed.newFeedItem.EntryTitle !== \"\") {\n    EmailDigest.sendWeeklyEmail.setMessage(\"<h1>\" + Feed.newFeedItem.EntryTitle + \"</h1><p>\" + Feed.newFeedItem.EntryContent + \"</p>\")\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No article title provided\")\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Tuesday - skipping email\")\n}", "intent": "Send a roundup of CD's world news articles to your inbox every Tuesday morning."}
{"original_description": "Every Saturday morning this Applet will send you one email digest of the latest articles published by the Harvard Business Review", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() === 6 && Meta.currentUserTime.hour() >= 8) { // Saturday and after 08:00\n  var entryTitle = Feed.newFeedItem.EntryTitle;\n  var message = \"Weekly HBR Digest:\\n\" + entryTitle;\n  EmailDigest.sendWeeklyEmail.setTitle(\"HBR Weekly Digest\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Saturday or outside of active hours\")\n}", "intent": "This Applet will send you a weekly email digest of the latest articles published by Harvard Business Review on Saturdays."}
{"original_description": "Your coffee machine with Home Connect will turn on and run the rinsing program when you press the Button widget.\n", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\nvar LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nvar LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\nif (HcCoffeeMachine.coffeeMakerTurnOn.skip) {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"No coffee machine selected\")\n} else if (!ha_id) {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"No ha_id provided\")\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.runAction({\"ha_id\": ha_id})\n}", "intent": "Triggered by a button press on the Button widget, this automation turns on and runs the rinsing program of the Home Connect Coffee Machine."}
{"original_description": "Let nature do the heating for you — when the temperature outside hits your sweet spot, your Nest will automatically equalize. You can set the specifics when you turn on the Applet. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < $$degrees || Weather.currentTemperatureDropsBelow.TempCelsius < $$degrees) {\n  GoogleNestThermostat.setHotTemperature.skip(\"No temperature match\")\n} else {\n  var temperature = Weather.currentTemperatureDropsBelow.TempFahrenheit\n  if (temperatureUnit === \"Fahrenheit\") {\n    GoogleNestThermostat.setHotTemperature.setDegrees(temperature)\n  } else if (temperatureUnit === \"Celsius\") {\n    GoogleNestThermostat.setHotTemperature.setDegrees(Math.round((temperature + 459.67) * 9 / 5))\n  }\n}", "intent": "When the temperature outside hits a set degree threshold (Fahrenheit or Celsius), the Nest Thermostat will automatically equalize to that temperature. This Applet is triggered by Weather Underground's current temperature drops below the specified threshold."}
{"original_description": "Trippy, glitchy, beautiful, weird — or all of the above. This Applet will send you a daily email with the latest GIFs tagged \"digital art.\" ", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var Query = trigger.developer_info.query;\nif (Query.includes(\"digital art\")) {\n  var gifUrl = Giphy.search.URL;\n  var imageUrl = Giphy.search.ImageURL;\n  var tumblrImageUrl = Giphy.search.TumblrImageURL;\n  var emailHtml = Giphy.search.EmailHTML;\n  var embedCode = Giphy.search.EmbedCode;\n  var tags = Giphy.search.Tags;\n  var createdDate = Giphy.search.CreatedDate;\n\n  EmailDigest.sendDailyEmail.setTitle(\"Digital Art of the Day\");\n  EmailDigest.sendDailyEmail.setMessage(\"<a href='\" + gifUrl + \"'>View GIF</a><br />\" + emailHtml);\n  EmailDigest.sendDailyEmail.setUrl(gifUrl);\n\n  // Optional: Set a specific time of day for sending\n  var timeOfDay = action_details[0].details.Label;\n  if (timeOfDay !== \"\") {\n    EmailDigest.sendDailyEmail.setTimeOfDay(timeOfDay);\n  }\n}", "intent": "Send a daily email with digital art GIFs from Giphy, based on user query and filtering criteria."}
{"original_description": "When your Android device's battery drops below 15%, you will get a text notification as a reminder to plug it in.", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_low"}, "trigger_details": [{"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryLow.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device's battery became low.", "description": "The time the device's battery became low.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryLow.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryLow.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "var BatteryPercentage = parseInt(AndroidBattery.batteryLow.BatteryPercentage)\nif (BatteryPercentage <= 15) {\n    var message = \"Reminder: Your Android device's battery is low. Please plug it in.\"\n    AndroidMessages.sendAMessage.setText(message).skip(\"Android battery level is already low\")\n} else {\n    AndroidMessages.sendAMessage.skip(\"Android battery level is above threshold\")\n}", "intent": "When the Android device's battery drops below 15%, send a text notification to remind the user to plug it in."}
{"original_description": "Perfect for adding to a playlist while the party is going — the color loop will let everyone know a new jam is in the mix. 🎉  GET HYPE! ", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "", "intent": ""}
{"original_description": "Twitch alert! The Hue light you select will turn purple when the channel you choose starts streaming. ", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var ChannelName = Twitch.streamGoingLiveForChannelYouFollow.ChannelName\nif (ChannelName === \"John's Channel\") { \n  Hue.setColorAllHue.skip(\"Not John's channel\")\n} else {\n  var Lights = [\"Which lights?\"] // Select the desired lights here\n  var Color = \"purple\" // Set a purple color for the selected lights\n  Hue.setColorAllHue.setColor(Color).setLights(Lights)\n}", "intent": "Trigger a Philips Hue action when a Twitch channel starts streaming, turning the selected lights purple."}
{"original_description": "When an abode door or window equipped with a sensor is opened, Arlo will record a video clip.", "trigger_channel": "abode", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "abode.door_opened"}, "trigger_details": [{"section": "Trigger fields", "title": "Select door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select door", "Slug": "select_door", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Abode.doorOpened.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Door name\nName of door which is opened.", "description": "Name of door which is opened.", "details": {"Slug": "name", "Filter code": "Abode.doorOpened.DoorName", "Type": "String", "Example": "Door Name"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.record", "Filter code method": "Arlo.record.skip(string?: reason)", "Runtime method": "runAction(\"arlo.record\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "How long?", "Helper text": "How long Arlo will record in seconds.", "Slug": "duration", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Abode.doorOpened.name !== \"\") {\n  var createdAt = Abode.doorOpened.CreatedAt;\n  var doorName = Abode.doorOpened.DoorName;\n  // Check if the selected door name is valid\n  if (![\"Front Door\", \"Back Door\", \"Side Door\"].includes(doorName)) {\n    Arlo.record.skip(\"Invalid door name\");\n  } else {\n    // Record video clip for the specified duration\n    var duration = parseInt(Abode.doorOpened.duration);\n    Domovea.shadeClose.runAction(\"arlo.record\", { device_name: \"Arlo Cam\", duration });\n  }\n}", "intent": "When an Abode door or window equipped with a sensor is opened, Arlo will record a video clip. If the selected door name is not valid or if it is not set, Arlo should skip recording."}
{"original_description": "Sync your Soundcloud favorites with your Spotify saves. When an artist you follow adds a new public track, this Applet will search the title on Spotify. If it finds it, it'll add it to Your Music. ", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.following_new_public_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.followingNewPublicTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.followingNewPublicTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.followingNewPublicTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.followingNewPublicTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.followingNewPublicTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.followingNewPublicTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.followingNewPublicTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.followingNewPublicTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.followingNewPublicTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.followingNewPublicTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.followingNewPublicTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.save_a_track", "Filter code method": "Spotify.saveATrack.skip(string?: reason)", "Runtime method": "runAction(\"spotify.save_a_track\", {})"}, "action_details": [{"section": "Action fields", "title": "Search query\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Search query", "Helper text": "For maximum accuracy, include the song title here and the artist name in the &quot;Artist name&quot; field", "Slug": "search_query", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.saveATrack.setSearch Query(string: search_query)"}}, {"section": "Action fields", "title": "Artist name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Artist name", "Helper text": "Optional", "Slug": "artist_name", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.saveATrack.setArtist Name(string: artist_name)"}}], "filter_code": "const Title = Soundcloud.followingNewPublicTrack.Title;\nif (Title !== null && Title.length > 0) {\n  const SearchQuery = \"track:\" + encodeURIComponent(Title);\n  const ArtistName = Soundcloud.followingNewPublicTrack.Username;\n  Spotify.saveATrack.setSearchQuery(SearchQuery).setArtistName(ArtistName).run();\n}", "intent": "When a new public track from an artist you follow is posted on SoundCloud, this Applet will search for the title on Spotify and add it to Your Music if found."}
{"original_description": "You will get your daily weather and temperature (in °C) report on your Triby. You will be able to choose the time of day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.send_an_image_to_specified_triby", "Filter code method": "InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.send_an_image_to_specified_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Triby\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Triby IO?", "Slug": "triby", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image URL?", "Helper text": "This has to be the URL of an image file (png, jpeg, bmp).", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "InvoxiaTriby.sendAnImageToSpecifiedTriby.setImage Url(string: image_url)"}}], "filter_code": "var CurrentTempCelsius = Weather.currentWeatherAtTime.CurrentTempCelsius\nvar TodaysCondition = Weather.currentWeatherAtTime.TodaysCondition\nvar SunriseAt = Weather.currentWeatherAtTime.SunriseAt\nvar SunsetAt = Weather.currentWeatherAtTime.SunsetAt\nvar HighTempFahrenheit = Weather.currentWeatherAtTime.HighTempFahrenheit\nvar LowTempFahrenheit = Weather.currentWeatherAtTime.LowTempFahrenheit\n\nif (Trigger.time !== \"\" && Trigger.location !== \"\") {\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.setImageUrl(Weather.currentWeatherAtTime.CurrentConditionImageURL)\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"No image found\")\n} else {\n  // Get user's preferred time of day\n  var PreferredTime = Trigger.time\n\n  if (PreferredTime === \"morning\") {\n    if (SunriseAt <= Meta.currentUserTime.hour() && Meta.currentUserTime.hour() < SunsetAt) {\n      InvoxiaTriby.sendAnImageToSpecifiedTriby.setImageUrl(Weather.currentWeatherAtTime.CurrentConditionImageURL)\n    } else {\n      InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"Not within sunrise-sunset hours\")\n    }\n  } else if (PreferredTime === \"afternoon\") {\n    if (Meta.currentUserTime.hour() >= SunriseAt && Meta.currentUserTime.hour() < SunsetAt) {\n      InvoxiaTriby.sendAnImageToSpecifiedTriby.setImageUrl(Weather.currentWeatherAtTime.CurrentConditionImageURL)\n    } else {\n      InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"Not within sunrise-sunset hours\")\n    }\n  } else if (PreferredTime === \"evening\") {\n    if (Meta.currentUserTime.hour() >= SunsetAt) {\n      InvoxiaTriby.sendAnImageToSpecifiedTriby.setImageUrl(Weather.currentWeatherAtTime.CurrentConditionImageURL)\n    } else {\n      InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"Not within sunset hours\")\n    }\n  }\n}", "intent": "Get current weather and temperature report on Triby, allowing user to choose time of day."}
{"original_description": "Your coffee machine will turn on and run the rinsing program every morning at a specified day and time of the week.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  var Ha = HomeConnectCoffeeMachine.getHaId()\n  if (Ha) {\n    HcCoffeeMachine.coffeeMakerTurnOn(Ha)\n  } else {\n    HcCoffeeMachine.coffeeMakerTurnOn.skip(\"No coffee machine selected\")\n  }\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Not a weekday\")\n}", "intent": "Every morning at a specified day and time of the week, check if it's a weekday and turn on the coffee machine."}
{"original_description": "When you post an Instagram with a specific hashtag (you choose what!), the photo and caption will be published on your Wordpress blog. Fancy!", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_photo_post_wp", "Filter code method": "Wordpress.createPhotoPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_photo_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Source url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "source_url", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setSource Url(string: source_url)"}}, {"section": "Action fields", "title": "Caption\nText input", "description": "Text input", "details": {"Label": "Caption", "Helper text": "Optional", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setCaption(string: caption)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setPost Status(string: post_status)"}}], "filter_code": "var Hashtag = Instagram.newPhotoByYouTagged.tag\nif (Hashtag.includes(\"#tbt #IFTTT\")) {\n  var Caption = Instagram.newPhotoByYouTagged.Caption\n  var CaptionNoTag = Instagram.newPhotoByYouTagged.CaptionNoTag\n  var SourceUrl = Instagram.newPhotoByYouTagged.SourceUrl\n  Wordress.createPhotoPostWp.setTitle(\"New Instagram Post\")\n  Wordress.createPhotoPostWp.setSourceUrl(SourceUrl)\n  Wordress.createPhotoPostWp.setCaption(Caption)\n  Wordress.createPhotoPostWp.post()\n} else {\n  Domovea.shadeClose.skip(\"No tbt #IFTTT hashtag found\")\n}", "intent": "When a new Instagram photo with a specific hashtag is posted, the photo and caption will be published on your WordPress blog."}
{"original_description": "Whenever you upload a video on Instagram, this applet will automatically download that video to the QNAP Device", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_video_by_you_tagged_instagram"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newVideoByYouTaggedInstagram.Caption", "Type": "String", "Example": "A cool video #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the tag", "description": "The caption without the tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CaptionNoTag", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newVideoByYouTaggedInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "if (Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"tag\")) {\n  var captionNoTag = Instagram.newVideoByYouTaggedInstagram.CaptionNoTag;\n  var url = Instagram.newVideoByYouTaggedInstagram.URL;\n  var videoSourceUrl = Instagram.newVideoByYouTaggedInstagram.VideoSourceURL;\n  var imageThumbnailUrl = Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL;\n  var createdAt = Instagram.newVideoByYouTaggedInstagram.CreatedAt;\n  var embedCode = Instagram.newVideoByYouTaggedInstagram.EmbedCode;\n\n  Qnap.downloadFileFromUrl.setFileUrl(url).setFileName(\"video.mp4\").setFolderPath(\"/Shared/Downloads\");\n  Qnap.downloadFileFromUrl.runAction();\n} else {\n  Qnap.downloadFileFromUrl.skip(\"No tag found in caption\");\n}", "intent": "Automatically download an uploaded video from Instagram to a QNAP device."}
{"original_description": "This Applet will make sure you're not leaving your porch or garden lights on longer than necessary", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Futurehome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "futurehome.power_off", "Filter code method": "Futurehome.powerOff.skip(string?: reason)", "Runtime method": "runAction(\"futurehome.power_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt\nif (Futurehome.currentUserTime.hour() < Sunrise) {\n  Futurehome.powerOff('Sun is up, turning off lights')\n}", "intent": "This IFTTT Applet will make sure that porch or garden lights are turned off after sunrise."}
{"original_description": "This applet will allow you to turn on your outside light whenever the sun sets", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Futurehome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "futurehome.power_on", "Filter code method": "Futurehome.powerOn.skip(string?: reason)", "Runtime method": "runAction(\"futurehome.power_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": "This applet will turn on your outside light whenever the sun sets."}
{"original_description": "This Applet will turn on or off your BroadLink device when the sun rises in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "BroadLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "broadlink.powerState", "Filter code method": "Broadlink.powerState.skip(string?: reason)", "Runtime method": "runAction(\"broadlink.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "Broadlink.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunRises.SunriseAt < Meta.currentUserTime.now()) { \n  if (deviceinfo === \"true\") {\n    var reason = \"\"\n    if (temp_fahrenheit > 72) {\n      reason += \"Temperature is high: \"\n    }\n    if (condition === \"Rainy\") {\n      reason += \"Condition is Rainy, skipping\"\n    }\n    Broadlink.powerState.skip(reason)\n  } else {\n    Broadlink.powerState.setPowerControlChangePowerStateString(deviceinfo)\n  }\n}", "intent": "When the sun rises, turn on or off a BroadLink device based on user input."}
{"original_description": "Within 15 minutes of your locations sunset a LightwaveRF dimmer of your choice will switch on", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LightwaveRF Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_lighting.switch_on_light", "Filter code method": "LightwaverfLighting.switchOnLight.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_lighting.switch_on_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Which light\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Light?", "Slug": "which_light", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt;\nvar CurrentTime = new Date();\nif (Math.abs(CurrentTime.getTime() - SunsetTime) < 900000) {\n  var WhichLight = Domovea.get('which_light');\n  LightwaverfLighting.switchOnLight(WhichLight);\n} else {\n  LightwaverfLighting.switchOnLight.skip(\"Not within sunset time window\");\n}", "intent": "Trigger automation within 15 minutes of sunset at a specific location, using LightwaveRF dimmer."}
{"original_description": "Every time  your Android phone's battery is low, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_low"}, "trigger_details": [{"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryLow.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device's battery became low.", "description": "The time the device's battery became low.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryLow.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryLow.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "This will turn on the WiZ lights of your choice everyday at a given time. You can select the mode and brightness.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "", "intent": "This IFTTT automation turns on WiZ lights at a selected time every day, with the option to choose the mode and brightness."}
{"original_description": "This Applet will bundle up the week's Longreads posts and send you a digest of them every Saturday at 7am. (The digest includes the full posts. Only want links? Try this Applet instead: https://ift.tt/2yAD0Pi)", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads_in_books"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var entries = Longreads.anyNewPostOnLongreadsInBooks.entries()\nvar entryTitles = []\nvar entryUrls = []\nvar entryAuthors = []\nvar entryContent = []\nvar entryImageUrls = []\nvar entryPublishedDates = []\n\nfor (var i in entries) {\n  var entry = entries[i]\n  entryTitles.push(entry.EntryTitle)\n  entryUrls.push(entry.EntryUrl)\n  entryAuthors.push(entry.EntryAuthor)\n  entryContent.push(entry.EntryContent)\n  entryImageUrls.push(entry.EntryImageUrl)\n  entryPublishedDates.push(entry.EntryPublished)\n}\n\nif (entries.length > 0) {\n  var message = \"Longreads Digest: \" + entries[0].EntryTitle + \"\\n\"\n  for (var i in entries) {\n    message += \"<p>\" + entries[i].EntryContent + \"</p>\\n\"\n  }\n  \n  EmailDigest.sendWeeklyEmail.setTitle(\"Longreads Digest\")\n  EmailDigest.sendWeeklyEmail.setMessage(message)\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"7am\")\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\")\n  EmailDigest.sendWeeklyEmail.run()\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No new Longreads posts found\")\n}", "intent": "This Applet will bundle up the week's Longreads posts and send a digest of them every Saturday at 7am."}
{"original_description": "When the sun sets, your eWeLink 4 Channels Switch will turn on or off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches4_action", "Filter code method": "Ewelink.switches4Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches4_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches4 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 4-Channel Switch?", "Slug": "switches4_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches4 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches4_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt < new Date() && Weather.sunSets.TempFahrenheit > 72) {\n  if (Weather.sunSets.Condition === \"Sunny\") {\n    Ewelink.switches4Action(Ewelink.switches4Query, Ewelink.switches4OutletQuery, true)\n  } else {\n    Ewelink.switches4Action(Ewelink.switches4Query, Ewelink.switches4OutletQuery, false).skip(\"Not suitable weather\")\n  }\n} else {\n  Ewelink.switches4Action(Ewelink.switches4Query, Ewelink.switches4OutletQuery, true).skip(\"Sun has not set yet\")\n}", "intent": "When the sun sets, turn on or off the eWeLink 4 Channels Switch based on the weather conditions."}
{"original_description": "The Institute for Legislative Action (ILA) is the lobbying arm of the National Rifle Association. This Applet will send you an email every Monday morning with their latest news.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (DayOfWeek === 1) { // Check if it is a Monday\n  var title = \"Latest ILA News\"\n  var message = \"Subject: Latest ILA News\\n\\n\" + Feed.newFeedItem.EntryTitle\n  EmailDigest.sendWeeklyEmail.setTitle(title)\n  .setMessage(message)\n  .skip(\"Not a Monday\") // Skip if not a Monday\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Monday\")\n}", "intent": "Send an email every Monday morning with the latest news from the Institute for Legislative Action (ILA), using data from the RSS feed."}
{"original_description": "A key on your Das Keyboard will change color when temperature outside is above a certain value.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (tempFahrenheit > $$temperatureThreshold$$) {\n  if (DegreesType === \"Celsius\") {\n    Daskeyboardq.signals.skip(\"Triggered in Celsius\")\n  } else {\n    Daskeyboardq.signals.setName(Name)\n      .setZone(Zone)\n      .setColor(Color)\n      .setMessage(Message)\n      .setEffect(Efffect)\n      .setDevice(Device)\n  }\n}", "intent": "Trigger the action when the temperature outside is above a certain value, which is set by the user."}
{"original_description": "Whenever you upload a photo on Instagram, this applet will automatically download that photo to a specific folder on the QNAP device", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "var Caption = Instagram.anyNewPhotoByYou.Caption;\nvar Url = Instagram.anyNewPhotoByYou.Url;\nvar SourceUrl = Instagram.anyNewPhotoByYou.SourceUrl;\nvar CreatedAt = Instagram.anyNewPhotoByYou.CreatedAt;\nvar EmbedCode = Instagram.anyNewPhotoByYou.EmbedCode;\n\nif (Caption !== \"\") {\n  Qnap.downloadFileFromUrl.skip(\"No caption provided\");\n} else if (Url === \"\") {\n  Qnap.downloadFileFromUrl.skip(\"No URL provided\");\n} else if (SourceUrl === \"\") {\n  Qnap.downloadFileFromUrl.skip(\"No source URL provided\");\n} else {\n  var FileName = Caption.replace(/\\s+/g, \"_\").replace(/[^\\w]/gi, \"\");\n  var FolderPath = action_details[2].details.Label;\n  Qnap.downloadFileFromUrl.setFileUrl(SourceUrl);\n  Qnap.downloadFileFromUrl.setFileName(FileName);\n  if (FolderPath !== \"\") {\n    Qnap.downloadFileFromUrl.setFolder(Path: FolderPath);\n  }\n}", "intent": "Whenever you upload a photo on Instagram, this applet will automatically download that photo to a specific folder on the QNAP device."}
{"original_description": "Every day, a Signal will be sent to your Das Keyboard with the daily weather report.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Set up variables\nvar sunrise = Weather.currentWeatherAtTime.SunriseAt;\nvar sunset = Weather.currentWeatherAtTime.SunsetAt;\nvar currentTempFahrenheit = Weather.currentWeatherAtTime.CurrentTempFahrenheit;\nvar currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n\n// Define the signal name and message based on the weather condition\nvar signalName, signalMessage;\nif (currentCondition === \"Rain\") {\n  signalName = \"Rainy Day\";\n  signalMessage = \"It's a rainy day today!\";\n} else if (currentCondition === \"Sunny\") {\n  signalName = \"Sunny Day\";\n  signalMessage = \"What a beautiful sunny day!\";\n} else {\n  signalName = \"Other Weather Condition\";\n  signalMessage = \"Today's weather is: \" + currentCondition;\n}\n\n// Set up the Das Keyboard Q signal\nDaskeyboardq.signals.setName(signalName);\nDaskeyboardq.signals.setMessage(signalMessage);\n\n// Run the action\nDaskeyboardq.runAction(\"daskeyboardq.signals\", {});", "intent": "Send a daily weather report to the Das Keyboard every morning."}
{"original_description": "When your Android battery drops below 15%, your Nanoleaf Aurora will change color to remind you to plug it in and charge. Red by default.", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_low"}, "trigger_details": [{"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryLow.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device's battery became low.", "description": "The time the device's battery became low.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryLow.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryLow.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage <= 15) {\n    if (Nanoleaf.changeColorRequest.skip(\"Reason: Battery low\")) {\n        // Error handling\n    }\n}\n// Set default color to Red\nNanoleaf.changeColorRequest.setValue(\"FF0000\")", "intent": "When the Android battery level falls below 15%, set the Nanoleaf Aurora color based on the provided settings."}
{"original_description": "This Applet will send a reminder 2 days before the end of the month to the Slack channel of your choice, making sure everyone knows to get their receipts in!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_month_on_the"}, "trigger_details": [{"section": "Trigger fields", "title": "Month day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of the month", "Slug": "month_day", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyMonthOnThe.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var MonthDay = DateAndTime.everyMonthOnThe.month_day\nvar Time = DateAndTime.everyMonthOnThe.time\nif (Date.today() <= Date.addDays(Date.today(), 13) && Date.today() >= Date.addDays(Date.today(), 2)) {\n  if (Date.today() == Date.addDays(Date.today(), 14)) {\n    var message = \"Reminder: Get your receipts!\"\n    Slack.postToChannel.setMessage(message)\n    Slack.postToChannel.setTitle(\"Receipt Reminder\")\n  }\n} else {\n  Slack.postToChannel.skip(\"Not 2 days before month end\")\n}", "intent": "Remind Slack channel to get receipts 2 days before month end."}
{"original_description": "The air conditioner will be set to your preset temperature every day at the time you set.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BroadLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "broadlink.fixedTargetTemperature", "Filter code method": "Broadlink.fixedTargetTemperature.skip(string?: reason)", "Runtime method": "runAction(\"broadlink.fixedTargetTemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Thermostatcontrol setfixedtargettemperature num\nDropdown list", "description": "Dropdown list", "details": {"Label": "What temperature?", "Helper text": "temperature", "Slug": "ThermostatControl_SetFixedTargetTemperature_num", "Required": "true", "Can have default value": "true", "Filter code method": "Broadlink.fixedTargetTemperature.setThermostat Control Set Fixed Target Temperature Num(string: ThermostatControl_SetFixedTargetTemperature_num)"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime === \"\") {\n  Broadlink.fixedTargetTemperature.skip(\"No time set\")\n} else if (!DateAndTime.isWithinHours(CheckTime, Time)) {\n  Broadlink.fixedTargetTemperature.skip(\"Not the scheduled time\")\n} else {\n  var deviceinfo = DeviceInfo.deviceinfo\n  var thermostatcontrolSetfixedtargettemperatureNum = ThermostatControl_SetFixedTargetTemperature_num\n  Broadlink.fixedTargetTemperature.setThermostatControlSetFixedTargetTemperatureNum(thermostatcontrolSetfixedtargettemperatureNum)\n}", "intent": "Set the air conditioner to the user's preset temperature every day at a specified time."}
{"original_description": "Choose the subreddit when you set up the Applet. Your new blog posts will automatically be submitted to the Reddit community you choose as a link post. Sit back, and wait for the upvotes...", "trigger_channel": "WordPress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wordpress.any_new_post_wp"}, "trigger_details": [{"section": "Ingredients", "title": "Post title\nThe post's title.", "description": "The post's title.", "details": {"Slug": "PostTitle", "Filter code": "Wordpress.anyNewPostWp.PostTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Post url\nThe post's URL.", "description": "The post's URL.", "details": {"Slug": "PostUrl", "Filter code": "Wordpress.anyNewPostWp.PostUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Post content\nThe post's content, may contain HTML.", "description": "The post's content, may contain HTML.", "details": {"Slug": "PostContent", "Filter code": "Wordpress.anyNewPostWp.PostContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Post image url\nURL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the post. If the post doesn't have an image will point to a placeholder image.", "details": {"Slug": "PostImageUrl", "Filter code": "Wordpress.anyNewPostWp.PostImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Tags and categories\nThe post's tags and categories, comma seperated.", "description": "The post's tags and categories, comma seperated.", "details": {"Slug": "TagsAndCategories", "Filter code": "Wordpress.anyNewPostWp.TagsAndCategories", "Type": "String", "Example": "neato, really cool"}}, {"section": "Ingredients", "title": "Post published\nDate post was created", "description": "Date post was created", "details": {"Slug": "PostPublished", "Filter code": "Wordpress.anyNewPostWp.PostPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Reddit", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "reddit.submit_link_reddit", "Filter code method": "Reddit.submitLinkReddit.skip(string?: reason)", "Runtime method": "runAction(\"reddit.submit_link_reddit\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "Reddit.submitLinkReddit.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Slug": "link", "Required": "true", "Can have default value": "true", "Filter code method": "Reddit.submitLinkReddit.setLink(string: link)"}}, {"section": "Action fields", "title": "Subreddit\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subreddit", "Helper text": "e.g. worldnews", "Slug": "subreddit", "Required": "true", "Can have default value": "true", "Filter code method": "Reddit.submitLinkReddit.setSubreddit(string: subreddit)"}}], "filter_code": "var PostTitle = Wordpress.anyNewPostWp.PostTitle\nvar PostUrl = Wordpress.anyNewPostWp.PostUrl\nvar PostContent = Wordpress.anyNewPostWp.PostContent\nvar PostImageUrl = Wordpress.anyNewPostWp.PostImageUrl\nvar TagsAndCategories = Wordpress.anyNewPostWp.TagsAndCategories\nvar PostPublished = Wordpress.anyNewPostWp.PostPublished\n\nif (Subreddit === \"\") {\n  Domovea.shadeClose.skip(\"No subreddit specified\")\n}\n\nReddit.submitLinkReddit.setTitle(PostTitle)\nReddit.submitLinkReddit.setLink(PostUrl)\nReddit.submitLinkReddit.setSubreddit(Subreddit)\nReddit.submitLinkReddit.run()", "intent": "When a new WordPress post is published, submit it to the chosen Reddit community."}
{"original_description": "Message the @IFTTT bot on Telegram with #color followed by the desired color name or CSS hex color value. E.g. '#color blue' or '#color #f0c080'.   If no matching color is found, lights will turn to white.", "trigger_channel": "Telegram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "telegram.new_group_text_filter"}, "trigger_details": [{"section": "Trigger fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "You can use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot to <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">connect new groups</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Filter\nText input", "description": "Text input", "details": {"Label": "Key phrase", "Helper text": "Any #hashtag or keyword. The Trigger fires when anyone sends a message with the command /ifttt and the key phrase to the group.", "Slug": "filter", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Reply text\nText input > Other", "description": "Text input > Other", "details": {"Label": "What to send as a reply?", "Helper text": "The bot will reply to the command with this text. Leave blank for a standard message.", "Slug": "reply_text", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was triggered.", "description": "Date and time event was triggered.", "details": {"Slug": "created_at", "Filter code": "Telegram.newGroupTextFilter.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Group title\nThe title of the group.", "description": "The title of the group.", "details": {"Slug": "group_title", "Filter code": "Telegram.newGroupTextFilter.GroupTitle", "Type": "String", "Example": "Bot News Group"}}, {"section": "Ingredients", "title": "Author name\nThe name of the author who triggered the Applet.", "description": "The name of the author who triggered the Applet.", "details": {"Slug": "author_name", "Filter code": "Telegram.newGroupTextFilter.AuthorName", "Type": "String", "Example": "Pavel Durov"}}, {"section": "Ingredients", "title": "Author username\nAuthor username, when available.", "description": "Author username, when available.", "details": {"Slug": "author_username", "Filter code": "Telegram.newGroupTextFilter.AuthorUsername", "Type": "String", "Example": "durov"}}, {"section": "Ingredients", "title": "Text\nRepresents a plain-text message contents. Does not include the 'Key phrase'.", "description": "Represents a plain-text message contents. Does not include the 'Key phrase'.", "details": {"Slug": "text", "Filter code": "Telegram.newGroupTextFilter.Text", "Type": "String", "Example": "Hello world!"}}, {"section": "Ingredients", "title": "Html\nRepresents HTML-formatted message contents.", "description": "Represents HTML-formatted message contents.", "details": {"Slug": "html", "Filter code": "Telegram.newGroupTextFilter.HTML", "Type": "String", "Example": "Hello <b>world</b>.<br/>This string <i>can</i> contain <pre>some</pre> HTML <code>tags</code>."}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var Color = Telegram.newGroupTextFilter.Text.match(/^#color\\s*(.*)$/);\nif (Color && Color[1]) {\n  var colorValue = Color[1].trim();\n  if (Hue.setColorAllHue.isValidColor(colorValue)) {\n    Hue.setColorAllHue.setColor(colorValue);\n  } else {\n    Hue.setColorAllHue.skip(\"Invalid color value\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"No color requested\");\n}", "intent": "Check if the trigger message contains a color request and send the requested color to Philips Hue lights."}
{"original_description": "If your team uses Google Drive, this Applet will keep your form submissions easily accessible.", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Jotform.latestFormSubmission.FormID !== \"\") {\n  var filename = Jotform.latestFormSubmission.FormTitle\n  var formatted_row = \"|||\" + Jotform.latestFormSubmission.IP + \"|||\" + Jotform.latestFormSubmission.FormTitle + \"|||\" + Jotform.latestFormSubmission.SubmissionDateTime + \"|||\" + Jotform.latestFormSubmission.TotalSubmissions + \"|||\" + Jotform.latestFormSubmission.RichTextData\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename)\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formatted_row)\n}", "intent": ""}
{"original_description": "This will change the WiZ light(s) of your choice to Party mode at the time and date you specify. Ideal for a birthday!\n(Only for WiZ Colors lights)", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var datetime = DateAndTime.everyYearOn.CheckTime;\nif (datetime) {\n  var entitySlug = \"entity\"; // Get entity from dropdown list\n  var modeSlug = \"mode\"; // Get mode from dropdown list\n  var dimmingSlug = \"dimming\"; // Get dimming level from dropdown list\n  \n  if (datetime.getHours() === 23 && datetime.getMinutes() === 0) { \n    Wiz.turnOn(entitySlug, modeSlug, dimmingSlug)\n  } else {\n    Wiz.turnOn.skip(\"Not the specified time\")\n  }\n}", "intent": "This automation will change the WiZ light(s) of your choice to Party mode at the specified date and time."}
{"original_description": "This will change the WiZ light(s) of your choice to turquoise if Weather Underground records a current temperature below the point you defined. (Only for WiZ Colors lights)", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < parseInt(Temperature)) {\n  Wiz.turnOn(\"turquoise\", \"Turquoise\")\n} else {\n  Wiz.turnOn.skip(\"No temperature drop below defined point\")\n}", "intent": "Check if Weather Underground records a current temperature below the defined point, and change the WiZ light(s) to turquoise."}
{"original_description": "When Wyze Cam detects your smoke alarm ringing, Noonlight will send the fire department to your location", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.smoke_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Smoke detected\nSmoke alarm detected on your wyze camera.", "description": "Smoke alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.smokeTrigger.SmokeDetected", "Type": "String", "Example": "Smoke alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when smoke is triggered.", "description": "Time when smoke is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.smokeTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Noonlight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "safetrek.alert_address", "Filter code method": "Safetrek.alertAddress.skip(string?: reason)", "Runtime method": "runAction(\"safetrek.alert_address\", {})"}, "action_details": [{"section": "Action fields", "title": "Address line 1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Street Address", "Slug": "address_line_1", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Address line 2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Apt, suite, unit, etc.", "Slug": "address_line_2", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "City\nText input > Other", "description": "Text input > Other", "details": {"Label": "City", "Slug": "city", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "State\nText input > Other", "description": "Text input > Other", "details": {"Label": "State", "Slug": "state", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Zip\nText input > Other", "description": "Text input > Other", "details": {"Label": "Zip", "Slug": "zip", "Required": "true", "Can have default value": "true"}}], "filter_code": "const TriggerMessage = Wyzecam.smokeTrigger.SmokeDetected;\nif (TriggerMessage === \"Smoke alarm detected on your wyze camera.\") {\n  const triggerTime = Wyzecam.smokeTrigger.TriggerTime;\n  if (/* add condition for weekday and not weekend */) {\n    Safetrek.alertAddress({\"address_line_1\": /* add address line 1 value */, \n                          \"address_line_2\": /* add address line 2 value */, \n                          \"city\": /* add city value */,\n                          \"state\": /* add state value */,\n                          \"zip\": /* add zip value */});\n  } else {\n    Safetrek.alertAddress.skip(\"Outside of active hours\");\n  }\n} else {\n  Safetrek.alertAddress.skip(\"No smoke detected\");\n}", "intent": "When Wyze Cam detects a smoke alarm ringing, send the fire department to your location."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to blue whenever the current condition reported by Weather Underground changes to \"rain\". A simple way to make sure you don't forget your umbrella! (Only for WiZ Colors lights)", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Wiz.turnOn({\n    entity: $$entity$$,\n    mode: \"blue\",\n    dimming: $$dimming$$\n  })\n} else {\n  Wiz.turnOn.skip(\"No rain forecasted\")\n}", "intent": "Automatically turn the WiZ light(s) blue whenever the current condition reported by Weather Underground changes to \"rain\"."}
{"original_description": "This Applet will attempt to close your garage door 2 or gate every day at specific time. If the garage door is already closed, it will remain closed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gogogate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gogogate.close_door", "Filter code method": "Gogogate.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"gogogate.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime;\nif (CheckTime !== \"\") {\n  var DoorNumber = \"Garage\"; // Replace with actual door number from action_details\n  if (Gogogate.getDoorStatus(DoorNumber) === \"open\") {\n    Gogogate.closeDoor(\"Closing garage door at scheduled time: \" + CheckTime);\n  } else {\n    Gogogate.closeDoor.skip(\"Garage door is already closed\");\n  }\n}", "intent": "This Applet will attempt to close your garage door/gate every day at a specific time, unless the garage door is already closed."}
{"original_description": "Whenever a specified Twitch channel you follow goes live, your Das Keyboard will receive a notification.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === WhichChannel) {\n  Daskeyboardq.signals.setName(\"Live: \" + Twitch.streamGoingLiveForChannelYouFollow.Game)\n    .setZone(\"Left\")\n    .setColor(\"#FF0000\") // Red\n    .setMessage(\"Your followed channel is live!\")\n    .runAction();\n}", "intent": "Whenever a specified Twitch channel you follow goes live, your Das Keyboard will receive a notification. The script checks if the specified channel is going live and sends a signal to the Das Keyboard with the channel name."}
{"original_description": "An easy way to share your favorite tracks on Spotify to the followers of your Telegram channel! Every time you add a track to the playlist you specify, a message will be posted to a Telegram channel that you're an admin of.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_photo", "Filter code method": "Telegram.sendPhoto.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Caption\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Caption", "Helper text": "Optional, 200 characters max.", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendPhoto.setCaption(string: caption)"}}], "filter_code": "if (Trigger.playlist === \"Mid-2000s Jamz\") {\n  if (!addedBy) {\n    Domovea.sendPhoto.skip(\"No user specified\")\n  } else {\n    var message = \"New track added to \" + playlist_name + \"! \\n\" +\n      \"Track: \" + track_name + \"\\n\" +\n      \"Artist: \" + artist_name + \"\\n\" +\n      \"Album: \" + album_name\n    Domovea.sendPhoto.setCaption(message)\n    Domovea.sendPhoto.setPhotoUrl(album_cover_url)\n  }\n} else {\n  Domovea.sendPhoto.skip(\"Invalid playlist\")\n}", "intent": "Send a message to a Telegram channel with a photo of the added track, including its name, artist, and album art."}
{"original_description": "When you plug in your phone to charge it, your Android's ringtone will be set to mute.", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_plugged_in"}, "trigger_details": [{"section": "Ingredients", "title": "Power source\nThe source of the charge.", "description": "The source of the charge.", "details": {"Slug": "PowerSource", "Filter code": "AndroidBattery.batteryPluggedIn.PowerSource", "Type": "String", "Example": "AC"}}, {"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryPluggedIn.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device was plugged in.", "description": "The time the device was plugged in.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryPluggedIn.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryPluggedIn.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "if (AndroidBattery.batteryPluggedIn.PowerSource !== \"AC\") {\n  AndroidDevice.muteDevice.skip(\"Not charging from AC\")\n}", "intent": "When the Android device is plugged in, check if it's charging from AC power. If not, mute the device."}
{"original_description": "This will turn on your Phillips Hue lights when you set your mode", "trigger_channel": "Futurehome", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "futurehome.mode_switched"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe Mode the site was set to.", "description": "The Mode the site was set to.", "details": {"Slug": "mode", "Filter code": "Futurehome.modeSwitched.Mode", "Type": "String", "Example": "home"}}, {"section": "Ingredients", "title": "Triggered at\nThe time when the mode was triggered.", "description": "The time when the mode was triggered.", "details": {"Slug": "triggered_at", "Filter code": "Futurehome.modeSwitched.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Site name\nThe name of the site where the trigger was triggered.", "description": "The name of the site where the trigger was triggered.", "details": {"Slug": "site_name", "Filter code": "Futurehome.modeSwitched.SiteName", "Type": "String", "Example": "Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Futurehome.modeSwitched.Mode === 'home') {\n  Hue.turnOffAllHue()\n}", "intent": "When the Futurehome mode is changed, this automation turns off all Philips Hue lights."}
{"original_description": "Every time that you miss a call on your phone, a task will be added to Remember The Milk to remind you to follow up on the call.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.miss_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.missAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.missAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.missAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.missAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "AndroidPhone.missAPhoneCall.skip(\"No filter code implementation for this trigger\");\n// Wait until the API is ready\nif (Api.isReady()) {\n  var task = \"Call \" + AndroidPhone.missAPhoneCall.ContactName;\n  task += \" at \" + AndroidPhone.missAPhoneCall.OccurredAt;\n  task += \" from \" + AndroidPhone.missAPhoneCall.FromNumber;\n  task += \" on \" + AndroidPhone.missAPhoneCall.DeviceName;\n  Rememberthemilk.tasksAdd.setTask(task);\n}", "intent": "When the Android Phone Call trigger misses a call, create a new task in Remember The Milk with the contact name, occurred at time, from number, and device name."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to orange if Weather Underground records a current temperature higher than the threshold you define. (Only for WiZ Colors lights)", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "", "intent": ""}
{"original_description": "Every new Instagram video you post will be automatically added to your Buffer Queue!", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_video_by_you_tagged_instagram"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newVideoByYouTaggedInstagram.Caption", "Type": "String", "Example": "A cool video #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the tag", "description": "The caption without the tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CaptionNoTag", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newVideoByYouTaggedInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "// Check if the trigger was successful\nif (Instagram.newVideoByYouTaggedInstagram !== null) {\n  // Extract relevant information from the trigger\n  const caption = Instagram.newVideoByYouTaggedInstagram.Caption;\n  const url = Instagram.newVideoByYouTaggedInstagram.URL;\n  const videoSourceURL = Instagram.newVideoByYouTaggedInstagram.VideoSourceURL;\n  const imageThumbnailURL = Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL;\n  const createdAt = Instagram.newVideoByYouTaggedInstagram.CreatedAt;\n  const embedCode = Instagram.newVideoByYouTaggedInstagram.EmbedCode;\n\n  // Add the video to Buffer with a message\n  Buffer.addToBuffer.setMessage(\"New Instagram Video: \" + caption)\n    .skip(\"Error adding to Buffer\")\n    .set(\"Message\", `New Instagram Video: ${caption}`);\n}", "intent": "Automatically add a new Instagram video to the Buffer Queue."}
{"original_description": "Stay up-to-date with the latest blog posts from the Library of Congress. Every Saturday morning, you will receive an email with a digest of blog posts from the week.", "trigger_channel": "Library of Congress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "loc.new_blog_post"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe post's title.", "description": "The post's title.", "details": {"Slug": "EntryTitle", "Filter code": "Loc.newBlogPost.Title", "Type": "String", "Example": "Pic of the Week: Celebrating Classical Cambodian Dance"}}, {"section": "Ingredients", "title": "Post url\nThe URL to the blog post.", "description": "The URL to the blog post.", "details": {"Slug": "EntryUrl", "Filter code": "Loc.newBlogPost.PostUrl", "Type": "String", "Example": "http://blogs.loc.gov/loc/2017/05/pic-of-the-week-celebrating-classical-cambodian-dance/"}}, {"section": "Ingredients", "title": "Blog author\nThe author of the blog post.", "description": "The author of the blog post.", "details": {"Slug": "EntryAuthor", "Filter code": "Loc.newBlogPost.BlogAuthor", "Type": "String", "Example": "Wendi Maloney"}}, {"section": "Ingredients", "title": "Post content html\nThe blog post content, may contain HTML.", "description": "The blog post content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Loc.newBlogPost.PostContentHtml", "Type": "String", "Example": "<p>The Cambodian-American Heritage Dancers..."}}, {"section": "Ingredients", "title": "Post image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Loc.newBlogPost.PostImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Published date\nDate the post was published.", "description": "Date the post was published.", "details": {"Slug": "EntryPublished", "Filter code": "Loc.newBlogPost.PublishedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "// Check if today is a Saturday\nvar dayOfWeek = Meta.currentUserTime.day()\nif (dayOfWeek !== 6) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Saturday\")\n}\n\n// Get new blog post data\nvar title = Loc.newBlogPost.Title\nvar postUrl = Loc.newBlogPost.PostUrl\nvar author = Loc.newBlogPost.BlogAuthor\nvar postContentHtml = Loc.newBlogPost.PostContentHtml\nvar postImageUrl = Loc.newBlogPost.PostImageUrl\nvar publishedDate = Loc.newBlogPost.PublishedDate\n\n// Create email digest content\nvar message = \"New blog posts from the Library of Congress:\\n\\n\"\nmessage += \"<ul>\"\nfor (var i = 0; i < 5; i++) {\n  // Get latest 5 blog posts\n  var entryTitle = Loc.newBlogPost[i].EntryTitle\n  var entryUrl = Loc.newBlogPost[i].EntryUrl\n  message += \"<li><a href='\" + entryUrl + \"'>\" + entryTitle + \"</a>\"\n}\nmessage += \"</ul>\"\n\n// Send email digest\nEmailDigest.sendWeeklyEmail.setTitle(\"New blog posts from the Library of Congress\")\nEmailDigest.sendWeeklyEmail.setMessage(message)\nEmailDigest.sendWeeklyEmail.skip()", "intent": "Automatically send an email digest of blog posts from the Library of Congress every Saturday morning."}
{"original_description": "If your Airthings device detects high radon levels above the set threshold, your Hue light will briefly blink.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.radon-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Measurement unit", "Helper text": "What unit of measurement would you like to receive your radon levels in?", "Slug": "unit", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get radon levels from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.radonAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Radon level\nThe radon level. In the measurement unit specified.", "description": "The radon level. In the measurement unit specified.", "details": {"Slug": "value", "Filter code": "Airthings.radonAbove.RadonLevel", "Type": "String", "Example": "120"}}, {"section": "Ingredients", "title": "Measurement unit\nThe unit of measurement used for radon, Bq/m3 or pCi/L.", "description": "The unit of measurement used for radon, Bq/m3 or pCi/L.", "details": {"Slug": "unit", "Filter code": "Airthings.radonAbove.MeasurementUnit", "Type": "String", "Example": "Bq/m3"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.radonAbove.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Airthings.radonAbove.RadonLevel > parseInt(Airthings.radonAbove.Threshold)) {\n  var reason = \"Radon level above threshold: \" + Airthings.radonAbove.RadonLevel + \" \" + Airthings.radonAbove.MeasurementUnit;\n  Hue.blinkAllHue.skip(reason);\n}", "intent": "Automatically blink all Hue lights when high radon levels are detected by Airthings device."}
{"original_description": "Create your own email newsletter from any RSS Feed URL you paste in the field below. Enter a keyword too and this Applet will send you an email for every new entry that matches.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle.indexOf(keyword) !== -1) {\n  var subject = \"New entry: \" + Feed.newFeedItem.EntryTitle\n  Email.sendMeEmail.setSubject(subject)\n  var body = \"<p>New entry:</p><br/>\" + Feed.newFeedItem.EntryContent\n  if (body.length > 0) {\n    Email.sendMeEmail.setBody(body)\n    Email.sendMeEmail.skip()\n  }\n}", "intent": "Create an email newsletter from a given RSS Feed URL, checking for new entries that match a specific keyword."}
{"original_description": "This applet will append Medium bookmarks to a stream in a data.world dataset.", "trigger_channel": "Medium", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "medium.post_bookmarked_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Bookmarked at\nDate and time post was bookmarked.", "description": "Date and time post was bookmarked.", "details": {"Slug": "bookmarked_at", "Filter code": "Medium.postBookmarkedByYou.BookmarkedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Post url\nThe URL to the post on Medium.", "description": "The URL to the post on Medium.", "details": {"Slug": "post_url", "Filter code": "Medium.postBookmarkedByYou.PostUrl", "Type": "Web URL", "Example": "https://medium.com/@majelbstoat/what-are-bloom-filters-1ec2a50c68ff"}}, {"section": "Ingredients", "title": "Post title\nThe title of the post on Medium.", "description": "The title of the post on Medium.", "details": {"Slug": "post_title", "Filter code": "Medium.postBookmarkedByYou.PostTitle", "Type": "String", "Example": "What are Bloom Filters?"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.append", "Filter code method": "Datadotworld.append.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.append\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to update? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Stream name\nText input > File name", "description": "Text input > File name", "details": {"Label": "Stream", "Helper text": "Which stream would you like to append records to? IMPORTANT: Stream names can only contain lowercase letters, numbers and dashes (e.g. my-stream).", "Slug": "stream_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setStream Name(string: stream_name)"}}, {"section": "Action fields", "title": "Payload\nText input > Other", "description": "Text input > Other", "details": {"Label": "Record", "Helper text": "Which keys and values would you like in your record? Keys and values must be separated by &quot;||&quot;. Key-value pairs must be separated by &quot;|||&quot;. Example: first||Steve|||last||Rogers", "Slug": "payload", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setPayload(string: payload)"}}], "filter_code": "const bookmark = (Medium.postBookmarkedByYou as any)\nconst pairs = Object.getOwnPropertyNames(bookmark).map(prop => prop + \"||\" + bookmark[prop])\nDatadotworld.append.setPayload(pairs.join(\"|||\"))\n\n// Get the necessary details\nconst bookmarkedAt = Medium.postBookmarkedByYou.BookmarkedAt\nconst postUrl = Medium.postBookmarkedByYou.PostUrl\nconst postTitle = Medium.postBookmarkedByYou.PostTitle\n\n// If it's not raining, skip the action\nif (Weather.tomorrowsForecastCallsFor.TomorrowsCondition !== \"Rain\") {\n  Datadotworld.append.skip(\"No rain forecasted\")\n} else {\n  // Append the bookmark to the stream\n  Datadotworld.append.setDatasetKey(dataset_key)\n    .setStreamName(stream_name)\n    .setPayload(pairs.join(\"|||\"))\n    .run()\n}", "intent": "This applet will append Medium bookmarks to a stream in a data.world dataset.", "filter_code_old": "const bookmark = (Medium.postBookmarkedByYou as any)\nconst pairs = Object.getOwnPropertyNames(bookmark).map(prop => prop + \"||\" + bookmark[prop])\nDatadotworld.append.setPayload(pairs.join(\"|||\"))\n\n"}
{"original_description": "When Wyze detects your CO alarm ringing, Noonlight will send the fire department to your location", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.co_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Co detected\nCO alarm detected on your wyze camera.", "description": "CO alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.coTrigger.CoDetected", "Type": "String", "Example": "CO alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when CO is triggered.", "description": "Time when CO is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.coTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Noonlight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "safetrek.alert_address", "Filter code method": "Safetrek.alertAddress.skip(string?: reason)", "Runtime method": "runAction(\"safetrek.alert_address\", {})"}, "action_details": [{"section": "Action fields", "title": "Address line 1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Street Address", "Slug": "address_line_1", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Address line 2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Apt, suite, unit, etc.", "Slug": "address_line_2", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "City\nText input > Other", "description": "Text input > Other", "details": {"Label": "City", "Slug": "city", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "State\nText input > Other", "description": "Text input > Other", "details": {"Label": "State", "Slug": "state", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Zip\nText input > Other", "description": "Text input > Other", "details": {"Label": "Zip", "Slug": "zip", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Wyzecam.coTrigger.CoDetected === true) {\n  var TriggerTime = Wyzecam.coTrigger.TriggerTime;\n  var AddressLine1 = \"\";\n  var AddressLine2 = \"\";\n  var City = \"\";\n  var State = \"\";\n  var Zip = \"\";\n\n  if (!AddressLine1 || !City || !State || !Zip) {\n    Safetrek.alertAddress.skip(\"Incomplete address information\");\n  } else {\n    runAction(\"safetrek.alert_address\", {\n      \"address_line_1\": AddressLine1,\n      \"address_line_2\": AddressLine2,\n      \"city\": City,\n      \"state\": State,\n      \"zip\": Zip\n    });\n  }\n}", "intent": "When Wyze detects a CO alarm, Noonlight will send the fire department to your location."}
{"original_description": "Hey Chicago: this Applet will send you a notification from the IFTTT app when there's an alert during your morning commute (7-9am on weekdays).", "trigger_channel": "Chicago Transit Authority", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "cta.new_brown_line_alert"}, "trigger_details": [{"section": "Ingredients", "title": "Alert title\nThe alert's title.", "description": "The alert's title.", "details": {"Slug": "EntryTitle", "Filter code": "Cta.newBrownLineAlert.AlertTitle", "Type": "String", "Example": "Elevator at Cumberland Temporarily Out-of-Service (Elevator Status)"}}, {"section": "Ingredients", "title": "Alert url\nThe alert's URL.", "description": "The alert's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Cta.newBrownLineAlert.AlertUrl", "Type": "String", "Example": "http://ift.tt/2q1oEoI"}}, {"section": "Ingredients", "title": "Alert content\nThe alert's content.", "description": "The alert's content.", "details": {"Slug": "EntryContent", "Filter code": "Cta.newBrownLineAlert.AlertContent", "Type": "String", "Example": "(Tue, May 9 2017 5:43 PM to TBD) The mezzanine-to-platform elevator at Cumberland (Blue Line) is temporarily out-of-service."}}, {"section": "Ingredients", "title": "Alert published\nDate alert was created.", "description": "Date alert was created.", "details": {"Slug": "EntryPublished", "Filter code": "Cta.newBrownLineAlert.AlertPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var Hour = Meta.currentUserTime.hour()\nif (Hour < 7 || Hour > 9) {\n  IfNotifications.sendNotification.skip(\"Not commuting hours\")\n} else if (Meta.currentUserTime.day() != 1 && Meta.currentUserTime.day() != 2 && Meta.currentUserTime.day() != 3 && Meta.currentUserTime.day() != 4 && Meta.currentUserTime.day() != 5) {\n  IfNotifications.sendNotification.skip(\"It's a weekend\")\n} else if (!Cta.newBrownLineAlert.EntryTitle) {\n  IfNotifications.sendNotification.skip(\"No alert found\")\n} else {\n  var message = \"CTA Alert: \" + Cta.newBrownLineAlert.EntryTitle\n  IfNotifications.sendNotification.setMessage(message)\n}", "intent": "Send a notification to the user when there's an alert during their morning commute (7-9am on weekdays) in Chicago.", "filter_code_old": "var Day = Meta.currentUserTime.day()\nvar Hour = Meta.currentUserTime.hour()\n\nif (Day == 6 || Day ==7) {\n  IfNotifications.sendNotification.skip(\"Not a weekday\")\n}\n\nif (Hour < 7 || Hour > 9) {\n  IfNotifications.sendNotification.skip(\"Not commuting hours\")\n}\n\n"}
{"original_description": "This Applet will bundle up the week's Longreads posts and send you a digest of links to them every Saturday at 7am.", "trigger_channel": "Longreads", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "longreads.any_new_post_on_longreads_in_books"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Longreads.anyNewPostOnLongreadsInBooks.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "// Check if today is Saturday\nif (Meta.currentUserTime.day() === 6) {\n  // Get the Longreads posts from this week\n  var longreadsPosts = Longreads.anyNewPostOnLongreadsInBooks();\n  \n  // Create a message with the post details\n  var message = \"Longreads Digest: \";\n  for (var i = 0; i < longreadsPosts.length; i++) {\n    message += \"<a href='\" + longreadsPosts[i].EntryUrl + \"'>\" + longreadsPosts[i].EntryTitle + \"</a>\";\n    if (i < longreadsPosts.length - 1) {\n      message += \", \";\n    }\n  }\n  \n  // Send the email digest with the message\n  EmailDigest.sendWeeklyEmail.setTitle(\"Longreads Digest\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n} else {\n  // Skip the action since it's not Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Saturday\");\n}", "intent": "This Applet will send a digest of Longreads posts every Saturday at 7am, containing the entry title, URL, author, content, image URL, and published date."}
{"original_description": "Your Homey will inform you as soon as your washer with Home Connect has finished.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Homey", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "homey.let_homey_speak", "Filter code method": "Homey.letHomeySpeak.skip(string?: reason)", "Runtime method": "runAction(\"homey.let_homey_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Which homey\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Homey?", "Slug": "which_homey", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What text?", "Slug": "what_text", "Required": "true", "Can have default value": "true", "Filter code method": "Homey.letHomeySpeak.setWhat Text(string: what_text)"}}], "filter_code": "if (HcWasher.washerCycleFinished.CreatedAt) {\n  const haId = $$ha_id$$;\n  const whichHomey = $$which_homey$$;\n  const whatText = $$what_text$$;\n  if (!haId || !whichHomey || !whatText) {\n    Homey.letHomeySpeak.skip(\"Missing required parameters\");\n  } else {\n    Homey.letHomeySpeak(whatText);\n  }\n}", "intent": "Inform the user as soon as the Home Connect washer cycle is finished, providing an option to specify which Homey to inform and what text to speak."}
{"original_description": "This Action will press SwitchBoth.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.press_bot", "Filter code method": "Switchbot.pressBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.press_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mesh.events.Text.includes(\"Motion Tag: Detected!\")) {\n  if (SwitchBot.pressBot) {\n    // The device should be chosen from the dropdown list\n    var chose_a_device = \"\"  // TO DO: Implement this in a more efficient way\n    Switchbot.pressBot(chose_a_device, \"Pressing SwitchBoth\")\n  } else {\n    Switchbot.pressBot.skip(\"No compatible device found\")\n  }\n}", "intent": "Trigger the Action when a specific event is detected in MESH and press SwitchBoth."}
{"original_description": "When you save an item in Pocket, a task will be added to Remember The Milk to remind you to (actually!) read it later.", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "var Title = Pocket.newItemAddedPocket.Title;\nif (Title) {\n  Rememberthemilk.tasksAdd.setTask(\"Read: \" + Title);\n}", "intent": "When a new item is added to Pocket, add a task to Remember The Milk with the title of the item."}
{"original_description": "When you call IFTTT and leave voicemail, it will be added to your Toodledo task list. Find your IFTTT phone number at ift.tt/phone_call", "trigger_channel": "Phone Call (US only)", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "phone_call.leave_ifttt_a_voicemail"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary mp3 url\nA public URL to the voicemail audio in mp3 format that anyone can visit for 30 days.", "description": "A public URL to the voicemail audio in mp3 format that anyone can visit for 30 days.", "details": {"Slug": "TemporaryMp3Url", "Filter code": "PhoneCall.leaveIftttAVoicemail.TemporaryMp3Url", "Type": "File URL", "Example": "http://media.ifttt.com/calls/4-RE16dd33bca24641284e2bdffc6c246427.mp3"}}, {"section": "Ingredients", "title": "From\nThe phone number you called ifttt from.", "description": "The phone number you called ifttt from.", "details": {"Slug": "From", "Filter code": "PhoneCall.leaveIftttAVoicemail.From", "Type": "String", "Example": "(415)-222-2222"}}, {"section": "Ingredients", "title": "Message\nThe transcribed message.", "description": "The transcribed message.", "details": {"Slug": "Message", "Filter code": "PhoneCall.leaveIftttAVoicemail.Message", "Type": "String", "Example": "Hello, it is a really sunny day in..."}}, {"section": "Ingredients", "title": "Mp3 url\nA public URL to the voicemail audio in mp3 format.", "description": "A public URL to the voicemail audio in mp3 format.", "details": {"Slug": "Mp3Url", "Filter code": "PhoneCall.leaveIftttAVoicemail.Mp3Url", "Type": "String", "Example": "http://media.ifttt.com/calls/4-RE16dd33bca24641284e2bdffc6c246427.mp3"}}, {"section": "Ingredients", "title": "Received at\nThe date and time you called ifttt.", "description": "The date and time you called ifttt.", "details": {"Slug": "ReceivedAt", "Filter code": "PhoneCall.leaveIftttAVoicemail.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Toodledo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "toodledo.add-task", "Filter code method": "Toodledo.addTask.skip(string?: reason)", "Runtime method": "runAction(\"toodledo.add-task\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Toodledo.addTask.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Toodledo.addTask.setNote(string: note)"}}, {"section": "Action fields", "title": "Tag\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tag", "Required": "false", "Can have default value": "true", "Filter code method": "Toodledo.addTask.setTag(string: tag)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Priority", "Slug": "priority", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Add to folder", "Slug": "folder", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Extract relevant data from trigger\nvar From = PhoneCall.leaveIftttAVoicemail.From;\nvar Message = PhoneCall.leaveIftttAVoicemail.Message;\n\n// Construct title for Toodledo task\nvar Title = \"IFTTT Voicemail: \" + Message;\n\n// Set action fields in Toodledo\nToodledo.addTask.setTitle(Title);\nToodledo.addTask.setNote(Message);\nToodledo.addTask.setTag(\"IFTTT\");\nToodledo.addTask.setPriority(\"High\");\nToodledo.addTask.setFolder(\"Phone Calls\");\n\n// Add task to Toodledo\nToodledo.addTask.run();", "intent": "When a phone call leaves voicemail, extract the necessary information and add it as a task in Toodledo."}
{"original_description": "Whenever a Trello card is assigned to you, your Das Keyboard will receive a new signal.", "trigger_channel": "Trello", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "trello.card_assigned_to_me"}, "trigger_details": [{"section": "Trigger fields", "title": "Board\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe title of the card.", "description": "The title of the card.", "details": {"Slug": "title", "Filter code": "Trello.cardAssignedToMe.Title", "Type": "String", "Example": "Weigh suitcases before leaving for airport"}}, {"section": "Ingredients", "title": "Description\nThe description of the card.", "description": "The description of the card.", "details": {"Slug": "description", "Filter code": "Trello.cardAssignedToMe.Description", "Type": "String", "Example": "Be sure to check airline maximum weight allowance!"}}, {"section": "Ingredients", "title": "Assigner full name\nThe full name of the member who assigned the card to you.", "description": "The full name of the member who assigned the card to you.", "details": {"Slug": "creator_name", "Filter code": "Trello.cardAssignedToMe.AssignerFullName", "Type": "String", "Example": "Mary Smith"}}, {"section": "Ingredients", "title": "Assigner username\nThe username of the member who assigned the card to you.", "description": "The username of the member who assigned the card to you.", "details": {"Slug": "creator_username", "Filter code": "Trello.cardAssignedToMe.AssignerUsername", "Type": "String", "Example": "sfjetsetbuddy"}}, {"section": "Ingredients", "title": "List name\nThe list that contained the card.", "description": "The list that contained the card.", "details": {"Slug": "list_name", "Filter code": "Trello.cardAssignedToMe.ListName", "Type": "String", "Example": "To dos"}}, {"section": "Ingredients", "title": "Board name\nThe board that contains the card.", "description": "The board that contains the card.", "details": {"Slug": "board_name", "Filter code": "Trello.cardAssignedToMe.BoardName", "Type": "String", "Example": "New Zealand Trip"}}, {"section": "Ingredients", "title": "Card url\nThe URL to the card.", "description": "The URL to the card.", "details": {"Slug": "url", "Filter code": "Trello.cardAssignedToMe.CardURL", "Type": "Web URL", "Example": "https://trello.com/c/hZtPQ5Af"}}, {"section": "Ingredients", "title": "Assigned at\nDate and time the card was assigned to you.", "description": "Date and time the card was assigned to you.", "details": {"Slug": "added_at", "Filter code": "Trello.cardAssignedToMe.AssignedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Trello.cardAssignedToMe.AssignerFullName === \"Mary Smith\") {\n  Daskeyboardq.signals.setName(\"Signal from Mary\");\n} else if (Trello.cardAssignedToMe.ListName === \"To dos\") {\n  Daskeyboardq.signals.setName(\"Signal from To-do list\");\n}\nDaskeyboardq.signals.setZone(Trello.cardAssignedToMe.BoardName);\nDaskeyboardq.signals.setColor(Trello.cardAssignedToMe.Description);\nvar message = \"New card assigned: \" + Trello.cardAssignedToMe.Title;\nif (message !== \"\") {\n  Daskeyboardq.signals.setMessage(message);\n} else {\n  Daskeyboardq.signals.skip(\"No title provided\");\n}\nDaskeyboardq.signals.runAction();", "intent": "When a Trello card is assigned to you, send a signal to your Das Keyboard Q with specific details from the card."}
{"original_description": "This Applet will send you a push notification reminding you to take 5 minutes to meditate at the time you specify, and dim your Hue bulb to set the scene", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (new Date().getHours() === parseInt(Time.split(\" \")[4]) && new Date().getMinutes() === 0) {\n  IfNotifications.sendNotification.setMessage(\"Take a moment to meditate!\")\n  Domovea.shadeClose()\n} else {\n  IfNotifications.sendNotification.skip(\"Not the specified time\")\n}", "intent": "This applet will send a push notification reminding you to meditate at the specified time and dim your Hue bulb."}
{"original_description": "This applet will append Reddit posts to a stream in a data.world dataset.", "trigger_channel": "Reddit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "reddit.new_post_from_search_reddit"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Helper text": "Use reddit's <a target='_blank' class='open-native' href='https://support.reddithelp.com/hc/en-us/articles/19696541895316-Available-search-features'>search operators</a> for advanced search", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nTitle of this post.", "description": "Title of this post.", "details": {"Slug": "Title", "Filter code": "Reddit.newPostFromSearchReddit.Title", "Type": "String", "Example": "Little Bobby Tables!"}}, {"section": "Ingredients", "title": "Image url\nURL to the post's image if one exists.", "description": "URL to the post's image if one exists.", "details": {"Slug": "ImageURL", "Filter code": "Reddit.newPostFromSearchReddit.ImageURL", "Type": "String", "Example": "http://imgs.xkcd.com/comics/exploits_of_a_mom.png"}}, {"section": "Ingredients", "title": "Content\nContent of this post, may be text or external link.", "description": "Content of this post, may be text or external link.", "details": {"Slug": "Content", "Filter code": "Reddit.newPostFromSearchReddit.Content", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Content html\nContent of this post in HTML.", "description": "Content of this post in HTML.", "details": {"Slug": "ContentHTML", "Filter code": "Reddit.newPostFromSearchReddit.ContentHTML", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Post url\nURL to this post on reddit.", "description": "URL to this post on reddit.", "details": {"Slug": "PostURL", "Filter code": "Reddit.newPostFromSearchReddit.PostURL", "Type": "String", "Example": "http://www.reddit.com/r/ProgrammerHumor/comments/16dazp/little_bobby_tables_xkcd/"}}, {"section": "Ingredients", "title": "Subreddit\nName of the subreddit where this item was posted.", "description": "Name of the subreddit where this item was posted.", "details": {"Slug": "Subreddit", "Filter code": "Reddit.newPostFromSearchReddit.Subreddit", "Type": "String", "Example": "ifttt"}}, {"section": "Ingredients", "title": "Author\nUsername of this post's author.", "description": "Username of this post's author.", "details": {"Slug": "Author", "Filter code": "Reddit.newPostFromSearchReddit.Author", "Type": "String", "Example": "ltibbets"}}, {"section": "Ingredients", "title": "Posted at\nDate this post was posted.", "description": "Date this post was posted.", "details": {"Slug": "PostedAt", "Filter code": "Reddit.newPostFromSearchReddit.PostedAt", "Type": "String", "Example": "August 23, 2013 at 05:00PM"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.append", "Filter code method": "Datadotworld.append.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.append\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to update? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Stream name\nText input > File name", "description": "Text input > File name", "details": {"Label": "Stream", "Helper text": "Which stream would you like to append records to? IMPORTANT: Stream names can only contain lowercase letters, numbers and dashes (e.g. my-stream).", "Slug": "stream_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setStream Name(string: stream_name)"}}, {"section": "Action fields", "title": "Payload\nText input > Other", "description": "Text input > Other", "details": {"Label": "Record", "Helper text": "Which keys and values would you like in your record? Keys and values must be separated by &quot;||&quot;. Key-value pairs must be separated by &quot;|||&quot;. Example: first||Steve|||last||Rogers", "Slug": "payload", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setPayload(string: payload)"}}], "filter_code": "var post = (Reddit.newPostFromSearchReddit as any)\nvar pairs = Object.getOwnPropertyNames(post).map(prop => prop + \"||\" + post[prop])\nDatadotworld.append.setPayload(pairs.join(\"|||\"))\nDatadotworld.append.setStreamName(data.world_stream_name)", "intent": "This applet will append Reddit posts to a stream in a data.world dataset.", "filter_code_old": "const post = (Reddit.newPostFromSearchReddit as any)\nconst pairs = Object.getOwnPropertyNames(post).map(prop => prop + \"||\" + post[prop])\nDatadotworld.append.setPayload(pairs.join(\"|||\"))\n\n"}
{"original_description": "This will turn on the WiZ lights of your choice in Wake-up mode within 15 minutes of the sunrise in your location. Wake up with the sun!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt\nif (Weather.currentConditionIs.Condition !== \"Rain\" && !WeekendCheck) {\n    var CurrentTempFahrenheit = Weather.sunRises.TempFahrenheit\n    if (CurrentTempFahrenheit > 18 || CurrentTempFahrenheit < 22) {\n        Wiz.turnOn.setEntity(\"Your light(s) name\").setMode(\"Wake-up mode\").setDimming(\"Your preferred brightness\")\n    } else {\n        Wiz.turnOn.skip(\"Unsuitable temperature for Wake-up mode\")\n    }\n} else {\n    Wiz.turnOn.skip(\"No suitable weather conditions for Wake-up mode\")\n}", "intent": "This IFTTT automation will turn on the WiZ lights of your choice in Wake-up mode within 15 minutes of sunrise. It checks if it's a weekday and skips the action if not, or if the current temperature is below 18°C (64°F) or above 22°C (72°F)."}
{"original_description": "When the temperature is higher than a certain value, your Connector blind will be closed.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Connector", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dooya_connector.close_blinds", "Filter code method": "DooyaConnector.closeBlinds.skip(string?: reason)", "Runtime method": "runAction(\"dooya_connector.close_blinds\", {})"}, "action_details": [{"section": "Action fields", "title": "Which blinds\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which blind?", "Slug": "which_blinds", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  DooyaConnector.closeBlinds(\"Temperature is too high\")\n} else {\n  // No action required\n}", "intent": "Close the Connector blind when the temperature exceeds a certain value."}
{"original_description": "This will turn off your TV using Logitech Harmony Remote when your mode is set to sleep.", "trigger_channel": "Futurehome", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "futurehome.mode_switched"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe Mode the site was set to.", "description": "The Mode the site was set to.", "details": {"Slug": "mode", "Filter code": "Futurehome.modeSwitched.Mode", "Type": "String", "Example": "home"}}, {"section": "Ingredients", "title": "Triggered at\nThe time when the mode was triggered.", "description": "The time when the mode was triggered.", "details": {"Slug": "triggered_at", "Filter code": "Futurehome.modeSwitched.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Site name\nThe name of the site where the trigger was triggered.", "description": "The name of the site where the trigger was triggered.", "details": {"Slug": "site_name", "Filter code": "Futurehome.modeSwitched.SiteName", "Type": "String", "Example": "Home"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.end-activity", "Filter code method": "Harmony.endActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.end-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "This applet will change the setpoint temperature of your AC when the outside temperature rises above a selected temperature.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GE Appliances Window AC", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ge_appliances_wac.wac-set-target-temp", "Filter code method": "GeAppliancesWac.wacSetTargetTemp.skip(string?: reason)", "Runtime method": "runAction(\"ge_appliances_wac.wac-set-target-temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Applianceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which appliance?", "Slug": "applianceId", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Set-target-temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "What temperature?", "Slug": "set-target-temp", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > Temperature) {\n  GeAppliancesWac.wacSetTargetTemp(70)\n} else {\n  GeAppliancesWac.wacSetTargetTemp.skip(\"Outside temperature is below the selected threshold\")\n}", "intent": "This applet will change the setpoint temperature of your AC when the outside temperature rises above a selected temperature."}
{"original_description": "This applet will initiate sync for a data.world dataset or data project at a specific time every day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.sync", "Filter code method": "Datadotworld.sync.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.sync\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to sync? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nif (time.includes(\"AM\") && time.getHours() < 9) {\n  Datadotworld.sync.skip(\"Outside of active hours\")\n} else if (time.includes(\"PM\") && time.getHours() > 5) {\n  Datadotworld.sync.skip(\"Outside of active hours\")\n} else {\n  var datasetKey = \"dataset_key\"\n  Datadotworld.sync(datasetKey)\n}", "intent": "This IFTTT applet initiates a sync for a data.world dataset or data project at a specific time every day, based on user input."}
{"original_description": "This Action will activate the output of your cloudBit for 3 seconds.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "littleBits", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "littlebits.output", "Filter code method": "Littlebits.output.skip(string?: reason)", "Runtime method": "runAction(\"littlebits.output\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which cloudBit?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mesh.events.Text.includes(\"Motion Tag: Detected!\")) {\n  Littlebits.output.runAction({ \"device_id\": $$device_id$$ }, \"Activate output for 3 seconds\");\n} else {\n  Littlebits.output.skip(\"No motion detected\")\n}", "intent": "This action will activate the output of your littleBits for 3 seconds when a specific event is triggered in MESH."}
{"original_description": "When a new subscriber joins your Twitch channel, your Kasa light bulb will change color. Color, brightness, and transition time is fully customizable by the user.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_follower_on_your_channel"}, "trigger_details": [{"section": "Ingredients", "title": "Followed at\nDate and time the user followed your Channel.", "description": "Date and time the user followed your Channel.", "details": {"Slug": "created_at", "Filter code": "Twitch.newFollowerOnYourChannel.FollowedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Follower name\nThe name of the user who followed your channel.", "description": "The name of the user who followed your channel.", "details": {"Slug": "follower_name", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Follower bio\nThe bio of the user that followed you.", "description": "The bio of the user that followed you.", "details": {"Slug": "follower_bio", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerBio", "Type": "String", "Example": "A gaming fanatic from Boston."}}, {"section": "Ingredients", "title": "Follower url\nA url to the follower's profile on Twitch.", "description": "A url to the follower's profile on Twitch.", "details": {"Slug": "follower_url", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Follower count\nThe number of followers of your channel.", "description": "The number of followers of your channel.", "details": {"Slug": "follower_count", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerCount", "Type": "String", "Example": "215780"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color", "Filter code method": "Kasa.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setColor(string: color)"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Helper text": "Choose a brightness", "Slug": "brightness", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setBrightness(string: brightness)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors?", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color: #ffff00; brightness: 50; transition_duration: 3000” for yellow at 50% brightness, 3 seconds transition duration.", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var Device = \"Your_Kasa_Device_Name\" // Replace with your actual device name\nvar Color = Twitch.newFollowerOnYourChannel.FollowerName.substring(0, 1).toUpperCase() // Get the first letter of the follower's name and convert to uppercase\nif (Twitch.newFollowerOnYourChannel.FollowerCount > 100) {\n  Color = \"Bright_\" + Color // If the follower count is over 100, make the color brighter\n}\nvar Brightness = \"50\" // Default brightness if not set by user\nvar TransitionDuration = \"2000\" // Default transition duration if not set by user\n\nif (Kasa.changeColor.getDevice() !== Device) {\n  Kasa.changeColor.skip(\"Incorrect device selected\")\n}\n\nKasa.changeColor.setColor(Color)\nif (Brightness !== \"false\") {\n  Kasa.changeColor.setBrightness(Brightness)\n}\nif (TransitionDuration !== \"false\") {\n  Kasa.changeColor.setTransitionDuration(TransitionDuration)\n}\n\n// Additional advanced options handling\nvar AdvancedOptions = Twitch.newFollowerOnYourChannel.FollowerBio.replace(/\\s+/g, \"\") // Remove spaces from the follower's bio\nAdvancedOptions = AdvancedOptions.substring(0, Math.min(20, AdvancedOptions.length)) // Limit to 20 characters for better readability\nKasa.changeColor.setAdvancedOptions(AdvancedOptions)", "intent": "When a new subscriber joins your Twitch channel, change the color of your Kasa light bulb based on user customization."}
{"original_description": "This applet will turn on your 1-channel switch/plug at sunset", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (Weather.sunSets.SunsetAt < Meta.currentUserTime.date() && Weather.sunSets.Condition === \"Sunny\") {\n  Ewelink.lightSwitchAction(\"light_switch_action_device\", \"onoff_act_query\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Not a sunny day or not at sunset\")\n}", "intent": "This applet will turn on your 1-channel switch/plug at sunset, when the weather condition is sunny."}
{"original_description": "Do you find yourself sitting at your desk for long periods at a time? This applet will send a signal to a specified key on your Das Keyboard to remind you to stand up every hour. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyHourAt.CheckTime;\nif (parseInt(Time.split(\":\")[1]) % 60 === 0) {\n  // Hourly reminder\n  if (Daskeyboardq.signals.setName !== undefined && Daskeyboardq.signals.setName !== \"\") {\n    Daskeyboardq.signals.setName(Daskeyboardq.signals.getName());\n  }\n  if (Daskeyboardq.signals.setMessage !== undefined && Daskeyboardq.signals.setMessage !== \"\") {\n    Daskeyboardq.signals.setMessage(Daskeyboardq.signals.getMessage());\n  }\n  Daskeyboardq.signals.skip(\"No reason\");\n} else {\n  // Not at the hour, skip\n  Daskeyboardq.signals.skip(\"Not at the hour\");\n}", "intent": "This applet will send a signal to a specified key on your Das Keyboard every hour, reminding you to stand up."}
{"original_description": "If an Airthings device detects high humidity levels above the set threshold your hue lights will briefly blink.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.humidity-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get humidity from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How humid, in percent, do you want it to be when it triggers? Example: 60", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.humidityAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Humidity\nThe humidity, in percent.", "description": "The humidity, in percent.", "details": {"Slug": "value", "Filter code": "Airthings.humidityAbove.Humidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.humidityAbove.Device", "Type": "String", "Example": "Home - Living room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Airthings.humidityAbove.Humidity > parseInt(Airthings.humidityAbove.threshold)) {\n  var reason = \"High humidity detected: \" + Airthings.humidityAbove.value + \"%\"\n  Hue.blinkAllHue.skip(reason)\n} else {\n  // Do nothing\n}", "intent": "If the Airthings device detects high humidity levels above the set threshold, then briefly blink all Hue lights."}
{"original_description": "This applet will ensure that your Indego Connect will return to the dock when it is raining. Ideal for users that have a Calendar set-up that isn't automatically avoiding when rain is forecast like our SmartMowing feature does.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Indego Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "indegoconnect.send_dock", "Filter code method": "Indegoconnect.sendDock.skip(string?: reason)", "Runtime method": "runAction(\"indegoconnect.send_dock\", {})"}, "action_details": [], "filter_code": "var rainHasStarted = Netatmo.rainHasStarted;\nif (rainHasStarted) {\n  Indegoconnect.sendDock(\"Rain forecasted\");\n} else {\n  Indegoconnect.sendDock.skip(\"No rain forecasted\");\n}", "intent": "The applet will ensure that Indego Connect returns to the dock when it rains, based on forecast data from Netatmo Weather Station. It checks if rain is predicted and then uses this information to skip or execute the action."}
{"original_description": "This Applet will attempt to close your garage door or gate every day at specific time. If the garage door is already closed, it will remain closed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gogogate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gogogate.close_door", "Filter code method": "Gogogate.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"gogogate.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Gogogate.getDoorStatus() === \"Open\") {\n  if (parseInt(Time.split(\" \")[1].split(\":\")[0]) >= 7 && parseInt(Time.split(\" \")[1].split(\":\")[0]) <= 22) {\n    // Only close the door during active hours\n    Gogogate.closeDoor()\n  } else {\n    Gogogate.closeDoor.skip(\"Outside of active hours\")\n  }\n} else {\n  Gogogate.closeDoor.skip(\"Garage door is already closed\")\n}", "intent": "This Applet will attempt to close your garage door or gate every day at a specific time. If the garage door is already closed, it will remain closed."}
{"original_description": "Every time the temperature drops below the specified value, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var TempF = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (TempF < parseInt(Das.keyboardQ.trigger_temperature)) {\n  // Check if degrees type is Fahrenheit\n  var DegreesType = Das.keyboardQ.trigger_degrees_type === \"fahrenheit\"\n  // Skip action when degrees type is not Fahrenheit or temperature is above the specified value\n  if (!DegreesType || TempF >= parseInt(Das.keyboardQ.trigger_temperature)) {\n    Daskeyboardq.signals.skip(\"Invalid trigger conditions\")\n  } else {\n    var message = \"Temperature dropped to \" + TempF + \"°F\"\n    // Set Signal name and zone according to Das Keyboard Q configuration\n    Daskeyboardq.signals.setName(message)\n    Daskeyboardq.signals.setZone(Das.keyboardQ.trigger_zone)\n    // Set color and effect according to Das Keyboard Q configuration\n    if (Das.keyboardQ.trigger_color) {\n      Daskeyboardq.signals.setColor(Das.keyboardQ.trigger_color)\n    }\n    if (Das.keyboardQ.trigger_effect) {\n      Daskeyboardq.signals.setEffect(Das.keyboardQ.trigger_effect)\n    }\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Temperature not in Fahrenheit\")\n}", "intent": "Send a Signal to Das Keyboard Q when the temperature drops below the specified value."}
{"original_description": "This Applet will automatically create a task in Google Tasks with all the details of your note from Evernote. The Task created in Google Tasks will default to a due date of when the Evernote note was created.", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Google Tasks", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_tasks.add_task_to_tasklist", "Filter code method": "GoogleTasks.addTaskToTasklist.skip(string?: reason)", "Runtime method": "runAction(\"google_tasks.add_task_to_tasklist\", {})"}, "action_details": [{"section": "Action fields", "title": "Tasklist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which task list?", "Helper text": "The task list to which the task should be added.", "Slug": "tasklist_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What is the title of the task?", "Slug": "task_title", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Title(string: task_title)"}}, {"section": "Action fields", "title": "Task notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What are the notes to include in the task?", "Helper text": "Notes describing the task", "Slug": "task_notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Notes(string: task_notes)"}}, {"section": "Action fields", "title": "Due date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Does the task have a due date?", "Helper text": "Field only sets the date. Ex. Next Tuesday, Today.", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setDue Date(string: due_date)"}}], "filter_code": "var TaskTitle = Evernote.newNoteInNotebook.Title;\nvar TaskNotes = \"Task notes: \" + Evernote.newNoteInNotebook.BodyHTML;\nvar TaskUrl = \"https://www.evernote.com/\" + Evernote.newNoteInNotebook.PublicUrl;\nvar TaskTags = Evernote.newNoteInNotebook.Tags;\nvar CreatedAt = Evernote.newNoteInNotebook.CreatedAt;\n\nif (TaskTitle && TaskNotes && TaskUrl && TaskTags && CreatedAt) {\n  var DueDate = new Date(Evernote.newNoteInNotebook.CreatedAt);\n  GoogleTasks.addTaskToTasklist.setTaskTitle(TaskTitle).setTaskNotes(TaskNotes).setTaskUrl(TaskUrl).setTags(TaskTags).setDueDate(DueDate.toLocaleDateString());\n} else {\n  GoogleTasks.addTaskToTasklist.skip(\"Missing required information\");\n}", "intent": "Automatically create a task in Google Tasks with all the details of an Evernote note, including title, body, public URL, tags, and created date."}
{"original_description": "This Applet will send you a notification from the IFTTT app whenever Mark Morford posts a new story.", "trigger_channel": "SFGATE", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "sfgate.author_mark_morford"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Sfgate.authorMarkMorford.EntryTitle", "Type": "String", "Example": "Male birth control is already here. Guess who’s blocking it?"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Sfgate.authorMarkMorford.EntryUrl", "Type": "String", "Example": "http://ift.tt/2oVuk4l"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Sfgate.authorMarkMorford.EntryAuthor", "Type": "String", "Example": "Mark Morford"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Sfgate.authorMarkMorford.EntryContent", "Type": "String", "Example": "Serious crimes fell 10 percent in San Francisco last year as the city saw fewer robberies, far fewer boosted cars and a slight but welcome reduction in the vehicle break-ins that have plagued many neighborhoods, according to police figures released..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Sfgate.authorMarkMorford.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Sfgate.authorMarkMorford.EntryTitle !== \"\") {\n  IfNotifications.sendNotification.setMessage(\"New story by \" + Sfgate.authorMarkMorford.EntryAuthor + \": \" + Sfgate.authorMarkMorford.EntryTitle)\n} else {\n  IfNotifications.sendNotification.skip(\"No title or author available\")\n}", "intent": "This Applet will send a notification from the IFTTT app whenever Mark Morford posts a new story, with the title and author included in the notification message."}
{"original_description": "The Green Light Signal is a UK service that you connect your smart bulb to. It will make your bulb turn green every time the electricity in your area is generated with lowest possible CO2 levels. Simply put: when it turns green you can plug-in!", "trigger_channel": "Green Light Signal", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "green_light_signal.co2_level"}, "trigger_details": [{"section": "Trigger fields", "title": "Postcode\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "What is your postcode?", "Helper text": "Example 'LE6 7TR'", "Slug": "postcode", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Co2 index\nCO2 index", "description": "CO2 index", "details": {"Slug": "co2_index", "Filter code": "GreenLightSignal.co2Level.Co2Index", "Type": "String", "Example": "Low"}}, {"section": "Ingredients", "title": "Co2 level value\nCO2 level value", "description": "CO2 level value", "details": {"Slug": "co2_level_value", "Filter code": "GreenLightSignal.co2Level.Co2LevelValue", "Type": "String", "Example": "0"}}, {"section": "Ingredients", "title": "Date\nDate Created", "description": "Date Created", "details": {"Slug": "date", "Filter code": "GreenLightSignal.co2Level.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.color", "Filter code method": "Lifx.color.skip(string?: reason)", "Runtime method": "runAction(\"lifx.color\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights turn on to the color, even when they are turned off in the app.", "Slug": "color_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.color.setColor If Off(string: color_if_off)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; duration: 12&quot; for red at 30% brightness, 12 second fade. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.color.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var co2Index = GreenLightSignal.co2Level.Co2Index\n\nif (co2Index === \"low\" || co2Index === \"very low\") {\n  Lifx.color.setAdvancedOptions('color: #00e600; brightness: 1; transition_duration: 0')\n} else {\n  Lifx.color.setAdvancedOptions('color: #ffffff; brightness: 0; transition_duration: 0')\n}", "intent": "This IFTTT automation checks the Green Light Signal's CO2 level and, if it is at a low or very low level, sets the LIFX bulb color to green with maximum brightness. Otherwise, it sets the color to white with minimum brightness.", "filter_code_old": "var co2Index = GreenLightSignal.co2Level.Co2Index \n\nif (co2Index === \"low\" || co2Index === \"very low\") {​​​​\n\n  Lifx.color.setAdvancedOptions('color: #00e600; brightness: 1; transition_duration: 0')\n\n}​​​​ else {​​​​\n\n  Lifx.color.setAdvancedOptions('color: #ffffff; brightness: 0; transition_duration: 0')\n\n}​​​​\n\n"}
{"original_description": "Whenever new photos are detected in your Flickr photostream, this applet will download those photos to your QNAP device", "trigger_channel": "Flickr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flickr.new_public_photos_batch"}, "trigger_details": [{"section": "Ingredients", "title": "Photostream url\nThe URL to your photostream on flickr.", "description": "The URL to your photostream on flickr.", "details": {"Slug": "PhotostreamUrl", "Filter code": "Flickr.newPublicPhotosBatch.PhotostreamUrl", "Type": "String", "Example": "http://www.flickr.com/photos/ltibbets/"}}, {"section": "Ingredients", "title": "Photo count\nThe number of photos uploaded in this batch.", "description": "The number of photos uploaded in this batch.", "details": {"Slug": "PhotoCount", "Filter code": "Flickr.newPublicPhotosBatch.PhotoCount", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Last flickr url\nThe long URL to the last photo's Flickr page.", "description": "The long URL to the last photo's Flickr page.", "details": {"Slug": "LastFlickrUrl", "Filter code": "Flickr.newPublicPhotosBatch.LastFlickrUrl", "Type": "String", "Example": "http://www.flickr.com/photos/sh4de/5197127926/"}}, {"section": "Ingredients", "title": "Last source url\nURL to the largest available image file for the last photo.", "description": "URL to the largest available image file for the last photo.", "details": {"Slug": "LastSourceUrl", "Filter code": "Flickr.newPublicPhotosBatch.LastSourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Last uploaded date\nDate and time the last photo was uploaded.", "description": "Date and time the last photo was uploaded.", "details": {"Slug": "LastUploadedDate", "Filter code": "Flickr.newPublicPhotosBatch.LastUploadedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Last tags\nTags added to the last photo.", "description": "Tags added to the last photo.", "details": {"Slug": "LastTags", "Filter code": "Flickr.newPublicPhotosBatch.LastTags", "Type": "String", "Example": "baby, pumpkin"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "var PhotostreamUrl = Flickr.newPublicPhotosBatch.PhotostreamUrl\nvar PhotoCount = Flickr.newPublicPhotosBatch.PhotoCount\nif (PhotoCount > 0) {\n  for (var i = 0; i < PhotoCount; i++) {\n    var LastFlickrUrl = Flickr.newPublicPhotosBatch.LastFlickrUrl\n    var LastSourceUrl = Flickr.newPublicPhotosBatch.LastSourceUrl\n    var LastUploadedDate = Flickr.newPublicPhotosBatch.LastUploadedDate\n    var LastTags = Flickr.newPublicPhotosBatch.LastTags\n    \n    // Download the latest photo\n    Qnap.downloadFileFromUrl.setFile Url(LastSourceUrl)\n      .setFile Name(LastFlickrUrl.split('/').pop())\n      .setFolder Path(Qnap.getSharedFolder() + '/' + LastUploadedDate.replace(/\\//g, '_'))\n      .skip(\"No new photos found\")\n  }\n}", "intent": "Whenever new photos are detected in your Flickr photostream, this applet will download those photos to your QNAP device."}
{"original_description": "This Applet will attempt to open your garage door or gate every day at specific time. If the garage door is already open, it will remain open.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.open_door", "Filter code method": "Garagewifi.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (DateAndTime.now().hour() === parseInt(Time.split(' ')[1].split(':')[0]) && DateAndTime.now().minute() === parseInt(Time.split(' ')[1].split(':')[1])) {\n  if (GarageWiFi.openDoor.getDoorState() === 'closed') {\n    GarageWiFi.openDoor.run()\n  } else {\n    GarageWiFi.openDoor.skip(\"Door is already open\")\n  }\n} else {\n  GarageWiFi.openDoor.skip(\"Not the scheduled time\")\n}", "intent": "This applet will open the garage door or gate at a specific time every day, but only if the door is currently closed."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to green if the price of the stock you selected rises by more than a certain percentage compared to the last closing price. (Only for WiZ Colors lights)", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_drop_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage decrease", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageDropStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageDropStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageDropStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageDropStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageDropStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageDropStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var PercentageChange = Finance.percentageDropStocks.PercentageChange\nif (PercentageChange > 0 && PercentageChange >= parseInt(Trigger.percentage)) {\n  var StockName = Finance.percentageDropStocks.StockName\n  Wiz.turnOn.setEntity(Trigger.symbol).setMode(\"Green\").setDimming(\"High\")\n} else {\n  Wiz.turnOn.skip(\"No percentage change detected\")\n}", "intent": "Automatically change WiZ light(s) to green if stock price rises by a certain percentage."}
{"original_description": "This applet will let you turn on motion detection at specific time of the day", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Smitch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Smitch.turn_on_motion_detection", "Filter code method": "Smitch.turnOnMotionDetection.skip(string?: reason)", "Runtime method": "runAction(\"Smitch.turn_on_motion_detection\", {})"}, "action_details": [{"section": "Action fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera", "Helper text": "Choose the camera to turn on motion detection", "Slug": "camera", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Motion detection type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Motion Detection Type", "Helper text": "Choose the motion detection type", "Slug": "motion_detection_type", "Required": "true", "Can have default value": "true", "Filter code method": "Smitch.turnOnMotionDetection.setMotion Detection Type(string: motion_detection_type)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime === Time) {\n  Smitch.turnOnMotionDetection(\"Camera\", \"motion_detection_type\");\n}", "intent": "Check if the current time matches the specified time and turn on motion detection at that time."}
{"original_description": "You will get your daily weather and temperature (in °F) report on your Triby. You will be able to choose the time of day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.send_an_image_to_specified_triby", "Filter code method": "InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.send_an_image_to_specified_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Triby\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Triby IO?", "Slug": "triby", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image URL?", "Helper text": "This has to be the URL of an image file (png, jpeg, bmp).", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "InvoxiaTriby.sendAnImageToSpecifiedTriby.setImage Url(string: image_url)"}}], "filter_code": "if (Weather.currentWeatherAtTime.SunriseAt <= Meta.currentUserTime.hour()) {\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"Before sunrise\")\n}\n\nelse if (Weather.currentWeatherAtTime.SunsetAt >= Meta.currentUserTime.hour()) {\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"After sunset\")\n}\n\nelse {\n  // Send weather report to Triby\n  var imageUrl = Weather.currentWeatherAtTime.CurrentConditionImageURL\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.setImageUrl(imageUrl)\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.runAction(\"invoxia_triby.send_an_image_to_specified_triby\", {})\n}", "intent": "This IFTTT automation will send your daily weather report to your Triby at a chosen time of day."}
{"original_description": "No idea what to watch on Netflix? This Applet will automatically add new Critics' Picks from the Times' reviewers to a Trello list. ", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_movie_review"}, "trigger_details": [{"section": "Ingredients", "title": "Movie title", "description": "", "details": {"Slug": "MovieTitle", "Filter code": "Nytimes.newMovieReview.MovieTitle", "Type": "String", "Example": "Exit Through the Gift Shop"}}, {"section": "Ingredients", "title": "Review headline\nThe headline of the review", "description": "The headline of the review", "details": {"Slug": "ReviewHeadline", "Filter code": "Nytimes.newMovieReview.ReviewHeadline", "Type": "String", "Example": "On the Street, at the Corner of Art and Trash"}}, {"section": "Ingredients", "title": "Review url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ReviewUrl", "Filter code": "Nytimes.newMovieReview.ReviewUrl", "Type": "String", "Example": "http://movies.nytimes.com/2010/04/16/movies/16exit.html"}}, {"section": "Ingredients", "title": "Author\nThe author of the review", "description": "The author of the review", "details": {"Slug": "Author", "Filter code": "Nytimes.newMovieReview.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Movie thumbnail url\nURL to the movie thumbnail image.", "description": "URL to the movie thumbnail image.", "details": {"Slug": "MovieThumbnailUrl", "Filter code": "Nytimes.newMovieReview.MovieThumbnailUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Movie opening date\nDate the movie opened", "description": "Date the movie opened", "details": {"Slug": "MovieOpeningDate", "Filter code": "Nytimes.newMovieReview.MovieOpeningDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Publication date\nDate the review was published.", "description": "Date the review was published.", "details": {"Slug": "PublicationDate", "Filter code": "Nytimes.newMovieReview.PublicationDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Mpaa rating\nA the rating, if any, given to this movie by the MPAA", "description": "A the rating, if any, given to this movie by the MPAA", "details": {"Slug": "MPAARating", "Filter code": "Nytimes.newMovieReview.MPAARating", "Type": "String", "Example": "R"}}], "action_channel": "Trello", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trello.create_card", "Filter code method": "Trello.createCard.skip(string?: reason)", "Runtime method": "runAction(\"trello.create_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Board\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "List name\nText input > Other", "description": "Text input > Other", "details": {"Label": "List name", "Helper text": "We'll create a new list if one with this name doesn't exist", "Slug": "list_name", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setList Name(string: list_name)"}}, {"section": "Action fields", "title": "Pos\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Slug": "pos", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setPos(string: pos)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setDescription(string: description)"}}, {"section": "Action fields", "title": "Members\nText input > Other", "description": "Text input > Other", "details": {"Label": "Assign members", "Helper text": "Optional comma separated list of @usernames to assign to card", "Slug": "members", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setMembers(string: members)"}}, {"section": "Action fields", "title": "Labels\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Apply labels", "Helper text": "Optional comma separated list of label names — labels that do not exist on the board will be ignored", "Slug": "labels", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setLabels(string: labels)"}}, {"section": "Action fields", "title": "Url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Attachment URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setUrl(string: url)"}}], "filter_code": "", "intent": ""}
{"original_description": "This applet will append Today in History updates from the Library of Congress to a stream in a data.world dataset. ", "trigger_channel": "Library of Congress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "loc.today_in_history"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the day's post.", "description": "The title of the day's post.", "details": {"Slug": "EntryTitle", "Filter code": "Loc.todayInHistory.Title", "Type": "String", "Example": "Today in History - May 26"}}, {"section": "Ingredients", "title": "Post url\nThe URL for the day's post.", "description": "The URL for the day's post.", "details": {"Slug": "EntryUrl", "Filter code": "Loc.todayInHistory.PostUrl", "Type": "String", "Example": "https://www.loc.gov/item/today-in-history/may-26?loclr=eatod"}}, {"section": "Ingredients", "title": "Post content html\nThe post's content, may contain HTML.", "description": "The post's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Loc.todayInHistory.PostContentHtml", "Type": "String", "Example": "On May 26, 1864, President Lincoln signed..."}}, {"section": "Ingredients", "title": "Published date\nDate the post was published.", "description": "Date the post was published.", "details": {"Slug": "EntryPublished", "Filter code": "Loc.todayInHistory.PublishedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.append", "Filter code method": "Datadotworld.append.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.append\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to update? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Stream name\nText input > File name", "description": "Text input > File name", "details": {"Label": "Stream", "Helper text": "Which stream would you like to append records to? IMPORTANT: Stream names can only contain lowercase letters, numbers and dashes (e.g. my-stream).", "Slug": "stream_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setStream Name(string: stream_name)"}}, {"section": "Action fields", "title": "Payload\nText input > Other", "description": "Text input > Other", "details": {"Label": "Record", "Helper text": "Which keys and values would you like in your record? Keys and values must be separated by &quot;||&quot;. Key-value pairs must be separated by &quot;|||&quot;. Example: first||Steve|||last||Rogers", "Slug": "payload", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setPayload(string: payload)"}}], "filter_code": "// Check if today's title, post url, and published date are available\nif (Loc.todayInHistory.Title !== \"\" && Loc.todayInHistory.PostUrl !== \"\" && Loc.todayInHistory.PublishedDate !== \"\") {\n  // Get the required fields from action details\n  var datasetKey = action.dataset_key;\n  var streamName = action.stream_name;\n  var payload = action.payload;\n\n  // Set the filter code for each field in the action\n  Datadotworld.append.setDatasetKey(datasetKey);\n  Datadotworld.append.setStreamName(streamName);\n  Datadotworld.append.setPayload(payload);\n\n  // Append to the stream with a success message\n  Datadotworld.append(\"Today's Today in History update appended successfully\");\n} else {\n  // If any of the required fields are missing, skip the action\n  Datadotworld.append.skip(\"Missing required field(s)\");\n}", "intent": "This applet will append Today in History updates from the Library of Congress to a stream in a data.world dataset."}
{"original_description": "Whenever you favorite a public photo on Flickr, this applet will automatically download that photo to your QNAP device", "trigger_channel": "Flickr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flickr.new_favorite_public_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Flickr.newFavoritePublicPhoto.Title", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Description\nOptional photo description.", "description": "Optional photo description.", "details": {"Slug": "Description", "Filter code": "Flickr.newFavoritePublicPhoto.Description", "Type": "String", "Example": "Taken at my birthday party!"}}, {"section": "Ingredients", "title": "Flickr url short\nThe shortened URL to the photo's Flickr page.", "description": "The shortened URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrlShort", "Filter code": "Flickr.newFavoritePublicPhoto.FlickrUrlShort", "Type": "String", "Example": "http://flic.kr/p/4mdhBE"}}, {"section": "Ingredients", "title": "Source url\nURL to the largest available flickr image file.", "description": "URL to the largest available flickr image file.", "details": {"Slug": "SourceUrl", "Filter code": "Flickr.newFavoritePublicPhoto.SourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Original source url\nURL to the orginal image file if available.", "description": "URL to the orginal image file if available.", "details": {"Slug": "OriginalSourceUrl", "Filter code": "Flickr.newFavoritePublicPhoto.OriginalSourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Owner name\nUsername of the person the photo belongs to.", "description": "Username of the person the photo belongs to.", "details": {"Slug": "OwnerName", "Filter code": "Flickr.newFavoritePublicPhoto.OwnerName", "Type": "String", "Example": "ltibbets"}}, {"section": "Ingredients", "title": "Uploaded date\nDate and time the photo was uploaded.", "description": "Date and time the photo was uploaded.", "details": {"Slug": "UploadedDate", "Filter code": "Flickr.newFavoritePublicPhoto.UploadedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Tags\nTags added to the photo.", "description": "Tags added to the photo.", "details": {"Slug": "Tags", "Filter code": "Flickr.newFavoritePublicPhoto.Tags", "Type": "String", "Example": "baby, pumpkin"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "var title = Flickr.newFavoritePublicPhoto.Title;\nvar description = Flickr.newFavoritePublicPhoto.Description;\nvar urlShort = Flickr.newFavoritePublicPhoto.FlickrUrlShort;\nvar sourceUrl = Flickr.newFavoritePublicPhoto.SourceUrl;\nvar originalSourceUrl = Flickr.newFavoritePublicPhoto.OriginalSourceUrl;\nvar ownerName = Flickr.newFavoritePublicPhoto.OwnerName;\nvar uploadedDate = Flickr.newFavoritePublicPhoto.UploadedDate;\nvar tags = Flickr.newFavoritePublicPhoto.Tags;\n\nif (title !== \"\" && description !== \"\") {\n  Qnap.downloadFileFromUrl.setFileUrl(sourceUrl)\n    .setFileName(title + \".jpg\")\n    .setFolderPath(Qnap.sharedFolders[0])\n    .run();\n} else {\n  Qnap.downloadFileFromUrl.skip(\"No file name or description provided\");\n}", "intent": "Whenever a public photo is favorited on Flickr, download that photo to the QNAP device."}
{"original_description": "When a Twitch stream for a channel you follow goes live, your Kasa light bulb will change color. Color, brightness, and transition time is fully customizable by the user.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color", "Filter code method": "Kasa.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setColor(string: color)"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Helper text": "Choose a brightness", "Slug": "brightness", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setBrightness(string: brightness)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors?", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color: #ffff00; brightness: 50; transition_duration: 3000” for yellow at 50% brightness, 3 seconds transition duration.", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColor.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.CreatedAt !== null) {\n  var Device = \"Your Kasa Light Bulb\";\n  if (WhichChannel === Twitch.streamGoingLiveForChannelYouFollow.ChannelName) {\n    var Color = \"Your Preferred Color\";\n    if (Brightness !== undefined) {\n      Kasa.changeColor.setColor(Color);\n    }\n    if (TransitionDuration !== undefined) {\n      Kasa.changeColor.setTransitionDuration(TransitionDuration);\n    }\n  } else {\n    Kasa.changeColor.skip(\"Not your channel\");\n  }\n}", "intent": "When a Twitch stream goes live, change the color of the Kasa light bulb based on user-defined options."}
{"original_description": "This applet will initiate sync for a data.world dataset or data project at a specific time and on specific days of the week.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.sync", "Filter code method": "Datadotworld.sync.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.sync\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to sync? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Weekdays = DateAndTime.everyWeekdayAt.weekdays\nif (DateAndTime.everyWeekdayAt.time >= Meta.currentUserTime.hour() && Weekdays.includes(Meta.currentUserTime.day())) {\n  Datadotworld.sync(DatasetKey)\n} else {\n  Datadotworld.sync.skip(\"Not a weekday at specified time\")\n}", "intent": "Check if it is a weekday at the specified time and skip the action otherwise."}
{"original_description": "This applet will add items tagged as files in Pocket to a data.world dataset.", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_tagged_item_pocket"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Single tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newTaggedItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newTaggedItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newTaggedItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newTaggedItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newTaggedItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newTaggedItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.upload_file", "Filter code method": "Datadotworld.uploadFile.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.upload_file\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to add this file to? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "What would you like to name this file? IMPORTANT: File names must include a file extension.", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "What is the URL from which the file can be downloaded?", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Url(string: file_url)"}}], "filter_code": "let fileName = Pocket.newTaggedItemPocket.Url\nif (fileName.indexOf(\"?\") != -1) {\n  fileName = fileName.substr(0, fileName.indexOf(\"?\"))\n}\nfileName = fileName.substr(fileName.lastIndexOf(\"/\") + 1)\n\nDatadotworld.uploadFile.setFileName(fileName)\nDatadotworld.uploadFile.skip(\"No file name provided\")", "intent": "This applet will add items tagged as files in Pocket to a data.world dataset.", "filter_code_old": "let filename = Pocket.newTaggedItemPocket.Url\nif (filename.indexOf(\"?\") != -1) {\n  filename = filename.substr(0, filename.indexOf(\"?\"))\n}\nfilename = filename.substr(filename.lastIndexOf(\"/\")+1)\n\nDatadotworld.uploadFile.setFileName(filename)\n\n"}
{"original_description": "Every time a new popular article is published on The New York Times, a Signal will be sent to your Das Keyboard.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.any_new_popular_article_today"}, "trigger_details": [{"section": "Trigger fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Section", "Slug": "section", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.anyNewPopularArticleToday.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.anyNewPopularArticleToday.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.anyNewPopularArticleToday.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.anyNewPopularArticleToday.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.anyNewPopularArticleToday.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.anyNewPopularArticleToday.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nytimes.anyNewPopularArticleToday.Section === \"Section\") {\n  if (Nytimes.anyNewPopularArticleToday.Title !== \"\") {\n    var SignalTitle = Nytimes.anyNewPopularArticleToday.Title;\n  } else {\n    var SignalTitle = \"A new article was published\";\n  }\n  \n  Daskeyboardq.signals.setName(SignalTitle)\n  .setZone(Trigger.details[0].details.Label)\n  .setColor(Trigger.details[2].details.Label)\n  .setMessage(\"Signal: \" + Nytimes.anyNewPopularArticleToday.Title)\n  .setEffect(Trigger.details[5].details.Label)\n  .setDevice(Trigger.details[6].details.Label)\n} else {\n  Daskeyboardq.signals.skip(\"No article found\")\n}", "intent": "Whenever a new popular article is published on The New York Times, this IFTTT automation sends a Signal to Das Keyboard with the article's title, author, blurb, URL, image URL, section, source, and published date."}
{"original_description": "This will change the WiZ lights of your choice to the mode and brightness you defined whenever a channel you follow starts a live stream on Twitch.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var Channel = Twitch.streamGoingLiveForChannelYouFollow.ChannelName;\nvar Game = Twitch.streamGoingLiveForChannelYouFollow.Game;\nif (Twitch.streamGoingLiveForChannelYouFollow.IsLive) {\n  Wiz.turnOn(WiZ.entity, WiZ.mode, WiZ.dimming);\n} else {\n  Wiz.turnOn.skip(\"No live stream detected\");\n}", "intent": "This code checks if it's a live stream, and if so, changes the WiZ lights to the selected mode and brightness."}
{"original_description": "Every time the pollen count rises above the value you specify (1-12), a Signal will be sent to your Das Keyboard.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "This will automatically change the WiZ light(s) of your choice to lime color if Weather underground reports a pollen count above the threshold you have defined. Best way to know whether your allergies may be a problem... before heading out. (Only for WiZ Colors lights)", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var PollenCount = Weather.currentPollenCountRisesAbove.PollenCount\nif (parseInt(PollenCount) > parseInt(count)) {\n  Wiz.turnOn(entity, \"Lime\", dimming)\n} else {\n  Wiz.turnOn.skip(\"No high pollen count detected\")\n}", "intent": "This automation will change the WiZ light(s) of your choice to lime color if Weather Underground reports a pollen count above the threshold defined."}
{"original_description": "Every time a new track is added to a playlist you specify, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (playlist === \"Mid-2000s Jamz\") {\n  var signalName = \"New Track Added\";\n  var zone = \"Media\";\n  var color = \"Orange\";\n  var message = \"Added: \" + track_name;\n  Daskeyboardq.signals.setName(signalName);\n  Daskeyboardq.signals.setZone(zone);\n  Daskeyboardq.signals.setColor(color);\n  Daskeyboardq.signals.setMessage(message);\n}", "intent": "When a new track is added to a specified playlist on Spotify, send a Signal to Das Keyboard Q with the track's name and other details."}
{"original_description": "This applet will change the setpoint temperature of your AC when the outside temperature falls below a selected temperature.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GE Appliances Window AC", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ge_appliances_wac.wac-set-target-temp", "Filter code method": "GeAppliancesWac.wacSetTargetTemp.skip(string?: reason)", "Runtime method": "runAction(\"ge_appliances_wac.wac-set-target-temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Applianceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which appliance?", "Slug": "applianceId", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Set-target-temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "What temperature?", "Slug": "set-target-temp", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < Temp) {\n  if (degrees_type === \"Celsius\") {\n    var temp = Weather.currentTemperatureDropsBelow.TempFahrenheit * 0.5556;\n  } else {\n    temp = Weather.currentTemperatureDropsBelow.TempFahrenheit;\n  }\n  \n  GeAppliancesWac.wacSetTargetTemp(temp, reason);\n} else {\n  GeAppliancesWac.wacSetTargetTemp.skip(\"Outside temperature is above the selected temperature\");\n}", "intent": "This applet will change the setpoint temperature of your GE Window AC when the outside temperature falls below a selected temperature."}
{"original_description": "This will turn on the WiZ lights of your choice in the mode and brightness you defined whenever your Wyze Cam detects motion.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.motion_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Motion detected\nMotion detected on your wyze camera.", "description": "Motion detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.motionTrigger.MotionDetected", "Type": "String", "Example": "Motion detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when motion is triggered.", "description": "Time when motion is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.motionTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Wyzecam.motionTrigger.MotionDetected) {\n  var entity = serialize_device_info\n  Wiz.turnOn.runAction({\n    \"entity\": entity,\n    \"mode\": //TODO: retrieve selected mode from action fields,\n    \"dimming\": //TODO: retrieve selected dimming from action fields\n  })\n} else {\n  Wiz.turnOn.skip(\"No motion detected\")\n}", "intent": "Trigger WyZ lights based on motion detection by Wyze Cam, selecting desired entity, mode, and brightness."}
{"original_description": "Capture an amazing sunset? A bluer-than-blue ocean? Use the hashtag #Hue on your Insta and this Applet will do its best to match your lighting. Magic mood! ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_from_image_all_hue", "Filter code method": "Hue.setColorFromImageAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_from_image_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Color mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color mode", "Slug": "color_mode", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorFromImageAllHue.setColor Mode(string: color_mode)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorFromImageAllHue.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#Hue\")) {\n  var hueColor = getHueFromImage(Instagram.newPhotoByYouTagged.SourceUrl);\n  Hue.setColorFromImageAllHue(hueColor, Instagram.newPhotoByYouTagged.ImageUrl, Instagram.newPhotoByYouTagged.Lights);\n} else {\n  Hue.setColorFromImageAllHue.skip(\"No #Hue hashtag found\");\n}\n\nfunction getHueFromImage(imageUrl) {\n  // implement image processing and color extraction logic here\n  return \"a cool color\";\n}", "intent": "Match a specific hashtag (#Hue) in an Instagram caption and set the color of Philips Hue lights based on the image."}
{"original_description": "This applet will append today's current Weather Underground report at the time you specify to a stream named \"weather-underground-today\" in a data.world dataset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.append", "Filter code method": "Datadotworld.append.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.append\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to update? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Stream name\nText input > File name", "description": "Text input > File name", "details": {"Label": "Stream", "Helper text": "Which stream would you like to append records to? IMPORTANT: Stream names can only contain lowercase letters, numbers and dashes (e.g. my-stream).", "Slug": "stream_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setStream Name(string: stream_name)"}}, {"section": "Action fields", "title": "Payload\nText input > Other", "description": "Text input > Other", "details": {"Label": "Record", "Helper text": "Which keys and values would you like in your record? Keys and values must be separated by &quot;||&quot;. Key-value pairs must be separated by &quot;|||&quot;. Example: first||Steve|||last||Rogers", "Slug": "payload", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.append.setPayload(string: payload)"}}], "filter_code": "const today = new Date();\nconst time = `${today.getHours()}:${today.getMinutes()}`;\nif (time === \"06:00:00\" || time === \"18:00:00\") {\n  const payload = `current-temp-fahrenheit||${Weather.currentWeatherAtTime.CurrentTempFahrenheit}||current-temp-celsius||${Weather.currentWeatherAtTime.CurrentTempCelsius}||current-condition||${Weather.currentWeatherAtTime.CurrentCondition}||todays-condition||${Weather.currentWeatherAtTime.TodaysCondition}||high-temp-fahrenheit||${Weather.currentWeatherAtTime.HighTempFahrenheit}||high-temp-celsius||${Weather.currentWeatherAtTime.HighTempCelsius}||low-temp-fahrenheit||${Weather.currentWeatherAtTime.LowTempFahrenheit}||low-temp-celsius||${Weather.currentWeatherAtTime.LowTempCelsius}||uv-index||${Weather.currentWeatherAtTime.UvIndex}||humidity||${Weather.currentWeatherAtTime.Humidity}||wind-speed-mph||${Weather.currentWeatherAtTime.WindSpeedMph}||wind-speed-kph||${Weather.currentWeatherAtTime.WindSpeedKph}||wind-direction||${Weather.currentWeatherAtTime.WindDirection}||pollen-count||${Weather.currentWeatherAtTime.PollenCount}`;\n  Datadotworld.append.setStreamName(\"weather-underground-today\");\n  Datadotworld.append.setPayload(payload);\n} else {\n  Datadotworld.append.skip(\"Not a valid time for reporting weather data\");\n}", "intent": "This applet will append today's current Weather Underground report at the time you specify to a stream named \"weather-underground-today\" in a data.world dataset.", "filter_code_old": "const forecast = (Weather.currentWeatherAtTime as any)\nconst pairs = Object.getOwnPropertyNames(forecast).map(prop => prop + \"||\" + forecast[prop])\nDatadotworld.append.setPayload(pairs.join(\"|||\"))\n\n"}
{"original_description": "Leave a voicemail at your special IFTTT phone number, and the contents will be added as a task to Remember The Milk. Smart Add syntax is supported, e.g. \"Call Bob at 9am Monday\".", "trigger_channel": "Phone Call (US only)", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "phone_call.leave_ifttt_a_voicemail"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary mp3 url\nA public URL to the voicemail audio in mp3 format that anyone can visit for 30 days.", "description": "A public URL to the voicemail audio in mp3 format that anyone can visit for 30 days.", "details": {"Slug": "TemporaryMp3Url", "Filter code": "PhoneCall.leaveIftttAVoicemail.TemporaryMp3Url", "Type": "File URL", "Example": "http://media.ifttt.com/calls/4-RE16dd33bca24641284e2bdffc6c246427.mp3"}}, {"section": "Ingredients", "title": "From\nThe phone number you called ifttt from.", "description": "The phone number you called ifttt from.", "details": {"Slug": "From", "Filter code": "PhoneCall.leaveIftttAVoicemail.From", "Type": "String", "Example": "(415)-222-2222"}}, {"section": "Ingredients", "title": "Message\nThe transcribed message.", "description": "The transcribed message.", "details": {"Slug": "Message", "Filter code": "PhoneCall.leaveIftttAVoicemail.Message", "Type": "String", "Example": "Hello, it is a really sunny day in..."}}, {"section": "Ingredients", "title": "Mp3 url\nA public URL to the voicemail audio in mp3 format.", "description": "A public URL to the voicemail audio in mp3 format.", "details": {"Slug": "Mp3Url", "Filter code": "PhoneCall.leaveIftttAVoicemail.Mp3Url", "Type": "String", "Example": "http://media.ifttt.com/calls/4-RE16dd33bca24641284e2bdffc6c246427.mp3"}}, {"section": "Ingredients", "title": "Received at\nThe date and time you called ifttt.", "description": "The date and time you called ifttt.", "details": {"Slug": "ReceivedAt", "Filter code": "PhoneCall.leaveIftttAVoicemail.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "if (PhoneCall.leaveIftttAVoicemail.Message !== \"\") {\n  var task = \"Call at \" + PhoneCall.leaveIftttAVoicemail.From + \": \" + PhoneCall.leaveIftttAVoicemail.Message\n  Rememberthemilk.tasksAdd.setTask(task)\n} else {\n  Rememberthemilk.tasksAdd.skip(\"No message detected\")\n}", "intent": "This IFTTT automation leaves a voicemail and adds the contents as a task to Remember The Milk."}
{"original_description": "This Action will create a new issue for the repository you specify.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GitHub", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "github.create_new_issue_for_repository", "Filter code method": "Github.createNewIssueForRepository.skip(string?: reason)", "Runtime method": "runAction(\"github.create_new_issue_for_repository\", {})"}, "action_details": [{"section": "Action fields", "title": "Repository\nText input > Other", "description": "Text input > Other", "details": {"Label": "Repository", "Helper text": "E.g. IFTTT/StatsD", "Slug": "repository", "Required": "false", "Can have default value": "true", "Filter code method": "Github.createNewIssueForRepository.setRepository(string: repository)"}}, {"section": "Action fields", "title": "Issuetitle\nText input", "description": "Text input", "details": {"Label": "Title", "Slug": "issueTitle", "Required": "false", "Can have default value": "true", "Filter code method": "Github.createNewIssueForRepository.setIssue Title(string: issueTitle)"}}, {"section": "Action fields", "title": "Issuebody\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Markdown and @mentions ok", "Slug": "issueBody", "Required": "false", "Can have default value": "true", "Filter code method": "Github.createNewIssueForRepository.setIssue Body(string: issueBody)"}}], "filter_code": "// Define necessary variables\nvar eventId = Mesh.events.Text;\nvar triggeredAt = Mesh.events.TriggeredAt;\nvar repository = \"IFTTT/StatsD\"; // Default repository, can be changed if required\nvar issueTitle = \"\";\nvar issueBody = \"\";\n\n// Check for required fields\nif (eventId === \"\" || !eventId) {\n  Github.createNewIssueForRepository.skip(\"Event ID not provided\");\n}\n\n// Validate the triggered time\nvar now = new Date();\nif (triggeredAt > now.setHours(9) && triggeredAt < now.setHours(17)) {\n  // Only create issue between 09:00 and 17:00\n} else {\n  Github.createNewIssueForRepository.skip(\"Outside of working hours\");\n}\n\n// Create the GitHub issue with required fields set\nif (repository !== \"\") {\n  Github.createNewIssueForRepository.setRepository(repository);\n}\nif (issueTitle !== \"\") {\n  Github.createNewIssueForRepository.setIssueTitle(issueTitle);\n}\nif (issueBody !== \"\") {\n  Github.createNewIssueForRepository.setIssueBody(issueBody);\n}\n\n// Skip creating the issue if no required fields are set\nif (!repository && !issueTitle) {\n  Github.createNewIssueForRepository.skip(\"No repository and title provided\");\n}", "intent": "This Action creates a new issue for the specified repository in GitHub based on an event triggered by MESH."}
{"original_description": "When a transfer is finished on put.io, it will be downloaded automatically to your QNAP device.", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "QNAP", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qnap.download_file_from_url", "Filter code method": "Qnap.downloadFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"qnap.download_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Option shared folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Folder Path", "Slug": "option_shared_folder", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Url(string: file_url)"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "No file extension needed", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "Folder path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Subfolder Path", "Helper text": "If the subfolders don't exist, they will be automatically created. Example Format: some/folder/path. (Only English folder names are supported)", "Slug": "folder_path", "Required": "false", "Can have default value": "true", "Filter code method": "Qnap.downloadFileFromUrl.setFolder Path(string: folder_path)"}}], "filter_code": "if (Putio.transferFinished.Type !== \"Cancelled\") {\n  var FileUrl = Putio.transferFinished.DownloadUrl;\n  var FileName = Putio.transferFinished.Name;\n  var FolderPath = options.option_shared_folder;\n  Qnap.downloadFileFromUrl.setFileUrl(FileUrl)\n    .setFileName(FileName)\n    .setFolder(Path(FolderPath))\n    .run();\n}", "intent": "When a transfer is finished on put.io, it will be downloaded automatically to your QNAP device. This automation checks the type of transfer and downloads the file from the provided URL if the transfer is not cancelled."}
{"original_description": "This will turn the WiZ lights of your choice to bright red whenever your Wyze cam detects a smoke alarm", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.smoke_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Smoke detected\nSmoke alarm detected on your wyze camera.", "description": "Smoke alarm detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.smokeTrigger.SmokeDetected", "Type": "String", "Example": "Smoke alarm detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when smoke is triggered.", "description": "Time when smoke is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.smokeTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "// Check if smoke is detected\nif (Wyzecam.smokeTrigger.SmokeDetected) {\n  // Get the trigger time\n  var triggerTime = Wyzecam.smokeTrigger.TriggerTime;\n  \n  // Set WiZ lights to bright red\n  Wiz.turnOn({\n    \"entity\": serialize_device_info,\n    \"mode\": \"Bright Red\",\n    \"dimming\": \"100\" // assuming maximum brightness\n  });\n} else {\n  // Skip action if no smoke detected\n  Wiz.turnOn.skip(\"No smoke detected\");\n}", "intent": "Turn WiZ lights to bright red whenever Wyze cam detects smoke alarm."}
{"original_description": "When a stock that you specify rises above a certain price, a task will be added to Remember The Milk.", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.current_price_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Price\nText input > Other", "description": "Text input > Other", "details": {"Label": "Price", "Slug": "price", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.currentPriceRisesAbove.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.currentPriceRisesAbove.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last trade price of the stock.", "description": "The last trade price of the stock.", "details": {"Slug": "Price", "Filter code": "Finance.currentPriceRisesAbove.Price", "Type": "String", "Example": "603.7"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.currentPriceRisesAbove.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.currentPriceRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "var StockName = Finance.currentPriceRisesAbove.StockName\nvar StockTicker = Finance.currentPriceRisesAbove.StockTicker\nvar Price = Finance.currentPriceRisesAbove.Price\nif (parseInt(Price) > parseInt(action_details[0].details.price)) {\n  var task = \"Buy \" + StockName + \" (\" + StockTicker + \") at price \" + Price\n  Rememberthemilk.tasksAdd.setTask(task)\n} else {\n  Rememberthemilk.tasksAdd.skip(\"Price has not risen above threshold\")\n}", "intent": "When a stock's price rises above a specified threshold, add a task to Remember The Milk."}
{"original_description": "Select a time that you normally go to bed and your eWeLink 4 Channels Plug will let you know it's time to go to sleep.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plugs3_action", "Filter code method": "Ewelink.plugs3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plugs3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plugs3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Plug?", "Slug": "plugs3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Plugs3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "plugs3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time >= Meta.currentUserTime.format(\"HH:mm\")) { \n  Ewelink.plugs3Action(Ewelink.plugs3_query, Ewelink.plugs3_outlet_query, Ewelink.onoff_act_query)  \n} else {\n  Ewelink.plugs3Action.skip(\"Not yet time to sleep\")\n}", "intent": "The intent is to create a filter code that checks the time set by the user and triggers the eWeLink 4 Channels Plug to let them know it's time to go to sleep."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to red whenever the price of the stock you have selected falls by more than a certain percentage compared to the previous closing price. (Only for WiZ Colors lights)", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_drop_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage decrease", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageDropStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageDropStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageDropStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageDropStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageDropStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageDropStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "function financeStockPriceDrop() {\n  var StockName = Finance.percentageDropStocks.StockName;\n  var StockTicker = Finance.percentageDropStocks.StockTicker;\n  var Price = Finance.percentageDropStocks.Price;\n  var PercentageChange = Finance.percentageDropStocks.PercentageChange;\n  \n  if (parseFloat(PercentageChange) > parseFloat(config.percentage)) {\n    Wiz.turnOn.setMode(\"Red\").setDimming(100).skip(\"No change\");\n  } else {\n    Wiz.turnOn();\n  }\n}", "intent": "Automatically turn the WiZ lights to red whenever the price of a selected stock falls by more than a specified percentage compared to its previous closing price."}
{"original_description": "Send and Email and a scene will be activated in your BeoLiving Intelligence", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BeoLiving Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bang_olufsens_beo_link_gateway.bo_press", "Filter code method": "BangOlufsensBeoLinkGateway.boPress.skip(string?: reason)", "Runtime method": "runAction(\"bang_olufsens_beo_link_gateway.bo_press\", {})"}, "action_details": [{"section": "Action fields", "title": "Bo button\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a scene", "Slug": "bo_button", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Email.sendIftttAnEmailTagged.tag.includes(\"#hashtag\")) {\n  BangOlufsensBeoLinkGateway.boPress.skip(\"Hashtag detected\")\n} else {\n  // Code to activate scene in BeoLiving Intelligence\n  BangOlufsensBeoLinkGateway.boPress()\n}", "intent": "When an email is received, check if the tag field contains a specific hashtag. If it does, skip the action."}
{"original_description": "Set it and forget it. When your SmartThings device no longer detects a presence in your home, this applet will enable your robot to start cleaning.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ArrivedAt = SmartthingsV2.newPresentSmartthings.ArrivedAt\nif (!SmartthingsV2.newPresentSmartthings.present) {\n  if (new Date().getTime() - ArrivedAt.getTime() > 3600000) { // check for 1 hour since arrival\n    Irobot.startRobot.skip(\"No presence detected\")\n  } else {\n    Irobot.startRobot()\n  }\n}", "intent": "This applet is designed to automate the start of an iRobot cleaning robot when a SmartThings device no longer detects a presence in the home."}
{"original_description": "To-do? To-watch! Choose the channel, and when they post a new video the link and title will be added to the Todoist project you specify. ", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_video_by_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "What kind of videos\nDropdown list", "description": "Dropdown list", "details": {"Label": "What kind of videos?", "Helper text": "Archived broadcasts, only the highlights, or any.", "Slug": "what_kind_of_videos", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.newVideoByChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Video title\nThe title of the video.", "description": "The title of the video.", "details": {"Slug": "video_title", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoTitle", "Type": "String", "Example": "Twitch Weekly - February 6, 2015"}}, {"section": "Ingredients", "title": "Video description\nThe description of the video.", "description": "The description of the video.", "details": {"Slug": "video_description", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoDescription", "Type": "String", "Example": "Twitch Weekly LIVE on February 6, 2015!"}}, {"section": "Ingredients", "title": "Video preview image\nThe URL to a preview image of the video.", "description": "The URL to a preview image of the video.", "details": {"Slug": "video_preview_image", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoPreviewImage", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Video url\nThe URL to the video on Twitch.", "description": "The URL to the video on Twitch.", "details": {"Slug": "video_url", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Video channel\nThe name of the video's channel", "description": "The name of the video's channel", "details": {"Slug": "video_channel", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoChannel", "Type": "String", "Example": "Twitch"}}, {"section": "Ingredients", "title": "Video channel url\nThe URL to the video's channel on Twitch.", "description": "The URL to the video's channel on Twitch.", "details": {"Slug": "video_channel_url", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}], "action_channel": "Todoist", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "todoist.create_task", "Filter code method": "Todoist.createTask.skip(string?: reason)", "Runtime method": "runAction(\"todoist.create_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Project\nDropdown list", "description": "Dropdown list", "details": {"Label": "Project and section", "Helper text": "Project and section to which the task belongs", "Slug": "project_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task content\nText input", "description": "Text input", "details": {"Label": "Task content", "Helper text": "<a href=\"https://todoist.com/help/articles/205195102\" target=\"_blank\">Text formatting guide</a> and <a href=\"https://todoist.com/help/articles/360000029000\" target=\"_blank\">label format guide</a>", "Slug": "task_content", "Required": "true", "Can have default value": "true", "Filter code method": "Todoist.createTask.setTask Content(string: task_content)"}}, {"section": "Action fields", "title": "Note\nText input > Other", "description": "Text input > Other", "details": {"Label": "Note", "Helper text": "Add additional task note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setNote(string: note)"}}, {"section": "Action fields", "title": "Due date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Task's due date", "Helper text": "Check the <a href=\"https://todoist.com/help/articles/205325931\" target=\"_blank\">Due dates and times format guide</a>", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setDue Date(string: due_date)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Priority", "Helper text": "Task's priority", "Slug": "priority", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setPriority(string: priority)"}}, {"section": "Action fields", "title": "Task description\nText input > Other", "description": "Text input > Other", "details": {"Label": "Task description", "Helper text": "Task's description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setTask Description(string: task_description)"}}], "filter_code": "", "intent": "When a new video is posted on a specified channel, create a Todoist task with the title and content of the video."}
{"original_description": "Anytime a new message is Pinned in your selected channel this Applet will automatically save it to Google Sheets", "trigger_channel": "Discord", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "discord.new_message_in_channel"}, "trigger_details": [{"section": "Trigger fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time when the message was posted.", "description": "Date and time when the message was posted.", "details": {"Slug": "created_at", "Filter code": "Discord.newMessageInChannel.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Message\nThe contents of the message.", "description": "The contents of the message.", "details": {"Slug": "message", "Filter code": "Discord.newMessageInChannel.Message", "Type": "String", "Example": "Hey everyone 👋"}}, {"section": "Ingredients", "title": "Author\nThe author of the message.", "description": "The author of the message.", "details": {"Slug": "author", "Filter code": "Discord.newMessageInChannel.Author", "Type": "String", "Example": "username123"}}, {"section": "Ingredients", "title": "Link to message\nThis is a link to the message in Discord.", "description": "This is a link to the message in Discord.", "details": {"Slug": "link_to_message", "Filter code": "Discord.newMessageInChannel.LinkToMessage", "Type": "Web URL", "Example": "https://discord.com/channels/833856998537166918/833856998537166921/1181411805982105631"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var Channel = Discord.newMessageInChannel.Channel\nif (Channel === \"\") {\n  Domovea.shadeClose.skip(\"No channel selected\")\n}\n\nvar CreatedAt = Discord.newMessageInChannel.CreatedAt\nvar Message = Discord.newMessageInChannel.Message\nvar Author = Discord.newMessageInChannel.Author\nvar LinkToMessage = Discord.newMessageInChannel.LinkToMessage\n\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Pinned Messages\")\nGoogleSheets.appendToGoogleSpreadSheet.skip(string?: reason)\n{\n  \"Filename\": $$filename$$,\n  \"Formatted row\": \"|||\" + CreatedAt + \"|||\" + Message + \"|||\" + Author + \"|||\" + LinkToMessage\n}", "intent": "Save a new pinned message in Discord to Google Sheets at any time."}
{"original_description": "Just specify the time and Apilio will evaluate a Logicblock every day at the time you wish.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.logicblock_evaluation_requests", "Filter code method": "Apilio.logicblockEvaluationRequests.skip(string?: reason)", "Runtime method": "runAction(\"apilio.logicblock_evaluation_requests\", {})"}, "action_details": [{"section": "Action fields", "title": "Logicblock identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio logicblock do you want to evaluate?", "Slug": "logicblock_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time === \"undefined\") {\n  Apilio.logicblockEvaluationRequests.skip(\"No time specified\")\n} else {\n  var logicBlockId = \"Please select a Logicblock\"\n  if (logicBlockId !== \"\") {\n    Apilio.logicblockEvaluationRequests.run(logicBlockId)\n  } else {\n    Apilio.logicblockEvaluationRequests.skip(\"Please select a Logicblock\")\n  }\n}", "intent": "Evaluate a Logicblock every day at the specified time, based on user input."}
{"original_description": "If your oven door is opened, your Philips Hue lights will blink", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_door_opened"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenDoorOpened.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcOven.ovenDoorOpened.CreatedAt) {\n  var Lights = [\"<?php echo $ha_id; ?>\"]\n  if (Lights.length > 0) {\n    Hue.blinkAllHue(Lights)\n  } else {\n    Hue.blinkAllHue.skip(\"No lights selected\")\n  }\n}", "intent": "When the oven door is opened, blink all Philips Hue lights if a specific light selection is provided."}
{"original_description": "This applet will add new files to a data.world dataset as they are uploaded to a Google Drive folder.", "trigger_channel": "Google Drive", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_drive.any_new_file"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Drive folder path", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Documents/Photos/Receipts&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "filename", "Filter code": "GoogleDrive.anyNewFile.Filename", "Type": "String", "Example": "filename"}}, {"section": "Ingredients", "title": "Path\nThe path of the file.", "description": "The path of the file.", "details": {"Slug": "path", "Filter code": "GoogleDrive.anyNewFile.Path", "Type": "String", "Example": "/IFTTT/sample.txt"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "file_url", "Filter code": "GoogleDrive.anyNewFile.FileUrl", "Type": "File URL", "Example": "https://google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time file was created.", "description": "Date and time file was created.", "details": {"Slug": "created_at", "Filter code": "GoogleDrive.anyNewFile.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.upload_file", "Filter code method": "Datadotworld.uploadFile.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.upload_file\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to add this file to? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "What would you like to name this file? IMPORTANT: File names must include a file extension.", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "What is the URL from which the file can be downloaded?", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Url(string: file_url)"}}], "filter_code": "var DatasetKey = Data.world.uploadFile.getDatasetKey()\nif (DatasetKey === undefined) {\n  Data.world.uploadFile.skip(\"No dataset key provided\")\n}\nelse {\n  var FileName = GoogleDrive.anyNewFile.Filename\n  if (FileName !== undefined) {\n    Data.world.uploadFile.setFilename(FileName)\n  }\n  else {\n    Data.world.uploadFile.skip(\"No file name provided\")\n  }\n}\nData.world.uploadFile.upload()", "intent": "Add new files to a data.world dataset as they are uploaded to a Google Drive folder."}
{"original_description": "Every day, a Signal will be sent to your Das Keyboard with the daily  exchange rate report.", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.currency_exchange_rate_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Input currency\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Input currency", "Slug": "input_currency", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Output currency\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Output currency", "Slug": "output_currency", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Helper text": "Based on your time zone settings", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Input currency\nThe symbol for the input currency.", "description": "The symbol for the input currency.", "details": {"Slug": "InputCurrency", "Filter code": "Finance.currencyExchangeRateStocks.InputCurrency", "Type": "String", "Example": "USD"}}, {"section": "Ingredients", "title": "Output currency\nThe symbol for the output currency.", "description": "The symbol for the output currency.", "details": {"Slug": "OutputCurrency", "Filter code": "Finance.currencyExchangeRateStocks.OutputCurrency", "Type": "String", "Example": "EUR"}}, {"section": "Ingredients", "title": "Exchange rate\nThe exchange rate between currencies.", "description": "The exchange rate between currencies.", "details": {"Slug": "ExchangeRate", "Filter code": "Finance.currencyExchangeRateStocks.ExchangeRate", "Type": "String", "Example": "0.75416"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the exchange rate.", "description": "A link to more information about the exchange rate.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.currencyExchangeRateStocks.InfoUrl", "Type": "String", "Example": "http://finance.yahoo.com/q/bc?s=USDEUR=X"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.currencyExchangeRateStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Check if today's date is within the time specified\nvar time = Meta.currentUserTime.format(\"HH:mm:ss\")\nif (time < \"06:00:00\" || time > \"22:00:00\") {\n  Daskeyboardq.signals.skip(\"Outside of active hours\")\n} else {\n  // Get exchange rate information\n  var InputCurrency = Finance.currencyExchangeRateStocks.InputCurrency\n  var OutputCurrency = Finance.currencyExchangeRateStocks.OutputCurrency\n  var ExchangeRate = Finance.currencyExchangeRateStocks.ExchangeRate\n  \n  // Set Signal name, message, and color based on the exchange rate\n  var name = \"Daily Exchange Rate\"\n  var message = `1 ${InputCurrency} is equal to ${ExchangeRate} ${OutputCurrency}`\n  Daskeyboardq.signals.setName(name)\n  Daskeyboardq.signals.setMessage(message)\n  \n  // Run the action\n  Daskeyboardq.signals.runAction({\"name\": name, \"message\": message})\n}", "intent": "Send a daily Signal to the Das Keyboard with the current exchange rate report."}
{"original_description": "This applet will add new files to a data.world dataset as they are uploaded to a Dropbox folder.", "trigger_channel": "Dropbox", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dropbox.new_file_in_folder"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Subfolder name", "Helper text": "Optional", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "File url\nThe file's public URL.", "description": "The file's public URL.", "details": {"Slug": "FileUrl", "Filter code": "Dropbox.newFileInFolder.FileUrl", "Type": "String", "Example": "https://www.dropbox.com/s/qp3cqdjqachyr2x/ifttt_wordmark.png"}}, {"section": "Ingredients", "title": "Filename\nThe name of the file.", "description": "The name of the file.", "details": {"Slug": "Filename", "Filter code": "Dropbox.newFileInFolder.Filename", "Type": "String", "Example": "coolbeans.jpg"}}, {"section": "Ingredients", "title": "Filename no ext\nThe name of the file without extension.", "description": "The name of the file without extension.", "details": {"Slug": "FilenameNoExt", "Filter code": "Dropbox.newFileInFolder.FilenameNoExt", "Type": "String", "Example": "coolbeans"}}, {"section": "Ingredients", "title": "Modified date\nDate file was created or modified in Dropbox.", "description": "Date file was created or modified in Dropbox.", "details": {"Slug": "ModifiedDate", "Filter code": "Dropbox.newFileInFolder.ModifiedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "data.world", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "datadotworld.upload_file", "Filter code method": "Datadotworld.uploadFile.skip(string?: reason)", "Runtime method": "runAction(\"datadotworld.upload_file\", {})"}, "action_details": [{"section": "Action fields", "title": "Dataset key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dataset or Data Project", "Helper text": "Which dataset or data project would you like to add this file to? <a href=\"https://data.world/create-a-dataset\" target=\"_blank\">Create new</a>", "Slug": "dataset_key", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "File name\nText input > File name", "description": "Text input > File name", "details": {"Label": "File Name", "Helper text": "What would you like to name this file? IMPORTANT: File names must include a file extension.", "Slug": "file_name", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Name(string: file_name)"}}, {"section": "Action fields", "title": "File url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "What is the URL from which the file can be downloaded?", "Slug": "file_url", "Required": "true", "Can have default value": "true", "Filter code method": "Datadotworld.uploadFile.setFile Url(string: file_url)"}}], "filter_code": "if (Path !== \"\") {\n  var FileUrl = Dropbox.newFileInFolder.FileUrl\n  var FileName = Dropbox.newFileInFolder.Filename\n  var FileNameNoExt = Dropbox.newFileInFolder.FilenameNoExt\n  var ModifiedDate = Dropbox.newFileInFolder.ModifiedDate\n\n  Datadotworld.uploadFile(\n    \"dataset_key\",\n    {\n      \"file_name\": FileName,\n      \"file_url\": FileUrl\n    }\n  )\n}", "intent": "This applet adds new files to a data.world dataset as they are uploaded to a Dropbox folder."}
{"original_description": "This will automatically turn on the WiZ light(s) of your choice whenever your Withings Sleep detects that you're getting out of bed. No need to reach for the switch anymore!", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (WithingsSleep.bedout.DeviceUser === Meta.currentUser) {\n  if ((Date.now() >= new Date(WithingsSleep.bedout.StartDate).getTime()) && (Date.now() <= new Date(WithingsSleep.bedout.EndDate).getTime())) {\n    Wiz.turnOn.setEntity(WiZ.getEntitiesFromDropdown(WiZ.getDevices()))\n      .setMode(WiZ.getModeFromDropdown())\n      .setDimming(WiZ.getDimmingFromDropdown());\n  } else {\n    Wiz.turnOn.skip(\"Invalid time range\");\n  }\n}", "intent": "This IFTTT applet will automatically turn on the WiZ lights when a user gets out of bed, as detected by their Withings Sleep device. It allows for customization of start and end dates, devices, and light settings."}
{"original_description": "This will turn off the WiZ light(s) of your choice whenever your Withings Sleep detects that you get into bed. Don't worry about turning off the lights anymore, just aim for the pillow and let WiZ do the rest!", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_off", "Filter code method": "Wiz.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "Select the lights you want to turn off.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WithingsSleep.bedin.DeviceUser === \"Bed in has been detected by Tom's Withings Sleep\") { \n  if (start_date <= Meta.currentUserTime.date() && end_date >= Meta.currentUserTime.date()) {\n    var entity = [\"Select the lights you want to turn off\"];\n    Wiz.turnOff(entity[0])\n  } else {\n    Wiz.turnOff.skip(\"Out of scheduled time range\")\n  }\n}", "intent": "This IFTTT applet will automatically turn off WiZ lights when a user gets into bed, detected by their Withings Sleep device."}
{"original_description": "When it's about to rain, the light will be cool white. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Cloud Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "link_smart_home.Light-ColorTemperature", "Filter code method": "LinkSmartHome.lightColorTemperature.skip(string?: reason)", "Runtime method": "runAction(\"link_smart_home.Light-ColorTemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Set color temperature to", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "LinkSmartHome.lightColorTemperature.setValue(string: value)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  LinkSmartHome.lightColorTemperature.setValue(\"CoolWhite\")\n}", "intent": "When the weather is about to rain, set the light to cool white."}
{"original_description": "This applet will let you turn off motion detection at specific time of the day", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Smitch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Smitch.turn_on_motion_detection", "Filter code method": "Smitch.turnOnMotionDetection.skip(string?: reason)", "Runtime method": "runAction(\"Smitch.turn_on_motion_detection\", {})"}, "action_details": [{"section": "Action fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera", "Helper text": "Choose the camera to turn on motion detection", "Slug": "camera", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Motion detection type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Motion Detection Type", "Helper text": "Choose the motion detection type", "Slug": "motion_detection_type", "Required": "true", "Can have default value": "true", "Filter code method": "Smitch.turnOnMotionDetection.setMotion Detection Type(string: motion_detection_type)"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime >= \"06:00\" && CheckTime < \"08:00\") {\n  Smitch.turnOnMotionDetection.skip(\"Outside of allowed hours\")\n}", "intent": "This applet will skip the action of turning on motion detection at a specific time of day."}
{"original_description": "When a stock that you specify drops below a certain price, a task will be added to Remember The Milk.", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.current_price_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Price\nText input > Other", "description": "Text input > Other", "details": {"Label": "Price", "Slug": "price", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.currentPriceDropsBelow.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.currentPriceDropsBelow.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last trade price of the stock.", "description": "The last trade price of the stock.", "details": {"Slug": "Price", "Filter code": "Finance.currentPriceDropsBelow.Price", "Type": "String", "Example": "603.7"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.currentPriceDropsBelow.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.currentPriceDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Remember The Milk", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rememberthemilk.tasks_add", "Filter code method": "Rememberthemilk.tasksAdd.skip(string?: reason)", "Runtime method": "runAction(\"rememberthemilk.tasks_add\", {})"}, "action_details": [{"section": "Action fields", "title": "Task\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Helper text": "Task name with properties in <a href=\"https://www.rememberthemilk.com/help/answer/basics-smartadd-howdoiuse\" target=\"_blank\">Smart Add</a> format. E.g. &quot;Call Bob at 9am Monday #work&quot;.", "Slug": "task", "Required": "true", "Can have default value": "true", "Filter code method": "Rememberthemilk.tasksAdd.setTask(string: task)"}}], "filter_code": "var StockName = Finance.currentPriceDropsBelow.StockName;\nvar Price = Finance.currentPriceDropsBelow.Price;\nif (parseFloat(Price) < parseFloat(Meta.currentUserTriggeredPrice)) {\n  var task = \"Task: \" + StockName + \" price dropped below $\" + Meta.currentUserTriggeredPrice;\n  Rememberthemilk.tasksAdd.setTask(task);\n} else {\n  Rememberthemilk.tasksAdd.skip(\"No trigger condition met\");\n}", "intent": "When the stock price drops below a specified price, add a task to Remember The Milk."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to warm white when it starts to rain. Get a comfortable warm light to compensate for the gloomy weather.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Wiz.turnOn.setEntity(//<entity>).setMode(\"Warm White\").setDimming(//<dimming>)\n}", "intent": "Automatically turn on WiZ light(s) in warm white mode when it starts raining."}
{"original_description": "When your car drives away from a location you specify, your garage door will automatically close.", "trigger_channel": "Zubie", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zubie.departures"}, "trigger_details": [{"section": "Trigger fields", "title": "Vehicle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which vehicle?", "Helper text": "Select the vehicle to trigger the event", "Slug": "vehicle", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Place\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which place?", "Helper text": "Which place? (select from the list of Places defined in Zubie)", "Slug": "place", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event details\nA brief text summary of the departure event", "description": "A brief text summary of the departure event", "details": {"Slug": "event_details", "Filter code": "Zubie.departures.EventDetails", "Type": "String", "Example": "Dad's Honda arrived at Home"}}, {"section": "Ingredients", "title": "Event time\nDate and time of the trip", "description": "Date and time of the trip", "details": {"Slug": "event_time", "Filter code": "Zubie.departures.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Place\nThe place name associated with this location within Zubie", "description": "The place name associated with this location within Zubie", "details": {"Slug": "place", "Filter code": "Zubie.departures.Place", "Type": "String", "Example": "Home"}}, {"section": "Ingredients", "title": "Vehicle\nName of the vehicle defined within Zubie", "description": "Name of the vehicle defined within Zubie", "details": {"Slug": "vehicle", "Filter code": "Zubie.departures.Vehicle", "Type": "String", "Example": "1979 Pinto"}}], "action_channel": "Garageio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garageio.close_garage_door", "Filter code method": "Garageio.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"garageio.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the trigger details\nvar event_details = Zubie.departures.EventDetails;\nvar event_time = Zubie.departures.EventTime;\nvar place = Zubie.departures.Place;\nvar vehicle = Zubie.departures.Vehicle;\n\n// Check if the vehicle and place match the specified values\nif (vehicle === \"1979 Pinto\" && place === \"Home\") {\n  // Close the garage door with a reason\n  Garageio.closeGarageDoor(\"Dad's Honda has departed from Home\");\n} else {\n  // Skip the action for other vehicles or locations\n  Garageio.closeGarageDoor.skip(\"Invalid vehicle or location\");\n}", "intent": "Automatically close the garage door when a specified vehicle departs from a selected location."}
{"original_description": "This will automatically turn off the WiZ lights of your choice when your Wyze Motion Sensor is \"clear\": when there is no motion.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.motion_sensor_no_detects_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Trigger time\nTime when motion sensor becomes clear is triggered.", "description": "Time when motion sensor becomes clear is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Motion sensor name\nMotion sensor name which becomes clear is triggered.", "description": "Motion sensor name which becomes clear is triggered.", "details": {"Slug": "DeviceName", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName", "Type": "String", "Example": "your wyze motion sensor"}}, {"section": "Ingredients", "title": "Trigger message\n{{fields.serialize_device_info.label}} becomes clear", "description": "{{fields.serialize_device_info.label}} becomes clear", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.TriggerMessage", "Type": "String", "Example": "Motion sensor becomes clear on your motion sensor."}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_off", "Filter code method": "Wiz.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "Select the lights you want to turn off.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Wyzecam.motionSensorNoDetectsTrigger.TriggerTime >= Meta.currentUserTime.now()) {\n  var deviceName = Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName;\n  var message = `{{fields.serialize_device_info.label}} becomes clear`;\n  if (deviceName === \"your wyze motion sensor\") {\n    // skip the action for this specific motion sensor\n  } else {\n    var entity = \"{{fields.entity.label}}\";\n    Wiz.turnOff(entity, message);\n  }\n} else {\n  Wiz.turnOff.skip(\"Trigger time not reached\");\n}", "intent": "This automation turns off WiZ lights when Wyze Motion Sensor detects no motion."}
{"original_description": "This applet will change the color of a Philips Hue light bulb into green when the hour with the lowest CO2 intensity in the electricity production between a starting time and a finish time is reached", "trigger_channel": "Watts", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "watts.lowcarbon"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nDropdown list", "description": "Dropdown list", "details": {"Label": "Location", "Helper text": "Please select one of your Watts locations", "Slug": "location", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Start hour\nDropdown list", "description": "Dropdown list", "details": {"Label": "Starting time", "Helper text": "Example: You are leaving home at 07:00 in the morning and need your dishwasher to be finished at 16:00 in the afternoon when you return. The dishwasher takes two hours to complete its normal washing program. Set the starting time to 07:00.", "Slug": "start_hour", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "End hour\nDropdown list", "description": "Dropdown list", "details": {"Label": "Finish time", "Helper text": "Example: You are leaving home at 07:00 in the morning and need your dishwasher to be finished at 16:00 in the afternoon when you return. The dishwasher takes two hours to complete its normal washing program. Set the finish time to 16:00.", "Slug": "end_hour", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Run duration in hours\nDropdown list", "description": "Dropdown list", "details": {"Label": "Duration", "Helper text": "Example: You need your dishwasher to be finished at 16:00. The dish washer takes two hours to complete its normal washing program. In this case Watts will start the dishwasher at least two hours before the finish time. Set the Duration to 2 hours.", "Slug": "run_duration_in_hours", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Start time\nStart of time range trigger could have been activated at.", "description": "Start of time range trigger could have been activated at.", "details": {"Slug": "start_time", "Filter code": "Watts.lowcarbon.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nSpecified end of time range (with run duration included) trigger could have been activated at.", "description": "Specified end of time range (with run duration included) trigger could have been activated at.", "details": {"Slug": "end_time", "Filter code": "Watts.lowcarbon.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Run duration\nSpecified run duration.", "description": "Specified run duration.", "details": {"Slug": "run_duration", "Filter code": "Watts.lowcarbon.RunDuration", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Co2 level\nAverage CO2 level during the run trigger activated.", "description": "Average CO2 level during the run trigger activated.", "details": {"Slug": "co2_level", "Filter code": "Watts.lowcarbon.Co2Level", "Type": "String", "Example": "126"}}, {"section": "Ingredients", "title": "Executed at\nTime trigger was activated at.", "description": "Time trigger was activated at.", "details": {"Slug": "executed_at", "Filter code": "Watts.lowcarbon.ExecutedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Location name\nName of the location CO2 level is referred to.", "description": "Name of the location CO2 level is referred to.", "details": {"Slug": "location_name", "Filter code": "Watts.lowcarbon.LocationName", "Type": "String", "Example": "Herstedøstervej 23"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "// Get the start time\nvar StartTime = Watts.lowcarbon.StartTime;\n// Get the end time\nvar EndTime = Watts.lowcarbon.EndTime;\n// Calculate the run duration\nvar RunDuration = Watts.lowcarbon.RunDuration;\n// Initialize the lowest CO2 intensity and the corresponding hour\nvar lowestCO2Intensity = Infinity;\nvar lowCO2Hour = 0;\n\n// Iterate over each hour between start and end time\nfor (var hour = StartTime.getHours(); hour <= EndTime.getHours() + RunDuration; hour++) {\n  // Get the current CO2 level for this hour\n  var co2Level = Watts.lowcarbon.Co2Levels[hour];\n  if (co2Level < lowestCO2Intensity) {\n    // Update the lowest CO2 intensity and the corresponding hour\n    lowestCO2Intensity = co2Level;\n    lowCO2Hour = hour;\n  }\n}\n\n// Check if it's the hour with the lowest CO2 intensity\nif (hour === lowCO2Hour) {\n  // Change the color of Philips Hue light bulbs to green\n  Hue.setColorAllHue.setColor(\"green\");\n} else {\n  // Skip the action if it's not the hour with the lowest CO2 intensity\n  Hue.setColorAllHue.skip(\"Not the hour with the lowest CO2 intensity\");\n}", "intent": "This applet changes the color of Philips Hue light bulbs to green when the hour with the lowest CO2 intensity in electricity production between a specified start and end time is reached."}
{"original_description": "When the Litter-Robot waste drawer is full, the Hue light(s) in your selected space will blink.", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName.includes(\"Full\")) {\n  var lights = Domovea.shadeClose.getLights()\n  Hue.blinkAllHue(lights, \"Waste drawer full\")\n}", "intent": "Check if the Litter-Robot waste drawer is full and blink the selected Hue lights."}
{"original_description": "This Applet will turn on your bot when you unlock your August Home lock.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_on_bot", "Filter code method": "Switchbot.turnOnBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_on_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var user = Augusthome.lockUnlocked.User;\nvar lockName = Augusthome.lockUnlocked.LockName;\nvar houseName = Augusthome.lockUnlocked.HouseName;\n\nif (user === \"Your Name\") { // replace with the actual user name\n  Switchbot.turnOnBot(\"Your Bot Name\", \"Unlocking at home\"); // replace with your bot's name and a reason\n} else {\n  Switchbot.turnOnBot.skip(`Only allow unlocking for specific users`);\n}", "intent": "This Applet will turn on the SwitchBot when you unlock your August Home lock."}
{"original_description": "This Action will turn a WeMo Light Switch on. If the WeMo Switch is already on, it will remain on.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsOnDiscrete", "Filter code method": "WemoLightSwitch.attributeLsOnDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsOnDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo light switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "This will turn on philips hue lights when fetchIt button is pressed or long pressed ", "trigger_channel": "ThingaOS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tantiv4.when_fetchit_button_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Fetchit device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Device", "Helper text": "Select device name", "Slug": "fetchit_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Button event\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Button Event", "Helper text": "Select Button Event", "Slug": "button_event_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tantiv4.whenFetchitButtonPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nname of the device with which triggered", "description": "name of the device with which triggered", "details": {"Slug": "device_name", "Filter code": "Tantiv4.whenFetchitButtonPress.DeviceName", "Type": "String", "Example": "Name"}}, {"section": "Ingredients", "title": "Button name\nButton name", "description": "Button name", "details": {"Slug": "button_name", "Filter code": "Tantiv4.whenFetchitButtonPress.ButtonName", "Type": "String", "Example": "string"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Tantiv4.whenFetchitButtonPress.ButtonEvent === \"press\" || Tantiv4.whenFetchitButtonPress.ButtonEvent === \"long_press\") {\n  if (Tantiv4.whenFetchitButtonPress.fetchit_device_id !== \"default\") {\n    Hue.turnOffAllHue.skip(\"FetchIt button not default device\")\n  } else {\n    Hue.turnOffAllHue()\n  }\n}", "intent": "When the FetchIt button is pressed or long pressed, turn off all Philips Hue lights."}
{"original_description": "This Action will turn a WeMo Light Switch off. If the WeMo Switch is already off, it will remain off.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsOffDiscrete", "Filter code method": "WemoLightSwitch.attributeLsOffDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsOffDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo light switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "const EventID = Mesh.events.Text;\nif (EventID === \"Motion Tag: Detected!\") {\n  WemoLightSwitch.attributeLsOffDiscrete.skip(\"No motion detected\");\n} else {\n  // Get the macaddress from the action details\n  const MacAddress = WemoLightSwitch.macaddress;\n  \n  // Turn off the light switch\n  WemoLightSwitch.attributeLsOffDiscrete(MacAddress);\n}", "intent": "Check if the event ID matches a specific condition and turn off the WeMo Light Switch if necessary."}
{"original_description": "Your coffee machine will turn on and run the default rinsing program every morning making it ready to make your favorite coffee.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() < 7 || Weather.sunRises.SunriseAt.getHours() > 22) {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Outside of active hours\")\n} else if (Weather.sunRises.TempFahrenheit >= 60 && Weather.sunRises.TempCelsius >= 15) {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Temperature too high or low\")\n} else if (Weather.sunRises.Condition !== \"Sunny\") {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Not sunny, skipping coffee\")\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn()\n}", "intent": "Turn on the Home Connect Coffee Machine every morning if it's sunny and not too hot or cold."}
{"original_description": "This Action will deactivate the output of your cloudBit.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "littleBits", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "littlebits.deactivate_output", "Filter code method": "Littlebits.deactivateOutput.skip(string?: reason)", "Runtime method": "runAction(\"littlebits.deactivate_output\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which cloudBit?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": "This script checks if a specific event was triggered in MESH, and if so, it deactivates the output of a specified cloudBit."}
{"original_description": "At sunset all Lexi lights will automatically turn on", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceTurnOnAll", "Filter code method": "Lexi.deviceTurnOnAll.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceTurnOnAll\", {})"}, "action_details": [{"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temp", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunSets.SunsetAt.getTime() < Meta.currentUserTime.currentTime().getTime()) {\n  if (Meta.currentUserTime.currentTime().getDay() != 6 || Meta.currentUserTime.currentTime().getDay() != 0) {\n    Lexi.deviceTurnOnAll(\"Sunset triggered\")\n  } else {\n    Lexi.deviceTurnOnAll.skip(\"Weekend - automation disabled\")\n  }\n}", "intent": "At sunset, all Lexi lights will automatically turn on."}
{"original_description": "Select a time that you normally go to bed and your lights will let you know it's time to go to sleep.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_off_bot", "Filter code method": "Switchbot.turnOffBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_off_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.includes(Time)) {\n  if (Time >= \"22:00\" && Time <= \"06:00\") {\n    Switchbot.turnOffBot(\"Bedtime\")\n  }\n}", "intent": "Check if the current time matches the selected bedtime and turn off SwitchBot if it does."}
{"original_description": "Report yesterday's rainfall measurement from your Netatmo device to Netro. Netro will use it to update schedules.  ", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-yesterday-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainYesterdayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.report_weather", "Filter code method": "Netro.reportWeather.skip(string?: reason)", "Runtime method": "runAction(\"netro.report_weather\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to use the weather data.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "date", "Helper text": "The date of the weather information, e.g. 2000/12/30.", "Slug": "date", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setDate(string: date)"}}, {"section": "Action fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "condition", "Helper text": "The daily weather condition.", "Slug": "condition", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setCondition(string: condition)"}}, {"section": "Action fields", "title": "Summary\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "summary", "Helper text": "The daily weather summary.", "Slug": "summary", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSummary(string: summary)"}}, {"section": "Action fields", "title": "Rain\nText input > Other", "description": "Text input > Other", "details": {"Label": "rain", "Helper text": "The daily rain amount, float, with unit of MM", "Slug": "rain", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setRain(string: rain)"}}, {"section": "Action fields", "title": "Rain prob\nText input > Other", "description": "Text input > Other", "details": {"Label": "rain probability", "Helper text": "The daily rain probability for forecast data, integer, from 0 to 100", "Slug": "rain_prob", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setRain Prob(string: rain_prob)"}}, {"section": "Action fields", "title": "Temp\nText input > Other", "description": "Text input > Other", "details": {"Label": "temperature", "Helper text": "The daily average temperature, float, of unit Celsius", "Slug": "temp", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setTemp(string: temp)"}}, {"section": "Action fields", "title": "T min\nText input > Other", "description": "Text input > Other", "details": {"Label": "minimum temperature", "Helper text": "The daily minimum temperature, float, of unit Celsius", "Slug": "t_min", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Min(string: t_min)"}}, {"section": "Action fields", "title": "T max\nText input > Other", "description": "Text input > Other", "details": {"Label": "maximum temperature", "Helper text": "The daily maximum temperature of day, float, of unit Celsius", "Slug": "t_max", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Max(string: t_max)"}}, {"section": "Action fields", "title": "T dew\nText input > Other", "description": "Text input > Other", "details": {"Label": "dew point", "Helper text": "The daily dew point, float, of unit Celsius", "Slug": "t_dew", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Dew(string: t_dew)"}}, {"section": "Action fields", "title": "Wind speed\nText input > Other", "description": "Text input > Other", "details": {"Label": "wind speed", "Helper text": "The daily wind speed, float, of unit m/s", "Slug": "wind_speed", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setWind Speed(string: wind_speed)"}}, {"section": "Action fields", "title": "Humidity\nText input > Other", "description": "Text input > Other", "details": {"Label": "humidity", "Helper text": "The daily humidity, integer, 0-100", "Slug": "humidity", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setHumidity(string: humidity)"}}, {"section": "Action fields", "title": "Pressure\nText input > Other", "description": "Text input > Other", "details": {"Label": "pressure", "Helper text": "The daily air pressure, float, of unit hpa", "Slug": "pressure", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setPressure(string: pressure)"}}, {"section": "Action fields", "title": "Sunrise\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "sunrise", "Helper text": "sunrise time", "Slug": "sunrise", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSunrise(string: sunrise)"}}, {"section": "Action fields", "title": "Sunset\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "sunset", "Helper text": "sunset time", "Slug": "sunset", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSunset(string: sunset)"}}], "filter_code": "", "intent": "", "filter_code_old": "Netro.reportWeather.setDate(Netatmo.rainYesterdayAmount.MeasuredAt)\nNetro.reportWeather.setRain(Netatmo.rainYesterdayAmount.MeasuredRainfallMM)\nNetro.reportWeather.setRainProb(\"100\")\n\n\n"}
{"original_description": "This will automatically turn on the WiZ light(s) of your choice when SmartThings detects a presence.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.ArrivedAt !== \"\") {\n  let device = SmartthingsV2.newPresentSmartthings.Device;\n  let entity = // Get the selected entity from \"Entity\" dropdown\n  if (entity !== \"whole home\") {\n    Wiz.turnOn(entity, \"device\", device)\n  } else {\n    Wiz.turnOn(skip(\"Whole Home is not a valid entity\"))\n  }\n}", "intent": "This automation will turn on the WiZ light(s) of your choice when SmartThings detects a presence, allowing you to specify which device and mode to use."}
{"original_description": "This will change the WiZ light(s) of your choice to red whenever the CO₂ level measured by your Netatmo Weather Station rises above a certain point. We suggest 1,000ppm as default - you can change it to fit your needs. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.co2-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target carbon dioxide", "Helper text": "In parts per million (ppm)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.co2RisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the CO2", "description": "This is the name of the Netamo device where you are reading the CO2", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.co2RisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target co2\nThe target CO2 in parts per million (ppm)", "description": "The target CO2 in parts per million (ppm)", "details": {"Slug": "TargetCO2", "Filter code": "Netatmo.co2RisesAbove.TargetCO2", "Type": "String", "Example": "1200"}}, {"section": "Ingredients", "title": "Measured co2\nThe measured CO2 in parts per million (ppm)", "description": "The measured CO2 in parts per million (ppm)", "details": {"Slug": "MeasuredCO2", "Filter code": "Netatmo.co2RisesAbove.MeasuredCO2", "Type": "String", "Example": "1204"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Netatmo.co2RisesAbove.MeasuredCO2 > parseInt(Trigger.threshold_value)) {\n  Wiz.turnOn.setMode(\"Color\").setDimming(\"100%).setEntity(Trigger.entity).skip(\"CO₂ level is fine\")\n} else {\n  Wiz.turnOn.skip(\"No action needed - CO₂ level is within limits\")\n}", "intent": "This IFTTT automation will change the WiZ light(s) to red whenever the CO₂ level measured by the Netatmo Weather Station rises above a specified target value."}
{"original_description": "This will turn on the WiZ lights of your choice in the mode and brightness you defined whenever your Wyze Motion Sensor detects motion.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.motion_sensor_no_detects_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Trigger time\nTime when motion sensor becomes clear is triggered.", "description": "Time when motion sensor becomes clear is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Motion sensor name\nMotion sensor name which becomes clear is triggered.", "description": "Motion sensor name which becomes clear is triggered.", "details": {"Slug": "DeviceName", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName", "Type": "String", "Example": "your wyze motion sensor"}}, {"section": "Ingredients", "title": "Trigger message\n{{fields.serialize_device_info.label}} becomes clear", "description": "{{fields.serialize_device_info.label}} becomes clear", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.TriggerMessage", "Type": "String", "Example": "Motion sensor becomes clear on your motion sensor."}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var Entity = $$Entity$$\nvar Mode = $$Mode$$\nvar Dimming = $$Dimming$$\nif (Wyzecam.motionSensorNoDetectsTrigger.TriggerTime < now()) {\n  Wiz.turnOn.skip(\"Trigger time is in the past\")\n} else if (!Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName) {\n  Wiz.turnOn.skip(\"Missing motion sensor name\")\n} else {\n  Wiz.turnOn.setEntity(Entity)\n    .setMode(Mode)\n    .setDimming(Dimming)\n}", "intent": "This code turns on WiZ lights in a specified mode and brightness when motion is detected by Wyze Motion Sensor."}
{"original_description": "This Applet will attempt to close your garage door or gate every day at specific time. If the garage door is already closed, it will remain closed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.close_door", "Filter code method": "Garagewifi.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (GarageWiFi.getDoorState() === \"Open\" && new Date().getHours() === parseInt(Time.split(\" \")[1]) && new Date().getMinutes() === 0) {\n  GarageWiFi.closeDoor(skip(\"Garage door is already closed\"))\n}", "intent": "This Applet will attempt to close the garage door every day at a specific time. If the garage door is already closed, it will remain closed."}
{"original_description": "This Applet will attempt to open your garage door or gate every day at specific time. If the garage door is already open, it will remain open.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gogogate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gogogate.open_door", "Filter code method": "Gogogate.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"gogogate.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DoorNumber = Gogogate.door_number;\nvar CheckTime = DateAndTime.everyDayAt.CheckTime;\nif (Gogogate.getDoorState() === \"open\") {\n  Gogogate.openDoor.skip(\"Garage door is already open\");\n} else if (CheckTime !== time) {\n  Gogogate.openDoor(skip(\"Not the correct time\"));\n} else {\n  Gogogate.openDoor();\n}", "intent": "Automate the garage door or gate to open at a specific time every day, but skip if the door is already open."}
{"original_description": "This applet will stop watering if  rain is detected by NetAtmo Rain Gauge", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.stop_all_watering", "Filter code method": "RainMachine.stopAllWatering.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.stop_all_watering\", {})"}, "action_details": [{"section": "Action fields", "title": "Sprinkler\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Device Name", "Slug": "sprinkler", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.rainHasStarted.DeviceName !== \"unknown\" && Netatmo.rainHasStarted.MeasuredAt >= Date.now()) {\n  RainMachine.stopAllWatering(\"Rain detected\")\n} else {\n  RainMachine.stopAllWatering.skip(\"No rain detected or measurement not recent enough\")\n}", "intent": "The applet will stop watering if rain is detected by NetAtmo Rain Gauge."}
{"original_description": "This applet informs you if the state of your instrument has changed. You will automatically receive a notification if for example a user interaction is required during a run.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.instrument_state"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Helper text": "Choose the state to be monitored", "Slug": "state", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the state change event happened", "description": "The time when the state change event happened", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.instrumentState.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument whose state was changed", "description": "Alias of the instrument whose state was changed", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.instrumentState.InstrumentName", "Type": "String", "Example": "My Instrument"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.instrumentState.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Instrument state\nThe state of the instrument", "description": "The state of the instrument", "details": {"Slug": "instrument_state", "Filter code": "TecanConnect.instrumentState.InstrumentState", "Type": "String", "Example": "Running"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (TecanConnect.instrumentState.InstrumentState !== prevInstrumentState) {\n  var message = \"The state of \" + TecanConnect.instrumentState.InstrumentName + \" has changed to \" + TecanConnect.instrumentState.InstrumentState;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"No change detected\");\n}", "intent": "Check if the instrument state has changed and send a notification with the new state."}
{"original_description": "Set the time of day, and you will get a daily weather report from Weather Underground.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Meta.currentUserTime.hour() < 7 || Meta.currentUserTime.hour() > 22) {\n  Telegram.sendMessage.skip(\"Outside of active hours\")\n} else if (Weather.currentWeatherAtTime.CurrentCondition === \"Rain\") {\n  Telegram.sendMessage.setText(`\"Today's weather: ${Weather.currentWeatherAtTime.TodaysCondition}, High Temp F: ${Weather.currentWeatherAtTime.HighTempFahrenheit}, Low Temp F: ${Weather.currentWeatherAtTime.LowTempFahrenheit}\"`)\n} else {\n  Telegram.sendMessage.setText(`\"Today's weather: ${Weather.currentWeatherAtTime.TodaysCondition}, High Temp C: ${Weather.currentWeatherAtTime.HighTempCelsius}, Low Temp C: ${Weather.currentWeatherAtTime.LowTempCelsius}\"`)\n}", "intent": "Set a daily weather report from Weather Underground based on time of day."}
{"original_description": "Every time you create a new public bookmark, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Diigo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "diigo.new_bookmark_tagged_diigo"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Single tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nThe URL that you bookmarked.", "description": "The URL that you bookmarked.", "details": {"Slug": "Url", "Filter code": "Diigo.newBookmarkTaggedDiigo.Url", "Type": "String", "Example": "http://blog.ifttt.com/"}}, {"section": "Ingredients", "title": "Title\nThe bookmark title, usually the page title at that URL.", "description": "The bookmark title, usually the page title at that URL.", "details": {"Slug": "Title", "Filter code": "Diigo.newBookmarkTaggedDiigo.Title", "Type": "String", "Example": "A blog about ifttt"}}, {"section": "Ingredients", "title": "Tags\nTags comma seperated.", "description": "Tags comma seperated.", "details": {"Slug": "Tags", "Filter code": "Diigo.newBookmarkTaggedDiigo.Tags", "Type": "String", "Example": "cool, web, interface"}}, {"section": "Ingredients", "title": "Description\nThe description you leave on bookmark, blank otherwise.", "description": "The description you leave on bookmark, blank otherwise.", "details": {"Slug": "Description", "Filter code": "Diigo.newBookmarkTaggedDiigo.Description", "Type": "String", "Example": "So cool!"}}, {"section": "Ingredients", "title": "Time\nDate and time you created bookmark.", "description": "Date and time you created bookmark.", "details": {"Slug": "Time", "Filter code": "Diigo.newBookmarkTaggedDiigo.Time", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the necessary ingredients\nvar Url = Diigo.newBookmarkTaggedDiigo.Url;\nvar Title = Diigo.newBookmarkTaggedDiigo.Title;\nvar Tags = Diigo.newBookmarkTaggedDiigo.Tags;\nvar Description = Diigo.newBookmarkTaggedDiigo.Description;\nvar Time = Diigo.newBookmarkTaggedDiigo.Time;\n\n// Set the action fields\nvar name = \"New Public Bookmark\";\nvar zone = \"General\"; // Replace with actual zone value\nvar color = \"White\"; // Replace with actual color value\nvar message = \"New public bookmark: \" + Title;\nvar effect = \"Toggle\"; // Replace with actual effect value\nvar device = \"Das Keyboard Q\"; // Replace with actual device value\n\n// Create the Signal and send it to Das Keyboard\nDaskeyboardq.signals.setName(name);\nDaskeyboardq.signals.setZone(zone);\nDaskeyboardq.signals.setColor(color);\nDaskeyboardq.signals.setMessage(message);\nDaskeyboardq.signals.setEffect(effect);\nDaskeyboardq.signals.setDevice(device);\n\n// Skip if no bookmark created\nif (!Url) {\n  Daskeyboardq.signals.skip(\"No new bookmark created\");\n} else {\n  // Send the Signal to Das Keyboard\n  Daskeyboardq.signals.runAction();\n}", "intent": "Create a new public bookmark on Diigo and send a Signal to Das Keyboard."}
{"original_description": "This will change the WiZ light(s) of your choice to blue whenever the temperature recorded on your Netatmo Weather Station drops below a certain point. Ideal, for example, to set up a \"frost warning\" notification. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var TargetTemperatureC = parseInt(Meta.currentUserTriggerDetails.threshold_value)\nvar MeasuredTemperatureC = Netatmo.temperatureDropsBelow.MeasuredTemperatureC\nif (MeasuredTemperatureC < TargetTemperatureC) {\n  Wiz.turnOn.setMode(\"blue\")\n} else {\n  Wiz.turnOn.skip(\"No temperature drop detected\")\n}", "intent": "Change the WiZ light(s) to blue when the temperature recorded on a Netatmo Weather Station drops below a certain point."}
{"original_description": "Trigger a Noonlight alarm when you press your Kronaby Pusher, and our certified Noonlight dispatchers will automatically send emergency services to your location. False alarm? Cancel anytime with your 4 digit PIN via text or call.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Noonlight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "safetrek.alert", "Filter code method": "Safetrek.alert.skip(string?: reason)", "Runtime method": "runAction(\"safetrek.alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Lat\nText input > Other", "description": "Text input > Other", "details": {"Label": "Latitude", "Slug": "lat", "Required": "true", "Can have default value": "true", "Filter code method": "Safetrek.alert.setLat(string: lat)"}}, {"section": "Action fields", "title": "Lon\nText input > Other", "description": "Text input > Other", "details": {"Label": "Longitude", "Slug": "lon", "Required": "true", "Can have default value": "true", "Filter code method": "Safetrek.alert.setLon(string: lon)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"single\") {\n  var Latitude = Kronaby.pusherPressed.Latitude\n  var Longitude = Kronaby.pusherPressed.Longitude\n  var MapImageUrl = Kronaby.pusherPressed.MapImageUrl\n  \n  Noonlight.alert.setLat(Latitude)\n  Noonlight.alert.setLon(Longitude)\n  Noonlight.alert.runAction()\n  \n} else {\n  Noonlight.alert.skip(\"Invalid press type\")\n}", "intent": "Trigger a Noonlight alarm when the Kronaby Pusher is pressed, with location and press type details, to send emergency services to the user's location."}
{"original_description": "Want to scare intruders away? Or make sure you get up as soon as possible in case something odd is happening? This applet will turn on the WiZ lights of your choice to Daylight mode, full brightness, whenever Noonlight triggers an alarm.", "trigger_channel": "Noonlight", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "safetrek.alert_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Safetrek.alertTriggered.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nLatitude that alarm happened", "description": "Latitude that alarm happened", "details": {"Slug": "latitude", "Filter code": "Safetrek.alertTriggered.Latitude", "Type": "String", "Example": "38.6532135"}}, {"section": "Ingredients", "title": "Longitude\nLongitude that alarm happened", "description": "Longitude that alarm happened", "details": {"Slug": "longitude", "Filter code": "Safetrek.alertTriggered.Longitude", "Type": "String", "Example": "-90.313673"}}, {"section": "Ingredients", "title": "Location map url\nUrl to where the alarm occurred", "description": "Url to where the alarm occurred", "details": {"Slug": "location_map_url", "Filter code": "Safetrek.alertTriggered.LocationMapUrl", "Type": "Web URL", "Example": "https://www.google.com/maps/place/St.+Louis,+MO/@38.6532135,-90.313673,12z"}}, {"section": "Ingredients", "title": "Name\nThe name of the person that triggered the alarm", "description": "The name of the person that triggered the alarm", "details": {"Slug": "name", "Filter code": "Safetrek.alertTriggered.Name", "Type": "String", "Example": "Jane Doe"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Meta.currentUserTime.hour() === 12) { // Check if it's noon\n  Wiz.turnOn(\"Daylight\", \"full\");\n} else {\n  Wiz.turnOn.skip(\"Not noon - skipping action\");\n}", "intent": "When Noonlight triggers an alarm, this applet will turn on the specified WiZ lights in Daylight mode at full brightness."}
{"original_description": "Send E-Mail to trigger@applet.ifttt.com with hashtag #mp3call in the subject. Attach an MP3 file which will be played in the phone call.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.mp3_call_any", "Filter code method": "Woopla.mp3CallAny.skip(string?: reason)", "Runtime method": "runAction(\"woopla.mp3_call_any\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Audio", "description": "Text input > Audio", "details": {"Label": "URL", "Helper text": "Direct URL to an MP3 audio file.", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.mp3CallAny.setUrl(string: url)"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone Number", "Helper text": "The phone number to call. International dialing format. Prefix with +. No zeros. Example: +4917098765432", "Slug": "phone_number", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.mp3CallAny.setPhone Number(string: phone_number)"}}], "filter_code": "if (Email.sendIftttAnEmailTagged.Subject.includes(\"#mp3call\")) {\n  var attachmentUrl = Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl;\n  var phoneNumber = \"your_phone_number\";\n  Woopla.mp3CallAny.setUrl(attachmentUrl);\n  Woopla.mp3CallAny.setPhoneNumber(phoneNumber);\n  WOOPLA.mp3CallAny.runAction();\n} else {\n  Woopla.mp3CallAny.skip(\"No email subject matches #mp3call\");\n}", "intent": "Send an email with a specific subject and attach an MP3 file when an email is received, then use the Woopla phone call action to make a call."}
{"original_description": "This will change the WiZ light(s) of your choice to orange color when your Withings Home raises an air quality alert. A simple and useful way to visualize the alert quickly. \n(Only for WiZ Colors lights)", "trigger_channel": "Withings Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "withingshome.airquality"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which camera?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Date and time\nDate and time air quality alert was triggered by Withings Home.", "description": "Date and time air quality alert was triggered by Withings Home.", "details": {"Slug": "time", "Filter code": "Withingshome.airquality.DateAndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nDevice name as displayed in app settings.", "description": "Device name as displayed in app settings.", "details": {"Slug": "device_name", "Filter code": "Withingshome.airquality.DeviceName", "Type": "String", "Example": "Your Withings Home \"Living Room\" triggered an air quality alert."}}, {"section": "Ingredients", "title": "Air quality level\nAir quality level in ppm.", "description": "Air quality level in ppm.", "details": {"Slug": "value", "Filter code": "Withingshome.airquality.AirQualityLevel", "Type": "String", "Example": "Air quality is bad, level of particles in the air is 3000 ppm"}}, {"section": "Ingredients", "title": "Device mac\nFull mac address.", "description": "Full mac address.", "details": {"Slug": "device_mac", "Filter code": "Withingshome.airquality.DeviceMAC", "Type": "String", "Example": "An air quality alert has been raised on Withings Home \"00:24:E4:2C:2B:2A\""}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Withingshome.airquality.DateAndTime.includes(\"Alert\")) {\n  var entity = \"Your preferred WiZ light(s)\";\n  Wiz.turnOn(entity).setMode(\"Orange\").skip(\"No air quality alert detected\")\n} else {\n  Wiz.turnOn(entity).setMode(\"Orange\")\n}", "intent": "Check if Withings Home raises an air quality alert, and if so, change the WiZ light(s) to orange color. Only applicable for WiZ Colors lights."}
{"original_description": "This will turn on the lights of your choice in Wake-up mode within 15 minutes of the sunrise in your location. Wake up with the sun!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt;\nvar TimeDifference = 15 * 60 * 1000; // 15 minutes in milliseconds\nif (TimeDifference > 0) {\n  setTimeout(() => {\n    var Device = Fanimation.device;\n    if (Device === \"your_device_name\") { // Replace with your device name\n      Fansync.onOff.setDevice(Device).setOn(true);\n    } else {\n      Fansync.onOff.skip(\"No matching device found\");\n    }\n  }, TimeDifference);\n}", "intent": "This automation will turn on the lights of your choice in Wake-up mode within 15 minutes of sunrise in your location."}
{"original_description": "Having trouble sneaking snacks? A visual cue can help — this Applet will turn your LIFX bulb red (or the color of your choice) whenever your fridge is opened. ", "trigger_channel": "GE Appliances Refrigerator", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ge_appliances_refrigerator.refrigerator-door-freshfood-open"}, "trigger_details": [{"section": "Trigger fields", "title": "Applianceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which appliance?", "Slug": "applianceId", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event\nThe appliance event.", "description": "The appliance event.", "details": {"Slug": "event", "Filter code": "GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.Event", "Type": "String", "Example": "refrigerator-door-freshfood-open"}}, {"section": "Ingredients", "title": "Appliance\nThe appliance identifier.", "description": "The appliance identifier.", "details": {"Slug": "applianceId", "Filter code": "GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.Appliance", "Type": "String", "Example": "D828C901A076"}}, {"section": "Ingredients", "title": "Date and time\nThe date and time the event occurred.", "description": "The date and time the event occurred.", "details": {"Slug": "time", "Filter code": "GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.DateAndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.color", "Filter code method": "Lifx.color.skip(string?: reason)", "Runtime method": "runAction(\"lifx.color\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights turn on to the color, even when they are turned off in the app.", "Slug": "color_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.color.setColor If Off(string: color_if_off)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; duration: 12&quot; for red at 30% brightness, 12 second fade. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.color.setAdvanced Options(string: advanced_options)"}}], "filter_code": "function checkFridgeOpen() {\n  if (GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.Event === \"refrigerator-door-freshfood-open\") {\n    var applianceId = GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.Appliance;\n    var color = LIFX.color.setColorIfOff(LIFX.color(color_if_off));\n    var brightness = LIFX.color(brightness);\n    var transitionDuration = LIFX.color(transition_duration);\n    if (advanced_options !== \"\") {\n      LIFX.color.setAdvancedOptions(advanced_options);\n    } else {\n      LIFX.color.runAction(\"lifx.color\", {\"color\": color, \"brightness\": brightness, \"duration\": transitionDuration});\n    }\n  }\n}", "intent": "When the GE Appliances Refrigerator is opened, turn a LIFX bulb to the specified color based on user input."}
{"original_description": "While you're away, help save energy by keeping the lights off. When Honeywell Smart Home Security switches to away mode, Philips Hue lights in your home will automatically turn off.", "trigger_channel": "Honeywell Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "honeywell_lyric.das_away_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your Smart Home Security device", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HoneywellLyric.dasAwayNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Smart home security name\nThe name of the security device being monitored", "description": "The name of the security device being monitored", "details": {"Slug": "device_name", "Filter code": "HoneywellLyric.dasAwayNotification.SmartHomeSecurityName", "Type": "String", "Example": "Home security"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var System = $$system$$\nif (HoneywellLyric.dasAwayNotification.System === System) {\n  var Reason = \"Smart Home Security switched to Away mode\"\n  Hue.turnOffAllHue.skip(Reason)\n}", "intent": "When Honeywell Smart Home Security switches to away mode, turn off all Philips Hue lights."}
{"original_description": "This applet will start a zone for a specified duration every hour", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.start_zone", "Filter code method": "RainMachine.startZone.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.start_zone\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone number?", "Helper text": "The gardening zone number", "Slug": "zone_number", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Time\nDropdown list", "description": "Dropdown list", "details": {"Label": "For how long?", "Helper text": "Duration in minutes.", "Slug": "time", "Required": "true", "Can have default value": "false"}}], "filter_code": "var minutes = $$CheckTime$$\nif (minutes % 60 === 0) {\n  var zoneNumber = $$zone_number$$\n  var duration = $$time$$\n  RainMachine.startZone(zoneNumber, duration)\n} else {\n  RainMachine.startZone.skip(\"Not an hour mark\")\n}", "intent": "This applet will trigger every hour and start a specified zone for a specified duration."}
{"original_description": "Want to read the latest articles on a topic of your choice? This Applet will save your articles in a Google Sheet so you can dig into them at a later date.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var Term = $$Term$$\nif (Term) {\n  var Search = Nytimes.newArticleMatchingSearch({ \"term\": Term })\n  if (Search.articles && Search.articles.length > 0) {\n    var Article = Search.articles[0]\n    var Title = Article.Title\n    var Author = Article.Author\n    var Blurb = Article.Blurb\n    var ArticleUrl = Article.ArticleUrl\n    var ImageUrl = Article.ImageUrl\n    var Source = Article.Source\n    var Section = Article.Section\n    var Keywords = Article.Keywords\n    var PublishedDate = Article.PublishedDate\n    GoogleSheets.appendToGoogleSpreadsheet({\n      \"filename\": $$filename$$,\n      \"formatted_row\": `|${Title}|${Author}|${Blurb}|${ArticleUrl}|${ImageUrl}|${Source}|${Section}|${Keywords}|${PublishedDate}|,\n      \"path\": $$path$$\n    })\n  }\n}", "intent": ""}
{"original_description": "This will change the WiZ light(s) of your choice to orange if your Netatmo Weather Station records a temperature above a certain point. Ideal as a reminder to take extra water for a walk, or close the blinds to keep the heat outside. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Netatmo.temperatureRisesAbove.MeasuredTemperatureF > parseInt(Trigger.threshold_value)) {\n  Wiz.turnOn(entity, \"orange\", Trigger.threshold_value);\n} else {\n  Wiz.turnOn.skip(\"No temperature rise detected\");\n}", "intent": "This automation will trigger when the Netatmo Weather Station records a temperature above a certain point, measured in degrees Fahrenheit. The WiZ light(s) of your choice will change to orange."}
{"original_description": "This Applet will turn on your LinkJapan device when the sun sets in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LinkJapan eHome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkJapan_eHome.powerState", "Filter code method": "LinkJapanEHome.powerState.skip(string?: reason)", "Runtime method": "runAction(\"LinkJapan_eHome.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Helper text": "choose power", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "LinkJapanEHome.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit < 65) { \n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"on\")\n} else {\n  LinkJapanEHome.powerState.skip(\"Temperature is above threshold\")\n}", "intent": "When the sun sets in your location, turn on the LinkJapan device if the temperature is below a certain threshold."}
{"original_description": "This applet informs you if a run has completed. You will automatically receive a notification.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.run_completion_message"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the Run was completed", "description": "The time when the Run was completed", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.runCompletionMessage.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument where the run was completed", "description": "Alias of the instrument where the run was completed", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.runCompletionMessage.InstrumentName", "Type": "String", "Example": "Run Completed Successfully"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.runCompletionMessage.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Run completion message\nThe run completion message", "description": "The run completion message", "details": {"Slug": "run_completion_message", "Filter code": "TecanConnect.runCompletionMessage.RunCompletionMessage", "Type": "String", "Example": "Run Completed Successfully"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (TecanConnect.runCompletionMessage.RunCompletionMessage !== \"\") {\n  IfNotifications.sendNotification(\"The run has completed: \" + TecanConnect.runCompletionMessage.RunCompletionMessage);\n} else {\n  IfNotifications.sendNotification.skip(\"No run completion message available\");\n}", "intent": "This applet checks if the run completion message is available and then sends a notification with the message."}
{"original_description": "Watch your robot clean for you while singing along to your favorite song! Just add a song to 'My Sonos' from your Sonos app, and then choose this song while setting up this applet. Your Sonos speaker will play this song every time your robot starts running! \n\nGot feedback on how to improve this \"DJ Roomba\" integration? Leave us a comment! Need help adding favorites to My Sonos? See here: https://support.sonos.com/s/article/3547", "trigger_channel": "iRobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "irobot.robot_start"}, "trigger_details": [{"section": "Trigger fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nTime the robot started.", "description": "Time the robot started.", "details": {"Slug": "iso_timestamp", "Filter code": "Irobot.robotStart.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Irobot.robotStart.Timestamp > 0) {\n    var favorite = Sonos.favorite;\n    var room = Sonos.room;\n    if (favorite && room) {\n        Sonos.playFavorite(favorite, room);\n    } else {\n        Sonos.playFavorite.skip(\"No favorite or room selected\");\n    }\n}", "intent": "When the robot starts, play a favorite song on Sonos if a favorite is selected and the room is specified."}
{"original_description": "Every time your smart device is unlocked, a signal will be sent to your Das Keyboard Device.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.unlocked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nThe date and time the lock was unlocked.", "description": "The date and time the lock was unlocked.", "details": {"Slug": "UnlockedAt", "Filter code": "SmartthingsV2.unlockedSmartthings.UnlockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.unlockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var UnlockedAt = SmartthingsV2.unlockedSmartthings.UnlockedAt\nvar DeviceName = SmartthingsV2.unlockedSmartthings.DeviceName\n\nif (Device === \"Bedroom lock\") {\n  Daskeyboardq.signals.setName(name)\n  Daskeyboardq.signals.setZone(zone)\n  Daskeyboardq.signals.setColor(color)\n  if (message) {\n    Daskeyboardq.signals.setMessage(message)\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Unsupported device\")\n}", "intent": "This IFTTT automation will send a signal to the Das Keyboard Q device whenever the smart lock is unlocked, with specified details."}
{"original_description": "Set time-based recording schedule for your cameras. It will save your bandwidth and protect your privacy.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Angelcam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "angelcam.stop_recording", "Filter code method": "Angelcam.stopRecording.skip(string?: reason)", "Runtime method": "runAction(\"angelcam.stop_recording\", {})"}, "action_details": [{"section": "Action fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera", "Slug": "camera", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime !== Meta.currentUserTime.format(\"YYYY-MM-DD HH:mm\")) {\n  Angelcam.stopRecording.skip(\"Not the scheduled recording time\")\n} else {\n  var Camera = \"Camera\" // get camera from dropdown list\n  runAction(\"angelcam.stop_recording\", {camera: Camera})\n}", "intent": "Set the camera recording schedule based on the time specified in the trigger. If it is not the specified time, skip the action."}
{"original_description": "This applet will change the setpoint temperature of your AC when the outside temperature drops below a selected temperature.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GE Appliances Window AC", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ge_appliances_wac.wac-set-target-temp", "Filter code method": "GeAppliancesWac.wacSetTargetTemp.skip(string?: reason)", "Runtime method": "runAction(\"ge_appliances_wac.wac-set-target-temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Applianceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which appliance?", "Slug": "applianceId", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Set-target-temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "What temperature?", "Slug": "set-target-temp", "Required": "true", "Can have default value": "false"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (tempFahrenheit < parseFloat(Trigger.temperature)) {\n  GeAppliancesWac.wacSetTargetTemp.setTargetTemp(parseFloat(tempFahrenheit))\n}", "intent": "Check if outside temperature drops below a selected temperature and change the setpoint temperature of your AC."}
{"original_description": "When Wyze Cam detects an anything out of the ordinary, Noonlight will send help to your home address", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.motion_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Motion detected\nMotion detected on your wyze camera.", "description": "Motion detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.motionTrigger.MotionDetected", "Type": "String", "Example": "Motion detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when motion is triggered.", "description": "Time when motion is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.motionTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Noonlight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "safetrek.alert_address", "Filter code method": "Safetrek.alertAddress.skip(string?: reason)", "Runtime method": "runAction(\"safetrek.alert_address\", {})"}, "action_details": [{"section": "Action fields", "title": "Address line 1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Street Address", "Slug": "address_line_1", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Address line 2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Apt, suite, unit, etc.", "Slug": "address_line_2", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "City\nText input > Other", "description": "Text input > Other", "details": {"Label": "City", "Slug": "city", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "State\nText input > Other", "description": "Text input > Other", "details": {"Label": "State", "Slug": "state", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Zip\nText input > Other", "description": "Text input > Other", "details": {"Label": "Zip", "Slug": "zip", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Wyzecam.motionTrigger.MotionDetected) {\n  var TriggerTime = Wyzecam.motionTrigger.TriggerTime;\n  var AddressLine1 = \"\";\n  if (serialize_device_info === \"true\") {\n    // Assuming serialize_device_info is a dropdown list\n    // For simplicity, assume the user selected an option\n    AddressLine1 = \"123 Main St\";\n  }\n  \n  // Check if required fields are filled in\n  if (!AddressLine1 || !city || !state || !zip) {\n    Safetrek.alertAddress.skip(\"Some address fields missing\")\n  } else {\n    var helpMessage = \"Motion detected at \" + TriggerTime + \". Address: \" + AddressLine1 + \", \" + city + \", \" + state + \", \" + zip;\n    Safetrek.alertAddress(helpMessage)\n  }\n}", "intent": "When Wyze Cam detects motion, Noonlight will send help to your home address."}
{"original_description": "This will automatically turn on the WiZ light(s) of your choice whenever a Mi|Home motion sensor detects movement.", "trigger_channel": "Energenie Mi|Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "energenie_mi_home.motion_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Motion sensor subdevice\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which motion sensor?", "Slug": "motion_sensor_subdevice_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "EnergenieMiHome.motionStarted.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Motion sensor name\nThe name of the sensor that detected motion.", "description": "The name of the sensor that detected motion.", "details": {"Slug": "motion_sensor_name", "Filter code": "EnergenieMiHome.motionStarted.MotionSensorName", "Type": "String", "Example": "Motion sensor in my office"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "// Check if it is triggered by a motion sensor\nif (EnergenieMiHome.motionStarted.MotionSensorName) {\n  // Get the entity from the dropdown list\n  var entity = EnergenieMiHome.getDropdownValue(\"motion_sensor_subdevice_id\");\n  \n  // Get the mode and dimming from the dropdown lists\n  var mode = Wiz.turnOn.getDropdownValue(\"mode\");\n  var dimming = Wiz.turnOn.getDropdownValue(\"dimming\");\n\n  // Run the action with the chosen parameters\n  Wiz.turnOn.runAction(entity, mode, dimming).skip();\n}", "intent": "Turn on WiZ lights when a Mi|Home motion sensor detects movement."}
{"original_description": "Maybe you're having a great family moment and you want a quick way to start recording it so you don't miss anything. Maybe you suspect something fishy and want a feed from what's going on in your room. Maybe you want to discretely start video recording without your partner noticing. Don't do that. Whatever your intentions, Flic is a small and discrete button and with this Applet, a click of a Flic will get Arlo in recording mode. It's quick, simple and smartphone-free. ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.record", "Filter code method": "Arlo.record.skip(string?: reason)", "Runtime method": "runAction(\"arlo.record\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "How long?", "Helper text": "How long Arlo will record in seconds.", "Slug": "duration", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === \"click\" || Flic.click.ClickType === \"hold\") {\n  Arlo.record(Flic.click.Latitude, Flic.click.Longitude, { \n    reason: \"Recording triggered by Flic button press\", \n    device_name: $$device_name$$, \n    duration: $$duration$$ \n  })  \n} else {\n  Arlo.record.skip(\"Invalid click type\")\n}", "intent": "Trigger a Flic button press to start recording with Arlo. The code should check if the click type is 'click' or 'hold', and if not, skip the action."}
{"original_description": "This will change the WiZ light(s) of your choice to purple whenever your Netatmo Rain Gauge detects rain. (Only for WiZ Colors lights)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"rain detected\") {\n  Wiz.turnOn.setMode(\"purple\").setDimming(\"100\");\n} else {\n  Wiz.turnOn.skip(\"No rain detected\");\n}", "intent": "This automation will change the WiZ light(s) of your choice to purple whenever Netatmo Rain Gauge detects rain, for WiZ Colors lights only."}
{"original_description": "Color of the Lexi light will change according to what you have set at the specific time of the day that you have set.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceTurnOnAll", "Filter code method": "Lexi.deviceTurnOnAll.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceTurnOnAll\", {})"}, "action_details": [{"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temp", "Required": "true", "Can have default value": "true"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime === Time) {\n  var Brightness = GetTriggerValue(\"brightness\")\n  var Color = GetTriggerValue(\"color\")\n  var Temp = GetTriggerValue(\"temp\")\n  if (Temp === \"0%\") {\n    Lexi.deviceTurnOnAll.skip(\"Temperature is not set to 0% for color application\")\n  } else {\n    Lexi.deviceTurnOnAll.runAction({\"brightness\": Brightness, \"color\": Color})\n  }\n}", "intent": "The automation will check the current time and if it matches the set time in the trigger, it will turn on the Lexi light with a specific color according to the selected brightness and temperature."}
{"original_description": "Have your lights automatically change colour from green to red and purple when the air quality in your home changes. This applet will automatically set the color of your Philips Hue lights.", "trigger_channel": "Kaiterra", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kaiterra.laseregg_aqi"}, "trigger_details": [{"section": "Trigger fields", "title": "Device udid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to monitor?", "Slug": "device_udid", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Kaiterra.lasereggAqi.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Aqi\nCurrent AQI", "description": "Current AQI", "details": {"Slug": "aqi", "Filter code": "Kaiterra.lasereggAqi.Aqi", "Type": "String", "Example": "10"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "let aqi = parseInt(Kaiterra.lasereggAqi.Aqi)\nif (aqi >= 0 && aqi <= 50) {\n  Hue.setColorAllHue.setColor(\"25aa68\") // Green\n} else if (aqi > 50 && aqi <= 100) {\n  Hue.setColorAllHue.setColor(\"ff9900\") // Orange\n} else if (aqi > 100 && aqi <= 150) {\n  Hue.setColorAllHue.setColor(\"ff6600\") // Red\n} else if (aqi > 150 && aqi <= 200) {\n  Hue.setColorAllHue.setColor(\"e40000\") // Deep Red\n} else if (aqi > 200 && aqi <= 300) {\n  HueSetColorAllHue.setColor(\"ae0043\") // Purple\n} else {\n  Hue.setColorAllHue.setColor(\"6c003b\")   // Dark Purple\n}", "intent": "Monitor Kaiterra air quality sensor and set Philips Hue lights to corresponding colors based on AQI levels.", "filter_code_old": "let aqi = parseInt(Kaiterra.lasereggAqi.Aqi)\n\nif (aqi >= 0 && aqi <= 50) {\n  Hue.setColorAllHue.setColor(\"25aa68\")\n} else if (aqi > 50 && aqi <= 100) {\n  Hue.setColorAllHue.setColor(\"ff9900\")\n} else if (aqi > 100 && aqi <= 150) {\n  Hue.setColorAllHue.setColor(\"ff6600\")\n} else if (aqi > 150 && aqi <= 200) {\n  Hue.setColorAllHue.setColor(\"e40000\")\n} else if (aqi > 200 && aqi <= 300) {\n  Hue.setColorAllHue.setColor(\"ae0043\")\n} else {\n  Hue.setColorAllHue.setColor(\"6c003b\")   \n}\n\n"}
{"original_description": "Toggle an Insight switch on/off.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_insightToggleDiscrete", "Filter code method": "WemoInsightSwitch.attributeInsightToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_insightToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var MacAddress = \"KNC1-W-00000088\"\nif (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Pattern === \"***\") {\n  if (Knocki.knocki.CreatedAt > Meta.currentUserTime.addHours(2)) {\n    WemoInsightSwitch.attributeInsightToggleDiscrete.runAction(\"wemo_insight_switch.attribute_insightToggleDiscrete\", { macaddress: MacAddress })\n  } else {\n    WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Too early\")\n  }\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Invalid gesture or pattern\")\n}", "intent": "Toggle an Insight switch on/off based on the Knocki trigger."}
{"original_description": "Quick and easy way to control your SkylinkNet light switch", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.dev_on", "Filter code method": "Skylinknet.devOn.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.dev_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub dev\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "hub_dev", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Skylinknet.devOn === undefined) {\n  Skylinknet.devOn.skip(\"Device is not available\")\n}\nvar HubDev = actionDetails.hub_dev\nvar Key = actionDetails.key\nrunAction(\"skylinknet.dev_on\", { hub_dev: HubDev, key: Key })", "intent": "Control SkylinkNet light switch based on button press."}
{"original_description": "Quickly toggle your WeMo Light Switch on and off with this Button Widget. Note: IFTTT app is needed for this Applet.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsToggleDiscrete", "Filter code method": "WemoLightSwitch.attributeLsToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var reason = \"Button press\"\nif (DoButton.doButtonNewCommandCommon.ShareURL) {\n  WemoLightSwitch.attributeLsToggleDiscrete(\"macaddress\", \"toggle\")\n} else {\n  WemoLightSwitch.attributeLsToggleDiscrete.skip(reason)\n}", "intent": "Toggle the WeMo Light Switch on and off when a Button Widget is pressed."}
{"original_description": "Set the time everyday you would like to have your WeMo light switch automatically turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsOffDiscrete", "Filter code method": "WemoLightSwitch.attributeLsOffDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsOffDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo light switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the user-defined time\nvar Time = $$time$$;\nif (Time !== \"\") {\n  // Check if it's the correct hour and skip if not\n  var CurrentHour = Meta.currentUserTime.hour();\n  if (CurrentHour !== parseInt(Time.split(\":\")[0])) {\n    WemoLightSwitch.attributeLsOffDiscrete.skip(\"Not the specified time\");\n  } else {\n    // Run the action to turn off the light switch\n    runAction(\"wemo_light_switch.attribute_lsOffDiscrete\", {});\n  }\n} else {\n  // No time set, skip the action\n  WemoLightSwitch.attributeLsOffDiscrete.skip(\"No time specified\");\n}", "intent": "Automatically turn off the WeMo light switch at a specified time every day."}
{"original_description": "Wake up with the sun by having your WeMo dimmer turn on at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wemo Dimmer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_dimmer.attribute_dimmerToggleDiscrete", "Filter code method": "WemoDimmer.attributeDimmerToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_dimmer.attribute_dimmerToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Dimmer?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nif (Meta.currentUserTime.hour() >= SunriseAt.getHours() && Meta.currentUserTime.hour() <= SunriseAt.getHours()) {\n  WemoDimmer.attributeDimmerToggleDiscrete(\"Your Dimmer Mac Address\")\n} else {\n  WemoDimmer.attributeDimmerToggleDiscrete.skip(\"Not sunrise time\")\n}", "intent": "Wake up with the sun by having your WeMo dimmer turn on at sunrise."}
{"original_description": "Toggle WeMo light switch on/off.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsToggleDiscrete", "Filter code method": "WemoLightSwitch.attributeLsToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Pattern === \"***\") {\n  WemoLightSwitch.attributeLsToggleDiscrete(\"macaddress\", \"on\");\n} else if (Knocki.knocki.Gesture !== \"Triple Knock\" || Knocki.knocki.Pattern !== \"***\") {\n  WemoLightSwitch.attributeLsToggleDiscrete.skip(\"Invalid gesture or pattern detected\");\n}", "intent": "Toggle the WeMo light switch on/off when a specific gesture pattern is detected."}
{"original_description": "Brighten the lights connected to your WeMo Dimmer at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wemo Dimmer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_dimmer.attribute_dimmerBrightnessChangeDiscrete", "Filter code method": "WemoDimmer.attributeDimmerBrightnessChangeDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_dimmer.attribute_dimmerBrightnessChangeDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Dimmer?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness Level", "Helper text": "Brightness Level", "Slug": "subType", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Meta.currentUserTime.hour() <= Weather.sunSets.SunsetAt.getHours()) {\n  WemoDimmer.attributeDimmerBrightnessChangeDiscrete(\"bright\", \"Macaddress\")\n}", "intent": "Brighten the lights connected to your WeMo Dimmer at sunset."}
{"original_description": "Turn on WeMo light switch.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsOnDiscrete", "Filter code method": "WemoLightSwitch.attributeLsOnDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsOnDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo light switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  WemoLightSwitch.attributeLsOnDiscrete(\"KNC1-W-00000088\", \"LS ON\")\n}", "intent": "Turn on the WeMo light switch based on a Knocki gesture."}
{"original_description": "At sunrise of your location, turn on/off 1-channel switch or plug. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt\nif (Weather.sunRises.Condition === \"Sunny\") {\n  var Device = \"Your device name\"\n  var OnOff = \"on\" // Set to \"off\" if you want to turn it off instead\n  Ewelink.lightSwitchAction.setOnoffActQuery(OnOff)\n  .then(function() {\n    console.log(\"Light switch action executed successfully\")\n  })\n  .catch(function(error) {\n    console.error(\"Error executing light switch action: \", error)\n  })\n} else {\n  Ewelink.lightSwitchAction.skip(\"Not a sunny day, skipping the action\")\n}", "intent": "At sunrise, check if it is a sunny day at your location and turn on the 1-channel switch or plug."}
{"original_description": "Best for turning on an outdoor or porch light at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Hager IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hager_iot.switchon", "Filter code method": "HagerIot.switchon.skip(string?: reason)", "Runtime method": "runAction(\"hager_iot.switchon\", {})"}, "action_details": [{"section": "Action fields", "title": "Cid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "cid", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.Condition !== \"Rain\" && Weather.sunSets.SunsetAt > Meta.currentUserTime.now()) {\n  HagerIot.switchon(\"cid\", \"Turning on outdoor light at sunset\")\n} else {\n  HagerIot.switchon.skip(\"Raining or not yet sunset\")\n}", "intent": "Turn on the outdoor/porch light at sunset when the weather is not raining."}
{"original_description": "Turn on an Insight switch.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_insightOnDiscrete", "Filter code method": "WemoInsightSwitch.attributeInsightOnDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_insightOnDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.CreatedAt === Meta.currentUserTime.format(\"YYYY-MM-DDTHH:mm:ss\")) {\n  WemoInsightSwitch.attributeInsightOnDiscrete(WemoInsightSwitch.getMacaddress());\n}", "intent": "When a Knocki trigger is activated, check if the created_at time matches the current time, and if so, turn on the WeMo Insight Switch with the corresponding macaddress."}
{"original_description": "Turn off WeMo light switch.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Light Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_light_switch.attribute_lsOffDiscrete", "Filter code method": "WemoLightSwitch.attributeLsOffDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_light_switch.attribute_lsOffDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light switch?", "Helper text": "Name of your WeMo light switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "const Macaddress = event.macaddress\nif (event.device === Macaddress && !WemoLightSwitch.attributeLsOffDiscrete()) {\n  WemoLightSwitch.attributeLsOffDiscrete.skip(\"Device is already turned off\")\n} else {\n  WemoLightSwitch.attributeLsOffDiscrete()\n}", "intent": "When a Knocki gesture is recognized, turn off the specified WeMo light switch if the device ID matches and it is not already off."}
{"original_description": "Best for turning off an outdoor or porch light when the sun rises.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Hager IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hager_iot.switchoff", "Filter code method": "HagerIot.switchoff.skip(string?: reason)", "Runtime method": "runAction(\"hager_iot.switchoff\", {})"}, "action_details": [{"section": "Action fields", "title": "Cid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "cid", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt\nif (Sunrise < Meta.currentUserTime.now()) {\n  if (Weather.temp_fahrenheit > 72 || Weather.temp_celsius > 22) { // Check if temperature is above a certain threshold\n    HagerIot.switchoff.skip(\"Temperature is too high\")\n  } else if (Weather.condition === \"Rain\" || Weather.condition_image_url !== \"\") {\n    HagerIot.switchoff.skip(\"Not sunny or rainy condition\")\n  } else {\n    HagerIot.switchoff()\n  }\n} else {\n  // Skip the action when the sun hasn't risen yet\n  HagerIot.switchoff.skip(\"Sun has not risen yet\")\n}", "intent": "Automate the Hager IoT switch off action when the sun rises."}
{"original_description": "Switches on the Philips Hue light you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n  if (Apilio.iftttActionReports.ApilioValue1 === \"Green\" && Apilio.iftttActionReports.ApilioValue2 === \"Blue\" && Apilio.iftttActionReports.ApilioValue3 === \"Red\") {\n    Hue.turnOffAllHue.skip(\"Invalid values\")\n  } else {\n    var lights = [\"$$lights$$$\"]\n    for (var i = 0; i < lights.length; i++) {\n      Hue.turnOnHueLight(lights[i])\n    }\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Invalid event name\")\n}", "intent": "Switches on the Philips Hue light you select when Apilio triggers the action you specify, based on Apilio values and event name."}
{"original_description": "Toggle your WeMo Insight Switch on and of by pressing the pusher on your Kronaby watch.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_insightToggleDiscrete", "Filter code method": "WemoInsightSwitch.attributeInsightToggleDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_insightToggleDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"single\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete(\"on\")\n} else if (Kronaby.pusherPressed.PressType === \"double\" || Kronaby.pusherPressed.PressType === \"triple\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete(\"off\", \"Multiple press detected\")\n}", "intent": "Toggle the WeMo Insight Switch on and off based on the Kronaby pusher press type."}
{"original_description": "Switches off the Philips Hue light you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get Apilio trigger details\nvar IftttActionIdentifier = $$ifttt_action_identifier$$;\nvar CreatedAt = new Date(Apilio.iftttActionReports.CreatedAt);\nvar EventName = $$ifttt_action_name$$;\n\n// Check if it's nighttime (using a simple example)\nif (CreatedAt.getHours() < 7 || CreatedAt.getHours() > 22) {\n  // Get the selected light(s)\n  var Lights = $$lights$$;\n  \n  // Skip the action if no lights are selected\n  if (!Lights.length) {\n    Hue.turnOffAllHue.skip(\"No lights selected\");\n  }\n  \n  // Switch off the light(s)\n  for (var i = 0; i < Lights.length; i++) {\n    Hue.turnOffAllHue(Lights[i], \"Switching off at night\");\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Not nighttime\");\n}", "intent": "Switches off the selected Philips Hue light when Apilio triggers an action."}
{"original_description": "Use the button widget as a remote control for your home, turning on or off lights, coffee machines, fans, or anything else. This Applet requires special hardware, the SwitchBot and the SwitchBot Hub.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.press_bot", "Filter code method": "Switchbot.pressBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.press_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\nvar LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nvar LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\nif (Latitude && Longitude) {\n  Switchbot.pressBot.skip(\"No location specified\")\n} else {\n  var chosenDevice = action_details[0].chose_a_device\n  if (chosenDevice === \"\") {\n    Switchbot.pressBot.skip(\"No device chosen\")\n  } else {\n    // TO DO: Implement the actual action to be performed based on the chosen device\n    // For example, for a light switch:\n    // Switchbot.pressBot.runAction({ \"device\": chosenDevice, \"action\": \"toggle\" })\n  }\n}", "intent": "This Applet uses the Button widget as a remote control for your home, turning on or off lights, coffee machines, fans, or anything else."}
{"original_description": "Turn on your lights when your WeMo detector senses motion.", "trigger_channel": "WeMo Motion", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_motion.attribute_MOTION_G"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which motion device?", "Helper text": "Name of Your WeMo motion device.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Quiet period", "Helper text": "Quiet period after last motion event.", "Slug": "subType", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoMotion.attributeMOTIONG.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sensor name\nThe name of the WeMo sensor device.", "description": "The name of the WeMo sensor device.", "details": {"Slug": "device_name", "Filter code": "WemoMotion.attributeMOTIONG.SensorName", "Type": "String", "Example": "Kitchen sensor"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Check for quiet period\nif (trigger.subType === \"quiet\") {\n  // Get the time of the last motion event\n  var createdAt = new Date(WemoMotion.attributeMOTIONG.CreatedAt);\n  // Calculate the quiet period end time\n  var quietPeriodEnd = createdAt.getTime() + (1000 * 60 * 5); // 5 minutes\n\n  // Check if there was a recent motion event within the quiet period\n  if (new Date().getTime() > quietPeriodEnd) {\n    // Turn on the Kasa device\n    Kasa.turnOn(\"Kitchen light\").then(() => {\n      console.log(\"Kasa device turned on\");\n    }).catch((error) => {\n      console.error(\"Error turning on Kasa device:\", error);\n    });\n  } else {\n    // Skip the action\n    Kasa.turnOn.skip(\"No recent motion event detected during quiet period\");\n  }\n} else {\n  // If it's not quiet period, skip the action\n  Kasa.turnOn.skip(\"Not in quiet period\");\n}", "intent": "When the WeMo motion sensor detects motion, check if it is quiet period or not. If it's quiet period and there was a recent motion event, turn on the Kasa device. Otherwise, skip the action."}
{"original_description": "Use the leaving home detection of your EasyControl of Bosch to switch off your Hue lights.", "trigger_channel": "EasyControl of Bosch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "easycontrol_bosch.away_mode_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Deviceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EasyControl?", "Helper text": "Select your Easy Control. If you have more than one Easy Control connected the serial numbers will be listed here.", "Slug": "deviceId", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "EasycontrolBosch.awayModeOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event text\nThis is the event text created for you.", "description": "This is the event text created for you.", "details": {"Slug": "event_text", "Filter code": "EasycontrolBosch.awayModeOn.EventText", "Type": "String", "Example": "Away mode"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (EasycontrolBosch.awayModeOn.CreatedAt >= new Date() && EasycontrolBosch.awayModeOn.EventText === \"Away mode\") {\n  if (deviceId === \"Your deviceId here\" || deviceId === \"Another deviceId here\") { // Add more device IDs as needed\n    Hue.turnOffAllHue.skip(\"No lights to turn off\")\n  } else {\n    var lights = [\"Your Light1\", \"Your Light2\", ...] // Add light names as needed\n    if (lights.includes(EasycontrolBosch.awayModeOn.DeviceId)) {\n      Hue.turnOffAllHue()\n    } else {\n      Hue.turnOffAllHue.skip(\"No matching device found\")\n    }\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Not away mode detected\")\n}", "intent": "Trigger the action to turn off all Philips Hue lights when EasyControl of Bosch detects leaving home."}
{"original_description": "Use the coming home detection of EasyControl of Bosch to switch on your Hue lights.", "trigger_channel": "EasyControl of Bosch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "easycontrol_bosch.home_mode_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Deviceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EasyControl?", "Helper text": "Select your Easy Control. If you have more than one Easy Control connected the serial numbers will be listed here.", "Slug": "deviceId", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "EasycontrolBosch.homeModeOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event text\nThis is the event text created for you.", "description": "This is the event text created for you.", "details": {"Slug": "event_text", "Filter code": "EasycontrolBosch.homeModeOn.EventText", "Type": "String", "Example": "Home mode"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (EasycontrolBosch.homeModeOn.CreatedAt >= Meta.currentUserTime.now()) {\n  if (deviceId === \"your_device_id\") { // Replace with actual deviceId\n    Hue.turnOffAllHue.skip(\"Not at home\")\n  } else {\n    Hue.turnOffAllHue()\n  }\n}", "intent": "When EasyControl of Bosch detects the user is home, turn off all Philips Hue lights."}
{"original_description": "IFTTT経由で「SwitchBot」を押します。該当のウィジェットも作ることができます。", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.press_bot", "Filter code method": "Switchbot.pressBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.press_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "const Hour = Meta.currentUserTime.hour()\nif (Hour < 7 || Hour > 22) {\n  Switchbot.pressBot.skip(\"Outside of active hours\")\n} else {\n  var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\n  var Latitude = DoButton.doButtonNewCommandCommon.Latitude\n  var Longitude = DoButton.doButtonNewCommandCommon.Longitude\n  var LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\n  var LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\n  var OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n  \n  Switchbot.pressBot(\"Share URL: \" + ShareURL)\n}", "intent": "When the button widget is pressed, check if it's during a specific time range and skip the action accordingly. If not, use the SwitchBot API to press the bot."}
{"original_description": "Turn on/off 1-channel switch/plug when the temperature reaches a preset value. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (tempFahrenheit <= 72 && degrees_type === \"F\") {\n  Ewelink.lightSwitchAction.skip(\"Not below 72°F\")\n} else if (degrees_type !== \"F\" || tempFahrenheit > 72) {\n  var reason = \"Invalid temperature or degrees type\"\n  Ewelink.lightSwitchAction.skip(reason)\n}", "intent": "Turn on/off 1-channel switch/plug when the temperature reaches a preset value."}
{"original_description": "Switches on the TP-Link Kasa device you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  Kasa.turnOn(\"device\", { reason: \"No reason provided\"})\n} else {\n  Kasa.turnOn.skip(\"Not during run_only_at_nighttime or not Green\")\n}", "intent": "When Apilio triggers the action, check if it is during run_only_at_nighttime and if custom_value_1 equals Green, otherwise skip turning on the Kasa device."}
{"original_description": "Switches off the TP-Link Kasa device you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Device = \"your_device_name\" // Set your Kasa device name here\nif (Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  if (Apilio.iftttActionReports.ApilioValue2 === \"Blue\") {\n    Kasa.turnOff(Device, \"Condition met: Green and Blue\")\n  } else {\n    Kasa.turnOff.skip(\"Condition not met: Green but not Blue\")\n  }\n} else {\n  Kasa.turnOff.skip(\"Condition not met: Not Green\")\n}", "intent": "This IFTTT automation will trigger when Apilio receives an event, then it checks the condition based on the values received from Apilio and finally turns off a selected Kasa device."}
{"original_description": "IFTTT経由で「SwitchBot」をオフにします。該当のウィジェットも作ることができます。", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_off_bot", "Filter code method": "Switchbot.turnOffBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_off_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL) {\n  var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\n  var Latitude = DoButton.doButtonNewCommandCommon.Latitude\n  var Longitude = DoButton.doButtonNewCommandCommon.Longitude\n  var LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\n  var LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\n  var OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n  \n  if (Latitude && Longitude) {\n    var LocationMapImageURL = `http://maps.google.com/maps/api/staticmap?center=${Latitude},${Longitude}&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red|${Latitude},${Longitude}`\n  }\n  \n  if (!Switchbot.isOff) {\n    Switchbot.turnOffBot('Button pressed at ' + OccurredAt)\n  } else {\n    Switchbot.turnOffBot.skip(\"Already switched off\")\n  }\n}", "intent": "When the Button widget is pressed, check if it's not already switched off. If so, turn off SwitchBot."}
{"original_description": "Tap a button on your mobile device to turn on a Hubitat light, switch, etc.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_on", "Filter code method": "Hubitat.actionOn.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") { \n  Hubitat.actionOn(device, 'turn_on');\n} else {  \n  Hubitat.actionOn.skip(\"No rain forecasted\")\n}", "intent": "When a button on a mobile device is pressed, check if it is a weekday and if it is raining, otherwise skip the action."}
{"original_description": "IFTTT経由で「SwitchBot」をオンにします。該当のウィジェットも作ることができます。", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_on_bot", "Filter code method": "Switchbot.turnOnBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_on_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude\nif (latitude >= 37.7 && latitude <= 37.9 && longitude >= -122.4 && longitude <= -122.3) {\n  Switchbot.turnOnBot(chose_a_device)\n} else {\n  Switchbot.turnOnBot.skip(\"Location is not within the allowed range\")\n}", "intent": "When the Button widget is pressed, check if the latitude and longitude are within a specific range. If they are, turn on SwitchBot using the chosen device."}
{"original_description": "Combine your TP-Link bulbs with other brands by turning them on and off synchronously", "trigger_channel": "WeMo Lighting", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_lighting.capability_turnOn"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Wemo led name\nName of the WeMo Light.", "description": "Name of the WeMo Light.", "details": {"Slug": "device_name", "Filter code": "WemoLighting.capabilityTurnOn.WemoLEDName", "Type": "String", "Example": "Drawing room bulb"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoLighting.capabilityTurnOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "function combineOnOff() {\n  const WemoLEDName = WemoLighting.capabilityTurnOn.WemoLEDName;\n  const CreatedAt = WemoLighting.capabilityTurnOn.CreatedAt;\n  \n  // Check if the WeMo light exists\n  if (!WemoLEDName) {\n    Kasa.turnOn.skip(\"No Wemo LED name provided\");\n  }\n  \n  // Check if it's a valid created time\n  else if (!createdAt.isValidDateWithTime()) {\n    Kasa.turnOn.skip(\"Invalid created at date and time\");\n  } \n  \n  // If all checks pass, turn on the selected TP-Link bulb(s)\n  else {\n    Kasa.turnOn(WemoLEDName);\n  }\n}", "intent": "Combine TP-Link bulbs with other brands by turning them on and off synchronously."}
{"original_description": "Tap a button on your mobile device to turn off a Hubitat light, switch, alarm, etc.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_off", "Filter code method": "Hubitat.actionOff.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Device = Hubitat.actionDetails.device\nif (Device === \"light\" || Device === \"switch\") {\n  Hubitat.actionOff.skip(\"Button press is not intended for lights or switches\")\n} else {\n  // Code to turn off the device\n}", "intent": "When the Button widget is pressed, check if a Hubitat light or switch needs to be turned off. If yes, use the Filter code method from action_developer_info to skip the action with a reason."}
{"original_description": "Call our trigger hotline to turn on your lights.", "trigger_channel": "woopla phone calls", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "woopla.trigger_call"}, "trigger_details": [{"section": "Trigger fields", "title": "Trigger code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Enter a 3-digit code", "Helper text": "Anything from 000 to 999 is fine.", "Slug": "trigger_code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Woopla.triggerCall.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Phone number\nYour phone number used for this call.", "description": "Your phone number used for this call.", "details": {"Slug": "phone_number", "Filter code": "Woopla.triggerCall.PhoneNumber", "Type": "String", "Example": "+49203987654321"}}, {"section": "Ingredients", "title": "Called number\nThe phone number of our trigger hotline used for this call.", "description": "The phone number of our trigger hotline used for this call.", "details": {"Slug": "called_number", "Filter code": "Woopla.triggerCall.CalledNumber", "Type": "String", "Example": "+16282222790"}}, {"section": "Ingredients", "title": "Trigger code\nThe 3-digit trigger code entered during the call.", "description": "The 3-digit trigger code entered during the call.", "details": {"Slug": "trigger_code", "Filter code": "Woopla.triggerCall.TriggerCode", "Type": "String", "Example": "123"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "function filterCode(trigger_call) {\n  if (!trigger_call TriggerCode || parseInt(trigger_call.TriggerCode) < 100 || parseInt(trigger_call.TriggerCode) > 999) {\n    Hue.turnOffAllHue.skip(\"Invalid trigger code\")\n  } else if (trigger_call.CreatedAt.getHours() >= 7 && trigger_call.CreatedAt.getHours() <= 22) { // Check if it is within active hours\n    Hue.turnOffAllHue()\n  } else {\n    Hue.turnOffAllHue.skip(\"Outside of active hours - skipping action\")\n  }\n}", "intent": "Automatically turn off all Philips Hue lights when receiving a phone call from our trigger hotline with a valid 3-digit trigger code."}
{"original_description": "Turn on/off an eWeLink switch (1 channel) when the water temperature raises above or equal to the configured setpoint.", "trigger_channel": "Blue Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "blueconnect.autom_temp_higheq"}, "trigger_details": [{"section": "Trigger fields", "title": "Swimming pool\nDropdown list", "description": "Dropdown list", "details": {"Label": "Swimming pool", "Slug": "swimming_pool_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Temperature celsius\nLast temperature value measured. Unit: celsius degree.", "description": "Last temperature value measured. Unit: celsius degree.", "details": {"Slug": "current_temperature_celsius", "Filter code": "Blueconnect.automTempHigheq.TemperatureCelsius", "Type": "String", "Example": "26.7"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nLast temperature value measured. Unit: fahrenheit degree.", "description": "Last temperature value measured. Unit: fahrenheit degree.", "details": {"Slug": "current_temperature_fahrenheit", "Filter code": "Blueconnect.automTempHigheq.TemperatureFahrenheit", "Type": "String", "Example": "77.8"}}, {"section": "Ingredients", "title": "Temperature celsius target\nAutomation setpoint as configured in the app. Unit: celsius degree.", "description": "Automation setpoint as configured in the app. Unit: celsius degree.", "details": {"Slug": "target_temperature_celsius", "Filter code": "Blueconnect.automTempHigheq.TemperatureCelsiusTarget", "Type": "String", "Example": "27.0"}}, {"section": "Ingredients", "title": "Temperature fahrenheit target\nSetpoint as configured in the app. Unit: fahrenheit degree.", "description": "Setpoint as configured in the app. Unit: fahrenheit degree.", "details": {"Slug": "target_temperature_fahrenheit", "Filter code": "Blueconnect.automTempHigheq.TemperatureFahrenheitTarget", "Type": "String", "Example": "80"}}, {"section": "Ingredients", "title": "Temperature celsius delta\nTemperatureCelsiusTarget - TemperatureCelsius", "description": "TemperatureCelsiusTarget - TemperatureCelsius", "details": {"Slug": "delta_temperature_celsius", "Filter code": "Blueconnect.automTempHigheq.TemperatureCelsiusDelta", "Type": "String", "Example": "-2.7"}}, {"section": "Ingredients", "title": "Temperature fahrenheit delta\nTemperatureFahrenheitTarget - TemperatureFahrenheit", "description": "TemperatureFahrenheitTarget - TemperatureFahrenheit", "details": {"Slug": "delta_temperature_fahrenheit", "Filter code": "Blueconnect.automTempHigheq.TemperatureFahrenheitDelta", "Type": "String", "Example": "-3.6"}}, {"section": "Ingredients", "title": "Is repetition\nWhether this trigger is the repetition of the previous one.", "description": "Whether this trigger is the repetition of the previous one.", "details": {"Slug": "is_repetition", "Filter code": "Blueconnect.automTempHigheq.IsRepetition", "Type": "String", "Example": "true"}}, {"section": "Ingredients", "title": "Analyzed at\nDate and time analysis was performed. Format: iso8601", "description": "Date and time analysis was performed. Format: iso8601", "details": {"Slug": "generated_at_iso8601", "Filter code": "Blueconnect.automTempHigheq.AnalyzedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Analyzed at localized mmddyyyy\nDate and time analysis was performed. Format: mm/dd/yyyy. Your IFTTT timezone.", "description": "Date and time analysis was performed. Format: mm/dd/yyyy. Your IFTTT timezone.", "details": {"Slug": "generated_at_localized_mmddyyyy", "Filter code": "Blueconnect.automTempHigheq.AnalyzedAtLocalizedMmddyyyy", "Type": "String", "Example": "01/14/2019 11:33:55"}}, {"section": "Ingredients", "title": "Analyzed at localized ddmmyyyy\nDate and time analysis was performed. Format: dd/mm/yyyy. Your IFTTT timezone.", "description": "Date and time analysis was performed. Format: dd/mm/yyyy. Your IFTTT timezone.", "details": {"Slug": "generated_at_localized_ddmmyyyy", "Filter code": "Blueconnect.automTempHigheq.AnalyzedAtLocalizedDdmmyyyy", "Type": "String", "Example": "14/01/2018 16:02:33"}}, {"section": "Ingredients", "title": "Since datetime\nDate and time of the first measurement >= setpoint. Format: iso8601", "description": "Date and time of the first measurement >= setpoint. Format: iso8601", "details": {"Slug": "exist_since_iso8601", "Filter code": "Blueconnect.automTempHigheq.SinceDatetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Since datetime localized ddmmyyyy\nDate and time of the first measurement >= setpoint. Format: dd/mm/yyyy. Your IFTTT timezone.", "description": "Date and time of the first measurement >= setpoint. Format: dd/mm/yyyy. Your IFTTT timezone.", "details": {"Slug": "exist_since_localized_ddmmyyyy", "Filter code": "Blueconnect.automTempHigheq.SinceDatetimeLocalizedDdmmyyyy", "Type": "String", "Example": "14/01/2019 13:57:32"}}, {"section": "Ingredients", "title": "Since datetime localized mmddyyyy\nDate and time of the first measurement >= setpoint. Format: mm/dd/yyyy. Your IFTTT timezone.", "description": "Date and time of the first measurement >= setpoint. Format: mm/dd/yyyy. Your IFTTT timezone.", "details": {"Slug": "exist_since_localized_mmddyyyy", "Filter code": "Blueconnect.automTempHigheq.SinceDatetimeLocalizedMmddyyyy", "Type": "String", "Example": "01/14/2019 13:57:32"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (Blueconnect.automTempHigheq.TemperatureCelsius >= Blueconnect.automTempHigheq.TemperatureCelsiusTarget) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"Turn on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Temperature is below setpoint\");\n}", "intent": "Turn on an eWeLink switch (1 channel) when the water temperature raises above or equal to the configured setpoint."}
{"original_description": "Use with an abode light switch to turn outside lights off after each day's sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.turn_off_switch", "Filter code method": "Abode.turnOffSwitch.skip(string?: reason)", "Runtime method": "runAction(\"abode.turn_off_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Select switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Slug": "select_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Abode.turnOffSwitch.skip(\"Outside lights should be turned off\")) {\n  var SunriseAt = Weather.sunRises.SunriseAt\n  var IsSunset = new Date() >= new Date(SunriseAt)\n  if (!IsSunset) {\n    Abode.turn_off_switch()\n  }\n}", "intent": "Use with an Abode light switch to turn outside lights off after each day's sunrise."}
{"original_description": "Turns on or off the eWeLink 1-Channel Switch of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n  if (Apilio.iftttActionReports.ApilioValue3 === \"Red\") {\n    Ewelink.lightSwitchAction.skip(\"No action required\")\n  } else if (Apilio.iftttActionReports.ApilioValue1 === \"Green\" && Apilio.iftttActionReports.ApilioValue2 === \"Blue\") {\n    Ewelink.lightSwitchAction.setOnoffActQuery(\"ON\")\n  } else {\n    Ewelink.lightSwitchAction.setOnoffActQuery(\"OFF\")\n  }\n} else {\n  Ewelink.lightSwitchAction.skip(\"Not a valid event name\")\n}", "intent": "This automation checks the Apilio event name and turns on or off an eWeLink 1-Channel Switch based on a specified condition."}
{"original_description": "Turns on or off (you choose) the eWeLink 2-Channel Switch of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches4_action", "Filter code method": "Ewelink.switches4Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches4_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches4 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 4-Channel Switch?", "Slug": "switches4_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches4 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches4_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Set variables\nvar createdAt = Apilio.iftttActionReports.CreatedAt;\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\nvar apilioValue2 = Apilio.iftttActionReports.ApilioValue2;\nvar apilioValue3 = Apilio.iftttActionReports.ApilioValue3;\n\n// Check if it is the desired event\nif (eventName === \"run_only_at_nighttime\") {\n  // Determine switch action based on values\n  if (apilioValue1 === \"Green\" && apilioValue2 === \"Blue\" && apilioValue3 === \"Red\") {\n    Ewelink.switches4Action.skip(\"Invalid combination\");\n  } else if (onoff_act_query === \"Turn on\") {\n    Ewelink.switches4Action.runAction({\"switches4_query\": switches4_query, \"switches4_outlet_query\": switches4_outlet_query});\n  } else if (onoff_act_query === \"Turn off\") {\n    Ewelink.switches4Action.skip(\"Not applicable\");\n  }\n}", "intent": "This automation triggers when Apilio receives a specific event. It checks the values of Apilio value1, value2, and value3 to decide whether to turn on or off the selected 4-Channel eWeLink Switch."}
{"original_description": "Switches off the MagicHue light you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.poweroff", "Filter code method": "Magichue.poweroff.skip(string?: reason)", "Runtime method": "runAction(\"magichue.poweroff\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var IftttActionIdentifier = $$ifttt_action_identifier$$;\nif (IftttActionIdentifier === \"run_only_at_nighttime\") {\n  var CreatedAt = new Date(Apilio.iftttActionReports.CreatedAt);\n  var Hour = CreatedAt.getHours();\n  if (Hour < 7 || Hour > 22) {\n    Magichue.poweroff.skip(\"Outside of active hours\");\n  } else {\n    var WhichLights = $$which_lights$$;\n    for (var i = 0; i < WhichLights.length; i++) {\n      Magichue.poweroff.runAction({ \"light\": WhichLights[i] });\n    }\n  }\n} else {\n  Magichue.poweroff.skip(\"Ifttt action identifier does not match\");\n}", "intent": "Switches off the MagicHue light selected when Apilio triggers the action specified."}
{"original_description": "Switches on the MagicHue light you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.poweron", "Filter code method": "Magichue.poweron.skip(string?: reason)", "Runtime method": "runAction(\"magichue.poweron\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "var SelectedAction = Apilio.iftttActionReports.IftttActionIdentifier\nif (SelectedAction === \"run_only_at_nighttime\") {\n  var whichLights = [\"Living Room\", \"Bedroom\"]\n  var color = \"Green\"\n  var brightness = \"Medium\"\n} else if (Apilio.iftttActionReports.EventName !== SelectedAction) {\n  Magichue.poweron.skip(\"Invalid event name\")\n}\n\nvar MagicHueLight = Domovea.lights[whichLights[0]]\nif (MagicHueLight) {\n  var colorValue = color === \"Green\" ? \"Green\" : color === \"Blue\" ? \"Blue\" : color === \"Red\" ? \"Red\" : \"\"\n  var brightnessValue = brightness === \"High\" ? 100 : brightness === \"Medium\" ? 50 : brightness === \"Low\" ? 10 : \"\"\n  if (colorValue && brightnessValue) {\n    Magichue.poweron(SelectedAction, { color: colorValue, brightness: brightnessValue })\n  } else {\n    Magichue.poweron.skip(\"Invalid color or brightness\")\n  }\n} else {\n  Magichue.poweron.skip(\"No MagicHue light found\")\n}", "intent": "Check if Apilio event name matches the selected Ifttt action identifier, then switch on the MagicHue light you select with the specified color and brightness."}
{"original_description": "Switch off your Hue bulbs in a Niko Home Control All Off routine", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nikohomecontrol.routineActivated.Routine !== \"\") {\n  if (Nikohomecontrol.routineActivated.CreatedAt.getHours() < 7 || Nikohomecontrol.routineActivated.CreatedAt.getHours() > 22) {\n    Hue.turnOffAllHue.skip(\"Outside of active hours\")\n  } else {\n    var lights = [filter out unnecessary lights]\n    for (var i in lights) {\n      Hue.turnOffAllHue.setLight(i)\n    }\n  }\n}", "intent": "Switch off Philips Hue bulbs when a Niko Home Control routine is activated, using the selected Routine and Lights."}
{"original_description": "Turn off WeMo bulb(s).", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.led_turnOff", "Filter code method": "WemoLighting.ledTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.led_turnOff\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  WemoLighting.ledTurnOff(WemoLighting.macaddress)\n}", "intent": "Trigger a WeMo bulb turn-off action when a specific Knocki gesture is detected."}
{"original_description": "Turns on a Hubitat switch, light, etc. when Flic is clicked, double clicked, or held.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_on", "Filter code method": "Hubitat.actionOn.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === \"click\") {\n  runAction(\"hubitat.action_on\", {\"device\": \"$button_uuid\"});\n} else if (Flic.click.ClickType === \"double_click\") {\n  runAction(\"hubitat.action_on\", {\"device\": \"$button_uuid\"});\n} else if (Flic.click.ClickType === \"hold\") {\n  runAction(\"hubitat.action_on\", {\"device\": \"$button_uuid\"});\n} else {\n  Hubitat.actionOn.skip(\"Invalid click type\");\n}", "intent": "When a Flic button is clicked, double-clicked, or held, it triggers an action on Hubitat switch, light, etc. depending on the click type."}
{"original_description": "Updates a boolean variable to true when a SmartThings device is switched on", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt) {\n  Apilio.booleanVariableToTrueUpdates.set({\n    \"variable_identifier\": $$device$$,\n  }).runAction(\"apilio.boolean_variable_to_true_updates\", {})\n} else {\n  // No action\n}", "intent": "Updates a boolean variable to true when a SmartThings device is switched on."}
{"original_description": "Turns off a Hubitat switch, light, siren, strobe, etc. when Flic is clicked, double clicked, or held.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_off", "Filter code method": "Hubitat.actionOff.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === 'click' || Flic.click.ClickType === 'double_click' || Flic.click.ClickType === 'hold') {\n  var device = $$device$$\n  Hubitat.actionOff(device)\n}", "intent": "When Flic is clicked, double clicked, or held, turn off a Hubitat switch, light, siren, strobe, etc."}
{"original_description": "Turn on WeMo bulb(s).", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.led_turnOn", "Filter code method": "WemoLighting.ledTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.led_turnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  WemoLighting.ledTurnOn(\"macaddress\", \"Device\");\n}", "intent": "Turn on WeMo bulb(s) when a specific gesture is detected by Knocki."}
{"original_description": "Updates a boolean variable to false when a SmartThings device is switched off", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt === \"Off\") {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Device switched off\")\n}", "intent": "Updates a boolean variable to false when a SmartThings device is switched off. The filter code should check if the SmartThings switch was turned off and then update the Apilio boolean variable accordingly."}
{"original_description": "When your SmartThing device is switched off, turns your AC off", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_power_off", "Filter code method": "Ambiclimate.devicePowerOff.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_power_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt === null) {\n  if (device !== \"\") {\n    Ambiclimate.devicePowerOff(device)\n  } else {\n    Ambiclimate.devicePowerOff.skip(\"No device name selected\")\n  }\n}", "intent": "When the SmartThings device is switched off, the AC will turn off if a valid device name is selected."}
{"original_description": "This applet lets Apilio know if a specific SmartThings device has been switched on, and saves this information to a variable.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SwitchedOnAt = SmartthingsV2.switchedOnSmartthings.SwitchedOnAt\nvar SwitchName = SmartthingsV2.switchedOnSmartthings.SwitchName\n\nif (SmartthingsV2.switchedOnSmartthings.device === \"Bedroom switch\") {\n  Apilio.booleanVariableToTrueUpdates.set({ variable_identifier: \"some_variable\" })\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Unsupported device\")\n}", "intent": "This applet checks if a specific SmartThings device has been switched on and updates an Apilio variable accordingly."}
{"original_description": "When your SmartThing device is switched on, turns your AC on in comfort mode.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_mode_comfort", "Filter code method": "Ambiclimate.deviceModeComfort.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_mode_comfort\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.Device === \"Bedroom switch\") {\n  Ambiclimate.deviceModeComfort('comfort');\n} else {\n  Ambiclimate.deviceModeComfort.skip(\"Device is not Bedroom switch\");\n}", "intent": "When the SmartThings device is switched on, turn the AC on in comfort mode."}
{"original_description": "This applet lets Apilio know if a specific SmartThings device has been switched off, and saves this information to a variable.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt === \"false\") {\n  var DeviceName = SmartthingsV2.switchedOnSmartthings.SwitchName\n  var VariableIdentifier = // dropdown value from trigger\n  Apilio.booleanVariableToTrueUpdates.skip(\"Switch is already off, no update needed\")\n} else if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt === \"true\") {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Switch is on, no update necessary\")\n}", "intent": "This applet checks if a specific SmartThings device has been switched off, and updates an Apilio variable to true if it has."}
{"original_description": "Adjust bulb brightness.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.led_brightness_change", "Filter code method": "WemoLighting.ledBrightnessChange.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.led_brightness_change\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Dimmed level?", "Slug": "subType", "Required": "true", "Can have default value": "true", "Filter code method": "WemoLighting.ledBrightnessChange.setSub Type(string: subType)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Pattern === \"***\") {\n  var macaddress = WemoLighting.ledBrightnessChange.getMacAddress();\n  if (macaddress !== null) {\n    WemoLighting.ledBrightnessChange.setSubType(\"Dimmed\");\n  } else {\n    WemoLighting.ledBrightnessChange.skip(\"No device selected\");\n  }\n} else {\n  WemoLighting.ledBrightnessChange.skip(\"Invalid gesture or pattern\");\n}", "intent": "Adjust the bulb brightness based on the Knocki gesture and pattern."}
{"original_description": "Turns on a Hubitat switch, light, etc. when the Scout Alarm is triggered.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_alarming"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Name\nName of mode.", "description": "Name of mode.", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeAlarming.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Event\nState of Mode.", "description": "State of Mode.", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeAlarming.Event", "Type": "String", "Example": "Alarmed"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeAlarming.FormattedText", "Type": "String", "Example": "Active Alarm in Away mode"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that triggered the alarm.", "description": "The name of the person or thing that triggered the alarm.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeAlarming.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "At\nDate and time alarm was triggered.", "description": "Date and time alarm was triggered.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeAlarming.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_on", "Filter code method": "Hubitat.actionOn.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Scoutalarm.modeAlarming.ModeID === \"Away\") {\n  var Device = \"<<<Device>>>\"\n  Hubitat.actionOn(Device)\n} else {\n  Hubitat.actionOn.skip(\"Mode not set to Away\")\n}", "intent": "When the Scout Alarm is triggered, check if the mode_id is set to \"Away\". If it's not, skip the action. Otherwise, turn on a Hubitat switch or light corresponding to the device specified in the dropdown list."}
{"original_description": "Opens the garage door when WeMo Motion sensor detects new motion after a period of inactivity.", "trigger_channel": "WeMo Motion", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_motion.attribute_MOTION_G"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which motion device?", "Helper text": "Name of Your WeMo motion device.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Quiet period", "Helper text": "Quiet period after last motion event.", "Slug": "subType", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoMotion.attributeMOTIONG.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sensor name\nThe name of the WeMo sensor device.", "description": "The name of the WeMo sensor device.", "details": {"Slug": "device_name", "Filter code": "WemoMotion.attributeMOTIONG.SensorName", "Type": "String", "Example": "Kitchen sensor"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "const CreatedAt = WemoMotion.attributeMOTIONG.CreatedAt;\nconst deviceName = WemoMotion.attributeMOTIONG.SensorName;\nconst subtype = wemo_motion.subType;\n\nif (subtype === \"quietPeriod\") {\n  const macaddress = wemo_motion.macaddress;\n  if (macaddress !== \"\") {\n    Garadget.openDoor(\"Opening garage door for \" + deviceName);\n  } else {\n    Garadget.openDoor.skip(\"No WeMo sensor selected\");\n  }\n} else {\n  Garadget.openDoor.skip(\"Not in quiet period\");\n}", "intent": "Opens the garage door when WeMo Motion sensor detects new motion after a period of inactivity."}
{"original_description": "This will change the WiZ light(s) of your choice to red whenever your WeMo Air Purifier detects a poor air quality. (Only for WiZ Colors lights)", "trigger_channel": "Wemo Air Purifier", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_airpurifier.attribute_AIRPURIFIERQUALITYCHANGED_N"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of your WeMo Air Purifier.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "What air quality range?", "Slug": "subType", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoAirpurifier.attributeAIRPURIFIERQUALITYCHANGEDN.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Wemo air purifier name\nName of the WeMo Air Purifier.", "description": "Name of the WeMo Air Purifier.", "details": {"Slug": "device_name", "Filter code": "WemoAirpurifier.attributeAIRPURIFIERQUALITYCHANGEDN.WemoAirPurifierName", "Type": "String", "Example": "Living room Air Purifier."}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var WemoAirPurifier = WemoAirpurifier.attributeAIRPURIFIERQUALITYCHANGEDN;\nvar TriggeredAt = WemoAirPurifier.TriggeredAt;\nif (WemoAirPurifier.subType === \"Poor air quality\") {\n  var entitySlug = // Get the slug of the selected light(s)\n  if (entitySlug) {\n    Wiz.turnOn(entitySlug, { mode: \"Red\", dimming: \"100\" });\n  } else {\n    Wiz.turnOn.skip(\"No lights selected\");\n  }\n} else {\n  Wiz.turnOn.skip(\"Air quality is not poor\");\n}", "intent": "When the WeMo Air Purifier detects a poor air quality, change the WiZ light(s) to red."}
{"original_description": "Turn on your WeMo light when motion is detected or if someone opens a door to a room.  You may select a specific device name or all devices. For all devices, specify '(All)' for the Device Name. You may select a single event, all, all doors and windows, all doors, or all windows. For all event types, the event type name should be '(All)'. Next, select the device name of the WeMo light to turn on. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.sensor"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name?", "Helper text": "Device name", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.sensor.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.sensor.EventType", "Type": "String", "Example": "Open"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.sensor.FormattedMessage", "Type": "String", "Example": "Motion detected"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.led_turnOn", "Filter code method": "WemoLighting.ledTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.led_turnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.sensor.EventType === \"Open\" || Bluebyadt.sensor.EventType === \"MotionDetected\") {\n  WemoLighting.ledTurnOn({\n    macaddress: $$device_name$$\n  });\n} else {\n  WemoLighting.ledTurnOn.skip(\"No relevant event detected\")\n}", "intent": "Turn on a WeMo light when motion is detected or if someone opens a door to a room, based on the selected device name and event type."}
{"original_description": "Start a brew cycle with your coffeemaker.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Pattern === \"Triple Knock\") {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode('on', { macaddress: $$macaddress$$ })\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Invalid gesture pattern\")\n}", "intent": "Check if the gesture pattern matches a specific condition and set the WeMo Coffeemaker brew mode to 'on' accordingly."}
{"original_description": "Turns on or off the eWeLink 3-Channel Switch of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches4_action", "Filter code method": "Ewelink.switches4Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches4_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches4 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 4-Channel Switch?", "Slug": "switches4_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches4 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches4_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Action = Ewelink.switches4Action\nif (Apilio.iftttActionReports.created_at > Date.now() - 24 * 60 * 60 * 1000) { // Check if the event is from today\n  var switches4_query = IftttActionIdentifier\n  switch (switches4_query) {\n    case \"Switch A\":\n      if (Apilio.iftttActionReports.apilio_value_1 === \"Green\") {\n        Action.setOutletQuery(switches4_outlet_query)\n        Action.setOnoffActQuery(onoff_act_query).skip(\"Invalid combination\")\n      } else if (Apilio.iftttActionReports.apilio_value_2 === \"Blue\") {\n        Action.skip(\"Switch A is not suitable for this event\")\n      }\n    break\n    case \"Switch B\":\n      if (Apilio.iftttActionReports.apilio_value_3 === \"Red\") {\n        Action.setOnoffActQuery(onoff_act_query).setOutletQuery(switches4_outlet_query)\n      } else {\n        Action.skip(\"Invalid combination\")\n      }\n    break\n  }\n} else {\n  Action.skip(\"Event is not from today\")\n}", "intent": "This IFTTT automation triggers an eWeLink 3-Channel Switch action based on Apilio's ifttt_action_reports."}
{"original_description": "This applet activates the temperature control zone when the setpoint exceeds the environement measured temperature", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.clima_ambient_temperature"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.climaAmbientTemperature.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.climaAmbientTemperature.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.climaAmbientTemperature.State", "Type": "String", "Example": "state"}}], "action_channel": "Mitsubishi Electric kumo cloud", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kumocloud.turn_on", "Filter code method": "Kumocloud.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kumocloud.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Setpoint = ViewProd.climaAmbientTemperature.Setpoint;\nvar MeasuredTemperature = ViewProd.climaAmbientTemperature.MeasuredTemperature;\nif (Setpoint > MeasuredTemperature) {\n  Kumocloud.turnOn(\"zone\", \"temperature_control\");\n} else {\n  Kumocloud.turnOn.skip(\"No setpoint exceeded\")\n}", "intent": "Activate the temperature control zone when the setpoint exceeds the environment measured temperature."}
{"original_description": "When a device connects Google WiFi, turn on/off one channel of an eWeLink Support 4-CH switch.", "trigger_channel": "Google Wifi", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_wifi.device_connects"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the device that connects to the Google Wifi or OnHub", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "GoogleWifi.deviceConnects.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nName of the connecting device.", "description": "Name of the connecting device.", "details": {"Slug": "device_name", "Filter code": "GoogleWifi.deviceConnects.DeviceName", "Type": "String", "Example": "My Android"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plugs3_action", "Filter code method": "Ewelink.plugs3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plugs3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plugs3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Plug?", "Slug": "plugs3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Plugs3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "plugs3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceName = $$device_name$$\nif (Ewelink.plugs3Action.skip(\"No reason given\")) {\n  Ewelink.plugs3Action.runAction({\"plugs3_query\": \"Channel1\", \"plugs3_outlet_query\": \"Outlet1\", \"onoff_act_query\": \"On\"}, DeviceName)\n}", "intent": "When a device connects to Google WiFi, it will trigger an action on the eWeLink Support 4-CH switch."}
{"original_description": "Turns on or off the eWeLink 4-Channel Switch of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.switches4_action", "Filter code method": "Ewelink.switches4Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.switches4_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Switches4 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 4-Channel Switch?", "Slug": "switches4_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Switches4 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches4_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "var apilioAction = Apilio.iftttActionReports.EventName;\nif (apilioAction === 'run_only_at_nighttime') {\n  var createdAt = new Date(Apilio.iftttActionReports.CreatedAt);\n  var hour = createdAt.getHours();\n  if (hour < 7 || hour > 22) {\n    Ewelink.switches4Action.skip(\"Outside of active hours\")\n  } else {\n    var switches4Query = \"Select your 4-Channel Switch\";\n    var switches4OutletQuery = \"Select the channel to turn on/off\";\n    var onoffActQuery = apilio.custom_value_1 === 'Green' ? \"on\" : \"off\";\n    Ewelink.switches4Action.runAction(switches4Query, { \n      switches4_outlet_query: switches4OutletQuery, \n      onoff_act_query: onoffActQuery\n    })\n  }\n} else {\n  Ewelink.switches4Action.skip(\"Not a valid Apilio action\")\n}", "intent": "Trigger Apilio action reports for eWeLink 4-Channel Switch."}
{"original_description": "This will turn on the WiZ lights of your choice in the mode and brightness you defined whenever your WeMo Motion detects motion after a quiet period.", "trigger_channel": "WeMo Motion", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_motion.attribute_MOTION_G"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which motion device?", "Helper text": "Name of Your WeMo motion device.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Quiet period", "Helper text": "Quiet period after last motion event.", "Slug": "subType", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoMotion.attributeMOTIONG.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sensor name\nThe name of the WeMo sensor device.", "description": "The name of the WeMo sensor device.", "details": {"Slug": "device_name", "Filter code": "WemoMotion.attributeMOTIONG.SensorName", "Type": "String", "Example": "Kitchen sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "// Check for quiet period\nvar subType = WemoMotion.attributeMOTIONG.SubType;\nif (subType === \"quiet\") {\n  // Get selected device name\n  var deviceName = WemoMotion.attributeMOTIONG.SensorName;\n  \n  // Get the mode and dimming settings from action fields\n  var entity = Wiz.turnOn.getEntity();\n  var mode = Wiz.turnOn.getMode();\n  var dimming = Wiz.turnOn.getDimming();\n  \n  // Turn on WiZ lights with chosen mode and brightness\n  Wiz.turnOn(entity, mode, dimming).then(() => {\n    // Log success\n    console.log(\"WiZ lights turned on\");\n  }).catch((error) => {\n    // Log error\n    console.error(\"Error: \", error);\n  });\n} else {\n  WemoMotion.attributeMOTIONG.skip(\"Not in quiet period\")\n}", "intent": "Whenever WeMo Motion detects motion after a quiet period, turn on the WiZ lights of your choice in the mode and brightness you defined."}
{"original_description": "Set Mr.Coffee to brew when you press a pusher on your Kronaby watch.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"single\") {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode(\"brew\");\n} else if (Kronaby.pusherPressed.PressType === \"double\" || Kronaby.pusherPressed.PressType === \"triple\") {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Invalid press type\")\n}", "intent": "Set Mr. Coffee to brew when a specific press type on the Kronaby watch triggers the automation."}
{"original_description": "Turn off your LIFX lights and WeMo Insight switch by pressing the pusher on your Kronaby watch.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTOFF", "Filter code method": "WemoInsightSwitch.attributeINSIGHTOFF.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_INSIGHTOFF\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"single\") {\n  // Only trigger when single press\n  if (Weather.currentConditionIs.Condition !== \"Rain\") { \n    WemoInsightSwitch.attributeINSIGHTOFF.skip(\"No rain detected\")\n  } else {\n    LIFX.lightsOff()\n    WemoInsightSwitch.attribute_INSIGHTOFF()\n  }\n} else {\n  // Other press types, skip the action\n  WemoInsightSwitch.attribute_INSIGHTOFF.skip(\"Other press type: \" + Kronaby.pusherPressed.PressType)\n}", "intent": "Turn off LIFX lights and WeMo Insight switch when the pusher on Kronaby watch is pressed."}
{"original_description": "Set the time that works for you, and this Applet will help you start your mornings off on the right foot. It will turn on your LIFX lights, switch on your coffee maker (add grounds the night before!) and turn on your favorite device with Harmony.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_on", "Filter code method": "Lifx.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade in duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade in duration", "Helper text": "How long should it take for the lights to fade in.", "Slug": "fade_in_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not available? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; fade_in_duration: 12&quot; for red at 30% brightness, 12 second fade in. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOn.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var Time = $$Time$$\nvar Weekday = $$Weekdays$$\n\nif (Weekday === \"true\" && [DateAndTime.everyWeekdayAt.CheckTime] >= \"06:00\" && [DateAndTime.everyWeekdayAt.CheckTime] <=\"08:00\") {\n  Lifx.turnOn({\n    selector: $$Selector$$,\n    fade_in_duration: $$FadeInDuration$$,\n    color: $$Color$$,\n    brightness: $$Brightness$$,\n    advanced_options: $$AdvancedOptions||\n  })\n} else { \n  Lifx.turnOn.skip(\"Outside of morning hours\")\n}", "intent": "This Applet will start your morning by turning on LIFX lights, switching on the coffee maker, and activating a specific device with Harmony."}
{"original_description": "This applet activates the temperature control zone when the setpoint exceeds the environement measured temperature", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.sensor_temperature"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.sensorTemperature.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.sensorTemperature.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.sensorTemperature.State", "Type": "String", "Example": "state"}}], "action_channel": "Mitsubishi Electric kumo cloud", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kumocloud.turn_on", "Filter code method": "Kumocloud.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kumocloud.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "const device = ViewProd.sensorTemperature.Device;\nif (ViewProd.sensorTemperature.State === 'Active') {\n  if (parseInt(ViewProd.sensorTemperature.Threshold) > parseInt(GetVimarVIEW().sensorTemperature)) {\n    const reason = \"Setpoint exceeds environment measured temperature\";\n    Kumocloud.turnOn.skip(reason);\n  }\n}", "intent": "This applet activates the temperature control zone when the setpoint exceeds the environment measured temperature."}
{"original_description": "When you leave home and your Honeywell Smart Home Security system switches to away mode, your Chamberlain MyQ garage door will automatically close if it was left open.", "trigger_channel": "Honeywell Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "honeywell_lyric.das_away_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your Smart Home Security device", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HoneywellLyric.dasAwayNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Smart home security name\nThe name of the security device being monitored", "description": "The name of the security device being monitored", "details": {"Slug": "device_name", "Filter code": "HoneywellLyric.dasAwayNotification.SmartHomeSecurityName", "Type": "String", "Example": "Home security"}}], "action_channel": "MyQ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myq_devices.close_door", "Filter code method": "MyqDevices.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"myq_devices.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door name\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the door name?", "Slug": "door_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DoorName = $$DOOR_NAME$$\nif (HoneywellLyric.dasAwayNotification.System === \"away\") {\n  if (MyQDevices.getDoorStatus(DoorName) !== \"closed\") {\n    MyqDevices.closeDoor.skip(\"Garage door already closed\")\n  } else {\n    MyqDevices.closeDoor()\n  }\n}", "intent": "When leaving home and switching to away mode, check if the garage door is open, then close it."}
{"original_description": "Once you home's VOC levels return to healthy limits, this turns off the Kasa smart switch or plug attached to your ventilation device.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var HealthyLimit = 12;\nif (Value <= HealthyLimit) {\n  Kasa.turnOff(skip(\"VOC levels are within healthy limits\"));\n}\nelse {\n  // Request information if necessary\n  console.log(\"VOC levels have not returned to healthy limits. Skipping action.\");\n}", "intent": "When the HAVEN IAQ trigger is activated, check if the VOC levels have returned to healthy limits and then control the Kasa smart switch or plug attached to the ventilation device."}
{"original_description": "Turns off a Hubitat switch, light, siren, strobe, etc. when the Scout Alarm is dismissed.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_dismissed"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "At\nDate and time alarm was dismissed.", "description": "Date and time alarm was dismissed.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeDismissed.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that dismissed the alarm.", "description": "The name of the person or thing that dismissed the alarm.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeDismissed.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "Name\nName of Mode", "description": "Name of Mode", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeDismissed.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Event\nState of Mode", "description": "State of Mode", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeDismissed.Event", "Type": "String", "Example": "Dismissed"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeDismissed.FormattedText", "Type": "String", "Example": "Dave via IFTTT dismissed alarm in Away mode"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_off", "Filter code method": "Hubitat.actionOff.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Mode = Meta.currentUserTriggerDetails.mode_id\nif (Mode !== \"Away\") {\n  Hubitat.actionOff.skip(\"Not in Away mode\")\n} else {\n  [Service].[action].setDevice(Meta.currentUserActionDetails.device)\n}", "intent": "When the Scout Alarm is dismissed, it checks if the mode_id is not Away. If true, it skips the action with a reason. Otherwise, it sets the Hubitat device to off."}
{"original_description": "This Applet will turn on your WeMo lights when iSpy Agent detects sound from the selected Microphone.", "trigger_channel": "iSpy Agent", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ispy_agent.sound_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Microphone", "Helper text": "Choose a microphone", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IspyAgent.soundDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nName of the device that generated the event", "description": "Name of the device that generated the event", "details": {"Slug": "device_name", "Filter code": "IspyAgent.soundDetected.Device", "Type": "String", "Example": "microphone 1"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.group_led_turnOn", "Filter code method": "WemoLighting.groupLedTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.group_led_turnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Groupid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Slug": "groupId", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IspyAgent.soundDetected.Device === device && IspyAgent.soundDetected.CreatedAt > Meta.currentUserTime.addHours(-1)) {\n  WemoLighting.groupLedTurnOn(groupId)\n} else {\n  WemoLighting.groupLedTurnOn.skip(\"Last detected sound was older than an hour\")\n}", "intent": "When iSpy Agent detects sound from the selected Microphone, turn on the WeMo lights in the specified Groupid."}
{"original_description": "This Applet will turn on your WeMo lights when motion is detected by the selected camera.", "trigger_channel": "iSpy Agent", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ispy_agent.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which camera?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IspyAgent.motionDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nName of the device that generated the event", "description": "Name of the device that generated the event", "details": {"Slug": "device_name", "Filter code": "IspyAgent.motionDetected.Device", "Type": "String", "Example": "camera 1"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.group_led_turnOn", "Filter code method": "WemoLighting.groupLedTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.group_led_turnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Groupid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Slug": "groupId", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Device = IspyAgent.motionDetected.Device\nif (Device === selected_device) {\n  WemoLighting.groupLedTurnOn(\"groupId\", \"reason\")\n}", "intent": "When motion is detected by the selected camera, turn on the WeMo lights for the specified group."}
{"original_description": "Turn on WeMo group of lights when you arm or disarm your Blue by ADT system. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.issues"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.issues.EventType", "Type": "String", "Example": "System Armed"}}, {"section": "Ingredients", "title": "Formatted message\nThis describes the details of the event", "description": "This describes the details of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.issues.FormattedMessage", "Type": "String", "Example": "System Armed Away by Master User"}}, {"section": "Ingredients", "title": "Timestamp\nThis is the time that the event occurred", "description": "This is the time that the event occurred", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.issues.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeMo Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_lighting.group_led_turnOn", "Filter code method": "WemoLighting.groupLedTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"wemo_lighting.group_led_turnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Groupid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Slug": "groupId", "Required": "true", "Can have default value": "false"}}], "filter_code": "var EventType = Bluebyadt.issues.EventType\nif (EventType === \"System Armed\" || EventType === \"System Disarmed\") {\n  WemoLighting.groupLedTurnOn(skip(\"Unexpected event type: \" + EventType), { groupId: Groupid })\n} else {\n  WemoLighting.groupLedTurnOn.skip(\"Event type is not System Armed or Disarmed\")\n}", "intent": "Checks if the event type is either 'System Armed' or 'System Disarmed', then turns on the WeMo lighting group specified by the Groupid."}
{"original_description": "When new motion is detected, press your selected bot.", "trigger_channel": "WeMo Motion", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_motion.attribute_MOTION_G"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which motion device?", "Helper text": "Name of Your WeMo motion device.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Quiet period", "Helper text": "Quiet period after last motion event.", "Slug": "subType", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoMotion.attributeMOTIONG.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sensor name\nThe name of the WeMo sensor device.", "description": "The name of the WeMo sensor device.", "details": {"Slug": "device_name", "Filter code": "WemoMotion.attributeMOTIONG.SensorName", "Type": "String", "Example": "Kitchen sensor"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.press_bot", "Filter code method": "Switchbot.pressBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.press_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WemoMotion.attributeMOTIONG.Macaddress === \"selected_bot\") {\n  if (WemoMotion.attributeMOTIONG.Subtype > 0) {\n    Switchbot.pressBot(\"After quiet period\")\n  } else {\n    Switchbot.pressBot()\n  }\n}", "intent": "When new motion is detected, press a selected bot."}
{"original_description": "When the cost of the device attached to your WeMo Insight Switch rises above the daily value you specify, it will be displayed on your Glance Clock.", "trigger_channel": "WeMo Insight Switch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTCOSTTODAY_G"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of the WeMo Insight Switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Daily cost\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Daily cost", "Helper text": "Daily cost", "Slug": "daily_cost", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoInsightSwitch.attributeINSIGHTCOSTTODAYG.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Switch name\nName of the WeMo switch.", "description": "Name of the WeMo switch.", "details": {"Slug": "device_name", "Filter code": "WemoInsightSwitch.attributeINSIGHTCOSTTODAYG.SwitchName", "Type": "String", "Example": "Kitchen switch"}}], "action_channel": "Glance clock", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "glanceclock.notice", "Filter code method": "Glanceclock.notice.skip(string?: reason)", "Runtime method": "runAction(\"glanceclock.notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Clock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Clock", "Slug": "clock", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > Title", "description": "Text input > Title", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Glanceclock.notice.setText(string: text)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sound", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Animation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Type", "Slug": "animation", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Animation Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}], "filter_code": "var dailyCost = $$daily_cost$$\nif (WemoInsightSwitch.attributeINSIGHTCOSTTODAYG.Cost > dailyCost) {\n  Glanceclock.notice.setText(\"WeMo Insight Switch cost exceeded: \" + WemoInsightSwitch.attributeINSIGHTCOSTTODAYG.Cost)\n}", "intent": "When the cost of the device attached to your WeMo Insight Switch rises above the daily value you specify, it will be displayed on your Glance Clock."}
{"original_description": "Once you home's Relative Humidity levels return to acceptable levels, this turns off the Kasa smart switch or plug attached to your dehumidification or ventilation device.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.humidity_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The relative humidity Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "Recommended relative humidity range for comfort: 40-60%. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nRelative humidity when the event was triggered.", "description": "Relative humidity when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.humidityEvent.Value", "Type": "String", "Example": "68"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the relative humidity event was triggered.", "description": "When the relative humidity event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.humidityEvent.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.humidityEvent.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.humidityEvent.Threshold", "Type": "String", "Example": "87"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.humidityEvent.Rising", "Type": "String", "Example": "True"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the trigger data\nvar Device = $$Device$$;\nvar Rising = $$Rising$$;\nvar Threshold = $$Threshold$$;\nvar Value = $$Value$$;\nvar Timestamp = $$Timestamp$$;\nvar CamName = $$CamName$$;\n\nif (Rising === \"true\" && Value <= Threshold) {\n  Kasa.turnOff.skip(\"Relative humidity has returned to acceptable levels\")\n} else if (Rising === \"false\" && Value >= Threshold) {\n  Kasa.turnOff.skip(\"Relative humidity has not yet reached the threshold\")\n}", "intent": "This automation turns off the Kasa smart switch or plug attached to your dehumidification or ventilation device when the relative humidity levels in your home return to acceptable levels, as reported by HAVEN IAQ."}
{"original_description": "Turn on or off an eWeLink switch (1 channel) when the water temperature is lower than the configured setpoint.", "trigger_channel": "Blue Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "blueconnect.autom_temp_low"}, "trigger_details": [{"section": "Trigger fields", "title": "Swimming pool\nDropdown list", "description": "Dropdown list", "details": {"Label": "Swimming pool", "Slug": "swimming_pool_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Temperature celsius\nLast temperature value measured. Unit: celsius degree.", "description": "Last temperature value measured. Unit: celsius degree.", "details": {"Slug": "current_temperature_celsius", "Filter code": "Blueconnect.automTempLow.TemperatureCelsius", "Type": "String", "Example": "26.7"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nLast temperature value measured. Unit: fahrenheit degree.", "description": "Last temperature value measured. Unit: fahrenheit degree.", "details": {"Slug": "current_temperature_fahrenheit", "Filter code": "Blueconnect.automTempLow.TemperatureFahrenheit", "Type": "String", "Example": "77.8"}}, {"section": "Ingredients", "title": "Temperature celsius target\nAutomation setpoint for your swimming pool as configured in the app. Unit: celsius degree.", "description": "Automation setpoint for your swimming pool as configured in the app. Unit: celsius degree.", "details": {"Slug": "target_temperature_celsius", "Filter code": "Blueconnect.automTempLow.TemperatureCelsiusTarget", "Type": "String", "Example": "27.0"}}, {"section": "Ingredients", "title": "Temperature fahrenheit target\nAutomation setpoint as configured in the app. Unit: fahrenheit degree.", "description": "Automation setpoint as configured in the app. Unit: fahrenheit degree.", "details": {"Slug": "target_temperature_fahrenheit", "Filter code": "Blueconnect.automTempLow.TemperatureFahrenheitTarget", "Type": "String", "Example": "80"}}, {"section": "Ingredients", "title": "Temperature celsius delta\nTemperatureCelsiusTarget - TemperatureCelsius", "description": "TemperatureCelsiusTarget - TemperatureCelsius", "details": {"Slug": "delta_temperature_celsius", "Filter code": "Blueconnect.automTempLow.TemperatureCelsiusDelta", "Type": "String", "Example": "2.7"}}, {"section": "Ingredients", "title": "Temperature fahrenheit delta\nTemperatureFahrenheitTarget - TemperatureFahrenheit", "description": "TemperatureFahrenheitTarget - TemperatureFahrenheit", "details": {"Slug": "delta_temperature_fahrenheit", "Filter code": "Blueconnect.automTempLow.TemperatureFahrenheitDelta", "Type": "String", "Example": "3.6"}}, {"section": "Ingredients", "title": "Is repetition\nWhether this trigger is the repetition of the previous one.", "description": "Whether this trigger is the repetition of the previous one.", "details": {"Slug": "is_repetition", "Filter code": "Blueconnect.automTempLow.IsRepetition", "Type": "String", "Example": "true"}}, {"section": "Ingredients", "title": "Analyzed at\nDate and time analysis was performed. Format: iso8601", "description": "Date and time analysis was performed. Format: iso8601", "details": {"Slug": "generated_at_iso8601", "Filter code": "Blueconnect.automTempLow.AnalyzedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Analyzed at localized mmddyyyy\nDate and time analysis was performed. Format: mm/dd/yyyy. Your IFTTT timezone.", "description": "Date and time analysis was performed. Format: mm/dd/yyyy. Your IFTTT timezone.", "details": {"Slug": "generated_at_localized_mmddyyyy", "Filter code": "Blueconnect.automTempLow.AnalyzedAtLocalizedMmddyyyy", "Type": "String", "Example": "01/14/2019 11:33:55"}}, {"section": "Ingredients", "title": "Analyzed at localized ddmmyyyy\nDate and time analysis was performed. Format: dd/mm/yyyy. Your IFTTT timezone.", "description": "Date and time analysis was performed. Format: dd/mm/yyyy. Your IFTTT timezone.", "details": {"Slug": "generated_at_localized_ddmmyyyy", "Filter code": "Blueconnect.automTempLow.AnalyzedAtLocalizedDdmmyyyy", "Type": "String", "Example": "14/01/2018 16:02:33"}}, {"section": "Ingredients", "title": "Since datetime\nDate and time of the first measurement < setpoint. Format: iso8601", "description": "Date and time of the first measurement < setpoint. Format: iso8601", "details": {"Slug": "exist_since_iso8601", "Filter code": "Blueconnect.automTempLow.SinceDatetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Since datetime localized ddmmyyyy\nDate and time of the first measurement < setpoint. Format: dd/mm/yyyy. Your IFTTT timezone.", "description": "Date and time of the first measurement < setpoint. Format: dd/mm/yyyy. Your IFTTT timezone.", "details": {"Slug": "exist_since_localized_ddmmyyyy", "Filter code": "Blueconnect.automTempLow.SinceDatetimeLocalizedDdmmyyyy", "Type": "String", "Example": "14/01/2019 13:57:32"}}, {"section": "Ingredients", "title": "Since datetime localized mmddyyyy\nDate and time of the first measurement < setpoint. Format: mm/dd/yyyy. Your IFTTT timezone.", "description": "Date and time of the first measurement < setpoint. Format: mm/dd/yyyy. Your IFTTT timezone.", "details": {"Slug": "exist_since_localized_mmddyyyy", "Filter code": "Blueconnect.automTempLow.SinceDatetimeLocalizedMmddyyyy", "Type": "String", "Example": "01/14/2019 13:57:32"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (parseFloat(Blueconnect.automTempLow.TemperatureCelsius) < parseFloat(Blueconnect.automTempLow.TemperatureCelsiusTarget)) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else if (parseFloat(Blueconnect.automTempLow.TemperatureFahrenheit) < parseFloat(Blueconnect.automTempLow.TemperatureFahrenheitTarget)) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Temperature is above the setpoint\")\n}", "intent": "Turn on or off an eWeLink switch when the water temperature is lower than the configured setpoint."}
{"original_description": "Turn off an Insight switch.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "WeMo Insight Switch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTOFF", "Filter code method": "WemoInsightSwitch.attributeINSIGHTOFF.skip(string?: reason)", "Runtime method": "runAction(\"wemo_insight_switch.attribute_INSIGHTOFF\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "var macaddress = \"\"\nif (Knocki.knocki.Pattern === \"***\") {\n  if (Meta.currentUserTime.hour() >= 7 && Meta.currentUserTime.hour() <= 23) {\n    WemoInsightSwitch.attributeINSIGHTOFF(WemoInsightSwitch.macaddress, \"macaddress\")\n  } else {\n    WemoInsightSwitch.attributeINSIGHTOFF.skip(\"Outside of active hours\")\n  }\n}", "intent": "When a Knocki gesture pattern is recognized, and the created time is between 7 am to 11 pm, turn off the WeMo Insight Switch with the matching MAC address."}
{"original_description": "This applet deactivates the temperature control zone when the setpoint exceeds the environement measured temperature", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.sensor_temperature"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.sensorTemperature.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.sensorTemperature.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.sensorTemperature.State", "Type": "String", "Example": "state"}}], "action_channel": "Mitsubishi Electric kumo cloud", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kumocloud.turn_off", "Filter code method": "Kumocloud.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kumocloud.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Slug": "serial", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ViewProd.sensorTemperature.Condition === 'Exceeds') {\n  if (parseFloat(ViewProd.sensorTemperature.Threshold) > parseFloat(Vimar_VIEW.State)) {\n    Kumocloud.turnOff('Serial', 'Temperature control zone deactivated due to setpoint exceeding measured temperature');\n  } else {\n    Kumocloud.turnOff.skip('Setpoint within acceptable range')\n  }\n} else {\n  Kumocloud.turnOff.skip('Condition does not match \"Exceeds\"')\n}", "intent": "This applet deactivates the temperature control zone when the setpoint exceeds the environment measured temperature."}
{"original_description": "When the current weather rises above a preset degree, turn on/off 1-channel plug or switch. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "var TempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (parseInt(TempFahrenheit) > parseInt(preset_temperature)) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"OFF\")\n} else {\n  Ewelink.lightSwitchAction.skip(\"Temperature is not above \" + preset_temperature)\n}", "intent": "Automatically turn off a 1-channel plug or switch when the current weather temperature rises above a preset degree."}
{"original_description": "This Action will start a brew cycle with your coffeemaker.", "trigger_channel": "MESH", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mesh.events"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeMo Coffeemaker", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_coffeemaker.attribute_coffeeMakerBrewMode", "Filter code method": "WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(string?: reason)", "Runtime method": "runAction(\"wemo_coffeemaker.attribute_coffeeMakerBrewMode\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Name of WeMo Coffee Maker.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode(\"BREW_MODE\")\n}", "intent": "When an event occurs in the MESH app with a specific EventID, check if the text content of the event matches the expected condition. If it does, trigger the WeMo Coffeemaker to brew coffee by setting its attribute to 'brew mode'."}
{"original_description": "You can setup visual alert notification for your critical devices health status", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_low"}, "trigger_details": [{"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryLow.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device's battery became low.", "description": "The time the device's battery became low.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryLow.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryLow.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "OSUM SMART", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "osumsmart.switch_on", "Filter code method": "Osumsmart.switchOn.skip(string?: reason)", "Runtime method": "runAction(\"osumsmart.switch_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Devices", "Helper text": "Devices to operate", "Slug": "device_list", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceName = AndroidBattery.batteryLow.DeviceName;\nif (Meta.currentUserTime.hour() < 7 || Meta.currentUserTime.hour() > 22) {\n  Osumsmart.switchOn.skip(\"Outside of active hours\")\n} else {\n  Osumsmart.switchOn(DeviceName)\n}", "intent": "When the Android device's battery level becomes low, check if it is during a specific time of day and if not, skip the action. If it is during the specified time, switch on the Osumsmart device."}
{"original_description": "This applet deactivates the temperature control zone when the setpoint exceeds the environement measured temperature", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.clima_ambient_temperature"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.climaAmbientTemperature.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.climaAmbientTemperature.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.climaAmbientTemperature.State", "Type": "String", "Example": "state"}}], "action_channel": "Mitsubishi Electric kumo cloud", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kumocloud.turn_off", "Filter code method": "Kumocloud.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kumocloud.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Slug": "serial", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get required ingredients\nvar threshold = ViewProd.climaAmbientTemperature.Threshold;\nvar device = ViewProd.climaAmbientTemperature.Device;\nvar state = ViewProd.climaAmbientTemperature.State;\n\nif (threshold > ViewProd.clima_ambient_temperature) {\n  if (device === \"temperature control zone\") {\n    Kumocloud.turnOff.skip(\"Setpoint exceeds measured environment temperature\");\n  }\n}", "intent": "Disable temperature control zone when the setpoint exceeds the measured environment temperature."}
{"original_description": "SmartThings sensor detectes presence, then turn on SwitchBot. This Applet requires special hardware, the SmartThings sensor , the SwitchBot and the SwitchBot Hub.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_on_bot", "Filter code method": "Switchbot.turnOnBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_on_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.ArrivedAt !== \"\") {\n  if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n    Switchbot.turnOnBot(\"Turn on SwitchBot for bedroom\");\n  } else {\n    // No operation\n  }\n}", "intent": "Turn on SwitchBot when SmartThings sensor detects presence."}
{"original_description": "Get your outdoor plants' watering organized. Automatically record rainfall in a Google spreadsheet!", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-yesterday-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainYesterdayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Netatmo.rainYesterdayAmount.MeasuredRainfallIn > 0) {\n  var filename = \"Outdoor Plant Watering Log\";\n  var formatted_row = \"|||Device Name: \" + Netatmo.rainYesterdayAmount.DeviceName + \"||| Measured at: \" + Netatmo.rainYesterdayAmount.MeasuredAt + \"||| Measured rainfall in: \" + Netatmo.rainYesterdayAmount.MeasuredRainfallIn + \"||| Measured rainfall mm: \" + Netatmo.rainYesterdayAmount.MeasuredRainfallMM;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename).setFormattedRow(formatted_row);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No rainfall recorded\")\n}", "intent": "Automatically record rainfall in a Google spreadsheet using Netatmo Weather Station's rain data."}
{"original_description": "Sync the notes you want: when you add the tag \"Dropbox\" to a note (or customize with your own), it'll be created as text file in Dropbox. Oooh. The cloud! ☁️", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.add_tag_to_note"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Specific tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.addTagToNote.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.addTagToNote.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.addTagToNote.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.addTagToNote.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.addTagToNote.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.create_text_file_db", "Filter code method": "Dropbox.createTextFileDb.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.create_text_file_db\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.createTextFileDb.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Content", "Helper text": "Use &lt;br&gt; to add line breaks", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.createTextFileDb.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.createTextFileDb.setPath(string: path)"}}], "filter_code": "if (Tag === \"Dropbox\") {\n  const filename = \"Notes_\" + Title;\n  const body = BodyHTML.replace(/&lt;br&gt;/g, \"\\n\");\n  Dropbox.createTextFileDb.setFilename(filename).setBody(body).run();\n} else {\n  Dropbox.createTextFileDb.skip(\"Invalid tag\")\n}", "intent": "Create a text file in Dropbox when a specific tag (e.g., \"Dropbox\") is added to an Evernote note."}
{"original_description": "Automatically have a task added to your Google Task list when there is a new event created on your Google Calendar.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.new_event_added"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.newEventAdded.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.newEventAdded.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.newEventAdded.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.newEventAdded.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.newEventAdded.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.newEventAdded.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.newEventAdded.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Created at\nDate and time the event was created.", "description": "Date and time the event was created.", "details": {"Slug": "CreatedAt", "Filter code": "GoogleCalendar.newEventAdded.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.newEventAdded.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Google Tasks", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_tasks.add_task_to_tasklist", "Filter code method": "GoogleTasks.addTaskToTasklist.skip(string?: reason)", "Runtime method": "runAction(\"google_tasks.add_task_to_tasklist\", {})"}, "action_details": [{"section": "Action fields", "title": "Tasklist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which task list?", "Helper text": "The task list to which the task should be added.", "Slug": "tasklist_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task title\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What is the title of the task?", "Slug": "task_title", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Title(string: task_title)"}}, {"section": "Action fields", "title": "Task notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What are the notes to include in the task?", "Helper text": "Notes describing the task", "Slug": "task_notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setTask Notes(string: task_notes)"}}, {"section": "Action fields", "title": "Due date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Does the task have a due date?", "Helper text": "Field only sets the date. Ex. Next Tuesday, Today.", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleTasks.addTaskToTasklist.setDue Date(string: due_date)"}}], "filter_code": "if (Calendar === \"birthday\" || Calendar === \"focusTime\") {\n  // Skip non-standard calendar events\n  GoogleTasks.addTaskToTasklist.skip(\"Non-standard calendar event\")\n} else if (!Title) {\n  // Set default title if not provided\n  GoogleTasks.addTaskToTasklist.setTaskTitle(\"New Event: \" + Title)\n}\n\n// Add the task to the specified task list\nGoogleTasks.addTaskToTasklist({\n  task_title: Title,\n  due_date: Ends,\n  task_notes: Description,\n  // task notes can be empty if not provided\n})", "intent": "When a new event is added to Google Calendar, add a task to the specified task list with the title and notes from the event."}
{"original_description": "Create a text file in Dropbox.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.create_text_file_db", "Filter code method": "Dropbox.createTextFileDb.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.create_text_file_db\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.createTextFileDb.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Content", "Helper text": "Use &lt;br&gt; to add line breaks", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.createTextFileDb.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.createTextFileDb.setPath(string: path)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Pattern === \"***\") {\n  var filename = \"IFTTT_\" + Knocki.knocki.Device;\n  Dropbox.createTextFileDb.setFilename(filename);\n  Dropbox.createTextFileDb.setBody(\"Created by IFTTT\");\n  Dropbox.createTextFileDb.runAction();\n} else {\n  Dropbox.createTextFileDb.skip(\"Invalid gesture or pattern\")\n}", "intent": "Create a text file in Dropbox when Knocki detects a specific gesture and pattern, with a unique filename based on the device ID."}
{"original_description": "Set your Philips Hue lights to automatically turn orange if the temperature is below 10° outside.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Netatmo.temperatureDropsBelow.MeasuredTemperatureC < threshold_value) {\n  Hue.setColorAllHue.skip(\"Temperature too low\")\n} else {\n  var color = \"orange\"\n  Hue.setColorAllHue.setColor(color)\n}", "intent": "Set Philips Hue lights to automatically turn orange if the temperature is below 10° outside."}
{"original_description": "Create your emails as note cards", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Zoho Notebook", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "notebook.create_notecard_with_html", "Filter code method": "Notebook.createNotecardWithHtml.skip(string?: reason)", "Runtime method": "runAction(\"notebook.create_notecard_with_html\", {})"}, "action_details": [{"section": "Action fields", "title": "Notebook name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Notebook", "Slug": "notebook_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Note content\nText input > Other", "description": "Text input > Other", "details": {"Label": "HTML Content", "Slug": "note_content", "Required": "true", "Can have default value": "true", "Filter code method": "Notebook.createNotecardWithHtml.setNote Content(string: note_content)"}}, {"section": "Action fields", "title": "Notecard name\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notecard Name", "Slug": "notecard_name", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createNotecardWithHtml.setNotecard Name(string: notecard_name)"}}, {"section": "Action fields", "title": "Tags\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Tags", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createNotecardWithHtml.setTags(string: tags)"}}], "filter_code": "var Tag = Email.sendIftttAnEmailTagged.tag\nvar BodyHTML = Email.sendIftttAnEmailTagged.BodyHTML\nNotebook.createNotecardWithHtml.setNoteContent(BodyHTML)\nif (Notebook.createNotecardWithHtml.setTags(Tag) === false) {\n  Notebook.createNotecardWithHtml.skip(\"Failed to set tags\")\n}", "intent": "Create a new notecard with an email as a note card, using the tag and body of the email."}
{"original_description": "This Applet turns your Evernote notes into tasks - you specify the project and section as well as the task title.", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "MeisterTask", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "meistertask.create_a_task", "Filter code method": "Meistertask.createATask.skip(string?: reason)", "Runtime method": "runAction(\"meistertask.create_a_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which section?", "Slug": "section_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Meistertask.createATask.setTask Description(string: task_description)"}}], "filter_code": "// Get trigger data\nvar notebook = $$Notebook$$; // Extracted from Trigger fields - Notebooks dropdown list\nvar title = $$Title$$; // Evernote.newNoteInNotebook.Title\nvar bodyHTML = $$BodyHTML$$; // Evernote.newNoteInNotebook.BodyHTML\nvar publicUrl = $$PublicUrl$$; // Evernote.newNoteInNotebook.PublicUrl\nvar tags = $$Tags$$; // Evernote.newNoteInNotebook.Tags\nvar createdAt = $$CreatedAt$$; // Evernote.newNoteInNotebook.CreatedAt\n\n// Check if the note is in a specific notebook\nif (notebook !== \"Specific Notebook\") {\n  Meistertask.createATask.skip(\"Not in Specific Notebook\")\n}\n\n// Create a new task in MeisterTask with the given details\nMeistertask.createATask({\n  section_id: $$SectionId$$, // Extracted from Action fields - Section dropdown list\n  task_name: title,\n  task_description: bodyHTML\n})", "intent": "Automate MeisterTask creation from Evernote new note in notebook event."}
{"original_description": "This applet is for you if you can't watch something if it isn't in your todo list :-) ", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Todoist", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "todoist.create_task", "Filter code method": "Todoist.createTask.skip(string?: reason)", "Runtime method": "runAction(\"todoist.create_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Project\nDropdown list", "description": "Dropdown list", "details": {"Label": "Project and section", "Helper text": "Project and section to which the task belongs", "Slug": "project_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Task content\nText input", "description": "Text input", "details": {"Label": "Task content", "Helper text": "<a href=\"https://todoist.com/help/articles/205195102\" target=\"_blank\">Text formatting guide</a> and <a href=\"https://todoist.com/help/articles/360000029000\" target=\"_blank\">label format guide</a>", "Slug": "task_content", "Required": "true", "Can have default value": "true", "Filter code method": "Todoist.createTask.setTask Content(string: task_content)"}}, {"section": "Action fields", "title": "Note\nText input > Other", "description": "Text input > Other", "details": {"Label": "Note", "Helper text": "Add additional task note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setNote(string: note)"}}, {"section": "Action fields", "title": "Due date\nText input > Other", "description": "Text input > Other", "details": {"Label": "Task's due date", "Helper text": "Check the <a href=\"https://todoist.com/help/articles/205325931\" target=\"_blank\">Due dates and times format guide</a>", "Slug": "due_date", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setDue Date(string: due_date)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Priority", "Helper text": "Task's priority", "Slug": "priority", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setPriority(string: priority)"}}, {"section": "Action fields", "title": "Task description\nText input > Other", "description": "Text input > Other", "details": {"Label": "Task description", "Helper text": "Task's description", "Slug": "task_description", "Required": "false", "Can have default value": "true", "Filter code method": "Todoist.createTask.setTask Description(string: task_description)"}}], "filter_code": "if (Putio.transferFinished.Type === 'File' && Putio.transferFinished.Name !== '') {\n  var taskContent = \"Downloaded: \" + Putio.transferFinished.Name;\n} else if (Putio.transferFinished.Type === 'Folder' || Putio.transferFinished.Type === 'Directory') {\n  var taskContent = \"Transferred folder: \" + Putio.transferFinished.Name;\n} else {\n  var taskContent = \"Transferred: \" + Putio.transferFinished.FileId;\n}\nvar project = \"My Projects\";\nTodoist.createTask.setProjectID(project);\nTodoist.createTask.setTaskContent(taskContent);\nif (Putio.transferFinished.DownloadUrl !== '') {\n  Todoist.createTask.setNote(\"Download available at: \" + Putio.transferFinished.DownloadUrl);\n}\nif (Putio.transferFinished.ViewUrl !== '') {\n  Todoist.createTask.setNote(\"View available at: \" + Putio.transferFinished.ViewUrl);\n}\nTodoist.createTask.run();", "intent": "Create a Todoist task if the transfer is finished and has a specific type, name, or description."}
{"original_description": "Organize the things you need to complete by adding tasks to Asana every time your JotForm form gets a new entry", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Asana", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "asana.create_task", "Filter code method": "Asana.createTask.skip(string?: reason)", "Runtime method": "runAction(\"asana.create_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Project name\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "In which project?", "Helper text": "Enter project name exactly as it appears in Asana.", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true", "Filter code method": "Asana.createTask.setTask Name(string: task_name)"}}, {"section": "Action fields", "title": "Notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notes", "Helper text": "Optional", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Due on\nText input > Other", "description": "Text input > Other", "details": {"Label": "Due on", "Helper text": "Optional. Use a date Ingredient or enter as YYYY-MM-DD", "Slug": "due_on", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setDue On(string: due_on)"}}, {"section": "Action fields", "title": "Assignee\nDropdown list", "description": "Dropdown list", "details": {"Label": "Assignee", "Helper text": "Optional", "Slug": "assignee", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tag name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Add a tag?", "Helper text": "Optional", "Slug": "tag_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Attach a file\nText input > File", "description": "Text input > File", "details": {"Label": "Attach a file?", "Slug": "attach_a_file", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setAttach A File(string: attach_a_file)"}}], "filter_code": "if (Jotform.latestFormSubmission.FormID !== \"\" && Jotform.latestFormSubmission.SubmissionDateTime !== \"\") {\n  var formTitle = Jotform.latestFormSubmission.FormTitle\n  var submissionDate = Jotform.latestFormSubmission.SubmissionDateTime\n  var totalSubmissions = Jotform.latestFormSubmission.TotalSubmissions\n  \n  // Check if the question filter is present and not empty\n  if (Jotform.latestFormSubmission.question_filter !== \"\") {\n    var questionFilter = \" - \" + Jotform.latestFormSubmission.question_filter\n  } else {\n    var questionFilter = \"\"\n  }\n  \n  // Create a new task in Asana with specified project name, task name, notes, due date, assignee, and tag\n  if (Asana.createTask.skip() !== \"\") {\n    Asana.createTask.setWhichWorkspace(\"Your Workspace Name\")\n    .setProjectName(Jotform.latestFormSubmission.form_id)\n    .setTaskName(formTitle + questionFilter)\n    .setNotes(\"New task created from JotForm submission: \" + submissionDate)\n    .setDueOn(submissionDate) // Assuming the due date is the same as the submission date\n    .setAssignee(Jotform.latestFormSubmission.ip) // Assuming the assignee is the IP address of the submitter\n  }\n}", "intent": "This IFTTT automation creates a new task in Asana every time a new entry is received from JotForm. The form data includes various fields such as IP address, form title, submission date and time, total submissions, form ID, submission ID, rich text data, spreadsheet data, filtered rich text data, filtered spreadsheet data, and file URL. The automation checks the form dropdown list for \"Form\" and \"Question filter\", and then uses these values to create a new task in Asana with specified project name, task name, notes, due date, assignee, and tag."}
{"original_description": "Create your own visual alert by blinking your Philips Hue lights when air quality goes bad.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var UhooDevice = $$device$$;\nvar UhooSensor = $$sensor$$;\nvar MyThreshold = parseInt(***my_threshold***);\nvar TriggerCondition = ***trigger_condition***;\n\nif (UhooSensor === \"Temperature\" && UhooData Temperature > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"Humidity\" && UhooData Humidity < MyThreshold) {\n  Hue.blinkAllHue.skip(\"Below threshold\");\n} else if (UhooSensor === \"PM2.5\" && UhooData PM2.5 > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"CO2\" && UhooData CO2 > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"CO\" && UhooData CO > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"TVOC\" && UhooData TVOC > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"NO2\" && UhooData NO2 > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"Ozone\" && UhooData Ozone > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n} else if (UhooSensor === \"Air Pressure\" && UhooData Air Pressure < MyThreshold) {\n  Hue.blinkAllHue.skip(\"Below threshold\");\n} else if (UhooSensor === \"Virus Index\" && UhooData VirusIndex > MyThreshold) {\n  Hue.blinkAllHue.skip(\"Above threshold\");\n}\n\nelse {\n  Hue.blinkAllHue();\n}", "intent": "Automatically blink Philips Hue lights when air quality goes bad."}
{"original_description": "Copy the notes you create in Evernote as note cards in Notebook", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Zoho Notebook", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "notebook.create_notecard_with_html", "Filter code method": "Notebook.createNotecardWithHtml.skip(string?: reason)", "Runtime method": "runAction(\"notebook.create_notecard_with_html\", {})"}, "action_details": [{"section": "Action fields", "title": "Notebook name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Notebook", "Slug": "notebook_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Note content\nText input > Other", "description": "Text input > Other", "details": {"Label": "HTML Content", "Slug": "note_content", "Required": "true", "Can have default value": "true", "Filter code method": "Notebook.createNotecardWithHtml.setNote Content(string: note_content)"}}, {"section": "Action fields", "title": "Notecard name\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notecard Name", "Slug": "notecard_name", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createNotecardWithHtml.setNotecard Name(string: notecard_name)"}}, {"section": "Action fields", "title": "Tags\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Tags", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Notebook.createNotecardWithHtml.setTags(string: tags)"}}], "filter_code": "var NotebookName = $$Notebook$$\nif (NotebookName === \"\") {\n  Notebook.createNotecardWithHtml.skip(\"No notebook selected\")\n}\nvar NoteContent = $$Title$$\nif (NoteContent === \"\") {\n  NoteContent = \"Copy of Evernote note\"\n}\nvar NotecardName = $$NotecardName$$ || \"\"\nvar Tags = $$Tags$$ || \"\"\n\nNotebook.createNotecardWithHtml(NoteContent, NotecardName, Tags)", "intent": "Copy Evernote notes to Zoho Notebook as note cards, using a notebook dropdown list and optional note content, notecard name, and tags."}
{"original_description": "When water/soil-moisture sensor shows too dry, start watering on Rachio", "trigger_channel": "Wireless Tag", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wirelesstag.too_dry"}, "trigger_details": [{"section": "Trigger fields", "title": "Uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Slug": "uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Math\nText input > Other", "description": "Text input > Other", "details": {"Label": "Math expression", "Helper text": "Optional math expression to calculate the ingredient &quot;answer&quot;, for example, &quot;RH-50&quot; to calculate current humidity (%) minus 50.", "Slug": "math", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity percentage\nHumidity (in %) at the time of the event.", "description": "Humidity (in %) at the time of the event.", "details": {"Slug": "RH", "Filter code": "Wirelesstag.tooDry.HumidityPercentage", "Type": "String", "Example": "10.1"}}, {"section": "Ingredients", "title": "Tag name\nName of the tag.", "description": "Name of the tag.", "details": {"Slug": "name", "Filter code": "Wirelesstag.tooDry.TagName", "Type": "String", "Example": "Cellar"}}, {"section": "Ingredients", "title": "Occurred at\nDate and time of the event.", "description": "Date and time of the event.", "details": {"Slug": "happened", "Filter code": "Wirelesstag.tooDry.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Comment\nComment field of the tag.", "description": "Comment field of the tag.", "details": {"Slug": "comment", "Filter code": "Wirelesstag.tooDry.Comment", "Type": "String", "Example": "that tulip"}}, {"section": "Ingredients", "title": "Answer\nCalculation result of the \"Math expression\".", "description": "Calculation result of the \"Math expression\".", "details": {"Slug": "answer", "Filter code": "Wirelesstag.tooDry.Answer", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Tag image url\nURL to the picture you took to identify the tag.", "description": "URL to the picture you took to identify the tag.", "details": {"Slug": "image_url", "Filter code": "Wirelesstag.tooDry.TagImageURL", "Type": "Image URL", "Example": "http://mytaglist.com/eth/tags/c5bf3859-eb13-4482-8eb4-d87bd769bd89.jpg"}}], "action_channel": "Rachio Irrigation Controller", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rachio_iro.start_zone", "Filter code method": "RachioIro.startZone.skip(string?: reason)", "Runtime method": "runAction(\"rachio_iro.start_zone\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Slug": "zone_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "How many minutes to water?", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "RachioIro.startZone.setDuration(string: duration)"}}], "filter_code": "var RH = Wirelesstag.tooDry.HumidityPercentage\nif (Math.abs(RH - parseInt(Meta.currentUserTime.format(\"HH\"))) > 5) {\n  if (RachioIro.startZone.skip(\"Invalid duration\")) {\n    RachioIro.startZone.setDuration(\"60\")\n  }\n} else {\n  RachioIro.startZone.start()\n}", "intent": "When the Wireless Tag sensor shows too dry, start watering on Rachio based on the humidity percentage and math expression."}
{"original_description": "With SmartThings, a compatible moisture detector and a woopla phone account you can receive a quick phone call if there's a potentially damaging leak detected.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.moisture_detected_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Moisture detected at\nThe date and time the sensor measured the presence of moisture.", "description": "The date and time the sensor measured the presence of moisture.", "details": {"Slug": "MoistureDetectedAt", "Filter code": "SmartthingsV2.moistureDetectedSmartthings.MoistureDetectedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.moistureDetectedSmartthings.DeviceName", "Type": "String", "Example": "Basement leak sensor"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (SmartthingsV2.moistureDetectedSmartthings.Device === \"Basement leak sensor\") {\n  var TtsMessage = \"Leak detected in the basement. Please check and address the issue ASAP.\"\n  Woopla.ttsCall.setTts(TtsMessage)\n  Woopla.ttsCall.run()\n} else {\n  Woopla.ttsCall.skip(\"No leakage detected\")\n}", "intent": "With SmartThings, a compatible moisture detector and a Woopla phone account, receive a quick phone call if there's a potentially damaging leak detected."}
{"original_description": "", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_plugged_in"}, "trigger_details": [{"section": "Ingredients", "title": "Power source\nThe source of the charge.", "description": "The source of the charge.", "details": {"Slug": "PowerSource", "Filter code": "AndroidBattery.batteryPluggedIn.PowerSource", "Type": "String", "Example": "AC"}}, {"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryPluggedIn.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device was plugged in.", "description": "The time the device was plugged in.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryPluggedIn.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryPluggedIn.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Telldus Live!", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telldus.turn_off_a_device", "Filter code method": "Telldus.turnOffADevice.skip(string?: reason)", "Runtime method": "runAction(\"telldus.turn_off_a_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AndroidBattery.batteryPluggedIn.PowerSource === \"AC\" && parseInt(AndroidBattery.batteryPluggedIn.BatteryPercentage) < 30) {\n  var reason = \"Low battery\";\n  try {\n    Telldus.turnOffADevice.runAction(\"telldus.turn_off_a_device\", {\"which_device\": \"select_device_here\"});\n  } catch (error) {\n    Telldus.turnOffADevice.skip(reason);\n  }\n}", "intent": "Check if the power source is AC and the battery percentage is less than 30. If so, turn off a device using Telldus Live!."}
{"original_description": "Turns on or off the eWeLink 1-Channel Plug of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plug_action", "Filter code method": "Ewelink.plugAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plug_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plug query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 1-Channel Plug?", "Slug": "plug_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n  var OnOff = Apilio.iftttActionReports.ApilioValue1;\n  if (OnOff === \"Green\") {\n    Ewelink.plugAction(\"Turn on\", \"Plug query\");\n  } else {\n    Ewelink.plugAction(\"Turn off\", \"Plug query\");\n  }\n} else {\n  Ewelink.plugAction.skip(\"Event name does not match the specified condition\")\n}", "intent": "This IFTTT filter code checks if the Apilio event name matches a specific condition and then turns on or off an eWeLink 1-Channel Plug based on the condition."}
{"original_description": "Let MyQ garage close automatically whenever you lock your August lock.\n\nThis applet requires an active account linking subscription.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "MyQ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myq_devices.close_door", "Filter code method": "MyqDevices.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"myq_devices.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door name\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the door name?", "Slug": "door_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var LockName = Augusthome.lockLocked.LockName;\nif (LockName === \"Front Door\" && Meta.currentUserTime.hour() >= 6 && Meta.currentUserTime.hour() <= 22) {\n  MyqDevices.closeDoor(\"August lock closed automatically\");\n} else {\n  MyqDevices.closeDoor.skip(\"Outside of active hours or wrong lock\")\n}", "intent": "When the August lock is locked, check which lock it is and if it's during a specific time range. If true, close the MyQ garage door."}
{"original_description": "Turns on or off the eWeLink 2-Channel Plug of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plugs3_action", "Filter code method": "Ewelink.plugs3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plugs3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plugs3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Plug?", "Slug": "plugs3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Plugs3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "plugs3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "var plugs3Query = [Trigger].ifttt_action_identifier\nvar outletQuery = [Trigger].ifttt_action_name\nif (plugs3Query === \"Plug1\" && outletQuery === \"Outlet1\") {\n  if ([Trigger].custom_value_1 === \"Green\") {\n    Ewelink.plugs3Action.turnOn(\"Turn on Green\")\n  } else if ([Trigger].custom_value_1 === \"Blue\") {\n    Ewelink.plugs3Action.turnOff(\"Turn off Blue\")\n  } else if ([Trigger].custom_value_1 === \"Red\") {\n    Ewelink.plugs3Action.setOutlet([Trigger].custom_value_2, \"Set outlet to custom value 2\")\n  }\n} else if (plugs3Query === \"Plug2\" && outletQuery === \"Outlet2\") {\n  // handle Plug2 and Outlet2 logic\n} else {\n  Ewelink.plugs3Action.skip(\"Unknown plug query or outlet query\")\n}", "intent": "Toggles the eWeLink 2-Channel Plug based on Apilio trigger conditions."}
{"original_description": "Turns on your MyQ light at a specific time.\n\nThis Applet requires an active account linking subscription and the IFTTT mobile app.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyQ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myq_devices.light_on", "Filter code method": "MyqDevices.lightOn.skip(string?: reason)", "Runtime method": "runAction(\"myq_devices.light_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Light name\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the light name?", "Helper text": "light name", "Slug": "light_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time === \"Your Desired Time\") {\n  MyqDevices.lightOn(\"Your Light Name\")\n} else {\n  MyqDevices.lightOn.skip(\"Not the desired time\")\n}", "intent": "Automatically turns on a specified MyQ light at a specific time of day."}
{"original_description": "Turns off your MyQ light at a specific time.\n\nThis Applet requires an active account linking subscription.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyQ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myq_devices.light_off", "Filter code method": "MyqDevices.lightOff.skip(string?: reason)", "Runtime method": "runAction(\"myq_devices.light_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Light name\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the light name?", "Helper text": "light name", "Slug": "light_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime > new Date(Meta.currentUserTime.format(\"YYYY/MM/DD HH:mm\")) + ' 00:00') {\n  if (DateAndTime.everyDayAt.CheckTime !== Meta.currentUserTime.format(\"YYYY/MM/DD HH:mm\") + ' 23:59') {\n    MyqDevices.lightOff.skip(\"Not the scheduled time\")\n  } else {\n    MyqDevices.lightOff(MyqDevices.light_name)\n  }\n} else {\n  MyqDevices.lightOff.skip(\"Not yet the scheduled time\")\n}", "intent": "This Applet will turn off a MyQ light at a specified time of day."}
{"original_description": "Turns on or off the eWeLink 3-Channel Plug of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plugs3_action", "Filter code method": "Ewelink.plugs3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plugs3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plugs3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Plug?", "Slug": "plugs3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Plugs3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "plugs3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === 'run_only_at_nighttime') {\n  var plugs3Query = Apilio.iftttActionReports.ApilioValue1;\n  var plugs3OutletQuery = Apilio.iftttActionReports.custom_value_2;\n  var onoffActQuery = Apilio.iftttActionReports.custom_value_3;\n  \n  Ewelink.plugs3Action.runAction({\n    \"plugs3_query\": plugs3Query,\n    \"plugs3_outlet_query\": plugs3OutletQuery,\n    \"onoff_act_query\": onoffActQuery\n  });\n} else {\n  Ewelink.plugs3Action.skip(\"Invalid event name\");\n}", "intent": "Check if the Apilio event name is \"run_only_at_nighttime\" and then toggle the eWeLink 3-Channel Plug based on a custom condition."}
{"original_description": "Turns on or off the eWeLink 4-Channel Plug of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.plugs3_action", "Filter code method": "Ewelink.plugs3Action.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.plugs3_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Plugs3 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 3-Channel Plug?", "Slug": "plugs3_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Plugs3 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "plugs3_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Let your loved ones know the dinner is on the table – no running all the way upstairs necessary.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "const EveningHours = function() {\n  const Hour = new Date(HcOven.ovenFinished.CreatedAt).getHours()\n  return Hour >= 18 && Hour <= 23\n}\n\nif (EveningHours()) {\n  if (HaDropdown.list === \"Selected Option\") {\n    Hue.blinkAllHue(\"Dinner is ready!\")\n  } else {\n    Hue.blinkAllHue.skip(\"No lights selected\")\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Not during evening hours\")\n}", "intent": "Trigger the Philips Hue action when the Home Connect Oven is finished cooking, and the dropdown list 'HaDropdown list' selected by a user. If the time of creation is during evening hours (18:00-23:59), notify loved ones that dinner is ready."}
{"original_description": "If the Honeywell thermostat is set to cool, this applet changes the temperature to 80 F (configurable) to avoid running air conditioning during an #OhmHour.", "trigger_channel": "OhmConnect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ohmconnect.ohm_hour_start"}, "trigger_details": [{"section": "Ingredients", "title": "Ohm hour start\nDate and time #OhmHour will start", "description": "Date and time #OhmHour will start", "details": {"Slug": "ohm_hour_start", "Filter code": "Ohmconnect.ohmHourStart.OhmHourStart", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ohm hour end\nDate and time #OhmHour will end", "description": "Date and time #OhmHour will end", "details": {"Slug": "ohm_hour_end", "Filter code": "Ohmconnect.ohmHourStart.OhmHourEnd", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setsystemtemperature", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "For heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Temperature in degrees e.g. 71", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature in", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}, {"section": "Action fields", "title": "Hours\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hours", "Helper text": "In whole numbers e.g. 3", "Slug": "hours", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setHours(string: hours)"}}], "filter_code": "if (Ohmconnect.ohmHourStart.OhmHourStart) {\n  var system = \"cool\";\n  var temperatureType = \"coolTemperature\";\n  var targetTemperature = 80; // configurable\n  var temperatureScale = \"F\"; // default to Fahrenheit\n  if (HoneywellTotalConnectComfort.getSystemMode() !== system) {\n    HoneywellTotalConnectComfort.setsystemtemperature.skip(\"Thermostat is not set to cool\");\n  } else {\n    HoneywellTotalConnectComfort.setsystemtemperature(\n      targetTemperature,\n      temperatureScale,\n      system,\n      temperatureType\n    );\n  }\n}", "intent": "When Ohm hour starts, change Honeywell thermostat to a configurable temperature (80 F by default) if it's set to cool."}
{"original_description": "If the Honeywell thermostat is set to cool, this applet changes the temperature to 72 F (configurable) to have the air conditioning running again.", "trigger_channel": "OhmConnect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ohmconnect.ohm_hour_end"}, "trigger_details": [{"section": "Ingredients", "title": "Ohm hour start\nDate and time #OhmHour will start.", "description": "Date and time #OhmHour will start.", "details": {"Slug": "ohm_hour_start", "Filter code": "Ohmconnect.ohmHourEnd.OhmHourStart", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ohm hour end\nDate and time #OhmHour will end.", "description": "Date and time #OhmHour will end.", "details": {"Slug": "ohm_hour_end", "Filter code": "Ohmconnect.ohmHourEnd.OhmHourEnd", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setsystemtemperature", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "For heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Temperature in degrees e.g. 71", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature in", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}, {"section": "Action fields", "title": "Hours\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hours", "Helper text": "In whole numbers e.g. 3", "Slug": "hours", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setHours(string: hours)"}}], "filter_code": "if (Ohmconnect.ohmHourEnd.OhmHourStart !== null && Ohmconnect.ohmHourEnd.OhmHourStart >= new Date() && \n   Ohmconnect.ohmHourEnd.OhmHourEnd !== null && Ohmconnect.ohmHourEnd.OhmHourEnd <= new Date()) {\n  if (HoneywellTotalConnectComfort.getSystemTemperature().temperatureScale === \"F\" && \n     HoneywellTotalConnectComfort.getSystemTemperature().targetTemperature >= 72) {\n    // Set temperature to 72 F\n    HoneywellTotalConnectComfort.setsystemtemperature({\n      system: \"cool\",\n      temperature_type: \"cool_temperature\",\n      target_temperature: \"72\",\n      temperature_scale: \"F\"\n    }).skip(\"Temperature is already set correctly\");\n  } else if (HoneywellTotalConnectComfort.getSystemTemperature().temperatureScale === \"C\" && \n             HoneywellTotalConnectComfort.getSystemTemperature().targetTemperature >= 22) {\n    // Set temperature to 72 F\n    var target_temperature = Math.round((72 - 32) * 5/9 + 32);\n    HoneywellTotalConnectComfort.setsystemtemperature({\n      system: \"cool\",\n      temperature_type: \"cool_temperature\",\n      target_temperature: \"\" + target_temperature,\n      temperature_scale: \"C\"\n    }).skip(\"Temperature is already set correctly\");\n  } else {\n    // Skip if not in cool mode\n    HoneywellTotalConnectComfort.setsystemtemperature.skip(\"Not in cool mode\");\n  }\n}", "intent": "Check if the Honeywell thermostat is set to cool, and if so, change the temperature to 72 F (configurable) to have the air conditioning running again."}
{"original_description": "Have your Philips Hue lights blink to let you know that your oven with Home Connect has finished cooking.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "const createdAt = HcOven.ovenFinished.CreatedAt;\nif (createdAt !== null) {\n  const haId = HomeConnectDropdown.getHaId();\n  if (haId === \"your_oven_id\") {\n    Hue.blinkAllHue(Hue.Lights); // Replace with actual light names\n  } else {\n    Hue.blinkAllHue.skip(\"Not the correct oven\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"No oven finished cooking\");\n}", "intent": "This automation checks when a Home Connect Oven finishes cooking and sends a notification to Philips Hue lights."}
{"original_description": "Have your Philips hue lights change color when your oven with Home Connect has finished preheating.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_preheated"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenPreheated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var LightSlug = \"hue.<?php echo $lights; ?>\";\nif (HcOven.ovenPreheated.CreatedAt) {\n  Hue.setColorAllHue.skip(\"Preheat finished\");\n} else {\n  Hue.setColorAllHue.setLight(LightSlug).setColor(\"<?php echo $color; ?>\");\n}", "intent": "When the Philips Hue lights should change color when the oven with Home Connect has finished preheating, check if it's a specific hue light and then set its color to the desired color."}
{"original_description": "Keep track how often your dishwasher runs. Every finished dishwasher cycle gets logged into a Google spreadsheet.\n", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var HaId = HcDishwasher.dishwasherCycleFinished.ha_id\nvar CreatedAt = HcDishwasher.dishwasherCycleFinished.CreatedAt\nvar Filename = GoogleSheets.appendToGoogleSpreadsheet.getFilename()\nvar FormattedRow = GoogleSheets.appendToGoogleSpreadsheet.getFormattedRow()\nvar Path = GoogleSheets.appendToGoogleSpreadsheet.getPath()\n\nif (!HaId) {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No Ha_id provided\")\n}\n\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(Filename)\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(FormattedRow)\nGoogleSheets.appendToGoogleSpreadsheet.setPath(Path)\n\nvar RowData = `{\"filename\": \"${Filename}\", \"formatted_row\": \"${FormattedRow}\", \"path\": \"${Path}\"}`\nGoogleSheets.appendToGoogleSpreadsheet.append(RowData, CreatedAt)", "intent": "The automation is triggered when the Home Connect Dishwasher finishes a cycle and creates a log of each finished cycle in a Google spreadsheet. It takes the Ha_id from the dropdown list, the created_at date and time event, the filename for the new spreadsheet, the formatted row with cell separation, and the path to the folder."}
{"original_description": "Keep track how often you wash. Every finished washer cycle gets logged into a Google spreadsheet.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var HaId = HcWasher.washerCycleFinished.HaId;\nif (!HaId) {\n  HcWasher.washerCycleFinished.skip(\"No HA ID provided\");\n}\nelse {\n  var createdAt = HcWasher.washerCycleFinished.CreatedAt;\n  var filename = GoogleSheets.appendToGoogleSpreadsheet.getFilename();\n  var formattedRow = GoogleSheets.appendToGoogleSpreadsheet.getFormattedRow();\n  var path = GoogleSheets.appendToGoogleSpreadsheet.getPath();\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename);\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  if (path) {\n    GoogleSheets.appendToGoogleSpreadsheet.setPath(path);\n  }\n}", "intent": "This automation checks when a Home Connect Washer cycle is finished and logs the event into a Google Spreadsheet. The trigger fields include a dropdown list to select which washer, and the action fields include filename, formatted row, and path."}
{"original_description": "Connect Spotify with Google Sheets to keep track of all of your recently played tracks", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_recently_played_track"}, "trigger_details": [{"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newRecentlyPlayedTrack.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newRecentlyPlayedTrack.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newRecentlyPlayedTrack.TrackUrl", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Played at\nThe time at which the track was played.", "description": "The time at which the track was played.", "details": {"Slug": "played_at", "Filter code": "Spotify.newRecentlyPlayedTrack.PlayedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newRecentlyPlayedTrack.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newRecentlyPlayedTrack.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Spotify.newRecentlyPlayedTrack.TrackName && \n    Spotify.newRecentlyPlayedTrack.ArtistName &&\n    Spotify.newRecentlyPlayedTrack.PlayedAt) {\n  const formattedRow = `|${Spotify.newRecentlyPlayedTrack.TrackName}|${Spotify.newRecentlyPlayedTrack.ArtistName}|${Spotify.newRecentlyPlayedTrack.PlayedAt}|;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Recent Tracks\")\n    .setFormattedRow(formattedRow)\n    .skip()\n}", "intent": "Connect Spotify with Google Sheets to keep track of all of your recently played tracks"}
{"original_description": "Log in Google Sheets when you start your Home Connect washer", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var CreatedAt = HcWasher.washerCycleStarted.CreatedAt;\nif (CreatedAt) {\n  var Filename = \"Home Connect Washer Log\";\n  var FormattedRow = \"||| Washer Started: \" + CreatedAt + \" |||\";\n  var Path = \"IFTTT\"; // default path\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(Filename);\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(FormattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(Path);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No washer cycle started\")\n}", "intent": "When the Home Connect washer starts a cycle, log in Google Sheets."}
{"original_description": "Have your Philips Hue lights blink to let you know that your laundry is complete.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcWasher.washerCycleFinished.CreatedAt) {\n  if (HomeConnectWasher.ha_id === $$ha_id$$) { // Replace with actual value\n    Hue.blinkAllHue(Hue.lights, \"Laundry cycle finished!\");\n  } else {\n    Hue.blinkAllHue.skip(\"Invalid washer selected\");\n  }\n}", "intent": "This IFTTT automation checks if the Home Connect Washer has finished a cycle. If it has, and the selected washer type matches the specified dropdown list value (e.g., \"Ha\\nDropdown list\"), then the Philips Hue lights are made to blink."}
{"original_description": "Have your Philips Hue lights blink to let you know that your dishwasher cycle is complete.", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "function checkDishwasherCycleFinished() {\n  const HcDishwasher = require('HomeConnect');\n  const Hue = require('PhilipsHue');\n  const createdAt = HcDishwasher.dishwasherCycleFinished.CreatedAt;\n  \n  if (createdAt) {\n    Hue.blinkAllHue.skip(\"No reason\");\n  } else {\n    Hue.blinkAllHue();\n  }\n}", "intent": "Automatically blink all Philips Hue lights when a dishwasher cycle finishes, based on Home Connect Dishwasher data."}
{"original_description": "Keep track how often your dryer runs. Every finished dryer cycle gets logged into a Google spreadsheet.\n", "trigger_channel": "Home Connect Dryer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dryer.dryer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dryer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDryer.dryerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (HcDryer.dryerCycleFinished.CreatedAt) {\n  var filename = \"Dryer Usage\";\n  var formattedRow = `|${Ha_id}||${CreatedAt}|`;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename);\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n}", "intent": "Track dryer usage by logging each finished cycle into a Google Sheets spreadsheet."}
{"original_description": "Get a notification on your iPhone, Android phone or any other device when your washer cycle is complete.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (HcWasher.washerCycleFinished.CreatedAt) {\n  var haId = $$ha_id$$;\n  if (!haId) {\n    IfNotifications.sendNotification.skip(\"Please select a washer\");\n  } else {\n    var message = \"Your washer cycle is complete! \";\n    // Add more information to the message as needed\n    IfNotifications.sendNotification.setMessage(message);\n  }\n}", "intent": "When the Home Connect Washer washer cycle is finished, send a notification with a customizable message."}
{"original_description": "Have your Philips Hue lights blink to let you know that your dryer cycle is complete.", "trigger_channel": "Home Connect Dryer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dryer.dryer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dryer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDryer.dryerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcDryer.dryerCycleFinished.ha_id) {\n  const lights = HcDryer.dryerCycleFinished.ha_id.toLowerCase();\n  if (!lights.includes(\"all\")) {\n    Hue.blinkAllHue.skip(\"Invalid light selection\");\n  } else {\n    var reason = \"\";\n    // Get the created_at time\n    var createdAt = new Date(HcDryer.dryerCycleFinished.CreatedAt);\n    // Blink all lights for a set amount of time (e.g., 5 seconds)\n    Hue.blinkAllHue.runAction({\"reason\": \"Dryer cycle complete at \" + createdAt.toLocaleString()})\n  }\n}", "intent": "When the Home Connect Dryer's cycle is finished, check if a light selection has been made. If so, use Philips Hue to blink all lights for that selection."}
{"original_description": "When your Withings Sleep detects you getting out of bed, turn on your Home Connect Coffee Machine", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WithingsSleep.bedout.DateandTime >= Meta.currentUserTime.date() + \"T\" + Meta.currentUserTime.hour() + \":00:00.000Z\") {\n  if (WithingsSleep.bedout.DeviceUser === \"Bed out has been detected by Tom's Nokia Sleep\") {\n    HcCoffeeMachine.coffeeMakerTurnOn(Ha)\n  } else {\n    HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Invalid device user\")\n  }\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Outside of active hours\")\n}", "intent": "When the Withings Sleep detects that a user gets out of bed, it should trigger an action to turn on the Home Connect Coffee Machine."}
{"original_description": "Press a button to turn off your Home Connect coffee machine", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_off", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var HaId = action_details[0].details.Ha_Id\nif (HaId === undefined) {\n  HcCoffeeMachine.coffeeMakerTurnOff.skip(\"No coffee machine selected\")\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOff(HaId)\n}", "intent": "Trigger a button press on the Home Connect Coffee Machine to turn it off."}
{"original_description": "Have your Sonos speaker play a favorite tune to let you know that your oven with Home Connect has finished cooking.\n", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "let TimeDelta = Math.abs((new Date().getTime() - HcOven.ovenFinished.CreatedAt.getTime()) / 60000)\nif (TimeDelta < 1800) {\n  Sonos.playFavorite(\"Your Favorite Tune\", \"Your Room\", true)\n} else {\n  Sonos.playFavorite.skip(\"Too late to play music\")\n}", "intent": "When the Home Connect oven finishes cooking, it will trigger a Sonos speaker to play the user's favorite tune. The filter code checks if the created_at timestamp is within a reasonable timeframe (e.g., 30 minutes) before playing the music."}
{"original_description": "Play music on your Android device when your laundry is complete.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_best_song", "Filter code method": "AndroidDevice.playBestSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_best_song\", {})"}, "action_details": [], "filter_code": "if (HcWasher.washerCycleFinished.ha_id === $$ha_id$$) {\n  AndroidDevice.playBestSong(\"Laundry complete!\")\n} else {\n  AndroidDevice.playBestSong.skip(\"Wrong washer ID\")\n}", "intent": "When the Home Connect Washer's cycle is finished, play a song on an Android device if the washer ID matches the specified value."}
{"original_description": "Play music on your Android device when your dishwasher cycle is complete.\n", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_best_song", "Filter code method": "AndroidDevice.playBestSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_best_song\", {})"}, "action_details": [], "filter_code": "if (HcDishwasher.dishwasherCycleFinished.CreatedAt) {\n  try {\n    const createdAt = new Date(HcDishwasher.dishwasherCycleFinished.CreatedAt);\n    if (createdAt.getHours() < 7 || createdAt.getHours() > 22) {\n      AndroidDevice.playBestSong.skip(\"Outside of active hours\");\n    } else {\n      AndroidDevice.playBestSong();\n    }\n  } catch (error) {\n    AndroidDevice.playBestSong.skip(\"Error: \" + error.message);\n  }\n}", "intent": "Play music on Android device when the dishwasher cycle is complete."}
{"original_description": "When your oven reaches preheat temperature, blink your Philips Hue lights.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_preheated"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenPreheated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var haId = HcOven.ovenPreheated.ha_id\nif (haId !== \"\") {\n  var createdAt = HcOven.ovenPreheated.CreatedAt\n  Hue.blinkAllHue(createdAt)\n} else {\n  Hue.blinkAllHue.skip(\"No oven selected\")\n}", "intent": "When the Home Connect Oven reaches its preheated temperature, blink all Philips Hue lights if a specific oven is selected."}
{"original_description": "Play music on your Android device when your dryer cycle is complete.", "trigger_channel": "Home Connect Dryer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dryer.dryer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dryer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDryer.dryerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_best_song", "Filter code method": "AndroidDevice.playBestSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_best_song\", {})"}, "action_details": [], "filter_code": "if (HcDryer.dryerCycleFinished.HaId === \"Your_Dryer_Name\") {\n  var createdAt = new Date(HcDryer.dryerCycleFinished.CreatedAt);\n  var now = new Date();\n  if (createdAt.getTime() < now.getTime()) {\n    AndroidDevice.playBestSong.skip(\"Dryer cycle has already finished\");\n  } else {\n    AndroidDevice.playBestSong()\n  }\n}", "intent": "Play music on the Android device when the dryer cycle is complete. The trigger checks for a specific dropdown list value (Ha_id) and uses the created at timestamp to determine if the dryer cycle has finished."}
{"original_description": "Go to bed without having to thinking about turning off the hood light. Just define a time every evening when the light shall turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_off", "Filter code method": "HcHood.hoodTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime >= Meta.currentUserTime.format(\"HH:mm\")) {\n  HcHood.hoodTurnOff(skip(\"Not yet bedtime\"))\n}", "intent": "Automatically turn off the hood light at a specified time every day."}
{"original_description": "Have your Philips Hue lights blink to let you know that your Cookit has finished cooking.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var HaId = $$trigger_ha_id$$;\nif (HcCookProcessor.cookProcessorFinished.CreatedAt !== null) {\n  var CreatedAt = new Date(HcCookProcessor.cookProcessorFinished.CreatedAt);\n  if (CreatedAt.getHours() < 7 || CreatedAt.getHours() > 22) {\n    Hue.blinkAllHue.skip(\"Outside of active hours\");\n  } else {\n    Hue.blinkAllHue({ lights: $$lights $$ });\n  }\n}", "intent": "Automate Philips Hue lights to blink when Cookit finishes cooking, based on a dropdown list of Cookit IDs and chosen lights."}
{"original_description": "Let your Sonos speaker play a favorite tune, when your washer cycle is complete.", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var Favorite = Meta.currentUserTriggerValues.ha_id\nvar Room = Meta.currentUserTriggerValues.room\nvar IncludeGroupedRooms = Meta.currentUserTriggerValues.include_grouped_rooms\nif (Favorite !== undefined && Room !== undefined) {\n  Sonos.playFavorite(Favorite, Room, IncludeGroupedRooms)\n} else {\n  Sonos.playFavorite.skip(\"Missing favorite or room selection\")\n}", "intent": "When the Home Connect Washer cycle is complete, play a favorite tune on the Sonos speaker based on user preferences."}
{"original_description": "When opening your dishwasher door, turn on a lighting scene with your Philips Hue lights in your kitchen.", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_door_opened"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherDoorOpened.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcDishwasher.dishwasherDoorOpened.scene) {\n  var SceneSlug = HcDishwasher.dishwasherDoorOpened.scene;\n  Hue.setScene(SceneSlug).then(() => {\n    // success\n  }).catch((error) => {\n    // error handling\n  });\n} else {\n  Hue.setScene.skip(\"No scene selected\");\n}", "intent": "When the dishwasher door is opened, check if a scene is selected and turn on the corresponding Philips Hue lighting scene in the kitchen."}
{"original_description": "Start your favorite coffee program with your preferred settings using the Button widget. \n", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_start_program", "Filter code method": "HcCoffeeMachine.coffeeMakerStartProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_start_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Helper text": "Please note that your coffee machine has to be connected and turned on (but not active) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Bean amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Strength", "Helper text": "Please note that not every value is supported by each program. For more information please check your user manual.", "Slug": "bean_amount", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fill quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Size", "Slug": "fill_quantity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Ha = $$ha_id$$\nvar Program = $$program$$\nvar BeanAmount = $$bean_amount$$\nvar FillQuantity = $$fill_quantity$$\n\nif (Ha === undefined || Program === undefined || BeanAmount === undefined || FillQuantity === undefined) {\n  HcCoffeeMachine.coffeeMakerStartProgram.skip(\"Incomplete settings\")\n}\n\nHcCoffeeMachine.coffeeMakerStartProgram(Ha, Program, BeanAmount, FillQuantity)", "intent": "Trigger the Home Connect Coffee Machine coffee maker program based on the button press, with specific settings for ha, program, bean amount, and fill quantity."}
{"original_description": "Wake up every morning to clean dishes. Just define a time when your dishwasher shall start every evening. Please make sure that remote start is activated and the door is closed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Dishwasher", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_start_program", "Filter code method": "HcDishwasher.dishwasherStartProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_dishwasher.dishwasher_start_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Helper text": "Please note that your dishwasher has to be connected (but not running) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the current time\nvar CurrentTime = DateAndTime.everyDayAt.CheckTime\n// Check if it's evening (6 PM - 11:59 PM)\nif (CurrentTime >= \"18:00\" && CurrentTime <= \"23:59\") {\n  // Start the dishwasher with the selected program\n  HcDishwasher.dishwasherStartProgram(\"Select Program\", \"Selected Dishwasher\")\n} else {\n  // Skip if it's not evening\n  HcDishwasher.dishwasherStartProgram.skip(\"Not evening\")\n}", "intent": ""}
{"original_description": "When your Home Connect washer is complete, change the color of your Philips Hue lights", "trigger_channel": "Home Connect Washer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_washer.washer_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which washer?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcWasher.washerCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (HcWasher.washerCycleFinished.CreatedAt) {\n  var haId = $$HaDropdownList$$\n  if (!haId) { Domovea.shadeClose.skip(\"No valid HA ID selected\") }\n  Hue.setColorAllHue.skip(reason: \"Home Connect washer cycle finished\")\n}", "intent": "This automation changes the color of Philips Hue lights when a Home Connect washer's cycle is complete, based on user selection."}
{"original_description": "Cette applet permet de régler automatiquement la température de vos radiateurs connectés Sauter à des heures et des jours prédéfinis.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyWeekdayAt.CheckTime\nif (CheckTime >= \"07:00\" && CheckTime <= \"22:00\") {\n  if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n    SAUTERCozytouch.launchActionGroup(\"Radiateur défini\", \"Régler la température\")\n  } else {\n    SAUTERCozytouch.launchActionGroup.skip(\"Seulement les jours fériés\")\n  }\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Hors heures de fonctionnement\")\n}", "intent": "Check if the current time is between 7am and 10pm on weekdays, otherwise skip the action."}
{"original_description": "Start playing your favorite song on your Sonos speaker when your dishwasher cycle is finished", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var DishwasherFinishTime = HcDishwasher.dishwasherCycleFinished.CreatedAt;\nvar Favorite = getFavorite();\nif (Sonos.playFavorite(Favorite, \"room\", \"\", true)) {\n  // Success\n} else {\n  Sonos.playFavorite.skip(\"Failed to play favorite\");\n}\n\n// Function to retrieve the chosen favorite\nfunction getFavorite() {\n  var HaId = ha_id; // Assuming \"ha_id\" is a required field\n  // Add logic here to retrieve the favorite based on the selected dishwasher\n  return \"Your Favorite\";\n}", "intent": "Start playing your favorite song on Sonos when the dishwasher cycle finishes."}
{"original_description": "Press the Button widget to activate the Super Cooling mode of the refrigerator.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Fridge Freezer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_fridge.freezer_activate_super_cooling", "Filter code method": "HcFridge.freezerActivateSuperCooling.skip(string?: reason)", "Runtime method": "runAction(\"hc_fridge.freezer_activate_super_cooling\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which fridge?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = new Date(Meta.currentUserTime.format(\"YYYY-MM-DDTHH:mm:ssZ\"))\nif (Time.getHours() >= 12 && Time.getHours() <= 22) {\n  HcFridge.freezerActivateSuperCooling()\n} else {\n  HcFridge.freezerActivateSuperCooling.skip(\"Outside of active hours\")\n}", "intent": "This filter checks if the button press occurred at a specific time, and if so, activates the Super Cooling mode of the refrigerator."}
{"original_description": "Help smanos get used to your routine and stand guard for you while you are home.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "smanos connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smanos.arm_stay", "Filter code method": "Smanos.armStay.skip(string?: reason)", "Runtime method": "runAction(\"smanos.arm_stay\", {})"}, "action_details": [{"section": "Action fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyWeekdayAt.CheckTime\nif (CheckTime >= \"10:00 AM\" && CheckTime < \"6:00 PM\") {\n  var DayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek\n  if (DayOfWeek == \"Monday\" || DayOfWeek == \"Tuesday\" || DayOfWeek == \"Wednesday\" || DayOfWeek == \"Thursday\" || DayOfWeek == \"Friday\") {\n    Smanos.armStay()\n  } else {\n    Smanos.armStay.skip(\"Not a weekday\")\n  }\n} else {\n  Smanos.armStay.skip(\"Outside of active hours\")\n}", "intent": "The intent is to check the time of day and the days of the week, then arm Smanos if it's a weekday during a specific time period."}
{"original_description": "Get a notification on your iPhone, Android phone or any other device when your Cookit has finished cooking.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var HaId = $$ha_id$$\nif (HcCookProcessor.cookProcessorFinished.CreatedAt) {\n  IfNotifications.sendNotification.setMessage(\"Cookit for \" + HaId + \" has finished cooking.\")\n  IfNotifications.sendNotification.runAction()\n} else {\n  IfNotifications.sendNotification.skip(\"No Cookit found\")\n}", "intent": "Generate a filter code that sends a notification when the Cookit has finished cooking. The notification should include the message entered by the user."}
{"original_description": "Have your Philips Hue lights in the Christmas Tree blink to let you know that your oven with Home Connect has finished cooking.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CreatedAt = HcOven.ovenFinished.CreatedAt\nif (HaDropdown.list.value === \"Your Oven\" && Date.now() - CreatedAt <= 30000) {\n  Hue.blinkAllHue(\"Oven finished cooking\")\n} else {\n  Hue.blinkAllHue.skip(\"No matching oven selection or event creation within the last 30 seconds\")\n}", "intent": "Automatically blink all Philips Hue lights when the Home Connect oven finishes cooking, conditional on a specific oven selection and date/time event creation."}
{"original_description": "Press your Flic button to turn on your coffee machine with Home Connect.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === \"double_click\") {\n  HcCoffeeMachine.coffeeMakerTurnOn(Ha)\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Not a double click\")\n}", "intent": "When Flic button is pressed, check if it's a 'double_click', if so, turn on the coffee machine with Home Connect."}
{"original_description": "Press the Button widget to activate the Super Freezing mode of the freezer.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Fridge Freezer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_fridge.freezer_activate_super_cooling", "Filter code method": "HcFridge.freezerActivateSuperCooling.skip(string?: reason)", "Runtime method": "runAction(\"hc_fridge.freezer_activate_super_cooling\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which fridge?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL) {\n  HcFridge.freezerActivateSuperCooling.skip(\"Share URL provided\")\n}", "intent": "When the Button widget is pressed, check if the Share URL ingredient exists and is not empty. If it does, skip activating Super Freezing mode of the freezer."}
{"original_description": "You can set dimming level if connected to bluetooth devices", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.bluetooth_connected"}, "trigger_details": [{"section": "Ingredients", "title": "Device name\nThe name of the Bluetooth device.", "description": "The name of the Bluetooth device.", "details": {"Slug": "DeviceName", "Filter code": "AndroidDevice.bluetoothConnected.DeviceName", "Type": "String", "Example": "Jawbone JAMBOX"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the Bluetooth device connected.", "description": "The time the Bluetooth device connected.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.bluetoothConnected.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "OSUM SMART", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "osumsmart.set_level", "Filter code method": "Osumsmart.setLevel.skip(string?: reason)", "Runtime method": "runAction(\"osumsmart.set_level\", {})"}, "action_details": [{"section": "Action fields", "title": "Device list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Devices", "Helper text": "Device to operate", "Slug": "device_list", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Levels\nDropdown list", "description": "Dropdown list", "details": {"Label": "Levels", "Helper text": "Level to set", "Slug": "levels", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceName = AndroidDevice.bluetoothConnected.DeviceName\nif (AndroidDevice.bluetoothConnected.OccurredAt) {\n  var levels = [\"Low\", \"Medium\", \"High\"]\n  if (levels.includes(//Levels//)) {\n    Osumsmart.setLevel(skip(`Setting level to ${//Levels//} for device ${DeviceName}`))\n  } else {\n    Osumsmart.setLevel.skip(\"Invalid level selected\")\n  }\n}", "intent": "Set dimming level for a connected Bluetooth device."}
{"original_description": "Press your Flic Button to make your favorite coffee with your Home Connect coffee machine", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_start_program", "Filter code method": "HcCoffeeMachine.coffeeMakerStartProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_start_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Helper text": "Please note that your coffee machine has to be connected and turned on (but not active) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Bean amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Strength", "Helper text": "Please note that not every value is supported by each program. For more information please check your user manual.", "Slug": "bean_amount", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fill quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Size", "Slug": "fill_quantity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var haId = $$ha_id$$\nvar program = $$program$$\nvar beanAmount = $$bean_amount$$\nvar fillQuantity = $$fill_quantity$$\n\nif (Flic.click.ClickType === \"single_click\") {\n  HcCoffeeMachine.coffeeMakerStartProgram(haId, program, beanAmount, fillQuantity)\n} else if (Flic.click.ClickType === \"double_click\") {\n  HcCoffeeMachine.coffeeMakerStartProgram.skip(\"Double click detected\")\n} else if (Flic.click.ClickType === \"hold\") {\n  HcCoffeeMachine.coffeeMakerStartProgram.skip(\"Hold detected\")\n}", "intent": "Use Flic button press to trigger coffee machine action based on selected options."}
{"original_description": "Have your Philips Hue lights in your Christmas tree blink to let you know that your dishwasher cycle is complete.", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_cycle_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherCycleFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Check if the dishwasher cycle has finished\nif (HcDishwasher.dishwasherCycleFinished) {\n  // Get the created at timestamp\n  var createdAt = HcDishwasher.dishwasherCycleFinished.CreatedAt;\n  \n  // Check which lights to blink\n  var lights = [\"YourChristmasTreeLights\"];\n  \n  // Blink all selected lights\n  Hue.blinkAllHue(lights);\n} else {\n  Hue.blinkAllHue.skip(\"No dishwasher cycle finished\");\n}", "intent": "This IFTTT automation uses Home Connect Dishwasher as a trigger and Philips Hue as an action. The automation checks when a dishwasher cycle is finished, then blinks all selected lights in the Christmas tree."}
{"original_description": "Blink your Philips Hue light in Rudolph's nose when the cooking timer has elapsed", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_timer_elapsed"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenTimerElapsed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "function filter() {\n  var haId = HcOven.ovenTimerElapsed.ha_id\n  if (haId === \"\" || haId === null) {\n    Hue.blinkAllHue.skip(\"No oven selected\")\n  } else {\n    var lights = [String].split(\",\")[0]\n    var createdAt = HcOven.ovenTimerElapsed.CreatedAt\n    // Rudolph's nose color: Red\n    Hue.blinkAllHue({ \"lights\": lights, \"color\": \"#FF0000\" })\n  }\n}", "intent": "When the Home Connect Oven timer elapses, check if a Philips Hue light is selected. If not, skip the action. Otherwise, blink the selected lights with Rudolph's nose color."}
{"original_description": "Stop playing music on your Sonos speaker when you open the dishwasher door, to empty out the dishwasher", "trigger_channel": "Home Connect Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_door_opened"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcDishwasher.dishwasherDoorOpened.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var createdAt = HcDishwasher.dishwasherDoorOpened.CreatedAt\nif (createdAt !== null) {\n  var haId = $$ha_id$$\n  if (haId === \"\") {\n    // Select a default room or alert the user\n  }\n  Sonos.pause.skip(\"Music paused due to dishwasher door opening\")\n}", "intent": "Stop music playback on Sonos speaker when the dishwasher door opens."}
{"original_description": "Keep track of your prepared meals. Every time you cook a meal the event gets logged into a Google spreadsheet.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (HcCookProcessor.cookProcessorStarted) {\n  var createdAt = HcCookProcessor.cookProcessorStarted.CreatedAt;\n  var haId = triggerObject.ha_id; // Get the value from the dropdown list\n  var filename = \"Prepared Meals\"; // Set a default filename if not provided\n  var formattedRow = \"|||Created at: \" + createdAt + \" |||Cookit ID: \" + haId;\n  var path = \"IFTTT\"; // Default to IFTTT folder\n  GoogleSheets.appendToGoogleSpreadsheet(filename, formattedRow, path).run();\n}", "intent": "Keep track of prepared meals by logging each event into a Google spreadsheet when the Home Connect Cookit is started."}
{"original_description": "Never forget a special day like a birthday or anniversary. Let the ambient light of your hood remind you. \n", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_on", "Filter code method": "HcHood.hoodTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyYearOn.CheckTime;\nif (CheckTime.includes(\"0\") && CheckTime.includes(\":\")) {\n  var DatePart = CheckTime.split(\" \")[0];\n  var TimePart = CheckTime.split(\" \")[1];\n  if (DatePart === Meta.currentUserDate.month() + \"/\" + Meta.currentUserDate.date()) {\n    HcHood.hoodTurnOn.skip(\"Not a special date\");\n  } else {\n    HcHood.hoodTurnOn();\n  }\n} else {\n  HcHood.hoodTurnOn.skip(\"Invalid time format\");\n}", "intent": "Never forget a special day like a birthday or anniversary by turning on the ambient light of your Home Connect Hood."}
{"original_description": "Starts Arlo recording when a device connect to Hubitat detects motion.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_no_motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Inactive at\nDate/Time motion stopped.", "description": "Date/Time motion stopped.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerNoMotion.InactiveAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nThe name of the device that no longer detects motion.", "description": "The name of the device that no longer detects motion.", "details": {"Slug": "src", "Filter code": "Hubitat.triggerNoMotion.Device", "Type": "String", "Example": "Living Room Light"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.record", "Filter code method": "Arlo.record.skip(string?: reason)", "Runtime method": "runAction(\"arlo.record\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "How long?", "Helper text": "How long Arlo will record in seconds.", "Slug": "duration", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerNoMotion.Device !== \"\") {\n  var inactiveAt = new Date(Hubitat.triggerNoMotion.InactiveAt);\n  var now = new Date();\n  if (now.getTime() - inactiveAt.getTime() < 60 * 1000) { // 1 minute\n    Arlo.record.skip(\"Too recent\")\n  } else {\n    Arlo.record.runAction({\"device_name\": Hubitat.triggerNoMotion.Device, \"duration\": 10}, function(error, result) {})\n  }\n}", "intent": "Starts Arlo recording when a device connects to Hubitat and detects motion."}
{"original_description": "Turn on your coffee machine every morning at a set time, to make sure the appliance is rinsed.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime >= 6 && DateAndTime.everyDayAt.CheckTime <= 10) {\n  HcCoffeeMachine.coffeeMakerTurnOn(\"Rinse the coffee machine\")\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Outside of designated time range\")\n}", "intent": "Automate the Home Connect Coffee Machine to turn on every morning at a set time, ensuring the appliance is rinsed."}
{"original_description": "Have your Philips Hue lights blink to let you know that your Roxxter starts.", "trigger_channel": "Home Connect Roxxter", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cleaning_robot.cleaning_robot_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Roxxter?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCleaningRobot.cleaningRobotStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var haId = $$trigger_details[0].details.Slug$$\nif (HcCleaningRobot.cleaningRobotStarted.CreatedAt) {\n  Hue.blinkAllHue(HaDropdownList.get(haId).selectedOption.lights, \"Roxxter started\")\n} else {\n  Hue.blinkAllHue.skip(\"No cleaning robot started\")\n}", "intent": "Have the Philips Hue lights blink when the Roxxter is started, using the provided dropdown list to select which Roxxter and which lights."}
{"original_description": "When you turn on your oven to start cooking, change the color of your Philips Hue lights.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (HcOven.ovenOn.CreatedAt !== null) {\n  var HaId = $$ha_id$$;\n  if (HaId === \"\") {\n    Hue.setColorAllHue.skip(\"No oven selected\");\n  } else {\n    Hue.setColorAllHue.setColor($$color$$);\n  }\n}", "intent": "When Home Connect Oven's 'oven on' event is triggered, change the color of Philips Hue lights based on user input."}
{"original_description": "Play a Christmas playlist on your Sonos speakers when you open your Home Connect fridge door and reach for a Christmas treat.", "trigger_channel": "Home Connect Fridge Freezer", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_fridge.freezer_door_opened"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which fridge?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcFridge.freezerDoorOpened.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_stream", "Filter code method": "Sonos.playStream.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_stream\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "What do you want to play?", "Helper text": "Enter the URL of the audio stream you want to play", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setUrl(string: url)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Name\nText input > Title", "description": "Text input > Title", "details": {"Label": "What name do you want to show for this stream?", "Slug": "name", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setName(string: name)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image do you want to show for this stream?", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (new Date(HcFridge.freezerDoorOpened.CreatedAt).getDay() < 6) { // weekdays\n  var url = \"Christmas Playlist URL\"; // replace with your desired playlist URL\n  var room = \"Living Room\"; // select the desired room\n  Sonos.playStream.setUrl(url);\n  Sonos.playStream.setRoom(room);\n} else {\n  Sonos.playStream.skip(\"Weekend - automation disabled\")\n}", "intent": "When a Christmas treat is reached in the fridge, play a Christmas playlist on Sonos speakers if it's a weekday."}
{"original_description": "Grâce à cette Applet pour Android, il vous suffit d'envoyer un SMS contenant un ou plusieurs mots-clés, pour changer la température de vos radiateurs connectés Sauter.", "trigger_channel": "Android SMS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_messages.sent_a_message_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Contact name\nThe contact name associated with the message.", "description": "The contact name associated with the message.", "details": {"Slug": "ContactName", "Filter code": "AndroidMessages.sentAMessageMatchingSearch.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Text\nThe text of the message", "description": "The text of the message", "details": {"Slug": "Text", "Filter code": "AndroidMessages.sentAMessageMatchingSearch.Text", "Type": "String", "Example": "Hey there! How's it going?"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the message was received.", "description": "The time the message was received.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidMessages.sentAMessageMatchingSearch.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "To number\nThe number to which the message was sent", "description": "The number to which the message was sent", "details": {"Slug": "ToNumber", "Filter code": "AndroidMessages.sentAMessageMatchingSearch.ToNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidMessages.sentAMessageMatchingSearch.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the query from the trigger\nvar query = AndroidMessages.sentAMessageMatchingSearch.Query;\n\n// Check if the query contains one or more keyword(s)\nif (query.includes(\"keyword1\") || query.includes(\"keyword2\")) {\n  // Set the desired temperature\n  var temperature = 20;\n  \n  // Launch the action group to change the radiator temperature\n  SAUTERCozytouch.launchActionGroup(\"ChangeTemperature\", temperature);\n} else {\n  // Skip the action if no keywords are found\n  SAUTERCozytouch.launchActionGroup.skip(\"No matching keywords detected\");\n}", "intent": "Applet for Android to change the temperature of Sauter Cozytouch radiators when receiving an SMS message containing specific keywords."}
{"original_description": "Adjust your Honeywell thermostat to pre-cool your home ahead of summer on-peak hours. Remember to create another Applet to set your thermostat a few degrees higher when on-peak hours start to help save on cooling costs!", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.after_time_of_day_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Hours after\nDropdown list", "description": "Dropdown list", "details": {"Label": "How many hours after peak rates start should this be triggered?", "Slug": "hours_after", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.afterTimeOfDayStarts.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.afterTimeOfDayStarts.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.afterTimeOfDayStarts.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.afterTimeOfDayStarts.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Hours after\nHow many hours after the event this will be triggered.", "description": "How many hours after the event this will be triggered.", "details": {"Slug": "hours_after", "Filter code": "FcuTod.afterTimeOfDayStarts.HoursAfter", "Type": "String", "Example": "1"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setsystemtemperature", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "For heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Temperature in degrees e.g. 71", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature in", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}, {"section": "Action fields", "title": "Hours\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hours", "Helper text": "In whole numbers e.g. 3", "Slug": "hours", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setHours(string: hours)"}}], "filter_code": "if (FcuTod.afterTimeOfDayStarts.Season === \"Summer\" && FcuTod.afterTimeOfDayStarts.DayType === \"Weekday\") {\n  var hoursAfter = parseInt(FcuTod.afterTimeOfDayStarts.HoursAfter);\n  if (hoursAfter > 0) {\n    var targetTemperature = Math.round(parseFloat(HoneywellTotalConnectComfort.getSystemTemperature().TargetTemperature) - 2);\n    HoneywellTotalConnectComfort.setSystemTemperature({\n      TargetTemperature: targetTemperature.toString(),\n      TemperatureScale: \"Fahrenheit\"\n    });\n  }\n} else {\n  Domovea.shadeClose.skip(\"Not during summer weekday on-peak hours\")\n}", "intent": "Before summer on-peak hours, pre-cool your home by setting the Honeywell thermostat to a specific temperature. This will help reduce cooling costs."}
{"original_description": "Cette applet permet de régler automatiquement la température de vos radiateurs connectés Thermor à des heures et des jours prédéfinis.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "THERMOR Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "THERMOR_Cozytouch.launch_action_group", "Filter code method": "THERMORCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"THERMOR_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime\nvar Weekdays = DateAndTime.everyWeekdayAt.DayOfWeek\nif (Weekdays !== \"Saturday\" && Weekdays !== \"Sunday\") {\n  if (Time >= 7 && Time <= 22) {\n    THERMORCozytouch.launchActionGroup(\"Scenario\", \"Temperature Setting\")\n  } else {\n    THERMORCozytouch.launchActionGroup.skip(\"Outside of active hours\")\n  }\n} else {\n  THERMORCozytouch.launchActionGroup.skip(\"Weekend - automation disabled\")\n}", "intent": "This applet automates the temperature setting of Thermor radiators connected to Cozytouch at specific times and days."}
{"original_description": "Grâce à cette applet, réglez la température de vos radiateurs connectés Sauter selon votre Agenda Google (début d'un événement).", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Offset = parseInt(Trigger.offset);\nvar EventStarts = new Date(Trigger.starts);\nvar CurrentHour = Meta.currentUserTime.hour();\n\nif (CurrentHour < Offset) {\n  SAUTERCozytouch.launchActionGroup.skip(\"Too early to adjust temperature\");\n} else {\n  SAUTERCozytouch.launchActionGroup({\n    action_group: Trigger.calendar + \"_\" + Trigger.offset\n  });\n}", "intent": "This applet will trigger when a Google Calendar event starts, and adjust the temperature of connected Sauter radiators according to the user's Agenda Google settings."}
{"original_description": "Play music on your Android device when your Cookit started with preparing the recipe.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_best_song", "Filter code method": "AndroidDevice.playBestSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_best_song\", {})"}, "action_details": [], "filter_code": "if (HcCookProcessor.cookProcessorStarted.ha_id === \"Your Preferred Cookit\") {\n  AndroidDevice.playBestSong(\"Music playing on your Android device when the preferred Cookit is cooking\")\n} else {\n  AndroidDevice.playBestSong.skip(\"No specific Cookit detected\")\n}", "intent": "When the Cookit starts preparing a recipe, check if it is a specific Cookit and play music on an Android device if so."}
{"original_description": "Walking out of your front door? Have your sprinklers automatically shut off.", "trigger_channel": "Total Connect 2.0", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "resideo_total_connect.total_connect_security_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your security panel", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select arming mode to detect", "Helper text": "Sends an alert when your security panel is armed in this mode", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ResideoTotalConnect.totalConnectSecurityMode.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Security panel name\nThe name of the security device being monitored", "description": "The name of the security device being monitored", "details": {"Slug": "device_name", "Filter code": "ResideoTotalConnect.totalConnectSecurityMode.SecurityPanelName", "Type": "String", "Example": "Home security"}}, {"section": "Ingredients", "title": "Security mode\nArm Away or Arm Stay", "description": "Arm Away or Arm Stay", "details": {"Slug": "event_type", "Filter code": "ResideoTotalConnect.totalConnectSecurityMode.SecurityMode", "Type": "String", "Example": "Arm Away"}}], "action_channel": "Rachio Irrigation Controller", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rachio_iro.stop_watering", "Filter code method": "RachioIro.stopWatering.skip(string?: reason)", "Runtime method": "runAction(\"rachio_iro.stop_watering\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var createdAt = ResideoTotalConnect.totalConnectSecurityMode.CreatedAt;\nvar deviceName = ResideoTotalConnect.totalConnectSecurityMode.SecurityPanelName;\nif (createdAt !== null && createdAt > Meta.currentUserTime.now()) {\n  if (ResideoTotalConnect.totalConnectSecurityMode.SecurityMode === \"Arm Away\") {\n    RachioIro.stopWatering.skip(\"Away mode detected\");\n  }\n} else {\n  RachioIro.stopWatering();\n}", "intent": "When leaving the house, stop watering plants automatically based on the security system."}
{"original_description": "Go to bed without having to thinking about turning off the lights. Just define a time every evening when the hood lights and Philips Hue lights shall turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_off", "Filter code method": "HcHood.hoodTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime;\nif (CheckTime >= \"20:00\") {  // 8 PM\n  var HaId = [\"Select your hood\"]; // get the selected hood ID from the dropdown list\n  HcHood.hoodTurnOff(HaId);\n} else {\n  HcHood.hoodTurnOff.skip(\"Not evening time\");\n}", "intent": "Automatically turn off the Philips Hue lights and Home Connect Hood at a specified time every evening."}
{"original_description": "Your Roxxter starts cleaning at midday on December 24th ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Home Connect Roxxter", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_cleaning_robot.cleaning_robot_change_cleaning_mode", "Filter code method": "HcCleaningRobot.cleaningRobotChangeCleaningMode.skip(string?: reason)", "Runtime method": "runAction(\"hc_cleaning_robot.cleaning_robot_change_cleaning_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Roxxter?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Cleaning mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Cleaning mode", "Slug": "cleaning_mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.includes(\"Dec 24\") && DateAndTime.everyYearOn.CheckTime.includes(\"12:00\")) {\n  HcCleaningRobot.cleaningRobotChangeCleaningMode(\"Start cleaning at midday on December 24th\");\n} else {\n  HcCleaningRobot.cleaningRobotChangeCleaningMode.skip(\"Not December 24th at midday\");\n}", "intent": "Checks if it's December 24th at midday and changes the cleaning mode of the Roxxter."}
{"original_description": "Play a Christmas playlist as you prepare a warm beverage with your Coffee Machine", "trigger_channel": "Home Connect Coffee Machine", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_begins"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Active program\nName of the active program.", "description": "Name of the active program.", "details": {"Slug": "active_program", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.ActiveProgram", "Type": "String", "Example": "Espresso"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_stream", "Filter code method": "Sonos.playStream.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_stream\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "What do you want to play?", "Helper text": "Enter the URL of the audio stream you want to play", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setUrl(string: url)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Name\nText input > Title", "description": "Text input > Title", "details": {"Label": "What name do you want to show for this stream?", "Slug": "name", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setName(string: name)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image do you want to show for this stream?", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var CreatedAt = HcCoffeeMachine.coffeeMakerBegins.CreatedAt\nif (new Date(CreatedAt) >= new Date(\"2020-12-01T00:00:00+00:00\") && new Date(CreatedAt) <= new Date(\"2021-01-06T23:59:59+00:00\")) {\n  Sonos.playStream.setUrl(\"https://example.com/christmas-playlist\")\n    .setName(\"Christmas Playlist\")\n    .setImage Url(\"https://example.com/christmas-image.jpg\")\n    .setRoom(Sonos.getAvailableRooms()[0])\n    .setInclude Grouped Rooms(true)\n  Sonos.playStream.run()\n} else {\n  Sonos.playStream.skip(\"Not during Christmas season\")\n}", "intent": "When the coffee machine is used to prepare a warm beverage, check if it's during Christmas season and if so, play a Christmas playlist on Sonos."}
{"original_description": "This applet alerts you if the state of your instrument has changed. Your Nanoleaf automatically changes the color if for example a user interaction is required during a run.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.instrument_state"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Helper text": "Choose the state to be monitored", "Slug": "state", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the state change event happened", "description": "The time when the state change event happened", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.instrumentState.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument whose state was changed", "description": "Alias of the instrument whose state was changed", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.instrumentState.InstrumentName", "Type": "String", "Example": "My Instrument"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.instrumentState.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Instrument state\nThe state of the instrument", "description": "The state of the instrument", "details": {"Slug": "instrument_state", "Filter code": "TecanConnect.instrumentState.InstrumentState", "Type": "String", "Example": "Running"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "var InstrumentState = TecanConnect.instrumentState.InstrumentState\nif (InstrumentState !== \"Running\") {\n  Nanoleaf.changeColorRequest.skip(\"Instrument is not running\")\n} else {\n  // Set the color value in hex or by name\n  var ColorValue = Nanoleaf.changeColorRequest.setValue(\"#00FF00\")\n}", "intent": "This applet alerts you if the state of your instrument has changed. It checks the instrument state and if it's not running, it skips the action."}
{"original_description": "Choisissez une application Android de laquelle vous pouvez recevoir des notifications, choisissez un filtre par mot-clés. Dès que vous recevrez une notification correspondant à ces critères, votre action de pilotage de vos radiateurs connectés Sauter sera lancée.", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.new_notification_from_app"}, "trigger_details": [{"section": "Trigger fields", "title": "App name\nText input", "description": "Text input", "details": {"Label": "App name", "Helper text": "e.g. Twitter", "Slug": "app_name", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by notification keyword", "Helper text": "e.g. mentioned", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Received at\nThe time the notification was received.", "description": "The time the notification was received.", "details": {"Slug": "ReceivedAt", "Filter code": "AndroidDevice.newNotificationFromApp.ReceivedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "App name\nThe application name of the notification", "description": "The application name of the notification", "details": {"Slug": "AppName", "Filter code": "AndroidDevice.newNotificationFromApp.AppName", "Type": "String", "Example": "Twitter"}}, {"section": "Ingredients", "title": "Notification message\nMessage text of the notification", "description": "Message text of the notification", "details": {"Slug": "NotificationMessage", "Filter code": "AndroidDevice.newNotificationFromApp.NotificationMessage", "Type": "String", "Example": "@jamisonross12 oh I love that song by Toto too!"}}, {"section": "Ingredients", "title": "Notification title\nTitle of the notification", "description": "Title of the notification", "details": {"Slug": "NotificationTitle", "Filter code": "AndroidDevice.newNotificationFromApp.NotificationTitle", "Type": "String", "Example": "Mentioned by @MrTibbets"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the notification was received.", "description": "The name of your device where the notification was received.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.newNotificationFromApp.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (App.name === \"Your chosen app\") {\n  if (query.toLowerCase().includes(\"Your chosen keyword\")) {\n    SAUTERCozytouch.launchActionGroup(\"Your chosen action group\")\n  } else {\n    SAUTERCozytouch.launchActionGroup.skip(\"Notification does not contain the required keyword\")\n  }\n}", "intent": "Automatically launch the Sauter Cozytouch action group whenever a notification from a specific Android app with a keyword matching a predefined query is received."}
{"original_description": "Cleaning tasks from the Roxxter are syncronized into the Google calendar", "trigger_channel": "Home Connect Roxxter", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cleaning_robot.cleaning_robot_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Roxxter?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCleaningRobot.cleaningRobotStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (HaDropdownList !== \"\") {\n  const createdAt = HcCleaningRobot.cleaningRobotStarted.CreatedAt;\n  const quickAddText = \"Cleaning task from Roxxter at \" + createdAt;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.runAction(\"google_calendar.quick_add_event\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"No Roxxter selected\")\n}", "intent": "Synchronize cleaning tasks from the Home Connect Roxxter into Google Calendar by creating an event with a title based on the selected calendar and a description based on the task's details."}
{"original_description": "Connect your myStrom Button to Apilio! This applet triggers a Logicblock evaluation in Apilio every time you press the button.", "trigger_channel": "myStrom", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mystrom.button"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which event type?", "Helper text": "Please select what type of press you want to use", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Mac\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Button?", "Helper text": "Please select your button", "Slug": "mac", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Mystrom.button.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.logicblock_evaluation_requests", "Filter code method": "Apilio.logicblockEvaluationRequests.skip(string?: reason)", "Runtime method": "runAction(\"apilio.logicblock_evaluation_requests\", {})"}, "action_details": [{"section": "Action fields", "title": "Logicblock identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio logicblock do you want to evaluate?", "Slug": "logicblock_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Event = Mystrom.button.type;\nif (Event !== \"Single Press\" && Event !== \"Double Press\") {\n  Apilio.logicblockEvaluationRequests.skip(\"Invalid button press\");\n}\nelse {\n  var LogicblockID = Apilio.logicblock_identifier;\n  if (!LogicblockID) {\n    Apilio.logicblockEvaluationRequests.skip(\"No logicblock selected\");\n  }\n  else {\n    Apilio.logicblockEvaluationRequests.run(LogicblockID);\n  }\n}", "intent": "This applet triggers a Logicblock evaluation in Apilio every time the myStrom Button is pressed, taking into account the selected event type and button."}
{"original_description": "Every time your coffee machine has started, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Home Connect Coffee Machine", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_begins"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Active program\nName of the active program.", "description": "Name of the active program.", "details": {"Slug": "active_program", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.ActiveProgram", "Type": "String", "Example": "Espresso"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcCoffeeMachine.coffeeMakerBegins.CreatedAt > Date.now() - 300000) { // Check if the event is recent\n  let name = $$name$$; // Get the name from the action field\n  Daskeyboardq.signals.setName(name); // Set the signal name\n  \n  let zone = $$zone$$; // Get the zone from the action field\n  let color = $$color$$; // Get the color from the action field\n  let message = $$message$$; // Get the message from the action field (optional)\n  \n  if ($$effect$$) { // Check if an effect is selected\n    Daskeyboardq.signals.setEffect($$effect$$); // Set the signal effect\n  }\n  if ($$device$$) { // Check if a device is selected\n    Daskeyboardq.signals.setDevice($$device$$); // Set the signal device\n  }\n  \n  // Send the Signal to the Das Keyboard\n  Daskeyboardq.signals.skip(`Coffee machine has started: ${message}`);\n} else {\n  // Skip the action if the event is too old\n  Daskeyboardq.signals.skip(\"Event is too old\");\n}", "intent": "This IFTTT automation sends a Signal to the Das Keyboard when the coffee machine starts brewing."}
{"original_description": "Have your Sonos speaker play a favorite tune to let you know that your Cookit has finished cooking.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (HcCookProcessor.cookProcessorFinished.CreatedAt) {\n  let haId = $$ha_id$$\n  if (!Sonos.playFavorite.skip(\"Missing preferred Ha\")) {\n    Sonos.playFavorite.runAction({\n      \"favorite\": $$favorite$$,\n      \"room\": $$room$$.toLowerCase(),\n      \"include_grouped_rooms\": $$include_grouped_rooms?true:false\n    })\n  }\n}", "intent": "When Cookit finishes cooking, play a favorite tune on Sonos speaker in the selected room."}
{"original_description": "Whenever the price exceeds my threshold, set my Honeywell thermostat.\n\nPart 1 of 2 applets to automate your thermostat's response when the price changes.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setsystemtemperature", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "For heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Temperature in degrees e.g. 71", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature in", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}, {"section": "Action fields", "title": "Hours\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hours", "Helper text": "In whole numbers e.g. 3", "Slug": "hours", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setHours(string: hours)"}}], "filter_code": "if (trigger_type === 'exceeds') {\n  if (average_price > which_price_threshold) {\n    HoneywellTotalConnectComfort.setsystemtemperature({\n      system: which_system,\n      temperature_type: temperature_type,\n      target_temperature: which_price_threshold,\n      temperature_scale: temperature_scale\n    })\n  } else {\n    HoneywellTotalConnectComfort.setsystemtemperature.skip(\"Price did not exceed the threshold\")\n  }\n}", "intent": "Whenever the price exceeds my threshold, set my Honeywell thermostat."}
{"original_description": "This applet will execute two actions on your dishwasher when electricity in the selected Denmark region is cheap. First it will turn the dishwasher on and then start a program.", "trigger_channel": "True Energy Smart Home Denmark", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "True_Energy_DK.electricity_price_cheap"}, "trigger_details": [{"section": "Trigger fields", "title": "Area\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Region", "Helper text": "Region you wish to monitor", "Slug": "area", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Region\nDenmark Region being monitored", "description": "Denmark Region being monitored", "details": {"Slug": "area", "Filter code": "TrueEnergyDK.electricityPriceCheap.Region", "Type": "String", "Example": "West Denmark"}}, {"section": "Ingredients", "title": "Valid from\nTime at which electricity price changes", "description": "Time at which electricity price changes", "details": {"Slug": "valid_from", "Filter code": "TrueEnergyDK.electricityPriceCheap.ValidFrom", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Price\nElectricity price per kWh in DKK", "description": "Electricity price per kWh in DKK", "details": {"Slug": "price", "Filter code": "TrueEnergyDK.electricityPriceCheap.Price", "Type": "String", "Example": "167.17"}}, {"section": "Ingredients", "title": "Co2 emission\nCO2 emission per kWh in grams", "description": "CO2 emission per kWh in grams", "details": {"Slug": "co2_emission", "Filter code": "TrueEnergyDK.electricityPriceCheap.Co2Emission", "Type": "String", "Example": "108.77"}}], "action_channel": "Home Connect Dishwasher", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_turn_on", "Filter code method": "HcDishwasher.dishwasherTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_dishwasher.dishwasher_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the selected area\nvar Area = $$Area$$;\n\n// Check if electricity price is cheap for the selected area\nif (TrueEnergyDK.electricityPriceCheap.Region === \"West Denmark\" && TrueEnergyDK.electricityPriceCheap.ValidFrom >= Meta.currentUserTime.format(\"YYYY-MM-DDTHH:mm:ssZ\") && TrueEnergyDK.electricityPriceCheap.Price <= 167.17) {\n    // Get the selected Ha\n    var Ha = $$Ha$$;\n\n    // Start the dishwasher program\n    HcDishwasher.dishwasherTurnOn(Ha, \"Start dishwasher program\");\n} else {\n    // Skip the action if electricity price is not cheap or region not selected\n    HcDishwasher.dishwasherTurnOn.skip(\"Electricity price is too high\");\n}", "intent": "This applet will execute two actions on your Home Connect Dishwasher when electricity in the selected Denmark region is cheap. First it will turn the dishwasher on and then start a program."}
{"original_description": "We're not sure what else robots will take over, but in the meantime, they can take over your least enjoyable chores. This applet will send Indego Connect to mow, when your Roxxter starts vacuuming. ", "trigger_channel": "Home Connect Roxxter", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cleaning_robot.cleaning_robot_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Roxxter?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCleaningRobot.cleaningRobotStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Indego Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "indegoconnect.send_mow", "Filter code method": "Indegoconnect.sendMow.skip(string?: reason)", "Runtime method": "runAction(\"indegoconnect.send_mow\", {})"}, "action_details": [], "filter_code": "IFTTT.on('home_connect_roxxter_cleaning_robot_started', (event) => {\n  var createdAt = HcCleaningRobot.cleaningRobotStarted.CreatedAt;\n  if (createdAt != null) {\n    Indegoconnect.sendMow(createdAt);\n  } else {\n    Indegoconnect.sendMow.skip(\"No created at timestamp found\");\n  }\n});", "intent": "When the Roxxter cleaning robot starts, send a command to Indego Connect to mow the lawn."}
{"original_description": "This applet alerts you if a run has completed. Your Nanoleaf will automatically blink for 5 minutes.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.run_completion_message"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the Run was completed", "description": "The time when the Run was completed", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.runCompletionMessage.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument where the run was completed", "description": "Alias of the instrument where the run was completed", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.runCompletionMessage.InstrumentName", "Type": "String", "Example": "Run Completed Successfully"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.runCompletionMessage.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Run completion message\nThe run completion message", "description": "The run completion message", "details": {"Slug": "run_completion_message", "Filter code": "TecanConnect.runCompletionMessage.RunCompletionMessage", "Type": "String", "Example": "Run Completed Successfully"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.color_notification_request", "Filter code method": "Nanoleaf.colorNotificationRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.color_notification_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Notification type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Blinking or solid color?", "Slug": "notification_type", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.colorNotificationRequest.setNotification Type(string: notification_type)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "If this field is empty, the action will default to white.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.colorNotificationRequest.setValue(string: value)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "For how many seconds?", "Helper text": "If left empty, 5 seconds will be used as default.", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "Nanoleaf.colorNotificationRequest.setDuration(string: duration)"}}], "filter_code": "if (TecanConnect.runCompletionMessage.InstrumentName !== \"\") {\n  var duration = \"300\";\n  if (action_details[2].details.Value !== \"\") {\n    duration = action_details[2].details.Value;\n  }\n  Nanoleaf.colorNotificationRequest.skip(\"Automated run completion notification\");\n  Nanoleaf.colorNotificationRequest.setDuration(duration);\n}", "intent": "When a run has completed, check if the instrument name is specified and if so, blink the Nanoleaf device for 5 minutes."}
{"original_description": "This applet alerts you if a run has completed. Your Philips Hue will automatically blink.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.run_completion_message"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the Run was completed", "description": "The time when the Run was completed", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.runCompletionMessage.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument where the run was completed", "description": "Alias of the instrument where the run was completed", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.runCompletionMessage.InstrumentName", "Type": "String", "Example": "Run Completed Successfully"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.runCompletionMessage.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Run completion message\nThe run completion message", "description": "The run completion message", "details": {"Slug": "run_completion_message", "Filter code": "TecanConnect.runCompletionMessage.RunCompletionMessage", "Type": "String", "Example": "Run Completed Successfully"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var TimeOfEvent = TecanConnect.runCompletionMessage.TimeOfEvent;\nvar InstrumentName = TecanConnect.runCompletionMessage.InstrumentName;\nvar RunCompletionMessage = TecanConnect.runCompletionMessage.RunCompletionMessage;\n\nif (TimeOfEvent !== null && InstrumentName !== null) {\n  Hue.blinkAllHue(\"Run completed on \" + TimeOfEvent + \" by \" + InstrumentName);\n} else {\n  Hue.blinkAllHue.skip(\"No valid run completion message\");\n}", "intent": "This applet alerts you if a run has completed and blinks the Philips Hue lights."}
{"original_description": "Flicker your Philips hue lights as soon as someone connects to your router.", "trigger_channel": "D-Link Wi-Fi Router", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dlink_wifi_router.routerClientConnect"}, "trigger_details": [{"section": "Trigger fields", "title": "Client name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which client?", "Slug": "client_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "DlinkWifiRouter.routerClientConnect.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Client name\nThe name of the client connected.", "description": "The name of the client connected.", "details": {"Slug": "client_name", "Filter code": "DlinkWifiRouter.routerClientConnect.ClientName", "Type": "String", "Example": "computer"}}, {"section": "Ingredients", "title": "Device name\nThe device that reported the event.", "description": "The device that reported the event.", "details": {"Slug": "device_name", "Filter code": "DlinkWifiRouter.routerClientConnect.DeviceName", "Type": "String", "Example": "DIR-2660"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "const createdAt = DlinkWifiRouter.routerClientConnect.CreatedAt;\nconst clientName = DlinkWifiRouter.routerClientConnect.ClientName;\nconst deviceName = DlinkWifiRouter.routerClientConnect.DeviceName;\n\nif (deviceName === \"DIR-2660\" && createdAt >= Meta.currentUserTime.date() - 1 && createdAt <= Meta.currentUserTime.date() + 1) {\n  Hue.blinkAllHue(\"Flickering lights triggered by router client connect\");\n} else {\n  Hue.blinkAllHue.skip(\"Device name or created time does not match the specified criteria\");\n}", "intent": "Trigger: D-Link Wi-Fi Router's routerClientConnect event. When a client connects, it checks if the device name matches the specified device name and if the created time is within a specific range. If both conditions are met, it flickers all Philips Hue lights."}
{"original_description": "This applet will return Indego Connect to the dock if MIYO detects wet grass. This will ensure that you receive the best cutting result and also keep your Indego Connect nice and clean!", "trigger_channel": "MIYO", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "miyo.soil_wet"}, "trigger_details": [{"section": "Trigger fields", "title": "Circuit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which irrigation area should be checked?", "Slug": "circuit", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Miyo.soilWet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the circuit", "description": "Name of the circuit", "details": {"Slug": "name", "Filter code": "Miyo.soilWet.Name", "Type": "String", "Example": "https://miyo.garden/ifttt/4.jpg"}}], "action_channel": "Indego Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "indegoconnect.send_dock", "Filter code method": "Indegoconnect.sendDock.skip(string?: reason)", "Runtime method": "runAction(\"indegoconnect.send_dock\", {})"}, "action_details": [], "filter_code": "if (Miyo.soilWet.Name !== \"\") {\n  var Circuit = Miyo.soilWet.Name\n  if (Miyo.soilWet.CreatedAt > \"2020-07-08T04:17:06+05:00\") {\n    Indegoconnect.sendDock(Circuit)\n  } else {\n    Indeoconnect.sendDock.skip(\"Event is older than expected\")\n  }\n}", "intent": "This applet will send Indego Connect to the dock if MIYO detects wet grass in a specified circuit."}
{"original_description": "Press your Fibaro Button to turn on your coffee machine.", "trigger_channel": "FIBARO", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fibaro.button_clicked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Parameter 1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of clicks", "Slug": "parameter_1", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Fibaro.buttonClicked.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nID of device", "description": "ID of device", "details": {"Slug": "device_id", "Filter code": "Fibaro.buttonClicked.DeviceId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Hub serial\nHub serial number", "description": "Hub serial number", "details": {"Slug": "hub_serial", "Filter code": "Fibaro.buttonClicked.HubSerial", "Type": "String", "Example": "HC2-000000"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Automatically adjust your thermostat when the temperature outside gets too cold.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Mapeheat Thermo Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Mapei_Mapeheat.set_temperature", "Filter code method": "MapeiMapeheat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"Mapei_Mapeheat.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to set the temperature for", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Setpoint temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What setpoint temperature?", "Helper text": "The setpoint temperature", "Slug": "setpoint_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setSetpoint Temperature(string: setpoint_temperature)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "What duration?", "Helper text": "The time to hold the temperature until", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setDuration(string: duration)"}}], "filter_code": "var tempF = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (tempF < 60) {\n  MapeiMapeheat.setTemperature(\n    \"Thermostat\",\n    \"Scale\",\n    \"Setpoint temperature\",\n    \"Duration\"\n  ).skip(\"No need to adjust thermostat\")\n} else {\n  // No action needed if the temperature is above or equal to 60°F\n}", "intent": "Automatically adjust the thermostat when the outside temperature drops below a certain threshold."}
{"original_description": "When your Oven timer elapses, change the lighting scene of your Philips Hue lights in your kitchen", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_timer_elapsed"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenTimerElapsed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CreatedAt = HcOven.ovenTimerElapsed.CreatedAt\nif (!CreatedAt) {\n  Hue.setScene.skip(\"No timer elapsed\")\n} else {\n  var HaId = HcOven.ovenTimerElapsed.ha_id\n  var SceneSlug = Hue.scene // Assuming scene is the default value\n  if (HaId && SceneSlug) {\n    Hue.setScene(Hue.scene)\n  } else {\n    Hue.setScene.skip(\"Invalid HA ID or no scene selected\")\n  }\n}", "intent": "When the Oven timer elapses, change the lighting scene of Philips Hue lights in your kitchen."}
{"original_description": "Start playing a Christmas playlist when the Home Connect oven clock timer has elapsed and the Christmas cookies are ready.", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_timer_elapsed"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenTimerElapsed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_stream", "Filter code method": "Sonos.playStream.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_stream\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "What do you want to play?", "Helper text": "Enter the URL of the audio stream you want to play", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setUrl(string: url)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Name\nText input > Title", "description": "Text input > Title", "details": {"Label": "What name do you want to show for this stream?", "Slug": "name", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setName(string: name)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image do you want to show for this stream?", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (HcOven.ovenTimerElapsed.CreatedAt > new Date()) {\n  var haId = HcOven.ovenTimerElapsed.HaId;\n  if (haId !== \"\") {\n    var url = \"https://example.com/christmas-playlist.mp3\"; // Replace with actual URL\n    Sonos.playStream.setUrl(url);\n    Sonos.playStream.setName(\"Christmas Cookies Ready!\");\n  } else {\n    Sonos.playStream.skip(\"No HaId available\");\n  }\n}", "intent": "Start playing a Christmas playlist when the Home Connect oven clock timer has elapsed and the Christmas cookies are ready."}
{"original_description": "When the price comes back down below my threshold, update my Honeywell thermostat to resume schedule.\n\nPart 2 of 2 applets to automate your thermostat's response when the price changes.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.settoschedule", "Filter code method": "HoneywellTotalConnectComfort.settoschedule.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.settoschedule\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentPrice = ComEd.averagePriceChange.AveragePrice\nvar fromHour = ComEd.averagePriceChange.FromHour\nvar toHour = ComEd.averagePriceChange.ToHour\nif (currentPrice < which_price_threshold && trigger_type === \"Below\" && how_often_to_trigger === \"First time only\") {\n  HoneywellTotalConnectComfort.settoschedule({\n    system: system,\n    reason: \"Price threshold reached, resuming schedule\"\n  })\n}", "intent": "When the price comes back down below my threshold, update my Honeywell thermostat to resume schedule."}
{"original_description": "This applet will return Indego Connect to the dock if MIYO begins irrigating your lawn. This will ensure that you receive the best cutting result and also keep your Indego Connect nice and clean!", "trigger_channel": "MIYO", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "miyo.irrigation_stopped"}, "trigger_details": [{"section": "Trigger fields", "title": "Circuit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which irrigation area should be checked?", "Slug": "circuit", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Miyo.irrigationStopped.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the circuit", "description": "Name of the circuit", "details": {"Slug": "name", "Filter code": "Miyo.irrigationStopped.Name", "Type": "String", "Example": "https://miyo.garden/ifttt/2.jpg"}}], "action_channel": "Indego Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "indegoconnect.send_dock", "Filter code method": "Indegoconnect.sendDock.skip(string?: reason)", "Runtime method": "runAction(\"indegoconnect.send_dock\", {})"}, "action_details": [], "filter_code": "if (Miyo.irrigationStopped.CreatedAt !== null) {\n  try {\n    const reason = \"Irrigation started\";\n    Indegoconnect.sendDock(skip(reason));\n  } catch (error) {\n    console.error(\"Error:\", error);\n    Indegoconnect.sendDock.skip(\"Unexpected error\");\n  }\n}", "intent": "This applet will return Indego Connect to the dock if MIYO begins irrigating your lawn, ensuring a better cutting result and keeping Indego Connect clean."}
{"original_description": "Pilotez vos radiateurs connectés Sauter grâce à la connexion à votre réseau WiFi de votre smartphone Android.", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.connect_to_wifi_network_with_ssid"}, "trigger_details": [{"section": "Trigger fields", "title": "Ssid\nText input > Other", "description": "Text input > Other", "details": {"Label": "Network name", "Helper text": "Case sensitive e.g. Funny WiFi Name", "Slug": "ssid", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ssid\nThe SSID of the WiFi network.", "description": "The SSID of the WiFi network.", "details": {"Slug": "SSID", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.SSID", "Type": "String", "Example": "linksys"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the network change occurred.", "description": "The time the network change occurred.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the connection change occurred.", "description": "The name of your device where the connection change occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.connectToWifiNetworkWithSsid.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ssid = AndroidDevice.connectToWifiNetworkWithSsid.SSID\nif (ssid === \"linksys\") {\n  var occurredAt = AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt\n  if (occurredAt >= \"2020-07-08T04:17:06+05:00\" && occurredAt <= \"2020-07-08T04:18:06+05:00\") {\n    SAUTERCozytouch.launchActionGroup(SAUTER_Cozytouch.action_group, { reason: \"Valid network and time detected\" })\n  } else {\n    SAUTERCozytouch.launchActionGroup.skip(\"Invalid network or time\")\n  }\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Invalid network name\")\n}", "intent": "When an Android device connects to a WiFi network, check if it's a valid network name and occurred at a specific time. If true, launch the SAUTER Cozytouch action group with the selected scenario."}
{"original_description": "This applet alerts you if the state of your instrument has changed. Your Philips Hue automatically changes the color if for example a user interaction is required during a run.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.instrument_state"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "State\nDropdown list", "description": "Dropdown list", "details": {"Label": "State", "Helper text": "Choose the state to be monitored", "Slug": "state", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the state change event happened", "description": "The time when the state change event happened", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.instrumentState.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument whose state was changed", "description": "Alias of the instrument whose state was changed", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.instrumentState.InstrumentName", "Type": "String", "Example": "My Instrument"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.instrumentState.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Instrument state\nThe state of the instrument", "description": "The state of the instrument", "details": {"Slug": "instrument_state", "Filter code": "TecanConnect.instrumentState.InstrumentState", "Type": "String", "Example": "Running"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (TecanConnect.instrumentState.InstrumentState !== prevInstrumentState) {\n  var newState = TecanConnect.instrumentState.InstrumentState\n  if (newState === \"Running\") {\n    Hue.setColorAllHue.setColor(\"Blue\")\n  } else {\n    Hue.setColorAllHue.skip(\"Not running\")\n  }\n}\nvar prevInstrumentState = null", "intent": "Checks if the instrument state has changed, and if so, sets the Philips Hue lights to a specific color based on the new instrument state."}
{"original_description": "Arm your smanos after you lock August Smart Lock.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "smanos connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smanos.arm_away", "Filter code method": "Smanos.armAway.skip(string?: reason)", "Runtime method": "runAction(\"smanos.arm_away\", {})"}, "action_details": [{"section": "Action fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockLocked.LockedAt.getHours() < 7 || Augusthome.lockLocked.LockedAt.getHours() > 22) {\n  if (which_lock === \"Home\" && which_system !== \"Away\") {\n    Smanos.arm_away().skip(\"User is at home\")\n  } else {\n    Smanos.arm_away()\n  }\n}", "intent": "Arm Smanos after August Smart Lock is locked, only if the user is not at home."}
{"original_description": "Turn on your coffee machine at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Home Connect Coffee Machine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_turn_on", "Filter code method": "HcCoffeeMachine.coffeeMakerTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_coffee_machine.coffee_maker_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nif (Weather.sunRises.Condition === \"Rain\") {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"No rain forecasted\")\n} else if (SunriseAt.getHours() < 7 || SunriseAt.getHours() > 22) {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Outside of active hours\")\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn()\n}", "intent": "Turn on the Home Connect Coffee Machine at sunrise if it is a weekday."}
{"original_description": "You will receive a text message if a client connects to your router.", "trigger_channel": "D-Link Wi-Fi Router", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dlink_wifi_router.routerClientConnect"}, "trigger_details": [{"section": "Trigger fields", "title": "Client name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which client?", "Slug": "client_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "DlinkWifiRouter.routerClientConnect.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Client name\nThe name of the client connected.", "description": "The name of the client connected.", "details": {"Slug": "client_name", "Filter code": "DlinkWifiRouter.routerClientConnect.ClientName", "Type": "String", "Example": "computer"}}, {"section": "Ingredients", "title": "Device name\nThe device that reported the event.", "description": "The device that reported the event.", "details": {"Slug": "device_name", "Filter code": "DlinkWifiRouter.routerClientConnect.DeviceName", "Type": "String", "Example": "DIR-2660"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (DlinkWifiRouter.routerClientConnect.ClientName !== \"\") {\n  var phoneNumber = \"insert_phone_number_here\";\n  var text = \"Client \" + DlinkWifiRouter.routerClientConnect.ClientName + \" connected to your router.\";\n  AndroidMessages.sendAMessage.setText(text).skip(\"Phone number not provided\")\n} else {\n  AndroidMessages.sendAMessage.skip(\"No client name provided\")\n}", "intent": "When a client connects to the D-Link Wi-Fi Router, send an Android SMS message if specified conditions are met."}
{"original_description": "Increase the temperature of your Honeywell thermostat a few degrees during summer on-peak hours to save on cooling costs. This Applet automatically resets the temperature back to your previous setting when on-peak hours end.", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.time_of_day"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nDropdown list", "description": "Dropdown list", "details": {"Label": "This event should trigger when peak rates:", "Slug": "event", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.timeOfDay.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.timeOfDay.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.timeOfDay.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.timeOfDay.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setsystemtemperature", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "For heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Temperature in degrees e.g. 71", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature in", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}, {"section": "Action fields", "title": "Hours\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hours", "Helper text": "In whole numbers e.g. 3", "Slug": "hours", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setsystemtemperature.setHours(string: hours)"}}], "filter_code": "", "intent": ""}
{"original_description": "Change the color of your Philips Hue lights when you close your Home Connect oven door", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_door_closed"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenDoorClosed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (HcOven.ovenDoorClosed.CreatedAt) {\n  var ha_id = $$ha_id$$;\n  if (!ha_id) {\n    HcOven.ovenDoorClose.skip(\"No oven selected\");\n  } else {\n    Hue.setColorAllHue({\n      lights: $$lights$/,\n      color: $$color$$.trim()\n    });\n  }\n}", "intent": "When the Home Connect oven door is closed, change the color of all Philips Hue lights to a specified color."}
{"original_description": "This applet informs you if the estimated end time of a run overshoots. You will automatically receive a notification with the new estimated end time.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.estimated_end_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the estimated end time was overshot", "description": "The time when the estimated end time was overshot", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.estimatedEndTime.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument whose estimated end time was overshot", "description": "Alias of the instrument whose estimated end time was overshot", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.estimatedEndTime.InstrumentName", "Type": "String", "Example": "My Instrument"}}, {"section": "Ingredients", "title": "User\nYour Name", "description": "Your Name", "details": {"Slug": "user", "Filter code": "TecanConnect.estimatedEndTime.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "New estimated end time\nThe new estimated end time", "description": "The new estimated end time", "details": {"Slug": "new_estimated_end_time", "Filter code": "TecanConnect.estimatedEndTime.NewEstimatedEndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var Instrument = TecanConnect.estimatedEndTime.InstrumentName;\nvar TimeOfEvent = TecanConnect.estimatedEndTime.TimeOfEvent;\nvar NewEstimatedEndTime = TecanConnect.estimatedEndTime.NewEstimatedEndTime;\nvar User = TecanConnect.estimatedEndTime.User;\n\nif (TecanConnect.estimatedEndTime.EstimatedEndTime > new Date()) {\n  IfNotifications.sendNotification.setMessage(\"The estimated end time of \" + Instrument + \" has been updated to \" + NewEstimatedEndTime);\n} else {\n  IfNotifications.sendNotification.skip(\"No overshot detected\");\n}", "intent": "This applet checks if the estimated end time of a run overshot and sends a notification with the new estimated end time. It uses Tecan Connect's API to retrieve information about the instrument, the time of event, the instrument name, the user, and the new estimated end time."}
{"original_description": "This applet informs you if a custom message was send by your instrument. You will automatically receive a notification with the content of the custom message.", "trigger_channel": "Tecan Connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tecan_connect.custom_message"}, "trigger_details": [{"section": "Trigger fields", "title": "Instrument\nDropdown list", "description": "Dropdown list", "details": {"Label": "Instrument", "Helper text": "Choose the Instrument for the selected Trigger", "Slug": "instrument", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Time of event\nThe time when the message was sent", "description": "The time when the message was sent", "details": {"Slug": "time_of_event", "Filter code": "TecanConnect.customMessage.TimeOfEvent", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Instrument name\nAlias of the instrument which is sending the message", "description": "Alias of the instrument which is sending the message", "details": {"Slug": "instrument_name", "Filter code": "TecanConnect.customMessage.InstrumentName", "Type": "String", "Example": "My Instrument"}}, {"section": "Ingredients", "title": "User\nYour name", "description": "Your name", "details": {"Slug": "user", "Filter code": "TecanConnect.customMessage.User", "Type": "String", "Example": "IFTTT_Demo_user"}}, {"section": "Ingredients", "title": "Custom message\nThe custom message with its type (Info/Error/Warning/Comment)", "description": "The custom message with its type (Info/Error/Warning/Comment)", "details": {"Slug": "custom_message", "Filter code": "TecanConnect.customMessage.CustomMessage", "Type": "String", "Example": "Error : Something happend"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "const instrument = TecanConnect.customMessage.Instrument;\nconst timeOfEvent = TecanConnect.customMessage.TimeOfEvent;\nconst userName = TecanConnect.customMessage.User;\nconst customMessage = TecanConnect.customMessage.CustomMessage;\n\nif (instrument !== \"\" && timeOfEvent !== \"\") {\n  IfNotifications.sendNotification.setMessage(`Custom message from ${userName} on instrument ${instrument} at ${timeOfEvent}: ${customMessage}`);\n} else {\n  IfNotifications.sendNotification.skip(\"Invalid or missing instrument, time of event, or custom message\");\n}", "intent": ""}
{"original_description": "This trigger will start your dishwasher at the optimal time. You set a earliest start time, what time your machine has to be ready, and a duration. The Trigger will then start the when electricity is optimal.", "trigger_channel": "True Energy Smart Home Denmark", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "True_Energy_DK.electricity_price_cheap"}, "trigger_details": [{"section": "Trigger fields", "title": "Area\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Region", "Helper text": "Region you wish to monitor", "Slug": "area", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Region\nDenmark Region being monitored", "description": "Denmark Region being monitored", "details": {"Slug": "area", "Filter code": "TrueEnergyDK.electricityPriceCheap.Region", "Type": "String", "Example": "West Denmark"}}, {"section": "Ingredients", "title": "Valid from\nTime at which electricity price changes", "description": "Time at which electricity price changes", "details": {"Slug": "valid_from", "Filter code": "TrueEnergyDK.electricityPriceCheap.ValidFrom", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Price\nElectricity price per kWh in DKK", "description": "Electricity price per kWh in DKK", "details": {"Slug": "price", "Filter code": "TrueEnergyDK.electricityPriceCheap.Price", "Type": "String", "Example": "167.17"}}, {"section": "Ingredients", "title": "Co2 emission\nCO2 emission per kWh in grams", "description": "CO2 emission per kWh in grams", "details": {"Slug": "co2_emission", "Filter code": "TrueEnergyDK.electricityPriceCheap.Co2Emission", "Type": "String", "Example": "108.77"}}], "action_channel": "Home Connect Dishwasher", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_dishwasher.dishwasher_start_program", "Filter code method": "HcDishwasher.dishwasherStartProgram.skip(string?: reason)", "Runtime method": "runAction(\"hc_dishwasher.dishwasher_start_program\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which dishwasher?", "Helper text": "Please note that your dishwasher has to be connected (but not running) to be listed.", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Program\nDropdown list", "description": "Dropdown list", "details": {"Label": "Program", "Slug": "program", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Region = TrueEnergyDK.electricityPriceCheap.Region;\nvar ValidFrom = new Date(TrueEnergyDK.electricityPriceCheap.ValidFrom);\nvar Price = parseFloat(TrueEnergyDK.electricityPriceCheap.Price);\nif (Region === \"West Denmark\" && ValidFrom > Meta.currentUserTime.date() && Price < 167.17) {\n    HcDishwasher.dishwasherStartProgram(\"Ha\", \"Program\");\n} else {\n    HcDishwasher.dishwasherStartProgram.skip(\"Not optimal time for dishwasher\")\n}", "intent": "This trigger starts the Home Connect Dishwasher at the optimal time based on the True Energy Denmark electricity price. It checks the region, valid from time, and price to determine if it's a good time to run the dishwasher."}
{"original_description": "Every time the water tank is empty, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Home Connect Coffee Machine", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_out_of_water"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCoffeeMachine.coffeeMakerOutOfWater.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcCoffeeMachine.coffeeMakerOutOfWater.CreatedAt) {\n  var createdAt = HcCoffeeMachine.coffeeMakerOutOfWater.CreatedAt;\n  Daskeyboardq.signals.create({\n    name: \"Signal from coffee machine\",\n    zone: \"1\",\n    color: \"red\",\n    message: \"Your coffee machine is out of water. Please refill it.\",\n    effect: \"flash\"\n  });\n} else {\n  // Signal already created, do nothing\n}", "intent": "When the Home Connect Coffee Machine triggers an event indicating that it is out of water, check if a Signal has been created. If not, create a new Signal with name, zone, color, message, and effect set to default values."}
{"original_description": "Press Logitech pop to arm smanos security system when you leave home.", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "smanos connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smanos.arm_away", "Filter code method": "Smanos.armAway.skip(string?: reason)", "Runtime method": "runAction(\"smanos.arm_away\", {})"}, "action_details": [{"section": "Action fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (LogitechPop.shortPress.trigger_condition === \"leaving_home\") {\n  if (LogitechPop.shortPress.switch === \"arm_away\") {\n    Smanos.armAway(\"Arming away mode due to Logitech POP trigger\")\n  } else {\n    Smanos.armAway.skip(\"Invalid switch condition\")\n  }\n} else {\n  Smanos.armAway.skip(\"Not leaving home, skipping arm action\")\n}", "intent": "When Logitech POP is pressed, arm Smanos security system when leaving home."}
{"original_description": "Your Homey will inform you as soon as your Cookit has finished cooking.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Homey", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "homey.let_homey_speak", "Filter code method": "Homey.letHomeySpeak.skip(string?: reason)", "Runtime method": "runAction(\"homey.let_homey_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Which homey\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Homey?", "Slug": "which_homey", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What text?", "Slug": "what_text", "Required": "true", "Can have default value": "true", "Filter code method": "Homey.letHomeySpeak.setWhat Text(string: what_text)"}}], "filter_code": "var createdAt = HcCookProcessor.cookProcessorFinished.CreatedAt\nvar haId = \"Dropdown list\" // Get the selected Homey ID from trigger details\nvar whatText = \"\" // Initialize custom text input value\n\nif (createdAt) {\n  Homey.letHomeySpeak.skip(\"No Cookit finished cooking\")\n} else {\n  Homey.letHomeySpeak.runAction({\n    which_homey: haId, \n    what_text: whatText\n  })\n}", "intent": "Notify the user when a Cookit finishes cooking, specifying the Homey device and providing an option to input custom text."}
{"original_description": "Your hood will turn on when your Cookit started with preparing your meal.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_on", "Filter code method": "HcHood.hoodTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcCookProcessor.cookProcessorOn.ha_id === \"true\") {\n  HcHood.hoodTurnOn.skip(\"Hood not required\")\n}", "intent": "This IFTTT automation will trigger when the Cookit starts preparing a meal. It checks if the hood dropdown list is selected and if it's true, then it skips turning on the hood with a reason message."}
{"original_description": "Your hood will turn off when you have prepared your meal with your Cookit.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_off", "Filter code method": "HcHood.hoodTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CreatedAt = HcCookProcessor.cookProcessorFinished.CreatedAt;\nvar HoodId = hc_cook_processor.cook_processor_finished.ha_id;\nif (new Date(CreatedAt).getDay() !== 0 && new Date(CreatedAt).getDay() !== 6) {\n  if (HoodId != \"\" && HoodId != null) {\n    HcHood.hoodTurnOff(HoodId, \"User specified hood\");\n  } else {\n    HcHood.hoodTurnOff.skip(\"No hood selected\");\n  }\n}", "intent": "When the Cookit finishes processing, if the selected hood is not turned off yet and it's not a weekend, turn it off. If the user has chosen a specific hood, turn off that specific hood."}
{"original_description": "The ambient light of your hood will turn on with your preferred color when your prepared meal with Cookit is ready.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Home Connect Hood", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hc_hood.hood_turn_on", "Filter code method": "HcHood.hoodTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"hc_hood.hood_turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcCookProcessor.cookProcessorFinished.CreatedAt) {\n  var HaId = $$ha_id$$\n  if (!HaId) { \n    HcHood.hoodTurnOn.skip(\"No hood selected\")\n  } else {  \n    HcHood.hoodTurnOn(HaId)\n  }\n}", "intent": "Automate the Home Connect Hood to turn on with a specific color when Cookit prepares a meal."}
{"original_description": "Grâce à cette applet, réglez la température de vos radiateurs connectés Sauter selon votre Agenda Google (fin d'un événement).", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_ends"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventEnds.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventEnds.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventEnds.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Start time\nDate and time the event started.", "description": "Date and time the event started.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventEnds.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nDate and time the event ended.", "description": "Date and time the event ended.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventEnds.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventEnds.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventEnds.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "SAUTER Cozytouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "SAUTER_Cozytouch.launch_action_group", "Filter code method": "SAUTERCozytouch.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"SAUTER_Cozytouch.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the event details from the trigger\nvar title = GoogleCalendar.anyEventEnds.Title;\nvar description = GoogleCalendar.anyEventEnds.Description;\nvar where = GoogleCalendar.anyEventEnds.Where;\nvar starts = GoogleCalendar.anyEventEnds.StartTime;\nvar ends = GoogleCalendar.anyEventEnds.EndTime;\nvar eventUrl = GoogleCalendar.anyEventEnds.EventUrl;\nvar eventType = GoogleCalendar.anyEventEnds.EventType;\n\n// Set the correct action group based on the calendar dropdown\nif (calendar === \"Home\") {\n  SAUTERCozytouch.launchActionGroup(\"Scenario_Home\");\n} else if (calendar === \"Work\") {\n  SAUTERCozytouch.launchActionGroup(\"Scenario_Work\");\n}\n\n// Check if it's after the event end time\nvar currentTime = Meta.currentUserTime.hour() + \":\" + Meta.currentUserTime.minute();\nif (currentTime > ends) {\n  // Skip the action as the event has already ended\n  SAUTERCozytouch.launchActionGroup.skip(\"Event has already ended\");\n}", "intent": "This applet sets the temperature of connected Sauter radiators according to your Google Calendar events."}
{"original_description": "With the push of a button on your phone, your Mapeheat Thermo Connect thermostat is set to a certain temperature.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Mapeheat Thermo Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Mapei_Mapeheat.set_temperature", "Filter code method": "MapeiMapeheat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"Mapei_Mapeheat.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to set the temperature for", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Setpoint temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What setpoint temperature?", "Helper text": "The setpoint temperature", "Slug": "setpoint_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setSetpoint Temperature(string: setpoint_temperature)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "What duration?", "Helper text": "The time to hold the temperature until", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setDuration(string: duration)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL) {\n  var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\n  var Latitude = DoButton.doButtonNewCommandCommon.Latitude\n  var Longitude = DoButton.doButtonNewCommandCommon.Longitude\n  var LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\n  var LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\n\n  MapeiMapeheat.setTemperature(\n    {\n      thermostat: \"Select a thermostat\",\n      scale: \"Celsius\",\n      setpoint_temperature: 22,\n      duration: \"30 minutes\"\n    },\n    function() {\n      // Set the temperature\n      if (MapeiMapeheat.setTemperature) {\n        MapeiMapeheat.setTemperature.skip(\"Set temperature skipped\")\n      }\n    }\n  )\n}", "intent": "When a button press event occurs, use the Share URL, Latitude, Longitude, Location Map URL, and Location Map Image URL to set the temperature of the Mapeheat Thermo Connect thermostat."}
{"original_description": "Automatically adjust your thermostat when the temperature outside gets too hot.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Mapeheat Thermo Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Mapei_Mapeheat.set_temperature", "Filter code method": "MapeiMapeheat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"Mapei_Mapeheat.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to set the temperature for", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Setpoint temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What setpoint temperature?", "Helper text": "The setpoint temperature", "Slug": "setpoint_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setSetpoint Temperature(string: setpoint_temperature)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "What duration?", "Helper text": "The time to hold the temperature until", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setDuration(string: duration)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 75) {\n  MapeiMapeheat.setTemperature.setScale(\"Celsius\")\n    .setSetpointTemperature(20)\n    .skip(\"Not hot enough\")\n} else if (Weather.currentTemperatureDropsBelow.Condition === \"Rain\") {\n  MapeiMapeheat.setTemperature.setScale(\"Fahrenheit\")\n    .setSetpointTemperature(72)\n    .runAction()\n} else {\n  MapeiMapeheat.setTemperature.setScale(\"Celsius\")\n    .setSetpointTemperature(25)\n    .runAction()\n}", "intent": "Automatically adjust your thermostat when the temperature outside gets too hot."}
{"original_description": "One-button widget/trigger to set a Nuheat thermostat to a user-defined temperature indefinitely.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Mapeheat Thermo Connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Mapei_Mapeheat.set_temperature", "Filter code method": "MapeiMapeheat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"Mapei_Mapeheat.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "The thermostat to set the temperature for", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scale?", "Helper text": "Celsius or fahrenheit", "Slug": "scale", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setScale(string: scale)"}}, {"section": "Action fields", "title": "Setpoint temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What setpoint temperature?", "Helper text": "The setpoint temperature", "Slug": "setpoint_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setSetpoint Temperature(string: setpoint_temperature)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "What duration?", "Helper text": "The time to hold the temperature until", "Slug": "duration", "Required": "false", "Can have default value": "true", "Filter code method": "MapeiMapeheat.setTemperature.setDuration(string: duration)"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\nvar LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nvar LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\n// Check if there is a user-defined temperature\nif (Setpoint_temperature != \"\") {\n  MapeiMapeheat.setTemperature.setScale(scale)\n  MapeiMapeheat.setTemperature.setSetpoint Temperature(setpoint_temperature)\n  // Set the Nuheat thermostat to the user-defined temperature\n  MapeiMapeheat.set_temperature(skip(string?: \"Invalid setpoint temperature\"))\n} else {\n  MapeiMapeheat.set_temperature.skip(\"No setpoint temperature defined\")\n}", "intent": "One-button widget/trigger to set a Nuheat thermostat to a user-defined temperature indefinitely. When the button is pressed, it retrieves the user-defined temperature, and then sets the Nuheat thermostat to that temperature."}
{"original_description": "Have your Philips Hue lights change color when your Cookit has finished cooking.", "trigger_channel": "Home Connect Cookit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_cook_processor.cook_processor_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Cookit?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCookProcessor.cookProcessorFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var HaId = $$ha_id$$;\nvar CreatedAt = HcCookProcessor.cookProcessorFinished.CreatedAt;\nvar Lights = $$lights$$;\nvar Color = $$color$$;\n\nif (HaId === null) {\n  Hue.setColorAllHue.skip(\"No Cookit selected\");\n} else {\n  if (CreatedAt !== null && CreatedAt > new Date()) {\n    Hue.setColorAllHue.skip(\"Cooking has not finished yet\");\n  } else {\n    Hue.setColorAllHue.setColor(Color);\n  }\n}", "intent": "When the Cookit has finished cooking, change the Philips Hue lights to a specified color."}
{"original_description": "Start playing your favorite song on your Sonos when your oven has finished and dinner is ready", "trigger_channel": "Home Connect Oven", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_oven.oven_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which oven?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcOven.ovenFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (HcOven.ovenFinished.CreatedAt > 0) {\n  // Get selected values\n  var haId = $$HaDropdownList$$;\n  var favorite = $$FavoriteDropdownList$$;\n  var room = $$RoomDropdownList$$;\n  var includeGroupedRooms = $$Include Grouped RoomsDropdownList$$.toLowerCase() === \"true\";\n  \n  // Set Sonos action parameters\n  Sonos.playFavorite(favorite, room, includeGroupedRooms);\n}", "intent": "When the oven finishes cooking, play your favorite song on Sonos in a specific room and set to include grouped rooms if desired."}
{"original_description": "Enable the device on specific day. For example, enable the device on early spring.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.set_device_status", "Filter code method": "Netro.setDeviceStatus.skip(string?: reason)", "Runtime method": "runAction(\"netro.set_device_status\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "status", "Helper text": "Device status", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.setDeviceStatus.setStatus(string: status)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.includes(\"spring\")) {\n  Netro.setDeviceStatus.runAction({ \"device\": \"YourDevice\", \"status\": \"Enabled\" });\n} else {\n  Netro.setDeviceStatus.skip(\"Not a spring day\");\n}", "intent": "Enable the Netro device on a specific day, for example, early spring."}
{"original_description": "Disable the device on specific day. For example, enable the device on early winter for winterization.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.set_device_status", "Filter code method": "Netro.setDeviceStatus.skip(string?: reason)", "Runtime method": "runAction(\"netro.set_device_status\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "status", "Helper text": "Device status", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.setDeviceStatus.setStatus(string: status)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.includes(\"Winter\")) {\n  Netro.setDeviceStatus.setStatus(\"OFF\")\n} else {\n  // No action is needed\n}", "intent": "Disable the Netro device on a specific day, for example, disable it in winter."}
{"original_description": "Set Phyn to turn up the heat in your home to warm up your pipes if you get a warning that your pipes are going to freeze. ", "trigger_channel": "Phyn", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "phyn.alert_raised"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which home?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Alert type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which type of alert?", "Helper text": "Alert type", "Slug": "alert_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Phyn.alertRaised.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Home name\nName of the home for which the alert is detected.", "description": "Name of the home for which the alert is detected.", "details": {"Slug": "home_name", "Filter code": "Phyn.alertRaised.HomeName", "Type": "String", "Example": "Vacation home"}}, {"section": "Ingredients", "title": "Alert type\nType of the alert detected.", "description": "Type of the alert detected.", "details": {"Slug": "alert_type", "Filter code": "Phyn.alertRaised.AlertType", "Type": "String", "Example": "Leak alert"}}, {"section": "Ingredients", "title": "Alert time\nThe time when this alert is detected.", "description": "The time when this alert is detected.", "details": {"Slug": "alert_time", "Filter code": "Phyn.alertRaised.AlertTime", "Type": "String", "Example": "2019-08-07 16:10 PM PST"}}, {"section": "Ingredients", "title": "Suggested fixtures\nThe fixtures associated with a leak alert.", "description": "The fixtures associated with a leak alert.", "details": {"Slug": "suggested_fixtures", "Filter code": "Phyn.alertRaised.SuggestedFixtures", "Type": "String", "Example": "'sink, shower'"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Phyn.alertRaised.AlertType === \"Pipe Freeze Alert\") {\n  var Home = Phyn.alertRaised.HomeName\n  var Device = Phyn.alertRaised.Device\n  var CreatedAt = Phyn.alertRaised.CreatedAt\n  var AlertTime = Phyn.alertRaised.AlertTime\n  if (Date.now() - Date.parse(CreatedAt) > 3600000) {\n    GoogleNestThermostat.setHotTemperature.skip(\"Alert is old, not taking action\")\n  } else {\n    GoogleNestThermostat.setHotTemperature.setDevice(Device)\n      .setHotTemperature(75) // Assuming default temperature\n      .run()\n  }\n}", "intent": "If a Phyn alert is raised and it's not already warm in your home, turn up the heat to prevent pipes from freezing."}
{"original_description": "Weather getting warm outside? Turn down your LightwaveRF heating devices target temperature.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LightwaveRF Heating", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_heating.set_temperature", "Filter code method": "LightwaverfHeating.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_heating.set_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Which thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat/trv?", "Slug": "which_thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "What temperature?", "Helper text": "Temperatures can be between 1 and 39 degrees°C, in 0.5 degree increments (e.g. &quot;32&quot; or &quot;32.5&quot;). You cannot set temperature ranges (e.g. “22-30”).", "Slug": "what_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "LightwaverfHeating.setTemperature.setWhat Temperature(string: what_temperature)"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.temp_fahrenheit < 72) {\n  LightwaverfHeating.setTemperature.skip(\"No need to heat\")\n} else {\n  LightwaverfHeating.setTemperature.setWhatTemperature(72)\n}", "intent": "When the current temperature in Fahrenheit drops below a certain threshold, adjust the LightwaveRF heating devices' target temperature accordingly."}
{"original_description": "Nutze deine Qbox um die Rollläden zu schließen, wenn es im Raum zu warm ist.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit\nif (tempFahrenheit > 72) { \n  Coqon.simpleRuleAction.skip(\"Not hot enough\")\n} else {\n  Coqon.simpleRuleAction.runAction({\"action_code\": \"Domovea.shadeClose()})\n}", "intent": "Close shades when it gets too warm in a room, based on Weather Underground's current temperature."}
{"original_description": "If it's raining outside, you'll want some nice warm colors inside! ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.color", "Filter code method": "Lifx.color.skip(string?: reason)", "Runtime method": "runAction(\"lifx.color\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights turn on to the color, even when they are turned off in the app.", "Slug": "color_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.color.setColor If Off(string: color_if_off)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; duration: 12&quot; for red at 30% brightness, 12 second fade. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.color.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var condition = Weather.currentConditionIs.Condition\nif (condition === \"Rain\") {\n  var selector = \"Living Room\"\n  var color = \"Warm Colors\"\n  var brightness = \"50%\"\n  Lifx.color.runAction({\"selector\": selector, \"color\": color, \"brightness\": brightness})\n} else {\n  Lifx.color.skip(\"No rain forecasted\")\n}", "intent": "Check if it's raining and if so, set the LIFX color to warm colors."}
{"original_description": "Uses warmer lighting tones with your Philips Hue bulbs when you are at home so you can set a lower, more efficient comfort temperature and still feel warm and cosy.  ", "trigger_channel": "Warmup Smart Thermostat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "warmup_smart_thermostat.home"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nDropdown list", "description": "Dropdown list", "details": {"Label": "Location", "Slug": "location", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WarmupSmartThermostat.home.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "", "intent": ""}
{"original_description": "This applet lets you store presence information in Apilio, so you can know if someone has been detected by your Wyze camera to automate any home logic", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.motion_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Motion detected\nMotion detected on your wyze camera.", "description": "Motion detected on your wyze camera.", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.motionTrigger.MotionDetected", "Type": "String", "Example": "Motion detected on your wyze camera."}}, {"section": "Ingredients", "title": "Trigger time\nTime when motion is triggered.", "description": "Time when motion is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.motionTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Check if the trigger has a valid device\nvar serializeDeviceInfo = WyzeCam.motionTrigger.serialize_device_info\n\nif (serializeDeviceInfo !== \"\") {\n  // Get the time when motion was triggered\n  var triggerTime = WyzeCam.motionTrigger.TriggerTime\n  // Update Apilio boolean variable to true with reason\n  if (Apilio.booleanVariableToTrueUpdates.skip(\"Motion detected by \" + serializeDeviceInfo + \" at \" + triggerTime) == false) {\n    // If the update fails, skip the action\n    WyzeCam.shadeClose.skip(\"Failed to update Apilio variable\")\n  }\n}", "intent": "The applet stores presence information in Apilio based on motion detection by Wyze camera, then updates an Apilio boolean variable to true."}
{"original_description": "Automate your lighting to turn on whenever a contact sensor opens. Choose which Wyze contact sensor should trigger the automation and the corresponding Hue light that you'd like to turn on.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.contact_sensor_close_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Trigger time\nTime when contact sensor close is triggered.", "description": "Time when contact sensor close is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.contactSensorCloseTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Trigger message\n{{fields.serialize_device_info.label}} closed", "description": "{{fields.serialize_device_info.label}} closed", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.contactSensorCloseTrigger.TriggerMessage", "Type": "String", "Example": "Contact sensor close sensed on your wyze contact sensor."}}, {"section": "Ingredients", "title": "Contact sensor name\nContact sensor name which close is triggered.", "description": "Contact sensor name which close is triggered.", "details": {"Slug": "DeviceName", "Filter code": "Wyzecam.contactSensorCloseTrigger.ContactSensorName", "Type": "String", "Example": "your wyze contact sensor"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "let TriggerTime = Wyzecam.contactSensorCloseTrigger.TriggerTime;\nif (TriggerTime) {\n  if (WyzeContactSensorName === \"your wyze contact sensor\") {\n    Hue.turnOffAllHue.skip(\"Incorrect contact sensor triggered\");\n  } else {\n    let SelectedLights = [];\n    for (let light of [Light]) {\n      if (light !== \"\") {\n        SelectedLights.push(light);\n      }\n    }\n    if (SelectedLights.length > 0) {\n      Hue.turnOn(SelectedLights);\n    } else {\n      Hue.turnOffAllHue.skip(\"No lights selected\");\n    }\n  }\n}", "intent": "Automate Philips Hue lighting to turn on when a Wyze contact sensor opens."}
{"original_description": "This applet lets you store presence information in Apilio, so you can know if someone has been detected by your Wyze sensor to automate any home logic.", "trigger_channel": "Wyze", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wyzecam.motion_sensor_no_detects_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Trigger time\nTime when motion sensor becomes clear is triggered.", "description": "Time when motion sensor becomes clear is triggered.", "details": {"Slug": "trigger_time", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.TriggerTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Motion sensor name\nMotion sensor name which becomes clear is triggered.", "description": "Motion sensor name which becomes clear is triggered.", "details": {"Slug": "DeviceName", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName", "Type": "String", "Example": "your wyze motion sensor"}}, {"section": "Ingredients", "title": "Trigger message\n{{fields.serialize_device_info.label}} becomes clear", "description": "{{fields.serialize_device_info.label}} becomes clear", "details": {"Slug": "TriggerMessage", "Filter code": "Wyzecam.motionSensorNoDetectsTrigger.TriggerMessage", "Type": "String", "Example": "Motion sensor becomes clear on your motion sensor."}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Wyzecam.motionSensorNoDetectsTrigger.TriggerTime > 0) {\n  Apilio.booleanVariableToTrueUpdates.skip(\"No motion detected\")\n} else {\n  var variableIdentifier = Domovea.variable_identifier\n  if (!variableIdentifier) {\n    Apilio.booleanVariableToTrueUpdates.skip(\"No Apilio variable selected\")\n  } else {\n    Apilio.booleanVariableToTrueUpdates(variableIdentifier)\n  }\n}", "intent": "The applet checks if the Wyze motion sensor becomes clear and stores presence information in Apilio."}
{"original_description": "Stay organized and share all your Instagram pics to an album on your Facebook Page, automatically. Great for small business marketing! You can customize the Album name. Note: only works for single photo posts.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Facebook Pages", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "facebook_pages.create_photo_page", "Filter code method": "FacebookPages.createPhotoPage.skip(string?: reason)", "Runtime method": "runAction(\"facebook_pages.create_photo_page\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setMessage(string: message)"}}, {"section": "Action fields", "title": "Album\nText input > Other", "description": "Text input > Other", "details": {"Label": "Album name", "Helper text": "Provide the name of an existing album, or leave blank for no album. If a non-existent album name is provided, you'll receive <a href=\"https://help.ifttt.com/hc/en-us/articles/5343334604187\" target=\"_blank\">this error</a>", "Slug": "album", "Required": "false", "Can have default value": "true", "Filter code method": "FacebookPages.createPhotoPage.setAlbum(string: album)"}}], "filter_code": "if (Instagram.anyNewPhotoByYou.Caption !== \"\") {\n  var albumName = \"Instagram Photos\"\n  if (!FacebookPages.createPhotoPage.getAlbum(albumName)) {\n    FacebookPages.createPhotoPage.skip(\"No such album exists\")\n  }\n  \n  var photoUrl = Instagram.anyNewPhotoByYou.Url\n  var message = \"A cool photo\"\n  FacebookPages.createPhotoPage.setPhotoUrl(photoUrl)\n  FacebookPages.createPhotoPage.setMessage(message)\n  \n  if (albumName !== \"\") {\n    FacebookPages.createPhotoPage.setAlbum(albumName)\n  }\n}", "intent": "Automatically share Instagram photos to a Facebook Page, creating an album for the photos and setting the photo URL, message, and album name."}
{"original_description": "Treat your kids with a boost to their Spend cauldron on Halloween day! ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime.includes(\"Oct 31\")) {\n  Roostermoney.boost.setAmount(parseFloat(DateAndTime.everyYearOn.CheckTime.split(' ')[1].split(',')[0]).toFixed(2))\n    .setChild(\"Your Child's Name\")\n    .setPot(\"Spend Cauldron\")\n    .setDescription(\"Halloween Boost!\")\n    .runAction()\n} else {\n  Roostermoney.boost.skip(\"Not Halloween day\");\n}", "intent": "This filter checks if it's Halloween day (October 31st) and boosts a specific child's Spend cauldron on RoosterMoney."}
{"original_description": "Inspired by the @MrFinanceiQ tweet: \"to waste £5,000 in a year, all it takes is to spend an unnecessary £13.70 a day.\"", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime >= \"08:00\" && DateAndTime.everyDayAt.CheckTime <= \"22:00\") {\n  if (Monzo.potDeposit.getPot() && Monzo.potDeposit.getAmount()) {\n    Monzo.potDeposit.setAmount(Monzo.potDeposit.getAmount())\n    Monzo.potDeposit.skip()\n  } else {\n    Monzo.potDeposit.skip(\"No pot or amount selected\")\n  }\n} else {\n  Monzo.potDeposit.skip(\"Outside of active hours\")\n}", "intent": "Check if the current time is between 8am and 10pm, otherwise skip the action. If the pot and amount are selected, deposit the specified amount into the chosen pot."}
{"original_description": "Get a daily email digest of new shows for you based on your keyword or topic. This can also be used for episodes with the New episode from search trigger.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.search_show"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input", "description": "Text input", "details": {"Label": "query", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Show\nThe show's ID.", "description": "The show's ID.", "details": {"Slug": "show_id", "Filter code": "Spotify.searchShow.ShowId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Show name\nThe name of the show.", "description": "The name of the show.", "details": {"Slug": "show_name", "Filter code": "Spotify.searchShow.ShowName", "Type": "String", "Example": "Darknet Diaries"}}, {"section": "Ingredients", "title": "Show description\nThe description of the show.", "description": "The description of the show.", "details": {"Slug": "show_description", "Filter code": "Spotify.searchShow.ShowDescription", "Type": "String", "Example": "Explore the dark side of the Internet with host Jack Rhysider as he takes you on a journey through the chilling world of privacy hacks, data breaches, and cyber crime. The masterful criminal hackers who dwell on the dark side show us just how vulnerable w"}}, {"section": "Ingredients", "title": "Show url\nThe URL to the show on Spotify.", "description": "The URL to the show on Spotify.", "details": {"Slug": "show_url", "Filter code": "Spotify.searchShow.ShowUrl", "Type": "Web URL", "Example": "https://open.spotify.com/show/4XPl3uEEL9hvqMkoZrzbx5"}}, {"section": "Ingredients", "title": "Show cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "show_cover_url", "Filter code": "Spotify.searchShow.ShowCoverUrl", "Type": "Image URL", "Example": "https://i.scdn.co/image/53ba2adaaf2d3e47898aed9edb64026145032e7b"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var showId = Spotify.searchShow.ShowId\nif (showId !== \"\") {\n  var title = \"New Shows: \" + showName\n  var message = \"Explore new shows on \" + show_name + \": \" + show_description + \"\\n\" + show_url\n  if (time_of_day !== \"\") { EmailDigest.sendDailyEmail.setTimeOfDay(time_of_day) }\n  EmailDigest.sendDailyEmail.setTitle(title)\n  if (message !== \"\") { EmailDigest.sendDailyEmail.setMessage(message) }\n  if (url !== \"\") { EmailDigest.sendDailyEmail.setUrl(url) }\n} else {\n  EmailDigest.sendDailyEmail.skip(\"No new shows found\")\n}", "intent": "Automate the daily email digest of new shows based on a keyword or topic from Spotify search."}
{"original_description": "Press this handy button to liquidate all positions at the end of the day.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.liquidate_positions", "Filter code method": "Alpaca.liquidatePositions.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.liquidate_positions\", {})"}, "action_details": [], "filter_code": "var DayOfWeek = Meta.currentUserTime.day()\nif (DayOfWeek !== 0 && DayOfWeek !== 6) {\n  var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\n  if (ShareURL.includes(\"SpecificCondition\")) {\n    Alpaca.liquidatePositions.skip(\"No need to liquidate\")\n  } else {\n    Alpaca.liquidatePositions.runAction({}, {\"reason\": \"Liquidation required\"})\n  }\n} else {\n  Alpaca.liquidatePositions.skip(\"Weekend - no action\")\n}", "intent": "At the end of each trading day, liquidate all positions if it is not the weekend and a specific condition is met."}
{"original_description": "Have Apilio run a Logicblock evaluation every time Netatmo Weather Station detects noise. A very handy applet if you want to turn your Netatmo Weather Station into a simple home security system.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.noise-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target noise level", "Helper text": "In decibels (dB)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured noise level\nThe measured noise level in decibels", "description": "The measured noise level in decibels", "details": {"Slug": "MeasuredNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.MeasuredNoiseLevel", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Target noise level\nThe target noise level in decibels", "description": "The target noise level in decibels", "details": {"Slug": "TargetNoiseLevel", "Filter code": "Netatmo.noiseRisesAbove.TargetNoiseLevel", "Type": "String", "Example": "53"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.noiseRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the noise", "description": "This is the name of the Netamo device where you are reading the noise", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.noiseRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.logicblock_evaluation_requests", "Filter code method": "Apilio.logicblockEvaluationRequests.skip(string?: reason)", "Runtime method": "runAction(\"apilio.logicblock_evaluation_requests\", {})"}, "action_details": [{"section": "Action fields", "title": "Logicblock identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio logicblock do you want to evaluate?", "Slug": "logicblock_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.noiseRisesAbove.MeasuredNoiseLevel > parseInt(Netatmo.noiseRisesAbove.TargetNoiseLevel)) {\n  if (Apilio.logicblockEvaluationRequests.skip(\"Logicblock evaluation skipped - noise level below target\")) {\n    // Skip the logic block evaluation\n  } else {\n    Apilio.logicblockEvaluationRequests.runAction({}, \"apilio.logicblock_evaluation_requests\");\n  }\n}", "intent": "Evaluate Apilio's Logicblock every time Netatmo Weather Station detects noise above a certain threshold."}
{"original_description": "Kick off Mondays with an email full of startup news and analysis from the number one site reporting on tech. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var TimeOfDay = \"07:00\";\nvar DayOfWeek = \"Monday\";\n\nif (Meta.currentUserTime.day() == 1) {\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(TimeOfDay);\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(DayOfWeek);\n\n  var Message = \"Kick off Mondays with an email full of startup news and analysis from the number one site reporting on tech. \";\n  if (Feed.newFeedItem.EntryTitle !== null) {\n    Message += \"Latest title: \" + Feed.newFeedItem.EntryTitle;\n  }\n  \n  EmailDigest.sendWeeklyEmail.setMessage(Message);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Monday\");\n}", "intent": "The intent of this automation is to send a weekly email digest on Mondays, containing startup news and analysis from the IFTTT blog."}
{"original_description": "Make it easier to never miss a notification by blinking your Hue Lights anytime you get a notification from a specific app. Enter the name of the app under the \"Which App\" field then choose which Hue lights you'd like to blink.", "trigger_channel": "Android Device", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_device.new_notification_from_app"}, "trigger_details": [{"section": "Trigger fields", "title": "App name\nText input", "description": "Text input", "details": {"Label": "App name", "Helper text": "e.g. Twitter", "Slug": "app_name", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by notification keyword", "Helper text": "e.g. mentioned", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Received at\nThe time the notification was received.", "description": "The time the notification was received.", "details": {"Slug": "ReceivedAt", "Filter code": "AndroidDevice.newNotificationFromApp.ReceivedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "App name\nThe application name of the notification", "description": "The application name of the notification", "details": {"Slug": "AppName", "Filter code": "AndroidDevice.newNotificationFromApp.AppName", "Type": "String", "Example": "Twitter"}}, {"section": "Ingredients", "title": "Notification message\nMessage text of the notification", "description": "Message text of the notification", "details": {"Slug": "NotificationMessage", "Filter code": "AndroidDevice.newNotificationFromApp.NotificationMessage", "Type": "String", "Example": "@jamisonross12 oh I love that song by Toto too!"}}, {"section": "Ingredients", "title": "Notification title\nTitle of the notification", "description": "Title of the notification", "details": {"Slug": "NotificationTitle", "Filter code": "AndroidDevice.newNotificationFromApp.NotificationTitle", "Type": "String", "Example": "Mentioned by @MrTibbets"}}, {"section": "Ingredients", "title": "Device name\nThe name of your device where the notification was received.", "description": "The name of your device where the notification was received.", "details": {"Slug": "device_name", "Filter code": "AndroidDevice.newNotificationFromApp.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var AppName = AndroidDevice.newNotificationFromApp.AppName\nif (AppName === $$APP_NAME$$) {\n  var Lights = []\n  action_details.forEach(function(field) {\n    if (field.details.Label === \"Which lights?\") {\n      Lights = field.details.Lights\n    }\n  })\n  Hue.blinkAllHue(Lights)\n} else {\n  Hue.blinkAllHue.skip(\"Notification is not from the specified app\")\n}", "intent": "Check if the received notification is from a specific app and blink all selected Hue lights."}
{"original_description": "Input a topic or keyword of your choice to get a notification anytime a new episode on this topic is released. We have added filter code to limit the notifications per day. This Applet can be re-created using the New show from search trigger as well or with an email digest as an action.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.search_episode"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input", "description": "Text input", "details": {"Label": "query", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Episode\nThe episode's ID.", "description": "The episode's ID.", "details": {"Slug": "episode_id", "Filter code": "Spotify.searchEpisode.EpisodeId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Episode release date\nThe date when episode was released.", "description": "The date when episode was released.", "details": {"Slug": "episode_release_date", "Filter code": "Spotify.searchEpisode.EpisodeReleaseDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Episode name\nThe episode's name.", "description": "The episode's name.", "details": {"Slug": "episode_name", "Filter code": "Spotify.searchEpisode.EpisodeName", "Type": "String", "Example": "Is \\\"Resources\\\" a Dirty Word?"}}, {"section": "Ingredients", "title": "Episode cover url\nEpisode cover art.", "description": "Episode cover art.", "details": {"Slug": "episode_cover_url", "Filter code": "Spotify.searchEpisode.EpisodeCoverUrl", "Type": "Image URL", "Example": "https://i.scdn.co/image/a3f8306a743873e12282bf48395d9ad45e704cb7"}}, {"section": "Ingredients", "title": "Episode description\nThe episode's description. May contain HTML.", "description": "The episode's description. May contain HTML.", "details": {"Slug": "episode_description", "Filter code": "Spotify.searchEpisode.EpisodeDescription", "Type": "String", "Example": "In this episode, ..."}}, {"section": "Ingredients", "title": "Episode url\nThe URL to the episode on Spotify.", "description": "The URL to the episode on Spotify.", "details": {"Slug": "episode_url", "Filter code": "Spotify.searchEpisode.EpisodeUrl", "Type": "Web URL", "Example": "https://open.spotify.com/episode/19TIFzN141JLsIUFVPqS5Q"}}, {"section": "Ingredients", "title": "Episode languages\nA list of the languages used in the episode, identified by their ISO 639 code.", "description": "A list of the languages used in the episode, identified by their ISO 639 code.", "details": {"Slug": "episode_languages", "Filter code": "Spotify.searchEpisode.EpisodeLanguages", "Type": "String", "Example": "en,es"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "var query = Spotify.searchEpisode.query;\nvar episodeId = Spotify.searchEpisode.EpisodeId;\nvar episodeReleaseDate = Spotify.searchEpisode.EpisodeReleaseDate;\nif (new Date() > new Date(episodeReleaseDate)) {\n  IfNotifications.sendRichNotification.skip(\"New episode already released\");\n} else {\n  if (getDayOfTheWeek() === 'Monday' || getDayOfTheWeek() === 'Tuesday' || getDayOfTheWeek() === 'Wednesday') { // limit notifications to weekdays\n    IfNotifications.sendRichNotification.setMessage(query);\n  } else {\n    IfNotifications.sendRichNotification.skip(\"Only notified on weekdays\");\n  }\n}\n\nfunction getDayOfTheWeek() {\n  var today = new Date();\n  return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][today.getDay()];\n}", "intent": "Notify the user when a new episode is released, but limit notifications per day."}
{"original_description": "Slow down for 5 minutes! Pick a time and remind yourself to sit quietly and meditate.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime === \"5 minutes ago\") {\n  IfNotifications.sendNotification.skip(\"Already sent reminder\")\n} else {\n  var Time = Meta.currentUserTime.format(\"h:mm:ss\")\n  if (Time >= CheckTime) {\n    // Delay for the set amount of time\n    setTimeout(function() {\n      IfNotifications.sendNotification.setMessage(\"Take a moment to breathe and focus.\")\n    }, 300000)\n  } else {\n    // Skip the action if not yet triggered\n    IfNotifications.sendNotification.skip(\"Not yet triggered\")\n  }\n}", "intent": "Pause for a set amount of time based on the scheduled trigger time, and send a notification if it is not already done."}
{"original_description": "An easy way to turn off your lights automatically at a fixed time, every day!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === DateAndTime.everyWeekdayAt.Details.weekdays) {\n  var Time = DateAndTime.everyWeekdayAt.Details.time\n  if (Meta.currentUserTime.hour() == parseInt(Time.split(\":\")[0]) && Meta.currentUserTime.minute() == parseInt(Time.split(\":\")[1])) {\n    Hue.turnOffAllHue()\n  } else {\n    Hue.turnOffAllHue.skip(\"Not the specified time\")\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Not a weekday\")\n}", "intent": "Turn off all Philips Hue lights at a specified time every day, if the current day of the week matches the selected weekdays."}
{"original_description": "Activate a TP-Link Kasa scene every day at a specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.activate_scene", "Filter code method": "Kasa.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"kasa.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Select a scene from your account to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time === 'Time') {\n  var Scene = 'Scene'\n  if (!Scene) {\n    Kasa.activateScene.skip('No scene selected')\n  } else {\n    Kasa.activateScene(Scene)\n  }\n}", "intent": "Activate the TP-Link Kasa scene at a specific time every day."}
{"original_description": "Save £1 every time it rains", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Dozens.save.skip(\"No rain detected\")\n} else if (parseInt(Weather.currentConditionIs.TempFahrenheit) < 10 || parseInt(Weather.currentConditionIs.TempCelsius) < 5.6) {\n  var amount = \"1\"\n  Dozens.save.setAmount(amount)\n} else {\n  Dozens.save.skip(\"Not saving on sunny days\")\n}", "intent": "Save £1 every time it rains"}
{"original_description": "Excited for the new £50 note but concerned that you'll never actually get to hold one? By saving just 10p a day, you'll be ready when the big day comes 💵", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var CurrentTime = DateAndTime.everyDayAt.CheckTime\nif (CurrentTime >= '12:00AM' && CurrentTime <= '11:59PM') {\n  var Amount = 0.10 // Save 10p daily\n  if (Amount > 0) { \n    Monzo.potDeposit(Amount)\n  } else {\n    Monzo.potDeposit.skip(\"No money to deposit\")\n  }\n} else {\n  Monzo.potDeposit.skip(\"Outside of saving hours\")\n}", "intent": "Save 10p daily to reach £50 note and skip the action when not needed."}
{"original_description": "You can set the days and time you would like your hue lights to turn on below. An easy way to automate your lights!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "function checkTimeAndWeekday() {\n  const time = DateAndTime.everyWeekdayAt.time\n  if (DateAndTime.everyWeekdayAt.weekdays.includes(Meta.currentUserTime.day)) {\n    if (time >= \"06:00\" && time <= \"08:00\") {\n      Hue.turnOffAllHue.skip(\"Not within the set hours\")\n    } else {\n      Hue.turnOffAllHue()\n    }\n  } else {\n    Hue.turnOffAllHue.skip(\"Not a weekday\")\n  }\n}", "intent": "Automate Hue lights to turn off at specific days and times."}
{"original_description": "Modify the date and receive a message on your first day of classes for the school year.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var CheckTime = DateAndTime.everyYearOn.CheckTime\nif (CheckTime.startsWith(\"August\")) {\n  IfNotifications.sendNotification.setMessage(\"Happy first day of school!\")\n  IfNotifications.sendNotification()\n} else {\n  IfNotifications.sendNotification.skip(\"Not the first day of school\")\n}", "intent": "Send a notification on the first day of school with a custom message."}
{"original_description": "Send a predetermined message to your Teams channel on certain days and times.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" || \n   DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" || \n   DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (parseInt(Time.split(\" \")[1]) >= 8 && parseInt(Time.split(\" \")[1]) < 18) { // Check if it's between 8am and 6pm\n    MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Your predetermined message subject\")\n    MicrosoftTeams.postMessageToChannel.setMessageBody(\"Your predetermined message body\")\n    MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Normal\")\n    MicrosoftTeams.postMessageToChannel.run()\n  } else {\n    MicrosoftTeams.postMessageToChannel.skip(\"Outside of working hours - automation disabled\")\n  }\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Weekend - automation disabled\")\n}", "intent": "Send a predetermined message to Microsoft Teams on certain weekdays and times."}
{"original_description": "An easy way to turn on alerts of your SMACAME camera automatically at a fixed time, every day!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Planex", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "planex.start_arm", "Filter code method": "Planex.startArm.skip(string?: reason)", "Runtime method": "runAction(\"planex.start_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Record mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "SD Recording mode", "Slug": "record_mode", "Required": "true", "Can have default value": "true", "Filter code method": "Planex.startArm.setRecord Mode(string: record_mode)"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time == \"your_desired_time\") {\n  var Device = Planex.getDevice()\n  if (Device != \"\") {\n    Planex.startArm(Device, true)\n  } else {\n    Planex.startArm.skip(\"No device selected\")\n  }\n} else {\n  Planex.startArm.skip(\"Not the desired time\")\n}", "intent": "This IFTTT automation is designed to trigger the Planex camera's start arm feature at a specific time every day, based on the user's input. It will check if it's the desired time and then either skip the action or set the record mode accordingly."}
{"original_description": "Set your thermostat to turn off at a certain time each day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Warmup Smart Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "warmup_smart_thermostat.turn-off", "Filter code method": "WarmupSmartThermostat.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"warmup_smart_thermostat.turn-off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CurrentTime = DateAndTime.everyDayAt.CheckTime\nif (CurrentTime >= \"06:00\" && CurrentTime <= \"23:59\") {\n  WarmupSmartThermostat.turnOff.skip(\"Outside of active hours\")\n} else {\n  WarmupSmartThermostat.turnOff()\n}", "intent": "Set the thermostat to turn off at a specific time each day, using the current date and time as a reference."}
{"original_description": "An easy way to turn off alerts of your SMACAME camera automatically at a fixed time, every day!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Planex", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "planex.stop_arm", "Filter code method": "Planex.stopArm.skip(string?: reason)", "Runtime method": "runAction(\"planex.stop_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Record mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "SD Recording mode", "Slug": "record_mode", "Required": "true", "Can have default value": "true", "Filter code method": "Planex.stopArm.setRecord Mode(string: record_mode)"}}], "filter_code": "", "intent": "Automatically turn off alerts of the SMACAME camera at a fixed time every day."}
{"original_description": "Set your thermostat to a specific temperature at the same time each day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Warmup Smart Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "warmup_smart_thermostat.set-temperature", "Filter code method": "WarmupSmartThermostat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"warmup_smart_thermostat.set-temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Set temperature to?", "Helper text": "in °C (e.g. 22)", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "WarmupSmartThermostat.setTemperature.setTemperature(string: temperature)"}}], "filter_code": "function() {\n  var time = DateAndTime.everyDayAt.CheckTime\n  var hour = parseInt(time.split(\" \")[4])\n  var minute = parseInt(time.split(\" \")[5].split(\":\")[1])\n  \n  if (hour * 60 + minute === 0) {\n    // Set the thermostat at midnight, for example\n    WarmupSmartThermostat.setTemperature.setTemperature(22)\n  } else {\n    WarmupSmartThermostat.setTemperature.skip(`Invalid time: ${time}`)\n  }\n}", "intent": "Set the thermostat to a specific temperature at a fixed time every day."}
{"original_description": "Simulate a natural and gentle sunrise. The brightness gradually increases within 15 minutes from dim yellow until your room is filled with bright yellow light. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_color", "Filter code method": "Yeelight.setColor.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which color?", "Slug": "color_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": "Simulate a natural and gentle sunrise by gradually increasing brightness from dim yellow to bright yellow within 15 minutes. The action will set the color of a specified Yeelight device to bright yellow."}
{"original_description": "The brightness gradually increases within 15 minutes from 1% to 100% .", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.change_bright", "Filter code method": "Yeelight.changeBright.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.change_bright\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which brightness?", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var StartTime = DateAndTime.everyDayAt.CheckTime\nvar DeviceId = Yeelight.getDeviceId()\nvar SceneId = Yeelight.getSceneId()\n\nif (StartTime >= Meta.currentUserTime.format(\"YYYY-MM-DD HH:mm:ss\")) {\n  var Brightness = 1\n  while (Brightness <= 100) {\n    Yeelight.changeBright(Brightness, DeviceId, SceneId)\n    Brightness += 5\n    setTimeout(function() {\n      if (Brightness < 100) {\n        Yeelight.changeBright(Brightness + 5, DeviceId, SceneId)\n      }\n    }, 30000)\n  }\n} else {\n  Yeelight.changeBright.skip(\"Not within the specified time range\")\n}", "intent": "Gradually increase the brightness of the specified Yeelight device from 1% to 100% within 15 minutes."}
{"original_description": "Set time-based recording schedule for your cameras.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Angelcam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "angelcam.start_recording", "Filter code method": "Angelcam.startRecording.skip(string?: reason)", "Runtime method": "runAction(\"angelcam.start_recording\", {})"}, "action_details": [{"section": "Action fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera", "Slug": "camera", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime >= \"06:00\" && CheckTime < \"08:00\") {\n  if (Angelcam.camera === \"Camera1\") {\n    Angelcam.startRecording()\n  }\n} else if (CheckTime >= \"14:00\" && CheckTime < \"16:00\") {\n  if (Angelcam.camera === \"Camera2\") {\n    Angelcam.startRecording()\n  }\n} else if (CheckTime >= \"18:00\" && CheckTime < \"20:00\") {\n  if (Angelcam.camera === \"Camera3\") {\n    Angelcam.startRecording()\n  }\n} else {\n  Angelcam.startRecording.skip(\"Not within the scheduled recording time\")\n}", "intent": "Set up a recording schedule based on the current time for Angelcam cameras."}
{"original_description": "BOCCO reminds you every day at the specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "// Get the check-in time\nvar CheckTime = DateAndTime.everyDayAt.CheckTime;\n\n// Skip if not the current time\nif (CheckTime !== Meta.currentUserTime.format(\"YYYY-MM-DD HH:mm\")) {\n  Bocco.boccoSpeak.skip(\"Not the scheduled reminder time\");\n}\n\n// Set the room and message\nBocco.boccoSpeak.setRoom(Room);\nvar Message = \"Remember: \" + [Trigger].[ingredient];\nBocco.boccoSpeak.setMessage(Message);\n\n// Set the language\nBocco.boccoSpeak.setLang(Lang);", "intent": "BOCCO reminds you every day at a specific time."}
{"original_description": "Start Christmas Day with your Hue Lights Colour looping. Happy holidays! ", "trigger_channel": "Is It Christmas?", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "isitchristmas.christmas"}, "trigger_details": [{"section": "Trigger fields", "title": "Timezone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which timezone?", "Slug": "timezone", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Year\nThe year in which it is Christmas.", "description": "The year in which it is Christmas.", "details": {"Slug": "year", "Filter code": "Isitchristmas.christmas.Year", "Type": "String", "Example": "2014"}}, {"section": "Ingredients", "title": "Created at\nChristmas time.", "description": "Christmas time.", "details": {"Slug": "created_at", "Filter code": "Isitchristmas.christmas.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Answer\nIt will always be \"YES\".", "description": "It will always be \"YES\".", "details": {"Slug": "answer", "Filter code": "Isitchristmas.christmas.Answer", "Type": "String", "Example": "YES"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Isitchristmas.christmas.Year === \"2014\" && Isitchristmas.christmas.CreatedAt.format(\"YYYY-MM-DD\") === \"25-12-2014\") {\n  var lights = [\"all_hue_lights\"] // Get the list of lights from the trigger details\n  Hue.setColorAllHue.setLights(lights)\n  var color = \"loop\" // Set the color to loop\n  Hue.setColorAllHue.setColor(color)\n} else {\n  Hue.setColorAllHue.skip(\"Not Christmas Day\")\n}", "intent": "This intent is to check if it is Christmas Day and set the Philips Hue lights to loop colors on that day."}
{"original_description": "At 8 AM on the last day of the month you'll get a push notification reminding you to pay up. Sad wallet...happy landlord!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_month_on_the"}, "trigger_details": [{"section": "Trigger fields", "title": "Month day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of the month", "Slug": "month_day", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyMonthOnThe.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var CheckTime = DateAndTime.everyMonthOnThe.CheckTime\nif (CheckTime.includes(\"08:00\") && new Date(CheckTime).getDate() === new Date().getDate()) {\n  IfNotifications.sendNotification(\"Sad wallet...happy landlord!\", \"Reminder to pay up on the last day of the month\")\n} else {\n  IfNotifications.sendNotification.skip(\"Not the last day of the month\")\n}", "intent": "Generate a JavaScript filter code that sends a push notification at 8 AM on the last day of the month with a reminder to pay up."}
{"original_description": "Daily email digest for good news for an uplifting start to your day.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "if (Feed.newFeedItem.EntryPublished > Date.now() - 24 * 60 * 60 * 1000) { // Only consider today's news\n    var entryTitle = Feed.newFeedItem.EntryTitle;\n    var entryUrl = Feed.newFeedItem.EntryUrl;\n    if (entryTitle.includes(\"good\") || entryTitle.includes(\"great\")) {\n        var message = \"Good news: \" + entryTitle + \"\\n\" + entryUrl;\n        EmailDigest.sendDailyEmail.setTitle(\"Uplifting News\");\n        EmailDigest.sendDailyEmail.setMessage(message);\n        EmailDigest.sendDailyEmail.setUrl(entryUrl);\n    } else {\n      EmailDigest.sendDailyEmail.skip(\"No good news found in today's entries\")\n    }\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Only considering today's news, skip this entry\")\n}", "intent": "This IFTTT filter generates a daily email digest with good news to start the day. It triggers when new feed items are available and filters out entries that do not meet certain conditions."}
{"original_description": "Get a message from the IFTTT team on the first day of school. Modify the day to match your school's start date.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "", "intent": "Send a notification with a custom message on the first day of school."}
{"original_description": "Buy stocks using Google Sheets by entering symbol name in column A and quantity in column B.", "trigger_channel": "Google Sheets", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_sheets.new_row_in_spreadsheet"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Enter the folder path...", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Recipes/Vegetables&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Filename\nText input > Other", "description": "Text input > Other", "details": {"Label": "and enter the filename", "Helper text": "E.g. Vegetable Recipes", "Slug": "filename", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Spreadsheet url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Or copy and paste the spreadsheet URL", "Helper text": "Must be a valid spreadsheet URL", "Slug": "spreadsheet_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the spreadsheet.", "description": "The name of the spreadsheet.", "details": {"Slug": "spreadsheet_name", "Filter code": "GoogleSheets.newRowInSpreadsheet.Filename", "Type": "String", "Example": "2018 Trip ideas"}}, {"section": "Ingredients", "title": "Path\nPath of the new spreadsheet.", "description": "Path of the new spreadsheet.", "details": {"Slug": "path", "Filter code": "GoogleSheets.newRowInSpreadsheet.Path", "Type": "String", "Example": "IFTTT/Faves"}}, {"section": "Ingredients", "title": "Spreadsheet url\nThe URL to the spreadsheet on Google Sheets.", "description": "The URL to the spreadsheet on Google Sheets.", "details": {"Slug": "spreadsheet_url", "Filter code": "GoogleSheets.newRowInSpreadsheet.SpreadsheetUrl", "Type": "Web URL", "Example": "https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0"}}, {"section": "Ingredients", "title": "Created at\nDate and time row was added.", "description": "Date and time row was added.", "details": {"Slug": "created_at", "Filter code": "GoogleSheets.newRowInSpreadsheet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Row index\nThe numerical value of the new row.", "description": "The numerical value of the new row.", "details": {"Slug": "row_index", "Filter code": "GoogleSheets.newRowInSpreadsheet.RowIndex", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Column a\nValue in column A", "description": "Value in column A", "details": {"Slug": "column_a", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnA", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Column b\nValue in column B", "description": "Value in column B", "details": {"Slug": "column_b", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnB", "Type": "String", "Example": "$99"}}, {"section": "Ingredients", "title": "Column c\nValue in column C", "description": "Value in column C", "details": {"Slug": "column_c", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnC", "Type": "String", "Example": "Towel"}}, {"section": "Ingredients", "title": "Column d\nValue in column D", "description": "Value in column D", "details": {"Slug": "column_d", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnD", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Column e\nValue in column E", "description": "Value in column E", "details": {"Slug": "column_e", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnE", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column f\nValue in column F", "description": "Value in column F", "details": {"Slug": "column_f", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnF", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column g\nValue in column G", "description": "Value in column G", "details": {"Slug": "column_g", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnG", "Type": "String", "Example": "Delivery Date"}}, {"section": "Ingredients", "title": "Column h\nValue in column H", "description": "Value in column H", "details": {"Slug": "column_h", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnH", "Type": "String", "Example": "November 7th, 2017"}}, {"section": "Ingredients", "title": "Column i\nValue in column I", "description": "Value in column I", "details": {"Slug": "column_i", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnI", "Type": "String", "Example": "Delivery Address"}}, {"section": "Ingredients", "title": "Column j\nValue in column J", "description": "Value in column J", "details": {"Slug": "column_j", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnJ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column k\nValue in column K", "description": "Value in column K", "details": {"Slug": "column_k", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnK", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column l\nValue in column L", "description": "Value in column L", "details": {"Slug": "column_l", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnL", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column m\nValue in column M", "description": "Value in column M", "details": {"Slug": "column_m", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnM", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column n\nValue in column N", "description": "Value in column N", "details": {"Slug": "column_n", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnN", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column o\nValue in column O", "description": "Value in column O", "details": {"Slug": "column_o", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnO", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column p\nValue in column P", "description": "Value in column P", "details": {"Slug": "column_p", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnP", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column q\nValue in column Q", "description": "Value in column Q", "details": {"Slug": "column_q", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnQ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column r\nValue in column R", "description": "Value in column R", "details": {"Slug": "column_r", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnR", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column s\nValue in column S", "description": "Value in column S", "details": {"Slug": "column_s", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnS", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column t\nValue in column T", "description": "Value in column T", "details": {"Slug": "column_t", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnT", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column u\nValue in column U", "description": "Value in column U", "details": {"Slug": "column_u", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnU", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column v\nValue in column V", "description": "Value in column V", "details": {"Slug": "column_v", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnV", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column w\nValue in column W", "description": "Value in column W", "details": {"Slug": "column_w", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnW", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column x\nValue in column X", "description": "Value in column X", "details": {"Slug": "column_x", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnX", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column y\nValue in column Y", "description": "Value in column Y", "details": {"Slug": "column_y", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnY", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column z\nValue in column Z", "description": "Value in column Z", "details": {"Slug": "column_z", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnZ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "// Check if it's a weekday\nif (Meta.currentUserTime.day() !== 6 && Meta.currentUserTime.day() !== 0) {\n  // Get the symbol from column A\n  var symbol = GoogleSheets.newRowInSpreadsheet.ColumnA;\n  \n  // Check if the quantity in column B is valid\n  if (GoogleSheets.newRowInSpreadsheet.ColumnB > 0) {\n    // Place the market order using Alpaca API\n    Alpaca.placeMarketOrder.setSymbol(symbol).setSide(\"buy\").setQty(GoogleSheets.newRowInSpreadsheet.ColumnB);\n  } else {\n    Alpaca.placeMarketOrder.skip(\"Invalid quantity\");\n  }\n} else {\n  Alpaca.placeMarketOrder.skip(\"Outside of trading hours\");\n}", "intent": "Buy stocks using Google Sheets by entering symbol name in column A and quantity in column B."}
{"original_description": "Runs every day. Save £3.65 on January 1st, £3.64 on January 2nd and so on - until 1p on December 31st.\n\nIt resets automatically on January 1st every year.\n\nThis is the reverse of our popular 1p Savings Challenge.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "const today = Meta.currentUserTime;\nconst days_in_year = today.isLeapYear() ? 366 : 365;\nconst day_of_year = today.format('DDD');\nconst days_left_in_the_year = days_in_year - parseInt(day_of_year);\nconst amount = (days_left_in_the_year + 1) / 100;\nMonzo.potDeposit.setAmount(amount.toFixed(2));", "intent": "Every day, calculate the number of days left in the year and set the Monzo pot deposit to the corresponding amount. The amount decreases by £0.01 each day from January 1st until December 31st.", "filter_code_old": "const today = Meta.currentUserTime;\n\n// How many days are there this year?\nconst days_in_year = today.isLeapYear() ? 366 : 365\n\nconst day_of_year = today.format('DDD');\n\n// Figure out how many days are left in the year\nconst days_left_in_the_year = days_in_year-parseInt(day_of_year); \n\n// Move to pot the number of days left in the year + 1 (so that 1st of Jan is £3.65 and 31st December is 1p)\n// Divide by 100 for pence\nconst amount = (days_left_in_the_year+1) / 100;\n\nMonzo.potDeposit.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "This Applet sends you the week's worth of updates from the EPA to your inbox on a day and time of your choosing.", "trigger_channel": "Environmental Protection Agency", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "epa.latest_news"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (optional)", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Epa.latestNews.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Epa.latestNews.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry region\nThe region publishing the entry.", "description": "The region publishing the entry.", "details": {"Slug": "EntryAuthor", "Filter code": "Epa.latestNews.EntryRegion", "Type": "String", "Example": "Region 03"}}, {"section": "Ingredients", "title": "Entry content preview\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Epa.latestNews.EntryContentPreview", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Epa.latestNews.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.dayOfWeek() === 1 || Meta.currentUserTime.dayOfWeek() === 2 || Meta.currentUserTime.dayOfWeek() === 3 || Meta.currentUserTime.dayOfWeek() === 4) {\n  if (Meta.currentUserTime.hour() >= 8 && Meta.currentUserTime.hour() <= 17) {\n    EmailDigest.sendWeeklyEmail.setTitle(\"EPA Weekly Updates\")\n    EmailDigest.sendWeeklyEmail.setMessage(\"Here are the week's EPA updates: \" + Epa.latestNews.EntryTitle)\n    EmailDigest.sendWeeklyEmail.setUrl(Epa.latestNews.EntryUrl)\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(Meta.currentUserTime.format(\"hh:mm\"))\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"Outside of active hours\")\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a weekday or not during the desired time frame\")\n}", "intent": "This Applet sends you the week's worth of updates from the EPA to your inbox on a day and time of your choosing."}
{"original_description": "Receive a wake up call every day at a specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "var currentHour = DateAndTime.everyDayAt.CheckTime.slice(11, 13)\nif (currentHour < 7) {\n  Woopla.ttsCall.skip(\"Too early\")\n} else if (currentHour > 22) {\n  Woopla.ttsCall.skip(\"Too late\")\n} else {\n  var tts = \"Good morning!\"\n  Woopla.ttsCall.setTts(tts)\n  Woopla.ttsCall.runAction({ language: \"English\" })\n}", "intent": "Wake up call automation using Date & Time trigger and Woopla Phone Calls action."}
{"original_description": "Sell stocks using Google Sheets by entering symbol name in column A and quantity in column B.", "trigger_channel": "Google Sheets", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_sheets.new_row_in_spreadsheet"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Enter the folder path...", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Recipes/Vegetables&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Filename\nText input > Other", "description": "Text input > Other", "details": {"Label": "and enter the filename", "Helper text": "E.g. Vegetable Recipes", "Slug": "filename", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Spreadsheet url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Or copy and paste the spreadsheet URL", "Helper text": "Must be a valid spreadsheet URL", "Slug": "spreadsheet_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the spreadsheet.", "description": "The name of the spreadsheet.", "details": {"Slug": "spreadsheet_name", "Filter code": "GoogleSheets.newRowInSpreadsheet.Filename", "Type": "String", "Example": "2018 Trip ideas"}}, {"section": "Ingredients", "title": "Path\nPath of the new spreadsheet.", "description": "Path of the new spreadsheet.", "details": {"Slug": "path", "Filter code": "GoogleSheets.newRowInSpreadsheet.Path", "Type": "String", "Example": "IFTTT/Faves"}}, {"section": "Ingredients", "title": "Spreadsheet url\nThe URL to the spreadsheet on Google Sheets.", "description": "The URL to the spreadsheet on Google Sheets.", "details": {"Slug": "spreadsheet_url", "Filter code": "GoogleSheets.newRowInSpreadsheet.SpreadsheetUrl", "Type": "Web URL", "Example": "https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0"}}, {"section": "Ingredients", "title": "Created at\nDate and time row was added.", "description": "Date and time row was added.", "details": {"Slug": "created_at", "Filter code": "GoogleSheets.newRowInSpreadsheet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Row index\nThe numerical value of the new row.", "description": "The numerical value of the new row.", "details": {"Slug": "row_index", "Filter code": "GoogleSheets.newRowInSpreadsheet.RowIndex", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Column a\nValue in column A", "description": "Value in column A", "details": {"Slug": "column_a", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnA", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Column b\nValue in column B", "description": "Value in column B", "details": {"Slug": "column_b", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnB", "Type": "String", "Example": "$99"}}, {"section": "Ingredients", "title": "Column c\nValue in column C", "description": "Value in column C", "details": {"Slug": "column_c", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnC", "Type": "String", "Example": "Towel"}}, {"section": "Ingredients", "title": "Column d\nValue in column D", "description": "Value in column D", "details": {"Slug": "column_d", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnD", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Column e\nValue in column E", "description": "Value in column E", "details": {"Slug": "column_e", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnE", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column f\nValue in column F", "description": "Value in column F", "details": {"Slug": "column_f", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnF", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column g\nValue in column G", "description": "Value in column G", "details": {"Slug": "column_g", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnG", "Type": "String", "Example": "Delivery Date"}}, {"section": "Ingredients", "title": "Column h\nValue in column H", "description": "Value in column H", "details": {"Slug": "column_h", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnH", "Type": "String", "Example": "November 7th, 2017"}}, {"section": "Ingredients", "title": "Column i\nValue in column I", "description": "Value in column I", "details": {"Slug": "column_i", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnI", "Type": "String", "Example": "Delivery Address"}}, {"section": "Ingredients", "title": "Column j\nValue in column J", "description": "Value in column J", "details": {"Slug": "column_j", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnJ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column k\nValue in column K", "description": "Value in column K", "details": {"Slug": "column_k", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnK", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column l\nValue in column L", "description": "Value in column L", "details": {"Slug": "column_l", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnL", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column m\nValue in column M", "description": "Value in column M", "details": {"Slug": "column_m", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnM", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column n\nValue in column N", "description": "Value in column N", "details": {"Slug": "column_n", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnN", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column o\nValue in column O", "description": "Value in column O", "details": {"Slug": "column_o", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnO", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column p\nValue in column P", "description": "Value in column P", "details": {"Slug": "column_p", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnP", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column q\nValue in column Q", "description": "Value in column Q", "details": {"Slug": "column_q", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnQ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column r\nValue in column R", "description": "Value in column R", "details": {"Slug": "column_r", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnR", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column s\nValue in column S", "description": "Value in column S", "details": {"Slug": "column_s", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnS", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column t\nValue in column T", "description": "Value in column T", "details": {"Slug": "column_t", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnT", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column u\nValue in column U", "description": "Value in column U", "details": {"Slug": "column_u", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnU", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column v\nValue in column V", "description": "Value in column V", "details": {"Slug": "column_v", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnV", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column w\nValue in column W", "description": "Value in column W", "details": {"Slug": "column_w", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnW", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column x\nValue in column X", "description": "Value in column X", "details": {"Slug": "column_x", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnX", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column y\nValue in column Y", "description": "Value in column Y", "details": {"Slug": "column_y", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnY", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column z\nValue in column Z", "description": "Value in column Z", "details": {"Slug": "column_z", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnZ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "if (GoogleSheets.newRowInSpreadsheet.ColumnA !== \"\") {\n  Alpaca.placeMarketOrder.setSymbol(GoogleSheets.newRowInSpreadsheet.ColumnA);\n} else {\n  Alpaca.placeMarketOrder.skip(\"No symbol provided\");\n}\n\nif (GoogleSheets.newRowInSpreadsheet.ColumnB !== \"\") {\n  Alpaca.placeMarketOrder.setQty(GoogleSheets.newRowInSpreadsheet.ColumnB);\n} else {\n  Alpaca.placeMarketOrder.skip(\"No quantity provided\");\n}", "intent": "Sell stocks using Google Sheets by entering symbol name in column A and quantity in column B."}
{"original_description": "At a certain time of the day, speak today's weather report into an Orion Group.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "var Hour = Meta.currentUserTime.hour()\nif (Hour == 12) { // or any other desired hour\n  var Time = trigger.trigger_details[0].details.Label\n  var Location = trigger.trigger_details[1].details.Label\n  var SunriseAt = Weather.currentWeatherAtTime.SunriseAt\n  var SunsetAt = Weather.currentWeatherAtTime.SunsetAt\n  var CurrentTempFahrenheit = Weather.currentWeatherAtTime.CurrentTempFahrenheit\n  var TodaysCondition = Weather.currentWeatherAtTime.TodaysCondition\n  var ForecastUrl = Weather.currentWeatherAtTime.ForecastUrl\n  \n  Orion.sendVoiceMessage.setMessage(\"Good \" + Time + \", I'm reporting from \" + Location + \". Today's sunrise is at \" + SunriseAt + \", sunset is at \" + SunsetAt + \". The current temperature is \" + CurrentTempFahrenheit + \" degrees Fahrenheit, with a \" + TodaysCondition + \" condition. You can find the 5-day forecast at \" + ForecastUrl)\n} else {\n  Orion.sendVoiceMessage.skip(\"Not at the desired time\")\n}", "intent": "Speak today's weather report into an Orion Group at a specific time of day."}
{"original_description": "Reason is a monthly US-based Libertarian magazine. Stay up to date on the topics you care about, from a Libertarian perspective, by adding the keyword or phrase you want to track. You'll get an email whenever a new article matches the term!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var Title = Feed.newFeedItem.EntryTitle\nvar Content = Feed.newFeedItem.EntryContent\nif (Trigger.feed_url.includes(feed_url) && Title.includes(keyword)) {\n  Email.sendMeEmail.setSubject(\"New Article Match: \" + Title)\n  Email.sendMeEmail.setBody(Content)\n  Email.sendMeEmail()\n} else {\n  Email.sendMeEmail.skip(\"No new article matches the specified keyword\")\n}", "intent": "Monitor a RSS feed for new articles that match the specified keyword and send an email to the user with the article title, content, and other details."}
{"original_description": "Set up a birthday surprise and Boost your chosen amount to your child's account on their special day!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "RoosterMoney", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "roostermoney.boost", "Filter code method": "Roostermoney.boost.skip(string?: reason)", "Runtime method": "runAction(\"roostermoney.boost\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "If you want it to boost 10.00 enter 10. Do not include the currency character.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setAmount(string: amount)"}}, {"section": "Action fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setPot(string: pot)"}}, {"section": "Action fields", "title": "Description\nText input > Title", "description": "Text input > Title", "details": {"Label": "Description", "Helper text": "Description to show in transaction history", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Roostermoney.boost.setDescription(string: description)"}}], "filter_code": "var checkTime = DateAndTime.everyYearOn.CheckTime;\nif (checkTime.includes(\"August\")) {\n  var amount = \"10.00\";\n  Roostermoney.boost.setAmount(amount);\n  Roostermoney<boost>.setChild(your_child_slug_here);\n  Roostermoney<boost>.setPot(your_pot_slug_here);\n  Roostermoney<boost>.setDescription(\"Happy birthday!\");\n  Roostermoney<boost>(amount, your_child_slug_here, your_pot_slug_here);\n} else {\n  Roostermoney<boost>.skip(\"Not their birthday\");\n}", "intent": "Boost to child's account on their birthday."}
{"original_description": "Have your light adjust to a specified percentage of brightness at specified time every day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.change_device_percent", "Filter code method": "Idevices.changeDevicePercent.skip(string?: reason)", "Runtime method": "runAction(\"idevices.change_device_percent\", {})"}, "action_details": [{"section": "Action fields", "title": "What percent\nDropdown list", "description": "Dropdown list", "details": {"Label": "What percentage of brightness?", "Helper text": "Set percentage of brightness to a value 10 - 100", "Slug": "what_percent", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime\nif (time >= [Trigger].what_time && time <= [Trigger].what_time) {\n  Idevices.changeDevicePercent([Action].what_device, [Action].what_percent)\n} else {\n  Idevices.changeDevicePercent.skip(\"Not the specified time\")\n}", "intent": "Set the specified iDevice to a certain percentage of brightness at a specific time every day."}
{"original_description": "Receive a daily phone call at the time of day you specify and listen to tomorrow's weather forecast.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsWeatherAtTime.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsWeatherAtTime.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "var Time = $$time$$\nvar Location = $$location$$\nif (Weather.tomorrowsWeatherAtTime.TomorrowsCondition === \"Rain\") {\n  var Tts = \"It's going to rain tomorrow. Don't forget your umbrella.\"\n  Woopla.ttsCall.setTts(Tts)\n} else if (Weather.tomorrowsWeatherAtTime.HighTempFahrenheit > 65 || Weather.tomorrowsWeatherAtTime.LowTempCelsius < 18) {\n  var Tts = \"It's going to be a warm day tomorrow. Stay hydrated.\"\n  Woopla.ttsCall.setTts(Tts)\n} else {\n  var Tts = \"Have a great day tomorrow!\"\n  Woopla.ttsCall.setTts(Tts)\n}\nWoopla.ttsCall()", "intent": "Make a daily phone call at the specified time and listen to tomorrow's weather forecast, using Woopla phone calls."}
{"original_description": "This applet fires at the specified days of the week and toggles a boolean variable in Apilio between TRUE and FALSE.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "const CheckTime = DateAndTime.everyWeekdayAt.CheckTime\nconst DayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek\n\nif (DayOfWeek === 'Monday' || DayOfWeek === 'Tuesday' || DayOfWeek === 'Wednesday' || DayOfWeek === 'Thursday' || DayOfWeek === 'Friday') {\n  if (CheckTime >= '08:00AM' && CheckTime <= '12:00PM' || CheckTime >= '01:00PM' && CheckTime <= '05:00PM) {\n    Apilio.booleanVariableToTrueUpdates('variable_identifier', 'Update to TRUE')\n  } else {\n    Apilio.booleanVariableToTrueUpdates.skip('Outside of active hours')\n  }\n}", "intent": "This applet toggles a boolean variable in Apilio between TRUE and FALSE on specified days of the week at a specific time."}
{"original_description": "Stay on task every day by receiving a daily email digest of all new iOS Reminders.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.new_reminder_added"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.newReminderAdded.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.newReminderAdded.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.newReminderAdded.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.newReminderAdded.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.newReminderAdded.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_daily_email", "Filter code method": "EmailDigest.sendDailyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_daily_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendDailyEmail.setUrl(string: url)"}}], "filter_code": "var Title = IosReminders.newReminderAdded.Title\nvar Notes = IosReminders.newReminderAdded.Notes\nvar List = IosReminders.newReminderAdded.List\nvar Priority = IosReminders.newReminderAdded.Priority\nvar CreatedDate = IosReminders.newReminderAdded.CreatedDate\n\nEmailDigest.sendDailyEmail.setTitle(Title)\nEmailDigest.sendDailyEmail.setMessage(\"New Reminder Added: \" + Title + \"\\n\" + Notes + \"\\nList: \" + List + \"\\nPriority: \" + Priority + \"\\nCreated Date: \" + CreatedDate)\n\n// Set the time of day\nvar TimeOfDay = \"08:00 AM\" // Replace with actual user input\nEmailDigest.sendDailyEmail.setTimeOfDay(TimeOfDay)", "intent": "This rule stays on task every day by receiving a daily email digest of all new iOS Reminders."}
{"original_description": "Turn your Philips Hue light bulb green during off-peak hours to always know when electricity costs less. Be sure to create another Applet to change the color when the cost of electricity increases during on-peak hours.", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.time_of_day"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nDropdown list", "description": "Dropdown list", "details": {"Label": "This event should trigger when peak rates:", "Slug": "event", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.timeOfDay.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.timeOfDay.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.timeOfDay.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.timeOfDay.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (FcuTod.timeOfDay.DayType === \"Weekday\") {\n  if (FcuTod.timeOfDay.Season === \"Off-Peak\") {\n    Hue.setColorAllHue(\"Green\", \"lights\")\n  } else {\n    Hue.setColorAllHue.skip(\"On-peak hours detected\")\n  }\n}", "intent": "Automatically turn Philips Hue lights green during off-peak hours to indicate cheaper electricity costs. A separate Applet will change the color when peak rates increase."}
{"original_description": "Pair Coinbase with Dozens to help you save towards your goals. Every time you sell a Cryptocurrency this Applet will help you to save automatically.", "trigger_channel": "Coinbase", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "coinbase.wallet_sell_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Wallet\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which wallet?", "Helper text": "The wallet from which the transaction is taking place", "Slug": "wallet_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Cryptcourrency amount\nAmount of cryptocurrency sold", "description": "Amount of cryptocurrency sold", "details": {"Slug": "cryptocurrency_amount", "Filter code": "Coinbase.walletSellDetected.CryptcourrencyAmount", "Type": "String", "Example": "1.09382"}}, {"section": "Ingredients", "title": "Wallet\nThe wallet from which cryptocurrency was sold", "description": "The wallet from which cryptocurrency was sold", "details": {"Slug": "wallet", "Filter code": "Coinbase.walletSellDetected.Wallet", "Type": "String", "Example": "bbf394c-193b-5b2a-9155-3b4732659ede"}}, {"section": "Ingredients", "title": "Cryptocurrency code\nThe short name of the cryptocurrency sold", "description": "The short name of the cryptocurrency sold", "details": {"Slug": "cryptocurrency_code", "Filter code": "Coinbase.walletSellDetected.CryptocurrencyCode", "Type": "String", "Example": "BTC"}}, {"section": "Ingredients", "title": "Paid amount\nThe amount paid in USD", "description": "The amount paid in USD", "details": {"Slug": "paid_amount", "Filter code": "Coinbase.walletSellDetected.PaidAmount", "Type": "String", "Example": "150.00"}}, {"section": "Ingredients", "title": "Transaction\nThe ID of the sell transaction", "description": "The ID of the sell transaction", "details": {"Slug": "transaction_id", "Filter code": "Coinbase.walletSellDetected.TransactionId", "Type": "String", "Example": "4117f7d6-5694-5b36-bc8f-847509850ea4"}}, {"section": "Ingredients", "title": "Payout at\nThe date and time at which the payout will occur", "description": "The date and time at which the payout will occur", "details": {"Slug": "payout_at", "Filter code": "Coinbase.walletSellDetected.PayoutAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Coinbase.walletSellDetected.CryptocurrencyAmount > 0) {\n  var amount = Coinbase.walletSellDetected.PaidAmount;\n  Dozens.save.setAmount(amount);\n}", "intent": "Automatically save a portion of your cryptocurrency sale to Dozens."}
{"original_description": "This applet will let you turn on the camera at specific time of the day", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Smitch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Smitch.turn_on_camera", "Filter code method": "Smitch.turnOnCamera.skip(string?: reason)", "Runtime method": "runAction(\"Smitch.turn_on_camera\", {})"}, "action_details": [{"section": "Action fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera", "Helper text": "Choose the camera to turn on", "Slug": "camera", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time === \"Your desired time\") {\n  Smitch.turnOnCamera()\n} else {\n  Smitch.turnOnCamera.skip(\"Not the correct time\")\n}", "intent": "Triggered by a specific time of day, this applet will attempt to turn on a camera. The trigger allows for text input of the desired time, and the action channel is Smitch. If the time matches the specified time, it should turn on the camera."}
{"original_description": "Choose certain days and times to automatically arm your alarm system.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Uplink Remote", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "uplinkremote.armaction", "Filter code method": "Uplinkremote.armaction.skip(string?: reason)", "Runtime method": "runAction(\"uplinkremote.armaction\", {})"}, "action_details": [{"section": "Action fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== 'Sunday' && DateAndTime.everyWeekdayAt.DayOfWeek !== 'Saturday') {\n  if (new Date(DateAndTime.everyWeekdayAt.CheckTime) >= new Date(`${time}:00`) && new Date(DateAndTime.everyWeekdayAt.CheckTime) <= new Date(`${parseInt(time) + 1}:00`) ) {\n    Uplinkremote.armaction.runAction({ serial_number: \"Device Name\" });\n  } else {\n    Uplinkremote.armaction.skip(\"Outside of selected time range\");\n  }\n}", "intent": "Automatically arm the alarm system on specific days and times."}
{"original_description": "This applet turns off your Philips Hue bulbs when activating your Niko Home Control all-off. Turn all your lights off with one touch on a button!", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nikohomecontrol.routineActivated.Routine === \"Party\") {\n  Hue.turnOffAllHue.skip(\"Triggered by Party Routine\")\n} else {\n  Hue.turnOffAllHue()\n}", "intent": "This applet turns off all Philips Hue bulbs when a specific Niko Home Control routine is activated."}
{"original_description": "Toggle your light by pressing widget button. This Applet makes a widget that you can use from IFTTT app or your phone screen. ", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.Togglelight", "Filter code method": "Magichue.togglelight.skip(string?: reason)", "Runtime method": "runAction(\"magichue.Togglelight\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "const ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nconst Latitude = DoButton.doButtonNewCommandCommon.Latitude\nconst Longitude = DoButton.doButtonNewCommandCommon.Longitude\nconst LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nconst LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nconst OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\nif (WhichLights !== \"\" && ShareURL !== \"\") {\n  Magichue.togglelight(ShareURL)\n} else if (Latitude !== \"\" && Longitude !== \"\") {\n  Magichue.togglelight(`Light at ${Latitude}, ${Longitude}`)\n} else {\n  Magichue.togglelight.skip(\"Insufficient information\")\n}", "intent": "Toggle MagicHue light based on button press with location information."}
{"original_description": "Turn on your light within 15 minutes of the sunset at your location.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt\nif (Math.abs((new Date()).getTime() - new Date(SunsetTime).getTime()) < 900000) {\n  // Within 15 minutes of sunset, check if device is off\n  var DeviceStatus = Kasa.getDeviceStatus()\n  if (!DeviceStatus.isTurnedOn) {\n    Kasa.turnOn.skip(\"Turning on within 15 minutes of sunset\")\n  }\n}", "intent": "When the sunset at your location is within 15 minutes, turn on your TP-Link Kasa device if it's not already turned on."}
{"original_description": "Have your smart light automatically turn on at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.poweron", "Filter code method": "Magichue.poweron.skip(string?: reason)", "Runtime method": "runAction(\"magichue.poweron\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt < Meta.currentUserTime.date()) {\n  Magichue.poweron(\"Sunset has been reached\")\n}", "intent": "Automatically turn on MagicHue lights when the sunset time is reached."}
{"original_description": "Runs every Monday. Save £1 in Week 1 of the year, £2 in Week 2 of the year,... . Feel free to jump in part way though the year, and see how far you can get!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var week_of_year = parseInt(Meta.currentUserTime.format('W'))\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\") {\n  var amount = parseInt(week_of_year)\n  Monzo.potDeposit.setAmount(amount.toFixed(2))\n} else {\n  Monzo.potDeposit.skip(\"Not Monday\")\n}", "intent": "Runs a Monzo pot deposit action every Monday, with the amount depending on the week of the year.", "filter_code_old": "var week_of_year = Meta.currentUserTime.format('w');\nvar amount = parseInt(week_of_year);\nMonzo.potDeposit.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "A UV Index reading of 6 to 7 means high risk of harm from unprotected sun exposure. This acts as a reminder for you to consider wearing sunscreen. Stay safe!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_humidity_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Humidity\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Humidity (%)", "Slug": "humidity", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentHumidityRisesAbove.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentHumidityRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentHumidityRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentHumidityRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentHumidityRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentHumidityRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Weather.currentHumidityRisesAbove.UVIndex >= 6) {\n  IfNotifications.sendNotification.setMessage(\"UV Index warning! Remember to apply sunscreen for protection.\")\n} else {\n  Domovea.shadeClose.skip(\"No high UV Index detected\")\n}", "intent": "Automatically send a reminder to wear sunscreen when the UV Index reading is high, indicating a risk of harm from unprotected sun exposure."}
{"original_description": "Toggle your Philip Hue lights on and off by pressing the pusher on your Kronaby watch.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"single\") {\n  var PressReason = \"Single press\";\n} else if (Kronaby.pusherPressed.PressType === \"double\" || Kronaby.pusherPressed.PressType === \"triple\") {\n  var PressReason = \"Double or triple press\";\n}\nHue.toggleAllHue(Kronaby.pusherPressed.Latitude, Kronaby.pusherPressed.Longitude);", "intent": "Toggle Philips Hue lights on and off when the Kronaby pusher is pressed."}
{"original_description": "Automatically apply a light scene when weather condition changes", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_scene", "Filter code method": "Yeelight.setScene.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Bundle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "bundle_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Yeelight.setScene.skip(\"No rain detected\")\n} else if (Weather.currentConditionIs.Condition === \"Snow\") {\n  Yeelight.setScene(skip(\"No snow detected\"))\n} else if (Weather.currentConditionIs.Condition === \"Thunderstorm\") {\n  Yeelight.setScene(skip(\"No thunderstorm forecasted\"))\n} else {\n  // Apply default scene\n  Yeelight.setScene(\"default\")\n}", "intent": "Automatically apply a light scene when weather condition changes."}
{"original_description": "To use this applet,you can turn on your bulbs when the evening coming.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "// Get the current time\nvar CheckTime = DateAndTime.everyDayAt.CheckTime\n\n// Check if it's evening\nif (CheckTime >= \"6:00 PM\" && CheckTime < \"12:00 AM\") {\n  // Get the selected device and on/off option\n  var deviceId = [Trigger].device_id\n  var onOffOption = [Trigger].on_off_option\n  \n  // Set the lights according to the option\n  if (onOffOption === \"On\") {\n    Yeelight.onOff.setOn(\"On\")\n  } else if (onOffOption === \"Off\") {\n    Yeelight.onOff.skip(\"Manual off\")\n  } else {\n    Yeelight.onOff.setOnOffOption(onOffOption)\n  }\n} else {\n  // Skip the action when it's not evening\n  Yeelight.onOff.skip(\"Not evening\")\n}", "intent": "When the evening comes, turn on the specified lights."}
{"original_description": "Have your product turn on at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_on", "Filter code method": "Idevices.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt >= Meta.currentUserTime.now()) {\n  if (Weather.sunSets.Condition === \"Sunny\" && Weather.sunSets.TempFahrenheit > 65) {\n    Idevices.turnDeviceOn(\"My iDevices\")\n  } else {\n    Idevices.turnDeviceOn.skip(\"Not sunny or too cold\")\n  }\n}", "intent": "Have your iDevices turn on at sunset, considering the current weather conditions and temperature."}
{"original_description": "When Arlo detects motion, turn on your lights.", "trigger_channel": "Arlo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "arlo.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "device_name", "Filter code": "Arlo.motion.DeviceName", "Type": "String", "Example": "48B14C740AD5E"}}, {"section": "Ingredients", "title": "Detection time\nDate and time of motion event detection.", "description": "Date and time of motion event detection.", "details": {"Slug": "detected_at", "Filter code": "Arlo.motion.DetectionTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceName = Arlo.motion.DeviceName\nvar DetectionTime = Arlo.motion.DetectionTime\nif (DeviceName !== null && DetectionTime !== null) {\n  if (Date.now() > Date.parse(DetectionTime)) { // skip if motion is older than current time\n    Kasa.turnOn.skip(\"Old detection, skipping\")\n  } else {\n    var selectedDevice = DeviceName // get the selected device from dropdown list\n    Kasa.turnOn(selectedDevice)\n  }\n} else {\n  Kasa.turnOn.skip(\"No device or detection time available\")\n}", "intent": "When Arlo detects motion, turn on your TP-Link Kasa lights by selecting a specific device."}
{"original_description": "Turn on a device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "const DeviceId = Knocki.knocki.Device;\nif (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Pattern === \"***\") {\n  if (!Kasa.turnOn.isDeviceTurnedOn(DeviceId)) {\n    Kasa.turnOn.runAction(\"kasa.turn_on\", {\"device\": DeviceId});\n  } else {\n    Kasa.turnOn.skip(\"Device is already turned on\");\n  }\n}", "intent": "Turn on a specific device when a certain gesture pattern is detected and it is not already turned on."}
{"original_description": "See what impacts your ability to write great posts", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "function filterCode() {\n  if (Meta.currentUserTime.hour() < 7 || Meta.currentUserTime.hour() > 22) {\n    // Skip the action outside of active hours\n    Welltory.sendEvent.skip(\"Outside of active hours\")\n  } else if (Instagram.anyNewPhotoByYou.Caption !== \"A cool photo\") {\n    // Skip the action when caption does not match \"A cool photo\"\n    Welltory.sendEvent.skip(\"Caption mismatch\")\n  } else {\n    // Set data source\n    Welltory.sendEvent.setDataSource(\"Other\")\n\n    // Set data type\n    Welltory.sendEvent.setDataType(\"Other\")\n\n    // Set datetime from created at\n    Welltory.sendEvent.setDatetime(Instagram.anyNewPhotoByYou.CreatedAt)\n\n    // Set value to 1, one entry every time an event occurs\n    Welltory.sendEvent.setValue(\"1\")\n  }\n}", "intent": "The IFTTT automation will trigger when a new photo is uploaded to Instagram and send an event to Welltory based on certain conditions."}
{"original_description": "Make every picture count... save a set amount toward one of your Goals every time you add a picture to your feed.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "var goal = \"goal\"\nvar amount = 1\nQapital.saveTowardGoal(goal, amount)\n// Save the selected goal and amount towards it in Qapital", "intent": "Automatically save a set amount toward one of your Qapital goals every time you add a new picture to your Instagram feed."}
{"original_description": "Turn on your lights or other devices if it is cloudy outside.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Cloudy\") {\n  Kasa.turnOn(\"Device\", \"Turn on due to cloudy weather\")\n}", "intent": "Turn on devices if it's cloudy outside."}
{"original_description": "Let there be light! This applet turns on your Hue lights when your robot starts a cleaning job.\n", "trigger_channel": "iRobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "irobot.robot_start"}, "trigger_details": [{"section": "Trigger fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nTime the robot started.", "description": "Time the robot started.", "details": {"Slug": "iso_timestamp", "Filter code": "Irobot.robotStart.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CurrentHour = new Date(Irobot.robotStart.Timestamp).getHours()\nif (CurrentHour < 8 || CurrentHour > 22) {\n  Hue.turnOffAllHue.skip(\"Outside of active hours\")\n} else {\n  // No action\n}", "intent": "When the robot starts a cleaning job, check if it is before 8 AM or after 10 PM. If so, skip turning on the Hue lights."}
{"original_description": "This applet turns on your Hue light when Withings Sleep detects that you get out of bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Hour = Meta.currentUserTime.hour()\nvar Day = Meta.currentUserTime.day()\nif (Hour < 7 || Hour > 22 || [Day] == 0 || [Day] == 6) {\n  WithingsSleep.bedout.DeviceUser\n    ? Hue.turnOffAllHue.skip(\"Outside of active hours or weekend\")\n    : null\n} else if (WithingsSleep.bedout.DateandTime !== \"Invalid date\") {\n  Hue.turnOffAllHue()\n}", "intent": "This applet checks when Withings Sleep detects that you get out of bed, and if it's a valid time (not before 7 am or after 10 pm) and not a weekend, then it turns off all Philips Hue lights."}
{"original_description": "", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.turn_off_switch", "Filter code method": "Abode.turnOffSwitch.skip(string?: reason)", "Runtime method": "runAction(\"abode.turn_off_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Select switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Slug": "select_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetAt = Weather.sunSets.SunsetAt\nif (SunsetAt < Meta.currentUserTime.hour()) {\n  Abode.turnOffSwitch(\"Select switch\", \"Sun has set\")\n} else if (Weather.sunSets.TempFahrenheit > 72 || Weather.sunSets.TempCelsius > 18) {\n  Abode.turnOffSwitch(\"Select switch\", \"Temperature too high\")\n} else if (Weather.sunSets.Condition !== \"Sunny\") {\n  Abode.turnOffSwitch(\"Select switch\", \"Not sunny today\")\n}", "intent": "Filter the weather data based on sunrise and sunset times, temperature, and condition."}
{"original_description": "Find out how phone calls influence your behavior", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (AndroidPhone.receiveAPhoneCall.ContactName !== \"\") {\n  if (Welltory.sendEvent.setDataSource(\"Other\") && Welltory.sendEvent.setDataType(\"Other\")) {\n    var comment = \"Received a phone call from \" + AndroidPhone.receiveAPhoneCall.FromNumber\n    Welltory.sendEvent.setComment(comment)\n  }\n  Welltory.sendEvent.skip(\"No comment provided\")\n}", "intent": "Automatically send a Welltory event when an Android phone call is received, providing information about the contact name, occurred at time, from number, call length, and device name."}
{"original_description": "Always scanning Soundcloud for something new but like to listen on Spotify? Enter a search term and when this Applet finds a new track on the former, it'll automatically add it to a playlist on the latter (if it's available). Be specific in your search to get the best results! ", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_track_from_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Search query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "search_query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newTrackFromSearch.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newTrackFromSearch.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newTrackFromSearch.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newTrackFromSearch.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newTrackFromSearch.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newTrackFromSearch.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newTrackFromSearch.ImageUrl", "Type": "String", "Example": "http://w1.sndcdn.com/jD1KgNMbSVyv_m.png"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newTrackFromSearch.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newTrackFromSearch.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newTrackFromSearch.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newTrackFromSearch.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.add_a_track_to_a_playlist", "Filter code method": "Spotify.addATrackToAPlaylist.skip(string?: reason)", "Runtime method": "runAction(\"spotify.add_a_track_to_a_playlist\", {})"}, "action_details": [{"section": "Action fields", "title": "Playlist\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Playlist name", "Helper text": "Must be a playlist owned by you. If a playlist with the name given can't be found, a new private playlist will be created.", "Slug": "playlist", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setPlaylist(string: playlist)"}}, {"section": "Action fields", "title": "Search query\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Search query", "Helper text": "For maximum accuracy, include the song title here and the artist name in the &quot;Artist name&quot; field", "Slug": "search_query", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setSearch Query(string: search_query)"}}, {"section": "Action fields", "title": "Artist name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Artist name", "Helper text": "Optional", "Slug": "artist_name", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setArtist Name(string: artist_name)"}}], "filter_code": "var searchQuery = $$search_query$$;\nif (Soundcloud.newTrackFromSearch.Title === undefined || Soundcloud.newTrackFromSearch.Title === null) {\n  Domovea.shadeClose.skip(\"No title found\");\n} else {\n  var trackTitle = Soundcloud.newTrackFromSearch.Title;\n  var trackDescription = Soundcloud.newTrackFromSearch.Description;\n  if (trackDescription !== undefined && trackDescription !== null) {\n    Domovea.shadeClose.setMessage(trackTitle + \" by \" + trackDescription);\n  }\n  \n  // Check availability in Spotify\n  var spotifyResponse = runAction(\"spotify.add_a_track_to_a_playlist\", {});\n  if (spotifyResponse === false) {\n    Domovea.shadeClose.skip(\"Track not available on Spotify\");\n  } else {\n    Domovea.shadeClose.setPlaylist( $$playlist$$ );\n    Domovea.shadeClose.setSearchQuery( $$search_query$$ );\n  }\n}", "intent": "When a new track from SoundCloud search matches a specified query, add it to a Spotify playlist if available."}
{"original_description": "Record my air quality data whenever the chosen sensor breaches the target threshold.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Uhoo.sensorNotification.AboveOrBelow === \"above\") {\n  var UhooName = Uhoo.sensorNotification.UhooName\n  var Sensor = Uhoo.sensorNotification.SensorName\n  var Threshold = Uhoo.sensorNotification.MyThreshold\n  var TriggerCondition = Uhoo.sensorNotification.AboveOrBelow\n  var DataTemp = Uhoo.sensorNotification.DataTemperature\n  var DataHumidity = Uhoo.sensorNotification.DataHumidity\n  var DataPm25 = Uhoo.sensorNotification.DataPm25\n  var DataCo2 = Uhoo.sensorNotification.DataCo2\n  var DataCo = Uhoo.sensorNotification.DataCo\n  var DataTvoc = Uhoo.sensorNotification.DataTvoc\n  var DataNo2 = Uhoo.sensorNotification.DataNo2\n  var DataOzone = Uhoo.sensorNotification.DataOzone\n  var DataAirPressure = Uhoo.sensorNotification.DataAirPressure\n  var DataVirusIndex = Uhoo.sensorNotification.DataVirusIndex\n  \n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename)\n    .setFormattedRow(formatted_row)\n    .setPath(path || \"IFTTT\")\n    .append({\n      UhooName: UhooName,\n      Sensor: Sensor,\n      Threshold: Threshold,\n      TriggerCondition: TriggerCondition,\n      Temperature: DataTemp,\n      Humidity: DataHumidity,\n      PM2.5: DataPm25,\n      CO2: DataCo2,\n      CO: DataCo,\n      TVOC: DataTvoc,\n      NO2: DataNo2,\n      Ozone: DataOzone,\n      AirPressure: DataAirPressure,\n      VirusIndex: DataVirusIndex\n    })\n}", "intent": "Record air quality data whenever a chosen sensor breaches a target threshold."}
{"original_description": "Toggle your LIFX lights on and off by pressing the pusher on your Kronaby watch.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.toggle", "Filter code method": "Lifx.toggle.skip(string?: reason)", "Runtime method": "runAction(\"lifx.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want to toggle with a duration? Specify it here. Example: &quot;transition_duration: 5&quot; for a 5 second fade duration. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.toggle.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var PressType = Kronaby.pusherPressed.PressType\nif (PressType === \"single\") {\n  Lifx.toggle(\"selector\", {\"advanced_options\": \"\"})\n} else if (PressType === \"double\" || PressType === \"triple\") {\n  Lifx.toggle.skip(\"Double or triple press, skipping toggle\")\n}", "intent": "Toggle the LIFX lights based on the press type and other conditions triggered by the Kronaby watch."}
{"original_description": "Find out how phone calls influence your behavior", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.place_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.placeAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.placeAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "To number\nThe number that received the call.", "description": "The number that received the call.", "details": {"Slug": "ToNumber", "Filter code": "AndroidPhone.placeAPhoneCall.ToNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.placeAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.placeAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (AndroidPhone.placeAPhoneCall.ContactName !== \"\") {\n  if (Welltory.sendEvent.skip(\"No call received\")) return;\n  Welltory.sendEvent.setDataSource(AndroidPhone.placeAPhoneCall.ToNumber);\n  Welltory.sendEvent.setDataType(\"Other\");\n  Welltory.sendEvent.setDatetime(AndroidPhone.placeAPhoneCall.OccurredAt);\n  Welltory.sendEvent.setValue(AndroidPhone.placeAPhoneCall.CallLength + \" seconds\");\n  if (AndroidPhone.placeAPhoneCall.DeviceName !== \"\") {\n    Welltory.sendEvent.setComment(\"Phone call received on \" + AndroidPhone.placeAPhoneCall.DeviceName);\n  } else {\n    Welltory.sendEvent.setComment(\"Phone call received\");\n  }\n}", "intent": "This applet checks if a phone call was received and sends an event to Welltory with details about the call, including the contact name, occurred at time, call length, device name, data source, data type, datetime, value, and comment."}
{"original_description": "Turns on motion detection at the same time every weekday.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Wyze", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wyzecam.turn_on_alarm", "Filter code method": "Wyzecam.turnOnAlarm.skip(string?: reason)", "Runtime method": "runAction(\"wyzecam.turn_on_alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Serialize device info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device", "Slug": "serialize_device_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime\nif (DateAndTime.everyWeekdayAt.DayOfWeek === 'Monday' || \n    DateAndTime.everyWeekdayAt.DayOfWeek === 'Tuesday' || \n    DateAndTime.everyWeekdayAt.DayOfWeek === 'Wednesday' || \n    DateAndTime.everyWeekdayAt.DayOfWeek === 'Thursday' || \n    DateAndTime.everyWeekdayAt.DayOfWeek === 'Friday') {\n  if (parseInt(Time.substring(5, 7)) >= 6 && parseInt(Time.substring(9, 11)) < 24) { // 6:00 AM to 23:59\n    Wyzecam.turnOnAlarm.skip(\"Not a valid time\")\n  } else {\n    Wyzecam.turnOnAlarm()\n  }\n} else {\n  Wyzecam.turnOnAlarm.skip(\"Weekend - automation disabled\")\n}", "intent": "Turns on motion detection at the same time every weekday."}
{"original_description": "Have a product's night light turn on after sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_nightlight_off", "Filter code method": "Idevices.turnNightlightOff.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_nightlight_off\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What product's night light?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt < Meta.currentUserTime.now()) {\n  Idevices.turnNightlightOn()\n}", "intent": "Turn on the iDevices' night light after sunset."}
{"original_description": "Get your home to automatically light up when the sun goes down.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt < Meta.currentUserTime.hour()) {\n  Hue.turnOffAllHue.skip(\"Sun has set\")\n}", "intent": "Automatically turn off all Philips Hue lights when the sun sets."}
{"original_description": "On, off or toggle Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  var device = Knocki.knocki.Device;\n  var onOffOption = \"on_off_option\";\n  if (onOffOption === \"On\" || onOffOption === \"Toggle\") {\n    Yeelight.onOff.setOn(Knocki.knocki.Pattern, device);\n  } else if (onOffOption === \"Off\") {\n    Yeelight.onOff.skip(\"Device is being turned off\");\n  }\n} else {\n  Yeelight.onOff.skip(\"Invalid gesture pattern\")\n}", "intent": "On, off, or toggle Yeelight device based on Knocki gesture pattern and device ID."}
{"original_description": "See what impacts how often you bookmark items", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "var Title = Pocket.newItemAddedPocket.Title\nvar Url = Pocket.newItemAddedPocket.Url\nvar Excerpt = Pocket.newItemAddedPocket.Excerpt\nvar ImageUrl = Pocket.newItemAddedPocket.ImageUrl\nvar Tags = Pocket.newItemAddedPocket.Tags\nvar AddedAt = Pocket.newItemAddedPocket.AddedAt\n\nif (Title.includes(\"bookmark\")) {\n  if (Url.includes(\"bookmark\")) {\n    Welltory.sendEvent.setDataSource(\"Pocket\")\n    Welltory.sendEvent.setDataType(\"Bookmark\")\n    Welltory.sendEvent.setDatetime(AddedAt)\n    Welltory.sendEvent.setValue(\"1\")\n    Welltory.sendEvent.setComment(\"Bookmarked \" + Title)\n  } else {\n    Welltory.sendEvent.skip(\"No bookmark found in title or URL\")\n  }\n} else {\n  Welltory.sendEvent.skip(\"Not a bookmark item\")\n}", "intent": "Automate sending Welltory events based on Pocket item additions, considering bookmark frequency."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights ON or OFF.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  // Toggle all lights ON\n  Hue.toggleAllHue(\"ON\")\n} else if (IhomeEnhance.enhanceButton.Press === \"Short Press\") {\n  // Toggle all lights OFF\n  Hue.toggleAllHue(\"OFF\")\n}\n// Log a message when the button is pressed\nconsole.log(\"Button pressed: \" + IhomeEnhance.enhanceButton.ButtonName)", "intent": "This IFTTT automation is triggered by pressing an iHome Enhance button and controls Philips Hue lights. It allows the user to toggle all lights ON or OFF based on the button press type (short or long)."}
{"original_description": "See what impacts the number of your notes", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Evernote.newNoteInNotebook.Notebook !== \"default\") {\n  var NotebookSlug = Evernote.newNoteInNotebook.Notebook;\n  Welltory.sendEvent.setDataSource(\"Evernote\");\n  Welltory.sendEvent.setDatetime(Evernote.newNoteInNotebook.CreatedAt);\n  Welltory.sendEvent.setValue(Evernote.newNoteInNotebook.Title.length);\n  Welltory.sendEvent.setComment(Evernote.newNoteInNotebook.BodyHTML);\n} else {\n  Welltory.sendEvent.skip(\"No notebook selected\")\n}", "intent": "This IFTTT automation checks if a new note is created in a specific notebook, and then sends an event to Welltory with relevant information."}
{"original_description": "When the UV Index is between 3 to 5 outside, it is considered a \"moderate\" risk of harm from unprotected sun exposure. Be prepared and wear protection!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_humidity_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Humidity\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Humidity (%)", "Slug": "humidity", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentHumidityRisesAbove.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentHumidityRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentHumidityRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentHumidityRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentHumidityRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentHumidityRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "var uvIndex = Weather.currentHumidityRisesAbove.UvIndex\nif (uvIndex >= 3 && uvIndex <= 5) {\n  IfNotifications.sendRichNotification.setMessage(\"UV Index is between 3 to 5. Please take necessary precautions!\")\n} else {\n  IfNotifications.sendRichNotification.skip(\"No moderate UV risk detected\")\n}", "intent": "When the UV Index is between 3 to 5 outside, it is considered a \"moderate\" risk of harm from unprotected sun exposure. Be prepared and wear protection!"}
{"original_description": "Find out how your videos correlate with other lifestyle events", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_video_by_you_tagged_instagram"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newVideoByYouTaggedInstagram.Caption", "Type": "String", "Example": "A cool video #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the tag", "description": "The caption without the tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CaptionNoTag", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newVideoByYouTaggedInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "var Caption = Instagram.newVideoByYouTaggedInstagram.Caption\nvar CaptionNoTag = Instagram.newVideoByYouTaggedInstagram.CaptionNoTag\nvar URL = Instagram.newVideoByYouTaggedInstagram.URL\nvar VideoSourceURL = Instagram.newVideoByYouTaggedInstagram.VideoSourceURL\nvar ImageThumbnailURL = Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL\nvar CreatedAt = Instagram.newVideoByYouTaggedInstagram.CreatedAt\n\nif (Caption.includes(\"Tag\")) {\n  Welltory.sendEvent.setDataSource(\"Other\")\n  Welltory.sendEvent.setData Type(\"Video\")\n  Welltory.sendEvent.setDatetime(CreatedAt)\n  Welltory.sendEvent.setValue(1)\n} else if (CaptionNoTag === \"A cool video\") {\n  Welltory.sendEvent.setDataSource(\"Other\")\n  Welltory.sendEvent.setData Type(\"Video\")\n  Welltory.sendEvent.setDatetime(CreatedAt)\n  Welltory.sendEvent.setValue(1)\n}\n\nWelltory.sendEvent.skip(\"Invalid video content\")", "intent": "This IFTTT automation analyzes an Instagram video's caption and sends relevant events to Welltory based on specified criteria."}
{"original_description": "Turn on or off your BG Home device when the sun sets in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "BG Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "BG_HOME.powerState", "Filter code method": "BGHOME.powerState.skip(string?: reason)", "Runtime method": "runAction(\"BG_HOME.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On of off?", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "BGHOME.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "var Sunset = Weather.sunSets.SunsetAt;\nif (Weather.currentConditionIs.Condition === \"Sunny\" && Sunset >= Meta.currentUserTime.hour()) {\n  var DeviceInfo = \"YourBGDevice\";\n  if (DeviceInfo === \"YourBGDevice\") {\n    BGHOME.powerState.setPowerControlChangePowerStateString(\"on\");\n  } else {\n    BGHOME.powerState.skip(\"Invalid device selected\");\n  }\n} else {\n  BGHOME.powerState.skip(\"Not sunny outside or not sunset\");\n}", "intent": "Turn on or off your BG Home device when the sun sets in your area."}
{"original_description": "When your Arlo detects motion turn on a My Leviton Light", "trigger_channel": "Arlo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "arlo.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "device_name", "Filter code": "Arlo.motion.DeviceName", "Type": "String", "Example": "48B14C740AD5E"}}, {"section": "Ingredients", "title": "Detection time\nDate and time of motion event detection.", "description": "Date and time of motion event detection.", "details": {"Slug": "detected_at", "Filter code": "Arlo.motion.DetectionTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.toggle_switch", "Filter code method": "MyLeviton.toggleSwitch.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.toggle_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power\nDropdown list", "description": "Dropdown list", "details": {"Label": "Would you like to toggle the device, or turn it on or off?", "Slug": "power", "Required": "false", "Can have default value": "true", "Filter code method": "MyLeviton.toggleSwitch.setPower(string: power)"}}], "filter_code": "var DeviceName = Arlo.motion.DeviceName;\nvar DetectionTime = Arlo.motion.DetectionTime;\nif (DeviceName !== \"\") {\n  if (DetectionTime !== null) {\n    MyLeviton.toggleSwitch.runAction({ \"name\": DeviceName, \"power\": \"On\" });\n  } else {\n    MyLeviton.toggleSwitch.skip(\"Invalid detection time\");\n  }\n} else {\n  MyLeviton.toggleSwitch.skip(\"No device name provided\");\n}", "intent": "When Arlo detects motion, it will turn on a My Leviton light if the device name and detection time are valid. If not, it will skip the action."}
{"original_description": "Press the iH button on your iHome device to turn ON Lifx Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_on", "Filter code method": "Lifx.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade in duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade in duration", "Helper text": "How long should it take for the lights to fade in.", "Slug": "fade_in_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not available? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; fade_in_duration: 12&quot; for red at 30% brightness, 12 second fade in. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOn.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var ButtonName = IhomeEnhance.enhanceButton.ButtonName\nvar Press = IhomeEnhance.enhanceButton.Press\nvar CreatedAt = IhomeEnhance.enhanceButton.CreatedAt\nif (Press !== \"Long\") {\n  Lifx.turnOn(Lifx.turnOn.skip())\n}", "intent": "When the iH button on the iHome device is pressed, check if it's a long press. If it's not a long press, turn on the Lifx lights with default settings."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights ON.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.press === \"Long Press\") {\n  Hue.turnOffAllHue.skip(\"iHome button was long-pressed\")\n} else {\n  Hue.turnOffAllHue()\n}", "intent": "When the iHome Enhance button is pressed, check if it's a long press and turn off all Philips Hue lights."}
{"original_description": "Checks the Weather Underground service for the current UV Index based on your threshold, and then sets the Aurora to a color you choose.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_humidity_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Humidity\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Humidity (%)", "Slug": "humidity", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentHumidityRisesAbove.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentHumidityRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentHumidityRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentHumidityRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentHumidityRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentHumidityRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "var UVIndex = Weather.currentHumidityRisesAbove.UVIndex\nif (UVIndex > 3 && UVIndex <= 7) {\n    Nanoleaf.changeColorRequest.setValue(\"#\" + Aurora.color)\n} else {\n    Nanoleaf.changeColorRequest.skip(\"UV Index is not within the threshold range\")\n}", "intent": "This IFTTT automation checks the current UV Index based on a user-defined threshold and sets the Nanoleaf color to a chosen color if the condition is met."}
{"original_description": "Automatically turn your lights on at sunset by overriding your on / off zone.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Genius Hub", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "genius_hub.zone_override_on_off", "Filter code method": "GeniusHub.zoneOverrideOnOff.skip(string?: reason)", "Runtime method": "runAction(\"genius_hub.zone_override_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Slug": "temp", "Required": "true", "Can have default value": "true", "Filter code method": "GeniusHub.zoneOverrideOnOff.setTemp(string: temp)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration", "Helper text": "How many minutes do you want to override for?", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "GeniusHub.zoneOverrideOnOff.setDuration(string: duration)"}}], "filter_code": "if (Meta.currentUserTime.hour() < Weather.sunSets.SunsetAt.getHours()) {\n  GeniusHub.zoneOverrideOnOff(\"zone\", \"on\").setTemp(\"temp\", \"on\").setDuration(\"duration\", \"override_at_sunset\")\n} else {\n  GeniusHub.zoneOverrideOnOff.skip(\"Automated zone override has already occurred at sunset\")\n}", "intent": "Automatically turn the lights on at sunset by overriding the on/off zone."}
{"original_description": "Turn on neoplug at sunset", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Heatmiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatmiser.turn_plug_on", "Filter code method": "Heatmiser.turnPlugOn.skip(string?: reason)", "Runtime method": "runAction(\"heatmiser.turn_plug_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Which neo plug\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which neoPlug?", "Slug": "which_neo_plug", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt < Meta.currentUserTime.hour() && Weather.sunSets.TempFahrenheit <= 70) {\n  if (Weather.sunSets.Condition !== \"Rain\") {\n    Heatmiser.turnPlugOn()\n  } else {\n    Heatmiser.turnPlugOn.skip(\"Condition is Rain\")\n  }\n} else {\n  Heatmiser.turnPlugOn.skip(\"Not sunset or temperature not below 70°F\")\n}", "intent": "Turn on the neoplug at sunset when the temperature is below 70 degrees Fahrenheit and the condition is not \"Rain\"."}
{"original_description": "Receive recurrent notifications on all Triby", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.send_an_image_to_every_triby", "Filter code method": "InvoxiaTriby.sendAnImageToEveryTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.send_an_image_to_every_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image URL?", "Helper text": "This has to be the URL of an image file (png, jpeg, bmp).", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "InvoxiaTriby.sendAnImageToEveryTriby.setImage Url(string: image_url)"}}], "filter_code": "// Check if it's a weekday\nif (DateAndTime.everyWeekdayAt.DayOfWeek.includes(\"Monday\") || \n    DateAndTime.everyWeekdayAt.DayOfWeek.includes(\"Tuesday\") || \n    DateAndTime.everyWeekdayAt.DayOfWeek.includes(\"Wednesday\") || \n    DateAndTime.everyWeekdayAt.DayOfWeek.includes(\"Thursday\") || \n    DateAndTime.everyWeekdayAt.DayOfWeek.includes(\"Friday\")) {\n  // Check time\n  if (DateAndTime.everyWeekdayAt.CheckTime >= \"07:00\" && DateAndTime.everyWeekdayAt.CheckTime <= \"22:00\") {\n    InvoxiaTriby.sendAnImageToEveryTriby.setImageUrl(//Image URL input);\n    InvoxiaTriby.sendAnImageToEveryTriby.runAction();\n  } else {\n    InvoxiaTriby.sendAnImageToEveryTriby.skip(\"Outside of active hours\");\n  }\n} else {\n  InvoxiaTriby.sendAnImageToEveryTriby.skip(\"Weekend - automation disabled\");\n}", "intent": "Send a recurrent notification to all Triby devices with a specific image URL, daily at the same time, only on weekdays."}
{"original_description": "Automatically turn on your lights to deter intruders, welcome you home or light the way during a midnight fridge raid. If you want to have your Philips hue lights turn on when motion is detected, try this!", "trigger_channel": "mydlink", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mydlink.motionDetection"}, "trigger_details": [{"section": "Trigger fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Mydlink.motionDetection.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe device reporting the detection.", "description": "The device reporting the detection.", "details": {"Slug": "device_name", "Filter code": "Mydlink.motionDetection.DeviceName", "Type": "String", "Example": "Living room camera"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var createdAt = new Date(Mydlink.motionDetection.CreatedAt)\nif (createdAt.getHours() >= 22 || createdAt.getHours() <= 6) {\n  Hue.turnOffAllHue.skip(\"Outside of active hours\")\n} else if (Mydlink.no !== \"Living room camera\") {\n  Hue.turnOffAllHue.skip(\"Not the desired device\")\n} else {\n  Hue.turnOffAllHue.runAction({\"lights\": MydLink.no})\n}", "intent": "Automatically turn on Philips Hue lights when motion is detected by Mydlink devices."}
{"original_description": "Turn on a specified product when the current outside temperature drops below a set temperature.\n", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_on", "Filter code method": "Idevices.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < parseInt($$temperature$$)) {\n  Idevices.turnDeviceOn(\"$$what_device$$\")\n} else {\n  Idevices.turnDeviceOn.skip(`Temperature ${parseInt($$temperature$$)}°F is above threshold`)\n}", "intent": "Turn on a specified iDevice when the current outside temperature drops below a set temperature."}
{"original_description": "Use your local weather to determine when it's getting hot and turn on your A/C with Ambi Climate.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_mode_comfort", "Filter code method": "Ambiclimate.deviceModeComfort.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_mode_comfort\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 72) {\n  Ambiclimate.deviceModeComfort.skip(\"Not necessary\")\n} else if (Weather.currentConditionIs.Condition === \"Rain\" || Weather.currentConditionIs.Condition === \"Thunderstorm\") {\n  Ambiclimate.deviceModeComfort.skip(\"Rain or thunderstorm detected, not turning on A/C\")\n} else {\n  Ambiclimate.deviceModeComfort()\n}", "intent": "Automate the A/C to turn on when it gets hot, based on local weather data from Weather Underground."}
{"original_description": "This applet turns on your Yeelight when Withings Sleep detects that you get out of bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "var deviceMac = WithingsSleep.bedout.DeviceUser;\nvar time = WithingsSleep.bedout.DateandTime;\n\nif (deviceMac === \"Your Bed Out\") {\n  if (time >= \"07:00\" && time <= \"22:00\") {\n    Yeelight.onOff(\"on\", \"On\");\n  } else {\n    Yeelight.onOff.skip(\"Outside of active hours\")\n  }\n} else {\n  Yeelight.onOff.skip(\"Incorrect device user\")\n}", "intent": "When the user gets out of bed, detected by Withings Sleep, turn on the Yeelight."}
{"original_description": "This applet lets Apilio know that the sun has set at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetAt = Weather.sunSets.SunsetAt\nif (Date.now() >= Date.parse(SunsetAt)) {\n  Apilio.booleanVariableToTrueUpdates(\"sun_set\")\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Sunset not reached yet\")\n}", "intent": "This applet checks if the sunset time has been reached at the specified location, then updates Apilio's boolean variable to true."}
{"original_description": "This applet lets Apilio know that the sun has risen at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt > Meta.currentUserTime.hour()) {\n  Apilio.booleanVariableToTrueUpdates(\"Your Variable ID\", \"Sun has risen\")\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Not sunrise yet\")\n}", "intent": "Trigger Apilio whenever the sun rises at your location, so that you can use this information in your Conditions and Logicblocks."}
{"original_description": "Don't miss out on a good deal, get alerts directly to your phone any time a new game is on sale on Itch.io.", "trigger_channel": "Itch.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "itchio.recent_games_on_sales"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Itchio.recentGamesOnSales.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Itchio.recentGamesOnSales.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Itchio.recentGamesOnSales.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Itchio.recentGamesOnSales.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Itchio.recentGamesOnSales.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Itchio.recentGamesOnSales.EntryTitle !== \"\") {\n  IfNotifications.sendNotification.setMessage(\"New game on sale: \" + Itchio.recentGamesOnSales.EntryTitle)\n  IfNotifications.sendNotification.skip()\n} else {\n  IfNotifications.sendNotification.setReason(\"No new games found\")\n  IfNotifications.sendNotification.skip(\"No new games found\")\n}", "intent": "Check if there are any new games on sale on Itch.io and send a notification with the entry title, URL, and content."}
{"original_description": "Select a time to turn on your A/C everyday with Ambi Climate.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_mode_comfort", "Filter code method": "Ambiclimate.deviceModeComfort.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_mode_comfort\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time.includes(\"AM\")) {\n  if (Time.split(\":\")[0] < 7 || Time.split(\":\")[0] > 11) {\n    Ambiclimate.deviceModeComfort.skip(\"Before 7:00 AM or after 11:00 AM\")\n  } else {\n    runAction(\"ambiclimate.device_mode_comfort\", {\"device_name\": /*<<Device Name>>*/})\n  }\n} else if (Time.includes(\"PM\")) {\n  if (Time.split(\":\")[0] < 5 || Time.split(\":\")[0] > 9) {\n    Ambiclimate.deviceModeComfort.skip(\"Before 5:00 PM or after 9:00 PM\")\n  } else {\n    runAction(\"ambiclimate.device_mode_comfort\", {\"device_name\": /*<<Device Name>>*/})\n  }\n}", "intent": "Turn on Ambi Climate's comfort mode at a specified time every day."}
{"original_description": "Run a shortcut in Futurehome turning ON multiple garden lights at Sunset", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Futurehome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "futurehome.run_shortcut", "Filter code method": "Futurehome.runShortcut.skip(string?: reason)", "Runtime method": "runAction(\"futurehome.run_shortcut\", {})"}, "action_details": [{"section": "Action fields", "title": "Shortcut\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "shortcut", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius >= 18) {\n  if (Futurehome.runShortcut.skip(\"No sunset, no lights\")) {\n    Futurehome.runShortcut(\"garden_lights\", \"on\")\n  }\n}", "intent": "Triggered by Weather Underground's sunset event, this automation runs a Futurehome shortcut to turn ON multiple garden lights at sunset when the temperature is above 18°C (64°F)."}
{"original_description": "Configure a Nexia automation to turn on your Hue lights.", "trigger_channel": "Nexia", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "trigger_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nexia.nexiaAutomation.CreatedAt < Meta.currentUserTime.now() - 10 * 60 * 1000) {\n  Hue.turnOffAllHue.skip(\"Too late, skip action\")\n} else if (!Nexia.nexia_automation === \"My First Automation\") {\n  Hue.turnOffAllHue.skip(\"Invalid automation name\")\n} else {\n  var houseName = Nexia.nexiaAutomation.HouseName\n  var lights = [\"Living Room\", \"Kitchen\"] // Replace with actual light names\n  if (houseName == \"Home\" && lights.includes(Living Room)) {\n    Hue.turnOffAllHue()\n  } else {\n    Hue.turnOffAllHue.skip(\"Invalid house name or lights\")\n  }\n}", "intent": "Configure a Nexia automation to turn on Philips Hue lights."}
{"original_description": "Turn on heat pump to heat when outside temperature reaches the value you specify.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "const Temperature = Weather.currentTemperatureDropsBelow.temp_fahrenheit\nif (Temperature <= parseFloat(Temperature)) {\n  const Dsn = FujitsuGeneralLimited.dsn\n  const OperationMode = \"HEAT\"\n  const AdjustTemperature = \"72\" // Assuming the default temperature is 72F\n  FujitsuGeneralLimited.setOperModeAndTemp(Dsn, OperationMode, AdjustTemperature)\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature not low enough\")\n}", "intent": "The rule is triggered when the outside temperature reaches a user-specified value, and it should turn on the heat pump to heat."}
{"original_description": "Turn on my Nanoleaf lights when my SmartThings sensor detects motion. Works best if the motion sensor is in the same room as the lights =)", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.any_new_motion_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Detected at\nThe date and time motion was sensed.", "description": "The date and time motion was sensed.", "details": {"Slug": "DetectedAt", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DetectedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_off_request", "Filter code method": "Nanoleaf.turnOffRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_off_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}], "filter_code": "var detectedAt = SmartthingsV2.anyNewMotionSmartthings.DetectedAt\nvar deviceName = SmartthingsV2.anyNewMotionSmartthings.DeviceName\nif (device === \"Bedroom sensor\") { \n  Nanoleaf.turnOffRequest.skip(\"Unsupported device\")\n} else {\n  runAction(\"nanoleaf.turn_off_request\", {})\n}", "intent": "Turn on my Nanoleaf lights when SmartThings detects motion."}
{"original_description": "Find out how your photos correlate with other lifestyle events", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_photo_post"}, "trigger_details": [{"section": "Trigger fields", "title": "Tumblelog\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tumblelog", "Helper text": "Enter the tumblelog name that this trigger should fire for", "Slug": "tumblelog", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Post body text\nThe post's body (text only)", "description": "The post's body (text only)", "details": {"Slug": "post_body_text", "Filter code": "Tumblr.newPhotoPost.PostBodyText", "Type": "String", "Example": "This is the body of a post. Neat."}}, {"section": "Ingredients", "title": "Url\nThe post URL", "description": "The post URL", "details": {"Slug": "url", "Filter code": "Tumblr.newPhotoPost.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post body html\nThe post's body (HTML)", "description": "The post's body (HTML)", "details": {"Slug": "post_body_html", "Filter code": "Tumblr.newPhotoPost.PostBodyHtml", "Type": "String", "Example": "<figure class=\"tmblr-full\"><img src=\"https://64.media.tumblr.com/a-photo.jpg\"></figure><p>This is an HTML body.</p>"}}, {"section": "Ingredients", "title": "Thumbnail url\nThe thumbnail image URL for the post", "description": "The thumbnail image URL for the post", "details": {"Slug": "thumbnail_url", "Filter code": "Tumblr.newPhotoPost.ThumbnailUrl", "Type": "Web URL", "Example": "https://64.media.tumblr.com/a18c8063bf9d095d99f12b51d3dd1eda/57803298a6ae7123-0a/s1280x1920/fb2fce67958156e2231da15522ddb6850e1559ff.gifv"}}, {"section": "Ingredients", "title": "Full image url\nThe full size image URL", "description": "The full size image URL", "details": {"Slug": "full_image_url", "Filter code": "Tumblr.newPhotoPost.FullImageUrl", "Type": "Image URL", "Example": "https://64.media.tumblr.com/fd654c32f041cb02c757b5646c1cf9e1/a4c5782524284f82-d5/s1280x1920/8e97caae5a975889b3e170e42ea064b68410300a.jpg"}}, {"section": "Ingredients", "title": "Post tags\nThe post's tags", "description": "The post's tags", "details": {"Slug": "post_tags", "Filter code": "Tumblr.newPhotoPost.PostTags", "Type": "String", "Example": "Sky,Earth,Wind,Fire"}}, {"section": "Ingredients", "title": "Post\nThe ID of the post that has been created", "description": "The ID of the post that has been created", "details": {"Slug": "post_id", "Filter code": "Tumblr.newPhotoPost.PostId", "Type": "String", "Example": "123456789"}}, {"section": "Ingredients", "title": "Tumblelog\nThe name of the Tumblelog that published the post", "description": "The name of the Tumblelog that published the post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newPhotoPost.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newPhotoPost.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Tumblr.newPhotoPost.PostBodyText.includes(\"lifestyle\")) {\n  Welltory.sendEvent.setDataSource(\"Other\")\n    .setData Type(\"Other\")\n    .setDatetime(Meta.currentUserTime.format(\"YYYY-MM-DD'T'HH:mm:ssZ\"))\n    .setValue(1)\n    .setComment(\"Correlated photo with lifestyle event\")\n} else {\n  Welltory.sendEvent.skip(\"No correlation found\")\n}", "intent": "Find out how your photos correlate with other lifestyle events."}
{"original_description": "Turn on or off your BG Home device when the sun rises in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "BG Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "BG_HOME.powerState", "Filter code method": "BGHOME.powerState.skip(string?: reason)", "Runtime method": "runAction(\"BG_HOME.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On of off?", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "BGHOME.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunRises.SunriseAt <= Meta.currentUserTime.date()) {\n  var DeviceInfo = \"Select a device\"; // Replace with actual code to get the device name\n  if (PowerControl_ChangePowerState_string === \"On\") {\n    BGHOME.powerState.setPowerControlChangePowerStateString(BG_HOME_DEVICE_NAME, true);\n  } else {\n    BGHOME.powerState.skip(\"No action needed\");\n  }\n} else {\n  BGHOME.powerState.skip(\"Not yet sunrise\");\n}", "intent": "Turn on or off the BG Home device when the sun rises in your area."}
{"original_description": "If your SpotCam detect motion, then turn on your Philips Hue atuomatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.EventTime > Meta.currentUserTime.now() - 3600) {\n  if (Spotcam.spotcamRingEvent.CameraName.includes(\"Motion\")) {\n    Hue.turnOffAllHue.skip(\"No motion detected\")\n  } else {\n    var lights = [\"<Insert selected light(s)>\"]\n    for (var i in lights) {\n      Hue.turnOffAllHue(lights[i])\n    }\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Event is older than an hour\")\n}", "intent": "Automatically turn on Philips Hue when SpotCam detects motion."}
{"original_description": "Turn on a specified product when the current outside temperate rises above a set temperature.\n", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_on", "Filter code method": "Idevices.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > parseInt(Temp) || Weather.currentTemperatureDropsBelow.TempCelsius > parseInt(Celsius)) {\n  Idevices.turnDeviceOn(what_device)\n} else {\n  Idevices.turnDeviceOn.skip(\"Current temperature is below set threshold\")\n}", "intent": "Turn on a specified iDevice when the current outside temperature rises above a set temperature."}
{"original_description": "When I unlock my SmartThings connected door lock, turn on my lights.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.unlocked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nThe date and time the lock was unlocked.", "description": "The date and time the lock was unlocked.", "details": {"Slug": "UnlockedAt", "Filter code": "SmartthingsV2.unlockedSmartthings.UnlockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.unlockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Give yourself light when it's dark. Automatically turn on your light at sunset. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "AduroSmart", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "AduroSmart.turnondevice", "Filter code method": "AduroSmart.turnondevice.skip(string?: reason)", "Runtime method": "runAction(\"AduroSmart.turnondevice\", {})"}, "action_details": [{"section": "Action fields", "title": "Selectdevice\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Choose a device", "Slug": "selectdevice", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.hour() < Weather.sunSets.SunsetAt.hour()) {\n  if (Weather.condition === \"Sunny\") {\n    AduroSmart.turnondevice.skip(\"Too bright\")\n  } else {\n    // Adjust for night mode\n    AduroSmart.turnondevice()\n  }\n}", "intent": "Automatically turn on the AduroSmart device at sunset when it's dark outside."}
{"original_description": "Turn on air conditioner to cool when outside temperature reaches the value you specify.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get trigger values\nvar tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit;\nvar degreesType = Weather.currentTemperatureDropsBelow.DegreesType;\nvar location = Weather.currentTemperatureDropsBelow.Location;\n\n// Check if temperature is below specified value\nif (tempFahrenheit <= parseInt(Temperature)) {\n  // Get action values\n  var dsn = FujitsuGeneralLimited.setOperModeAndTemp.dsn;\n  var operationMode = FujitsuGeneralLimited.setOperModeAndTemp.operation_mode;\n  var adjustTemperature = FujitsuGeneralLimited.setOperModeAndTemp.adjust_temperature;\n\n  // Set air conditioner to cool\n  if (adjustTemperature !== \"OFF\" && adjustTemperature !== \"Fan\") {\n    FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Invalid temperature adjustment\");\n  } else {\n    FujitsuGeneralLimited.setOperModeAndTemp(dsn, operationMode, parseInt(adjust_temperature));\n  }\n} else {\n  // Skip action if outside temperature is not below specified value\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is above the set limit\");\n}", "intent": "When outside temperature reaches a specified value, turn on air conditioner to cool."}
{"original_description": "Press the iH button on your iHome device to turn ON a Leviton room", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.toggle_room_on", "Filter code method": "MyLeviton.toggleRoomOn.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.toggle_room_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.press !== \"Long Press\") { \n  MyLeviton.toggleRoomOn(MyLeviton.toggleRoomOn.name, IhomeEnhance.enhanceButton.button_name)\n} else {\n  MyLeviton.toggleRoomOn.skip(\"Long press detected\")\n}", "intent": "When the iHome Enhance button is pressed, check if it's a long press. If not, turn ON the specified Leviton room."}
{"original_description": "When the Litter-Robot is full, play a song on your Sonos speaker", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var litterRobotName = Whisker.lr3Events.LitterRobotName;\nif (litterRobotName === \"Full\") {\n  Sonos.playFavorite(\"My Favorite Song\", \"Living Room\", true);\n} else {\n  Sonos.playFavorite.skip(\"Litter-Robot not full\");\n}", "intent": "Play a song on Sonos when Litter-Robot is full."}
{"original_description": "Turn on your Philips Hue when FIBARO device detects motion.", "trigger_channel": "FIBARO", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fibaro.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Fibaro.motionDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nID of device", "description": "ID of device", "details": {"Slug": "device_id", "Filter code": "Fibaro.motionDetected.DeviceId", "Type": "String", "Example": "0"}}, {"section": "Ingredients", "title": "Hub serial\nHub serial number", "description": "Hub serial number", "details": {"Slug": "hub_serial", "Filter code": "Fibaro.motionDetected.HubSerial", "Type": "String", "Example": "HC2-000000"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Fibaro.motionDetected.WhichDevice === 'Any') {\n  if (!Fibaro.motionDetected.CreatedAt.includes('motion')) {\n    Hue.turnOffAllHue.skip('No motion detected')\n  } else {\n    // Turn on Philips Hue\n  }\n} else {\n  Hue.turnOffAllHue.skip('Invalid device selected')\n}", "intent": "This code is intended to turn on Philips Hue when FIBARO detects motion."}
{"original_description": "Turn on my charger when my phone battery drops below 15%", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_low"}, "trigger_details": [{"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryLow.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device's battery became low.", "description": "The time the device's battery became low.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryLow.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryLow.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage <= 15) {\n  Ewelink.lightSwitchAction.skip(\"Phone battery level is too low\");\n} else {\n  var reason = \"Phone battery level is within normal range\";\n  if (Ewelink.lightSwitchActionDevice === \"myCharger\") {\n    Ewelink.lightSwitchAction.setOnoffActQuery(\"on\", reason);\n  } else {\n    Ewelink.lightSwitchAction.skip(reason);\n  }\n}", "intent": "Turn on my charger when my phone battery drops below 15%."}
{"original_description": "Text message notifications when your Air Conditioner publishes a trigger provides piece of mind if the AC is being tampered with.", "trigger_channel": "FUJITSU GENERAL LIMITED", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fujitsu_general_limited.whenAcIsOn"}, "trigger_details": [{"section": "Trigger fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Operation mode\nAC's operation mode value", "description": "AC's operation mode value", "details": {"Slug": "operation_mode_value", "Filter code": "FujitsuGeneralLimited.whenAcIsOn.OperationMode", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Trigger finished at\nTrigger check finished-at time stamp.", "description": "Trigger check finished-at time stamp.", "details": {"Slug": "trigger_finished_at", "Filter code": "FujitsuGeneralLimited.whenAcIsOn.TriggerFinishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nDevice Name", "description": "Device Name", "details": {"Slug": "device_name", "Filter code": "FujitsuGeneralLimited.whenAcIsOn.DeviceName", "Type": "String", "Example": "Living room AC"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (FujitsuGeneralLimited.whenAcIsOn.OperationMode === \"2\" && FujitsuGeneralLimited.whenAcIsOn.TriggerFinishedAt) {\n  AndroidMessages.sendAMessage(\"Device: \" + FujitsuGeneralLimited.whenAcIsOn.DeviceName + \", Operation mode: ON, Trigger finished at: \" + FujitsuGeneralLimited.whenAcIsOn.TriggerFinishedAt)\n} else {\n  AndroidMessages.sendAMessage.skip(\"AC operation mode is off or trigger finished at timestamp not available\")\n}", "intent": "Check if AC operation mode is on and trigger finished at timestamp is available, then send a message to the specified phone number."}
{"original_description": "Play a specific song on your Android device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_song", "Filter code method": "AndroidDevice.playSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_song\", {})"}, "action_details": [{"section": "Action fields", "title": "Query\nText input > Title", "description": "Text input > Title", "details": {"Label": "Enter a song title", "Helper text": "e.g. Can You Feel The Love Tonight", "Slug": "query", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.playSong.setQuery(string: query)"}}], "filter_code": "if (Knocki.knocki.Pattern === \"***\") { \n  var query = \"Can You Feel The Love Tonight\" // Default song title\n  if (Trigger.code !== \"\") {\n    query = Trigger.code\n  }\n  AndroidDevice.playSong.setQuery(query)\n} else {\n  AndroidDevice.playSong.skip(\"Invalid gesture pattern\")\n}", "intent": "Play a specific song on an Android device when a Knocki gesture trigger is detected."}
{"original_description": "Automatically turn on your ceiling fan if weather's hot.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit;\nif (tempFahrenheit > 75) {\n  Fansync.onOff(\"on\", \"Hot weather detected\");\n} else {\n  Fansync.onOff.skip(\"Not hot enough\");\n}", "intent": "Automatically turn on your ceiling fan if the weather is hot."}
{"original_description": "Set the time everyday when you would like the lights to automatically turn on. You'll also select the room where the lights should turn on.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Noon Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "noonhome.change_scene", "Filter code method": "Noonhome.changeScene.skip(string?: reason)", "Runtime method": "runAction(\"noonhome.change_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene in space\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scene in what room?", "Helper text": "Select the room and the scene to change.", "Slug": "scene_in_space", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time == $$Time$$) {\n  Noonhome.changeScene(\"scene_in_space\", \"room\")\n}", "intent": "Set the lights to turn on at a specified time every day."}
{"original_description": "Record your iotty activities by taking advantage of the Google Sheets feature.", "trigger_channel": "iotty Smart Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "iottysmarthome.device_on_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which iotty device was turned on, off, or pressed?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Light state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Check whether the iotty device is on, off, or has been pressed", "Slug": "light_state", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Source\nWas the device turned on manually, by iotty App, or by some smart home platforms?", "description": "Was the device turned on manually, by iotty App, or by some smart home platforms?", "details": {"Slug": "source", "Filter code": "Iottysmarthome.deviceOnOff.Source", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Device name\nThe name of your iotty device", "description": "The name of your iotty device", "details": {"Slug": "device_name", "Filter code": "Iottysmarthome.deviceOnOff.DeviceName", "Type": "String", "Example": "Living Room Light"}}, {"section": "Ingredients", "title": "Created at\nThe exact date and hour when the event happened", "description": "The exact date and hour when the event happened", "details": {"Slug": "created_at", "Filter code": "Iottysmarthome.deviceOnOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Light state\nThe state of the iotty Smart Switch light (on or off)", "description": "The state of the iotty Smart Switch light (on or off)", "details": {"Slug": "light_state", "Filter code": "Iottysmarthome.deviceOnOff.LightState", "Type": "String", "Example": "on"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Iottysmarthome.deviceOnOff.Source === \"1\") {\n  if (Iottysmarthome.deviceOnOff.LightState === \"on\") {\n    var filename = \"iotty Activity Log\"\n    var formatted_row = \"|||Date: \" + Iottysmarthome.deviceOnOff.CreatedAt + \"|||Device Name: \" + Iottysmarthome.deviceOnOff.DeviceName + \"|||Light State: On\"\n  } else if (Iottysmarthome.deviceOnOff.LightState === \"off\") {\n    var filename = \"iotty Activity Log\"\n    var formatted_row = \"|||Date: \" + Iottysmarthome.deviceOnOff.CreatedAt + \"|||Device Name: \" + Iottysmarthome.deviceOnOff.DeviceName + \"|||Light State: Off\"\n  } else {\n    Domovea.shadeClose.skip(\"Unknown light state\")\n  }\n} else {\n  Domovea.shadeClose.skip(\"Not triggered by iotty App or smart home platforms\")\n}\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(filename)\nGoogleSheets.appendToGoogleSpreadSheet.setFormattedRow(formatted_row)", "intent": "Record iotty activities by appending a new row to Google Sheets when an iotty device is turned on, off, or pressed."}
{"original_description": "Find correlations between your lifestyle and social media performance", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_like"}, "trigger_details": [{"section": "Ingredients", "title": "Url\nThe URL to the liked post", "description": "The URL to the liked post", "details": {"Slug": "url", "Filter code": "Tumblr.newLike.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post title\nThe post title", "description": "The post title", "details": {"Slug": "post_title", "Filter code": "Tumblr.newLike.PostTitle", "Type": "String", "Example": "My Nifty Post"}}, {"section": "Ingredients", "title": "Post\nThe post ID of the liked post", "description": "The post ID of the liked post", "details": {"Slug": "post_id", "Filter code": "Tumblr.newLike.PostId", "Type": "String", "Example": "659803739627094017"}}, {"section": "Ingredients", "title": "Tumblelog\nThe Tumblelog name of the liked post", "description": "The Tumblelog name of the liked post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newLike.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newLike.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Tumblr.newLike !== null) {\n  var Url = Tumblr.newLike.Url\n  var PostTitle = Tumblr.newLike.PostTitle\n  var PostId = Tumblr.newLike.PostId\n  var Tumblelog = Tumblr.newLike.Tumblelog\n  var CreatedAt = Tumblr.newLike.CreatedAt\n\n  if (Url && PostTitle && PostId && Tumblelog) {\n    Welltory.sendEvent.skip(\"Incomplete data\")\n  } else {\n    Welltory.sendEvent.setDataSource(Tumblr.newLike.Data_Source)\n      .setData_Type(Tumblr.newLike.Data_Type)\n      .setDatetime(CreatedAt)\n      .setValue(Tumblr.newLike.Value)\n      .setComment(Tumblr.newLike.Comment)\n      .run()\n  }\n}", "intent": "Check if a new like event on Tumblr is triggered, and send a corresponding event to Welltory."}
{"original_description": "Automatically turn your remote on when the current temperature rises to a certain value", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AICO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aico.run_remote", "Filter code method": "Aico.runRemote.skip(string?: reason)", "Runtime method": "runAction(\"aico.run_remote\", {})"}, "action_details": [{"section": "Action fields", "title": "Key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Key name", "Helper text": "Please select a key", "Slug": "key_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureDropsBelow.TempFahrenheit;\nif (tempFahrenheit >= 72) {\n  Aico.runRemote(\"turn_on\");\n} else {\n  Aico.runRemote.skip(\"Temperature is not high enough\");\n}", "intent": "Automatically turn your remote on when the current temperature rises to a certain value."}
{"original_description": "Turn on TP-LINK Kasa light when Swann Camera detects motion", "trigger_channel": "Swann Security", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "swannsecurity.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "On device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose device", "Helper text": "This trigger would fire when there is a motion detected on this device.", "Slug": "on_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Swannsecurity.motionDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Swannsecurity.motionDetected.CreatedAt != null) {\n  var device = on_device_id;\n  if (device !== \"\") {\n    Kasa.turnOn(device).then(() => {\n      // Success\n    }).catch((error) => {\n      console.error(error);\n      Kasa.turnOn.skip(\"Failed to turn on the light\");\n    });\n  } else {\n    Kasa.turnOn.skip(\"No device selected\");\n  }\n}", "intent": "When Swann Camera detects motion, turn on TP-LINK Kasa light."}
{"original_description": "Turn Hue lights on/off ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === 'double_click') {\n  // Turn off all lights if double-clicked\n  Hue.toggleAllHue.skip('Double click detected')\n} else {\n  // Turn on all lights otherwise\n  Hue.toggleAllHue()\n}", "intent": "When a Flic button is clicked, turn on/off all Philips Hue lights."}
{"original_description": "Boost my Ventilation when Carbon Dioxide levels are high on my Netatmo Weather Station", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.co2-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target carbon dioxide", "Helper text": "In parts per million (ppm)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.co2RisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the CO2", "description": "This is the name of the Netamo device where you are reading the CO2", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.co2RisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target co2\nThe target CO2 in parts per million (ppm)", "description": "The target CO2 in parts per million (ppm)", "details": {"Slug": "TargetCO2", "Filter code": "Netatmo.co2RisesAbove.TargetCO2", "Type": "String", "Example": "1200"}}, {"section": "Ingredients", "title": "Measured co2\nThe measured CO2 in parts per million (ppm)", "description": "The measured CO2 in parts per million (ppm)", "details": {"Slug": "MeasuredCO2", "Filter code": "Netatmo.co2RisesAbove.MeasuredCO2", "Type": "String", "Example": "1204"}}], "action_channel": "myUplink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myuplink.boost-ventilation", "Filter code method": "Myuplink.boostVentilation.skip(string?: reason)", "Runtime method": "runAction(\"myuplink.boost-ventilation\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.co2RisesAbove.MeasuredCO2 > parseInt(Netatmo.co2RisesAbove.TargetCO2)) {\n  Myuplink.boostVentilation(\"High CO2 levels detected: \" + Netatmo.co2RisesAbove.MeasuredAt)\n}", "intent": "Boost ventilation when carbon dioxide levels are high on my Netatmo Weather Station."}
{"original_description": "Turn on a Smart Home Solution device when Motion is suspected.", "trigger_channel": "Aerial Technologies", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AerialTechnologies.motion_detection_motion_started"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event", "description": "Type of event", "details": {"Slug": "type", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Type", "Type": "String", "Example": "motionDetection.motion.started"}}, {"section": "Ingredients", "title": "Serial\nSerial", "description": "Serial", "details": {"Slug": "serial", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Serial", "Type": "String", "Example": "ABCDEF"}}, {"section": "Ingredients", "title": "Id\nEvent identifier", "description": "Event identifier", "details": {"Slug": "id", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Id", "Type": "String", "Example": "uuid"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_on", "Filter code method": "SmartHomeSolution.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The device name", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CreatedAt = AerialTechnologies.motionDetectionMotionStarted.CreatedAt\nvar Type = AerialTechnologies.motionDetectionMotionStarted.Type\nif (Type !== \"motionDetection.motion.ignored\") {\n  SmartHomeSolution.turnDeviceOn(device_address, \"Triggered by motion detection\")\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Event type is ignored\")\n}", "intent": "When motion is suspected, turn on a Smart Home Solution device if the type of event is not 'ignored', otherwise skip the action."}
{"original_description": "Catch up on your favorite blog in Pocket at your leisure — or use Pocket's text-to-speech function to listen to articles. It's like your own custom podcast! ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Pocket", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pocket.read_it_later", "Filter code method": "Pocket.readItLater.skip(string?: reason)", "Runtime method": "runAction(\"pocket.read_it_later\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setUrl(string: url)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setTags(string: tags)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle !== \"\") {\n  // Check if the entry has a title\n  var feedUrl = Feed.newFeedItem.FeedUrl;\n  var entryTitle = Feed.newFeedItem.EntryTitle;\n  var entryUrl = Feed.newFeedItem.EntryUrl;\n  var author = Feed.newFeedItem.EntryAuthor;\n  var content = Feed.newFeedItem.EntryContent;\n  var imageUrl = Feed.newFeedItem.EntryImageUrl;\n  var published = Feed.newFeedItem.EntryPublished;\n  var feedTitle = Feed.newFeedItem.FeedTitle;\n\n  // Check if the Pocket's text-to-speech function should be used\n  var useTts = false; // TO DO: Implement logic to determine when to use TTS\n\n  // Set up the action parameters\n  var url = entryUrl;\n  var tags = author + \" - \" + published;\n\n  // If using TTS, set the URL and tags accordingly\n  if (useTts) {\n    Pocket.readItLater.setUrl(url);\n    Pocket.readItLater.setTags(tags);\n  } else {\n    // Otherwise, just add the entry to Pocket's read later list\n    Pocket.readItLater(url);\n  }\n} else {\n  // If no title is found in the feed item, skip the action\n  Pocket.readItLater.skip(\"No title found\")\n}", "intent": "This automation will trigger when a new RSS feed item is detected and catch up on the user's favorite blog in Pocket. It will also use Pocket's text-to-speech function to listen to articles, making it like having a custom podcast."}
{"original_description": "All you need to do is enter an app's name or the link to its listing on the App Store in the field below and we'll let you know as soon as its price drops.", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.app_price_dropped"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.appPriceDropped.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.appPriceDropped.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.appPriceDropped.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.appPriceDropped.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.appPriceDropped.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.appPriceDropped.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.appPriceDropped.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.appPriceDropped.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.appPriceDropped.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.appPriceDropped.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.appPriceDropped.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (AppStore.appPriceDropped.Name === $$app_name_or_url$$) {\n  IfNotifications.sendNotification.setMessage(\"The price of \" + AppStore.appPriceDropped.Name + \" has dropped!\");\n} else {\n  IfNotifications.sendNotification.skip(\"No matching app found\")\n}", "intent": "Notify the user when an app's price drops in the Apple App Store."}
{"original_description": "If your SmartThings device is opened, then turn on your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_spotcam", "Filter code method": "Spotcam.turnOnSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.Device === SmartthingsV2.openedSmartthings.DeviceName) {\n  try {\n    var OpenedAt = SmartthingsV2.openedSmartthings.OpenedAt\n    Spotcam.turnOnSpotcam(\"Device \" + SmartthingsV2.openedSmartthings.DeviceName + \" opened at \" + OpenedAt)\n  } catch (e) {\n    Spotcam.turnOnSpotcam.skip(e.message)\n  }\n}", "intent": "When the SmartThings device is opened, it will automatically turn on the SpotCam if the selected device and the corresponding device name match."}
{"original_description": "If your SpotCam detect sound, then turn on your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.Sound === true) {\n  Hue.turnOffAllHue.skip(\"No sound detected\");\n} else {\n  // Set lights dropdown list\n  var lights = [];\n  if (Trigger.lights !== \"\") {\n    lights = Trigger.lights.split(\",\");\n  }\n  \n  Hue.turnOffAllHue.runAction(lights);\n}", "intent": "If SpotCam detects sound, then turn on Philips Hue automatically."}
{"original_description": "Automatically open garage door when presence is detected in SmartThings.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.ArrivedAt) {\n  var deviceName = SmartthingsV2.newPresentSmartthings.DeviceName;\n  var doorId = \"Please identify which door in your account you want to open\";\n  \n  if (!deviceName || !doorId) {\n    Garadget.openDoor.skip(\"Missing required information\");\n  } else {\n    Garadget.openDoor(doorId);\n  }\n}", "intent": "Automatically opens garage door when presence is detected in SmartThings."}
{"original_description": "Turn on the home air conditioning at a specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_power", "Filter code method": "Airtouch.acPower.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_power\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or turn off?", "Slug": "power_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acPower.setPower On Off(string: power_on_off)"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime >= '08:00' && CheckTime < '24:00') {\n  Airtouch.acPower(Airtouch.acPower.skip(''))\n} else {\n  Airtouch.acPower.skip('Outside of active hours')\n}", "intent": "Automatically turn on the air conditioning at a specific time every day."}
{"original_description": "Turn your switches, plugs, or lights on and off to make your home look occupied", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.toggle", "Filter code method": "Kasa.toggle.skip(string?: reason)", "Runtime method": "runAction(\"kasa.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to toggle", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyHourAt.CheckTime\nif (parseInt(Time.split(\" \")[1].split(\":\")[0]) % 60 >= parseInt(trigger_details[0].details.Label)) {\n  var deviceSlug = trigger_details[1].details Slug;\n  Kasa.toggle.skip(\"Not the correct time\")\n} else {\n  Kasa.toggle(deviceSlug)\n}", "intent": "Turn on or off devices using Kasa when the time of day meets specific conditions."}
{"original_description": "Turning ON/OFF your Nexus Home devices at particular time", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.devices", "Filter code method": "BrilliantNexus.devices.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.devices\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Select any of the Brilliant Nexus device", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your device", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.devices.setStatus(string: status)"}}], "filter_code": "// Get the current time\nvar currentTime = DateAndTime.everyDayAt.CheckTime\n\n// Check if it's the desired time\nif (currentTime === \"August 23, 2010 at 11:01PM\") {\n  // Get the device name and status from the trigger details\n  var deviceName = trigger.details[0].details.Label\n  var status = trigger.details[1].details.Label\n\n  // Send a command to the device based on its status\n  if (status === \"ON\") {\n    BrilliantNexus.devices.skip(\"Device is already ON\")\n  } else {\n    BrilliantNexus.devices.setStatus(status).then(() => {\n      console.log(`Set ${deviceName} to ${status}`)\n    })\n  }\n}", "intent": "The IFTTT automation is designed to turn ON/OFF Brilliant Nexus devices at a specific time. It uses the Date & Time trigger and checks if it's a particular time, then sends a command to the device based on its status."}
{"original_description": "Stay on top of the latest businesses in your area by logging them in a Googlesheet!", "trigger_channel": "Yelp", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "yelp.hot_and_new_business"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Business in an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sort by\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sort by", "Slug": "sort_by", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Business\nUnique Yelp ID of this business", "description": "Unique Yelp ID of this business", "details": {"Slug": "business_id", "Filter code": "Yelp.hotAndNewBusiness.BusinessId", "Type": "String", "Example": "lJAGnYzku5zSaLnQ_T6_GQ"}}, {"section": "Ingredients", "title": "Business name\nName of the business.", "description": "Name of the business.", "details": {"Slug": "business_name", "Filter code": "Yelp.hotAndNewBusiness.BusinessName", "Type": "String", "Example": "Brenda's French Soul Food"}}, {"section": "Ingredients", "title": "Business category\nList of category titles associated with the business.", "description": "List of category titles associated with the business.", "details": {"Slug": "business_category", "Filter code": "Yelp.hotAndNewBusiness.BusinessCategory", "Type": "String", "Example": "Breakfast & Brunch, Southern, Cajun/Creole"}}, {"section": "Ingredients", "title": "Business image url\nPhoto for this business.", "description": "Photo for this business.", "details": {"Slug": "business_image_url", "Filter code": "Yelp.hotAndNewBusiness.BusinessImageUrl", "Type": "Image URL", "Example": "https://s3-media3.fl.yelpcdn.com/bphoto/sNIJnePGDenUOyewsD8tLg/o.jpg"}}, {"section": "Ingredients", "title": "Business phone\nPhone number of the business.", "description": "Phone number of the business.", "details": {"Slug": "business_phone", "Filter code": "Yelp.hotAndNewBusiness.BusinessPhone", "Type": "String", "Example": "+14153458100"}}, {"section": "Ingredients", "title": "Business address\nLocation of this business", "description": "Location of this business", "details": {"Slug": "business_address", "Filter code": "Yelp.hotAndNewBusiness.BusinessAddress", "Type": "String", "Example": "652 Polk St, San Francisco, CA 94102"}}, {"section": "Ingredients", "title": "Business rating\nRating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "description": "Rating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "details": {"Slug": "business_rating", "Filter code": "Yelp.hotAndNewBusiness.BusinessRating", "Type": "String", "Example": "4.0"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "const Yelp = require(\"Yelp\");\nconst GoogleSheets = require(\"GoogleSheets\");\n\nif (Yelp.hotAndNewBusiness.BusinessId) {\n  const businessData = {\n    BusinessName: Yelp.hotAndNewBusiness.BusinessName,\n    BusinessCategory: Yelp.hotAndNewBusiness.BusinessCategory,\n    BusinessImageUrl: Yelp.hotAndNewBusiness.BusinessImageUrl,\n    BusinessPhone: Yelp.hotAndNewBusiness.BusinessPhone,\n    BusinessAddress: Yelp.hotAndNewBusiness.BusinessAddress,\n    BusinessRating: Yelp.hotAndNewBusiness.BusinessRating\n  };\n\n  const formattedRow = `${Yelp.hotAndNewBusiness.Location} ||| ${businessData.BusinessName} ||| ${businessData.BusinessCategory} ||| ${businessData.BusinessImageUrl} ||| ${businessData.BusinessPhone} ||| ${businessData.BusinessAddress} ||| ${businessData.BusinessRating}`;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"new_businesses\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n}", "intent": "This IFTTT automation will retrieve new businesses in a specified location and log them into a Google Sheets document."}
{"original_description": "Turns on the LightwaveRF light of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "LightwaveRF Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_lighting.switch_on_light", "Filter code method": "LightwaverfLighting.switchOnLight.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_lighting.switch_on_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Which light\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Light?", "Slug": "which_light", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Check if it's night time\nvar IsNightTime = (new Date(Apilio.iftttActionReports.CreatedAt)).getHours() < 7 || (new Date(Apilio.iftttActionReports.CreatedAt)).getHours() > 22;\nif (!IsNightTime) {\n  Apilio.ifttt_action_identifier.skip(\"Not night time\")\n}\n\n// Check if a specific light is chosen\nvar WhichLight = Apilio.iftttActionReports.ApilioValue1 || Apilio.iftttActionReports.ApilioValue2 || Apilio.iftttActionReports.ApilioValue3;\nif (!WhichLight) {\n  Apilio.ifttt_action_identifier.skip(\"No light chosen\")\n}\n\n// Turn on the chosen LightwaveRF light\nif (IsNightTime && WhichLight) {\n  LightwaverfLighting.switchOnLight(WhichLight)\n}", "intent": "When Apilio triggers the specified action, check if it's night time and if a specific light is chosen. If both conditions are met, turn on the chosen LightwaveRF light."}
{"original_description": "Simply enter a specific app's name or the link to its listing on the App Store and we'll let you know as soon as it releases a new update along with the release notes.", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_version_released"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppVersionReleased.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppVersionReleased.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppVersionReleased.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppVersionReleased.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppVersionReleased.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppVersionReleased.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppVersionReleased.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppVersionReleased.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppVersionReleased.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Release notes\nNotes about the new app release.", "description": "Notes about the new app release.", "details": {"Slug": "release_notes", "Filter code": "AppStore.newAppVersionReleased.ReleaseNotes", "Type": "String", "Example": "+ We made some improvements to..."}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppVersionReleased.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppVersionReleased.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (AppStore.newAppVersionReleased) {\n  var name = AppStore.newAppVersionReleased.Name\n  var description = AppStore.newAppVersionReleased.Description\n  var appStoreUrl = AppStore.newAppVersionReleased.AppStoreUrl\n  var developer = AppStore.newAppVersionReleased.Developer\n  var category = AppStore.newAppVersionReleased.Category\n  var price = AppStore.newAppVersionReleased.Price\n  var rating = AppStore.newAppVersionReleased.Rating\n  var screenshot = AppStore.newAppVersionReleased.Screenshot\n  var icon = AppStore.newAppVersionReleased.Icon\n  var releaseNotes = AppStore.newAppVersionReleased.ReleaseNotes\n  var version = AppStore.newAppVersionReleased.Version\n  var createdAt = AppStore.newAppVersionReleased.CreatedAt\n  \n  // Set the notification message\n  var message = \"New app version released: \" + name + \". \" + description + \". Check it out at \" + appStoreUrl + \".\"\n  \n  // Send the notification with a customized message\n  IfNotifications.sendNotification.setMessage(message)\n}", "intent": "Check if the App Store has released a new version of the specified app, including its release notes. If so, send a notification with a customized message."}
{"original_description": "Why not create a Scenario to turn your heating on? Use Gideon to turn on your thermostat when the temperature drops below 21! ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 21) {\n  Gideon.launchScenario(\"Thermostat Turn On\", \"Turned on by IFTTT\")\n} else {\n  Gideon.launchScenario.skip(\"Temperature not low enough\")\n}", "intent": "Automate thermostat to turn on when temperature drops below 21 degrees Fahrenheit."}
{"original_description": "Runs every Monday. Save £52 in Week 1 of the year, £51 in Week 2 of the year, and so on!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var today = DateAndTime.everyWeekdayAt.CheckTime;\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek.toLowerCase();\nif (today.getDay() === 0 && dayOfWeek === \"monday\") {\n  var weekNumber = parseInt(today.format('w'));\n  var amount = 53 - weekNumber;\n  Monzo.potDeposit.setAmount((amount).toFixed(2));\n}", "intent": "The rule runs every Monday and saves a specific amount in Week 1 of the year, decreasing by £1 each subsequent week.", "filter_code_old": "var week_of_year = Meta.currentUserTime.format('w');\nvar week_number = parseInt(week_of_year); \nvar amount= (53-week_number);\nMonzo.potDeposit.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "Mute your Android phone.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && !AndroidDevice.muteDevice.skip()) {\n  try {\n    var vibrate = Knocki.knocki.CodeTextInputRegularExpression.match(/ Triple Knock /);\n    if (vibrate) AndroidDevice.muteDevice.setVibrate(vibrate);\n  } catch (e) { \n    AndroidDevice.muteDevice.skip(\"Failed to set vibration: \" + e); \n  }\n}", "intent": "Check if the Knocki gesture matches a specific pattern and it's not already muted, then mute the Android device."}
{"original_description": "When your compatible SmartThings sensor no longer detects your presence, the Nanoleaf Light Panels you identify is set to white and dimmed down to 30% brightness to save energy.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.ArrivedAt !== \"Present\") {\n  if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n    Nanoleaf.changeColorRequest.setValue(\"#FFFFFF\")\n      .setBrightness(30)\n      .skip(\"Not at home\");\n  }\n}", "intent": "When the SmartThings sensor no longer detects presence, set the Nanoleaf Light Panels to white and dimmed down to 30% brightness."}
{"original_description": "Cancels the StandBy Mode on the Heatmiser Thermostat of your choice, when Apilio triggers the action you specify", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Heatmiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatmiser.cancel_standby", "Filter code method": "Heatmiser.cancelStandby.skip(string?: reason)", "Runtime method": "runAction(\"heatmiser.cancel_standby\", {})"}, "action_details": [{"section": "Action fields", "title": "Which room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "which_room", "Required": "true", "Can have default value": "false"}}], "filter_code": "var createdAt = Apilio.iftttActionReports.CreatedAt;\nvar eventName = Apilio.iftttActionReports.EventName;\nif (createdAt.getHours() < 7 || createdAt.getHours() > 22) {\n  if (eventName === \"run_only_at_nighttime\" && Apilio.custom_value_1 === \"Green\" && Apilio.custom_value_2 === \"Blue\" && Apilio.custom_value_3 === \"Red\") {\n    Heatmiser.cancelStandby.skip(\"Outside of active hours\")\n  } else {\n    Heatmiser.cancelStandby()\n  }\n} else {\n  Heatmiser.cancelStandby.skip(\"Not during night time\")\n}", "intent": "This IFTTT automation cancels the StandBy Mode on a Heatmiser Thermostat when Apilio triggers an action. It uses various ingredients to check conditions and cancel the StandBy mode accordingly."}
{"original_description": "Launch into the weekend with a Friday roundup of NY Times reporting on \"NASA\", sent to your inbox. Get it?! 🚀", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var Day = Meta.currentUserTime.day()\nif (Day === 5) {\n  var Title = Nytimes.newArticleMatchingSearch.Title\n  var Author = Nytimes.newArticleMatchingSearch.Author\n  var Blurb = Nytimes.newArticleMatchingSearch.Blurb\n  var ArticleUrl = Nytimes.newArticleMatchingSearch.ArticleUrl\n  var ImageUrl = Nytimes.newArticleMatchingSearch.ImageUrl\n\n  EmailDigest.sendWeeklyEmail.setTitle(Title)\n  EmailDigest.sendWeeklyEmail.setAuthor(Author)\n  EmailDigest.sendWeeklyEmail.setBlurb(Blurb)\n  EmailDigest.sendWeeklyEmail.setArticleUrl(ArticleUrl)\n  EmailDigest.sendWeeklyEmail.setImageUrl(ImageUrl)\n\n  EmailDigest.sendWeeklyEmail.runAction()\n}", "intent": "Check if it's Friday, and if so, send a weekly email with the article title, author, blurb, and image URL to the user's inbox."}
{"original_description": "Toggles on or off the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CreatedAt = new Date(Apilio.iftttActionReports.CreatedAt)\nif (CreatedAt.getHours() > 20 || CreatedAt.getHours() < 6) {\n  if (ApilioValue1 === \"Green\") {\n    Hue.toggleAllHue({ \"lights\": [\"Living Room Light\", \"Kitchen Light\"] })\n  } else if (ApilioValue2 === \"Blue\") {\n    Hue.toggleAllHue({ \"lights\": [\"Bedroom Light\", \"Office Light\"] })\n  } else if (ApilioValue3 === \"Red\") {\n    Hue.toggleAllHue({ \"lights\": [\"Living Room Light\", \"Kitchen Light\", \"Bedroom Light\"] })\n  } else {\n    Hue.toggleAllHue.skip(\"No matching value detected\")\n  }\n} else {\n  Hue.toggleAllHue.skip(\"Outside of active hours\")\n}", "intent": "Toggle Philips Hue lights based on Apilio trigger and action."}
{"original_description": "Activates the StandBy Mode on the Heatmiser Thermostat of your choice, when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Heatmiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatmiser.set_standby", "Filter code method": "Heatmiser.setStandby.skip(string?: reason)", "Runtime method": "runAction(\"heatmiser.set_standby\", {})"}, "action_details": [{"section": "Action fields", "title": "Which room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "which_room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n  if (Apilio.iftttActionReports.ApilioValue1 === \"Green\" && Apilio.iftttActionReports.ApilioValue2 === \"Blue\" && Apilio.iftttActionReports.ApilioValue3 === \"Red\") {\n    Heatmiser.setStandby(\"Living Room\").skip(\"Not required for daytime\")\n  } else if (Apilio.iftttActionReports.ApilioValue1 !== \"Green\" || Apilio.iftttActionReports.ApilioValue2 !== \"Blue\" || Apilio.iftttActionReports.ApilioValue3 !== \"Red\") {\n    Heatmiser.setStandby(\"Living Room\").skip(\"Invalid values\")\n  } else {\n    Heatmiser.setStandby(\"Living Room\")\n  }\n}", "intent": "Sets up Heatmiser StandBy mode when Apilio triggers an action, based on specific conditions."}
{"original_description": "Receive \"I R\" (editable) when tomorrow's forecast calls for rain.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Xtactor", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "xtactor.vibrate", "Filter code method": "Xtactor.vibrate.skip(string?: reason)", "Runtime method": "runAction(\"xtactor.vibrate\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate message\nText input > Other", "description": "Text input > Other", "details": {"Label": "Vibration message", "Helper text": "The message that will play on the Xtactor.", "Slug": "vibrate_message", "Required": "true", "Can have default value": "true", "Filter code method": "Xtactor.vibrate.setVibrate Message(string: vibrate_message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") {\n  if (!Meta.currentUserTime.hour() < 7 || !Meta.currentUserTime.hour() > 22) {\n    // Check if it is outside of active hours\n    Xtactor.vibrate.skip(\"Outside of active hours\");\n  } else {\n    var VibrateMessage = \"I R\";\n    Xtactor.vibrate.setVibrateMessage(VibrateMessage);\n    Xtactor.vibrate.runAction();\n  }\n}", "intent": "Triggered when tomorrow's forecast calls for rain, send a customizable vibration message on Xtactor."}
{"original_description": "Enter a specific app's name or the link to its listing on the App Store and we'll add to the spreadsheet as soon as it releases a new update.", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_version_released"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppVersionReleased.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppVersionReleased.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppVersionReleased.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppVersionReleased.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppVersionReleased.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppVersionReleased.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppVersionReleased.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppVersionReleased.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppVersionReleased.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Release notes\nNotes about the new app release.", "description": "Notes about the new app release.", "details": {"Slug": "release_notes", "Filter code": "AppStore.newAppVersionReleased.ReleaseNotes", "Type": "String", "Example": "+ We made some improvements to..."}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppVersionReleased.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppVersionReleased.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (AppStore.newAppVersionReleased.Name) {\n  var formattedRow = \"|||Name: \" + AppStore.newAppVersionReleased.Name + \"|||Description: \" + AppStore.newAppVersionReleased.Description + \"|||App Store URL: \" + AppStore.newAppVersionReleased.AppStoreUrl + \"|||Developer: \" + AppStore.newAppVersionReleased.Developer + \"|||Category: \" + AppStore.newAppVersionReleased.Category + \"|||Price: \" + AppStore.newAppVersionReleased.Price + \"|||Rating: \" + AppStore.newAppVersionReleased.Rating + \"|||Screenshot: \" + AppStore.newAppVersionReleased.Screenshot + \"|||Icon: \" + AppStore.newAppVersionReleased.Icon + \"|||Release Notes: \" + AppStore.newAppVersionReleased.ReleaseNotes + \"|||Version: \" + AppStore.newAppVersionReleased.Version + \"|||Created at: \" + AppStore.newAppVersionReleased.CreatedAt;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"App Details\").setFormattedRow(formattedRow).run();\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No new app version released\");\n}", "intent": "If a new app version is released on Apple App Store, add its details to the spreadsheet."}
{"original_description": "Changes Hubitat's mode when you tap a button widget on your mobile device.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "var OccurredTime = new Date(DoButton.doButtonNewCommandCommon.OccurredAt)\nif (OccurredTime.getHours() >= 9 && OccurredTime.getHours() <= 17) {\n  Hubitat.actionMode(\"home\")\n} else {\n  Hubitat.actionMode.skip(\"Outside of working hours\")\n}", "intent": "When a button widget is pressed, check if the occurred time is between 9am and 5pm. If it is, set Hubitat's mode to 'Home' otherwise skip the action."}
{"original_description": "Want to make sure to keep up on your favorite articles and videos? Reward yourself with cash once you've archived them!", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_read_item_ril"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newReadItemRil.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newReadItemRil.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newReadItemRil.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newReadItemRil.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newReadItemRil.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newReadItemRil.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Goal = Qapital.getAvailableGoals()[0]\nvar Amount = 10 // default amount\nif (Pocket.newReadItemRil.Title !== \"\" && Pocket.newReadItemRil.Url !== \"\") {\n  Qapital.saveTowardGoal(Goal, Amount)\n} else {\n  Qapital.saveTowardGoal.skip(\"No title or URL provided\")\n}", "intent": "Automatically save a reward in Qapital when you archive an item in Pocket."}
{"original_description": "Fact Checker tries to uncover the truth behind the headlines. Turn on this Applet and every Monday morning you'll get their latest articles, so you can stay better informed. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() === 1) { // Check if today is Monday\n  if (Feed.newFeedItem.EntryTitle !== \"\") { // Check for new article\n    EmailDigest.sendWeeklyEmail.setTitle(\"New Articles from Fact Checker: \" + Feed.newFeedItem.EntryTitle)\n      .setDayOfWeek(Meta.currentUserTime.day())\n      .setMessage(\"Latest articles: <a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryTitle + \"</a>\")\n      .setUrl(Feed.newFeedItem.EntryUrl)\n      .send()\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No new articles found\")\n  }\n}", "intent": "This Applet checks if it's Monday and whether there are new articles from Fact Checker. If both conditions are met, it sends an email digest with the latest articles."}
{"original_description": "Start your week off right with an email full of Star Trek gifs sent to your inbox on Mondays. LLAP, y'all. 🖖", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "// Filter code to skip sending emails if it's not Monday\nif (Meta.currentUserTime.day() !== 1) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Monday\")\n}\n\n// Filter code for Giphy search and email content\nvar giphySearch = Giphy.search({\n  \"query\": \"Star Trek\",\n  \"image_url\": Giphy.search.ImageURL,\n  \"tumblr_image_url\": Giphy.search.TumblrImageURL,\n  \"email_html\": Giphy.search.EmailHTML,\n  \"embed_code\": Giphy.search.EmbedCode,\n  \"tags\": Giphy.search.Tags\n})\n\n// Filter code for email details\nvar title = \"Start your week off right with Star Trek\"\nvar message = giphySearch.email_html\n\n// Filter code for sending the weekly email\nEmailDigest.sendWeeklyEmail.setTitle(title)\nEmailDigest.sendWeeklyEmail.setMessage(message)", "intent": "Send an email with a Star Trek GIF on Mondays, based on the Giphy search results."}
{"original_description": "This Applet adds your text status updates as an entry in a Google drive spreadsheet. Look back on all your posts, and marvel at your productivity! ", "trigger_channel": "Facebook Pages", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "facebook_pages.new_status_message_by_page"}, "trigger_details": [{"section": "Ingredients", "title": "Page name\nYour Facebook Page's name.", "description": "Your Facebook Page's name.", "details": {"Slug": "PageName", "Filter code": "FacebookPages.newStatusMessageByPage.PageName", "Type": "String", "Example": "The ifttt Office"}}, {"section": "Ingredients", "title": "Message\nStatus message itself.", "description": "Status message itself.", "details": {"Slug": "Message", "Filter code": "FacebookPages.newStatusMessageByPage.Message", "Type": "String", "Example": "Is having an awesome time!"}}, {"section": "Ingredients", "title": "Updated at\nDate and time the status message was created.", "description": "Date and time the status message was created.", "details": {"Slug": "UpdatedAt", "Filter code": "FacebookPages.newStatusMessageByPage.UpdatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Page url\nThe link to the main Facebook page.", "description": "The link to the main Facebook page.", "details": {"Slug": "PageUrl", "Filter code": "FacebookPages.newStatusMessageByPage.PageUrl", "Type": "String", "Example": "http://www.facebook.com/pages/The-ifttt-office/108073145941483"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var PageName = FacebookPages.newStatusMessageByPage.PageName\nvar Message = FacebookPages.newStatusMessageByPage.Message\nvar UpdatedAt = FacebookPages.newStatusMessageByPage.UpdatedAt\nvar PageUrl = FacebookPages.newStatusMessageByPage.PageUrl\n\nif (GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename) === null) {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No spreadsheet found with the given filename\")\n} else {\n  var formatted_row = \"||| \" + PageName + \" ||| \" + Message + \" ||| \" + UpdatedAt + \" ||| \" + PageUrl\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formatted_row)\n}", "intent": "Add a new row to a Google Sheets spreadsheet with the text status update from Facebook Page."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights OFF.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iBT297 Smart Button\" && IhomeEnhance.enhanceButton.Press === \"Short or Long Press\") {\n  if (!Hue.turnOnAllHue(IhomeEnhance.enhanceButton.Time, \"Lights not scheduled to turn off\")) {\n    Hue.turnOnAllHue.skip(\"Lights already turned off\")\n  }\n}", "intent": "Automatically turn off Philips Hue lights when an iHome Enhance button press is detected."}
{"original_description": "Add your current location and time to a Google Drive spreadsheet by pressing the pusher on your Kronaby watch. (Make sure you enable \"Include location\" in the IFTTT trigger in the Kronaby app).", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "const filename = \"IFTTT\";\nconst formatted_row = `| ${Meta.currentUserTime.format(\"YYYY-MM-DD HH:mm:ss\")} | ${Kronaby.pusherPressed.Latitude} | ${Kronaby.pusherPressed.Longitude} |`;\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(filename).setFormattedRow(formatted_row);", "intent": "Triggered by a pusher press on the Kronaby watch, add current location and time to a Google Drive spreadsheet."}
{"original_description": "Tap a button on your mobile device to set the level of a Hubitat dimmer.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_set_level", "Filter code method": "Hubitat.actionSetLevel.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_set_level\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Level\nDropdown list", "description": "Dropdown list", "details": {"Label": "What level?", "Slug": "level", "Required": "true", "Can have default value": "true", "Filter code method": "Hubitat.actionSetLevel.setLevel(string: level)"}}, {"section": "Action fields", "title": "Rate\nText input > Other", "description": "Text input > Other", "details": {"Label": "What rate?", "Helper text": "The rate at which to change the dimming level.", "Slug": "rate", "Required": "false", "Can have default value": "true", "Filter code method": "Hubitat.actionSetLevel.setRate(string: rate)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL !== \"\") {\n  if (DoButton.doButtonNewCommandCommon.Latitude !== \"\" && DoButton.doButtonNewCommandCommon.Longitude !== \"\") {\n    // Extract relevant information from the button press\n    var ShareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\n    var Latitude = DoButton.doButtonNewCommandCommon.Latitude;\n    var Longitude = DoButton.doButtonNewCommandCommon.Longitude;\n    var LocationMapUrl = DoButton.doButtonNewCommandCommon.LocationMapURL;\n    var LocationMapImageUrl = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n    var OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt;\n    \n    // Check if rate is provided\n    var Rate = Hubitat.actionSetLevel.rate;\n    if (Rate !== undefined) {\n      // Set the level of the dimmer with a specified rate\n      Hubitat.actionSetLevel.setLevel(Hubitat.actionSetLevel.device, Hubitat.actionSetLevel.level, Rate);\n    } else {\n      // Set the level of the dimmer without specifying a rate\n      Hubitat.actionSetLevel.setLevel(Hubitat.actionSetLevel.device, Hubitat.actionSetLevel.level);\n    }\n  } else {\n    // Skip action if necessary latitude and longitude are not provided\n    Hubitat.actionSetLevel.skip(\"Missing location information\")\n  }\n} else {\n  // Skip action if share URL is empty\n  Hubitat.actionSetLevel.skip(\"Invalid button press\")\n}", "intent": "When a button on the mobile device is pressed, retrieve the share URL, latitude, longitude, location map URL, location map image URL, and occurred at date/time. Then, set the level of a Hubitat dimmer to a specified level."}
{"original_description": "Stay in the know on the go — get a notification to your mobile phone from the IFTTT app when you get a new entry to your JotForm.", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Jotform.latestFormSubmission.FormTitle !== \"\") {\n  IfNotifications.sendNotification.setMessage(\"New Form Submission: \" + Jotform.latestFormSubmission.FormTitle)\n} else {\n  IfNotifications.sendNotification.skip(\"No form title provided\")\n}\nIfNotifications.sendNotification.runAction()", "intent": "When a new entry is made to a JotForm, send a notification to the IFTTT mobile app with the form title and submission date."}
{"original_description": "Button applet used to disarm Blink system.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (!DoButton.doButtonNewCommandCommon.ShareURL) {\n  Blink.networkDisarm.skip(\"No share URL provided\")\n} else {\n  Blink.networkDisarm()\n}", "intent": "When a button applet is triggered, check if the Share URL ingredient is present. If it is not, skip the action. Otherwise, disarm the Blink network."}
{"original_description": "Disarm SkylinkNet with a press of button!", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.alarm", "Filter code method": "Skylinknet.alarm.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Hub?", "Slug": "hub_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Alarm\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Mode?", "Slug": "alarm", "Required": "true", "Can have default value": "true", "Filter code method": "Skylinknet.alarm.setAlarm(string: alarm)"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nif (ShareURL !== \"\") {\n  if (Latitude !== \"\") {\n    if (Longitude !== \"\") {\n      var LocationMapURL = \"https://maps.google.com/?ll=\" + Latitude + \",\" + Longitude + \"&z=21\"\n      var LocationMapImageURL = \"http://maps.google.com/maps/api/staticmap?center=\" + Latitude + \",\" + Longitude + \"&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red|\" + Latitude + \",\" + Longitude\n      if (LocationMapURL !== \"\") {\n        if (LocationMapImageURL !== \"\") {\n          var OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n          if (OccurredAt !== \"\") {\n            Skylinknet.alarm.setAlarm(\" disarm\")\n            // Disarm SkyLinkNet with a press of the button!\n          } else {\n            Skylinknet.alarm.skip(\"No occurrence time found\")\n          }\n        } else {\n          Skylinknet.alarm.skip(\"No location map image URL found\")\n        }\n      } else {\n        Skylinknet.alarm.skip(\"No location map URL found\")\n      }\n    } else {\n      Skylinknet.alarm.skip(\"No longitude found\")\n    }\n  } else {\n    Skylinknet.alarm.skip(\"No latitude found\")\n  }\n} else {\n  Skylinknet.alarm.skip(\"No share URL found\")\n}", "intent": "Disarming SkyLinkNet with a press of the button."}
{"original_description": "With this Applet, you'll always know where to eat and what to do!", "trigger_channel": "Yelp", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "yelp.hot_and_new_business"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Business in an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sort by\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sort by", "Slug": "sort_by", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Business\nUnique Yelp ID of this business", "description": "Unique Yelp ID of this business", "details": {"Slug": "business_id", "Filter code": "Yelp.hotAndNewBusiness.BusinessId", "Type": "String", "Example": "lJAGnYzku5zSaLnQ_T6_GQ"}}, {"section": "Ingredients", "title": "Business name\nName of the business.", "description": "Name of the business.", "details": {"Slug": "business_name", "Filter code": "Yelp.hotAndNewBusiness.BusinessName", "Type": "String", "Example": "Brenda's French Soul Food"}}, {"section": "Ingredients", "title": "Business category\nList of category titles associated with the business.", "description": "List of category titles associated with the business.", "details": {"Slug": "business_category", "Filter code": "Yelp.hotAndNewBusiness.BusinessCategory", "Type": "String", "Example": "Breakfast & Brunch, Southern, Cajun/Creole"}}, {"section": "Ingredients", "title": "Business image url\nPhoto for this business.", "description": "Photo for this business.", "details": {"Slug": "business_image_url", "Filter code": "Yelp.hotAndNewBusiness.BusinessImageUrl", "Type": "Image URL", "Example": "https://s3-media3.fl.yelpcdn.com/bphoto/sNIJnePGDenUOyewsD8tLg/o.jpg"}}, {"section": "Ingredients", "title": "Business phone\nPhone number of the business.", "description": "Phone number of the business.", "details": {"Slug": "business_phone", "Filter code": "Yelp.hotAndNewBusiness.BusinessPhone", "Type": "String", "Example": "+14153458100"}}, {"section": "Ingredients", "title": "Business address\nLocation of this business", "description": "Location of this business", "details": {"Slug": "business_address", "Filter code": "Yelp.hotAndNewBusiness.BusinessAddress", "Type": "String", "Example": "652 Polk St, San Francisco, CA 94102"}}, {"section": "Ingredients", "title": "Business rating\nRating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "description": "Rating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "details": {"Slug": "business_rating", "Filter code": "Yelp.hotAndNewBusiness.BusinessRating", "Type": "String", "Example": "4.0"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "// Check if the trigger has data\nif (Yelp.hotAndNewBusiness.BusinessId) {\n  // Set the title of the email digest based on the business name\n  EmailDigest.sendWeeklyEmail.setTitle(Brenda's French Soul Food);\n  \n  // Set the message to include the business category and rating\n  var message = \"New Business: \" + Yelp.hotAndNewBusiness.BusinessCategory + \", Rating: \" + Yelp.hotAndNewBusiness.BusinessRating;\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  \n  // Set the URL of the email digest to the business's Yelp page\n  if (Yelp.hotAndNewBusiness.BusinessImageUrl) {\n    var url = \"https://www.yelp.com/biz/\" + Yelp.hotAndNewBusiness.BusinessId;\n    EmailDigest.sendWeeklyEmail.setUrl(url);\n  }\n  \n  // Skip sending the email if it is not Monday or Tuesday\n  var dayOfTheWeek = Meta.currentUserTime.day();\n  if (dayOfTheWeek !== 1 && dayOfTheWeek !== 2) {\n    EmailDigest.sendWeeklyEmail.skip(\"Not a Monday or Tuesday\");\n  }\n}", "intent": "This Applet will trigger when a new business is added to Yelp and send an email digest with relevant information about the business."}
{"original_description": "When your August lock is unlocked, your Blink System is disarmed", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": "When August lock is unlocked, disarmed Blink System."}
{"original_description": "Get the daily weather sent to Discord. This Applet returns results in Celcius.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Discord", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "discord.post_message_to_channel", "Filter code method": "Discord.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"discord.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which Channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Helper text": "Max limit of 2000 characters. To @mention roles, find the role ID in Discord by running `\\@role`. Ex. 'Hello &lt;@&amp;1234&gt;'", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Allowable mentions\nDropdown list", "description": "Dropdown list", "details": {"Label": "Allowable mentions", "Helper text": "Allows usage of @everyone, &lt;@&amp;(Role ID)&gt;, and &lt;@(User ID)&gt; in the message body", "Slug": "allowable_mentions", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setAllowable Mentions(string: allowable_mentions)"}}], "filter_code": "if (Weather.currentWeatherAtTime.CurrentCondition !== \"Rain\" && Weather.currentWeatherAtTime.CheckTime > Meta.currentUserTime.hour() + 6 && Weather.currentWeatherAtTime.CheckTime < Meta.currentUserTime.hour() + 22) {\n  Discord.postMessageToChannel(\"Current weather in \" + Weather.location + \": \" + Weather.currentTempCelsius + \"\\u00B0C, with a high of \" + Weather.highTempCelsius + \"\\u00B0C and low of \" + Weather.lowTempCelsius + \"\\u00B0C. Condition: \" + Weather.currentCondition, {channel_id: \"your_channel_id\", allowable_mentions: \"true\"})\n} else {\n  Discord.postMessageToChannel.skip(\"Weather is either rainy or outside the active hours\")\n}", "intent": "This Applet will send the daily weather to Discord in Celsius."}
{"original_description": "Every time you send an email to trigger@applet.ifttt.com from your IFTTT associated email address, the body of that email is forwarded to your IntuiFace experiences.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Intuiface", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "intuiface.sendMessage", "Filter code method": "Intuiface.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"intuiface.sendMessage\", {})"}, "action_details": [{"section": "Action fields", "title": "Api key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Credential key", "Helper text": "To get your key, go to the <a href=\"https://myintuiface.intuilab.com/credentialkeys?scope=IFTTT_Webtriggers\" target=\"_blank\">Credential keys page</a> then paste the generated key here.", "Slug": "api_key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Msg\nText input > Other", "description": "Text input > Other", "details": {"Label": "Message", "Helper text": "Value to send to all selected experiences. For details , go to the <a href=\"http://support.intuilab.com/kb/web-triggers/web-triggers-overview\" target=\"_blank\">Web Triggers Interface Asset page</a>.", "Slug": "msg", "Required": "true", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setMsg(string: msg)"}}, {"section": "Action fields", "title": "P1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 1", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p1", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP1(string: p1)"}}, {"section": "Action fields", "title": "P2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 2", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p2", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP2(string: p2)"}}, {"section": "Action fields", "title": "P3\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 3", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p3", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP3(string: p3)"}}, {"section": "Action fields", "title": "Xpnames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Experience name(s)", "Helper text": "Optional: Select experience(s) based on their name(s). For multiple experiences, use a comma separated list.", "Slug": "xpNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setXp Names(string: xpNames)"}}, {"section": "Action fields", "title": "Devicenames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player name(s)", "Helper text": "Optional: Select Player(s) based on their device name(s). For multiple Players, use a comma separated list.", "Slug": "deviceNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setDevice Names(string: deviceNames)"}}, {"section": "Action fields", "title": "Tags\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player tag(s)", "Helper text": "Optional: Select Player(s) based on their tag(s). For multiple tags, use a comma separated list. Players with one or more matching tags will be selected.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setTags(string: tags)"}}], "filter_code": "var EmailBody = Email.sendIftttAnEmailTagged.Body\nif (EmailBody) {\n  var ApiKey = \"your_api_key_here\"\n  var Msg = \"Been having a good day so far...\"\n  // Optional: Additional values that can be sent to all selected experiences.\n  var P1 = \"\"\n  var P2 = \"\"\n  var P3 = \"\"\n  var XpNames = \"\"\n  var DeviceNames = \"\"\n  var Tags = \"\"\n\n  Intuiface.sendMessage.setApiKey(ApiKey)\n  Intuiface.sendMessage.setMsg(Msg)\n  if (P1) { Intuiface.sendMessage.setP1(P1) }\n  if (P2) { Intuiface.sendMessage.setP2(P2) }\n  if (P3) { Intuiface.sendMessage.setP3(P3) }\n  if (XpNames) { Intuiface.sendMessage.setXpNames(XpNames.split(\",\")) }\n  if (DeviceNames) { Intuiface.sendMessage.setDeviceNames(DeviceNames.split(\",\")) }\n  if (Tags) { Intuiface.sendMessage.setTags(Tags.split(\",\")) }\n\n  Intuiface.sendMessage.runAction()\n} else {\n  Intuiface.sendMessage.skip(\"No email body found\")\n}", "intent": "When an email is sent to trigger@applet.ifttt.com, forward the body of that email to IntuiFace experiences."}
{"original_description": "Every time a motion is detected by Aura, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Aura", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "aura.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your hub", "Helper text": "The serial number is located at the back of your hub", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Aura.motion.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Check if there's a motion event\nif (Aura.motion !== null) {\n  // Create a new Signal\n  var signal = {};\n  \n  // Set the name of the Signal\n  signal.name = Aura.motion.serial;\n  \n  // Set the zone of the Signal\n  signal.zone = Aura.motion.zone;\n  \n  // Set the color of the Signal\n  signal.color = Aura.motion.color;\n  \n  // Set the message of the Signal (if provided)\n  if (Aura.motion.message) {\n    signal.message = Aura.motion.message;\n  }\n  \n  // Set the effect of the Signal (if provided)\n  if (Aura.motion.effect) {\n    signal.effect = Aura.motion.effect;\n  }\n  \n  // Set the device of the Signal\n  signal.device = Aura.motion.device;\n  \n  // Send the Signal to Das Keyboard Q\n  try {\n    Daskeyboardq.signals.send(signal);\n  } catch (error) {\n    // If there's an error, skip sending the Signal\n    Daskeyboardq.signals.skip(error.toString());\n  }\n}", "intent": "When a motion is detected by Aura, send a Signal to your Das Keyboard Q with specified details."}
{"original_description": "Turn off air conditioner and set thermostat when outside temperature falls below 34°F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 34) {\n  FujitsuGeneralLimited.setOperModeAndTemp({\n    dsn: \"DSN\",\n    operation_mode: \"OFF\",\n    adjust_temperature: \"64\"\n  }).skip(\"Outside temperature is above 34°F\")\n}", "intent": "Turn off air conditioner and set thermostat when outside temperature falls below 34°F."}
{"original_description": "Turn on air conditioner to heat and set thermostat when outside temperature rises above 40°F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Temperature = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (Temperature >= 40) {\n  FujitsuGeneralLimited.setOperModeAndTemp({\n    dsn: \"Your Air Conditioner Name\",\n    operation_mode: \"Heating\",\n    adjust_temperature: \"64F\" // Default temperature to set\n  })\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Temperature is below 40°F\")\n}", "intent": "Turn on air conditioner to heat and set thermostat when outside temperature rises above 40°F."}
{"original_description": "This applet changes your setpoint temperature on your Honeywell thermostat while activating a routine in Niko Home Control", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Honeywell Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_lyric.setsystemtemperature", "Filter code method": "HoneywellLyric.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_lyric.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "Select a thermostat", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "Enter 'heat' or 'cool' or an ingredient from a trigger, for heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Type(string: temperature_type)"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Enter a temperature in degrees (such as 71) or an ingredient from a trigger", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature scale", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}], "filter_code": "var routine = Nikohomecontrol.routineActivated.Routine\nvar createdAt = Nikohomecontrol.routineActivated.CreatedAt\nif (routine === \"Party\" && createdAt.getHours() >= 6 && createdAt.getHours() < 22) {\n  var targetTemperature = \"71\"\n  var temperatureType = \"heat\"\n  HoneywellLyric.setsystemtemperature(temperatureType, targetTemperature)\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"Outside of active hours\")\n}", "intent": "This applet changes the setpoint temperature on a Honeywell thermostat when a routine is activated in Niko Home Control, using the selected routine and target temperature."}
{"original_description": "Going away for the weekend? Want to make sure to not waste unnecessary energy? Press your Kronaby pusher to set the Nest thermostat at the desired \"away\" temperature. ", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Kronaby.pusherPressed.PressedAt.getDay() === 6 || Kronaby.pusherPressed.PressedAt.getDay() === 0) {  \n  var currentTemperature = GoogleNestThermostat.getHotTemperature()\n  if (currentTemperature !== \"away\") {\n    GoogleNestThermostat.setHotTemperature(\"away\")\n  }\n} else {\n  // Nothing to do\n}", "intent": "When Kronaby's pusher is pressed, set Nest thermostat to away temperature if it is not already a weekend."}
{"original_description": "Define the light level in lux, when this condition is reached,  turn of my Philips Hue lights. ", "trigger_channel": "UbiBot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ubibot.light"}, "trigger_details": [{"section": "Trigger fields", "title": "Channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Channel ID", "Helper text": "Select a Channel from your account", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "Light level condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Value", "Helper text": "Light level in lux", "Slug": "value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Ubibot.light.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Value\nLight Reading in lux", "description": "Light Reading in lux", "details": {"Slug": "value", "Filter code": "Ubibot.light.Value", "Type": "String", "Example": "500"}}, {"section": "Ingredients", "title": "Channel\nChannel ID", "description": "Channel ID", "details": {"Slug": "channel_id", "Filter code": "Ubibot.light.ChannelId", "Type": "String", "Example": "1510"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var LightLevel = Ubibot.light.Value;\nif (LightLevel >= parseInt(Ubibot.trigger_details[1].details.value)) {\n  Hue.turnOnAllHue.skip(\"No action required - light level not high enough\");\n} else {\n  Hue.turnOnAllHue();\n}", "intent": "Define light level in lux when this condition is reached, turn off my Philips Hue lights."}
{"original_description": "This app allows you to define time windows in which your alarm areas are switched on or off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.areas_on", "Filter code method": "Instar.areasOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.areas_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Area1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 1", "Helper text": "This is to set area 1 to be active or inactive", "Slug": "area1", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea1(string: area1)"}}, {"section": "Action fields", "title": "Area2\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 2", "Helper text": "This is to set area 2 to be active or inactive", "Slug": "area2", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea2(string: area2)"}}, {"section": "Action fields", "title": "Area3\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 3", "Helper text": "This is to set area 3 to be active or inactive", "Slug": "area3", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea3(string: area3)"}}, {"section": "Action fields", "title": "Area4\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 4", "Helper text": "This is to set area 4 to be active or inactive", "Slug": "area4", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea4(string: area4)"}}], "filter_code": "// Get the current time\nvar currentTime = DateAndTime.everyDayAt.CheckTime;\nif (currentTime >= \"06:00\" && currentTime <= \"07:59\") {\n  // Time window for switching area1, area2, area3, and area4 on\n  Instar.areasOn();\n} else if (currentTime >= \"08:00\" && currentTime <= \"17:59\") {\n  // Time window for keeping areas active\n  Instar.areasOn.skip(\"Time window not applicable\");\n} else {\n  // Time window for switching areas off\n  Instar.areasOn.skip(\"Outside of allowed time window\");\n}", "intent": "This automation checks the time of day and switches the alarm areas on or off accordingly."}
{"original_description": "If Netatmo weather station reports rain amount for yesterday exceeding 5mm (0.2inch), do not water my yard for today.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-yesterday-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainYesterdayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if(parseFloat(Netatmo.rainYesterdayAmount.MeasuredRainfallMM) > 5) {\n  Netro.water.skip(\"Excessive rain reported\")\n}", "intent": "Check if Netatmo weather station reports rain amount for yesterday exceeding 5mm (0.2inch), then skip watering my yard today.", "filter_code_old": "if(parseFloat(Netatmo.rainYesterdayAmount.MeasuredRainfallMM)<5){\n  Netro.noWater.skip()\n}\n\n"}
{"original_description": " If Netatmo weather station reports freezing temperature, do not water my yard for today.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Netatmo.temperatureDropsBelow.MeasuredTemperatureC <= parseFloat(Netatmo.temperatureDropsBelow.threshold_value) && Netatmo.temperatureDropsBelow.target_temperature_c === \"\") {\n  Netro.water.skip(\"Freezing temperature detected\");\n}", "intent": "If Netatmo weather station reports a freezing temperature, do not water my yard today."}
{"original_description": "If Weather Underground reports freezing temperature, do not water my yard for today. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.temp_fahrenheit < 32) {\n  Netro.water.skip(\"Freezing temperature reported\")\n} else {\n  // No need to water\n}", "intent": "Check if Weather Underground reports a freezing temperature, and if so, skip watering my yard for today."}
{"original_description": "Water yard on fixed time everyday. You could customize days of week, specific the zone to water, and also watering minutes. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime\nif (DateAndTime.everyWeekdayAt.DayOfWeek !== 'Sunday' && DateAndTime.everyWeekdayAt.DayOfWeek !== 'Saturday') {\n  if (Time >= \"08:00\" && Time <= \"18:00\") {\n    var device = // Get the selected device from the action fields\n    var zone = // Get the selected zone from the action fields or default to all zones\n    var duration = // Get the selected duration from the action fields\n    var startTime = // Get the start time from the action fields or use the current time if empty\n    Netro.water(device, zone, duration, startTime)\n  } else {\n    Netro.water.skip(\"Outside of watering hours\")\n  }\n} else {\n  Netro.water.skip(\"Weekend - automation disabled\")\n}", "intent": "This rule checks if it is a weekday and if it's time to water the yard. If both conditions are met, it triggers the Netro watering action."}
{"original_description": "Water your yard on fixed time on each hour. You could specific the zone to water, watering minutes. This is typically used for new plants. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "// Check if it's the specified time\nvar CheckTime = DateAndTime.everyHourAt.CheckTime;\nif (CheckTime === \"now\") {\n  // Get user input for zone, duration, and start time\n  var device = Netro.water.getDevice(); // Assuming default value\n  var zone = (action_details[1].details.Label !== \"\") ? action_details[1].details.Label : \"\";\n  var duration = action_details[2].details.Label;\n  var start_time = (action_details[3].details.Label !== \"\") ? action_details[3].details.Label : \"now\";\n  \n  // Water the yard\n  Netro.water(device, zone, duration);\n} else {\n  Netro.water.skip(\"Not yet\");\n}", "intent": "This automation checks every hour and waters the yard at a specific time based on user input. The user can specify the zone, watering minutes, and start time."}
{"original_description": "Buzzfeed's upped their political reporting — stay informed by getting their pieces sent straight to your inbox. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle.includes(\"Buzzfeed\")) {\n  Email.sendMeEmail.setSubject(\"New Buzzfeed article: \" + Feed.newFeedItem.EntryTitle).setBody(Feed.newFeedItem.EntryContent).skip();\n} else {\n  Email.sendMeEmail.skip(\"Not a Buzzfeed article\");\n}", "intent": "Check if the received RSS feed item's title matches a certain keyword, then send an email with the subject and body containing that title."}
{"original_description": "This Applet changes the color of your Hue lights when a new episode of IoT Podcast is published.", "trigger_channel": "IoT Podcast", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "iot_podcast.new_iot_podcast_episode"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryTitle", "Type": "String", "Example": "Episode 110: IKEA’s smart home plans and will you buy an Amazon Look?"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qBVDO7"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryContent", "Type": "String", "Example": "This week we discuss Apple’s plans to introduce Siri in a can, Amazon’s Style maven ambitions and a few other items on the personal assistant front..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry.", "description": "URL for the first image in the entry.", "details": {"Slug": "EntryImageUrl", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryImageUrl", "Type": "String", "Example": "http://ift.tt/2q1tBib"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "// Get the entry title\nvar EntryTitle = IotPodcast.newIotPodcastEpisode.EntryTitle;\n// Check if the entry has a valid color value or name\nif (!EntryImageUrl || !EntryContent) {\n  Hue.setColorAllHue.skip(\"No image or content found\");\n} else {\n  // Set the color of all lights to the specified color\n  var ColorValue = EntryTitle.replace(/[^\\w\\s]/gi, ''); // Remove non-word characters and spaces\n  if (ColorValue.toLowerCase() === \"blue\") {\n    Hue.setColorAllHue.setColor(\"Blue\");\n  } else if (ColorValue.toLowerCase() === \"green\") {\n    Hue.setColorAllHue.setColor(\"Green\");\n  } else if (ColorValue.toLowerCase() === \"red\") {\n    Hue.setColorAllHue.setColor(\"Red\");\n  } else {\n    // Default to a random color\n    Hue.setColorAllHue.setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n  }\n}", "intent": "Changes the color of Philips Hue lights when a new episode of IoT Podcast is published."}
{"original_description": "Automatically save your photos to a folder. Keep in mind, it only works for new photos you post.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "var Url = Instagram.anyNewPhotoByYou.Url;\nif (Url) {\n  var filename = Instagram.anyNewPhotoByYou.Caption.replace(/\\s+/g, \"_\");\n  Dropbox.addFileFromUrl.skip(\"No file provided\")\n    .setUrl(Url)\n    .setFilename(filename)\n    .setPath(\"IFTTT\");\n} else {\n  Dropbox.addFileFromUrl.skip(\"No new photo available\")\n}", "intent": "Automatically save new Instagram photos to a folder in Dropbox."}
{"original_description": "Automatically save your photos to a folder. Keep in mind, it only works for new photos you post.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "var Caption = Instagram.anyNewPhotoByYou.Caption\nvar Url = Instagram.anyNewPhotoByYou.Url\nvar SourceUrl = Instagram.anyNewPhotoByYou.SourceUrl\nvar CreatedAt = Instagram.anyNewPhotoByYou.CreatedAt\nvar EmbedCode = Instagram.anyNewPhotoByYou.EmbedCode\n\nif (Url !== undefined && Url !== \"\") {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Url)\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"No URL provided\")\n}\n\nif (SourceUrl !== undefined && SourceUrl !== \"\") {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setSourceUrl(SourceUrl)\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"No source URL provided\")\n}\n\n// Set the file name\nvar filename = \"Instagram_photo_\" + CreatedAt\nGoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(filename)\n\n// Set the path to a folder in Google Drive\nvar path = \"IFTTT\" // default path is \"IFTTT\"\nGoogleDrive.uploadFileFromUrlGoogleDrive.setPath(path)\n\n// Upload file\nGoogleDrive.uploadFileFromUrlGoogleDrive.run()", "intent": "Automatically save new Instagram photos to a Google Drive folder."}
{"original_description": "Choose a time and get detailed info about today's weather in Telegram, come rain or shine.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var time = Weather.currentWeatherAtTime.time;\nif (time.getHours() < 7 || time.getHours() > 22) {\n  // Outside of active hours\n  Telegram.sendMessage.skip(\"Outside of active hours\")\n} else {\n  var message = \"Today's weather in your location:\\n\" + \n    \"Sunrise: \" + Weather.currentWeatherAtTime.SunriseAt + \"\\n\" +\n    \"Sunset: \" + Weather.currentWeatherAtTime.SunsetAt + \"\\n\" +\n    \"Current temp (F): \" + Weather.currentWeatherAtTime.CurrentTempFahrenheit + \"\\n\" +\n    \"Current condition: \" + Weather.currentWeatherAtTime.CurrentCondition + \"\\n\" +\n    \"High temp (F): \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"\\n\" +\n    \"Low temp (F): \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"\\n\" +\n    \"UV index: \" + Weather.currentWeatherAtTime.UvIndex + \"\\n\" +\n    \"Humidity: \" + Weather.currentWeatherAtTime.Humidity + \"%\" + \"\\n\" +\n    \"Wind speed (mph): \" + Weather.currentWeatherAtTime.WindSpeedMph + \"\\n\" +\n    \"Pollen count: \" + Weather.currentWeatherAtTime.PollenCount\n  Telegram.sendMessage.setText(message)\n}", "intent": "Choose a time and get detailed info about today's weather in Telegram, come rain or shine."}
{"original_description": "A soundtrack for your next coffee break? Not a problem – with this applet you’ll set the theme just in time for the first sip.", "trigger_channel": "Home Connect Coffee Machine", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_begins"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Active program\nName of the active program.", "description": "Name of the active program.", "details": {"Slug": "active_program", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.ActiveProgram", "Type": "String", "Example": "Espresso"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var Favorite = HcCoffeeMachine.coffeeMakerBegins.ActiveProgram\nif (Favorite === \"Espresso\") {\n  var Room = // Get the value of the room dropdown list\n  Sonos.playFavorite(Room, {\"include_grouped_rooms\": true})\n} else {\n  Sonos.playFavorite.skip(\"Not a favorite playlist\")\n}", "intent": "When the coffee machine begins brewing, check if it's a favorite playlist. If yes, play it on Sonos in the selected room and set the option to include grouped rooms."}
{"original_description": "If it's raining outside, you'll want change colors inside!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.ChangeColor", "Filter code method": "Magichue.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"magichue.ChangeColor\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Magichue.changeColor(\"0x6495ED\", \"It's raining outside\")\n}", "intent": "If it's raining outside, change the color inside to a calming blue."}
{"original_description": "Whenever it starts raining, automatically close your garage door to help keep everything dry.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garageio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garageio.close_garage_door", "Filter code method": "Garageio.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"garageio.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Garageio.closeGarageDoor(\"Closing due to rain\")\n} else {\n  Garageio.closeGarageDoor.skip(\"No rain detected\")\n}", "intent": "Automatically close the garage door when it starts raining."}
{"original_description": "Send the email to trigger@applet.ifttt.com and add the URL of the transfer to the body of the message.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "put.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "putio.new_transfer", "Filter code method": "Putio.newTransfer.skip(string?: reason)", "Runtime method": "runAction(\"putio.new_transfer\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Other", "description": "Text input > Other", "details": {"Label": "What URL?", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Putio.newTransfer.setUrl(string: url)"}}, {"section": "Action fields", "title": "Folder\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which folder ID?", "Helper text": "File will be downloaded into this folder. Folder ID can be found in the address bar when the folder is open in your browser. If the folder with given ID does not exist, the files will be downloaded into your default download folder.", "Slug": "folder_id", "Required": "false", "Can have default value": "true"}}], "filter_code": "function filterCode() {\n  if (Email.sendIftttAnEmailTagged.From) {\n    var url = Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl;\n    Putio.newTransfer.setUrl(url);\n    Putio.newTransfer.runAction();\n  } else {\n    Putio.newTransfer.skip(\"No attachment found\");\n  }\n}", "intent": "Send an email to trigger@applet.ifttt.com with a URL of the transfer in the body."}
{"original_description": "Use RainMachine and WUnderground IFTTT services to start a zone with the desired amount of time when the outside temperature rises above the value you provide.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.start_zone", "Filter code method": "RainMachine.startZone.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.start_zone\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone number?", "Helper text": "The gardening zone number", "Slug": "zone_number", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Time\nDropdown list", "description": "Dropdown list", "details": {"Label": "For how long?", "Helper text": "Duration in minutes.", "Slug": "time", "Required": "true", "Can have default value": "false"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (tempFahrenheit > parseInt(Temperature)) {\n  var zoneNumber = Zone_number\n  var time = Time\n  RainMachine.startZone(zoneNumber, time)\n} else {\n  RainMachine.startZone.skip(\"Temperature is not above threshold\")\n}", "intent": "Start RainMachine zone when outside temperature rises above a certain value, with specified duration."}
{"original_description": "Start my Moodo with my chosen fragrance in the morning when I get up.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Moodo & Moodo AIR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moodo.box_start", "Filter code method": "Moodo.boxStart.skip(string?: reason)", "Runtime method": "runAction(\"moodo.box_start\", {})"}, "action_details": [{"section": "Action fields", "title": "Box\nDropdown list", "description": "Dropdown list", "details": {"Label": "Moodo device name", "Slug": "box", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "Favorite name", "Slug": "favorite", "Required": "false", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time >= \"06:00\" && Time <= \"08:00\") {\n  if (box === \"\" || favorite === \"\") {\n    Moodo.boxStart.skip(\"No box or favorite selected\")\n  } else {\n    Moodo.boxStart(box, favorite)\n  }\n} else {\n  Moodo.boxStart.skip(\"Time is not between 06:00 and 08:00\")\n}", "intent": "Start the Moodo box with a chosen fragrance at a specific time every day."}
{"original_description": "15 minutes before each event in a specified Google calendar, event details are forwarded to your IntuiFace experiences.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Intuiface", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "intuiface.sendMessage", "Filter code method": "Intuiface.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"intuiface.sendMessage\", {})"}, "action_details": [{"section": "Action fields", "title": "Api key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Credential key", "Helper text": "To get your key, go to the <a href=\"https://myintuiface.intuilab.com/credentialkeys?scope=IFTTT_Webtriggers\" target=\"_blank\">Credential keys page</a> then paste the generated key here.", "Slug": "api_key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Msg\nText input > Other", "description": "Text input > Other", "details": {"Label": "Message", "Helper text": "Value to send to all selected experiences. For details , go to the <a href=\"http://support.intuilab.com/kb/web-triggers/web-triggers-overview\" target=\"_blank\">Web Triggers Interface Asset page</a>.", "Slug": "msg", "Required": "true", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setMsg(string: msg)"}}, {"section": "Action fields", "title": "P1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 1", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p1", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP1(string: p1)"}}, {"section": "Action fields", "title": "P2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 2", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p2", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP2(string: p2)"}}, {"section": "Action fields", "title": "P3\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 3", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p3", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP3(string: p3)"}}, {"section": "Action fields", "title": "Xpnames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Experience name(s)", "Helper text": "Optional: Select experience(s) based on their name(s). For multiple experiences, use a comma separated list.", "Slug": "xpNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setXp Names(string: xpNames)"}}, {"section": "Action fields", "title": "Devicenames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player name(s)", "Helper text": "Optional: Select Player(s) based on their device name(s). For multiple Players, use a comma separated list.", "Slug": "deviceNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setDevice Names(string: deviceNames)"}}, {"section": "Action fields", "title": "Tags\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player tag(s)", "Helper text": "Optional: Select Player(s) based on their tag(s). For multiple tags, use a comma separated list. Players with one or more matching tags will be selected.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setTags(string: tags)"}}], "filter_code": "var offsetMinutes = parseInt(trigger.offset) * 60;\nvar eventStarts = new Date(trigger.Starts);\nvar now = new Date();\nif (now.getTime() - eventStarts.getTime() <= offsetMinutes * 60000) {\n  var title = GoogleCalendar.anyEventStarts.Title;\n  var msg = \"Event: \" + title + \"\\n\" + \"Description: \" + GoogleCalendar.anyEventStarts.Description + \"\\n\" + \"Location: \" + GoogleCalendar.anyEventStarts.Where + \"\\n\" + \"Starts: \" + eventStarts.toISOString() + \"\\n\" + \"Ends: \" + GoogleCalendar.anyEventStarts.Ends;\n  Intuiface.sendMessage.setApi_key(api_key).setMsg(msg).skip(\"Not enough time before the event starts\");\n} else {\n  Intuiface.sendMessage.setApi_key(api_key).setMsg(msg);\n}", "intent": "Triggered by a Google Calendar event, this IFTTT automation sends event details to IntuiFace experiences 15 minutes before each event starts."}
{"original_description": "You'll hear a reminder in your Orion group fifteen minutes before the next event in your calendar starts.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "if (trigger.calendar === \"Your Calendar\" && trigger.offset === \"15\") {\n  var offsetMinutes = parseInt(trigger.offset) * 60;\n  var startDateTime = new Date(trigger.starts);\n  var reminderTime = new Date(startDateTime.getTime() - offsetMinutes * 60000);\n  \n  if (new Date() > reminderTime) {\n    Orion.sendVoiceMessage.skip(\"Too late to send reminder\");\n  } else {\n    Orion.sendVoiceMessage.setMessage(\"Reminder: \" + trigger.title);\n    Orion.sendVoiceMessage.runAction({\"group\": \"Your Group\", \"user\": \"You\", \"message\": trigger.title});\n  }\n}", "intent": "Reminds you of an upcoming event in your calendar and plays a voice message 15 minutes before it starts."}
{"original_description": "This is an applet that starts a scenario in WeBeHome based on a Button widget", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeBeHome - Security and Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "webehome.start_scenario", "Filter code method": "Webehome.startScenario.skip(string?: reason)", "Runtime method": "runAction(\"webehome.start_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Actionid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select scenario to be started", "Slug": "actionid", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.OccurredAt) {\n  var actionid = \"Select scenario to be started\";\n  if (actionid === \"\") {\n    Webehome.startScenario.skip(\"No action selected\")\n  } else {\n    Webehome.startScenario(actionid)\n  }\n}", "intent": "This applet starts a WeBeHome scenario when the Button widget is pressed."}
{"original_description": "Start the Neato after a Litter-Robot Clean Cycle completes", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Neato", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "neato.start_cleaning", "Filter code method": "Neato.startCleaning.skip(string?: reason)", "Runtime method": "runAction(\"neato.start_cleaning\", {})"}, "action_details": [{"section": "Action fields", "title": "Select a robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a robot", "Slug": "select_a_robot", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.Event === 'clean_cycle_completed') {\n  if (Neato.selectRobot() !== null) {\n    try {\n      Neato.startCleaning();\n    } catch (error) {\n      console.error(error);\n      Neato.startCleaning.skip('Error starting cleaning: ' + error.message);\n    }\n  } else {\n    Neato.startCleaning.skip('No robot selected');\n  }\n}", "intent": "Trigger an action to start the Neato cleaning cycle when a Litter-Robot clean cycle completes."}
{"original_description": "Start my Moodo with my chosen fragrance before bedtime.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Moodo & Moodo AIR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moodo.box_start", "Filter code method": "Moodo.boxStart.skip(string?: reason)", "Runtime method": "runAction(\"moodo.box_start\", {})"}, "action_details": [{"section": "Action fields", "title": "Box\nDropdown list", "description": "Dropdown list", "details": {"Label": "Moodo device name", "Slug": "box", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "Favorite name", "Slug": "favorite", "Required": "false", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time.includes(\"PM\") && parseInt(Time.split(\":\")[0]) < 23) {\n  if (Moodo.boxStart(Moodo.box, Moodo.favorite)) {\n    console.log(\"Started Moodo box with my chosen fragrance.\")\n  } else {\n    Moodo.boxStart.skip(\"Failed to start Moodo box\")\n  }\n} else {\n  Moodo.boxStart.skip(\"Not before bedtime\")\n}", "intent": "Start the Moodo box with my chosen fragrance before bedtime."}
{"original_description": "Start my iRobot vacuum to help clean the dust when the dust level of my sensor is higher than my threshold.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Uhoo.sensorNotification.SensorValue > Uhoo.sensorNotification.MyThreshold) {\n  Irobot.startRobot(\"My Home\")\n} else {\n  Irobot.startRobot.skip(\"Air quality is within the normal range\")\n}", "intent": "Trigger the iRobot vacuum when the air quality sensor detects a level higher than my threshold."}
{"original_description": "Starte in COQON ein Programm oder eine Szene wenn in deinem Google Kalender ein Eintrag startet.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "", "intent": ""}
{"original_description": "Receive a Microsoft Teams message when an event from search on your Google Calendar is about to begin.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "// Get event details\nvar title = GoogleCalendar.eventFromSearchStarts.Title;\nvar description = GoogleCalendar.eventFromSearchStarts.Description;\nvar where = GoogleCalendar.eventFromSearchStarts.Where;\nvar starts = GoogleCalendar.eventFromSearchStarts.Starts;\nvar ends = GoogleCalendar.eventFromSearchStarts.Ends;\nvar eventUrl = GoogleCalendar.eventFromSearchStarts.EventUrl;\nvar hangoutsUrl = GoogleCalendar.eventFromSearchStarts.VideoCallUrl;\nvar eventType = GoogleCalendar.eventFromSearchStarts.EventType;\n\n// Check if it's not a weekend\nif (Date.parse(starts) > new Date().getTime() && Date.parse(ends) < new Date().getTime()) {\n  // Trigger the action\n  MicrosoftTeams.postMessageToChannel.setMessage(\"Event: \" + title);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(\"Description: \" + description);\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(title);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Normal\");\n  MicrosoftTeams.postMessageToChannel.skip();\n} else {\n  // Skip the action\n  MicrosoftTeams.postMessageToChannel.skip(\"Not a weekend event\");\n}", "intent": "Receive a Microsoft Teams message when an event from search on your Google Calendar is about to begin."}
{"original_description": "Keep your Wordpress fresh and up-to-date with your Instagrams. Note: only works for single photo posts.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_photo_post_wp", "Filter code method": "Wordpress.createPhotoPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_photo_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Source url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "source_url", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setSource Url(string: source_url)"}}, {"section": "Action fields", "title": "Caption\nText input", "description": "Text input", "details": {"Label": "Caption", "Helper text": "Optional", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setCaption(string: caption)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setPost Status(string: post_status)"}}], "filter_code": "", "intent": ""}
{"original_description": "Arm Away with a press of a button!", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.alarm", "Filter code method": "Skylinknet.alarm.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Hub?", "Slug": "hub_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Alarm\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Mode?", "Slug": "alarm", "Required": "true", "Can have default value": "true", "Filter code method": "Skylinknet.alarm.setAlarm(string: alarm)"}}], "filter_code": "if (ShareURL.includes(\"Share page for the button press\")) {\n  Skylinknet.alarm.setAlarm(\"hub_id\", \"key\", \"alarm\")\n} else {\n  Skylinknet.alarm.skip(\"Invalid share link\")\n}\n\n// Set latitude and longitude values\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\n\n// Check if location map image URL is valid\nif (LocationMapImageURL.includes(\"http\")) {\n  // Set alarm with hub, key, and mode\n  Skylinknet.alarm.setAlarm(hub_id, key, alarm)\n} else {\n  // Skip the action with a reason\n  Skylinknet.alarm.skip(\"Invalid location map URL\")\n}\n\n// Check if occurred at time is within a specific range (e.g., 8am-5pm)\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\nif (OccurredAt >= \"2020-07-08T08:00:00+05:00\" && OccurredAt <= \"2020-07-08T17:00:00+05:00\") {\n  // Set alarm with hub, key, and mode\n  Skylinknet.alarm.setAlarm(hub_id, key, alarm)\n} else {\n  // Skip the action with a reason\n  Skylinknet.alarm.skip(\"Outside of working hours\")\n}", "intent": "Arm Away with a press of a button!"}
{"original_description": "Customize this Applet with the date and time you want to be reminded, and you'll get a note so you don't forget to celebrate. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var CheckTime = DateAndTime.everyYearOn.CheckTime\nif (CheckTime === \"\") {\n  Email.sendMeEmail.skip(\"No matching date and time found\")\n} else {\n  var subject = \"Don't forget to celebrate!\"\n  var body = \"You have a reminder set for \" + CheckTime\n  Email.sendMeEmail.setSubject(subject).setBody(body)\n}", "intent": "This Applet will send you a reminder email when a specific date and time arrives."}
{"original_description": "Use this Recipe to update Google Contacts with any new Verizon Contact to keep them synchronized", "trigger_channel": "Verizon Cloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "verizon_cloud.new_contact"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "VerizonCloud.newContact.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nThe name of the contact.", "description": "The name of the contact.", "details": {"Slug": "name", "Filter code": "VerizonCloud.newContact.Name", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Email\nThe email address of the contact.", "description": "The email address of the contact.", "details": {"Slug": "email", "Filter code": "VerizonCloud.newContact.Email", "Type": "String", "Example": "johnsmith@ifttt.com"}}, {"section": "Ingredients", "title": "Phone\nThe phone number of the contact.", "description": "The phone number of the contact.", "details": {"Slug": "phone", "Filter code": "VerizonCloud.newContact.Phone", "Type": "String", "Example": "4155550000"}}], "action_channel": "Google Contacts", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_contacts.create_new_contact", "Filter code method": "GoogleContacts.createNewContact.skip(string?: reason)", "Runtime method": "runAction(\"google_contacts.create_new_contact\", {})"}, "action_details": [{"section": "Action fields", "title": "Full name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Full name", "Helper text": "Required", "Slug": "full_name", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setFull Name(string: full_name)"}}, {"section": "Action fields", "title": "Which group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "Optional group to assign the contact to.", "Slug": "which_group", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "PhoneNumber", "Helper text": "Optional", "Slug": "phone_number", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setPhone Number(string: phone_number)"}}, {"section": "Action fields", "title": "Email\nText input > Other", "description": "Text input > Other", "details": {"Label": "Email", "Helper text": "Optional", "Slug": "email", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setEmail(string: email)"}}, {"section": "Action fields", "title": "Address\nText input > Other", "description": "Text input > Other", "details": {"Label": "Address", "Helper text": "Optional", "Slug": "address", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setAddress(string: address)"}}, {"section": "Action fields", "title": "Job title\nText input > Other", "description": "Text input > Other", "details": {"Label": "Job title", "Helper text": "Optional", "Slug": "job_title", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setJob Title(string: job_title)"}}, {"section": "Action fields", "title": "Company\nText input > Other", "description": "Text input > Other", "details": {"Label": "Company", "Helper text": "Optional", "Slug": "company", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setCompany(string: company)"}}, {"section": "Action fields", "title": "Notes\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Notes", "Helper text": "Optional", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Upload photo\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo Url", "Helper text": "Optional url to a photo of the new contact", "Slug": "upload_photo", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setUpload Photo(string: upload_photo)"}}], "filter_code": "if (VerizonCloud.newContact.CreatedAt !== null && VerizonCloud.newContact.Name !== \"\" && VerizonCloud.newContact.Email !== \"\" && VerizonCloud.newContact.Phone !== \"\") {\n  var full_name = VerizonCloud.newContact.Name\n  var email = VerizonCloud.newContact.Email\n  var phone_number = VerizonCloud.newContact.Phone\n\n  if (full_name === undefined) {\n    Domovea.shadeClose.skip(\"Full name is required\")\n  } else {\n    GoogleContacts.createNewContact.setFull Name(full_name)\n  }\n\n  if (email !== undefined) {\n    GoogleContacts.createNewContact.setEmail(email)\n  }\n  if (phone_number !== undefined) {\n    GoogleContacts.createNewContact.setPhone Number(phone_number)\n  }\n\n  runAction(\"google_contacts.create_new_contact\", {})\n}", "intent": "Use this Recipe to update Google Contacts with any new Verizon Contact to keep them synchronized."}
{"original_description": "Set the color of your smart bulb with a button press", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "// Check if there's a share url\nif (DoButton.doButtonNewCommandCommon.ShareURL !== \"\") {\n  // Set the device to use\n  var device = \"Living Room Bulb\";\n  \n  // Set the color temperature\n  var colorTemperature = \"Warm\";\n  \n  // Optional: set kelvin value if provided\n  var kelvin = \"\";\n  if (DoButton.doButtonNewCommandCommon.Kelvin !== \"\") {\n    kelvin = DoButton.doButtonNewCommandCommon.Kelvin;\n  }\n  \n  // Optional: set transition duration if provided\n  var transitionDuration = \"2000\";\n  if (DoButton.doButtonNewCommandCommon.TransitionDuration !== \"\") {\n    transitionDuration = DoButton.doButtonNewCommandCommon.TransitionDuration;\n  }\n  \n  // Set the advanced options if provided\n  var advancedOptions = \"\";\n  if (DoButton.doButtonNewCommandCommon.AdvancedOptions !== \"\") {\n    advancedOptions = DoButton.doButtonNewCommandCommon.AdvancedOptions;\n  }\n  \n  // Run the Kasa action to change the color temperature of the bulb\n  Kasa.changeColorTemp(device, colorTemperature, kelvin, transitionDuration, advancedOptions);\n} else {\n  // Informative message if no share URL is provided\n  Domovea.shadeClose.skip(\"No share URL provided\");\n}", "intent": "Set the color of a smart bulb when a button press event occurs, considering various ingredients like share URL, latitude, longitude, location map URL, and occurred time."}
{"original_description": "Set smart light bulb color at the press of a button. This works with TP-Link LB130 and LB230 smart wifi light bulbs.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Kasa.changeColorTemp.skip) {\n  // Check if any advanced options are provided\n  var advancedOptions = DoButton.doButtonNewCommandCommon.AdvancedOptions;\n  if (advancedOptions) {\n    Kasa.changeColorTemp.setAdvancedOptions(advancedOptions);\n  }\n  \n  // Get the color temperature from the trigger ingredients\n  var colorTemperature = DoButton.doButtonNewCommandCommon.ColorTemperature;\n  if (colorTemperature) {\n    Kasa.changeColorTemp.setColorTemperature(colorTemperature);\n  } else {\n    // If no color temperature is provided, use a default value\n    Kasa.changeColorTemp.setColorTemperature(\"Default Color Temperature\");\n  }\n  \n  // Get the kelvin from the trigger ingredients\n  var kelvin = DoButton.doButtonNewCommandCommon.Kelvin;\n  if (kelvin) {\n    Kasa.changeColorTemp.setKelvin(kelvin);\n  }\n  \n  // Get the transition duration from the trigger ingredients\n  var transitionDuration = DoButton.doButtonNewCommandCommon.TransitionDuration;\n  if (transitionDuration) {\n    Kasa.changeColorTemp.setTransitionDuration(transitionDuration);\n  } else {\n    // If no transition duration is provided, use a default value\n    Kasa.changeColorTemp.setTransitionDuration(\"Default Transition Duration\");\n  }\n  \n  // Run the action\n  runAction(\"kasa.change_color_temp\", {});\n}", "intent": "Set the color temperature of TP-Link Kasa smart light bulb when a button press event occurs."}
{"original_description": "All you have to do is paste in a specific RSS Feed in the field below and select the channel you want to keep up-to-date with the latest news", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle !== \"\") {\n  if (Feed.newFeedItem.FeedUrl.indexOf(\"ifttt.com\") != -1) {\n    var message = \"New article: \" + Feed.newFeedItem.EntryTitle + \" (\" + Feed.newFeedItem.EntryUrl + \")\";\n    Slack.postToChannel.setMessage(message);\n  } else {\n    Slack.postToChannel.skip(\"Only posting articles from ifttt.com\");\n  }\n}", "intent": "When a new RSS feed item is available, post the title, URL, and content to Slack."}
{"original_description": "Sends new posts via your RSS feed to Buffer with an image", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer_with_photo", "Filter code method": "Buffer.addToBufferWithPhoto.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer_with_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Description", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setMessage(string: message)"}}], "filter_code": "var EntryImageUrl = Feed.newFeedItem.EntryImageUrl\nif (EntryImageUrl !== \"\") {\n  Buffer.addToBufferWithPhoto.setPhotoUrl(EntryImageUrl).setMessage(\"New post from \" + Feed.newFeedItem.FeedTitle + \": \" + Feed.newFeedItem.EntryTitle)\n} else {\n  Buffer.addToBufferWithPhoto.skip(\"No image available\")\n}", "intent": "Send new posts via an RSS feed to Buffer with an image."}
{"original_description": "The Library of Congress posts news releases every so often. Stay up-to-date with the latest!", "trigger_channel": "Library of Congress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "loc.latest_news"}, "trigger_details": [{"section": "Ingredients", "title": "Headline\nThe headline for the latest news.", "description": "The headline for the latest news.", "details": {"Slug": "EntryTitle", "Filter code": "Loc.latestNews.Headline", "Type": "String", "Example": "Latest News: Library of Congress Welcomes Junior Fellows"}}, {"section": "Ingredients", "title": "News url\nThe URL to the news article.", "description": "The URL to the news article.", "details": {"Slug": "EntryUrl", "Filter code": "Loc.latestNews.NewsUrl", "Type": "String", "Example": "https://www.loc.gov/item/prn-17-078/?loclr=ealn"}}, {"section": "Ingredients", "title": "Content html\nThe news content, may contain HTML.", "description": "The news content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Loc.latestNews.ContentHtml", "Type": "String", "Example": "<p><span>The Library of Congress this week welcomed 37 undergraduate..."}}, {"section": "Ingredients", "title": "Published date\nDate the news was published.", "description": "Date the news was published.", "details": {"Slug": "EntryPublished", "Filter code": "Loc.latestNews.PublishedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "", "intent": ""}
{"original_description": "Lock a door with SmartThings and Blink arms", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.locked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nThe date and time the lock was locked.", "description": "The date and time the lock was locked.", "details": {"Slug": "LockedAt", "Filter code": "SmartthingsV2.lockedSmartthings.LockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.lockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "var LockedAt = SmartthingsV2.lockedSmartthings.LockedAt\nvar DeviceName = SmartthingsV2.lockedSmartthings.DeviceName\nif (Device === \"Bedroom lock\") {\n  if ((new Date().toString() === LockedAt.toString()) && (Meta.currentUserTime.hour() >= 6) && (Meta.currentUserTime.hour() <= 22)) {\n    Blink.networkDisarm(DeviceName)\n  } else {\n    Blink.networkDisarm.skip(\"Outside of active hours\")\n  }\n} else {\n  Blink.networkDisarm.skip(\"Incorrect device selected\")\n}", "intent": "Lock the door with SmartThings and Blink arms when a device is locked."}
{"original_description": "The EDF is one of the world's largest environmental organizations. Get an email with the content when they write a new article about the topic you'd like to track. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var Query = Feed.newFeedItemMatches.Query\nif (Query.includes(EDFKeyword)) {\n  var EntryTitle = Feed.newFeedItemMatches.EntryTitle\n  var EntryContent = Feed.newFeedItemMatches.EntryContent\n  Email.sendMeEmail.setSubject(\"New EDF Article: \" + EntryTitle)\n  Email.sendMeEmail.setBody(\"<html><body>\" + EntryContent + \"</body></html>\")\n} else {\n  Email.sendMeEmail.skip(\"No matching article found\")\n}", "intent": "This IFTTT automation is designed to send an email when the EDF (Environmental Defense Fund) publishes a new article matching the specified query text. The automation uses an RSS feed as its trigger and sends an email with the article's content."}
{"original_description": "Unlock a door with SmartThings and Blink disarms", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.locked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nThe date and time the lock was locked.", "description": "The date and time the lock was locked.", "details": {"Slug": "LockedAt", "Filter code": "SmartthingsV2.lockedSmartthings.LockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.lockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Device = $$Device$$\nif (Device !== \"\") {\n  var LockedAt = SmartthingsV2.lockedSmartthings.LockedAt\n  var DeviceName = SmartthingsV2.lockedSmartthings.DeviceName\n  \n  Blink.networkDisarm(LockedAt, DeviceName)\n} else {\n  Blink.networkDisarm.skip(\"No device selected\")\n}", "intent": "Unlock the door with SmartThings and Blink disarms only if the device is selected."}
{"original_description": "Automatically add Tumblr photo posts to your Buffer Queue in a jiffy with this Applet.", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_photo_post"}, "trigger_details": [{"section": "Trigger fields", "title": "Tumblelog\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tumblelog", "Helper text": "Enter the tumblelog name that this trigger should fire for", "Slug": "tumblelog", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Post body text\nThe post's body (text only)", "description": "The post's body (text only)", "details": {"Slug": "post_body_text", "Filter code": "Tumblr.newPhotoPost.PostBodyText", "Type": "String", "Example": "This is the body of a post. Neat."}}, {"section": "Ingredients", "title": "Url\nThe post URL", "description": "The post URL", "details": {"Slug": "url", "Filter code": "Tumblr.newPhotoPost.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post body html\nThe post's body (HTML)", "description": "The post's body (HTML)", "details": {"Slug": "post_body_html", "Filter code": "Tumblr.newPhotoPost.PostBodyHtml", "Type": "String", "Example": "<figure class=\"tmblr-full\"><img src=\"https://64.media.tumblr.com/a-photo.jpg\"></figure><p>This is an HTML body.</p>"}}, {"section": "Ingredients", "title": "Thumbnail url\nThe thumbnail image URL for the post", "description": "The thumbnail image URL for the post", "details": {"Slug": "thumbnail_url", "Filter code": "Tumblr.newPhotoPost.ThumbnailUrl", "Type": "Web URL", "Example": "https://64.media.tumblr.com/a18c8063bf9d095d99f12b51d3dd1eda/57803298a6ae7123-0a/s1280x1920/fb2fce67958156e2231da15522ddb6850e1559ff.gifv"}}, {"section": "Ingredients", "title": "Full image url\nThe full size image URL", "description": "The full size image URL", "details": {"Slug": "full_image_url", "Filter code": "Tumblr.newPhotoPost.FullImageUrl", "Type": "Image URL", "Example": "https://64.media.tumblr.com/fd654c32f041cb02c757b5646c1cf9e1/a4c5782524284f82-d5/s1280x1920/8e97caae5a975889b3e170e42ea064b68410300a.jpg"}}, {"section": "Ingredients", "title": "Post tags\nThe post's tags", "description": "The post's tags", "details": {"Slug": "post_tags", "Filter code": "Tumblr.newPhotoPost.PostTags", "Type": "String", "Example": "Sky,Earth,Wind,Fire"}}, {"section": "Ingredients", "title": "Post\nThe ID of the post that has been created", "description": "The ID of the post that has been created", "details": {"Slug": "post_id", "Filter code": "Tumblr.newPhotoPost.PostId", "Type": "String", "Example": "123456789"}}, {"section": "Ingredients", "title": "Tumblelog\nThe name of the Tumblelog that published the post", "description": "The name of the Tumblelog that published the post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newPhotoPost.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newPhotoPost.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "if (Tumblr.newPhotoPost.Tumblelog === tumblelog) {\n  var postBodyText = Tumblr.newPhotoPost.PostBodyText;\n  var url = Tumblr.newPhotoPost.Url;\n  var postBodyHtml = Tumblr.newPhotoPost.PostBodyHtml;\n  var thumbnailUrl = Tumblr.newPhotoPost.ThumbnailUrl;\n  var fullImageUrl = Tumblr.newPhotoPost.FullImageUrl;\n  var postTags = Tumblr.newPhotoPost.PostTags;\n  var postId = Tumblr.newPhotoPost.PostId;\n  var tumblelogName = Tumblr.newPhotoPost.Tumblelog;\n  var createdAt = Tumblr.newPhotoPost.CreatedAt;\n\n  if (postBodyText && url) {\n    Buffer.addToBuffer.setMessage(\"New photo post from \" + tumblelogName);\n    Buffer.runAction(\"buffer.add_to_buffer\", {\n      \"message\": \"New photo post from \" + tumblelogName,\n      \"params\": {}\n    });\n  } else {\n    Buffer.addToBuffer.skip(\"Invalid post data\");\n  }\n}", "intent": ""}
{"original_description": "Keep your Wordpress fresh and up-to-date with your Instagram videos.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_post_wp", "Filter code method": "Wordpress.createPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setBody(string: body)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setPost Status(string: post_status)"}}], "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption !== \"\") {\n  var title = \"Instagram Video: \" + Instagram.anyNewVideoByYouInstagram.Caption\n  var body = \"<iframe src='\" + Instagram.anyNewVideoByYouInstagram.EmbedCode + \"' width='612' height='710' frameborder='0' scrolling='no' allowtransparency='true'></iframe>\"\n  Wordpress.createPostWp.setTitle(title)\n  Wordpress.createPostWp.setBody(body)\n  if (Wordpress.createPostWp.getCategories() !== \"\") {\n    var categories = Wordpress.createPostWp.getCategories()\n  } else {\n    categories = \"Uncategorized\"\n  }\n  if (Wordpress.createPostWp.getTags() !== \"\") {\n    var tags = Wordpress.createPostWp.getTags()\n  } else {\n    tags = \"\"\n  }\n  Wordpress.createPostWp.setCategories(categories)\n  Wordpress.createPostWp.setTags(tags)\n} else {\n  Wordpress.createPostWp.skip(\"No caption provided\")\n}", "intent": "Automatically create a WordPress post with an embedded Instagram video when a new video is posted by the user."}
{"original_description": "With this applet your house is being cleaned by Roomba when activating your all-off function in Niko Home Control", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nikohomecontrol.routineActivated.Routine === \"All off\") {\n  Irobot.startRobot(Nikohomecontrol.routineActivated.Routine, Nikohomecontrol.routineActivated.CreatedAt);\n} else {\n  Irobot.startRobot.skip(\"Invalid routine\");\n}", "intent": "When the Niko Home Control all-off function is activated, trigger a Roomba robot to start cleaning. The routine name and created time are sent as additional information."}
{"original_description": "Every Saturday you'll get an email with the latest Caltrain news to help you plan your weekly commute. ", "trigger_channel": "Caltrain", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "caltrain.new_update"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Caltrain.newUpdate.EntryTitle", "Type": "String", "Example": "SamTrans and Caltrain Get You to the San Mateo County Fair"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Caltrain.newUpdate.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qUi9lf"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Caltrain.newUpdate.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day()\nif (day !== 6) { // Not Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Not Saturday\")\n} else {\n  var title = Caltrain.newUpdate.EntryTitle\n  var url = Caltrain.newUpdate.EntryUrl\n  var message = \"Caltrain News: \" + title\n  if (!url) { \n    url = \"\"\n  }\n  EmailDigest.sendWeeklyEmail.setTitle(title)\n  .setUrl(url)\n  .setMessage(message)\n}", "intent": "Send a weekly email digest with Caltrain news on Saturdays."}
{"original_description": "Save £1 every time you post on Instagram with a specific hashtag", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#tbt\")) {\n  var amount = 1;\n  Dozens.save.setAmount(amount).skip(\"£\" + amount + \" saved\");\n} else {\n  Dozens.save(skip(\"No savings made\"))\n}", "intent": "Save £1 every time you post on Instagram with a specific hashtag."}
{"original_description": "Automatically turn my Nest thermostat up or down to align with my ideal internal temperature when the outside is above or below my ideal temperature.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "var UhooDevice = Uhoo.sensorNotification.UhooName\nvar SensorParameter = Uhoo.sensorNotification.SensorName\nvar ThresholdValue = Uhoo.sensorNotification.MyThreshold\nvar Condition = Uhoo.sensorNotification.AboveOrBelow\n\nif (SensorParameter === 'Temperature' && Uhoo.sensorNotification.DataTemperature > ThresholdValue) {\n  GoogleNestThermostat.setHotTemperature(UhooDevice, 'degrees', String(Number(Uhoo(sensor_notification_data_temp)) + 1))\n} else if (SensorParameter === 'Temperature' && Uhoo.sensorNotification.DataTemperature < ThresholdValue) {\n  GoogleNestThermostat.setHotTemperature(UhooDevice, 'degrees', String(Number(Uhoo(sensor_notification_data_temp)) - 1))\n}\n\n// Additional conditions for other sensor parameters\nelse if (SensorParameter === 'Humidity' && Uhoo.sensorNotification.DataHumidity > ThresholdValue) {\n  // adjust humidity accordingly\n} else if (SensorParameter === 'PM2.5' && Uhoo.sensorNotification.DataPm25 > ThresholdValue) {\n  // adjust PM2.5 level accordingly\n}\n\n// Add more conditions for other sensor parameters as needed\n\nGoogleNestThermostat.setHotTemperature.skip(\"No condition met\")", "intent": "Automatically adjust the Nest thermostat to match my ideal internal temperature when outside conditions exceed or fall below my target level."}
{"original_description": "Launch a scenario exactly when it's time to! Launch the Good Morning scenario when it's time to wake up or the Good Night when it's time to go to bed. Everything is easier with IFTTT and Gideon Smart Home", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Get the trigger time\nvar TriggerTime = DateAndTime.everyDayAt.CheckTime;\n\n// Check if it's morning or evening\nif (TriggerTime.includes(\"AM\") && TriggerTime.includes(\"7:00\")) {\n  // Launch Good Morning scenario\n  Gideon.launchScenario(\"Good Morning\");\n} else if (TriggerTime.includes(\"PM\") && TriggerTime.includes(\"10:00\")) {\n  // Launch Good Night scenario\n  Gideon.launchScenario(\"Good Night\");\n} else {\n  // Skip the action with a reason\n  Gideon.launchScenario.skip(\"Not morning or evening\");\n}", "intent": "Trigger an action to launch a scenario at specific times, based on user input."}
{"original_description": "Set your Security Mode to \"Disarmed\" with a button press. Please make sure that your Bosma devices are set up and connected to the internet.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.switch_security_mode", "Filter code method": "Bosma.switchSecurityMode.skip(string?: reason)", "Runtime method": "runAction(\"bosma.switch_security_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Family\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which family do you want to control?", "Slug": "family", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Security Mode do you want to switch to?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Bosma.switchSecurityMode.setMode(string: mode)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Family === \"\") {\n  Bosma.switchSecurityMode.skip(\"Family not selected\")\n} else if (DoButton.doButtonNewCommandCommon.Mode === \"\") {\n  Bosma.switchSecurityMode.setMode(DoButton.doButtonNewCommandCommon.Mode)\n    .skip(\"Invalid security mode\")\n} else {\n  Bosma.switchSecurityMode.setMode(DoButton.doButtonNewCommandCommon.Mode)\n}", "intent": "When a button press is detected, check if the family and security mode are set. If they are not set, skip the action."}
{"original_description": "Close garage door with the press of the Logitech POP button.", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Trigger.switch === \"Close Door\" && Trigger.trigger_condition === \"Short Press\" && Trigger.trigger_source === \"Button\") {\n  if (Garadget.closeDoor.skip()) {\n    console.log(\"Failed to close the door.\")\n  }\n}", "intent": "Automate garage door closing with Logitech POP button press."}
{"original_description": "Open garage door with the press of the Logitech POP button.", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Get a message on Teams when your spreadsheet has a new row added. Easy way to track results from a form, survey, or keep up with incoming requests.", "trigger_channel": "Google Sheets", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_sheets.new_row_in_spreadsheet"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Enter the folder path...", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Recipes/Vegetables&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Filename\nText input > Other", "description": "Text input > Other", "details": {"Label": "and enter the filename", "Helper text": "E.g. Vegetable Recipes", "Slug": "filename", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Spreadsheet url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Or copy and paste the spreadsheet URL", "Helper text": "Must be a valid spreadsheet URL", "Slug": "spreadsheet_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the spreadsheet.", "description": "The name of the spreadsheet.", "details": {"Slug": "spreadsheet_name", "Filter code": "GoogleSheets.newRowInSpreadsheet.Filename", "Type": "String", "Example": "2018 Trip ideas"}}, {"section": "Ingredients", "title": "Path\nPath of the new spreadsheet.", "description": "Path of the new spreadsheet.", "details": {"Slug": "path", "Filter code": "GoogleSheets.newRowInSpreadsheet.Path", "Type": "String", "Example": "IFTTT/Faves"}}, {"section": "Ingredients", "title": "Spreadsheet url\nThe URL to the spreadsheet on Google Sheets.", "description": "The URL to the spreadsheet on Google Sheets.", "details": {"Slug": "spreadsheet_url", "Filter code": "GoogleSheets.newRowInSpreadsheet.SpreadsheetUrl", "Type": "Web URL", "Example": "https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0"}}, {"section": "Ingredients", "title": "Created at\nDate and time row was added.", "description": "Date and time row was added.", "details": {"Slug": "created_at", "Filter code": "GoogleSheets.newRowInSpreadsheet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Row index\nThe numerical value of the new row.", "description": "The numerical value of the new row.", "details": {"Slug": "row_index", "Filter code": "GoogleSheets.newRowInSpreadsheet.RowIndex", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Column a\nValue in column A", "description": "Value in column A", "details": {"Slug": "column_a", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnA", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Column b\nValue in column B", "description": "Value in column B", "details": {"Slug": "column_b", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnB", "Type": "String", "Example": "$99"}}, {"section": "Ingredients", "title": "Column c\nValue in column C", "description": "Value in column C", "details": {"Slug": "column_c", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnC", "Type": "String", "Example": "Towel"}}, {"section": "Ingredients", "title": "Column d\nValue in column D", "description": "Value in column D", "details": {"Slug": "column_d", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnD", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Column e\nValue in column E", "description": "Value in column E", "details": {"Slug": "column_e", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnE", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column f\nValue in column F", "description": "Value in column F", "details": {"Slug": "column_f", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnF", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column g\nValue in column G", "description": "Value in column G", "details": {"Slug": "column_g", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnG", "Type": "String", "Example": "Delivery Date"}}, {"section": "Ingredients", "title": "Column h\nValue in column H", "description": "Value in column H", "details": {"Slug": "column_h", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnH", "Type": "String", "Example": "November 7th, 2017"}}, {"section": "Ingredients", "title": "Column i\nValue in column I", "description": "Value in column I", "details": {"Slug": "column_i", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnI", "Type": "String", "Example": "Delivery Address"}}, {"section": "Ingredients", "title": "Column j\nValue in column J", "description": "Value in column J", "details": {"Slug": "column_j", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnJ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column k\nValue in column K", "description": "Value in column K", "details": {"Slug": "column_k", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnK", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column l\nValue in column L", "description": "Value in column L", "details": {"Slug": "column_l", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnL", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column m\nValue in column M", "description": "Value in column M", "details": {"Slug": "column_m", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnM", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column n\nValue in column N", "description": "Value in column N", "details": {"Slug": "column_n", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnN", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column o\nValue in column O", "description": "Value in column O", "details": {"Slug": "column_o", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnO", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column p\nValue in column P", "description": "Value in column P", "details": {"Slug": "column_p", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnP", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column q\nValue in column Q", "description": "Value in column Q", "details": {"Slug": "column_q", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnQ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column r\nValue in column R", "description": "Value in column R", "details": {"Slug": "column_r", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnR", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column s\nValue in column S", "description": "Value in column S", "details": {"Slug": "column_s", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnS", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column t\nValue in column T", "description": "Value in column T", "details": {"Slug": "column_t", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnT", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column u\nValue in column U", "description": "Value in column U", "details": {"Slug": "column_u", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnU", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column v\nValue in column V", "description": "Value in column V", "details": {"Slug": "column_v", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnV", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column w\nValue in column W", "description": "Value in column W", "details": {"Slug": "column_w", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnW", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column x\nValue in column X", "description": "Value in column X", "details": {"Slug": "column_x", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnX", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column y\nValue in column Y", "description": "Value in column Y", "details": {"Slug": "column_y", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnY", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column z\nValue in column Z", "description": "Value in column Z", "details": {"Slug": "column_z", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnZ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "const path = GoogleSheets.newRowInSpreadsheet.Path;\nconst filename = GoogleSheets.newRowInSpreadsheet.Filename;\nconst spreadsheetUrl = GoogleSheets.newRowInSpreadsheet.SpreadsheetUrl;\n\nif (path !== \"\" && filename !== \"\") {\n  const messageSubject = \"New row added in \" + path + \" - \" + filename;\n  const messageId = MicrosoftTeams.postMessageToChannel.skip(\"No subject specified\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(messageId, messageSubject);\n  const messageBody = \"A new row has been added to the spreadsheet with the following details:\\n\\nPath: \" + path + \"\\nFilename: \" + filename + \"\\nSpreadsheet URL: \" + spreadsheetUrl;\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageId, messageBody);\n  MicrosoftTeams.postMessageToChannel.runAction();\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"No valid path or filename specified\");\n}", "intent": "When a new row is added to a Google Sheets spreadsheet, send a message on Microsoft Teams with the specified subject and body."}
{"original_description": "Trigger the siren on a Bosma device with a button press. Please make sure that the Bosma device is set up and connected to the internet.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.alert", "Filter code method": "Bosma.alert.skip(string?: reason)", "Runtime method": "runAction(\"bosma.alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to alert?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL !== \"\") {\n  if (Meta.currentUserTime.format(\"YYYY-MM-DD HH:mm:ss\") > DoButton.doButtonNewCommandCommon.OccurredAt) {\n    Bosma.alert.skip(\"Event already occurred\")\n  } else {\n    var device = DoButton.doButtonNewCommandCommon.device\n    if (device === \"Your Device Name\") { \n      Bosma.alert(\"Siren triggered!\")\n    } else {\n      Bosma.alert.skip(\"Unsupported device: \" + device)\n    }\n  }\n} else {\n  Bosma.alert.skip(\"No valid button press\")\n}", "intent": "Trigger a Bosma device's siren when a button is pressed, using the button press data."}
{"original_description": "When you share an Instagram photo, send it to someone via Gmail. If you have a family member or friend who does not use Instagram, you can still share your photo with them automatically. ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "if (Instagram.anyNewPhotoByYou.Caption !== \"\") {\n  var body = \"Check out this cool photo: <img src=\\\"\" + Instagram.anyNewPhotoByYou.SourceUrl + \"\\\">\";\n  Gmail.sendAnEmail(\"to\", \"Your Name\").setSubject(\"New Photo Shared on Instagram\").setBody(body).runAction();\n}", "intent": "When you share an Instagram photo, send it to someone via Gmail."}
{"original_description": "This will turn on the lights of your choice in Wake-up mode within 15 minutes of the sunrise in your location. Wake up with the sun!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var SunriseTime = Weather.sunRises.SunriseAt\nvar FifteenMinutesBeforeSunrise = new Date(SunriseTime.getTime() - 900000)\nif (Date.now() >= FifteenMinutesBeforeSunrise) {\n  Aisync.onOff.runAction(\"aisync.on_off\", {device: \"Fanlight Sync\", on_off: \"on\"})\n}", "intent": "Automatically turn on the lights in your chosen device 15 minutes before sunrise."}
{"original_description": "Let a friend know you're back in town — and need a ride! Just put in their number and when you check-in near the airport they'll get an SMS from your Android telling them it's time to hop in the car and get you that VIP curbside pickup. ", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.new_checkin_by_friends_at_location"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input", "description": "Location input", "details": {"Label": "Locate an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.Shout", "Type": "String", "Example": "Best muffins ever."}}, {"section": "Ingredients", "title": "User name", "description": "", "details": {"Slug": "UserName", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.UserName", "Type": "String", "Example": "The friends name."}}, {"section": "Ingredients", "title": "User url", "description": "", "details": {"Slug": "UserUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.UserUrl", "Type": "String", "Example": "The friends profile URL."}}, {"section": "Ingredients", "title": "User profile image url", "description": "", "details": {"Slug": "UserProfileImageUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.UserProfileImageUrl", "Type": "String", "Example": "The friends profile image URL."}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.VenueName", "Type": "String", "Example": "The ifttt office"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.VenueUrl", "Type": "String", "Example": "http://4sq.com/cjWcVg"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.776024,-122.425632&zoom=16&size=420x260&maptype=roadmap&sensor=false&markers=color:red|37.776024,-122.425632"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map at this location.", "description": "The image of the map at this location.", "details": {"Slug": "LocationMapImageUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.LocationMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map at this location.", "description": "The link to the map at this location.", "details": {"Slug": "LocationMapUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.LocationMapUrl", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.CheckinDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Foursquare.newCheckinByFriendsAtLocation.Shout !== \"\") {\n  var phoneNumber = Foursquare.newCheckinByFriendsAtLocation.UserName; \n  AndroidMessages.sendAMessage.setText(\"Let a friend know you're back in town — and need a ride! \" + Foursquare.newCheckinByFriendsAtLocation.Shout);\n  AndroidMessages.sendAMessage.setPhoneNumber(phoneNumber); \n  AndroidMessages.sendAMessage.skip();\n} else {\n  AndroidMessages.sendAMessage.skip(\"No shout message\");\n}", "intent": "When a friend checks-in at a location, send an SMS to their phone number with a customizable message."}
{"original_description": "Blink Philips Hue light when garage door opens", "trigger_channel": "Garadget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "garadget.door_opens"}, "trigger_details": [{"section": "Trigger fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Garadget.doorOpens.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CreatedAt = Garadget.doorOpens.CreatedAt\nif (Garaget.door_opens.door_id === \"Main Door\") {\n  var Lights = [\"Living Room Light\", \"Kitchen Light\"]\n  for (var i = 0; i < Lights.length; i++) {\n    Hue.blinkAllHue(Lights[i])\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Not the main door\")\n}", "intent": "Automatically turn on all Philips Hue lights when the garage door opens."}
{"original_description": "Turn on Philips Hue light when garage door opens.", "trigger_channel": "Garadget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "garadget.door_opens"}, "trigger_details": [{"section": "Trigger fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Garadget.doorOpens.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DoorID = Garadget.doorOpens.DropdownList\nif (Garadget.doorOpens.CreatedAt !== \"\") {\n  if (DoorID === \"Main\") {\n    Hue.turnOnAllHue(\"Garage door open\")\n  } else {\n    Hue.turnOnAllHue.skip(\"Invalid door selected\")\n  }\n} else {\n  Hue.turnOnAllHue.skip(\"No door opened\")\n}", "intent": "When the garage door opens, turn on all Philips Hue lights."}
{"original_description": "If Weather Underground detects rain in the area, use beam to close your garage door to protect everything in the garage.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "beam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beam.close_garage_door", "Filter code method": "Beam.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"beam.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "You can activate MyMilan Scenes when\nthe Smart Life door sensor is open", "trigger_channel": "Smart Life", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartlife.door_open"}, "trigger_details": [{"section": "Trigger fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device/group?", "Helper text": "Not all Smart Life devices are supported by this service. Refer to the device manufacturer for further information.", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Smartlife.doorOpen.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis ingredient describes the device name which is triggered.", "description": "This ingredient describes the device name which is triggered.", "details": {"Slug": "device_name", "Filter code": "Smartlife.doorOpen.DeviceName", "Type": "String", "Example": "first door sensor"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Smartlife.doorOpen.DeviceName === 'which_device') {\n  Mymilan.aScenes.skip('No valid device selected');\n} else if (Smartlife.doorOpen.CreatedAt.getHours() < 7 || Smartlife.doorOpen.CreatedAt.getHours() > 22) {\n  Mymilan.aScenes.skip(\"Outside of active hours\");\n} else {\n  Mymilan.aScenes.runAction({\n    'scenes': which_device\n  });\n}", "intent": "When the Smart Life door sensor is open, activate MyMilan Scenes."}
{"original_description": "Controlling Brilliant scenes at particular time", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime === 'Your desired time') {\n  // Check if the rule name and status are set to enabled\n  var RuleName = brilliant_nexus.execrule.getRuleName()\n  var RuleStatus = brilliant_nexus.execrule.getRuleStatus()\n  if (RuleName && RuleStatus) {\n    // Execute the action on Brilliant Nexus\n    brilliant_nexus.execrule.runAction({}, 'execute')\n  } else {\n    // Skip the action if rule name or status is not set\n    brilliant_nexus.execrule.skip('Rule not enabled')\n  }\n} else {\n  // Skip the action if it's not the specified time\n  brilliant_nexus.execrule.skip('Not the desired time')\n}", "intent": "This IFTTT automation controls Brilliant scenes at a specific time. The trigger is set by the Date & Time service, checking every day at a specified time. If the current time matches the specified time, it executes an action on the Brilliant Nexus service."}
{"original_description": "This applet creates a button widget that you can use from the home screen of your Android or iOS device. Press the button to close your garage door or gate.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.close_door", "Filter code method": "Garagewifi.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DoorNumber = action_details[0].details.Slug\nif (DoorNumber === \"\") {\n  Garagewifi.closeDoor.skip(\"No door number selected\")\n} else {\n  Garagewifi.closeDoor(GarageWiFi & Gates.door_number)\n}", "intent": "This applet creates a button widget that sends a command to close the garage door or gate when pressed."}
{"original_description": "Use Weather Underground to close your awning when it's raining to protect it from damage.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Condition = Weather.currentConditionIs.Condition\nif (Condition === \"Rain\") {\n  SomfyMylink.move.setCommand(\"Close\").skip(\"No rain detected\")\n} else {\n  SomfyMylink.move.skip(\"Not raining\")\n}", "intent": "This filter will check if it's raining at the specified location and close the awning if necessary."}
{"original_description": "When it's sunset, close my blind.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Connector", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dooya_connector.close_blinds", "Filter code method": "DooyaConnector.closeBlinds.skip(string?: reason)", "Runtime method": "runAction(\"dooya_connector.close_blinds\", {})"}, "action_details": [{"section": "Action fields", "title": "Which blinds\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which blind?", "Slug": "which_blinds", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.hour() < 18) {\n  DooyaConnector.closeBlinds.skip(\"Not yet sunset\")\n} else if (Weather.sunSets.TempFahrenheit > 72 || Weather.sunSets.TempCelsius > 22) {\n  DooyaConnector.closeBlinds.skip(\"Too warm for blinds to close\")\n} else {\n  DooyaConnector.closeBlinds()\n}", "intent": "When it's sunset, close my blind."}
{"original_description": "Automatically close garage door at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt\nvar CurrentHour = Meta.currentUserTime.hour()\nif (CurrentHour >= 17 && CurrentHour <= 22) { // between 5pm and 10pm\n  if (Weekday()) {\n    Garadget.closeDoor(\"Sunset automation\")\n  } else {\n    Garadget.closeDoor.skip(\"Only weekdays at sunset\")\n  }\n} else {\n  Garaget.closeDoor.skip(\"Not during sunset hours\")\n}", "intent": "Automatically close the garage door at sunset when it's a weekday."}
{"original_description": "This Applet closes your door at 7pm daily.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyNice", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mynice.close", "Filter code method": "Mynice.close.skip(string?: reason)", "Runtime method": "runAction(\"mynice.close\", {})"}, "action_details": [{"section": "Action fields", "title": "Automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Slug": "automation_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime\nif (parseInt(time.split(\" \")[1].split(\":\")[0]) === 19) { // 19 is equivalent to 7 PM in 24-hour format\n  Mynice.close.skip()\n} else {\n  Mynice.close.skip(\"Not 7pm\")\n}", "intent": "This Applet will close the door at 7pm daily by checking the current time and executing a specific action."}
{"original_description": "Use beam to make sure that your garage door is closed by 9pm. This can be used to make sure you do not leave your door open all night accidentally. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "beam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beam.close_garage_door", "Filter code method": "Beam.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"beam.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (parseInt(Time.split(' at ')[1].split(':')[0]) >= 21) { \n  Beam.closeGarageDoor()\n}", "intent": "Automatically check the current time and close the garage door using beam if it is 9pm or later."}
{"original_description": "This Applet closes all your garage door when sun goes down", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Tailwind", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tailwind.close_garage_door", "Filter code method": "Tailwind.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"tailwind.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Garage name\nDropdown list", "description": "Dropdown list", "details": {"Label": "garage_name", "Slug": "garage_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.hour() < Weather.sunSets.SunsetAt.getHours()) {\n  if (WeatherCondition === \"Sunny\" && temp_fahrenheit > 60) {\n    Tailwind.closeGarageDoor(\"Sun has set and it's warm outside\")\n  } else {\n    Tailwind.closeGarageDoor.skip(\"Not suitable for garage door closure\")\n  }\n}", "intent": "This Applet closes all garage doors when the sun sets."}
{"original_description": "When the UV index outside reaches 7, close the curtain to protect yourself from the scorching sun. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.electric_curtain_switch_action", "Filter code method": "Ewelink.electricCurtainSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.electric_curtain_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Electric curtain devices query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "electric_curtain_devices_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which action?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.electricCurtainSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "var UvIndex = Weather.currentUvIndexRisesAbove.UvIndex\nif (parseInt(UvIndex) >= 7) {\n  Ewelink.electricCurtainSwitchAction(\"On\")\n} else {\n  Ewelink.electricCurtainSwitchAction.skip(\"UV index below 7\")\n}", "intent": "When the UV index outside reaches 7, close the electric curtain to protect yourself from the scorching sun."}
{"original_description": "If Weather Underground sees it start to snow at home, use beam to close the garage door to prevent snow from entering the garage.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "beam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beam.close_garage_door", "Filter code method": "Beam.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"beam.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Snow\") {\n  var Door = Domovea.shadeClose.getDoor()\n  if (Door) {\n    Domovea.shadeClose.setDoor(Door)\n  } else {\n    Domovea.shadeClose.skip(\"No door specified\")\n  }\n} else {\n  Domovea.shadeClose.skip(\"It is not snowing\")\n}", "intent": "If it starts snowing at home, use Beam to close the garage door using the given condition."}
{"original_description": "Automatically closes the garage door at the specified time if left open.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== Meta.currentUserTime.day() || DateAndTime.everyWeekdayAt.CheckTime !== \"08:00\") {\n  Garadget.closeDoor.skip(\"Outside of scheduled door closing time\")\n} else if (Garadge.garageIsOpen()) {\n  Garadget.closeDoor(\"Scheduled garage door closure\")\n}", "intent": "Automatically closes the garage door at the specified time if left open."}
{"original_description": "When the temperature becomes too hot outside, close the curtains to keep some of the sunlight out.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MyCurtains", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "MyCurtains.move_device", "Filter code method": "MyCurtains.moveDevice.skip(string?: reason)", "Runtime method": "runAction(\"MyCurtains.move_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which drapery or curtain?", "Helper text": "Which drapery system would you like to move?", "Slug": "devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Move type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which move command?", "Helper text": "How open would you like the drapery to be?", "Slug": "move_type", "Required": "true", "Can have default value": "true", "Filter code method": "MyCurtains.moveDevice.setMove Type(string: move_type)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 72) {\n  MyCurtains.moveDevice(\"move_type\", \"Close\")\n}", "intent": "When the temperature becomes too hot outside, close the curtains to keep some of the sunlight out. This rule checks if the current temperature in Fahrenheit is above a certain threshold and adjusts the curtains accordingly."}
{"original_description": "This applet lets Apilio know if a specific SmartThings device has been closed, and saves this information to a variable", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ClosedAt = SmartthingsV2.closedSmartthings.ClosedAt\nvar DeviceName = SmartthingsV2.closedSmartthings.DeviceName\nif (Device === \"The selected device\") {\n  if (ClosedAt !== \"\") {\n    Apilio.booleanVariableToFalseUpdates.skip(\"Device already closed\")\n  } else {\n    runAction(\"apilio.boolean_variable_to_false_updates\", {variable_identifier: \"Selected variable\"})\n  }\n} else {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Incorrect device selected\")\n}", "intent": "When the SmartThings device is closed, update an Apilio boolean variable to False."}
{"original_description": "Close garage door when iHome button is pressed", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.Press === \"Short Press\") {\n  Garadget.closeDoor(Domovea.garageDoorId)\n} else {\n  Garadget.closeDoor.skip(\"Long press detected, skipping\")\n}", "intent": "When the iHome Enhance button is pressed, close the garage door if it is a short press."}
{"original_description": "Close garage door when Netatmo weather station detects rain.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DoorId = //<<Device name>>.door_id\nif (Netatmo.rainHasStarted.MeasuredAt < Meta.currentUserTime.now() && Netatmo.rainHasStarted.DeviceName === DoorId) {\n  Garadget.closeDoor(\"Rain detected\")\n} else {\n  Garadget.closeDoor.skip(\"No rain or wrong device\")\n}", "intent": "Close the garage door when Netatmo weather station detects rain."}
{"original_description": "Close garage door when Abode mode changes (Away, Home, Standby).", "trigger_channel": "abode", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "abode.mode_changed"}, "trigger_details": [{"section": "Trigger fields", "title": "Select mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select mode", "Slug": "select_mode", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Abode.modeChanged.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "New mode\nName of the mode that was activated.", "description": "Name of the mode that was activated.", "details": {"Slug": "new_mode", "Filter code": "Abode.modeChanged.NewMode", "Type": "String", "Example": "Gateway Standby"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Abode.modeChanged.NewMode === 'Away' || Abode.modeChanged.NewMode === 'Home' || Abode.modeChanged.NewMode === 'Standby') {\n  if (!Garadget.closeDoor.doorId) {\n    Garadget.closeDoor.skip('No door selected')\n  } else {\n    Garadget.closeDoor(Garadget.closeDoor.formatReason('Closing garage door due to mode change'))\n  }\n}", "intent": "Close the garage door when Abode mode changes to Away, Home, or Standby."}
{"original_description": "Choose your location; if winds are stronger than a value of your choice (for instance: 10 km/h), close (or open) your shutters or venetians.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Gewiss Smart Home IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gewiss_home.invoke_method", "Filter code method": "GewissHome.invokeMethod.skip(string?: reason)", "Runtime method": "runAction(\"gewiss_home.invoke_method\", {})"}, "action_details": [{"section": "Action fields", "title": "Method functional channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command would you like to execute in the smart home?", "Helper text": "Choose what you want this applet to do in your home", "Slug": "method_functional_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Method param\nText input > Other", "description": "Text input > Other", "details": {"Label": "[If needed] How much?", "Helper text": "Please add a parameter to your command, if it is needed", "Slug": "method_param", "Required": "false", "Can have default value": "true", "Filter code method": "GewissHome.invokeMethod.setMethod Param(string: method_param)"}}], "filter_code": "function filterCode() {\n  var WindSpeedMph = Weather.windSpeedRisesAbove.WindSpeedMph;\n  var WindSpeedKph = Weather.windSpeedRisesAbove.WindSpeedKph;\n  var WindDirection = Weather.windSpeedRisesAbove.WindDirection;\n  var ForecastUrl = Weather.windSpeedRisesAbove.ForecastUrl;\n  var CheckTime = Weather.windSpeedRisesAbove.CheckTime;\n  \n  if (WindSpeedMph > parseInt(process.argv[2])) {\n    GewissHome.invokeMethod(\"shuttersClose\", \"Strong winds detected\");\n  } else {\n    GewissHome.invokeMethod.skip(\"Weak winds, no action needed\");\n  }\n}", "intent": "Choose a location and if the wind speed is stronger than a specified value, close or open shutters or venetians."}
{"original_description": "Close garage on Adafruit IO feed event.", "trigger_channel": "Adafruit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "adafruit.monitor_your_data"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Feed", "Helper text": "The name of the feed to check.", "Slug": "feed_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Operator\nDropdown list", "description": "Dropdown list", "details": {"Label": "Relationship", "Helper text": "Relationship between two values.", "Slug": "operator", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Value\nText input", "description": "Text input", "details": {"Label": "Value", "Helper text": "The value to compare against.", "Slug": "value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Feed name\nThe name of your feed.", "description": "The name of your feed.", "details": {"Slug": "feed_name", "Filter code": "Adafruit.monitorYourData.FeedName", "Type": "String", "Example": "humidity"}}, {"section": "Ingredients", "title": "Feed value\nThe value for the given feed.", "description": "The value for the given feed.", "details": {"Slug": "value", "Filter code": "Adafruit.monitorYourData.FeedValue", "Type": "String", "Example": "22"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Adafruit.monitorYourData.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Operator\nThe operator text used to compare the values.", "description": "The operator text used to compare the values.", "details": {"Slug": "operator", "Filter code": "Adafruit.monitorYourData.Operator", "Type": "String", "Example": "greater than"}}, {"section": "Ingredients", "title": "Trigger value\nThe value used in the trigger to compare against your feed data.", "description": "The value used in the trigger to compare against your feed data.", "details": {"Slug": "trigger_value", "Filter code": "Adafruit.monitorYourData.TriggerValue", "Type": "String", "Example": "34"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Adafruit.monitorYourData.Operator === 'greater than') {\n  if (parseInt(Adafruit.monitorYourData.FeedValue) > parseInt(Adafruit.monitorYourData.TriggerValue)) {\n    Garadget.closeDoor()\n  } else {\n    Garadget.closeDoor.skip('Trigger value is not greater than feed value')\n  }\n} else {\n  Garaget.closeDoor.skip('Invalid operator')\n}", "intent": "Automatically close the garage door when an Adafruit IO event is triggered."}
{"original_description": "If your SmartThings device is closed, then turn on your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.ClosedAt !== null) {\n  if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n    if (SmartthingsV2.closedSmartthings.Device === \"Closed at Bedroom contact\") {\n      Spotcam.turnOffSpotcam.skip(\"Device is already closed\")\n    } else {\n      Spotcam.turnOffSpotcam()\n    }\n  } else {\n    Spotcam.turnOffSpotcam.skip(\"Only bedroom contact devices can be recognized\")\n  }\n} else {\n  Spotcam.turnOffSpotcam.skip(\"SmartThings device not closed\")\n}", "intent": "If the SmartThings device is closed, then automatically turn on the SpotCam."}
{"original_description": "If your SmartThings device is closed, then turn on your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_alert", "Filter code method": "Spotcam.turnOnAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.ClosedAt !== null) {\n  if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n    Spotcam.turnOnAlert(SmartthingsV2.closedSmartthings.Device)\n  } else {\n    Spotcam.turnOnAlert.skip(\"Device name not recognized\")\n  }\n} else {\n  Spotcam.turnOnAlert.skip(\"No device closed\")\n}", "intent": "Automatically turn on SpotCam Alert when a SmartThings device is closed."}
{"original_description": "Close garage door when Netatmo weather station detects strong winds.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.wind-average-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.windAverageAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.windAverageAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target wind speed kmh\nThe target wind speed in km/h.", "description": "The target wind speed in km/h.", "details": {"Slug": "TargetWindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedKmh", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Target wind speed mph\nThe target wind speed in mph.", "description": "The target wind speed in mph.", "details": {"Slug": "TargetWindSpeedMph", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Wind speed kmh\nThe measured wind speed in km/h.", "description": "The measured wind speed in km/h.", "details": {"Slug": "WindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.WindSpeedKmh", "Type": "String", "Example": "13"}}, {"section": "Ingredients", "title": "Wind speed mph\nThe measured wind speed in mph.", "description": "The measured wind speed in mph.", "details": {"Slug": "WindSpeedMph", "Filter code": "Netatmo.windAverageAbove.WindSpeedMph", "Type": "String", "Example": "8"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var windSpeedKmh = Netatmo.windAverageAbove.WindSpeedKmh\nif (windSpeedKmh > parseInt(Netatmo.windAverageAbove.threshold_value)) {\n  if (windSpeedKmh > parseInt(Netatmo.windAverageAbove.target_wind_speed_kmh)) {\n    Garadget.closeDoor.skip(\"Wind speed too high: \" + windSpeedKmh)\n  } else {\n    Garadget.closeDoor()\n  }\n}", "intent": "Close the garage door when Netatmo weather station detects strong winds."}
{"original_description": "Open garage door with the press on Thinga button.", "trigger_channel": "Thinga", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "thinga.thinga_is_clicked"}, "trigger_details": [{"section": "Trigger fields", "title": "Fetchit device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Helper text": "Your unique Thinga Device ID", "Slug": "fetchit_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Button\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Number", "Helper text": "Button Number", "Slug": "button_id", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Thinga click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Click Type", "Helper text": "Thing Click Type", "Slug": "thinga_click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nButton ID on Thinga", "description": "Button ID on Thinga", "details": {"Slug": "button_id", "Filter code": "Thinga.thingaIsClicked.ButtonID", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Date time\nTime at which Thinga was clicked.", "description": "Time at which Thinga was clicked.", "details": {"Slug": "date_time", "Filter code": "Thinga.thingaIsClicked.DateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Thinga click type\nThinga Click Type", "description": "Thinga Click Type", "details": {"Slug": "thinga_click_type", "Filter code": "Thinga.thingaIsClicked.ThingaClickType", "Type": "String", "Example": "click"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "const buttonId = Thinga.thingaIsClicked.ButtonID;\nconst thingaClickType = Thinga.thingaIsClicked.ThingaClickType;\nif (fetchit_device_id === \"Your unique Thinga Device ID\" && button_id === \"Button Number\" && thinga_click_type === \"Thing Click Type\") {\n  Garadget.closeDoor(\"Open garage door with the press on Thinga button\");\n}", "intent": "When the Thinga button is pressed, check if it's a specific device ID, button number, and click type. If these conditions are met, open the garage door."}
{"original_description": "If your SmartThings device is closed, then turn off your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_alert", "Filter code method": "Spotcam.turnOffAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.ClosedAt !== \"\") {\n  if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n    if (!Spotcam.turnOffAlert(Spotcam.sn, \"Automatic\")) {\n      Spotcam.turnOffAlert.skip(\"Error turning off alert\")\n    }\n  } else {\n    Spotcam.turnOffAlert(skip(\"Device not recognized\"))\n  }\n}", "intent": "Automatically turn off SpotCam Alert when SmartThings device is closed."}
{"original_description": "If your SmartThings device is closed, then turn off your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.ClosedAt !== \"\") {\n  if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n    Spotcam.turnOffSpotcam.skip(\"Device is closed for bedroom\")\n  } else {\n    // Other devices\n  }\n}", "intent": "If the SmartThings device is closed, then turn off the SpotCam automatically."}
{"original_description": "Close your blinds controlled by Niko Home Control when the temperature rises above a certain threshold via your Netatmo weather station.  ", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "Niko Home Control", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nikohomecontrol.set_motor_position", "Filter code method": "Nikohomecontrol.setMotorPosition.skip(string?: reason)", "Runtime method": "runAction(\"nikohomecontrol.set_motor_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Motor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Motor", "Helper text": "Motor device", "Slug": "motor", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position value\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Helper text": "Desired position value", "Slug": "position_value", "Required": "true", "Can have default value": "false"}}], "filter_code": "var TemperatureThreshold = parseInt(Trigger.threshold_value.value);\nvar TemperatureUnits = Trigger.threshold_units.value;\nvar MeasuredTemperatureF = parseFloat(Trigger.MeasuredTemperatureF.value);\n\nif (TemperatureUnits === \"Fahrenheit\" && MeasuredTemperatureF > TemperatureThreshold) {\n  Nikohomecontrol.setMotorPosition(\"Blinds\", \"Close\");\n} else if (TemperatureUnits === \"Celsius\" && (MeasuredTemperatureC + 1.8 * 3.14) > TemperatureThreshold) {\n  Nikohomecontrol.setMotorPosition(\"Blinds\", \"Close\");\n} else {\n  Nikohomecontrol.setMotorPosition.skip(\"No temperature rise above threshold detected\");\n}", "intent": "Close blinds controlled by Niko Home Control when Netatmo weather station measures temperature above a certain threshold."}
{"original_description": "Oh no! Your robot is stuck somewhere inside your home. Send yourself an SMS text to remind you to free your robot when you get home. \n", "trigger_channel": "iRobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "irobot.robot_stuck"}, "trigger_details": [{"section": "Trigger fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nThe time the robot got stuck.", "description": "The time the robot got stuck.", "details": {"Slug": "iso_timestamp", "Filter code": "Irobot.robotStuck.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "var RobotName = iRobot.robotStuck.get(\"robot_name\");\nvar Timestamp = Irobot.robotStuck.Timestamp;\nif (Timestamp.getHours() < 7 || Timestamp.getHours() > 22) {\n  AndroidMessages.sendAMessage.skip(\"Outside of active hours\")\n} else if (Timestamp.getDay() === 0 || Timestamp.getDay() === 6) {\n  AndroidMessages.sendAMessage.skip(\"Weekend - automation disabled\")\n} else {\n  var message = \"Robot '\" + RobotName + \"' is stuck since \" + Timestamp;\n  AndroidMessages.sendAMessage.setText(message);\n}", "intent": "Remind the user to free their stuck robot by sending a SMS when they return home."}
{"original_description": "Oh no motion detected! Launch your security scenario with Gideon and instantly check what's going on. Your locks can be closed, lights up and cameras start recording.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DepartedAt = SmartthingsV2.newNotPresentSmartthings.DepartedAt\nvar Now = new Date()\nif (!Meta.currentUserTime.weekend() && (DepartedAt - 30*60000) < Now.getTime()) {\n    var DeviceName = SmartthingsV2.newNotPresentSmartthings.DeviceName\n    if (DeviceName !== \"\") {\n        Gideon.launchScenario(`\"${DeviceName}\"`, \"No motion detected\")\n    } else {\n        Gideon.launchScenario.skip(\"No device name provided\")\n    }\n} else {\n    Gideon.launchScenario.skip(\"Weekend or recent departure\")\n}", "intent": "Check if there is no motion detected, if it is not a weekend, and the departed at time is earlier than 30 minutes ago. If these conditions are met, launch the selected scenario from Gideon with the given reason."}
{"original_description": "Receive a notification when your Netatmo registers a temperature drop below a specific amount you choose.\nNote: IFTTT app is needed for this Applet.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "", "intent": "Receive a notification when your Netatmo Weather Station registers a temperature drop below a specific amount you choose."}
{"original_description": "Cold climes now have a silver lining... every time the temperature hits freezing, you’ll save a set amount toward one of your Goals.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit;\nif (tempFahrenheit === \"32\") {\n  var amount = \"5\"; // Set the desired amount\n  Qapital.saveTowardGoal(amount, \"Freezing temperature detected\");\n} else {\n  Qapital.saveTowardGoal.skip(\"Not freezing today\");\n}", "intent": "Save a set amount toward one of your Goals when the temperature hits freezing."}
{"original_description": "Upload details from Android phone calls made to your Unforgettable Me account. These details include: contact name, to number, start time and duration. ", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.place_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.placeAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.placeAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "To number\nThe number that received the call.", "description": "The number that received the call.", "details": {"Slug": "ToNumber", "Filter code": "AndroidPhone.placeAPhoneCall.ToNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.placeAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.placeAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var contactName = AndroidPhone.placeAPhoneCall.ContactName\nvar occurredAt = new Date(AndroidPhone.placeAPhoneCall.OccurredAt)\nvar toNumber = AndroidPhone.placeAPhoneCall.ToNumber\nvar callLength = AndroidPhone.placeAPHONECall.CallLength\nvar deviceName = AndroidPhone.placeAPhoneCall.DeviceName\n\nif (!UnforgettableMe.uploadData.skip) {\n  UnforgettableMe.uploadData.setBody(JSON.stringify({\n    contact_name: contactName,\n    to_number: toNumber,\n    start_time: occurredAt,\n    duration: callLength\n  }))\n  UnforgettableMe.uploadData.setAugmenterName(deviceName)\n}", "intent": "Upload details from Android phone calls made to Unforgettable Me account."}
{"original_description": "Upload details from Android phone calls answered to your Unforgettable Me account. These details include: contact name, from number, start time and duration.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var ContactName = AndroidPhone.receiveAPhoneCall.ContactName;\nvar OccurredAt = AndroidPhone.receiveAPhoneCall.OccurredAt;\nvar FromNumber = AndroidPhone.receiveAPhoneCall.FromNumber;\nvar CallLength = AndroidPhone.receiveAPhoneCall.CallLength;\nvar DeviceName = AndroidPhone.receiveAPhoneCall.DeviceName;\n\nif (UnforgettableMe.uploadData) {\n  UnforgettableMe.uploadData.setBody({\n    \"Contact Name\": ContactName,\n    \"From Number\": FromNumber,\n    \"Started at\": OccurredAt,\n    \"Duration\": CallLength,\n    \"Device Name\": DeviceName\n  });\n}", "intent": "Upload details from Android phone calls answered to Unforgettable Me account. This includes contact name, from number, start time and duration."}
{"original_description": "This Applet automatically saves trending GIFs from Giphy in a Dropbox folder of your choosing.", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.trending"}, "trigger_details": [{"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.trending.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.trending.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF Image URL for posting GIFs on tumblr.", "description": "GIF Image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.trending.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.trending.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.trending.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.trending.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_date", "Filter code": "Giphy.trending.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "var url = Giphy.trending.URL\nif (url !== \"\") {\n  var filename = \"Giphy Trending GIF (\" + Date.now() + \").gif\"\n  var filePath = \"IFTTT/Giphy/Trending/\" // Default path, can be overridden by user input\n  if (actionDetails.path !== \"\") {\n    filePath = actionDetails.path\n  }\n  Dropbox.addFileFromUrl.setUrl(url)\n  .setFilename(filename)\n  .setPath(filePath)\n  .run()\n} else {\n  Dropbox.addFileFromUrl.skip(\"No GIF URL found\")\n}", "intent": "This Applet saves trending GIFs from Giphy in a Dropbox folder of your choice."}
{"original_description": "Record to Unforgettable Me any new Bitly Bitlink", "trigger_channel": "Bitly", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bitly.new_public_bitmark_bitly"}, "trigger_details": [{"section": "Ingredients", "title": "Long url\nThe URL that you bitlinked.", "description": "The URL that you bitlinked.", "details": {"Slug": "LongUrl", "Filter code": "Bitly.newPublicBitmarkBitly.LongUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}, {"section": "Ingredients", "title": "Short url\nThe URL that you bitmarked, shortened.", "description": "The URL that you bitmarked, shortened.", "details": {"Slug": "ShortUrl", "Filter code": "Bitly.newPublicBitmarkBitly.ShortUrl", "Type": "String", "Example": "http://bit.ly/axcv3r"}}, {"section": "Ingredients", "title": "Title\nThe bitmark title, usually the page title at that URL.", "description": "The bitmark title, usually the page title at that URL.", "details": {"Slug": "Title", "Filter code": "Bitly.newPublicBitmarkBitly.Title", "Type": "String", "Example": "A blog about ifttt"}}, {"section": "Ingredients", "title": "Tags\nTags comma seperated.", "description": "Tags comma seperated.", "details": {"Slug": "Tags", "Filter code": "Bitly.newPublicBitmarkBitly.Tags", "Type": "String", "Example": "cool, web, interface"}}, {"section": "Ingredients", "title": "Notes\nThe note you leave on a bitmark, blank otherwise.", "description": "The note you leave on a bitmark, blank otherwise.", "details": {"Slug": "Notes", "Filter code": "Bitly.newPublicBitmarkBitly.Notes", "Type": "String", "Example": "So cool!"}}, {"section": "Ingredients", "title": "Created at\nDate and time you created bitmark.", "description": "Date and time you created bitmark.", "details": {"Slug": "CreatedAt", "Filter code": "Bitly.newPublicBitmarkBitly.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var LongUrl = Bitly.newPublicBitmarkBitly.LongUrl\nvar ShortUrl = Bitly.newPublicBitmarkBitly.ShortUrl\nvar Title = Bitly.newPublicBitmarkBitly.Title\nvar Tags = Bitly.newPublicBitmarkBitly.Tags\nvar Notes = Bitly.newPublicBitmarkBitly.Notes\nvar CreatedAt = Bitly.newPublicBitmarkBitly.CreatedAt\n\nif (Title !== \"\" && ShortUrl !== \"\") {\n  UnforgettableMe.uploadData.setBody(JSON.stringify({\n    \"start_date\": CreatedAt,\n    \"end_date\": CreatedAt,\n    \"body\": \"New Bitlink: \" + ShortUrl + \"\\n\\nTags: \" + Tags + \"\\n\\nNotes: \" + Notes\n  }))\n} else {\n  UnforgettableMe.uploadData.skip(\"Insufficient information\")\n}", "intent": "Record to Unforgettable Me any new Bitly Bitlink"}
{"original_description": "Upload details from Obfuscated Android phone calls made to your Unforgettable Me account. These details include: obfuscated number, start time and duration. ", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.place_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.placeAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.placeAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "To number\nThe number that received the call.", "description": "The number that received the call.", "details": {"Slug": "ToNumber", "Filter code": "AndroidPhone.placeAPhoneCall.ToNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.placeAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.placeAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var ContactName = AndroidPhone.placeAPhoneCall.ContactName\nvar OccurredAt = AndroidPhone.placeAPhoneCall.OccurredAt\nvar ToNumber = AndroidPhone.placeAPhoneCall.ToNumber\nvar CallLength = AndroidPhone.placeAPhoneCall.CallLength\nvar DeviceName = AndroidPhone.placeAPhoneCall.DeviceName\nif (UnforgettableMe.uploadData.isAllowed()) {\n  UnforgettableMe.uploadData.setBody({\"start_date\": OccurredAt, \"end_date\": OccurredAt, \"body\": \"Obfuscated call from \" + ContactName + \" to \" + ToNumber + \" on device \" + DeviceName})\n  if (CallLength > 0) {\n    UnforgettableMe.uploadData.setAugmenterName(\"Obfuscated Android Call\")\n  } else {\n    UnforgettableMe.uploadData.setAugmenterName(\"Short Obfuscated Android Call\")\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Upload not allowed\")\n}", "intent": "Upload data from an Obfuscated Android phone call to Unforgettable Me account, including obfuscated number, start time and duration."}
{"original_description": "Upload details from Obfuscated Android phone calls answered to your Unforgettable Me account. These details include: obfuscated number, start time and duration. ", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (AndroidPhone.receiveAPhoneCall.CallLength > 0) {\n  var body = JSON.stringify({\"start_date\": \"2022-01-01T00:00:00Z\", \"end_date\": \"2022-01-01T00:00:00Z\", \"body\": AndroidPhone.receiveAPhoneCall.ContactName + \"\\n\" + AndroidPhone.receiveAPhoneCall.OccurredAt + \"\\n\\n\" + \"Duration: \" + AndroidPhone.receiveAPhoneCall.CallLength + \" seconds from number: \" + AndroidPhone.receiveAPhoneCall.FromNumber})\n  UnforgettableMe.uploadData.setBody(body)\n  if (AndroidPhone.receiveAPhoneCall.device_name) {\n    UnforgettableMe.uploadData.setAugmenterName(AndroidPhone.receiveAPhoneCall.device_name.replace(/ /g, '').toUpperCase())\n  } else {\n    UnforgettableMe.uploadData.setAugmenterName(\"Unknown\")\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"No valid call data received\")\n}", "intent": "Upload call details from Android phone calls answered to Unforgettable Me account, including obfuscated number, start time and duration."}
{"original_description": "Upload any new Instagram photos to your Unforgettable Me account.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var Caption = Instagram.anyNewPhotoByYou.Caption\nvar Url = Instagram.anyNewPhotoByYou.Url\nvar SourceUrl = Instagram.anyNewPhotoByYou.SourceUrl\nvar CreatedAt = Instagram.anyNewPhotoByYou.CreatedAt\nvar EmbedCode = Instagram.anyNewPhotoByYou.EmbedCode\n\nif (Caption !== \"\" && Url !== \"\" && SourceUrl !== \"\") {\n  var body = \"{\\\"start_date\\\": \\\"\\\", \\\"end_date\\\": \\\"\\\"}\"\n  UnforgettableMe.uploadData.setBody(body)\n  UnforgettableMe.uploadData.setAugmenterName(\"InstagramPhoto\")\n  UnforgettableMe.uploadData.skip()\n} else {\n  UnforgettableMe.uploadData.skip(\"Missing required fields\")\n}", "intent": "Upload new Instagram photos to Unforgettable Me account."}
{"original_description": "A great way for quick separating and syncing\nscreenshots from your iPhone to a Dropbox\nfolder named \"IFTTT.\"", "trigger_channel": "iOS Photos", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_photos.ios_new_screenshot"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "IosPhotos.iosNewScreenshot.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "IosPhotos.iosNewScreenshot.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Album name\nThe photo album on your phone that you saved the photo to.", "description": "The photo album on your phone that you saved the photo to.", "details": {"Slug": "AlbumName", "Filter code": "IosPhotos.iosNewScreenshot.AlbumName", "Type": "String", "Example": "Pets"}}, {"section": "Ingredients", "title": "Taken date\nThe time the photo was taken.", "description": "The time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "IosPhotos.iosNewScreenshot.TakenDate", "Type": "String", "Example": "April 19, 2013 at 11:01PM"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "if (IosPhotos.iosNewScreenshot.TemporaryPublicPhotoURL) {\n  var url = IosPhotos.iosNewScreenshot.TemporaryPublicPhotoURL\n  var filename = IosPhotos.iosNewScreenshot.AlbumName + \"_\" + IosPhotos.iosNewScreenshot.TakenDate.replace(/[^a-zA-Z0-9]/g, \"_\") + \".png\"\n  var path = \"IFTTT/\" // default to \"IFTTT\" folder\n  \n  if (IosPhotos.iosNewScreenshot.PublicPhotoURL) {\n    url = IosPhotos.iosNewScreenshot.PublicPhotoURL\n  }\n  \n  Dropbox.addFileFromUrl.setUrl(url)\n  .setFilename(filename)\n  .setPath(path).runAction(\"dropbox.add_file_from_url\", {})\n} else {\n  Dropbox.addFileFromUrl.skip(\"No screenshot available\")\n}", "intent": "Automatically upload iPhone screenshots to a Dropbox folder named \"IFTTT\" based on trigger settings."}
{"original_description": "Record daily steps from fitbit device", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-daily-activity-summary"}, "trigger_details": [{"section": "Ingredients", "title": "Date\nThe day of activity", "description": "The day of activity", "details": {"Slug": "date", "Filter code": "Fitbit.newDailyActivitySummary.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Total steps\nNumber of steps taken", "description": "Number of steps taken", "details": {"Slug": "total_steps", "Filter code": "Fitbit.newDailyActivitySummary.TotalSteps", "Type": "String", "Example": "10123"}}, {"section": "Ingredients", "title": "Total floors climbed\nNumber of floors climbed", "description": "Number of floors climbed", "details": {"Slug": "total_floors_climbed", "Filter code": "Fitbit.newDailyActivitySummary.TotalFloorsClimbed", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Total calories burned\nNumber of calories burned from BMR and activity", "description": "Number of calories burned from BMR and activity", "details": {"Slug": "total_calories_burned", "Filter code": "Fitbit.newDailyActivitySummary.TotalCaloriesBurned", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Total elevation gained\nDistance climbed", "description": "Distance climbed", "details": {"Slug": "total_elevation_gained", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGained", "Type": "String", "Example": "200"}}, {"section": "Ingredients", "title": "Total elevation gained unit\nUnit for elevation gain based on your Fitbit preferences", "description": "Unit for elevation gain based on your Fitbit preferences", "details": {"Slug": "total_elevation_gained_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGainedUnit", "Type": "String", "Example": "meters"}}, {"section": "Ingredients", "title": "Total distance covered\nThe total amount of distance covered", "description": "The total amount of distance covered", "details": {"Slug": "total_distance_covered", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCovered", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Total distance covered unit\nUnit for distance covered based on your Fitbit preferences", "description": "Unit for distance covered based on your Fitbit preferences", "details": {"Slug": "total_distance_covered_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit", "Type": "String", "Example": "kilometers"}}, {"section": "Ingredients", "title": "Sedentary minutes\nMinutes in the day you weren't moving much", "description": "Minutes in the day you weren't moving much", "details": {"Slug": "sedentary_minutes", "Filter code": "Fitbit.newDailyActivitySummary.SedentaryMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Lightly active minutes\nMinutes in the day you were moving but not exerting much effort, such as walking", "description": "Minutes in the day you were moving but not exerting much effort, such as walking", "details": {"Slug": "lightly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.LightlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Fairly active minutes\nMinutes in the day you were moving enough to elevate your heart rate", "description": "Minutes in the day you were moving enough to elevate your heart rate", "details": {"Slug": "fairly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.FairlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Very active minutes\nMinutes in the day doing cardio workouts and high-intensity activities like jogging and running", "description": "Minutes in the day doing cardio workouts and high-intensity activities like jogging and running", "details": {"Slug": "very_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.VeryActiveMinutes", "Type": "String", "Example": "20"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Date !== null) {\n  var body = '{\"start_date\":\"' + Date + '\", \"end_date\":\"' + Date + '\", \"steps\":' + total_steps + '}';\n  if (total_calories_burned !== null && fairly_active_minutes > 0 || very_active_minutes > 0) {\n    UnforgettableMe.uploadData.setBody(body).setAugmenterName(augmenter_name)\n  } else {\n    UnforgettableMe.uploadData.skip(\"No activity detected\")\n  }\n}", "intent": "Record daily steps from Fitbit device and upload the data to Unforgettable Me."}
{"original_description": "Upload any new Instagram video to your Unforgettable Me account.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var Caption = Instagram.anyNewVideoByYouInstagram.Caption\nvar URL = Instagram.anyNewVideoByYouInstagram.URL\nvar VideoSourceURL = Instagram.anyNewVideoByYouInstagram.VideoSourceURL\nvar ImageThumbnailURL = Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL\nvar CreatedAt = Instagram.anyNewVideoByYouInstagram.CreatedAt\nvar EmbedCode = Instagram.anyNewVideoByYouInstagram.EmbedCode\n\nif (EmbedCode) {\n  UnforgettableMe.uploadData.setBody(`{\"start_date\": \"${CreatedAt}\", \"end_date\": \"${CreatedAt}\", \"body\": \"<iframe src=\\\"${URL}\\\" width=\\\"612\\\" height=\\\"710\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowtransparency=\\\"true\\\"></iframe>\"}`)\n} else {\n  UnforgettableMe.uploadData.skip(\"No embed code provided\")\n}\n\nUnforgettableMe.uploadData.setAugmenterName(`Unforgettable Me - Instagram Video`)", "intent": "Upload any new Instagram video to the Unforgettable Me account by setting the body and augmenter name of the upload action."}
{"original_description": "Upload any new Flickr public photos to your Unforgettable Me account.", "trigger_channel": "Flickr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flickr.any_new_public_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Flickr.anyNewPublicPhoto.Title", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Description\nOptional photo description.", "description": "Optional photo description.", "details": {"Slug": "Description", "Filter code": "Flickr.anyNewPublicPhoto.Description", "Type": "String", "Example": "Taken at my birthday party!"}}, {"section": "Ingredients", "title": "Flickr url\nThe long URL to the photo's Flickr page.", "description": "The long URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrl", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrl", "Type": "String", "Example": "http://www.flickr.com/photos/sh4de/5197127926/"}}, {"section": "Ingredients", "title": "Flickr url short\nThe shortened URL to the photo's Flickr page.", "description": "The shortened URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrlShort", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrlShort", "Type": "String", "Example": "http://flic.kr/p/4mdhBE"}}, {"section": "Ingredients", "title": "Source url\nURL to the largest available flickr image file.", "description": "URL to the largest available flickr image file.", "details": {"Slug": "SourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.SourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Original source url\nURL to the orginal image file if available.", "description": "URL to the orginal image file if available.", "details": {"Slug": "OriginalSourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.OriginalSourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Uploaded date\nDate and time the photo was uploaded.", "description": "Date and time the photo was uploaded.", "details": {"Slug": "UploadedDate", "Filter code": "Flickr.anyNewPublicPhoto.UploadedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Taken date\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "Flickr.anyNewPublicPhoto.TakenDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Tags\nTags added to the photo.", "description": "Tags added to the photo.", "details": {"Slug": "Tags", "Filter code": "Flickr.anyNewPublicPhoto.Tags", "Type": "String", "Example": "baby, pumpkin"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Flickr.anyNewPublicPhoto.Title !== \"\") {\n  UnforgettableMe.uploadData.setBody({ \n    \"start_date\": Flickr.anyNewPublicPhoto.UploadedDate, \n    \"end_date\": Flickr.anyNewPublicPhoto.UploadedDate, \n    \"body\": JSON.stringify({\n      Title: Flickr.anyNewPublicPhoto.Title,\n      Description: Flickr.anyNewPublicPhoto.Description\n    }),\n    \"augmenter_name\": \"Flickr Public Photo\"\n  }).skip(\"No body provided\")\n} else {\n  UnforgettableMe.uploadData.skip(\"No title or description provided\")\n}", "intent": "Upload new Flickr public photos to Unforgettable Me account."}
{"original_description": "Save device data to Google sheet.", "trigger_channel": "Huma-i", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "Huma_i.huma_device_sensor_data_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Huma-i?", "Helper text": "Humai Device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "createdat", "Filter code": "HumaI.humaDeviceSensorDataTrigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2\nCO2", "description": "CO2", "details": {"Slug": "co2", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Co2", "Type": "String", "Example": "CO2"}}, {"section": "Ingredients", "title": "Voc\nVoc", "description": "Voc", "details": {"Slug": "voc", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Voc", "Type": "String", "Example": "Voc"}}, {"section": "Ingredients", "title": "Pm10\nPM10", "description": "PM10", "details": {"Slug": "pm100", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Pm10", "Type": "String", "Example": "PM10"}}, {"section": "Ingredients", "title": "Pm2\nPM2.5", "description": "PM2.5", "details": {"Slug": "pm25", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Pm2", "Type": "String", "Example": "PM2.5"}}, {"section": "Ingredients", "title": "Pm1\nPM1.0", "description": "PM1.0", "details": {"Slug": "pm10", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Pm1", "Type": "String", "Example": "PM1.0"}}, {"section": "Ingredients", "title": "Temperature\nTemperature", "description": "Temperature", "details": {"Slug": "temperature", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Temperature", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Humidity\nHumidity", "description": "Humidity", "details": {"Slug": "humidity", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Humidity", "Type": "String", "Example": "Humidity"}}, {"section": "Ingredients", "title": "Home name\nHomeName", "description": "HomeName", "details": {"Slug": "homename", "Filter code": "HumaI.humaDeviceSensorDataTrigger.HomeName", "Type": "String", "Example": "HomeName"}}, {"section": "Ingredients", "title": "Room name\nRoomName", "description": "RoomName", "details": {"Slug": "roomname", "Filter code": "HumaI.humaDeviceSensorDataTrigger.RoomName", "Type": "String", "Example": "RoomName"}}, {"section": "Ingredients", "title": "Device name\nDeviceName", "description": "DeviceName", "details": {"Slug": "devicename", "Filter code": "HumaI.humaDeviceSensorDataTrigger.DeviceName", "Type": "String", "Example": "DeviceName"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var filename = action.filename\nvar formattedRow = action.formatted_row\nvar path = action.path || \"IFTTT\"\n\nif (device_id === null) {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No device selected\")\n} else if (createdat === null) {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No created at specified\")\n} else {\n  var row = `${device_id}|||${co2}|||${voc}|||${pm10}|||${pm25}|||${pm1}|||${temperature}|||${humidity}|||${homename}|||${roomname}|||${devicename}`\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename)\n    .setFormattedRow(formattedRow)\n    .setPath(path)\n    .append(row)\n}", "intent": "Save device data from Huma-i to Google Sheets."}
{"original_description": "If a stock drops below a set price, buy or sell it!", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.current_price_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Price\nText input > Other", "description": "Text input > Other", "details": {"Label": "Price", "Slug": "price", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.currentPriceDropsBelow.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.currentPriceDropsBelow.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last trade price of the stock.", "description": "The last trade price of the stock.", "details": {"Slug": "Price", "Filter code": "Finance.currentPriceDropsBelow.Price", "Type": "String", "Example": "603.7"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.currentPriceDropsBelow.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.currentPriceDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "var StockName = Finance.currentPriceDropsBelow.StockName\nvar Price = Finance.currentPriceDropsBelow.Price\nif (parseFloat(Price) < parseFloat(Symbol.price)) {\n  Alpaca.placeMarketOrder.setSymbol(StockName).setSide(\"buy\").setQty(\"100\")\n} else if (parseFloat(Price) > parseFloat(Symbol.price)) {\n  Alpaca.placeMarketOrder.setSymbol(StockName).setSide(\"sell\").setQty(\"100\")\n} else {\n  Alpaca.placeMarketOrder.skip(\"No price change detected\")\n}", "intent": "Automatically buy or sell a stock when its price drops below a set price."}
{"original_description": "Log Weight from Fitbit Scales to Unforgettable", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-weight-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Bmi\nYour body mass index", "description": "Your body mass index", "details": {"Slug": "BMI", "Filter code": "Fitbit.newWeightLogged.BMI", "Type": "String", "Example": "19.62"}}, {"section": "Ingredients", "title": "Weight\nYour weight", "description": "Your weight", "details": {"Slug": "Weight", "Filter code": "Fitbit.newWeightLogged.Weight", "Type": "String", "Example": "65.0"}}, {"section": "Ingredients", "title": "Weight unit\nThe unit of your weight measurement (kilograms, pounds, stone)", "description": "The unit of your weight measurement (kilograms, pounds, stone)", "details": {"Slug": "WeightUnit", "Filter code": "Fitbit.newWeightLogged.WeightUnit", "Type": "String", "Example": "kilograms"}}, {"section": "Ingredients", "title": "Date\nThe date and time of the weight log entry", "description": "The date and time of the weight log entry", "details": {"Slug": "Date", "Filter code": "Fitbit.newWeightLogged.Date", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Fitbit.newWeightLogged.BMI !== \"\") {\n  UnforgettableMe.uploadData.setBody(`{\"start_date\": \"${Date}\", \"end_date\": \"${Date}\", \"body_mass_index\": \"${Fitbit.newWeightLogged.BMI}\", \"weight\": ${Fitbit.newWeightLogged.Weight}, \"weight_unit\": \"${Fitbit.newWeightLogged.WeightUnit}\"}`)\n  .setAugmenterName(\"Fitbit Weight Log\")\n  .skip()\n} else {\n  UnforgettableMe.uploadData.skip(\"No weight log data found\")\n}", "intent": "Log weight data from Fitbit Scales to Unforgettable Me when a new weight log entry is made."}
{"original_description": "Automatically trigger your scene when the current temperature drops to a certain value", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AICO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aico.run_scene", "Filter code method": "Aico.runScene.skip(string?: reason)", "Runtime method": "runAction(\"aico.run_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Please select a scene", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= parseFloat($(\"#temperature\").val())) {\n  if ($(\"#degrees_type\").val() === \"F\") {\n    Aico.runScene(\"scene_id\")\n  } else if ($(\"#degrees_type\").val() === \"C\") {\n    Aico.runScene.skip(\"Only Fahrenheit is supported for this scene\")\n  }\n}", "intent": "Trigger a scene when the current temperature drops to a certain value."}
{"original_description": "Check the list before you head to the comic book store or the library. Happy reading! ", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var BestSellerList = Nytimes.newBookOnABestSellerList;\nif (BestSellerList) {\n  var formatted_row = \"|||\";\n  formatted_row += BestSellerList.Title + \"|||\";\n  formatted_row += BestSellerList.Description + \"|||\";\n  formatted_row += BestSellerList.BookCoverImageUrl + \"|||\";\n  formatted_row += BestSellerList.Author + \"|||\";\n  formatted_row += BestSellerList.Publisher + \"|||\";\n  formatted_row += BestSellerList.BestSellerCategory + \"|||\";\n  formatted_row += BestSellerList.Rank + \"|||\";\n  formatted_row += BestSellerList.WeeksOnList + \"|||\";\n  formatted_row += BestSellerList.BestSellerListedDate + \"|||\";\n  formatted_row += BestSellerList.ISBN;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Best Sellers List\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formatted_row);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No book on the best seller list\")\n}", "intent": "Check if a book is on the best seller list and append its details to Google Sheets."}
{"original_description": "Your JotForm online survey form collects all the survey results easily and quickly. This applet collects all the completed forms and automatically backs them up in Google Docs. ", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Google Docs", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_docs.append_to_google_doc", "Filter code method": "GoogleDocs.appendToGoogleDoc.skip(string?: reason)", "Runtime method": "runAction(\"google_docs.append_to_google_doc\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "Document name", "Helper text": "Will create a new file if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Content", "Helper text": "some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setPath(string: path)"}}], "filter_code": "if (Jotform.latestFormSubmission.TotalSubmissions > 0) {\n  let ip = Jotform.latestFormSubmission.IP;\n  let formTitle = Jotform.latestFormSubmission.FormTitle;\n  let submissionDateTime = Jotform.latestFormSubmission.SubmissionDateTime;\n  let totalSubmissions = Jotform.latestFormSubmission.TotalSubmissions;\n  let formId = Jotform.latestFormSubmission.FormID;\n  let submissionId = Jotform.latestFormSubmission.SubmissionID;\n  let richTextData = Jotform.latestFormSubmission.RichTextData;\n  let spreadsheetData = Jotform.latestFormSubmission.SpreadsheetData;\n  let filteredRichTextData = Jotform.latestFormSubmission.FilteredRichTextData;\n  let filteredSpreadsheetData = Jotform.latestFormSubmission.FilteredSpreadsheetData;\n  let fileUrl = Jotform.latestFormSubmission.FileUrl;\n\n  GoogleDocs.appendToGoogleDoc.skip(\"No new form submission\")\n    .setFilename(Jotform.latestFormSubmission.FormTitle)\n    .setBody('<table><tr><td>E-mail</td>' + johndoe@mail.com + '</td></tr></table>')\n    .setPath('some/folder/path')\n    .runAction(\"google_docs.append_to_google_doc\", {})\n}", "intent": "Check if a new form submission has occurred and automatically backs up the completed forms in Google Docs."}
{"original_description": "Keep your photos in sync. Once they're added to Drive, you can organize them in whatever way you see fit, so you have a complete archive for your business or community. ", "trigger_channel": "Facebook Pages", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "facebook_pages.new_photo_from_page"}, "trigger_details": [{"section": "Ingredients", "title": "Page name\nYour Facebook Page's name.", "description": "Your Facebook Page's name.", "details": {"Slug": "PageName", "Filter code": "FacebookPages.newPhotoFromPage.PageName", "Type": "String", "Example": "The ifttt Office"}}, {"section": "Ingredients", "title": "Link\nThe link to the photo's FacebookPages page, may be private.", "description": "The link to the photo's FacebookPages page, may be private.", "details": {"Slug": "Link", "Filter code": "FacebookPages.newPhotoFromPage.Link", "Type": "String", "Example": "http://www.facebook.com/#!/photo.php?pid=33943077&id=7302486"}}, {"section": "Ingredients", "title": "Image source\nThe URL to the full sized version of the photo itself.", "description": "The URL to the full sized version of the photo itself.", "details": {"Slug": "ImageSource", "Filter code": "FacebookPages.newPhotoFromPage.ImageSource", "Type": "String", "Example": "http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg"}}, {"section": "Ingredients", "title": "Caption\nThe photo's caption.", "description": "The photo's caption.", "details": {"Slug": "Caption", "Filter code": "FacebookPages.newPhotoFromPage.Caption", "Type": "String", "Example": "Wow what a fun night!"}}, {"section": "Ingredients", "title": "Created at\nDate and time photo was uploaded.", "description": "Date and time photo was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "FacebookPages.newPhotoFromPage.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Page url\nThe link to the main Facebook Page.", "description": "The link to the main Facebook Page.", "details": {"Slug": "PageUrl", "Filter code": "FacebookPages.newPhotoFromPage.PageUrl", "Type": "String", "Example": "http://www.facebook.com/pages/The-ifttt-office/108073145941483"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "if (FacebookPages.newPhotoFromPage.PageName === \"The IFTTT Office\") {\n  var url = FacebookPages.newPhotoFromPage.Link\n  var filename = FacebookPages.newPhotoFromPage.Caption.replace(/[^\\w]/g, \"_\")\n  var path = \"IFTTT\"\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(url).setFilename(filename).setPath(path)\n} else {\n  FacebookPages.newPhotoFromPage.skip(\"Invalid Page name\")\n}", "intent": "Synchronize Facebook photos with Google Drive. The script checks if the trigger is a new photo from a specific Facebook Page, then uploads it to Google Drive."}
{"original_description": "Add a single row to the bottom of the first worksheet of a Google Sheet you specify.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var created_at = Knocki.knocki.CreatedAt\nvar device = Knocki.knocki.Device\nvar gesture = Knocki.knocki.Gesture\nvar pattern = Knocki.knocki.Pattern\n\nif (pattern === \"***\") {\n  var filename = \"Code\" // Set default filename if not provided\n  var formatted_row = \"\"\n  \n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename)\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formatted_row)\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No valid gesture detected\")\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.runAction()\n}", "intent": "Add a single row to the bottom of the first worksheet of a Google Sheet you specify, triggered by Knocki."}
{"original_description": "Log every started irrigation on Google Sheets using CloudRain's Smart Garden Irrigation System.", "trigger_channel": "CloudRain Smart Garden Irrigation", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "cloudrain.irrigation_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Zone name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone name", "Helper text": "Select zone name", "Slug": "zone_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Cloudrain.irrigationStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Duration\nPlanned duration in seconds.", "description": "Planned duration in seconds.", "details": {"Slug": "duration", "Filter code": "Cloudrain.irrigationStarted.Duration", "Type": "String", "Example": "300"}}, {"section": "Ingredients", "title": "Zone name\nThe name of the Zone where the irrigation has started", "description": "The name of the Zone where the irrigation has started", "details": {"Slug": "zone_name", "Filter code": "Cloudrain.irrigationStarted.ZoneName", "Type": "String", "Example": "Front Yard"}}, {"section": "Ingredients", "title": "Zone\nThe unique identifier of the Zone where the irrigation has started.", "description": "The unique identifier of the Zone where the irrigation has started.", "details": {"Slug": "zone_id", "Filter code": "Cloudrain.irrigationStarted.ZoneId", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Expected end time\nExpected Time when irrigation will be finished.", "description": "Expected Time when irrigation will be finished.", "details": {"Slug": "expected_end", "Filter code": "Cloudrain.irrigationStarted.ExpectedEndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Irrigation\nUnique id representing each irrigation.", "description": "Unique id representing each irrigation.", "details": {"Slug": "irrigation_id", "Filter code": "Cloudrain.irrigationStarted.IrrigationId", "Type": "String", "Example": "1234"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Cloudrain.irrigationStarted.ZoneName !== \"\") {\n  var formatted_row = \"Started irrigation in Zone \" + Cloudrain.irrigationStarted.ZoneName + \" on \" + Cloudrain.irrigationStarted.CreatedAt;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Irrigation Log\");\n  GoogleSheets.appendToGoogleSpreadSheet.setFormattedRow(formatted_row);\n}", "intent": "This IFTTT automation will log every started irrigation on Google Sheets using CloudRain's Smart Garden Irrigation System."}
{"original_description": "Add a new row to a spreadsheet when an item matches your RSS Feed search.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "", "intent": ""}
{"original_description": "Log when the humidity goes low by adding a row in a google spreadsheet.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.humidity-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get humidity from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How dry you want it to be when it triggers? Example: 30", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.humidityBelow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Humidity\nThe humidity, in percent.", "description": "The humidity, in percent.", "details": {"Slug": "value", "Filter code": "Airthings.humidityBelow.Humidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.humidityBelow.Device", "Type": "String", "Example": "Home - Living room"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "", "intent": ""}
{"original_description": "Add a row to a Google Sheet when you have a new public like of a song on SoundCloud.", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_public_favorite_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newPublicFavoriteTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newPublicFavoriteTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newPublicFavoriteTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newPublicFavoriteTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newPublicFavoriteTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newPublicFavoriteTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Soundcloud.newPublicFavoriteTrack.Title !== \"\") {\n  var formattedRow = \"|||\" + \n    Soundcloud.newPublicFavoriteTrack.Title + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.Description + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.Tags + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.TrackUrl + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.Username + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.UserProfileUrl + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.ImageUrl + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.EmbedCode + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.CreatedAt + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.TrackId + \"||\" + \n    Soundcloud.newPublicFavoriteTrack.UserId;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"SoundCloud Likes\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"No data to append\")\n}", "intent": "Add a new row to a Google Sheet when there is a new public like of a song on SoundCloud."}
{"original_description": "If you're interested in reading the latest update notes, consider using this Applet that sends you an email instead of a notification:", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_version_released"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppVersionReleased.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppVersionReleased.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppVersionReleased.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppVersionReleased.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppVersionReleased.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppVersionReleased.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppVersionReleased.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppVersionReleased.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppVersionReleased.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Release notes\nNotes about the new app release.", "description": "Notes about the new app release.", "details": {"Slug": "release_notes", "Filter code": "AppStore.newAppVersionReleased.ReleaseNotes", "Type": "String", "Example": "+ We made some improvements to..."}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppVersionReleased.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppVersionReleased.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (AppStore.newAppVersionReleased.ReleaseNotes !== \"\") {\n  IfNotifications.sendNotification.setMessage(\"New version of \" + AppStore.newAppVersionReleased.Name + \" released: \" + AppStore.newAppVersionReleased.ReleaseNotes)\n    .skip(\"No release notes found\")\n} else {\n  IfNotifications.sendNotification.skip(\"No new app version released\")\n}", "intent": "Check if there's a new app version released in the Apple App Store and send an email notification with the release notes."}
{"original_description": "Don't worry about a cold house when the temperature drops by making your LightwaveRF TRVs fully open automatically.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LightwaveRF Heating", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_heating.set_trv_position", "Filter code method": "LightwaverfHeating.setTrvPosition.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_heating.set_trv_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Which trv\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which TRV?", "Slug": "which_trv", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What position\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What position?", "Slug": "what_position", "Required": "true", "Can have default value": "true", "Filter code method": "LightwaverfHeating.setTrvPosition.setWhat Position(string: what_position)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 65) { \n  if (Meta.currentUserTime.hour() > 7 && Meta.currentUserTime.hour() < 22) {\n    LightwaveRFHeating.setTrvPosition(\"Which TRV?\", \"Fully open\")\n  } else {\n    LightwaveRFHeating.setTrvPosition.skip(\"Outside of active hours\")\n  }\n}", "intent": "Automatically open LightwaveRF TRVs when the temperature drops below a certain threshold, as reported by Weather Underground."}
{"original_description": "Reward yourself every time you tick off one of your to-dos by saving a set amount toward one of your Goals.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.any_reminder_completed"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.anyReminderCompleted.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.anyReminderCompleted.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.anyReminderCompleted.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.anyReminderCompleted.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.anyReminderCompleted.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Completed date\nThe date the reminder was completed.", "description": "The date the reminder was completed.", "details": {"Slug": "CompletedDate", "Filter code": "IosReminders.anyReminderCompleted.CompletedDate", "Type": "String", "Example": "August 23, 2014 at 11:31PM"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "// Define variables\nvar goal = Qapital.actionFields.goal;\nvar amount = Qapital.actionFields.amount;\n\nif (IosReminders.anyReminderCompleted.Priority === \"High\") {\n  // Skip the action if priority is high\n  Qapital.saveTowardGoal.skip(\"High-priority reminders are ignored\")\n} else {\n  // Check if reminder is completed today\n  var today = new Date();\n  var createdDate = IosReminders.anyReminderCompleted.CreatedDate;\n  var completedDate = IosReminders.anyReminderCompleted.CompletedDate;\n\n  if (createdDate.getDay() === today.getDay()) {\n    // Save money towards the selected goal\n    Qapital.saveTowardGoal(goal, amount);\n  } else {\n    // Skip the action if reminder was created yesterday or earlier\n    Qapital.saveTowardGoal.skip(\"Only completed reminders from today are eligible\")\n  }\n}", "intent": "Rewards user when completing a task by saving money towards one of their goals."}
{"original_description": "Save £1 every time you check-in on Foursquare", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.any_new_checkin"}, "trigger_details": [{"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.anyNewCheckin.Shout", "Type": "String", "Example": "Hanging out with my mates!"}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.anyNewCheckin.VenueName", "Type": "String", "Example": "Sydney Opera House"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.anyNewCheckin.VenueUrl", "Type": "String", "Example": "http://4sq.com/67UmdR"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.anyNewCheckin.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=-33.85733737872545,151.21505856513977&zoom=16&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C-33.85733737872545,151.21505856513977"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.anyNewCheckin.CheckinDate", "Type": "String", "Example": "November 26, 2013 at 11:01AM"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "var Shout = Foursquare.anyNewCheckin.Shout\nvar Amount = 1.00\n\nif (Shout.includes(\"Savings\")) {\n  Dozens.save.setAmount(Amount)\n} else {\n  Dozens.save.skip(\"No savings mentioned in shout\")\n}", "intent": "Save £1 every time you check-in on Foursquare."}
{"original_description": "Turn your Philips Hue lights OFF when the Anyware Energy Saving Mode is activated.", "trigger_channel": "Anyware Services", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AnywareServices.energy_saving_mode_activated"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AnywareServices.energySavingModeActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Location\nWhere energy saving mode was activated", "description": "Where energy saving mode was activated", "details": {"Slug": "location", "Filter code": "AnywareServices.energySavingModeActivated.Location", "Type": "String", "Example": "Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AnywareServices.energySavingModeActivated.CreatedAt) {\n  var reason = 'Energy Saving Mode active'\n  Hue.turnOnAllHue.skip(reason)\n}", "intent": "When the Anyware Energy Saving Mode is activated, turn off all Philips Hue lights."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to rain, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") { \n  Mesh.events.setEventID(\"Rain detected\")\n}", "intent": "Monitor the current weather condition and trigger an event when it changes to rain."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to clear, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Clear\") {\n  Mesh.events.setEventId(\"Weather cleared\")\n    .setText(\"Clear skies ahead!\")\n    .setTriggeredAt(Meta.currentUserTime.now())\n}", "intent": "When the current weather condition changes to clear, trigger a MESH event."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to cloudy, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Cloudy\") {\n  Mesh.events.setEventId(\"Triggered when it's cloudy\")\n}", "intent": "This Trigger monitors changes in the current weather condition. When the current conditions change to cloudy, the Trigger fires."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to snow, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "var Condition = Weather.currentConditionIs.Condition\nif (Condition === \"Snow\") {\n  Mesh.events.event_id = \"Winter Fun\"\n  Mesh.events.text = \"It's snowing outside!\"\n  Mesh.events.triggered_at = new Date()\n  MESH.events.sendEvent(\"Mesh.events\", {\"event_id\": \"Winter Fun\", \"text\": \"It's snowing outside!\", \"triggered_at\": new Date()})\n}", "intent": "Monitor changes in the current weather condition and trigger an action when the condition changes to snow."}
{"original_description": "Get the daily weather sent to Discord. This Applet returns results in Fahrenheit.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Discord", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "discord.post_message_to_channel", "Filter code method": "Discord.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"discord.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which Channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Helper text": "Max limit of 2000 characters. To @mention roles, find the role ID in Discord by running `\\@role`. Ex. 'Hello &lt;@&amp;1234&gt;'", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Allowable mentions\nDropdown list", "description": "Dropdown list", "details": {"Label": "Allowable mentions", "Helper text": "Allows usage of @everyone, &lt;@&amp;(Role ID)&gt;, and &lt;@(User ID)&gt; in the message body", "Slug": "allowable_mentions", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setAllowable Mentions(string: allowable_mentions)"}}], "filter_code": "if (Weather.currentWeatherAtTime.CurrentCondition === \"Rain\") {\n  var message = \"Today's weather forecast: \" + Weather.currentWeatherAtTime.TodaysCondition + \" with high temperature of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and low temperature of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F. The UV index is \" + Weather.currentWeatherAtTime.UvIndex + \". Wind speed is \" + Weather.currentWeatherAtTime.WindSpeedMph + \"mph. Humidity is \" + Weather.currentWeatherAtTime.Humidity + \"% and pollen count is \" + Weather.currentWeatherAtTime.PollenCount;\n  Discord.postMessageToChannel.setMessage(message).skip(\"No rain forecasted\");\n} else {\n  var message = \"Today's weather forecast: \" + Weather.currentWeatherAtTime.TodaysCondition + \" with high temperature of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and low temperature of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F. The UV index is \" + Weather.currentWeatherAtTime.UvIndex + \". Wind speed is \" + Weather.currentWeatherAtTime.WindSpeedMph + \"mph. Humidity is \" + Weather.currentWeatherAtTime.Humidity + \"% and pollen count is \" + Weather.currentWeatherAtTime.PollenCount;\n  Discord.postMessageToChannel.setMessage(message);\n}", "intent": "Get daily weather sent to Discord."}
{"original_description": "Have your LIFX lights automatically turn on at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_on", "Filter code method": "Lifx.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade in duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade in duration", "Helper text": "How long should it take for the lights to fade in.", "Slug": "fade_in_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not available? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; fade_in_duration: 12&quot; for red at 30% brightness, 12 second fade in. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOn.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var SunsetAt = Weather.sunSets.SunsetAt\nif (LIFX.turnOn.supported) {\n  if (Meta.currentUserTime.hour() < 18 || Meta.currentUserTime.hour() > 22) {\n    // Outside of active hours, skip the action\n    LIFX.turnOn.skip(\"Outside of active hours\")\n  } else {\n    LIFX.turnOn()\n  }\n}", "intent": "Automatically turn on LIFX lights at sunset."}
{"original_description": "If it begins to rain then change the light colors to blue", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Hue.setColorAllHue.setBlue()\n}", "intent": "When it begins to rain, change the light colors to blue."}
{"original_description": "Launch a myLink scene when weather condition changes", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.play", "Filter code method": "SomfyMylink.play.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.play\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scene ?", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  SomfyMylink.play(\"Scene with rain theme\")\n} else if (Weather.currentConditionIs.Condition === \"Sunny\") {\n  SomfyMylink.play(\"Scene with sunny theme\")\n}\nelse {\n  SomfyMylink.play.skip(\"No suitable scene found for this weather condition\")\n}", "intent": "This automation will launch a myLink scene when the weather condition changes."}
{"original_description": "Turn off a light within 15 minutes of the sunrise in your location.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "const SunriseAt = Weather.sunRises.SunriseAt\nif (Meta.currentUserTime.hour() < SunriseAt.getHours()) {\n  // Check if it's close to sunrise\n  const MinutesToSunrise = Math.abs((Meta.currentUserTime.minute() - SunriseAt.getMinutes()))\n  if (MinutesToSunrise <= 15) {\n    Kasa.turnOff.skip(\"Too early for the action\")\n  } else {\n    // It's time to turn off the light\n    Kasa.turnOff()\n  }\n} else {\n  // Already past sunrise, no need to perform the action\n  Kasa.turnOff.skip(\"Already after sunrise\")\n}", "intent": "Turn off a light within 15 minutes of sunrise in your location."}
{"original_description": "Give your savings a boost every time it gets hot... save a set amount toward one of your Goals every time the temperature where you are exceeds 75℉.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit;\nif (tempFahrenheit > 75) {\n  Qapital.saveTowardGoal(\"Your Goal\", 10); // Replace with actual goal and amount\n} else {\n  Qapital.saveTowardGoal.skip(\"No temperature exceed\");\n}", "intent": "Give your savings a boost every time it gets hot by saving a set amount towards one of your Goals when the temperature exceeds 75℉."}
{"original_description": "Sets your Nanoleaf Light Panels to a scene at sunset in your region.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_scene", "Filter code method": "Nanoleaf.turnOnScene.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "My scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "my_scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt >= Meta.currentUserTime.now()) {\n  var MyScene = action_details[0].details.MyScenes.value\n  if (MyScene) {\n    Nanoleaf.turnOnScene(MyScene)\n  } else {\n    Nanoleaf.turnOnScene.skip(\"No scene selected\")\n  }\n}", "intent": "Sets Nanoleaf Light Panels to a scene at sunset in the user's location."}
{"original_description": "Now falling snow means rising fortunes... save a set amount toward one of your Goals every time it snows.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.Condition === \"Snow\") {\n  Qapital.saveTowardGoal(\"amount\", // amount to transfer\n    { reason: \"Now falling snow means rising fortunes...\" }\n  );\n}", "intent": "When it snows, save a set amount toward one of your Goals."}
{"original_description": "Husqvarna Automower® is parked until further notice when the temperature drops below 5 °C / 41 °F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Husqvarna Automower®", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automower.park_until_further_notice", "Filter code method": "Automower.parkUntilFurtherNotice.skip(string?: reason)", "Runtime method": "runAction(\"automower.park_until_further_notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Automower\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Automower", "Slug": "automower", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 41) { \n  Automower.parkUntilFurtherNotice(\"Temperature dropped below 5°C / 41°F\")\n}", "intent": "The Husqvarna Automower is parked until further notice if the temperature drops below 5°C / 41°F, as reported by Weather Underground."}
{"original_description": "Sets your Nanoleaf Light Panels to a Scene at Sunrise in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_scene", "Filter code method": "Nanoleaf.turnOnScene.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "My scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "my_scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nvar IsWeekday = Meta.currentUserTime.day() !== 6 && Meta.currentUserTime.day() !== 0 // Sunday and Saturday are not weekdays\nif (IsWeekday && SunriseAt <= Meta.currentUserTime.format(\"YYYY-MM-DDTHH:mm:ss\")) {\n  Nanoleaf.turnOnScene(\"Sunrise\")\n} else {\n  Nanoleaf.turnOnScene.skip(\"Not a weekday or today's sunrise time has not arrived yet\")\n}", "intent": "This IFTTT filter checks if it's a weekday and if today's sunrise time matches the current time. If both conditions are met, it sets Nanoleaf Light Panels to the \"Sunrise\" scene."}
{"original_description": "Have your product turn off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_off", "Filter code method": "Idevices.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nif (Meta.currentUserTime.hour() >= SunriseAt.getHours()) {\n  Idevices.turnDeviceOff(\"Product turned off at sunrise\")\n} else {\n  Idevices.turnDeviceOff.skip(\"Not yet sunrise\")\n}", "intent": "Automatically turn off a device at sunrise."}
{"original_description": "", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.turn_off_switch", "Filter code method": "Abode.turnOffSwitch.skip(string?: reason)", "Runtime method": "runAction(\"abode.turn_off_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Select switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Slug": "select_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.day() !== \"Saturday\" && Meta.currentUserTime.day() !== \"Sunday\") {\n  if (Weather.sunRises.SunriseAt < \"2022-01-01T07:00:00+05:00\") {\n    Abode.turnOffSwitch(\"Select switch\", \"Early sunrise - switching off\");\n  } else {\n    Abode.turnOffSwitch.skip(\"Not an early morning\")\n  }\n}", "intent": "This filter code checks if it's a weekday and if the sunrise time is before 7:00 AM, then it turns off the selected switch. If not, it skips the action."}
{"original_description": "雨が降りそうな時にBOCCOがお知らせします。", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Bocco.boccoSpeak(\"雨が降りそうな時にBOCCOがお知らせします。\", {lang: \"ja\"})\n} else {\n  Bocco.boccoSpeak.skip(\"No rain forecasted\")\n}", "intent": "Send a BOCCO alert when the weather forecast indicates rain."}
{"original_description": "Set a variable in Apilio to TRUE every time Netatmo Weather Station reports that the temperature rose above the level you specified.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "const measureSource = Netatmo.temperatureRisesAbove.measure_source;\nconst thresholdValue = parseFloat(Netatmo.temperatureRisesAbove.threshold_value);\nconst measuredTemperatureF = Netatmo.temperatureRisesAbove.measured_temperature_f;\n\nif (measureSource === \"My Home - Indoor station\" && \n    thresholdValue <= 0.01 && \n    measuredTemperatureF > thresholdValue) {\n  Apilio.booleanVariableToFalseUpdates(\"temperature_rise_detected\", true);\n}", "intent": "Set a variable in Apilio to TRUE every time Netatmo Weather Station reports that the temperature rose above the level specified."}
{"original_description": "Set a variable in Apilio to FALSE every time Netatmo Weather Station reports that the temperature dropped below the level you specified.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var measureSource = $$measure_source$$\nvar thresholdValueC = parseFloat($$threshold_value$$)\nif (Netatmo.temperatureDropsBelow.MeasuredTemperatureC < thresholdValueC) {\n  var reason = \"Temperature dropped below \" + thresholdValueC + \"°C\"\n  Apilio.booleanVariableToFalseUpdates.skip(reason)\n} else {\n  // No action\n}", "intent": "Set a variable in Apilio to FALSE every time Netatmo Weather Station reports that the temperature dropped below the level you specified."}
{"original_description": "Wenn die Sonne untergeht in deiner Region, dann führe eine Aktion in deiner Qbox aus.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunSets.SunsetAt < Meta.currentUserTime.now()) {\n  Coqon.simpleRuleAction.skip(\"Sunset has not occurred yet\");\n} else {\n  var condition = Weather.sunSets.Condition;\n  if (condition === \"Rain\" || condition === \"Cloudy\") {\n    Coqon.simpleRuleAction(\"coqon rule action\", {\"action_code\": \"Skip this action, it's too cloudy\"});\n  } else {\n    Qbox.executeAction();\n  }\n}", "intent": "Check if sunset time is reached, and then call an action in Qbox. If not, skip the action."}
{"original_description": "Have a product's night light turn off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_nightlight_on", "Filter code method": "Idevices.turnNightlightOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_nightlight_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What product's night light?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempFahrenheit < 65 && Weather.sunRises.Condition !== \"Sunny\") {\n    Idevices.turnNightlightOn.skip(\"Not suitable for nighttime\")\n}\nelse {\n    Idevices.turnNightLightOff()\n}", "intent": "Turn off a product's night light at sunrise if the temperature is below 65°F (18°C) and the condition is not sunny."}
{"original_description": "When it's sunrise, open my blind.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Connector", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dooya_connector.open_blinds", "Filter code method": "DooyaConnector.openBlinds.skip(string?: reason)", "Runtime method": "runAction(\"dooya_connector.open_blinds\", {})"}, "action_details": [{"section": "Action fields", "title": "Which blinds\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which blind?", "Slug": "which_blinds", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Configure a Nexia automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (tempFahrenheit > 70) {\n  if (Nexia.nexiaAutomation.NexiaAutomationName === \"My First Automation\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n    Nexia.nexia_automation()\n  } else {\n    Nexia.nexia_automation.skip(\"Invalid automation or house name\")\n  }\n} else {\n  Nexia.nexia_automation.skip(\"Temperature below threshold level (70°F)\")\n}", "intent": "Configure a Nexia automation to run when the outdoor temperature rises above a threshold level."}
{"original_description": "Receive a notification whenever it starts raining.\nNote: IFTTT app is needed for this Applet.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\" && Netatmo.rainHasStarted.MeasuredAt.getHours() >= 7 && Netatmo.rainHasStarted.MeasuredAt.getHours() <= 22) {\n  IfNotifications.sendNotification.setMessage(\"It has started raining at \" + Netatmo.rainHasStarted.MeasuredAt);\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of active hours\")\n}", "intent": "Receive a notification whenever it starts raining, using the Netatmo Weather Station data."}
{"original_description": "Change the home air conditioning mode to cool when the current temperature exceeds the pre-set value. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (tempFahrenheit > 72) {\n    Airtouch.acMode.setMode(\"cool\")\n} else {\n    Airtouch.acMode.skip(\"Not hot enough to warrant cool mode\")\n}", "intent": "Change the home air conditioning mode to cool when the current temperature exceeds a pre-set value."}
{"original_description": "Lancer un scénario energeasy connect lorsqu'il commence à pleuvoir. Par exemple, fermez vos volets de 50% pour protéger vos fenêtres de la pluie.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "energeasy connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "energeasyconnect.launch_action_group", "Filter code method": "Energeasyconnect.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"energeasyconnect.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action group", "Helper text": "The action group to launch", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Energeasyconnect.launchActionGroup(\"energeasyconnect.close_shades_by_half\")\n} else {\n  Energeasyconnect.launchActionGroup.skip(\"No rain forecasted\")\n}", "intent": "Launch an Energeasy Connect scenario when it starts raining. This automation will close the shades by 50% to protect your windows from rain."}
{"original_description": "Arm a tag at your local sunset time", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wireless Tag", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wirelesstag.arm", "Filter code method": "Wirelesstag.arm.skip(string?: reason)", "Runtime method": "runAction(\"wirelesstag.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Tagid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Slug": "tagid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Doormodesetclosed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Define closed angle?", "Helper text": "Only applicable to angle based motion sensor in door/gate mode. If not specified, does not re-define closed angle (requires the tag be armed in door mode at least once)", "Slug": "doorModeSetClosed", "Required": "false", "Can have default value": "true", "Filter code method": "Wirelesstag.arm.setDoor Mode Set Closed(string: doorModeSetClosed)"}}], "filter_code": "var Sunset = Weather.sunSets.SunsetAt;\nif (Sunset <= Meta.currentUserTime.now()) {\n  if (Weather.sunSets.Condition === \"Sunny\") {\n    // Arm the tag\n  } else {\n    Wirelesstag.arm.skip(\"Not sunny at sunset\");\n  }\n} else {\n  Wirelesstag.arm.skip(\"Not yet sunset\");\n}", "intent": "Arm a tag at your local sunset time."}
{"original_description": "Nutze COQON um beispielsweise deine Rollläden bei Sonnenaufgang in deiner Region zu fahren oder diverse Beleuchtungen zu schalten.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunRises.SunriseAt > Meta.currentUserTime.hour() && Weather.sunRises.TempFahrenheit < 10) { \n  Coqon.simpleRuleAction(\"OpenRollers\")\n} else if (Weather.sunRises.Condition === \"Rain\") {\n  Coqon.simpleRuleAction.skip(\"Rainy day - no action needed\")\n}", "intent": "Automate your roller shades or lighting based on sunrise and weather conditions."}
{"original_description": "Set my Warmup Smart thermostat to a specific temperature when it is raining outside.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Warmup Smart Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "warmup_smart_thermostat.set-temperature", "Filter code method": "WarmupSmartThermostat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"warmup_smart_thermostat.set-temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Set temperature to?", "Helper text": "in °C (e.g. 22)", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "WarmupSmartThermostat.setTemperature.setTemperature(string: temperature)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  var temperature = Weather.currentConditionIs.TempFahrenheit;\n  if (temperature > 22) { // adjust this condition according to your needs\n    WarmupSmartThermostat.setTemperature(temperature, \"No need for extra heating\");\n  }\n}", "intent": "Set the Warmup Smart thermostat to a specific temperature when it is raining outside."}
{"original_description": "Receive an SMS when the temperature rises above 36°C (97°F)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "", "intent": ""}
{"original_description": "Configure a Nexia automation to run when the pollen count rises above a specified level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > parseInt(COUNT)) {\n  // Run the specified Nexia automation\n  Nexia.nexiaAutomation.setNexiaAutomationName(NEXIA_AUTOMATION_NAME)\n    .setHouseName(HOUSE_NAME)\n    .run();\n} else {\n  Nexia.nexiaAutomation.skip(\"Pollen count is within normal range\");\n}", "intent": "Configure Nexia automation to run when pollen count rises above a specified level."}
{"original_description": "Disarm a tag at your local sunrise time", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wireless Tag", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wirelesstag.disarm", "Filter code method": "Wirelesstag.disarm.skip(string?: reason)", "Runtime method": "runAction(\"wirelesstag.disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Tagid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Slug": "tagid", "Required": "false", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nif (Meta.currentUserTime.format(\"HH:mm\") >= SunriseAt) {\n  var TagId = \"your_tag_id\" // Replace with actual tag ID\n  if (TagId !== \"\") {\n    Wirelesstag.disarm.skip(\"Not at sunrise\")\n  } else {\n    Wirelesstag.disarm()\n  }\n}", "intent": "Disarm a tag at your local sunrise time."}
{"original_description": "Run a shortcut in Futurehome turning OFF multiple garden lights at Sunrise", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Futurehome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "futurehome.run_shortcut", "Filter code method": "Futurehome.runShortcut.skip(string?: reason)", "Runtime method": "runAction(\"futurehome.run_shortcut\", {})"}, "action_details": [{"section": "Action fields", "title": "Shortcut\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "shortcut", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Condition !== \"Rain\") {\n  var SunriseAt = Weather.sunRises.SunriseAt\n  if (Meta.currentUserTime.hour() === SunriseAt.getHours() && Meta.currentUserTime.minute() === SunriseAt.getMinutes()) {\n    Futurehome.runShortcut(\"multiple_garden_lights_off\")\n  } else {\n    Futurehome.runShortcut.skip(\"Not at sunrise\")\n  }\n}", "intent": "Run a specified Futurehome shortcut to turn off multiple garden lights at sunrise when it is not raining."}
{"original_description": "Change the home air conditioning mode to heat when the current temperature falls below the pre-set value.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "var TempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit;\nif (TempFahrenheit < parseInt(AcSettings.temperatureThreshold)) {\n  Airtouch.acMode.setMode(\"heat\");\n} else {\n  Airtouch.acMode.skip(\"Temperature is above threshold\");\n}", "intent": "Change home air conditioning mode to heat when current temperature falls below pre-set value."}
{"original_description": "Receive an an SMS when the humidity rises above 60%", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.humidity-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target humidity percentage", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.humidityRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the humidity", "description": "This is the name of the Netamo device where you are reading the humidity", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.humidityRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target humidity\nThe target humidity in percent", "description": "The target humidity in percent", "details": {"Slug": "TargetHumidity", "Filter code": "Netatmo.humidityRisesAbove.TargetHumidity", "Type": "String", "Example": "83"}}, {"section": "Ingredients", "title": "Measured humidity\nThe measured humidity as a percentage", "description": "The measured humidity as a percentage", "details": {"Slug": "MeasuredHumidity", "Filter code": "Netatmo.humidityRisesAbove.MeasuredHumidity", "Type": "String", "Example": "84"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var HumidityThreshold = parseFloat(Netatmo.humidityRisesAbove.threshold_value)\nif (parseFloat(Netatmo.humidityRisesAbove.MeasuredHumidity) > HumidityThreshold && Netatmo.humidityRisesAbove.measure_source === \"The date and time the measurement occurred\") {\n  IfNotifications.sendNotification.skip(\"No reason provided\")\n} else {  \n  var message = \"Humidity rose above \" + HumidityThreshold + \"% at \" + Netatmo.humidityRisesAbove.DeviceName\n  IfNotifications.sendNotification.setMessage(message)\n}", "intent": "This IFTTT automation receives a notification when the humidity rises above 60% at a Netatmo weather station."}
{"original_description": "BOCCO speaks aloud if it is rainy outside.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Bocco.boccoSpeak(\"It's raining outside\");\n}", "intent": "BOCCO will speak aloud if it is raining outside, as reported by Weather Underground."}
{"original_description": "Set your Philips Hue lights to automatically turn blue if the temperature drops below 0° outside.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var measuredTemperatureC = Netatmo.temperatureDropsBelow.MeasuredTemperatureC\nif (measuredTemperatureC <= 0) {\n  Hue.setColorAllHue.skip(\"Temperature drops below 0°C\")\n} else {\n  Hue.setColorAllHue.setColor(\"blue\")\n}", "intent": "Check if the temperature drops below 0°C outside and set Philips Hue lights to blue."}
{"original_description": "If the forecast in your local area calls for rain, conserve water by pausing your RainMachine.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.pause_all_watering", "Filter code method": "RainMachine.pauseAllWatering.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.pause_all_watering\", {})"}, "action_details": [{"section": "Action fields", "title": "Sprinkler\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Device Name", "Slug": "sprinkler", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "For how long?", "Helper text": "Duration in minutes.", "Slug": "duration", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") {\n  RainMachine.pauseAllWatering(\"Conserve water - rain detected\")\n}", "intent": "If the weather forecast for tomorrow is rainy, pause all watering with RainMachine."}
{"original_description": "Get a phone call at sunset. Time to wake up.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "", "intent": ""}
{"original_description": "Brighten up my Moonside lights to 100 percent brightness when the sun rises.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Moonside Light", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moonside.set_brightness100", "Filter code method": "Moonside.setBrightness100.skip(string?: reason)", "Runtime method": "runAction(\"moonside.set_brightness100\", {})"}, "action_details": [], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt\nif (Weekday(Sunrise) && !isWeekend()) {\n  Moonside.setBrightness100(\"Sun has risen\")\n} else {\n  Moonside.setBrightness100.skip(\"Not a weekday or weekend\")\n}", "intent": "Automate Moonside lights to 100% brightness when the sun rises, only if it is not a weekend."}
{"original_description": "Launch a Scenario that gradually turns your lights on when the sun goes down.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.hour() < Weather.sunSets.SunsetAt.hour()) {\n  Gideon.launchScenario(\"Gradual Sunset\", \"Turning lights on as it gets dark\")\n} else if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Gideon.launchScenario.skip(\"No rain forecasted, not launching the scenario\")\n} else {\n  Gideon.launchScenario.runAction({\"scenario_name\": \"Gradual Sunset\"})\n}", "intent": "Launch a scenario that gradually turns your lights on when the sun goes down."}
{"original_description": "Open eWeLink Support curtain motor when it starts to rain. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.electric_curtain_switch_action", "Filter code method": "Ewelink.electricCurtainSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.electric_curtain_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Electric curtain devices query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "electric_curtain_devices_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which action?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.electricCurtainSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "var Condition = Weather.currentConditionIs.Condition\nif (Condition === \"Rain\") {\n  Ewelink.electricCurtainSwitchAction(\"open\")\n} else {\n  Ewelink.electricCurtainSwitchAction.skip(\"No rain detected\")\n}", "intent": "When it starts to rain, open the eWeLink Smart Home curtain motor."}
{"original_description": "Send a sms to your phone when it starts raining.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.rainHasStarted.MeasuredAt !== null) {\n  IfNotifications.sendNotification(\"It's raining!\", \"My Rain gauge reports rain at \" + Netatmo.rainHasStarted.MeasuredAt)\n}", "intent": "Send a notification when it starts raining."}
{"original_description": "If Pollen Count rises, Tell my Orion Group.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "", "intent": "If pollen count rises, send a voice message to my Orion group."}
{"original_description": "Configure a American Standard Home automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "American Standard® Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "american_standard_home.nexia_automation", "Filter code method": "AmericanStandardHome.nexiaAutomation.skip(string?: reason)", "Runtime method": "runAction(\"american_standard_home.nexia_automation\", {})"}, "action_details": [{"section": "Action fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}], "filter_code": "var TempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (TempFahrenheit > 75) {\n  AmericanStandardHome.nexiaAutomation(\"Shade Close\")\n} else {\n  AmericanStandardHome.nexiaAutomation.skip(\"Temperature is below the threshold\")\n}", "intent": "When the outdoor temperature rises above a threshold level, trigger an American Standard Home automation."}
{"original_description": "You can trigger a MyMilan Scene during Sunrise. For eg: You can open your curtains, turn on lights & play soothing music when waking up", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt;\nif (Meta.currentUserTime.day() !== 6 && Meta.currentUserTime.day() !== 7) {\n  if (Weather.sunRises.Condition === \"Sunny\") {\n    Mymilan.aScenes.runAction(\"Triggered Scene\", { scenes: [\"MyScene\"] });\n  } else {\n    Mymilan.aScenes.skip(\"Not sunny\");\n  }\n}", "intent": "Trigger the MyMilan Scene when sunrise is forecasted, and it's not a weekend."}
{"original_description": "Launch a scenario when the temperature goes up and you're ready to chill at home. Your thermostat goes off, your blinds go up and the environment gets fresh!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.temp_fahrenheit >= 72) {\n  if (Gideon.launchScenario.skip(\"No reason given\")) {\n    console.error(\"Failed to launch scenario\")\n  }\n}", "intent": "When the temperature rises above a certain threshold, trigger an action to launch a scenario in Gideon Smart Home."}
{"original_description": "This will automatically turn on the light(s) of your choice a few minutes before Sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var Sunset = Weather.sunSets.SunsetAt\nif (Meta.currentUserTime.hour() < Sunset) {\n  // Skip the action during the day\n  Aisync.onOff.skip(\"During the day\")\n} else if (Weather.sunSets.TempFahrenheit > 75) {\n  // Skip the action if it is too warm outside\n  Aisync.onOff.skip(\"Too warm outside\")\n} else {\n  var device = getDevice()\n  Aisync.onOff.runAction(device, \"on\")\n}", "intent": "Trigger the Ai-Sync action to turn on a specified device before sunset, if it is not already daytime. If today's high temperature is above 75°F (24°C), skip the action."}
{"original_description": "At sunset, the selected Lexi group lights will automatically turn on.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.groupTurnOff", "Filter code method": "Lexi.groupTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"lexi.groupTurnOff\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Group", "Slug": "group", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunsetTime = Weather.sunSets.SunsetAt;\nif (Meta.currentUserTime.hour() <= SunsetTime.getHours()) {\n  if (Weather.sunSets.TempFahrenheit > 65 && Weather.sunSets.Condition === \"Sunny\") {\n    Lexi.groupTurnOff.runAction({\"group\": \"selected Group\"});\n  } else {\n    Lexi.groupTurnOff.skip(\"Unsuitable weather conditions\");\n  }\n}", "intent": "Automatically turn on the selected Lexi group lights at sunset."}
{"original_description": "Change Nexus Home AC modes based on outside weather conditions", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  if (temp_fahrenheit < 68) {\n    BrilliantNexus.acExecution.setMode(\"Cool\").setTemperature(\"24\").setFanSpeed(\"Low\")\n  } else {\n    BrilliantNexus.acExecution.setMode(\"Auto\").setTemperature(\"72\").setFanSpeed(\"Medium\")\n  }\n} else if (Weather.currentConditionIs.Condition === \"Cloudy\" || Weather.currentConditionIs.Condition === \"Overcast\") {\n  if (temp_fahrenheit < 68) {\n    BrilliantNexus.acExecution.setMode(\"Cool\").setTemperature(\"24\").setFanSpeed(\"Low\")\n  } else {\n    BrilliantNexus.acExecution.setMode(\"Auto\").setTemperature(\"72\").setFanSpeed(\"Medium\")\n  }\n} else {\n  if (temp_fahrenheit > 78) {\n    BrilliantNexus.acExecution.setMode(\"Heat\").setTemperature(\"25\").setFanSpeed(\"High\")\n  } else {\n    BrilliantNexus.acExecution.setMode(\"Auto\").setTemperature(\"24\").setFanSpeed(\"Low\")\n  }\n}", "intent": "Automatically change Nexus Home AC modes based on outside weather conditions."}
{"original_description": "This Applet will turn on your LinkJapan device when the sun rises in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LinkJapan eHome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkJapan_eHome.powerState", "Filter code method": "LinkJapanEHome.powerState.skip(string?: reason)", "Runtime method": "runAction(\"LinkJapan_eHome.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Helper text": "choose power", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "LinkJapanEHome.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunRises.SunriseAt > Meta.currentUserTime.hour()) {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"on\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Sun has not risen yet\")\n}", "intent": "Trigger LinkJapan eHome device when the sun rises in your location."}
{"original_description": "Turn on/off Nexus Home Lights when sun sets at your location", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.lights", "Filter code method": "BrilliantNexus.lights.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.lights\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Please select any of the Light", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your light", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.lights.setStatus(string: status)"}}], "filter_code": "if (Weather.sunSets.Condition === \"Sunny\") {\n  if (Weather.sunSets.TempFahrenheit < 65) { // Low temperature\n    BrilliantNexus.lights.setStatus(\"off\", \"Low temperature\")\n  } else if (Weather.sunSets.TempFahrenheit > 75) { // High temperature\n    BrilliantNexus.lights.setStatus(\"on\", \"High temperature\")\n  } else {\n    BrilliantNexus.lights.skip(\"Normal temperature\")\n  }\n} else {\n  BrilliantNexus.lights.skip(\"Not sunny\")\n}", "intent": "When the sun sets at your location, turn on/off Nexus Home Lights based on the current weather condition and temperature."}
{"original_description": "Set a specific sensitivity value for each alarm area after dark.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.sens_on", "Filter code method": "Instar.sensOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.sens_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Sensitive1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 1 sensitivity", "Helper text": "This is to set sensitivity for area 1", "Slug": "sensitive1", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive1(string: sensitive1)"}}, {"section": "Action fields", "title": "Sensitive2\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 2 sensitivity", "Helper text": "This is to set sensitivity for area 2", "Slug": "sensitive2", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive2(string: sensitive2)"}}, {"section": "Action fields", "title": "Sensitive3\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 3 sensitivity", "Helper text": "This is to set sensitivity for area 3", "Slug": "sensitive3", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive3(string: sensitive3)"}}, {"section": "Action fields", "title": "Sensitive4\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 4 sensitivity", "Helper text": "This is to set sensitivity for area 4", "Slug": "sensitive4", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive4(string: sensitive4)"}}], "filter_code": "if (Weather.sunSets.SunsetAt.getHours() >= 20) { // After dark\n  var location = Weather.sunSets.Location; // Get location from trigger\n  var tempFahrenheit = Weather.sunSets.TempFahrenheit;\n  var condition = Weather.sunSets.Condition;\n  \n  // Set sensitivity values for each alarm area\n  Instar.sensOn.setSensitive1(String(tempFahrenheit) + \"°F: \" + condition); \n  Instar.sensOn.setSensitive2(\"Low temp: \" + String(Weather.sunSets.LowTempFahrenheit) + \"°F\");\n  Instar.sensOn.setSensitive3(\"High temp: \" + String(Weather.sunSets.HighTempCelsius) + \"°C\");\n  Instar.sensOn.setSensitive4(\"Forecast URL: \" + Weather.sunSets.ForecastUrl);\n  \n} else {\n  // Skip action if not after dark\n  Instar.sensOn.skip(\"Not after dark\")\n}", "intent": "Set sensitivity values for each alarm area after dark."}
{"original_description": "When the temperature drops below X modify an iZone target.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iZone", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "i_zone.setzonesetpoint", "Filter code method": "IZone.setzonesetpoint.skip(string?: reason)", "Runtime method": "runAction(\"i_zone.setzonesetpoint\", {})"}, "action_details": [{"section": "Action fields", "title": "Id\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Helper text": "Select the device and zone you would like to control.", "Slug": "id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nText input > Other", "description": "Text input > Other", "details": {"Label": "What temperature?", "Helper text": "Enter the degrees to change the setpoint temperature to as a number only (in degrees Celsius).", "Slug": "temp", "Required": "true", "Can have default value": "true", "Filter code method": "IZone.setzonesetpoint.setTemp(string: temp)"}}], "filter_code": "var CurrentTempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (CurrentTempFahrenheit < X) {\n  IZone.setzonesetpoint.skip(\"Temperature too low\")\n} else {\n  var SelectedZone = Id // Get the selected zone ID\n  var NewSetPoint = Temp // Set the new set point temperature\n  IZone.setzonesetpoint.setTemp(NewSetPoint)\n}", "intent": "Modify the iZone target when the temperature drops below a specified threshold."}
{"original_description": "When the temperature gets too cold outside, open the curtain(s) to let in some sunlight.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MyCurtains", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "MyCurtains.move_device", "Filter code method": "MyCurtains.moveDevice.skip(string?: reason)", "Runtime method": "runAction(\"MyCurtains.move_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which drapery or curtain?", "Helper text": "Which drapery system would you like to move?", "Slug": "devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Move type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which move command?", "Helper text": "How open would you like the drapery to be?", "Slug": "move_type", "Required": "true", "Can have default value": "true", "Filter code method": "MyCurtains.moveDevice.setMove Type(string: move_type)"}}], "filter_code": "", "intent": ""}
{"original_description": "Automatically turn on your ceiling fan if weather's hot.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var CurrentTempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\nif (CurrentTempFahrenheit > 75 && Meta.currentUserTime.hour() >= 7 && Meta.currentUserTime.hour() <= 22) {\n  Aisync.onOff(\"Turn on ceiling fan due to hot weather\")\n} else {\n  Aisync.onOff.skip(\"Not a suitable time for the ceiling fan\")\n}", "intent": "Turn on the ceiling fan if the weather is hot and it's during a specific time range."}
{"original_description": "Set a specific sensitivity value for each alarm area during the day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.sens_on", "Filter code method": "Instar.sensOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.sens_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Sensitive1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 1 sensitivity", "Helper text": "This is to set sensitivity for area 1", "Slug": "sensitive1", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive1(string: sensitive1)"}}, {"section": "Action fields", "title": "Sensitive2\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 2 sensitivity", "Helper text": "This is to set sensitivity for area 2", "Slug": "sensitive2", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive2(string: sensitive2)"}}, {"section": "Action fields", "title": "Sensitive3\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 3 sensitivity", "Helper text": "This is to set sensitivity for area 3", "Slug": "sensitive3", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive3(string: sensitive3)"}}, {"section": "Action fields", "title": "Sensitive4\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 4 sensitivity", "Helper text": "This is to set sensitivity for area 4", "Slug": "sensitive4", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive4(string: sensitive4)"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() < 6 || Weather.sunRises.SunriseAt.getHours() > 22) {\n  // Outside of active hours, skip\n  Instar.sensOn.skip(\"Outside of active hours\")\n} else if (Weather.sunRises.TempFahrenheit < 60 && Weather.sunRises.Condition === \"Sunny\") {\n  // Sunny and below 60°F, set sensitivity for area 1\n  Instar.sensOn.setSensitive1(\"Low\")\n} else if (Weather.sunRises.TempFahrenheit >= 60 && Weather.sunRises.TempCelsius >= 15) {\n  // Above 60°F or 15°C, set sensitivity for area 2\n  Instar.sensOn.setSensitive2(\"Medium\")\n} else if (Weather.sunRises.Condition === \"Rainy\") {\n  // Rainy, set sensitivity for areas 3 and 4\n  Instar.sensOn.setSensitive3(\"High\")\n  Instar.sensOn.setSensitive4(\"High\")\n}", "intent": "Set sensitivity values for each alarm area based on the current time of day."}
{"original_description": "Turn INSTAR Cloud alarm email on at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.cloud_alarm_email_off", "Filter code method": "Instar.cloudAlarmEmailOff.skip(string?: reason)", "Runtime method": "runAction(\"instar.cloud_alarm_email_off\", {})"}, "action_details": [], "filter_code": "if (Weather.sunRises.SunriseAt > Meta.currentUserTime.hour()) {\n  Instar.cloudAlarmEmailOff.skip(\"Not yet morning\")\n} else if (Weather.temp_fahrenheit < 10) {\n  Instar.cloudAlarmEmailOff.skip(\"Too cold outside\")\n} else if (Weather.condition === \"Rain\" || Weather.condition === \"Snow\") {\n  Instar.cloudAlarmEmailOff.skip(\"Rainy or snowy weather, no alarm\")\n} else {\n  Instar.cloudAlarmEmailOn.runAction({\"reason\": \"Good morning\"})\n}", "intent": "Trigger INSTAR Cloud alarm email on at sunrise based on Weather Underground forecast."}
{"original_description": "Set Nexus Home AC mode and temperature in the morning and turn on/off the Nexus Home lights at sunrise", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.lights", "Filter code method": "BrilliantNexus.lights.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.lights\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Please select any of the Light", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your light", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.lights.setStatus(string: status)"}}], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\") {\n  // Set AC mode to Cool\n  var acMode = \"Cool\";\n  // Set AC temperature to a comfortable level\n  var acTemp = Math.floor(22.0);\n  \n  // Turn on the Nexus Home lights at sunrise\n  BrilliantNexus.lights.setStatus(\"ON\");\n} else if (Weather.sunRises.Condition === \"Rainy\" || Weather.sunRises.Condition === \"Cloudy\") {\n  // Skip setting AC mode and temperature for rainy or cloudy weather\n  Domovea.shadeClose.skip(\"Unpleasant weather detected\");\n} else {\n  // Set AC mode to Heat\n  var acMode = \"Heat\";\n  // Set AC temperature to a comfortable level\n  var acTemp = Math.floor(25.0);\n  \n  // Turn off the Nexus Home lights at sunrise\n  BrilliantNexus.lights.setStatus(\"OFF\");\n}\n// Set Nexus Home AC mode and temperature\nDomovea.nexusAC.setMode(acMode);\nDomovea.nexusAC.setTemperature(acTemp);", "intent": "Set Nexus Home AC mode and temperature in the morning and turn on/off the Nexus Home lights at sunrise based on the current weather condition."}
{"original_description": "This will automatically turn on the light(s) of your choice a few minutes before Sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Meta.currentUserTime.day() !== 6 && Meta.currentUserTime.day() !== 7) {\n  var SunsetAt = Weather.sunSets.SunsetAt\n  if (Weather.sunSets.Condition !== \"Rain\") {\n    Fansync.onOff.runAction(\"fansync.on_off\", {\"device\": \"$Device\", \"on_off\": true})\n  } else {\n    Fansync.onOff.skip(\"No rain forecasted\")\n  }\n}", "intent": "This IFTTT applet will automatically turn on the lights of your choice a few minutes before Sunset, if it is a weekday and the weather condition is not 'Rain'."}
{"original_description": "기능코스 8교시에서 활용하세요.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "EveryKit", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "everykit.send_message", "Filter code method": "Everykit.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"everykit.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What data\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What data?", "Helper text": "Optional — You can use the data from the trigger in this action field.", "Slug": "what_data", "Required": "false", "Can have default value": "true", "Filter code method": "Everykit.sendMessage.setWhat Data(string: what_data)"}}, {"section": "Action fields", "title": "Action message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "action_message", "Required": "true", "Can have default value": "true", "Filter code method": "Everykit.sendMessage.setAction Message(string: action_message)"}}], "filter_code": "if (Meta.currentUserTime.day() >= 1 && Meta.currentUserTime.day() <= 5) {\n  var condition = Weather.tomorrowsForecastCallsFor.TomorrowsCondition\n  if (condition === \"Rain\") {\n    Domovea.shadeClose.skip(\"Outside of active hours\")\n  } else {\n    Everykit.sendMessage.setWhatData(\"It's a sunny day! \" + condition)\n      .setActionMessage(\"Weather forecast: \" + Weather.tomorrowsForecastCallsFor.HighTempFahrenheit + \"°F, \" + Weather.tomorrowsForecastCallsFor.LowTempFahrenheit + \"°F\")\n      .skip()\n  }\n}", "intent": "Check if it is a weekday and if the weather forecast calls for rain, otherwise skip the action. Also, set the message in the Everykit action."}
{"original_description": "Report today's rainfall amount from your WeatherFlow device to Netro. Netro will use it to update schedules.   ", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-today-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainTodayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainTodayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainTodayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainTodayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.report_weather", "Filter code method": "Netro.reportWeather.skip(string?: reason)", "Runtime method": "runAction(\"netro.report_weather\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to use the weather data.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "date", "Helper text": "The date of the weather information, e.g. 2000/12/30.", "Slug": "date", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setDate(string: date)"}}, {"section": "Action fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "condition", "Helper text": "The daily weather condition.", "Slug": "condition", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setCondition(string: condition)"}}, {"section": "Action fields", "title": "Summary\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "summary", "Helper text": "The daily weather summary.", "Slug": "summary", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSummary(string: summary)"}}, {"section": "Action fields", "title": "Rain\nText input > Other", "description": "Text input > Other", "details": {"Label": "rain", "Helper text": "The daily rain amount, float, with unit of MM", "Slug": "rain", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setRain(string: rain)"}}, {"section": "Action fields", "title": "Rain prob\nText input > Other", "description": "Text input > Other", "details": {"Label": "rain probability", "Helper text": "The daily rain probability for forecast data, integer, from 0 to 100", "Slug": "rain_prob", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setRain Prob(string: rain_prob)"}}, {"section": "Action fields", "title": "Temp\nText input > Other", "description": "Text input > Other", "details": {"Label": "temperature", "Helper text": "The daily average temperature, float, of unit Celsius", "Slug": "temp", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setTemp(string: temp)"}}, {"section": "Action fields", "title": "T min\nText input > Other", "description": "Text input > Other", "details": {"Label": "minimum temperature", "Helper text": "The daily minimum temperature, float, of unit Celsius", "Slug": "t_min", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Min(string: t_min)"}}, {"section": "Action fields", "title": "T max\nText input > Other", "description": "Text input > Other", "details": {"Label": "maximum temperature", "Helper text": "The daily maximum temperature of day, float, of unit Celsius", "Slug": "t_max", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Max(string: t_max)"}}, {"section": "Action fields", "title": "T dew\nText input > Other", "description": "Text input > Other", "details": {"Label": "dew point", "Helper text": "The daily dew point, float, of unit Celsius", "Slug": "t_dew", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Dew(string: t_dew)"}}, {"section": "Action fields", "title": "Wind speed\nText input > Other", "description": "Text input > Other", "details": {"Label": "wind speed", "Helper text": "The daily wind speed, float, of unit m/s", "Slug": "wind_speed", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setWind Speed(string: wind_speed)"}}, {"section": "Action fields", "title": "Humidity\nText input > Other", "description": "Text input > Other", "details": {"Label": "humidity", "Helper text": "The daily humidity, integer, 0-100", "Slug": "humidity", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setHumidity(string: humidity)"}}, {"section": "Action fields", "title": "Pressure\nText input > Other", "description": "Text input > Other", "details": {"Label": "pressure", "Helper text": "The daily air pressure, float, of unit hpa", "Slug": "pressure", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setPressure(string: pressure)"}}, {"section": "Action fields", "title": "Sunrise\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "sunrise", "Helper text": "sunrise time", "Slug": "sunrise", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSunrise(string: sunrise)"}}, {"section": "Action fields", "title": "Sunset\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "sunset", "Helper text": "sunset time", "Slug": "sunset", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSunset(string: sunset)"}}], "filter_code": "if (WeatherFlow.rainTodayAmount.MeasuredAt !== \"\" && WeatherFlow.rainTodayAmount.MeasuredRainfallMM !== \"\") {\n  Netro.reportWeather.setDate(WeatherFlow.rainTodayAmount.MeasuredAt)\n  Netro.reportWeather.setRain(WeatherFlow.rainTodayAmount.MeasuredRainfallMM)\n  Netro.reportWeather.setRainProb(\"100\")\n} else {\n  Netro.reportWeather.skip(\"No rain data available\")\n}", "intent": "Report today's rainfall amount from Netatmo Weather Station to Netro, which will use it to update schedules.", "filter_code_old": "Netro.reportWeather.setDate(Netatmo.rainTodayAmount.MeasuredAt)\nNetro.reportWeather.setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM)\nNetro.reportWeather.setRainProb(\"100\")\n\n\n"}
{"original_description": "At sunrise, the selected Lexi group lights will automatically turn off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.groupTurnOff", "Filter code method": "Lexi.groupTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"lexi.groupTurnOff\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Group", "Slug": "group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.hour() < Weather.sunRises.SunriseAt.getHours()) {\n  if (Weather.location === \"Lexi Group Point\") {\n    Lexi.groupTurnOff.skip(\"Not morning\")\n  }\n} else {\n  Lexi.groupTurnOff()\n}", "intent": "At sunrise, if the location is a Lexi group point and it is not morning, skip the action. Otherwise, automatically turn off the selected Lexi group lights."}
{"original_description": "Turn off INSTAR Cloud alarm email at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.cloud_alarm_email_off", "Filter code method": "Instar.cloudAlarmEmailOff.skip(string?: reason)", "Runtime method": "runAction(\"instar.cloud_alarm_email_off\", {})"}, "action_details": [], "filter_code": "if (Weather.sunSets.Condition !== \"Sunny\") {\n  Instar.cloudAlarmEmailOff.skip(\"Not sunny\")\n}", "intent": "Turn off the INSTAR Cloud alarm email at sunset when it's not sunny outside."}
{"original_description": "Configure a Trane Home automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Trane® Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trane_home.nexia_automation", "Filter code method": "TraneHome.nexiaAutomation.skip(string?: reason)", "Runtime method": "runAction(\"trane_home.nexia_automation\", {})"}, "action_details": [{"section": "Action fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > parseInt(triggerDetails.temperature)) {\n  if (triggerDetails.degrees_type === \"Fahrenheit\") {\n    // Run TraneHome.nexiaAutomation with reason\n    TraneHome.nexiaAutomation(\"Temperature threshold exceeded\");\n  } else {\n    // Skip action because degrees type is Celsius\n    TraneHome.nexiaAutomation.skip(\"Degrees type mismatch\");\n  }\n} else {\n  // Skip action when temperature is below or at the threshold level\n  TraneHome.nexiaAutomation.skip(\"Temperature is not above the threshold\");\n}", "intent": "Configure a Trane Home automation to run when the outdoor temperature rises above a threshold level."}
{"original_description": "Change the Nexus Home AC modes and AC temperature when outside temperature rises based on your given value", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "// Get current temperature in Fahrenheit\nvar TempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit\n\n// Check if it's within the range of the user-defined input\nif (TempFahrenheit > $$input_temperature$$) {\n  // Set AC mode to \"Cool\"\n  BrilliantNexus.acExecution.setMode(\"Cool\")\n  \n  // Set AC temperature to a specific value based on user-defined input\n  var Temperature = $$input_degrees_type === \"F\" ? TempFahrenheit : (TempFahrenheit * 1.8 + 32)\n  if ($$degrees_type === \"C\") {\n    Temperature = Math.round(Temperature) // Convert Fahrenheit to Celsius\n  }\n  BrilliantNexus.acExecution.setTemperature(Temperature.toString())\n  \n  // Set fan speed to a specific value based on user-defined input\n  var FanSpeed = $$input_fan_speed\n  BrilliantNexus.acExecution.setFanSpeed(FanSpeed)\n} else {\n  // Skip the action if it's not within the range of the user-defined input\n  BrilliantNexus.acExecution.skip(\"Temperature is below the set threshold\")\n}", "intent": "When the outside temperature rises above a given value, change the Nexus Home AC modes and set the AC temperature based on user-defined parameters."}
{"original_description": "Automatically open garage door at sunrise", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nif (Weather.sunRises.TempFahrenheit > 50 || Weather.sunRises.TempCelsius > 10) { \n  if (Meta.currentUserTime.hour() >= SunriseAt.getHours() && Meta.currentUserTime.hour() <= SunriseAt.getHours()) {\n    Garadget.openDoor()\n  } else {\n    Garadget.openDoor.skip(\"Not within sunrise hours\")\n  }\n} else {\n  Garadget.openDoor.skip(\"Unfavorable weather conditions\")\n}", "intent": "Automatically open the garage door at sunrise when weather conditions are favorable."}
{"original_description": "Good morning with the lights on. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "AduroSmart", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "AduroSmart.turnondevice", "Filter code method": "AduroSmart.turnondevice.skip(string?: reason)", "Runtime method": "runAction(\"AduroSmart.turnondevice\", {})"}, "action_details": [{"section": "Action fields", "title": "Selectdevice\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Choose a device", "Slug": "selectdevice", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Sunrise = Weather.sunRises.SunriseAt\nif (Weather.sunRises.Condition === \"Sunny\" && Sunrise >= Meta.currentUserTime.hour() * 1000 * 60) {\n  AduroSmart.turnondevice(\"Good morning!\", \"Lights on!\")\n} else {\n  AduroSmart.turnondevice.skip(\"Not sunny yet\")\n}", "intent": "Good morning with the lights on. Check if it's sunny outside, and if so, turn on the device."}
{"original_description": "At sunrise automatically turns off all Lexi lights", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceTurnOnAll", "Filter code method": "Lexi.deviceTurnOnAll.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceTurnOnAll\", {})"}, "action_details": [{"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temp", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunRises.SunriseAt < Meta.currentUserTime.hour()) {\n  if (temp_fahrenheit > 72) {\n    // Warm weather, skip action\n  } else if (condition === \"Sunny\") {\n    // Sunny day, turn off lights\n    Lexi.deviceTurnOnAll.skip(\"Sun is shining, no need for lights\")\n  } else if (condition === \"Rain\" || condition === \"Cloudy\") {\n    // Inclement weather, turn on lights\n    Lexi.deviceTurnOnAll()\n  } else {\n    // Default to turning off lights at sunrise\n  }\n}", "intent": "Automatically turn off all Lexi lights at sunrise."}
{"original_description": "Enable/Disable Nexus Home Actions when someone Locks August lock", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "var RuleName = Meta.currentUserTime.format(\"YYYY-MM-DD_HH-mm-ss\") + \"_\" + WhichLock;\nif (WhichLock === \"Front Door\" && LockedAt.getHours() >= 6 && LockedAt.getHours() <= 22) {\n  var RuleStatus = \"Enable\";\n} else {\n  var RuleStatus = \"Disable\";\n}\nBrilliantNexus.execrule.setRuleStatus(RuleStatus);", "intent": "Enable/Disable Nexus Home Actions when someone Locks August lock"}
{"original_description": "When a specific person locks the door then enable/disable Nexus Home actions", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "// Check if the lock and house name match\nvar lockName = Augusthome.lockUnlockedBySpecificPerson.LockName;\nvar houseName = Augusthome.lockUnlockedBySpecificPerson.HouseName;\n\nif (whichLock === \"specific\" && whichHouse === houseName) {\n  // If it matches, check user input for rule status\n  if (ruleStatus === \"enabled\") {\n    BrilliantNexus.execrule.setRuleStatus(ruleStatus);\n  } else {\n    BrilliantNexus.execrule.skip(\"Rule disabled\");\n  }\n} else {\n  // If not matching, skip the action with a reason\n  Augusthome.lockUnlockedBySpecificPerson.LockName + \" in \" + houseName + \" was unlocked by \" + whichPerson;\n  BrilliantNexus.execrule.skip(\"Lock not in specified house\");\n}", "intent": "When a specific person locks the door, enable or disable Nexus Home actions based on user input."}
{"original_description": "When a specific person unlocks the door then enable/disable Nexus Home actions", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "var User = Augusthome.lockUnlockedBySpecificPerson.User\nvar LockName = Augusthome.lockUnlockedBySpecificPerson.LockName\nif (User === \"John Smith\" && LockName === \"Front Door\") {\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\")\n} else {\n  BrilliantNexus.execrule.skip(\"Unauthorized user or lock name\")\n}", "intent": "Automatically enable or disable Brilliant Nexus actions based on a specific person unlocking an August lock."}
{"original_description": "Enable/disable Nexus Home actions when someone unlocks August lock", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "var UnlockedAt = Augusthome.lockUnlocked.UnlockedAt;\nvar User = Augusthome.lockUnlocked.User;\nvar LockName = Augusthome.lockUnlocked.LockName;\nvar HouseName = Augusthome.lockUnlocked.HouseName;\nvar UserPhoto = Augusthome.lockUnlocked.UserPhoto;\n\nif (WhichLock === \"Front Door\") {\n  if (rule_status === \"Enable\") {\n    BrilliantNexus.execrule.runAction(\"brilliant_nexus.execrule\", {});\n  } else {\n    BrilliantNexus.execrule.skip(\"Rule is disabled\");\n  }\n} else {\n  BrilliantNexus.execrule.skip(\"Incorrect lock selected\");\n}", "intent": "Enable or disable Nexus Home actions based on August lock unlock event."}
{"original_description": "Send a notification to the IFTTT app when the temperature falls below a given threshold.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.temp-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Measurement unit", "Helper text": "What unit of measurement would you like to receive your temperature in?", "Slug": "unit", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get temperature from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How cold do you want it to be when it triggers? Use the measurement unit you chose. Example: 15", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.tempBelow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temperature\nThe temperature, in the given measurement unit.", "description": "The temperature, in the given measurement unit.", "details": {"Slug": "value", "Filter code": "Airthings.tempBelow.Temperature", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Measurement unit\nThe measurement unit for Temperature, C° or F°.", "description": "The measurement unit for Temperature, C° or F°.", "details": {"Slug": "unit", "Filter code": "Airthings.tempBelow.MeasurementUnit", "Type": "String", "Example": "C°"}}, {"section": "Ingredients", "title": "Device\nName of the device", "description": "Name of the device", "details": {"Slug": "device", "Filter code": "Airthings.tempBelow.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Airthings.tempBelow.Temperature < parseFloat(Airthings.tempBelow.Threshold)) {\n  IfNotifications.sendNotification.setMessage(\"Temperature fell below \" + Airthings.tempBelow.Threshold + \" \" + Airthings.tempBelow.MeasurementUnit + \" at \" + Airthings.tempBelow.CreatedAt)\n  IfNotifications.sendNotification.run()\n} else {\n  IfNotifications.sendNotification.skip(\"Temperature above threshold\")\n}", "intent": "Check if the temperature falls below the given threshold. Send a notification to IFTTT app when true."}
{"original_description": "Get a notification in your IFTTT app when your indoor air humidity is getting above comfort levels. ", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.humidity-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get humidity from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How humid, in percent, do you want it to be when it triggers? Example: 60", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.humidityAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Humidity\nThe humidity, in percent.", "description": "The humidity, in percent.", "details": {"Slug": "value", "Filter code": "Airthings.humidityAbove.Humidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.humidityAbove.Device", "Type": "String", "Example": "Home - Living room"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "function() {\n  var Humidity = Airthings.humidityAbove.Humidity;\n  if (Humidity > parseInt(Airthings.humidityAbove.Threshold)) {\n    IfNotifications.sendNotification.setMessage(\"Air humidity is high: \" + Humidity + \"%\");\n    IfNotifications.sendNotification.run();\n  } else {\n    IfNotifications.sendNotification.skip(\"Humidity below threshold\")\n  }\n}", "intent": "Triggered by Airthings when indoor air humidity is above a certain comfort level, send a notification to the user with a customisable message."}
{"original_description": "This applet allows you to receive a telegram message when something happens on a choosen device in your house", "trigger_channel": "Gewiss Smart Home IoT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "gewiss_home.property_element_updated"}, "trigger_details": [{"section": "Trigger fields", "title": "Property element\nDropdown list", "description": "Dropdown list", "details": {"Label": "What Should We Check?", "Helper text": "Select what value we should check in the Smart Home devices to Fire this Applet", "Slug": "property_element", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold logic\nDropdown list", "description": "Dropdown list", "details": {"Label": "How Should We Compare The Value?", "Helper text": "Select the type of logic", "Slug": "threshold_logic", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "What is the Threshold?", "Helper text": "Insert here the threshold you would like to compare the value to.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "GewissHome.propertyElementUpdated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Functional channel\nElement unique identifier", "description": "Element unique identifier", "details": {"Slug": "functional_channel_id", "Filter code": "GewissHome.propertyElementUpdated.FunctionalChannelId", "Type": "String", "Example": "KNX_1.1.2_RGBLight_1"}}, {"section": "Ingredients", "title": "Property element\nThe name of the triggered property", "description": "The name of the triggered property", "details": {"Slug": "property_name", "Filter code": "GewissHome.propertyElementUpdated.PropertyElement", "Type": "String", "Example": "position [Venetian]"}}, {"section": "Ingredients", "title": "Value\nThe value of the triggered element", "description": "The value of the triggered element", "details": {"Slug": "value", "Filter code": "GewissHome.propertyElementUpdated.Value", "Type": "String", "Example": "ex.: ON/OFF; 100%; 30°"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var propertyElement = GewissHome.propertyElementUpdated.PropertyElement;\nvar thresholdLogic = GewissHome.propertyElementUpdated.ThresholdLogic;\nvar thresholdValue = GewissHome.propertyElementUpdated.Threshold;\nvar createdAt = GewissHome.propertyElementUpdated.CreatedAt;\nvar functionalChannelId = GewissHome.propertyElementUpdated.FunctionalChannelId;\nvar propertyName = GewissHome.propertyElementUpdated.PropertyName;\nvar value = GewissHome.propertyElementUpdated.Value;\n\nif (thresholdLogic === \"Equal to\" && value === thresholdValue) {\n  Telegram.sendMessage.setText(`The ${propertyName} has changed to ${value}.`)\n    .setIncludeWebPagePreview(true)\n    .skip(\"Threshold logic match\")\n} else if (thresholdLogic === \"Not equal to\" && value !== thresholdValue) {\n  Telegram.sendMessage.setText(`The ${propertyName} has changed to ${value}.`)\n    .setIncludeWebPagePreview(true)\n    .skip(\"Threshold logic mismatch\")\n}", "intent": "This applet sends a Telegram message when something happens on a chosen device in your house."}
{"original_description": "Make sure you're the first to see content from your favorite broadcasters.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_video_by_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "What kind of videos\nDropdown list", "description": "Dropdown list", "details": {"Label": "What kind of videos?", "Helper text": "Archived broadcasts, only the highlights, or any.", "Slug": "what_kind_of_videos", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.newVideoByChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Video title\nThe title of the video.", "description": "The title of the video.", "details": {"Slug": "video_title", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoTitle", "Type": "String", "Example": "Twitch Weekly - February 6, 2015"}}, {"section": "Ingredients", "title": "Video description\nThe description of the video.", "description": "The description of the video.", "details": {"Slug": "video_description", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoDescription", "Type": "String", "Example": "Twitch Weekly LIVE on February 6, 2015!"}}, {"section": "Ingredients", "title": "Video preview image\nThe URL to a preview image of the video.", "description": "The URL to a preview image of the video.", "details": {"Slug": "video_preview_image", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoPreviewImage", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Video url\nThe URL to the video on Twitch.", "description": "The URL to the video on Twitch.", "details": {"Slug": "video_url", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Video channel\nThe name of the video's channel", "description": "The name of the video's channel", "details": {"Slug": "video_channel", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoChannel", "Type": "String", "Example": "Twitch"}}, {"section": "Ingredients", "title": "Video channel url\nThe URL to the video's channel on Twitch.", "description": "The URL to the video's channel on Twitch.", "details": {"Slug": "video_channel_url", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var Channel = which_channel\nvar VideoType = what_kind_of_videos\n\nif (Twitch.newVideoByChannelYouFollow.CreatedAt >= Meta.currentUserTime.hour() && Twitch.newVideoByChannelYouFollow.CreatedAt < Meta.currentUserTime.hour() + 1) {\n    IfNotifications.sendNotification.setMessage(\"New video from \" + Channel + \": \" + Twitch.newVideoByChannelYouFollow.VideoTitle)\n} else {\n    IfNotifications.sendNotification.skip(\"Not within the current hour\")\n}", "intent": "Send a notification when a new video from your favorite channel is uploaded on Twitch."}
{"original_description": "This applet sends a notification on Telegram\nin case of reaching a higher or lower setpoint", "trigger_channel": "Gewiss Smart Home IoT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "gewiss_home.property_element_updated"}, "trigger_details": [{"section": "Trigger fields", "title": "Property element\nDropdown list", "description": "Dropdown list", "details": {"Label": "What Should We Check?", "Helper text": "Select what value we should check in the Smart Home devices to Fire this Applet", "Slug": "property_element", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold logic\nDropdown list", "description": "Dropdown list", "details": {"Label": "How Should We Compare The Value?", "Helper text": "Select the type of logic", "Slug": "threshold_logic", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "What is the Threshold?", "Helper text": "Insert here the threshold you would like to compare the value to.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "GewissHome.propertyElementUpdated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Functional channel\nElement unique identifier", "description": "Element unique identifier", "details": {"Slug": "functional_channel_id", "Filter code": "GewissHome.propertyElementUpdated.FunctionalChannelId", "Type": "String", "Example": "KNX_1.1.2_RGBLight_1"}}, {"section": "Ingredients", "title": "Property element\nThe name of the triggered property", "description": "The name of the triggered property", "details": {"Slug": "property_name", "Filter code": "GewissHome.propertyElementUpdated.PropertyElement", "Type": "String", "Example": "position [Venetian]"}}, {"section": "Ingredients", "title": "Value\nThe value of the triggered element", "description": "The value of the triggered element", "details": {"Slug": "value", "Filter code": "GewissHome.propertyElementUpdated.Value", "Type": "String", "Example": "ex.: ON/OFF; 100%; 30°"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "", "intent": ""}
{"original_description": "Press the pusher to receive a VoIP phone call.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType !== \"single\") {\n  var reason = \"\";\n  if (Kronaby.pusherPressed.ActionDropdownList === \"\") {\n    reason = \"No action selected\";\n  }\n  VoipCalls.callMyDevice.skip(reason)\n} else {\n  var message = \"Alert: \" + Kronaby.pusherPressed.ActionDropdownList\n  VoipCalls.callMyDevice.setMessage(message).runAction(\"voip_calls.call_my_device\")\n}", "intent": "The code checks if the press type is not single, and if so, makes a VoIP call with the provided message."}
{"original_description": "Reward yourself for your great taste in music... save a set amount to one of your Goals every time you add a track to one of your Spotify playlists.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "const goal = Qapital.getGoalFromDropdown(Qapital.getAvailableGoals());\nconst amount = parseFloat(Qapital.getDropdownValue(\"amount\"));\nif (goal && amount > 0) {\n  Qapital.saveTowardGoal(goal, amount.toString(), \"Track added to playlist\")\n} else {\n  Qapital.saveTowardGoal.skip(\"Invalid goal or amount\")\n}", "intent": "Reward a goal with a set amount when a track is added to a playlist on Spotify."}
{"original_description": "You can optionally filter for travel warnings to specific countries below.", "trigger_channel": "Department of State", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dos.travel_warnings"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by country (optional)", "Helper text": "E.g. North Korea, Spain, Venezuela", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Dos.travelWarnings.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Dos.travelWarnings.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, contains HTML.", "description": "The entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "Dos.travelWarnings.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Dos.travelWarnings.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (trigger_details[0].details.query !== \"\") {\n  var filteredEntries = Dos.travelWarnings.filter(entry => entry.EntryTitle.includes(trigger_details[0].details.query));\n} else {\n  // No query, send all travel warnings\n  var entries = Dos.travelWarnings;\n}\nvar message = \"Travel Warning: \" + filteredEntries.map(entry => entry.EntryTitle).join(\", \") + \"\\n\" + filteredEntries.map(entry => entry.EntryUrl).join(\"\\n\");\nIfNotifications.sendNotification.setMessage(message);", "intent": "Optional filter for travel warnings to specific countries below, using Department of State's travel warning data. It checks if a query text input has been provided and uses it to filter the entries."}
{"original_description": "Change two lights at a time using DO button.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.ChangeColor", "Filter code method": "Magichue.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"magichue.ChangeColor\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\nvar LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nvar LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\nif (ShareURL && Latitude && Longitude) {\n  var lightsToChange = []\n  for (var i = 0; i < 2; i++) {\n    if (i == 0) {\n      Magichue.changeColor(\"Light1\", { color: \"Random Color\" })\n    } else {\n      Magichue.changeColor(\"Light2\", { color: \"Random Color\" })\n    }\n  }\n} else {\n  Magichue.changeColor.skip(\"Insufficient data\")\n}", "intent": "When a DO button is pressed, change the colors of two lights."}
{"original_description": "Add a widget to your homescreen to press a button and unlock Sesame.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sesame by CANDY HOUSE", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sesame.open_sesame", "Filter code method": "Sesame.openSesame.skip(string?: reason)", "Runtime method": "runAction(\"sesame.open_sesame\", {})"}, "action_details": [{"section": "Action fields", "title": "Sesame name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Sesame?", "Helper text": "Choose which Sesame to unlock", "Slug": "sesame_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\nvar LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nvar LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\nif (Latitude && Longitude) {\n  Sesame.openSesame.skip(\"No valid location provided\")\n} else if (!ShareURL) {\n  Sesame.openSesame.skip(\"No share URL provided\")\n} else {\n  Sesame.openSesame(ShareURL, Latitude, Longitude)\n}", "intent": "Unlock a Sesame when a button widget is pressed, providing location and share URL information."}
{"original_description": "This Applet is an easy way to organize and prioritize your to-read list. ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Trello", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trello.create_card", "Filter code method": "Trello.createCard.skip(string?: reason)", "Runtime method": "runAction(\"trello.create_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Board\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "List name\nText input > Other", "description": "Text input > Other", "details": {"Label": "List name", "Helper text": "We'll create a new list if one with this name doesn't exist", "Slug": "list_name", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setList Name(string: list_name)"}}, {"section": "Action fields", "title": "Pos\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Slug": "pos", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setPos(string: pos)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setDescription(string: description)"}}, {"section": "Action fields", "title": "Members\nText input > Other", "description": "Text input > Other", "details": {"Label": "Assign members", "Helper text": "Optional comma separated list of @usernames to assign to card", "Slug": "members", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setMembers(string: members)"}}, {"section": "Action fields", "title": "Labels\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Apply labels", "Helper text": "Optional comma separated list of label names — labels that do not exist on the board will be ignored", "Slug": "labels", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setLabels(string: labels)"}}, {"section": "Action fields", "title": "Url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Attachment URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setUrl(string: url)"}}], "filter_code": "if (Pocket.newItemAddedPocket.AddedAt) {\n  var Title = Pocket.newItemAddedPocket.Title;\n  var Url = Pocket.newItemAddedPocket.Url;\n  var Excerpt = Pocket.newItemAddedPocket.Excerpt;\n  var ImageUrl = Pocket.newItemAddedPocket.ImageUrl;\n  var Tags = Pocket.newItemAddedPocket.Tags;\n\n  Trello.createCard.setTitle(Title);\n  Trello.createCard.setListName(\"My To-Read List\"); // Assuming a default list name\n  Trello.createCard.setPos(\"Top\"); // Assuming a default position\n  Trello.createCard.setTitle(Tags); // Using the tags as the title\n  if (ImageUrl) {\n    Trello.createCard.setUrl(ImageUrl);\n  }\n} else {\n  Trello.createCard.skip(\"No new item added\");\n}", "intent": "Check if a new item was added to Pocket, and then create a card in Trello with the same title, list name, position, tags, labels, and attachment URL."}
{"original_description": "Set a time to arm abode into home or away mode each evening", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.change_mode", "Filter code method": "Abode.changeMode.skip(string?: reason)", "Runtime method": "runAction(\"abode.change_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Abode.changeMode.setMode(string: mode)"}}], "filter_code": "if (new Date(DateAndTime.everyDayAt.CheckTime).getHours() >= 18) {\n  Abode.changeMode.setMode(\"away\")\n} else {\n  Abode.changeMode.skip(\"Not an evening\")\n}", "intent": "Set Abode into home or away mode based on the current time. If it is evening, set to away mode; otherwise, skip."}
{"original_description": "Toggle a device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.toggle", "Filter code method": "Kasa.toggle.skip(string?: reason)", "Runtime method": "runAction(\"kasa.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to toggle", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  if (Knocki.knocki.Pattern === \"***\") { \n    var Device = Knocki.knocki.Device;\n    Kasa.toggle.runAction({device: Device}, function(error, result) {\n      if (error) {\n        console.error(\"Error toggling device:\", error);\n      } else {\n        console.log(\"Device toggled successfully!\");\n      }\n    });\n  } else {\n    Kasa.toggle.skip(\"Invalid gesture pattern\");\n  }\n} else {\n  Kasa.toggle.skip(\"Invalid gesture detected\");\n}", "intent": "Toggle the TP-Link Kasa device when a specific gesture is detected by Knocki."}
{"original_description": "Send a notification to the IFTTT app when the CO2 level rises above a certain threshold.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.co2-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get CO2 levels from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.co2Above.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2 level\nThe CO2 level. In parts per million.", "description": "The CO2 level. In parts per million.", "details": {"Slug": "value", "Filter code": "Airthings.co2Above.Co2Level", "Type": "String", "Example": "120"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.co2Above.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Airthings.co2Above.Co2Level > Number(Airthings.trigger.threshold)) {\n  IfNotifications.sendNotification(\"CO2 level exceeded: \" + Airthings.co2Above.value + \" ppm in \" + Airthings.co2Above.device);\n} else {\n  IfNotifications.sendNotification.skip(\"CO2 level within threshold\");\n}", "intent": "Send a notification to the IFTTT app when the CO2 level rises above a certain threshold."}
{"original_description": "This Applet sends you a notification when the FCC posts a new order. Use a filter keyword to get the most relevant updates.", "trigger_channel": "Federal Communications Commission", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcc.order"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword(s) (optional)", "Helper text": "E.g. &quot;Sprint&quot;, &quot;Wireline Competition Bureau&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Subject\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Fcc.order.Subject", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Fcc.order.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Preview content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Fcc.order.PreviewContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (trigger.query && trigger.query !== \"\") {\n  var query = \"Filter: \" + trigger.query;\n} else {\n  query = \"\";\n}\nvar message = \"New FCC Order: \" + trigger.EntryTitle;\nIfNotifications.sendNotification.setMessage(message);\nIfNotifications.sendNotification.skip(query ? `Keyword filter \"${query}\"` : \"\");", "intent": "This Applet sends a notification when the Federal Communications Commission posts a new order, filtering by keyword(s) if provided."}
{"original_description": "Turn off a device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && /KNC1-W-00000088/.test(Knocki.knocki.Code)) {\n  Kasa.turnOff(\"KNC1-W-00000088\").skip()\n} else {\n  Kasa.turnOff.skip(\"Invalid code or gesture\")\n}", "intent": "Automatically turn off a TP-Link Kasa device when a specific Knocki gesture is detected and the code matches a regular expression."}
{"original_description": "This applet creates a button widget that you can use from the home screen of your Android or iOS device. Press the button to open your garage door or gate.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.open_door", "Filter code method": "Garagewifi.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DoorNumber = action_details[0].details.door_number\nif (DoorNumber === \"1\") {\n  Garagewifi.openDoor(\"Garage door 1\")\n} else if (DoorNumber === \"2\") {\n  Garagewifi.openDoor(\"Garage door 2\")\n} else {\n  Garagewifi.openDoor.skip(\"Invalid door number\")\n}", "intent": "When a button widget is pressed, it should open the garage door or gate based on the door number selected."}
{"original_description": "Save £1 every time you add a track to a Spotify playlist", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (playlist !== \"None\") {\n  Dozens.save.skip(\"No selected playlist\")\n}\nelse if (amount === \"\") {\n  Dozens.save.setAmount(\"1\").skip(\"No amount specified\")\n}\nelse {\n  Dozens.save.runAction(amount)\n}", "intent": "Save £1 every time you add a track to a Spotify playlist"}
{"original_description": "A nice visual cue that your Twitch audience is growing! 🙌", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_follower_on_your_channel"}, "trigger_details": [{"section": "Ingredients", "title": "Followed at\nDate and time the user followed your Channel.", "description": "Date and time the user followed your Channel.", "details": {"Slug": "created_at", "Filter code": "Twitch.newFollowerOnYourChannel.FollowedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Follower name\nThe name of the user who followed your channel.", "description": "The name of the user who followed your channel.", "details": {"Slug": "follower_name", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Follower bio\nThe bio of the user that followed you.", "description": "The bio of the user that followed you.", "details": {"Slug": "follower_bio", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerBio", "Type": "String", "Example": "A gaming fanatic from Boston."}}, {"section": "Ingredients", "title": "Follower url\nA url to the follower's profile on Twitch.", "description": "A url to the follower's profile on Twitch.", "details": {"Slug": "follower_url", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Follower count\nThe number of followers of your channel.", "description": "The number of followers of your channel.", "details": {"Slug": "follower_count", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerCount", "Type": "String", "Example": "215780"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var DateTime = Meta.currentUserTime.dateTime();\nif (DateTime === Twitch.newFollowerOnYourChannel.FollowedAt) {\n  var ColorValue = \"your chosen color value or name\";\n  if (ColorValue !== undefined && ColorValue !== null) {\n    Hue.setColorAllHue.setColor(ColorValue);\n  } else {\n    Hue.setColorAllHue.skip(\"No color specified\");\n  }\n}", "intent": "When a new Twitch follower is detected, check if they are followed at a specific date and time. If so, set all Philips Hue lights to a chosen color."}
{"original_description": "This applet sets a Hue scene when Withings Sleep detects that you get into bed.\n", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceUser = WithingsSleep.bedin.DeviceUser\nvar Time = WithingsSleep.bedin.DateandTime\nif (Date.now() >= new Date(Time).getTime()) {\n  if (DeviceUser === \"Bed in has been detected by Tom's Withings Sleep\") {\n    Hue.setScene(HueScene, \"Activated by Withings Sleep\")\n  } else {\n    Hue.setScene.skip(\"No matching device user found\")\n  }\n}", "intent": "This applet sets a Philips Hue scene when Withings Sleep detects that you get into bed."}
{"original_description": "This applet sets a Hue scene when Withings Sleep detects that you get out of bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceUser = WithingsSleep.bedout.DeviceUser;\nvar DateTime = WithingsSleep.bedout.DateandTime;\nif (DateTime > new Date()) {\n  if (DeviceUser === \"Tom's Nokia Sleep\") {\n    Hue.setScene(\"MorningWakeUp\");\n  } else {\n    Hue.setScene.skip(\"Unknown device user\")\n  }\n} else {\n  Hue.setScene.skip(\"Date and time is in the past\")\n}", "intent": "This applet sets a Philips Hue scene when Withings Sleep detects that you get out of bed."}
{"original_description": "Self explanatory", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Putio.transferFinished.Type !== \"Download\" && Putio.transferFinished.Type !== \"View\") {\n  IfNotifications.sendNotification.setMessage(\"Transfer finished: \" + Putio.transferFinished.Name)\n}", "intent": "When a transfer finishes on Put.io, check the type of transfer and if it's not a download or a view, send a notification with a custom message."}
{"original_description": "Activate a selected scene from your account.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.activate_scene", "Filter code method": "Kasa.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"kasa.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Select a scene from your account to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "function checkTrigger() {\n  const createdAt = Knocki.knocki.CreatedAt;\n  const deviceId = Knocki.knocki.Device;\n  const gesture = Knocki.knocki.Gesture;\n  const pattern = Knocki.knocki.Pattern;\n  \n  if (createdAt && deviceId && gesture && pattern) {\n    const scene = Domovea.getScene(); // Assume a function to get the selected scene\n    if (scene !== null) {\n      Kasa.activateScene.skip(\"Invalid scene selection\") // Skip if invalid scene is selected\n    } else {\n      Kasa.activateScene(scene); // Activate the selected scene\n    }\n  } else {\n    Kasa.activateScene.skip(\"Missing trigger details\"); // Skip if any of the required fields are missing\n  }\n}", "intent": "This trigger checks for specific conditions when the Knocki device is triggered. It extracts the created at, device ID, gesture, and pattern details from the trigger. If a valid scene is selected, it activates that scene using the Kasa API."}
{"original_description": "Self explanatory", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "Putio.transferFinished.addEventListener(\"transfer_finished\", function() {\n  var type = Putio.transferFinished.Type;\n  if (type !== \"file\") {\n    return Domovea.telegram.sendMessage.skip(\"Only files are supported\")\n  }\n  \n  var createdAt = new Date(Putio.transferFinished.CreatedAt);\n  var downloadUrl = Putio.transferFinished.DownloadUrl;\n  var name = Putio.transferFinished.Name;\n  var viewUrl = Putio.transferFinished.ViewUrl;\n  var file_id = Putio.transferFinished.FileId;\n  var source = Putio.transferFinished.Source;\n\n  // Format the message\n  var text = `Transfer finished: ${name}\\nCreated at: ${createdAt.toISOString()}\\nDownload URL: ${downloadUrl}\\nView URL: ${viewUrl}\\nFile ID: ${file_id}\\nSource: ${source}`;\n  \n  // Send the message to Telegram\n  Domovea.telegram.sendMessage.setText(text);\n});", "intent": "On a Put.io transfer finished, send a message to Telegram chat with details of the transfer."}
{"original_description": "Generate a call to your phone number after sending an E-Mail to trigger@applet.ifttt.com from your registered E-Mail address. Register your phone number at woop.la/ifttt to receive phone calls.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "var From = Email.sendIftttAnEmailTagged.From\nif (From === \"your_email@gmail.com\") { // Replace with your email address\n  var tts = \"Hello, this is a test call. Please leave a message.\"\n  Woopla.ttsCall.setTts(tts)\n  Woopla.ttsCall.runAction()\n} else {\n  Woopla.ttsCall.skip(\"Email not from registered address\")\n}", "intent": "Call Woopla phone call after receiving an email from a registered email address."}
{"original_description": "Save £1 every time a book is added to the NYT Bestsellers list", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Business\") {\n  Dozens.save.setAmount(\"£1\");\n} else {\n  Dozens.save.skip(\"Only business books qualify for savings\");\n}", "intent": "Save £1 every time a book is added to the NYT Bestsellers list."}
{"original_description": "At a pre-selected time, lock a LightwaveRF Socket to prevent manual operation.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "LightwaveRF Power", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_power.lock_device", "Filter code method": "LightwaverfPower.lockDevice.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_power.lock_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time == \"\") {\n  LightwaverfPower.lockDevice.skip(\"No time selected\")\n} else {\n  var Device = \"Your_Socket_Name\" // Replace with the actual device name\n  if (which_device != Device) {\n    LightwaverfPower.lockDevice.skip(`Incorrect device: ${which_device}`)\n  } else {\n    LightwaverfPower.lockDevice()\n  }\n}", "intent": "At a pre-selected time, lock a LightwaveRF Socket to prevent manual operation."}
{"original_description": "Every week, you can automatically add your favorite tracks to a playlist of your choice", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.add_a_track_to_a_playlist", "Filter code method": "Spotify.addATrackToAPlaylist.skip(string?: reason)", "Runtime method": "runAction(\"spotify.add_a_track_to_a_playlist\", {})"}, "action_details": [{"section": "Action fields", "title": "Playlist\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Playlist name", "Helper text": "Must be a playlist owned by you. If a playlist with the name given can't be found, a new private playlist will be created.", "Slug": "playlist", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setPlaylist(string: playlist)"}}, {"section": "Action fields", "title": "Search query\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Search query", "Helper text": "For maximum accuracy, include the song title here and the artist name in the &quot;Artist name&quot; field", "Slug": "search_query", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setSearch Query(string: search_query)"}}, {"section": "Action fields", "title": "Artist name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Artist name", "Helper text": "Optional", "Slug": "artist_name", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setArtist Name(string: artist_name)"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime\nvar DayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek\n\nif (DayOfWeek != \"Saturday\" && DayOfWeek != \"Sunday\") {\n  if (parseInt(Time.split(\":\")[0]) >= 7 && parseInt(Time.split(\":\")[0]) <= 22) {\n    var playlist = //playlist//; // obtain the desired playlist name\n    var searchQuery = //search query//; // obtain the desired search query\n    var artistName = //artist name//; // obtain the desired artist name\n\n    if (!playlist) {\n      Domovea.shadeClose.skip(\"No valid playlist provided\")\n    } else if (!searchQuery) {\n      Domovea.shadeClose.skip(\"No valid search query provided\")\n    } else {\n      Spotify.addATrackToAPlaylist.runAction({ playlist: playlist, search_query: searchQuery, artist_name: artistName })\n    }\n  } else {\n    Domovea.shadeClose.skip(\"Outside of active hours\")\n  }\n}", "intent": "Check if it's a weekday and if the time is within a specified range, then add tracks to a playlist. If not, skip the action."}
{"original_description": "Twitch alert! Blink your bulb purple when your favorite streamer goes live (you'll choose the specific channel you follow when you set up the Applet). ", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === WhichChannel) {\n  if (Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers !== \"0\") {\n    Lifx.blink(LifeX.selector, \"purple\", 1, true)\n  } else {\n    Lifx.blink.skip(\"No viewers\")\n  }\n}", "intent": "When your favorite streamer goes live, blink your LIFX bulb purple."}
{"original_description": "This applet sends a weekly digest email that lists all the transfers for the week. Great if you need those URL's again.", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "// Define variables\nvar type = Putio.transferFinished.Type;\nvar source = Putio.transferFinished.Source;\nvar file_id = Putio.transferFinished.FileId;\n\n// Check if the transfer is a download URL and the source is not \"put.io\"\nif (Putio.transferFinished.DownloadUrl !== \"\" && source !== \"put.io\") {\n  // Set the title of the email\n  var title = \"Download: \" + Putio.transferFinished.Name;\n  \n  // Set the message of the email\n  var message = \"File: \" + Putio.transferFinished.FileId + \"\\nSource: \" + source + \"\\nType: \" + type + \"\\n\\n\" + Putio.transferFinished.DownloadUrl;\n  \n  // Set the URL for the link in the email\n  var url = Putio.transferFinished.DownloadUrl;\n  \n  // Skip the action if it's not a download URL or the source is \"put.io\"\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a download URL or not from put.io\");\n}\n\n// If it's a view URL, set the title and message accordingly\nif (Putio.transferFinished.ViewUrl !== \"\") {\n  var title = \"View: \" + Putio.transferFinished.Name;\n  var message = \"File: \" + Putio.transferFinished.FileId + \"\\nSource: \" + source + \"\\nType: \" + type + \"\\n\\n\" + Putio.transferFinished.ViewUrl;\n}\n\n// If it's a file, set the title and message accordingly\nif (Putio.transferFinished.File !== \"\") {\n  var title = \"File: \" + Putio.transferFinished.Name;\n  var message = \"File ID: \" + Putio.transferFinished.FileId + \"\\nSource: \" + source + \"\\nType: \" + type;\n}\n\n// Set the time and day of week for the email\nvar time_of_day = EmailDigest.sendWeeklyEmail.setTimeOfDay(YourSelectedTime);\nvar day_of_week = EmailDigest.sendWeeklyEmail.setDayOfWeek(YourSelectedDay);\n\n// Send the weekly email\nEmailDigest.sendWeeklyEmail.setTitle(title);\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(url);\nEmailDigest.sendWeeklyEmail.runAction(\"email_digest.send_weekly_email\", {});", "intent": "This applet sends a weekly digest email that lists all the transfers for the week. It checks the type of transfer, source, and file ID to determine whether to include it in the email."}
{"original_description": "Wouldn't Sunday be better if you had koalas waiting in your inbox? Why are you fighting this? 🐨 💙", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Giphy.search.Query.includes(\"koalas\")) {\n  EmailDigest.sendWeeklyEmail.setTitle(\"Sunday Koalas\")\n    .setDayOfWeek(\"Sunday\")\n    .setMessage(\"<a href=\" + Giphy.search.EmailHTML + \"><img src=\" + Giphy.search.ImageURL + \" border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>\")\n    .setUrl(Giphy.search.TumblrImageURL)\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No koalas found\")\n}", "intent": "Check if the trigger query contains \"koalas\" and send a weekly email with the specified title, message, and URL."}
{"original_description": "If a stock rises by 5%, sell it!", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_rise_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage increase", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageRiseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageRiseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageRiseStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageRiseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageRiseStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageRiseStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "var PercentageChange = Finance.percentageRiseStocks.PercentageChange\nif (parseFloat(PercentageChange) > 5) {\n  Alpaca.placeMarketOrder.setSymbol(Finance.percentageRiseStocks.StockTicker)\n  .setSide(\"buy\")\n  .setQty(\"1\")\n  .run()\n} else {\n  Alpaca.placeMarketOrder.skip(\"Less than 5% rise\")\n}", "intent": "If a stock's percentage rise is more than 5%, place an Alpaca market order for the symbol."}
{"original_description": "Turn off the home air conditioning at a specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_power", "Filter code method": "Airtouch.acPower.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_power\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or turn off?", "Slug": "power_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acPower.setPower On Off(string: power_on_off)"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time === '11:01 PM') {\n  Airtouch.acPower.skip('Not yet')\n} else if (Time !== '') {\n  var AcIndex = // Get the dropdown value for \"Ac index\" from trigger details \n  var PowerOnOff = // Get the dropdown value for \"Power on off\" from trigger details\n  if (PowerOnOff === 'Turn off') {\n    Airtouch.acPower.setPowerOnOff(PowerOnOff)\n  } else {\n    Airtouch.acPower.skip('Not required to turn off')\n  }\n}", "intent": "Turn off the home air conditioning at a specific time."}
{"original_description": "Configure a Nexia automation to activate a Philips Hue lights scene in your home.", "trigger_channel": "Nexia", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "trigger_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var AutomationName = Nexia.nexiaAutomation.NexiaAutomationName\nvar HouseName = Nexia.nexiaAutomation.HouseName\nif (AutomationName === \"My First Automation\" && HouseName === \"Home\") {\n  Hue.setScene(Hue.getScene(\"Your favorite scene\"))\n} else {\n  Hue.setScene.skip(\"Not configured for this automation\")\n}", "intent": "Configure a Nexia automation to activate a Philips Hue lights scene in your home based on the automation name and house name."}
{"original_description": "Self explanatory", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Pushover", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pushover.send", "Filter code method": "Pushover.send.skip(string?: reason)", "Runtime method": "runAction(\"pushover.send\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Pushover.send.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Pushover.send.setMessage(string: message)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Message Priority", "Slug": "priority", "Required": "false", "Can have default value": "true", "Filter code method": "Pushover.send.setPriority(string: priority)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Message Sound", "Helper text": "Sound to play, overriding your device's default", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Helper text": "URL to display with message", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Pushover.send.setUrl(string: url)"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device or Group", "Helper text": "Send only to a specific device, or broadcast to a delivery group", "Slug": "device", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Putio.transferFinished.Type !== \"Folder\") { \n  var title = Putio.transferFinished.Name\n  var message = \"Transfer finished: \" + Putio.transferFinished.DownloadUrl\n  Pushover.send.setTitle(title)\n  .setMessage(message)\n  .setUrl(Putio.transferFinished.ViewUrl)\n  .send()\n}", "intent": "When a Put.io transfer is finished, send a Pushover notification with the transfer's name and URL if the type of transfer is not \"Folder\"."}
{"original_description": "Don't be surprised by a flooded basement or busted water heater. Flicker your Philips hue lights as soon as a water leak is detected.", "trigger_channel": "mydlink", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mydlink.waterDetection"}, "trigger_details": [{"section": "Trigger fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Mydlink.waterDetection.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device detects the event.", "description": "The name of the device detects the event.", "details": {"Slug": "device_name", "Filter code": "Mydlink.waterDetection.DeviceName", "Type": "String", "Example": "Basement water sensor"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mydlink.waterDetection.CreatedAt > Date.now() - 30 * 60 * 1000) { // Check if the event was created in the last 30 minutes\n  var reason = \"Old event\"\n} else {\n  reason = null\n}\nvar lights = Mydlink_no.toLowerCase()\nif (Mydlink.waterDetection.DeviceName.includes(\"basement\")) {\n  Hue.blinkAllHue(\"Basement water leak detected\")\n} else if (lights === \"\") {\n  Hue.blinkAllHue.skip(\"No lights selected\")\n} else if (reason != null) {\n  Hue.blinkAllHue.skip(\"Old event, skipping\")\n} else {\n  Hue.blinkAllHue()\n}", "intent": "Automatically turn on Philips Hue lights when a water leak is detected by Mydlink."}
{"original_description": "Set the time everyday you would like to have your bot automatically turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_off_bot", "Filter code method": "Switchbot.turnOffBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_off_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var desiredTime = DateAndTime.everyDayAt.time\nif (Meta.currentUserTime.format(\"HH:mm\") === desiredTime) {\n  Switchbot.turnOffBot(desiredTime)\n} else {\n  Switchbot.turnOffBot.skip(`Not at the desired time: ${desiredTime}`)\n}", "intent": "Set the time everyday you would like to have your bot automatically turn off."}
{"original_description": "Double-clicking a Flick button changes the view on your Atmoph Window at random.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.change_view", "Filter code method": "Atmoph.changeView.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.change_view\", {})"}, "action_details": [], "filter_code": "var ClickType = Flic.click.ClickType\nif (ClickType === 'double_click') {\n  var RandomView = Math.floor(Math.random() * (Atmoph.views.length - 1)) + 1\n  Atmoph.changeView(RandomView)\n} else {\n  Atmoph.changeView.skip(\"Not a double-click event\")\n}", "intent": "Change the view on Atmoph Window to a random one when double-clicking a Flic button."}
{"original_description": "Press the iH button on your iHome device to begin a Lutron Scene.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_scene", "Filter code method": "LutronCasetaWireless.setScene.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.day() !== 0 && Meta.currentUserTime.day() !== 6) {\n  var buttonName = IhomeEnhance.enhanceButton.ButtonName;\n  var pressType = IhomeEnhance.enhanceButton.press;\n  if (pressType === \"Short Press\") {\n    LutronCasetaWireless.setScene(IhomeEnhance.enhanceButton.ButtonName)\n  } else {\n    LutronCasetaWireless.setScene.skip(\"Long Press\")\n  }\n} else {\n  LutronCasetaWireless.setScene.skip(\"Not a weekday - automation disabled\")\n}", "intent": "Trigger the Lutron Caséta and RA2 Select scene based on iHome Enhance button press, considering short or long press, and button name. Skip the action if not a weekday."}
{"original_description": "Activates the TP-Link Kasa scene you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.activate_scene", "Filter code method": "Kasa.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"kasa.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Select a scene from your account to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.ApilioValue1 === \"Green\" && Apilio.iftttActionReports.ApilioValue2 === \"Blue\") {\n  if (Apilio.iftttActionReports.IftttActionIdentifier === \"run_only_at_nighttime\") {\n    Kasa.activateScene(\"Scene Name\");\n  } else {\n    Kasa.activateScene.skip(\"Invalid Ifttt action identifier\")\n  }\n} else {\n  Kasa.activateScene.skip(\"Invalid Apilio values\")\n}", "intent": "Automatically activates the selected TP-Link Kasa scene when an Apilio event triggers, considering custom values and scene selection."}
{"original_description": "Keep your team in the loop hassle-free. This Applet posts to a Slack channel of your choosing when there is a DART rider alert during weekday morning commute hours (7-10am).", "trigger_channel": "DART", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dart.new_dart_rider_alert"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (recommended)", "Helper text": "Station name, route color, &quot;streetcar&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title, includes abbreviated timestamp.", "description": "The entry's title, includes abbreviated timestamp.", "details": {"Slug": "EntryTitle", "Filter code": "Dart.newDartRiderAlert.EntryTitle", "Type": "String", "Example": "TRE Update 5/22 9:50a"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Dart.newDartRiderAlert.EntryUrl", "Type": "String", "Example": "http://ift.tt/2rIxmGN"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content.", "description": "The entry's content.", "details": {"Slug": "EntryContent", "Filter code": "Dart.newDartRiderAlert.EntryContent", "Type": "String", "Example": "Earlier mechanical problem near Union Station has cleared. All trains resuming normal schedule. Thank you for your patience."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Dart.newDartRiderAlert.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var Hour = Meta.currentUserTime.hour()\nvar Day = Meta.currentUserTime.day()\n\nif (Hour < 7 || Hour > 10) {\n    Slack.postToChannel.skip(\"Outside of commuting hours\")\n} else if (Day == 6 || Day == 7) {\n    Slack.postToChannel.skip(\"Not a weekday\")\n} else {\n    var Message = \"DART Rider Alert: \" + Dart.newDartRiderAlert.EntryTitle\n    Slack.postToChannel.setMessage(Message)\n}", "intent": "Post to a Slack channel when there's a DART rider alert during weekday morning commute hours (7-10am).", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\nvar Day = Meta.currentUserTime.day()\n\n// Skip outside of 7-10am and 5-7pm\nif (Hour < 7 || Hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\")\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 7) {\n  Slack.postToChannel.skip(\"Not a weekday\")\n}\n\n\n"}
{"original_description": "Updates a boolean variable to true when SmartThings detects someone present.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DepartedAt !== null) {\n  if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Which device?\") {\n    Apilio.booleanVariableToFalseUpdates.skip(\"Device not specified\")\n  } else {\n    Apilio.booleanVariableToFalseUpdates.runAction({\"variable_identifier\": SmartthingsV2.newNotPresentSmartthings.DeviceName}, \"true\")\n  }\n} else {\n  Apilio.booleanVariableToFalseUpdates.skip(\"No one present detected\")\n}", "intent": "Update a boolean Apilio variable to true when SmartThings detects someone present."}
{"original_description": "Save new Raindrop.io items to Instapaper", "trigger_channel": "Raindrop.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "raindrop.raindrops_all"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nName of bookmark or file", "description": "Name of bookmark or file", "details": {"Slug": "title", "Filter code": "Raindrop.raindropsAll.Title", "Type": "String", "Example": "IFTTT API"}}, {"section": "Ingredients", "title": "Url\nURL of bookmark or file", "description": "URL of bookmark or file", "details": {"Slug": "link", "Filter code": "Raindrop.raindropsAll.Url", "Type": "Web URL", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "Description\nDescription", "description": "Description", "details": {"Slug": "excerpt", "Filter code": "Raindrop.raindropsAll.Description", "Type": "String", "Example": "Great article"}}, {"section": "Ingredients", "title": "Thumbnail url\nThumbnail URL of bookmark or file", "description": "Thumbnail URL of bookmark or file", "details": {"Slug": "cover", "Filter code": "Raindrop.raindropsAll.ThumbnailUrl", "Type": "Image URL", "Example": "https://up.raindrop.io/raindrop/123/thumb.jpg"}}, {"section": "Ingredients", "title": "Tags\nTags", "description": "Tags", "details": {"Slug": "tags", "Filter code": "Raindrop.raindropsAll.Tags", "Type": "String", "Example": "api, ifttt"}}, {"section": "Ingredients", "title": "Created at\nWhen bookmark or file is created", "description": "When bookmark or file is created", "details": {"Slug": "created", "Filter code": "Raindrop.raindropsAll.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Domain\nHostname", "description": "Hostname", "details": {"Slug": "domain", "Filter code": "Raindrop.raindropsAll.Domain", "Type": "String", "Example": "google.com"}}, {"section": "Ingredients", "title": "Id\nBookmark unique ID", "description": "Bookmark unique ID", "details": {"Slug": "id", "Filter code": "Raindrop.raindropsAll.Id", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Note\nNote", "description": "Note", "details": {"Slug": "note", "Filter code": "Raindrop.raindropsAll.Note", "Type": "String", "Example": "Note"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Raindrop.raindropsAll.Title !== \"\" && Raindrop.raindropsAll.Description !== \"\") {\n  if (Instapaper.saveItem.setUrl(Raindrop.raindropsAll.Link) &&\n      Instapaper.saveItem.setTitle(Raindrop.raindropsAll.Title) &&\n      Instapaper.saveItem.setDescription(Raindrop.raindropsAll.Description)) {\n    // Successful save\n  } else {\n    // Error saving the item\n  }\n} else {\n  // Title or description is empty, skipping the action\n  Raindrop.raindropsAll.skip(\"Title and description are required\")\n}", "intent": "When a new Raindrop.io item is created, save it to Instapaper with the provided title and description."}
{"original_description": "Save new items from RSS to Raindrop.io", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Raindrop.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "raindrop.raindrop", "Filter code method": "Raindrop.raindrop.skip(string?: reason)", "Runtime method": "runAction(\"raindrop.raindrop\", {})"}, "action_details": [{"section": "Action fields", "title": "Link\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "link", "Required": "true", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setLink(string: link)"}}, {"section": "Action fields", "title": "Collectionid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Collection", "Slug": "collectionId", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Excerpt\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Slug": "excerpt", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setExcerpt(string: excerpt)"}}, {"section": "Action fields", "title": "Cover\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Slug": "cover", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCover(string: cover)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Single or multiple separated by comma", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTags(string: tags)"}}, {"section": "Action fields", "title": "Created\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Creation date", "Slug": "created", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCreated(string: created)"}}], "filter_code": "if (Feed.newFeedItem.EntryTitle !== \"\") {\n  if (!Raindrop.raindrop.exists(EntryTitle)) {\n    Raindrop.raindrop.setLink(EntryUrl);\n    Raindrop.raindrop.setTitle(EntryTitle);\n    Raindrop.raindrop.setExcerpt(EntryContent);\n    Raindrop.raindrop.setCover(EntryImageUrl);\n    Raindrop.raindrop.setTags(\"\");\n    if (EntryPublished !== \"\") {\n      Raindrop.raindrop.setCreated(EntryPublished);\n    }\n  } else {\n    Raindrop.raindrop.skip(\"Entry already exists\");\n  }\n} else {\n  Raindrop.raindrop.skip(\"No title provided\");\n}", "intent": "Save new items from RSS to Raindrop.io."}
{"original_description": "Flash all of your Hue light bulbs if your abode alarm activates for any reason.", "trigger_channel": "abode", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "abode.alarm_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Abode.alarmTriggered.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Alarm type\nType of alarm triggered.", "description": "Type of alarm triggered.", "details": {"Slug": "alarm_type", "Filter code": "Abode.alarmTriggered.AlarmType", "Type": "String", "Example": "Fire Alarm Triggered"}}, {"section": "Ingredients", "title": "Device name\nName of device whose alarm is triggered.", "description": "Name of device whose alarm is triggered.", "details": {"Slug": "device_name", "Filter code": "Abode.alarmTriggered.DeviceName", "Type": "String", "Example": "abode Gateway Alarm"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Abode.alarmTriggered.AlarmType !== \"Silence\") {\n  Hue.blinkAllHue(\"Abode Alarm Triggered: \" + Abode.alarmTriggered.DeviceName)\n}", "intent": "Flash all Hue light bulbs when Abode alarm triggers."}
{"original_description": "When your Blue by ADT alarm goes off receive a notification on your Android Wear watch. \n\nYou may select a specific alarm type or all alarm events.  For all alarm events, specify '(All)' for the Event Type.\n", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time alarm occurred.", "description": "Date and time alarm occurred.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.alarm.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of alarm that occurred.", "description": "The EventType describes the type of alarm that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.alarm.EventType", "Type": "String", "Example": "Fire"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.alarm.FormattedMessage", "Type": "String", "Example": "Medical Alarm"}}], "action_channel": "Wear OS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_wear.send_notification_to_android_wear", "Filter code method": "AndroidWear.sendNotificationToAndroidWear.skip(string?: reason)", "Runtime method": "runAction(\"android_wear.send_notification_to_android_wear\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Notification", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidWear.sendNotificationToAndroidWear.setMessage(string: message)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "AndroidWear.sendNotificationToAndroidWear.setImage Url(string: image_url)"}}], "filter_code": "const EventType = Bluebyadt.alarm.EventType\nif (EventType === 'Fire' || EventType === 'Medical Alarm') {\n  const Timestamp = Bluebyadt.alarm.Timestamp\n  const FormattedMessage = Bluebyadt.alarm.FormattedMessage\n  \n  // Set the message for the notification\n  if (Event_Type === '(All)') {\n    var message = `Alarm Triggered: ${FormattedMessage}`\n  } else {\n    var message = `${FormattedMessage} at ${Timestamp}`\n  }\n  \n  AndroidWear.sendNotificationToAndroidWear.setMessage(message)\n} else {\n  AndroidWear.sendNotificationToAndroidWear.skip(\"Unsupported alarm type\")\n}", "intent": "This IFTTT automation receives notifications on an Android Wear watch when a Blue by ADT alarm goes off, with the option to select specific alarm types or all alarm events."}
{"original_description": "Turn off Smart Home Solution device when Suspected Motion Stops.", "trigger_channel": "Aerial Technologies", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AerialTechnologies.motion_detection_motion_stopped"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event", "description": "Type of event", "details": {"Slug": "type", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Type", "Type": "String", "Example": "motionDetection.humanMotion.stopped"}}, {"section": "Ingredients", "title": "Serial\nSerial", "description": "Serial", "details": {"Slug": "serial", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Serial", "Type": "String", "Example": "ABCDEF"}}, {"section": "Ingredients", "title": "Id\nEvent identifier", "description": "Event identifier", "details": {"Slug": "id", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Id", "Type": "String", "Example": "uuid"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_off", "Filter code method": "SmartHomeSolution.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The name of the device to turn off", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AerialTechnologies.motionDetectionMotionStopped.Type !== \"unknown\") {\n  let reason = \"\"\n  if (typeof AerialTechnologies.motionDetectionMotionStopped.Reason !== 'undefined') {\n    reason = \" due to: \" + AerialTechnologies.motionDetectionMotionStopped.Reason\n  }\n  SmartHomeSolution.turnDeviceOff(AerialTechnologies.motionDetectionMotionStopped.device_address, reason)\n} else {\n  SmartHomeSolution.turnDeviceOff.skip(\"Unknown event type\")\n}", "intent": "When suspected motion stops, turn off a specified Smart Home Solution device if the type of event is not \"unknown\"."}
{"original_description": "Want to keep an eye on LGBT rights in your state? Enter your state as the keyword when you set  up the Applet — if there's a new post mentioning it on hrc.org, you'll get an email. Want to track more than one state? You can set up multiple versions!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItemMatches.EntryContent.includes(keyword)) {\n  Email.sendMeEmail.setSubject(\"New Post: \" + Feed.newFeedItemMatches.EntryTitle)\n  .setBody(\"https://hrc.org/\" + Feed.newFeedItemMatches.EntryUrl + \"<br><br>\" + Feed.newFeedItemMatches.EntryContent)\n  .send()\n} else {\n  Email.sendMeEmail.skip(\"No post found\")\n}", "intent": "When setting up an Applet to track LGBT rights in a specific state, enter the state as the keyword. If there's a new post mentioning it on hrc.org, you'll receive an email with the subject and body containing information about the post."}
{"original_description": "If your SmartThings device detect presence, then turn off SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DepartedAt !== undefined) {\n  var DepartedAt = SmartthingsV2.newNotPresentSmartthings.DepartedAt;\n  if (DepartedAt.includes(\"Absent\")) {\n    Spotcam.turnOffSpotcam.skip(\"Device has departed\")\n  } else {\n    Spotcam.turnOffSpotcam();\n  }\n}", "intent": "Automatically turn off SpotCam when SmartThings detects absence."}
{"original_description": "If your SpotCam detect motion, then turn off your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var reason = \"\"\nif (Spotcam.spotcamRingEvent.EventTime.getHours() < 7 || Spotcam.spotcamRingEvent.EventTime.getHours() > 22) {\n  reason += \" Outside of active hours, skipping action \"\n}\n// Add more conditionals here...\nHue.turnOnAllHue.skip(reason)", "intent": "Automatically turn off Philips Hue when SpotCam detects motion."}
{"original_description": "If your SpotCam detect sound, then make your Philips Hue blink automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.audio_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.audioEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.audioEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.audioEvent.CameraName", "Type": "String", "Example": "L'aéroport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.audioEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.audioEvent.SpotCamSerialNumber === \"true\" && Spotcam.audioEvent.EventTime !== \"\") {\n  Hue.blinkAllHue(\"Philips Hue is blinking\")\n}", "intent": "If SpotCam detects sound, then make Philips Hue blink automatically."}
{"original_description": "If your SmartThings device detect presence, then turn off SpotCam alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_alert", "Filter code method": "Spotcam.turnOffAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceName = $$DeviceName$$\nif (SmartthingsV2.newNotPresentSmartthings.DepartedAt !== null) {\n  if (SmartthingsV2.newNotPresentSmartthings.Device === true) {\n    Spotcam.turnOffAlert.skip(\"No reason\")\n  } else {\n    Spotcam.turnOffAlert(SmartthingsV2.newNotPresentSmartthings.DeviceName)\n  }\n} else {\n  Spotcam.turnOffAlert.skip(\"Device not present or departed at is null\")\n}", "intent": "Automatically turn off SpotCam alert when SmartThings detects absence."}
{"original_description": "If your SpotCam detect sound, then dim your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.audio_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.audioEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.audioEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.audioEvent.CameraName", "Type": "String", "Example": "L'aéroport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.audioEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "var Brightness = parseFloat([Trigger].brightness)\nif (Brightness > 0) {\n  var Reason = \"No brightness specified\"\n  if ([Trigger].sn === \"SWA00058rhwx\") {\n    Reason = \"Customized for this camera\"\n  }\n  Hue.setBrightnessAllHue.skip(Reason)\n}", "intent": "Automatically dim Philips Hue lights when SpotCam detects sound."}
{"original_description": "If your SpotCam detect motion, then dim your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "if (Spotcam.spotcamRingEvent.EventTime.getHours() >= 7 && Spotcam.spotcamRingEvent.EventTime.getHours() <= 22) {\n  var brightness = parseInt(action.lights)\n  if (brightness > 0) {\n    Hue.setBrightnessAllHue(Hue.brightnessToDim(brightness))\n  } else {\n    Hue.setBrightnessAllHue.skip(\"No lights selected\")\n  }\n} else {\n  Hue.setBrightnessAllHue.skip(\"Outside of active hours\")\n}", "intent": "Automatically dim Philips Hue lights when SpotCam detects motion."}
{"original_description": "If your SpotCam detect motion, then make your Philips Hue blink", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var EventTime = Meta.currentUserTime.format(\"YYYY-MM-DDTHH:mm:ss.sssZ\")\nif (Spotcam.spotcamRingEvent.EventTime !== EventTime) {\n  Hue.blinkAllHue.skip(\"Outdated event time detected\")\n} else if (Spotcam.spotcamRingEvent.CameraName === \"SpotCam Ring\") {\n  Hue.blinkAllHue()\n} else {\n  Hue.blinkAllHue.skip(\"Invalid camera name: \" + Spotcam.spotcamRingEvent.CameraName)\n}", "intent": "When SpotCam detects motion, make Philips Hue blink."}
{"original_description": "Turn on all the lights if the alarm is triggered.", "trigger_channel": "Uplink Remote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uplinkremote.armtrigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Notification date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "notification_date", "Filter code": "Uplinkremote.armtrigger.NotificationDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event description\nEvent description", "description": "Event description", "details": {"Slug": "message", "Filter code": "Uplinkremote.armtrigger.EventDescription", "Type": "String", "Example": "Panel is Armed"}}, {"section": "Ingredients", "title": "Device name\nName of unit", "description": "Name of unit", "details": {"Slug": "serial_number", "Filter code": "Uplinkremote.armtrigger.DeviceName", "Type": "String", "Example": "John's Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var notificationDate = Uplinkremote.armtrigger.NotificationDate\nif (notificationDate.getHours() < 7 || notificationDate.getHours() > 22) {\n  Hue.turnOnAllHue.skip(\"Outside of active hours\")\n} else {\n  Hue.turnOnAllHue()\n}", "intent": "If the alarm is triggered, turn on all the lights if it's during working hours."}
{"original_description": "If Boundary Alarm is triggered send a text message to a chosen number using ClickSend", "trigger_channel": "Boundary", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "boundary.alarm_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Triggered at\nDate and time alarm was triggered.", "description": "Date and time alarm was triggered.", "details": {"Slug": "triggered_at", "Filter code": "Boundary.alarmTriggered.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event occurred", "description": "Type of event occurred", "details": {"Slug": "type", "Filter code": "Boundary.alarmTriggered.Type", "Type": "String", "Example": "Alarm Triggered"}}], "action_channel": "ClickSend SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "clicksend.send_sms", "Filter code method": "Clicksend.sendSms.skip(string?: reason)", "Runtime method": "runAction(\"clicksend.send_sms\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "From\nText input > Other", "description": "Text input > Other", "details": {"Label": "From", "Helper text": "Number or name where the message comes 'from'. If you use a name e.g. &quot;MyCompany&quot; the user can't reply. Special rules apply to US and Canada numbers. <a href=\"https://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number?from_search=16912480\" target=\"_blank\">More info</a>.", "Slug": "from", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Clicksend.sendSms.setMessage(string: message)"}}], "filter_code": "if (Boundary.alarmTriggered.Type === 'Alarm Triggered') {\n  if (Boundary.alarmTriggered.TriggeredAt) {\n    var message = \"Boundary Alarm triggered at \" + Boundary.alarmTriggered.TriggeredAt;\n    Clicksend.sendSms.setMessage(message);\n    Clicksend.sendSms(\"to\", message);\n  } else {\n    Clicksend.sendSms.skip('No trigger time provided');\n  }\n}", "intent": "If the Boundary Alarm is triggered, send a text message to a chosen number using ClickSend SMS."}
{"original_description": "If your SmartThings device is opened, then turn on your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_alert", "Filter code method": "Spotcam.turnOnAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\" && SmartthingsV2.openedSmartthings.OpenedAt.includes(\"12:43PM\")) {\n  Spotcam.turnOnAlert()\n} else {\n  Spotcam.turnOnAlert.skip(\"Device name mismatch or incorrect time\")\n}", "intent": "When the SmartThings device is opened, automatically turn on the SpotCam Alert if the device name and the date and time of opening meet certain conditions."}
{"original_description": "If your SmartThings device presence no longer detected then turn on SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DepartedAt = SmartthingsV2.newNotPresentSmartthings.DepartedAt\nif (SmartthingsV2.newNotPresentSmartthings.Device !== \"\") {\n  if (!SmartthingsV2.newNotPresentSmartthings.newNotPresent) {\n    Spotcam.turnOffSpotcam.skip(\"Device is still present\")\n  } else {\n    var Sn = SmartthingsV2.newNotPresentSmartthings.Sn\n    Spotcam.turnOffSpotcam(Sn)\n  }\n}", "intent": "Automatically turn on SpotCam when the SmartThings device presence is no longer detected."}
{"original_description": "If your SmartThings device is opened, then turn off your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_alert", "Filter code method": "Spotcam.turnOffAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.OpenedAt !== \"\") {\n  if (SmartthingsV2.openedSmartthings.DeviceName !== \"\") {\n    var reason = \"Device \" + SmartthingsV2.openedSmartthings.DeviceName + \" opened.\"\n    Spotcam.turnOffAlert.skip(reason)\n  } else {\n    Spotcam.turnOffAlert()\n  }\n}", "intent": "Automate the SpotCam Alert to turn off automatically when a SmartThings device is opened."}
{"original_description": "This will change the WiZ light(s) of your choice to Cool white if SmartThings detects a temperature above the level you defined. Best way to refresh the room!", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.temperature_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Temperature value", "Helper text": "Temperature in threshold as a number", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature units", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nThe temperature measured by the sensor in Fahrenheit.", "description": "The temperature measured by the sensor in Fahrenheit.", "details": {"Slug": "TemperatureFahrenheit", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit", "Type": "String", "Example": "74"}}, {"section": "Ingredients", "title": "Temperature celsius\nThe temperature measured by the sensor in Celsius.", "description": "The temperature measured by the sensor in Celsius.", "details": {"Slug": "TemperatureCelsius", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureCelsius", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Threshold\nThe temperature threshold set in the recipe.", "description": "The temperature threshold set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.Threshold", "Type": "String", "Example": "75"}}, {"section": "Ingredients", "title": "Threshold units\nThe temperature threshold units (C or F).", "description": "The temperature threshold units (C or F).", "details": {"Slug": "ThresholdUnits", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.ThresholdUnits", "Type": "String", "Example": "F"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the temperature.", "description": "The date and time the sensor measured the temperature.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "// Get the device name and entity\nvar DeviceName = $$device$$;\nvar Entity = $$entity$$;\n\nif (SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit > parseInt(SmartthingsV2.temperatureRisesAboveSmartthings.Threshold)) {\n  // Check if threshold is in Celsius\n  if (SmartthingsV2.temperatureRisesAboveSmartthings.ThresholdUnits === \"C\") {\n    SmartthingsV2.temperatureRisesAboveSmartthings.Threshold = parseInt((parseInt(SmartthingsV2.temperatureRisesAboveSmartthings.Threshold) * 9/5) + 32);\n  }\n  \n  // Set the mode to Cool white\n  Wiz.turnOn.setMode(\"Cool\");\n  \n  // Run the action for the specified entity and device\n  runAction(\"wiz.turn_on\", {\n    \"entity\": Entity,\n    \"device\": DeviceName\n  });\n} else {\n  Wiz.turnOn.skip(\"Temperature below threshold\");\n}", "intent": "When the temperature in SmartThings rises above the defined threshold, change the WiZ light(s) to Cool white."}
{"original_description": "If your SpotCam detect sound, then turn off your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.audio_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.audioEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.audioEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.audioEvent.CameraName", "Type": "String", "Example": "L'aéroport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.audioEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.audioEvent.SpotcamAudioDetected) {\n  Hue.turnOnAllHue.skip(\"Sound detected\")\n}", "intent": "Automatically turn off Philips Hue if SpotCam detects sound."}
{"original_description": "This applet calls your phone when Camio detects motion.", "trigger_channel": "Camio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "camio.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a camera", "Helper text": "Choose &quot;All Cameras&quot; to monitor all cameras.", "Slug": "camera", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Camera name\nThe camera that detected the motion.", "description": "The camera that detected the motion.", "details": {"Slug": "camera_name", "Filter code": "Camio.motionDetected.CameraName", "Type": "String", "Example": "DoorCamera"}}, {"section": "Ingredients", "title": "Triggered time\nThe time at which the event was triggered.", "description": "The time at which the event was triggered.", "details": {"Slug": "triggered_time", "Filter code": "Camio.motionDetected.TriggeredTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Colors\nA comma separated list of colors that were detected in the event.", "description": "A comma separated list of colors that were detected in the event.", "details": {"Slug": "colors", "Filter code": "Camio.motionDetected.Colors", "Type": "String", "Example": "blue, purple, green"}}, {"section": "Ingredients", "title": "Event link\nA link to the event at camio.com (only accessible if you're logged in).", "description": "A link to the event at camio.com (only accessible if you're logged in).", "details": {"Slug": "event_link", "Filter code": "Camio.motionDetected.EventLink", "Type": "Web URL", "Example": "https://www.camio.com/#search;t=123"}}, {"section": "Ingredients", "title": "Zones\nA comma separated list of zones in which motion occurred.", "description": "A comma separated list of zones in which motion occurred.", "details": {"Slug": "zones", "Filter code": "Camio.motionDetected.Zones", "Type": "String", "Example": "Window, Door"}}, {"section": "Ingredients", "title": "Motion direction\nThe direction of motion in the event (approaching or departing the camera or N/A).", "description": "The direction of motion in the event (approaching or departing the camera or N/A).", "details": {"Slug": "motion_direction", "Filter code": "Camio.motionDetected.MotionDirection", "Type": "String", "Example": "approaching"}}, {"section": "Ingredients", "title": "Objects detected\nThe objects detected in the event (currently just people and cars).", "description": "The objects detected in the event (currently just people and cars).", "details": {"Slug": "objects_detected", "Filter code": "Camio.motionDetected.ObjectsDetected", "Type": "String", "Example": "People, Cars"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (Camio.motionDetected.MotionDirection !== \"N/A\") {\n  Woopla.ttsCall.skip(\"No direction detected\")\n} else if (Camio.objectsDetected.includes(\"People\")) {\n  Woopla.ttsCall.setTts(\"Someone is approaching the camera.\")\n  Woopla.ttsCall.runAction()\n} else if (Camio.objectsDetected.includes(\"Cars\")) {\n  Woopla.ttsCall.setTts(\"A car is approaching the camera.\")\n  Woopla.ttsCall.runAction()\n} else {\n  Woopla.ttsCall.skip(\"No objects detected\")\n}", "intent": "When Camio detects motion, it calls your phone with a custom message."}
{"original_description": "毎日、指定した日時にBOCCOがリマインドします", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime === Date.now().toString()) {\n  if (Time === \"指定した日時\") { // Set Time to the desired reminder time\n    Bocco.boccoSpeak.setMessage(message)\n  } else {\n    Bocco.boccoSpeak.skip(\"Not at designated reminder time\")\n  }\n} else {\n  Bocco.boccoSpeak.skip(\"Not today's reminder\")\n}", "intent": "Every day, at a specified time, BOCCO will remind you."}
{"original_description": "Whenever the price comes back down below my threshold, change the color of my Philips Hue light bulbs to my specified value.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (ComEd.averagePriceChange.AveragePrice < which_price_threshold) {\n  var lights = [\"Living Room\", \"Kitchen\"];\n  var color = which_color;\n  if (!Hue.setColorAllHue.skip()) {\n    Hue.setColorAllHue.setColor(color).runAction(\"hue.set_color_all_hue\");\n  }\n} else {\n  Hue.shadeClose.skip(\"Price has not reached the threshold\");\n}", "intent": "Whenever the price comes back down below my specified threshold, change the color of my Philips Hue light bulbs to my desired value."}
{"original_description": "Whenever the price exceeds the set threshold, change the color of my Philips Hue light bulbs to my specified value.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var Threshold = $$which_price_threshold$$\nif (ComEd.averagePriceChange.AveragePrice > Threshold) {\n  var ColorValue = $$color$$\n  Hue.setColorAllHue.setColor(ColorValue)\n} else {\n  Hue.setColorAllHue.skip(\"Price did not exceed threshold\")\n}", "intent": "Whenever the average price exceeds a set threshold, change the color of all Philips Hue lights to a specified color."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of three phases total power consumption ", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_action_power_consumption_trifase"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.energyGlobalActionPowerConsumptionTrifase.State === \"higher\" || ViewProd.energyGlobalActionPowerConsumptionTrifase.State === \"lower\") {\n  Telegram.sendMessage({\n    chat_id: $$chat_id$$,\n    text: `Total power consumption has reached ${ViewProd.energyGlobalActionPowerConsumptionTrifase.Threshold}.`\n  })\n} else {\n  Telegram.sendMessage.skip(\"No threshold exceeded\")\n}", "intent": "This applet sends a notification on Telegram when the three phases total power consumption reaches a higher or lower value."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of single phase total power consumption ", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_action_power_consumption_trifase"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.energyGlobalActionPowerConsumptionTrifase.CreatedAt > Date.now() - 3600000) {\n  var device = ViewProd.energyGlobalActionPowerConsumptionTrifase.Device;\n  var state = ViewProd.energyGlobalActionPowerConsumptionTrifase.State;\n  if ((parseInt(Vimar VIEW.getSinglePhaseTotalPowerConsumption()) > parseInt(ViewProd.energyGlobalActionPowerConsumptionTrifase.Threshold)) || (parseInt(Vimar VIEW.getSinglePhaseTotalPowerConsumption()) < parseInt(ViewProd.energyGlobalActionPowerConsumptionTrifase.Threshold))) {\n    Telegram.sendMessage.setText(\"Device \" + device + \" has reached a total power consumption of \" + Vimar VIEW.getSinglePhaseTotalPowerConsumption() + \". Current state: \" + state);\n  } else {\n    Telegram.sendMessage.skip(\"No change in single phase total power consumption\");\n  }\n}", "intent": "This applet sends a notification on Telegram when the single phase total power consumption reaches a higher or lower value than previously set."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of single phase exchanged power (positive value means taken from the utility / negative value means given to the utility)", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_active_power_exchange"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActivePowerExchange.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActivePowerExchange.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActivePowerExchange.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var Device = ViewProd.energyGlobalActivePowerExchange.Device;\nvar Condition = ViewProd.energyGlobalActivePowerExchange.Condition;\nvar Threshold = ViewProd.energyGlobalActivePowerExchange.Threshold;\n\nif (Condition === \"higher\" && ViewProd.energyGlobalActivePowerExchange.PowerExchange > Threshold) {\n  Telegram.sendMessage.setText(\"Utility is taking power: \" + Device)\n    .setIncludeWebPagePreview(false);\n} else if (Condition === \"lower\" && ViewProd.energyGlobalActivePowerExchange.PowerExchange < Threshold) {\n  Telegram.sendMessage.setText(\"Utility is giving back power: \" + Device)\n    .setIncludeWebPagePreview(false);\n}", "intent": "This applet sends a notification on Telegram if the single-phase exchanged power reaches a higher or lower value."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of single phase produced power ", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_action_power_product"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActionPowerProduct.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActionPowerProduct.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActionPowerProduct.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "var device = ViewProd.energyGlobalActionPowerProduct.Device\nvar state = ViewProd.energyGlobalActionPowerProduct.State\nvar threshold = ViewProd.energyGlobalActionPowerProduct.Threshold\nif (state === \"higher\" && ViewProd.energyGlobalActionPowerProduct.CurrentValue > threshold) {\n  Telegram.sendMessage.skip(\"No higher value detected\")\n} else if (state === \"lower\" && ViewProd.energyGlobalActionPowerProduct.CurrentValue < threshold) {\n  Telegram.sendMessage.skip(\"No lower value detected\")\n} else {\n  var message = \"Alert: Single phase produced power has reached a new value of \" + ViewProd.energyGlobalActionPowerProduct.CurrentValue\n  Telegram.sendMessage.setText(message)\n}", "intent": "This applet sends a notification on Telegram when reaching a higher or lower value of single phase produced power."}
{"original_description": "When the Litter-Robot is full, turn the Philips Hue lighting to purple", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"Full\") {\n  Hue.setColorAllHue(\"purple\")\n} else {  \n  Hue.setColorAllHue.skip(\"Not full Litter-Robot\")\n}", "intent": "When the Litter-Robot is full, turn the Philips Hue lighting to purple."}
{"original_description": "Press the iH button on your iHome device to dim Philips Hue Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "var Press = IhomeEnhance.enhanceButton.Press\nif (Press === \"Long\") {\n  var Lights = // Get the selected lights from action fields\n  var Brightness = // Get the specified brightness from action fields\n  Hue.setBrightnessAllHue.skip(\"No long press detected\")\n} else {\n  Hue.setBrightnessAllHue.skip(\"Short press, no action taken\")\n}", "intent": "Trigger iHome Enhance button press and check if it's a short or long press. If it's a long press, dim all Philips Hue lights to a specific brightness."}
{"original_description": "Press the iH button on your iHome device to change the color of Philips Hue Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.press === \"Short or Long Press\" && IhomeEnhance.enhanceButton.button_name !== \"\") {\n  var lights = IhomeEnhance.enhanceButton.lights;\n  var color = IhomeEnhance.enhanceButton.color;\n  Hue.setColorAllHue.skip(`Button ${IhomeEnhance.enhanceButton.button_name} pressed with lights ${lights} and color ${color}`);\n}", "intent": "When iHome Enhance button is pressed, set Philips Hue lights to a specific color based on user input."}
{"original_description": "Blink the Phillips hue lights when your child gets Boosted.", "trigger_channel": "RoosterMoney", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "roostermoney.removed"}, "trigger_details": [{"section": "Trigger fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Roostermoney.removed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Amount\nThe amount they were removed", "description": "The amount they were removed", "details": {"Slug": "amount", "Filter code": "Roostermoney.removed.Amount", "Type": "String", "Example": "£1.23"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var BoostedRemoved = Roostermoney.removed\nif (BoostedRemoved.amount > 0 && BoostedRemoved.child === \"Your Child\" && BoostedRemoved.pot === \"The Pot\") {\n  Hue.blinkAllHue(\"Child's Boosted account removed: £\" + BoostedRemoved.amount)\n} else {\n  Hue.blinkAllHue.skip(\"Invalid child, pot or amount\")\n}", "intent": "Blink the Philips Hue lights when a child's Boosted account is removed."}
{"original_description": "Sets a scene on the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var createdAt = Apilio.iftttActionReports.CreatedAt;\nvar eventName = Apilio.iftttActionReports.EventName;\nvar customValue1 = Apilio.iftttActionReports.ApilioValue1;\nvar customValue2 = Apilio.iftttActionReports.ApilioValue2;\nvar customValue3 = Apilio.iftttActionReports.ApilioValue3;\n\nif (eventName === \"run_only_at_nighttime\" && createdAt.getHours() >= 22 || createdAt.getHours() <= 6) {\n  if (customValue1 === \"Green\") {\n    Hue.setScene(\"My Green Scene\");\n  } else if (customValue2 === \"Blue\") {\n    Hue.setScene(\"My Blue Scene\");\n  } else if (customValue3 === \"Red\") {\n    Hue.setScene(\"My Red Scene\");\n  }\n} else {\n  Hue.setScene.skip(\"Not a nighttime event\")\n}", "intent": "When Apilio triggers an action with a specific identifier, set the scene on the selected Philips Hue lights based on the values received from Apilio."}
{"original_description": "Changes the color of the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "let Color = \"\"\nif (Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  Color = \"green\"\n} else if (Apilio.iftttActionReports.ApilioValue2 === \"Blue\") {\n  Color = \"blue\"\n} else if (Apilio.iftttActionReports.ApilioValue3 === \"Red\") {\n  Color = \"red\"\n}\nHue.setColorAllHue.skip(string: `Change color to ${Color} due to Apilio event '${Apilio.iftttActionReports.IftttActionIdentifier}'`)", "intent": "Changes the color of selected Philips Hue lights when an Apilio event is triggered, based on the Apilio values received."}
{"original_description": "Everyday at the time you selected, IFTTT fires action, turns off your projector and Philip Hue automatically.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Optoma", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Optoma.led_on_off", "Filter code method": "Optoma.ledOnOff.skip(string?: reason)", "Runtime method": "runAction(\"Optoma.led_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Optoma.ledOnOff.setTurn On Off(string: turn_on_off)"}}], "filter_code": "", "intent": "Turns off Optoma projector every day at the specified time."}
{"original_description": "Turn on Philips Hue light automatically to designated account when someone's SpotCam detects human", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.human_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.humanDetected.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.humanDetected.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.humanDetected.CameraName", "Type": "String", "Example": "Airport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.humanDetected.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.humanDetected.Sn !== \"\") {\n  var reason = \"No valid serial number provided\";\n  if (Spotcam.humanDetected.EventTime >= Meta.currentUserTime.now() - 300000 && Spotcam.humanDetected.CameraName === \"Airport\") {  \n    Hue.turnOnAllHue.skip(reason);\n  } else {\n    Hue.turnOnAllHue();\n  }\n} else {\n  Hue.turnOnAllHue.skip(\"No serial number provided\");\n}", "intent": "Automatically turn on Philips Hue lights when SpotCam detects human presence."}
{"original_description": "Dims or brightens the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "var CreatedAt = new Date(Apilio.iftttActionReports.CreatedAt)\nif (CreatedAt.getHours() >= 6 && CreatedAt.getHours() <= 22) {\n  var selectedLights = [];\n  var brightnessValue = \"\";\n  \n  // Check if the event name is \"run_only_at_nighttime\" and adjust brightness accordingly\n  if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n    brightnessValue = \"50\"; // Default value for night mode\n  }\n  \n  // Get the selected lights from Apilio values\n  var customValue1 = Apilio.iftttActionReports.ApilioValue1;\n  if (customValue1 !== \"\") {\n    selectedLights.push(customValue1);\n  }\n  var customValue2 = Apilio.iftttActionReports.ApilioValue2;\n  if (customValue2 !== \"\") {\n    selectedLights.push(customValue2);\n  }\n  var customValue3 = Apilio.iftttActionReports.ApilioValue3;\n  if (customValue3 !== \"\") {\n    selectedLights.push(customValue3);\n  }\n  \n  // Adjust the brightness of the selected lights\n  Hue.setBrightnessAllHue.skip(\"No action required\")\n  for (var i = 0; i < selectedLights.length; i++) {\n    var light = selectedLights[i];\n    if (light === customValue1) {\n      Hue.setBrightnessAllHue.setBrightness(string: \"50\"); // Set brightness to 50 for Green\n    } else if (light === customValue2) {\n      Hue.setBrightnessAllHue.setBrightness(string: \"75\"); // Set brightness to 75 for Blue\n    } else if (light === customValue3) {\n      Hue.setBrightnessAllHue.setBrightness(string: \"100\"); // Set brightness to 100 for Red\n    }\n  }\n}", "intent": "When Apilio triggers the specified action, this script will check if it is a specific time and adjust Philips Hue lights according to user selection."}
{"original_description": "Everyday at the time you selected, IFTTT fires action, turns on my Optoma projector and Philip Hue.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Optoma", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Optoma.projector_on_off", "Filter code method": "Optoma.projectorOnOff.skip(string?: reason)", "Runtime method": "runAction(\"Optoma.projector_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Optoma.projectorOnOff.setTurn On Off(string: turn_on_off)"}}], "filter_code": "var SelectedTime = DateAndTime.everyDayAt.CheckTime\nif (Meta.currentUserTime.format(\"HH:mm\") === SelectedTime) {\n  Optoma.projectOnOff(setTurnOnOff(\"on\"))\n} else {\n  Optoma.projectorOnOff.skip(\"Not at the selected time\")\n}", "intent": "This IFTTT automation checks if the current time matches the selected time and turns on an Optoma projector and Philip Hue based on this condition."}
{"original_description": "Turn your Philips Hue light bulb red during on-peak hours to always know when electricity costs more. Be sure to create another Applet to change the color when the cost of electricity decreases.", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.time_of_day"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nDropdown list", "description": "Dropdown list", "details": {"Label": "This event should trigger when peak rates:", "Slug": "event", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.timeOfDay.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.timeOfDay.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.timeOfDay.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.timeOfDay.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (FcuTod.timeOfDay.DayType === \"Weekday\" && FcuTod.timeOfDay.Datetime.getHours() >= 7 && FcuTod.timeOfDay.Datetime.getHours() <= 17) {\n  Hue.setColorAllHue(\"red\")\n} else {\n  Hue.setColorAllHue.skip(\"Not during peak hours or weekend\")\n}", "intent": "Check if it's a weekday and during peak hours, then change the Philips Hue lights to red."}
{"original_description": "If your SpotCam Ring battery is low, then make your Philips Hue blink automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.BatteryLevel < 20) {\n  var reason = 'Low battery level: ' + Spotcam.spotcamRingEvent.BatteryLevel\n  Hue.blinkAllHue.skip(reason)\n}", "intent": "When the SpotCam Ring battery is low, make Philips Hue blink automatically."}
{"original_description": "If your SpotCam Ring battery cover is removed, then make your Philips Hue blink automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.cover_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.coverEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.coverEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var eventTime = Spotcam.coverEvent.EventTime;\nif (Spotcam.coverEvent.sn !== \"Removed\" || !eventTime) {\n  Hue.blinkAllHue.skip(\"No valid battery cover removal detected\");\n} else {\n  var lights = [\"Your preferred lights\"];\n  Hue.blinkAllHue(lights);\n}", "intent": "Automatically blink Philips Hue when SpotCam Ring battery cover is removed, with the option to specify which lights."}
{"original_description": "If your SpotCam detect motion, then turn on your Philips Hue atuomatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"\") {\n  Hue.turnOnAllHue.skip(\"No camera name detected\")\n}\nelse if (!Spotcam.spotcamRingEvent.EventTime) {\n  Hue.turnOnAllHue.skip(\"No event time detected\")\n}\nelse {\n  Hue.turnOnAllHue()\n}", "intent": "Automatically turn on Philips Hue lights when SpotCam detects motion."}
{"original_description": "Turn on Philips Hue light automatically to designated account when someone's SpotCam detects fence crossed", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.virtual_fence_crossed"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.virtualFenceCrossed.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.virtualFenceCrossed.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.virtualFenceCrossed.CameraName", "Type": "String", "Example": "Airport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.virtualFenceCrossed.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.virtualFenceCrossed.Sn !== \"\") {\n  Hue.turnOnAllHue.skip(\"No valid serial number provided\")\n} else {\n  Hue.turnOnAllHue()\n}", "intent": "Automatically turn on Philips Hue lights when SpotCam detects a fence crossing."}
{"original_description": "Briefly blinks the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.IftttActionIdentifier === \"run_only_at_nighttime\" && Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  var Lights = JSON.parse(IFTTTState.lights);\n  Hue.blinkAllHue(Lights, \"Green\");\n} else {\n  Hue.blinkAllHue.skip(\"Apilio value1 is not Green\")\n}", "intent": "When Apilio triggers an action with a specified identifier, briefly blink the selected Philips Hue lights if the Apilio value1 is Green."}
{"original_description": "Turn your audio and TV appliances of via Logitec Harmony while activating your NIko Home Control routines", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.end-activity", "Filter code method": "Harmony.endActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.end-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Routine = Nikohomecontrol.routineActivated.Routine\nif (Routine === 'Party') {\n  var CreatedAt = new Date(Nikohomecontrol.routineActivated.CreatedAt)\n  if (CreatedAt.getDay() !== 0 && CreatedAt.getDay() !== 6) { // weekdays only\n    Harmony.endActivity('audio', 'on')\n    Harmony.endActivity('tv', 'on')\n  } else {\n    Harmony.endActivity.skip(\"Only weekdays supported\")\n  }\n} else {\n  Harmony.endActivity.skip(\"Unsupported routine: \" + Routine)\n}", "intent": "Turn on audio and TV appliances via Logitech Harmony when a Niko Home Control routine is activated."}
{"original_description": "When there appears a new popular article in a specified section of the New York Times, let Homey announce this as your personal news anchor.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.any_new_popular_article_today"}, "trigger_details": [{"section": "Trigger fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Section", "Slug": "section", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.anyNewPopularArticleToday.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.anyNewPopularArticleToday.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.anyNewPopularArticleToday.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.anyNewPopularArticleToday.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.anyNewPopularArticleToday.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.anyNewPopularArticleToday.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Homey", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "homey.let_homey_speak", "Filter code method": "Homey.letHomeySpeak.skip(string?: reason)", "Runtime method": "runAction(\"homey.let_homey_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Which homey\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Homey?", "Slug": "which_homey", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What text?", "Slug": "what_text", "Required": "true", "Can have default value": "true", "Filter code method": "Homey.letHomeySpeak.setWhat Text(string: what_text)"}}], "filter_code": "var Section = triggerDetails.find(item => item Slug === \"section\").Label\nif (Section !== \"Opinion\" && Section !== \"Editorials\" && Section !== \"Corrections\") {\n  var Title = Nytimes.anyNewPopularArticleToday.Title\n  var Author = Nytimes.anyNewPopularArticleToday.Author\n  var Blurb = Nytimes.anyNewPopularArticleToday.Blurb\n  var ArticleUrl = Nytimes.anyNewPopularArticleToday.ArticleUrl\n  varImageUrl = Nytimes.anyNewPopularArticleToday.ImageUrl\n  var PublishedDate = Nytimes.anyNewPopularArticleToday.PublishedDate\n  var Source = Nytimes.anyNewPopularArticleToday.Source\n  \n  Homey.letHomeySpeak(\"Breaking news! A new popular article has been published in \" + Section + \". The title is: '\" + Title + \"'. It was written by \" + Author + \". Here's a short summary: \" + Blurb + \". You can read the full article at \" + ArticleUrl + \". The image related to this article is available at \" + imageUrl + \". Published on \" + PublishedDate + \". The source of this article is \" + Source + \".\")\n} else {\n  Homey.letHomeySpeak.skip(\"This article is not relevant for you.\")\n}", "intent": "When a new popular article appears in a specified section of The New York Times, announce this as your personal news anchor."}
{"original_description": "A simple way to let someone know you're on your way home, or any other message you'd like to send regularly. Enter the phone number to text from your Android phone, and customize the message! When you press the Stone, it'll send. ", "trigger_channel": "Pebblebee", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pebblebee.stone_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Stone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Stone?", "Slug": "stone_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Stone press type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Slug": "stone_press_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nDate and time the Stone was pressed.", "description": "Date and time the Stone was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Pebblebee.stonePress.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Stone name\nName of selected Stone.", "description": "Name of selected Stone.", "details": {"Slug": "stone_name", "Filter code": "Pebblebee.stonePress.StoneName", "Type": "String", "Example": "My Stone"}}, {"section": "Ingredients", "title": "Trigger type\nType of trigger set in Recipe.", "description": "Type of trigger set in Recipe.", "details": {"Slug": "trigger_type", "Filter code": "Pebblebee.stonePress.TriggerType", "Type": "String", "Example": "Pressed or held"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "const PhoneNumber = AndroidMessages.sendAMessage.getPhoneNumber()\nconst StoneName = Pebblebee.stonePress.StoneName\nconst StonePressType = Pebblebee.stonePress.StonePressType\nif (StonePressType === \"Pressed\") {\n  var message = `You're on your way!`\n} else if (StonePressType === \"Held\") {\n  var message = `I'm here!`\n}\nAndroidMessages.sendAMessage.setText(message)\nAndroidMessages.sendAMessage.setPhoneNumber(PhoneNumber)\nAndroidMessages.sendAMessage.skip()", "intent": "When the Pebblebee Stone is pressed, send a customized SMS message to the specified phone number based on the selected Stone name and press type."}
{"original_description": "If your SmartThings device is opened, then turn on your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "var DeviceName = SmartthingsV2.openedSmartthings.DeviceName\nvar OpenedAt = SmartthingsV2.openedSmartthings.OpenedAt\nif (DeviceName === \"Bedroom contact\" && OpenedAt !== \"\") {\n  Spotcam.turnOffSpotcam(SpotCam.sn)\n}", "intent": "If the SmartThings device is opened, then turn on the SpotCam. This automation checks if a specific device is opened and turns on the corresponding SpotCam based on its serial number."}
{"original_description": "This applet turns off your Hue light when Withings Sleep detects that you get into bed.\n", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lights = [\"$lights\"]\nif (WithingsSleep.bedin.DeviceUser !== \"\" && WithingsSleep.bedin.DateandTime !== \"\") {\n  if (WithingsSleep.bedin.DateandTime > \"2020-07-08T04:17:06+05:00\") {\n    Hue.turnOnAllHue.skip(\"Already in bed\")\n  } else {\n    Hue.turnOnAllHue(lights)\n  }\n} else {\n  Hue.turnOnAllHue.skip(\"No device or date/time detected\")\n}", "intent": "This applet turns off your Hue light when Withings Sleep detects that you get into bed."}
{"original_description": "This applet turns off your Yeelight when Withings Sleep detects that you get into bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "if (WithingsSleep.bedin.DeviceUser === \"Bed in has been detected by Tom's Withings Sleep\" && \n    WithingsSleep.bedin.DateandTime >= start_date && WithingsSleep.bedin.DateandTime <= end_date) {\n  Yeelight.onOff.setOnOffOption(on_off_option, device_id);\n} else {  \n  Yeelight.onOff.skip(\"Incorrect start or end date\")\n}", "intent": "Turn off Yeelight when Withings Sleep detects that you get into bed."}
{"original_description": "When the radon levels reach a level above 100, turn my hue lights red so I can get in some fresh air.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.radon-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Measurement unit", "Helper text": "What unit of measurement would you like to receive your radon levels in?", "Slug": "unit", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get radon levels from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.radonAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Radon level\nThe radon level. In the measurement unit specified.", "description": "The radon level. In the measurement unit specified.", "details": {"Slug": "value", "Filter code": "Airthings.radonAbove.RadonLevel", "Type": "String", "Example": "120"}}, {"section": "Ingredients", "title": "Measurement unit\nThe unit of measurement used for radon, Bq/m3 or pCi/L.", "description": "The unit of measurement used for radon, Bq/m3 or pCi/L.", "details": {"Slug": "unit", "Filter code": "Airthings.radonAbove.MeasurementUnit", "Type": "String", "Example": "Bq/m3"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.radonAbove.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Airthings.radonAbove.RadonLevel > 100) {\n  Hue.setColorAllHue.setColor(\"red\")\n} else {\n  Hue.setColorAllHue.skip(\"Radon levels are within safe range\")\n}", "intent": "When radon levels reach above 100, turn my Hue lights red to signal it's time to get some fresh air."}
{"original_description": "Blink your Philips Hue lights when you have a new unread voicemail.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_user_voicemail"}, "trigger_details": [{"section": "Trigger fields", "title": "Voicemail status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which status should the voicemail have?", "Helper text": "Is the voicemail read or unread?", "Slug": "voicemail_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Voicemail\nThe ID of the voicemail.", "description": "The ID of the voicemail.", "details": {"Slug": "voicemail_id", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailId", "Type": "String", "Example": "alkdoweinld"}}, {"section": "Ingredients", "title": "Call date\nThe start time of the voicemail.", "description": "The start time of the voicemail.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newUserVoicemail.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Voicemail duration\nThe duration of the voicemail in format HH:MM:SS.", "description": "The duration of the voicemail in format HH:MM:SS.", "details": {"Slug": "voicemail_duration", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailDuration", "Type": "String", "Example": "00:03:21"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the caller.", "description": "The phone number of the caller.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the caller.", "description": "The name of the caller.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newUserVoicemail.CallerName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the user who received the voicemail.", "description": "The phone number of the user who received the voicemail.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumber", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the user who received the voicemail.", "description": "The name of the user who received the voicemail.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newUserVoicemail.CalleeName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Voicemail status\nThe status of the voicemail -- read or unread.", "description": "The status of the voicemail -- read or unread.", "details": {"Slug": "voicemail_status", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailStatus", "Type": "String", "Example": "unread"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\") {\n  Hue.blinkAllHue(\"New unread voicemail\")\n}", "intent": "When a new unread voicemail is detected on Zoom Phone, blink all Philips Hue lights."}
{"original_description": "During the chosen days of the week send a signal to your sRemo based on a pre-chosen conditions in your sCloud.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "sRemo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sRemo.send_signal_s", "Filter code method": "SRemo.sendSignalS.skip(string?: reason)", "Runtime method": "runAction(\"sRemo.send_signal_s\", {})"}, "action_details": [{"section": "Action fields", "title": "Sremo\nDropdown list", "description": "Dropdown list", "details": {"Label": "sremo", "Helper text": "select your sRemo which is registered in sCloud", "Slug": "sremo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Signal number\nDropdown list", "description": "Dropdown list", "details": {"Label": "signal number", "Helper text": "select 1 - 141 number of sRemo signal", "Slug": "signal_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.CheckTime;\nvar Weekday = DateAndTime.everyWeekdayAt.DayOfWeek;\n\nif ((Weekdays.includes(Weekday) && new Date(Time).getHours() >= 8 && new Date(Time).getHours() <= 22)) {\n    var sRemo = sRemo; // Get the selected sRemo\n    SRemo.sendSignalS(sRemo, \"Your chosen signal number\");\n} else {\n    SRemo.sendSignalS.skip(\"Outside of active hours or not a weekday\");\n}", "intent": "Send a signal to your sRemo based on the chosen days of the week and time."}
{"original_description": "When specific person unlocks the door then control Nexus Home AC", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (WhichLock === \"San Diego beach house\" && WhichPerson === \"John Smith\") {\n  var DeviceName = Augusthome.lockUnlockedBySpecificPerson.LockName;\n  var Mode = whichMode; // dropdown list value\n  var Temperature = whichTemperature; // dropdown list value\n  var FanSpeed = whichFanSpeed; // dropdown list value\n  \n  if (Mode === \"Cool\" && Temperature < 22) {\n    BrilliantNexus.acExecution.skip(\"Too cold\")\n  } else if (Mode === \"Heat\" && Temperature > 25) {\n    BrilliantNexus.acExecution.skip(\"Too hot\")\n  } else {\n    BrilliantNexus.acExecution.setDeviceName(DeviceName).setMode(Mode).setTemperature(Temperature).setFanSpeed(FanSpeed)\n  }\n}", "intent": "When a specific person unlocks the August door, control the Nexus Home AC based on the mode and temperature specified in Brilliant Nexus. The script checks if the house name and lock name match the expected values."}
{"original_description": "When some unlocks the door then set AC to Cool/Heat/Auto/Dry/Fan mode and set temperature and fan speed.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "var UnlockedAt = Augusthome.lockUnlocked.UnlockedAt\nvar User = Augusthome.lockUnlocked.User\nvar LockName = Augusthome.lockUnlocked.LockName\nvar HouseName = Augusthome.lockUnlocked.HouseName\n\nif (User === \"John Smith\" && LockName === \"Front Door\" && HouseName === \"San Diego Beach House\") {\n  var DeviceName = \"My AC\"\n  var Mode = \"Cool\"\n  var Temperature = \"22\"\n  var FanSpeed = \"Medium\"\n\n  BrilliantNexus.acExecution.setMode(Mode)\n  BrilliantNexus.acExecution.setTemperature(Temperature)\n  BrilliantNexus.acExecution.setFanSpeed(FanSpeed)\n\n  // Optional: Add error handling and informative messages\n} else {\n  BrilliantNexus.ACExecution.skip(\"User or lock name mismatch\")\n}", "intent": "When some unlocks the door, then set AC to Cool/Heat/Auto/Dry/Fan mode and set temperature and fan speed."}
{"original_description": "Notify me when the false alarm detection flags over 80% of my alarm videos in my INSTAR Cloud storage.", "trigger_channel": "INSTAR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instar.falsealarm_percent"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instar.falsealarmPercent.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var createdAt = Instar.falsealarmPercent.CreatedAt\nif (createdAt > 0.8) {\n  IfNotifications.sendNotification(\"Message: Over 80% of alarm videos are false alarms\")\n} else {\n  IfNotifications.sendNotification.skip(\"False alarm percentage below threshold\")\n}", "intent": "When the false alarm detection flags over 80% of my alarm videos in my INSTAR Cloud storage, send a notification with a customized message."}
{"original_description": "When the Litter-Robot cycles, send over the Roomba to vacuum", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.clean_by_room", "Filter code method": "Irobot.cleanByRoom.skip(string?: reason)", "Runtime method": "runAction(\"irobot.clean_by_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Room info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room would you like to clean?", "Slug": "room_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.event_type === 'cycle') {\n  Irobot.cleanByRoom(Irobot.cleanByRoom.skip(\"No cycle event detected\"))\n} else {\n  if (Irobot.litter_robot_name === 'My Litter Robot') {\n    var reason = \"Vacuuming after cycle\"\n    Irobot.cleanByRoom(reason)\n  } else {\n    Irobot.cleanByRoom.skip('Unknown litter robot name')\n  }\n}", "intent": "When the Litter-Robot cycles, send over the Roomba to vacuum."}
{"original_description": "This will change the WiZ light(s) of your choice to the light mode and brightness you select whenever a dishwashing cycle completes on your GE dishwasher.", "trigger_channel": "GE Appliances Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ge_appliances_dishwasher.dishwasher-end-of-cycle"}, "trigger_details": [{"section": "Trigger fields", "title": "Applianceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which appliance?", "Slug": "applianceId", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Appliance\nThe appliance identifier.", "description": "The appliance identifier.", "details": {"Slug": "applianceId", "Filter code": "GeAppliancesDishwasher.dishwasherEndOfCycle.Appliance", "Type": "String", "Example": "D828C901A076"}}, {"section": "Ingredients", "title": "Event\nThe appliance event.", "description": "The appliance event.", "details": {"Slug": "event", "Filter code": "GeAppliancesDishwasher.dishwasherEndOfCycle.Event", "Type": "String", "Example": "dishwasher-end-of-cycle"}}, {"section": "Ingredients", "title": "Date and time\nThe date and time the event occurred.", "description": "The date and time the event occurred.", "details": {"Slug": "time", "Filter code": "GeAppliancesDishwasher.dishwasherEndOfCycle.DateAndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (GeAppliancesDishwasher.dishwasherEndOfCycle.Appliance === \"Your Dishwasher Name\") {\n  Wiz.turnOn.setMode(WiZModes[mode]).setDimming(DimmingLevels[dimming])\n} else {\n  Wiz.turnOn.skip(\"Invalid appliance\")\n}", "intent": "This automation changes the WiZ light(s) to the selected mode and brightness whenever a GE dishwasher's dishwashing cycle completes."}
{"original_description": "Notify me when the number of new alarms in the INSTAR Cloud is over the number specified above.", "trigger_channel": "INSTAR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instar.new_alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Alarms Quantity", "Slug": "quantity", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instar.newAlarm.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var Quantity = Instar.newAlarm.quantity\nif (Quantity > $$ALARM_QUANTITY$$) {\n  var message = \"New Alarms: \" + Quantity\n  IfNotifications.sendNotification.setMessage(message)\n} else {\n  IfNotifications.sendNotification.skip(\"Less than expected alarms\")\n}", "intent": "Notify the user when there are more new alarms in INSTAR Cloud than specified, and send a notification with the alarm quantity."}
{"original_description": "Press the iH button on your iHome device to set your Nest Temperature.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.press === \"Long Press\") {\n  // Check if it's not already a weekend\n  var day = new Date().getDay();\n  if (day !== 0 && day !== 6) {\n    // Set the Nest temperature\n    GoogleNestThermostat.setHotTemperature.setDegrees(IhomeEnhance.enhanceButton.degrees);\n  } else {\n    // Skip the action for weekends\n    GoogleNestThermostat.setHotTemperature.skip(\"Weekend - automation disabled\")\n  }\n} else {\n  // Check if it's not already a weekend and short press is detected\n  var day = new Date().getDay();\n  if (day !== 0 && day !== 6) {\n    // Set the Nest temperature\n    GoogleNestThermostat.setHotTemperature.setDegrees(IhomeEnhance.enhanceButton.degrees);\n  }\n}", "intent": "Automatically set the Nest temperature to a specified value when the iHome Enhance button is pressed."}
{"original_description": "Press the iH button on your iHome device to turn OFF Lifx Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_off", "Filter code method": "Lifx.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade out duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade out duration", "Helper text": "How long should it take for the lights to fade out.", "Slug": "fade_out_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want a custom fade out duration? Set it here. Example: &quot;fade_out_duration: 7200&quot; for 2 hours. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOff.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  var selector = IhomeEnhance.enhanceButton.ButtonName + \"'s\";\n  var fadeOutDuration = \"\";\n  if (IhomeEnhance.enhanceButton.pressedDetails.fad_out_duration) {\n    fadeOutDuration = IhomeEnhance.enhanceButton.pressedDetails.fad_out_duration;\n  }\n  var advancedOptions = \"No advanced options set\";\n  if (IhomeEnhance.enhanceButton.pressedDetails.advanced_options) {\n    advancedOptions = IhomeEnhance.enhanceButton.pressedDetails.advanced_options;\n  }\n  Lifx.turnOff(selector, fadeOutDuration, advancedOptions).skip(\"Not a long press\");\n} else {\n  Lifx.turnOff.skip(\"Not a long press\");\n}", "intent": "When the iH button is pressed on an iHome device, check if it is a short or long press. If it is a long press, turn off LIFX lights with a fade out duration and optional advanced options."}
{"original_description": "Press the iH button on your iHome device to set a Lutron brightness level.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_light_level", "Filter code method": "LutronCasetaWireless.setLightLevel.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_light_level\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light?", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Level\nDropdown list", "description": "Dropdown list", "details": {"Label": "Set light level", "Slug": "level", "Required": "true", "Can have default value": "false"}}], "filter_code": "var ButtonName = IhomeEnhance.enhanceButton.ButtonName\nvar PressType = IhomeEnhance.enhanceButton.Press\nif (PressType === \"Short Press\") {\n  if (ButtonName === \"iBT297 Smart Button\") {\n    LutronCasetaWireless.setLightLevel(50, \"Set to 50% with iHome button press\")\n  } else {\n    LutronCasetaWireless.setLightLevel.skip(\"Unknown button name\")\n  }\n} else if (PressType === \"Long Press\") {\n  // Long press logic goes here\n}", "intent": "When the iHome Enhance button is pressed, set a Lutron brightness level based on the button name and press type."}
{"original_description": "Press the iH button on your iHome device to turn OFF a Leviton room", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.toggle_room_off", "Filter code method": "MyLeviton.toggleRoomOff.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.toggle_room_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "const ButtonName = IhomeEnhance.enhanceButton.ButtonName\nif (ButtonName === \"iBT297 Smart Button\" && Meta.currentUserTime.day() !== 0 && Meta.currentUserTime.day() !== 6) {\n  MyLeviton.toggleRoomOff(\"iBT297 Smart Button\")\n}", "intent": "When the iH button is pressed on the iHome device, if the button name is a specific one and it's not a weekend day, turn OFF the corresponding room in Leviton."}
{"original_description": "Press the iH button on your iHome device to begin Lifx scene.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.activate_scene", "Filter code method": "Lifx.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"lifx.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The Scene you'd like to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want to set a custom duration? Specify it here. Example: &quot;transition_duration: 5&quot; for a 5 second transition duration. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.activateScene.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.Press === \"Short Press\") {\n  if (IhomeEnhance.enhanceButton.ButtonName !== \"\") {\n    var scene = IhomeEnhance.enhanceButton.Scene;\n    Lifx.activateScene(scene, { transition_duration: IhomeEnhance.enhanceButton.TransitionDuration, advanced_options: IhomeEnhance.enhanceButton.AdvancedOptions });\n  } else {\n    Lifx.activateScene.skip(\"No button name selected\");\n  }\n} else if (IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  // Handle long press logic\n}", "intent": "When the iHome Enhance button is pressed, activate a Lifx scene based on the selected options."}
{"original_description": "Press the iH button on your iHome device to set a Lutron shade level.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_shade_position", "Filter code method": "LutronCasetaWireless.setShadePosition.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_shade_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Shade\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shade?", "Slug": "shade", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position\nDropdown list", "description": "Dropdown list", "details": {"Label": "Set shade position", "Slug": "position", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iBT297 Smart Button\" && IhomeEnhance.enhanceButton.Press === \"Short or Long Press\") {\n  LutronCasetaWireless.setShadePosition(LutronCasetaWireless.shade, LutronCasetaWireless.position)\n} else {\n  LutronCasetaWireless.setShadePosition.skip(\"Invalid button press\")\n}", "intent": "Automate Lutron Caséta and RA2 Select shade setting based on iHome Enhance button press."}
{"original_description": "Open garage door when iHome button is pressed", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var PressType = IhomeEnhance.enhanceButton.press\nif (PressType === \"Short\") {\n  Garadget.openDoor()\n}\nelse {\n  Garadget.openDoor.skip(\"Long press detected\")\n}", "intent": "When the iHome Enhance button is pressed, check if it's a short or long press. If it's a short press, open the garage door."}
{"original_description": "Press the iH button on your iHome device to begin Leviton scene.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.run_scene", "Filter code method": "MyLeviton.runScene.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.run_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iBT297 Smart Button\" && IhomeEnhance.enhanceButton.Press === \"Short Press\") {\n  MyLeviton.runScene(\"Scene Name\")\n} else {\n  MyLeviton.runScene.skip(\"Invalid button or press type\")\n}", "intent": "This IFTTT automation is triggered by pressing a specific button on an iHome Enhance device, which sends a signal to Leviton to run a scene. The filter code checks if the pressed button matches the desired name and then runs the specified scene."}
{"original_description": "Changes Hubitat's mode when Flic is clicked, double clicked, or held.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ClickType === 'click' || Flic.click.ClickType === 'double_click') {\n  if (Flic.click.Longitude && Flic.click.Latitude) {\n    Hubitat.actionMode('Home');\n  } else {\n    Hubitat.actionMode.skip('No location provided')\n  }\n} else if (Flic.click.ClickType === 'hold') {\n  Hubitat.actionMode.skip('Flic hold not supported')\n}", "intent": "Changes Hubitat's mode when Flic is clicked, double clicked, or held."}
{"original_description": "Starte in COQON ein Programm oder eine Szene wenn in deinem Google Kalender ein Eintrag endet.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_ends"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchEnds.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchEnds.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchEnds.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Start time\nDate and time the event started.", "description": "Date and time the event started.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchEnds.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nDate and time the event ended.", "description": "Date and time the event ended.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchEnds.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchEnds.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchEnds.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (GoogleCalendar.eventFromSearchEnds.EndTime !== null) {\n  Coqon.simpleRuleAction.runAction(\"coqon.simple_rule_action\", {})\n} else {\n  Coqon.simpleRuleAction.skip(\"Event has not ended\")\n}", "intent": "When a Google Calendar event ends, start a program or scene in COQON."}
{"original_description": "This will turn on the WiZ lights of your choice in the mode and brightness you defined whenever Aura detects motion.", "trigger_channel": "Aura", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "aura.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your hub", "Helper text": "The serial number is located at the back of your hub", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Aura.motion.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (Aura.motion.CreatedAt !== \"\") {\n  const selectedHub = $$Serial$$;\n  const mode = $$Mode$$;\n  const dimming = $$Dimming$$;\n  \n  if (!selectedHub) {\n    Wiz.turnOn.skip(\"No hub selected\");\n  } else if (!mode || !dimming) {\n    Wiz.turnOn.skip(\"Invalid mode or dimming selected\");\n  } else {\n    Wiz.turnOn(mode, dimming);\n  }\n}", "intent": "When Aura detects motion, turn on WiZ lights of choice in specified mode and brightness."}
{"original_description": "Send automated birthday wishes via phone call. Better than E-Mail :-)", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "var CheckTime = DateAndTime.everyYearOn.CheckTime\nif (CheckTime.includes(date) && CheckTime.includes(time)) {\n  Woopla.ttsCall.setTts(\"Happy birthday! Wishing you a wonderful day!\")\n  Woopla.ttsCall.setLanguage(\"english\")\n  Woopla.ttsCall()\n} else {\n  Woopla.ttsCall.skip(\"Not the right date and time\")\n}", "intent": "Send a phone call with birthday wishes when the specified date and time is reached."}
{"original_description": "In addition to your LifeShield alarm siren, you can blink the Hue lights as a visual alert when an alarm is going off. You may select a specific alarm type or all alarm events. For all alarm events, specify '(All)' for the Event Type. Next, select by name which Hue lights to blink. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time alarm occurred.", "description": "Date and time alarm occurred.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.alarm.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of alarm that occurred.", "description": "The EventType describes the type of alarm that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.alarm.EventType", "Type": "String", "Example": "Fire"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.alarm.FormattedMessage", "Type": "String", "Example": "Medical Alarm"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.alarm.EventType !== \"All\" && ![\"Fire\", \"Medical\"].includes(Bluebyadt.alarm.EventType)) {\n  Hue.blinkAllHue.skip(\"Invalid Event Type selected\")\n} else if (![\"Living Room Light\", \"Kitchen Light\"].includes(Hue.lights)) {\n  Hue.blinkAllHue.skip(\"No valid lights selected\")\n} else {\n  Hue.blinkAllHue(Bluebyadt.alarm.FormattedMessage)\n}", "intent": "This IFTTT automation is designed to blink the Hue lights as a visual alert when an alarm goes off using Blue by ADT's LifeShield alarm system. The trigger event type can be selected, and specific Hue lights can be chosen for blinking."}
{"original_description": "Open curtains everyday at 6am 5 minutes before you wake up in the morning", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "OSUM SMART", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "osumsmart.open", "Filter code method": "Osumsmart.open.skip(string?: reason)", "Runtime method": "runAction(\"osumsmart.open\", {})"}, "action_details": [{"section": "Action fields", "title": "Device list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Devices", "Helper text": "Device to operate", "Slug": "device_list", "Required": "true", "Can have default value": "false"}}], "filter_code": "function DateAndTimeTrigger() {\n    var Hour = Meta.currentUserTime.hour()\n    if (Hour < 6) return\n    var Minute = Meta.currentUserTime.minute()\n    if (Minute >= 55 && Minute <= 59) {\n        Osumsmart.open.skip(\"Not time to open curtains yet\")\n    } else {\n        Osumsmart.open.runAction({\"device_list\": \"Your preferred device\"})\n    }\n}", "intent": "The automation opens the curtains at 6am every day, 5 minutes before waking up."}
{"original_description": "Play Stream", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_stream", "Filter code method": "Sonos.playStream.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_stream\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "What do you want to play?", "Helper text": "Enter the URL of the audio stream you want to play", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setUrl(string: url)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Name\nText input > Title", "description": "Text input > Title", "details": {"Label": "What name do you want to show for this stream?", "Slug": "name", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setName(string: name)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image do you want to show for this stream?", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  var url = // code/text input > Regular expression\n  var room = // dropdown list: Room\n  if (url && room) {\n    Sonos.playStream.setUrl(url)\n    .setRoom(room)\n    .setName(// text input > Title || \"\")\n    .setImage Url(// text input > Photo || \"\")\n    .setInclude Grouped Rooms(// dropdown list: Include grouped rooms)\n    .runAction(\"sonos.play_stream\", {})\n  } else {\n    Sonos.playStream.skip(\"Missing URL or room\")\n  }\n} else {\n  Sonos.playStream.skip(\"Invalid gesture detected\")\n}", "intent": "When a gesture is detected on the Knocki device, play a stream in Sonos if the URL and room are provided."}
{"original_description": "Press this button to buy/sell stocks. You can customize which stock to buy or sell and set the quantity.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "var ShareURL = DoButton.doButtonNewCommandCommon.ShareURL\nvar Latitude = DoButton.doButtonNewCommandCommon.Latitude\nvar Longitude = DoButton.doButtonNewCommandCommon.Longitude\nvar LocationMapURL = DoButton.doButtonNewCommandCommon.LocationMapURL\nvar LocationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL\nvar OccurredAt = DoButton.doButtonNewCommandCommon.OccurredAt\n\nif (ShareURL !== \"\") {\n  if (Latitude !== \"\" && Longitude !== \"\") {\n    Alpaca.placeMarketOrder.setSymbol(Symbol)\n      .setSide(Side)\n      .setQty(Qty)\n      .skip(\"No symbol specified\")\n  } else {\n    Alpaca.placeMarketOrder.skip(\"Location not provided\")\n  }\n} else {\n  Alpaca.placeMarketOrder.skip(\"Share URL not provided\")\n}", "intent": "When the button is pressed, use the provided share URL to buy/sell stocks based on user input."}
{"original_description": "Turn off your lights when it is time for bed", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var bedtimeHour = 22;\nvar bedtimeMinutes = 0;\n\nif (DateAndTime.everyDayAt.CheckTime.includes(\":\") && parseInt(DateAndTime.everyDayAt.CheckTime.split(\":\")[0]) >= bedtimeHour) {\n  if (Kasa.turnOff.skip) {\n    Kasa.turnOff(\"It's bedtime\");\n  }\n}", "intent": "Turn off the lights when it is time for bed based on the current time."}
{"original_description": "When your August lock is engaged, your Blink System is armed", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockLocked.LockedAt > Meta.currentUserTime.now() && Augusthome.lockLocked.WhichLock === \"main\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\") {\n  Blink.networkDisarm.skip(\"Not engaged yet\")\n} else if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.User === \"John Smith\") {\n  Blink.networkDisarm()\n} else {\n  Blink.networkDisarm.skip(\"Incorrect lock or user\")\n}", "intent": "When your August lock is engaged, your Blink System is armed."}
{"original_description": "Collect all your Reddit upvotes to Histre to bookmark them and use them for improving your recommendations.", "trigger_channel": "Reddit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "reddit.new_dislike_by_you_reddit"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of this post.", "description": "Title of this post.", "details": {"Slug": "Title", "Filter code": "Reddit.newDislikeByYouReddit.Title", "Type": "String", "Example": "Little Bobby Tables!"}}, {"section": "Ingredients", "title": "Image url\nURL to the post's image if one exists.", "description": "URL to the post's image if one exists.", "details": {"Slug": "ImageURL", "Filter code": "Reddit.newDislikeByYouReddit.ImageURL", "Type": "String", "Example": "http://imgs.xkcd.com/comics/exploits_of_a_mom.png"}}, {"section": "Ingredients", "title": "Content\nContent of this post, may be text or external link.", "description": "Content of this post, may be text or external link.", "details": {"Slug": "Content", "Filter code": "Reddit.newDislikeByYouReddit.Content", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Content html\nContent of this post in HTML.", "description": "Content of this post in HTML.", "details": {"Slug": "ContentHTML", "Filter code": "Reddit.newDislikeByYouReddit.ContentHTML", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Post url\nURL to this post on reddit.", "description": "URL to this post on reddit.", "details": {"Slug": "PostURL", "Filter code": "Reddit.newDislikeByYouReddit.PostURL", "Type": "String", "Example": "http://www.reddit.com/r/ProgrammerHumor/comments/16dazp/little_bobby_tables_xkcd/"}}, {"section": "Ingredients", "title": "Subreddit\nName of the subreddit where this item was posted.", "description": "Name of the subreddit where this item was posted.", "details": {"Slug": "Subreddit", "Filter code": "Reddit.newDislikeByYouReddit.Subreddit", "Type": "String", "Example": "ifttt"}}, {"section": "Ingredients", "title": "Author\nUsername of this post's author.", "description": "Username of this post's author.", "details": {"Slug": "Author", "Filter code": "Reddit.newDislikeByYouReddit.Author", "Type": "String", "Example": "ltibbets"}}, {"section": "Ingredients", "title": "Posted at\nDate this post was posted.", "description": "Date this post was posted.", "details": {"Slug": "PostedAt", "Filter code": "Reddit.newDislikeByYouReddit.PostedAt", "Type": "String", "Example": "August 23, 2013 at 05:00PM"}}], "action_channel": "Histre", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "histre.add_note", "Filter code method": "Histre.addNote.skip(string?: reason)", "Runtime method": "runAction(\"histre.add_note\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setUrl(string: url)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setNote(string: note)"}}], "filter_code": "// Check if it's a weekday\nvar Day = Meta.currentUserTime.day()\nif (Day !== 6 && Day !== 0) { // Not Saturday or Sunday\n  // Get the post title\n  var Title = Reddit.newDislikeByYouReddit.Title\n  \n  // Skip Histre action if no title is found\n  if (!Title) {\n    Histre.addNote.skip(\"No title found\")\n  } else {\n    // Add a note to Histre with the post title and URL\n    Histre.addNote.setTitle(Title)\n      .setUrl(Reddit.newDislikeByYouReddit.PostURL)\n      .skip() // Skip the rest of the action if no error occurs\n  }\n}", "intent": "Collect Reddit upvotes to Histre, bookmarking them for improving recommendations."}
{"original_description": "Save energy by making sure that your hue lights are off at midnight each night.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (Time !== \"12:00:00 AM\") {\n  Hue.turnOffAllHue.skip(\"Not midnight yet\")\n} else {\n  Hue.turnOffAllHue()\n}", "intent": "Save energy by turning off all Philips Hue lights at midnight every day."}
{"original_description": "Use this applet to save the notes you take on Instapaper into your Histre notebook.", "trigger_channel": "Instapaper", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instapaper.new_liked_item"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the liked item.", "description": "The title of the liked item.", "details": {"Slug": "title", "Filter code": "Instapaper.newLikedItem.Title", "Type": "String", "Example": "The Computer for the 21st Century"}}, {"section": "Ingredients", "title": "Description\nThe description of the liked item.", "description": "The description of the liked item.", "details": {"Slug": "description", "Filter code": "Instapaper.newLikedItem.Description", "Type": "String", "Example": "The most profound technologies are those that disappear. They weave themselves into the fabric of everyday life until they are indistinguishable from it. Consider writing, perhaps the first information..."}}, {"section": "Ingredients", "title": "Url\nThe URL of the liked item.", "description": "The URL of the liked item.", "details": {"Slug": "url", "Filter code": "Instapaper.newLikedItem.URL", "Type": "Web URL", "Example": "http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instapaper.newLikedItem.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Histre", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "histre.add_note", "Filter code method": "Histre.addNote.skip(string?: reason)", "Runtime method": "runAction(\"histre.add_note\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setUrl(string: url)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setNote(string: note)"}}], "filter_code": "if (Instapaper.newLikedItem.CreatedAt) {\n  const title = Instapaper.newLikedItem.Title;\n  const description = Instapaper.newLikedItem.Description;\n  const url = Instapaper.newLikedItem.URL;\n  if (title && description && url) {\n    Histre.addNote.setTitle(title);\n    Histre.addNote.setNote(description);\n    Histre.addNote.setUrl(url);\n    Histre.addNote.run();\n  } else {\n    Histre.addNote.skip(\"Missing title, description, or URL\")\n  }\n}", "intent": "Save notes from Instapaper to Histre notebook."}
{"original_description": "When your Blue by ADT system is armed away, pause a Sonos stream. You must specify where to pause it.\n", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.arm_state_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Arm type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Arm Type?", "Slug": "arm_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.armStateChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.armStateChange.EventType", "Type": "String", "Example": "System Disarmed"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.armStateChange.FormattedMessage", "Type": "String", "Example": "Disarmed"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Bluebyadt.armStateChange.EventType === \"System Armed Away\") {\n  var ArmType = Bluebyadt.armStateChange.arm_type;\n  if (ArmType !== \"\") {\n    var Room = Sonos.pause.getRoom();\n    var IncludeGroupedRooms = Sonos.pause.include_grouped_rooms;\n    Sonos.pause({\n      reason: `Armed away with ${ArmType} in room ${Room}`,\n      include_grouped_rooms: IncludeGroupedRooms\n    });\n  } else {\n    Sonos.pause.skip(\"No arm type specified\");\n  }\n}", "intent": "When the Blue by ADT system is armed away, pause a Sonos stream in a specified room and potentially include grouped rooms."}
{"original_description": "Set an everyday cleaning cycle for your Neato Robot using your calendar", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Neato", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "neato.start_cleaning", "Filter code method": "Neato.startCleaning.skip(string?: reason)", "Runtime method": "runAction(\"neato.start_cleaning\", {})"}, "action_details": [{"section": "Action fields", "title": "Select a robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a robot", "Slug": "select_a_robot", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== 'Saturday' && DateAndTime.everyWeekdayAt.DayOfWeek !== 'Sunday') {\n  if (DateAndTime.everyWeekdayAt.CheckTime >= '06:00' && DateAndTime.everyWeekdayAt.CheckTime <= '23:59') {\n    Neato.startCleaning.runAction({ select_a_robot: '<SELECT_A_ROBOT>' })\n  } else {\n    Neato.startCleaning.skip(\"Outside of cleaning hours\")\n  }\n} else {\n  Neato.startCleaning.skip('Weekend - automation disabled')\n}", "intent": "Set an everyday cleaning cycle for the Neato Robot using the calendar, based on weekdays and specific time of day."}
{"original_description": "Tell Ambi Climate you're feeling comfortable via button, either through your mobile or smart watch.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.feedback", "Filter code method": "Ambiclimate.feedback.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.feedback\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Feedback\nDropdown list", "description": "Dropdown list", "details": {"Label": "feedback", "Slug": "feedback", "Required": "true", "Can have default value": "true", "Filter code method": "Ambiclimate.feedback.setFeedback(string: feedback)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.isValidPress()) {\n  var DeviceName = prompt(\"Which device?\");\n  var Feedback = prompt(\"feedback\");\n  Ambiclimate.feedback.setFeedback(Feedback);\n  Ambiclimate.feedback.skip();\n} else {\n  Ambiclimate.feedback.skip(\"Invalid button press\")\n}", "intent": "When the Button widget is pressed, check if it is a valid press and then send a comfort report to Ambi Climate with the device name and user-provided feedback."}
{"original_description": "Whenever you \"Share\" something via Pocket, it'll go straight to your Buffer Queue.", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_tagged_item_pocket"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Single tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newTaggedItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newTaggedItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newTaggedItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newTaggedItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newTaggedItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newTaggedItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "var title = Pocket.newTaggedItemPocket.Title\nvar url = Pocket.newTaggedItemPocket.Url\nvar excerpt = Pocket.newTaggedItemPocket.Excerpt\nvar imageUrl = Pocket.newTaggedItemPocket.ImageUrl\nvar tags = Pocket.newTaggedItemPocket.Tags\nvar addedAt = Pocket.newTaggedItemPocket.AddedAt\n\nif (tags.includes(\"Share\")) {\n  Buffer.addToBuffer.skip(\"No sharing detected\")\n} else {\n  var message = \"Shared: \" + title\n  Buffer.addToBuffer.setMessage(message)\n}", "intent": "Whenever you share something via Pocket, it'll go straight to your Buffer Queue."}
{"original_description": "Tell Ambi Climate you're feeling cold via button, either through your mobile or smart watch.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.feedback", "Filter code method": "Ambiclimate.feedback.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.feedback\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Feedback\nDropdown list", "description": "Dropdown list", "details": {"Label": "feedback", "Slug": "feedback", "Required": "true", "Can have default value": "true", "Filter code method": "Ambiclimate.feedback.setFeedback(string: feedback)"}}], "filter_code": "var DeviceName = \"Ambi Climate\";\nvar Feedback = \"\";\nif (DoButton.doButtonNewCommandCommon.ShareURL !== \"\") {\n  if (Math.random() < 0.5) {\n    Ambiclimate.feedback(\"I'm feeling cold!\", \"device_name\", DeviceName, \"feedback\", Feedback);\n  } else {\n    Ambiclimate.feedback.skip(\"No message provided\");\n  }\n} else {\n  Ambiclimate.feedback.skip(\"Share URL not available\");\n}", "intent": "Tell Ambi Climate you're feeling cold via a button press, either through your mobile or smart watch."}
{"original_description": "Tell Ambi Climate you're feeling hot via button, either through your mobile or smart watch.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.feedback", "Filter code method": "Ambiclimate.feedback.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.feedback\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Feedback\nDropdown list", "description": "Dropdown list", "details": {"Label": "feedback", "Slug": "feedback", "Required": "true", "Can have default value": "true", "Filter code method": "Ambiclimate.feedback.setFeedback(string: feedback)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Hot\") {\n  Ambiclimate.feedback.setFeedback(\"Feeling hot\")\n} else {\n  Ambiclimate.feedback.skip(\"Not feeling hot\")\n}", "intent": "When a button press is detected, check if it's feeling hot. If yes, send a feedback to Ambi Climate."}
{"original_description": "Volume Down", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.decrease_volume", "Filter code method": "Sonos.decreaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.decrease_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.decreaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Pattern === \"***\") {\n  var device = Knocki.knocki.Device;\n  var createdAt = Knocki.knocki.CreatedAt;\n  var room = \"Default Room\"; // Default value\n  if (!action_details[0].details.Required) {\n    room = action_details[0].details.Helper_text; // Set default value only when not required\n  }\n  Sonos.decreaseVolume(room, { include_grouped_rooms: action_details[1].details.Value });\n}", "intent": "Check if the Knocki gesture pattern matches and decrease Sonos volume in a specific room."}
{"original_description": "Configure a Nexia automation to run when my child arrives at home.", "trigger_channel": "dondeEsta Family", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dondeesta.kid_arrived_at_home"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nName of the kid arriving at home.", "description": "Name of the kid arriving at home.", "details": {"Slug": "name", "Filter code": "Dondeesta.kidArrivedAtHome.Name", "Type": "String", "Example": "John"}}, {"section": "Ingredients", "title": "Time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "time", "Filter code": "Dondeesta.kidArrivedAtHome.Time", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "var KidName = Dondeesta.kidArrivedAtHome.Name\nvar ArrivalTime = Dondeesta.kidArrivedAtHome.Time\n\nif (Nexia.nexiaAutomation.NexiaAutomationName !== \"\" && Nexia.nexiaAutomation.HouseName !== \"\") {\n  Nexia.nexiaAutomation.run(Nexia.nexiaAutomationName)\n} else {\n  Nexia.nexiaAutomation.skip(\"No automation configured\")\n}", "intent": "When my child arrives at home, run a Nexia automation."}
{"original_description": "Save £1 every time you achieve your calorie goals on Fitbit", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-calorie-burn-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Calorie burn goal\nYour daily calorie burn goal", "description": "Your daily calorie burn goal", "details": {"Slug": "CalorieBurnGoal", "Filter code": "Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Calories burned\nNumber of calories burned", "description": "Number of calories burned", "details": {"Slug": "CaloriesBurned", "Filter code": "Fitbit.dailyCalorieBurnGoal.CaloriesBurned", "Type": "String", "Example": "2123"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your calorie burn goal", "description": "Date you achieved your calorie burn goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyCalorieBurnGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal === \"2000\") {\n  if (Fitbit.dailyCalorieBurnGoal.DateAchieved) {\n    var Amount = \"\";\n    // Check the dropdown list for the amount\n    if (Amount === \"\") {\n      Dozens.save.skip(\"No amount selected\");\n    } else {\n      Dozens.save.setAmount(Amount);\n    }\n  } else {\n    Dozens.save.skip(\"Calorie goal not achieved\");\n  }\n}", "intent": "Save £1 every time you achieve your calorie goals on Fitbit."}
{"original_description": "Receive an Android SMS when the Litter-Robot waste drawer is full", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "// Check if the Litter-Robot's waste drawer is full\nif (Whisker.lr3Events.Event.Type === \"WasteDrawerFull\") {\n  // Get the phone number and message text\n  var phoneNumber = $$phoneNumber$$;\n  var messageText = \"Litter-Robot waste drawer full\";\n  \n  // Send a notification SMS to the user's phone\n  AndroidMessages.sendAMessage.setText(messageText).skip(\"Phone number is not set\");\n}", "intent": "IFTTT filter code to send an Android SMS when the Litter-Robot waste drawer is full."}
{"original_description": "Arms Blink Security System when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode !== \"Armed\") {\n  // Check the Hubitat mode\n  const val = Hubitat.triggerMode.Mode;\n  const time = Hubitat.triggerMode.ChangedAt;\n  \n  if (val === \"Disarmed\" || val === \"Night\") {\n    Blink.networkDisarm(val, \"Arms disarmed\");\n  }\n}", "intent": "Check if the Hubitat mode has changed and if it is not already disarmed, then disarm Blink according to the new mode."}
{"original_description": "Arms Arlo when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.arm", "Filter code method": "Arlo.arm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode === \"Day\") {\n  if (Hubitat.triggerMode.ChangedAt) {\n    var reason = \"Mode changed to Day at \" + Hubitat.triggerMode.ChangedAt;\n    Arlo.arm.skip(reason)\n  }\n}", "intent": "Arms Arlo when the Hubitat mode changes."}
{"original_description": "Disarms Blink Security System when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode === 'Day') {\n  Blink.networkDisarm('Mode changed to Day')\n} else if (Hubitat.triggerMode.Mode === 'Night') {\n  Blink.networkDisarm('Mode changed to Night')\n} else {\n  Blink.networkDisarm.skip(`Invalid mode: ${Hubitat.triggerMode.Mode}`)\n}", "intent": "Disarms Blink Security System when the Hubitat mode changes."}
{"original_description": "Disarms Arlo when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.arm", "Filter code method": "Arlo.arm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode !== \"Day\") {\n  Arlo.arm.skip(\"Disarmed due to non-day mode\")\n}", "intent": "When the Hubitat mode changes, disarm Arlo if the new mode is not 'Day'. Otherwise, skip disarming."}
{"original_description": "Changes Hubitat's mode when the Scout Alarm mode changes to armed.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_armed"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Name\nName of mode.", "description": "Name of mode.", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeArmed.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeArmed.FormattedText", "Type": "String", "Example": "Dave via IFTTT armed Away mode"}}, {"section": "Ingredients", "title": "Event\nState of mode.", "description": "State of mode.", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeArmed.Event", "Type": "String", "Example": "Armed"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that triggered the mode to arm.", "description": "The name of the person or thing that triggered the mode to arm.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeArmed.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "At\nDate and time the mode was armed.", "description": "Date and time the mode was armed.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeArmed.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Scoutalarm.modeArmed.Mode_id === \"Away\") {\n  Hubitat.actionMode(\"away\", \"Armed away by \" + Scoutalarm.modeArmed.By + \" at \" + Scoutalarm.modeArmed.At)\n} else {\n  Hubitat.actionMode(\"home\", \"Armed home by \" + Scoutalarm.modeArmed.By + \" at \" + Scoutalarm.modeArmed.At)\n}", "intent": "Changes Hubitat's mode when the Scout Alarm mode changes to armed. If it is set to 'Away', arm Hubitat to Away, otherwise arm it to Home."}
{"original_description": "Sets your Blink (Europe) system to armed when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Blink (Europe)", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink_eu.network_arm", "Filter code method": "BlinkEu.networkArm.skip(string?: reason)", "Runtime method": "runAction(\"blink_eu.network_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to arm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "const network = Meta.get(\"network\")\nif (!network || network === \"Not selected\") {\n  Apilio.iftttActionReports.ApilioValue1.skip(\"Network not selected\")\n}\nelse if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && new Date(Apilio.iftttActionReports.CreatedAt).getHours() < 6 || new Date(Apilio.iftttActionReports.CreatedAt).getHours() > 22) {\n  Apilio.iftttActionReports.ApilioValue1.skip(\"Not night time\")\n}\nelse if (Apilio.iftttActionReports.EventName !== \"run_only_at_nighttime\") {\n  BlinkEu.networkArm.run()\n}", "intent": "Arms the Blink (Europe) system when Apilio triggers the action you specify."}
{"original_description": "Pauses Sonos playback when Apilio triggers the action you specify", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var Room = $$room$$;\nvar IncludeGroupedRooms = $$include_grouped_rooms$$;\nif (IncludeGroupedRooms === \"true\") {\n  // Pause entire household\n  Sonos.pause.skip(\"Household pause\");\n} else if (!Room) {\n  // No room specified, skip the action\n  Sonos.pause.skip(\"No room selected\");\n}\nelse {\n  // Pause playback in specific room(s)\n  Sonos.pause.runAction(Room);\n}", "intent": "When Apilio triggers an action, pause Sonos playback in the specified room(s) if certain conditions are met."}
{"original_description": "Sets your Blink (Europe) system to disarmed when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Blink (Europe)", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink_eu.network_disarm", "Filter code method": "BlinkEu.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink_eu.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.IftttActionIdentifier === \"run_only_at_nighttime\") {\n  if (Apilio.iftttActionReports.ApilioValue1 === \"Green\" && Apilio.iftttActionReports.ApilioValue2 === \"Blue\" && Apilio.iftttActionReports.ApilioValue3 === \"Red\") {\n    BlinkEu.networkDisarm(\"Only at night\")\n  } else {\n    BlinkEu.networkDisarm.skip(\"Condition not met\")\n  }\n} else {\n  BlinkEu.networkDisarm.skip(\"Invalid action identifier\")\n}", "intent": "Disarms the Blink (Europe) system when Apilio triggers an action, based on specified conditions."}
{"original_description": "Changes Hubitat's mode when the Scout Alarm mode changes to disarmed.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_disarmed"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Name\nName of mode.", "description": "Name of mode.", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeDisarmed.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeDisarmed.FormattedText", "Type": "String", "Example": "Dave via IFTTT disarmed Away mode"}}, {"section": "Ingredients", "title": "Event\nState of mode.", "description": "State of mode.", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeDisarmed.Event", "Type": "String", "Example": "Armed"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that triggered the mode to start arming.", "description": "The name of the person or thing that triggered the mode to start arming.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeDisarmed.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "At\nDate and time the mode was arming.", "description": "Date and time the mode was arming.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeDisarmed.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Scoutalarm.modeDisarmed.Event === \"Armed\") {\n  if (Hubitat.actionMode(mode_id) !== \"Home\") {\n    if (!reason) reason = \"Incorrect previous mode\"\n    Hubitat.actionMode.skip(reason)\n  } else {\n    runAction(\"hubitat.action_mode\", {})\n  }\n}", "intent": "Changes Hubitat's mode when the Scout Alarm mode changes to disarmed."}
{"original_description": "Plays a Sonos favorite of your choice when Apilio triggers the action you specify", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var Favorite = 'Your chosen favorite';\nif (Apilio.iftttActionReports.ApilioValue1 === \"Green\" && Apilio.iftttActionReports.ApilioValue2 === \"Blue\") {\n  Favorite = \"Morning favorite\";\n} else if (Apilio.iftttActionReports.ApilioValue3 === \"Red\") {\n  Favorite = \"Evening favorite\";\n}\nSonos.playFavorite(Favorite, Apilio.iftttActionReports.Room, Apilio.iftttActionReports.include_grouped_rooms)", "intent": "Play a Sonos favorite based on Apilio's trigger."}
{"original_description": "Turns off the LightwaveRF light of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "LightwaveRF Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_lighting.switch_off_light", "Filter code method": "LightwaverfLighting.switchOffLight.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_lighting.switch_off_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Which light\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Light?", "Slug": "which_light", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n  var Hour = new Date(Apilio.iftttActionReports.CreatedAt).getHours()\n  if (Hour >= 20 || Hour <= 6) {\n    LightwaverfLighting.switchOffLight(\"Which light\", Apilio.iftttActionReports.ApilioValue1)\n  } else {\n    LightwaverfLighting.switchOffLight.skip(\"Not night time\")\n  }\n}", "intent": "Check if it's night time and turn off a specific LightwaveRF light when Apilio triggers an action."}
{"original_description": "Changes the color of the MagicHue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.ChangeColor", "Filter code method": "Magichue.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"magichue.ChangeColor\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "var WhichLights = $$which_lights$$;\nvar Color = $$color$$;\nif (WhichLights && Color) {\n  Magichue.changeColor(WhichLights, Color);\n} else if (!WhichLights || !Color) {\n  Magichue.changeColor.skip(\"Invalid input\");\n}", "intent": "Changes the color of selected MagicHue lights when Apilio triggers the action."}
{"original_description": "Have iRobot clean the room when the Litter-Robot waste drawer is full", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.clean_by_room", "Filter code method": "Irobot.cleanByRoom.skip(string?: reason)", "Runtime method": "runAction(\"irobot.clean_by_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Room info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room would you like to clean?", "Slug": "room_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Litter_Robot.waste_drawer_full) {\n  Irobot.cleanByRoom(\"My Room\", \"Waste drawer is full\")\n} else {\n  Irobot.cleanByRoom.skip(\"Waste drawer not full\")\n}", "intent": "Trigger an iRobot cleaning action in a specific room when Litter-Robot waste drawer is full."}
{"original_description": "Updates a boolean variable to false when SmartThings no longer detects someone present.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "var device = SmartthingsV2.newPresentSmartthings.device;\nif (device === \"not present\") {\n  Apilio.booleanVariableToggleUpdates.skip(\"No one is detected\");\n}", "intent": "Updates a boolean variable to false when SmartThings no longer detects someone present."}
{"original_description": "Receive notifications whenever there is news about the Tokyo Olympics.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "// Check if the entry title contains 'Tokyo Olympics'\nif (Feed.newFeedItem.EntryTitle.toLowerCase().includes('tokyo olympics')) {\n  // Create a notification message\n  var message = \"News: \" + Feed.newFeedItem.EntryTitle;\n  \n  // Set the notification title, link URL, and image URL if available\n  if (Feed.newFeedItem.FeedTitle) {\n    IfNotifications.sendRichNotification.setTitle(Feed.newFeedItem.FeedTitle);\n  }\n  if (Feed.newFeedItem.EntryUrl) {\n    IfNotifications.sendRichNotification.setLinkUrl(Feed.newFeedItem.EntryUrl);\n  }\n  if (Feed.newFeedItem.EntryImageUrl) {\n    IfNotifications.sendRichNotification.setImageUrl(Feed.newFeedItem.EntryImageUrl);\n  }\n  \n  // Send the notification\n  IfNotifications.sendRichNotification.setMessage(message).skip();\n}", "intent": "Trigger the notification action whenever there is news about the Tokyo Olympics, by checking for specific keywords in the RSS feed article title."}
{"original_description": "Cette applet permet de passer un pilote en mode \"lock\" tous les jours après une certaine heure. Lorsque le produit passe en mode \"lock\" les LEDs s'éteignent. C'est pratique si vous avez un pilote dans votre chambre et que la lumière vous dérange pour dormir.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-close-child-lock-mode", "Filter code method": "Heatzy.aCloseChildLockMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-close-child-lock-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime\nif (currentTime >= \"22:00\") {\n  Heatzy.aCloseChildLockMode.skip(\"Too early\")\n} else {\n  var device = [\"Device1\", \"Device2\"] // list of supported devices\n  if (!device.includes(event.device)) {\n    Heatzy.aCloseChildLockMode.skip(\"Unsupported device\")\n  } else {\n    Heatzy.aCloseChildLockMode()\n  }\n}", "intent": "This IFTTT applet automatically sets the Heatzy child lock mode every day after a specified time. The lock mode is triggered by checking the time and turning off LEDs when the mode is set."}
{"original_description": "Cette applet permet de désactiver le mode \"lock\" de vos produits tous les matins après une certaine heure.\nSi le produit est en mode \"lock\" la nuit pour vous permettre de mieux dormir, il peut aussi repasser en mode normal la journée pour vous permettre de l'utiliser normalement.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-close-child-lock-mode", "Filter code method": "Heatzy.aCloseChildLockMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-close-child-lock-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CurrentTime = DateAndTime.everyDayAt.CheckTime\nif (CurrentTime >= 7 && CurrentTime < 10) {\n  // Disable child lock mode between 7:00 and 10:00 AM\n  Heatzy.aCloseChildLockMode.skip(\"Outside of designated time range\")\n} else if (CurrentTime >= 17 && CurrentTime <= 23) {\n  // Disable child lock mode between 5:00 PM and 11:59 PM\n  Heatzy.aCloseChildLockMode.skip(\"Outside of designated time range\")\n} else {\n  var Device = GetDevice()\n  Heatzy.aCloseChildLockMode.runAction(Device)\n}", "intent": "This applet disables the child lock mode on Heatzy devices every day at a specified time."}
{"original_description": "When the waste drawer is full, create an Asana task to empty the drawer", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Asana", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "asana.create_task", "Filter code method": "Asana.createTask.skip(string?: reason)", "Runtime method": "runAction(\"asana.create_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Project name\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "In which project?", "Helper text": "Enter project name exactly as it appears in Asana.", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true", "Filter code method": "Asana.createTask.setTask Name(string: task_name)"}}, {"section": "Action fields", "title": "Notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notes", "Helper text": "Optional", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Due on\nText input > Other", "description": "Text input > Other", "details": {"Label": "Due on", "Helper text": "Optional. Use a date Ingredient or enter as YYYY-MM-DD", "Slug": "due_on", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setDue On(string: due_on)"}}, {"section": "Action fields", "title": "Assignee\nDropdown list", "description": "Dropdown list", "details": {"Label": "Assignee", "Helper text": "Optional", "Slug": "assignee", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tag name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Add a tag?", "Helper text": "Optional", "Slug": "tag_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Attach a file\nText input > File", "description": "Text input > File", "details": {"Label": "Attach a file?", "Slug": "attach_a_file", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setAttach A File(string: attach_a_file)"}}], "filter_code": "if (LitterRobot.litter_robot === \"Full\") {\n  var taskName = \"Empty Litter Robot Drawer\";\n  var notes = \"The waste drawer is full. Please empty it.\";\n  var dueOn = \"\";\n  Asana.createTask.skip(\"No due date specified\");\n} else {\n  Domovea.shadeClose.skip(\"Waste drawer not full\")\n}", "intent": "When the waste drawer is full, create an Asana task to empty the drawer."}
{"original_description": "Get a notification on all your Triby when Foobot notices a high level of pollution (higher than 50)", "trigger_channel": "Foobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foobot.allPollu50Any"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Foobot?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate & time threshold was reached.", "description": "Date & time threshold was reached.", "details": {"Slug": "created_at", "Filter code": "Foobot.allPollu50Any.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Foobot.", "description": "The name of the Foobot.", "details": {"Slug": "device_name", "Filter code": "Foobot.allPollu50Any.DeviceName", "Type": "String", "Example": "HappyBot"}}, {"section": "Ingredients", "title": "Value\nThe global pollution value.", "description": "The global pollution value.", "details": {"Slug": "value", "Filter code": "Foobot.allPollu50Any.Value", "Type": "String", "Example": "73.70"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.send_a_message_to_every_triby", "Filter code method": "InvoxiaTriby.sendAMessageToEveryTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.send_a_message_to_every_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What message?", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "InvoxiaTriby.sendAMessageToEveryTriby.setMessage(string: message)"}}], "filter_code": "// Check if the current value of Foobot's pollu50Any Event time\nvar Value = parseInt(Foobot.allPollu50Any.Value);\nif (Value > 50) {\n  // Get the device name and message from trigger data\n  var DeviceName = Foobot.allPollu50Any.DeviceName;\n  var Message = \"High pollution level detected in \" + DeviceName;\n  // Set the message for InvoxiaTriby notification\n  InvoxiaTriby.sendAMessageToEveryTriby.setMessage(Message);\n} else {\n  InvoxiaTriby.sendAMessageToEveryTriby.skip(\"No high pollution level detected\");\n}", "intent": "Send a notification on all Tribys when Foobot detects high pollution levels (above 50) in a specific device."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to Cozy mode if SmartThings detects that the temperature has dropped below the level you have defined.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.temperature_drops_below_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Temperature value", "Helper text": "Temperature threshold as a number", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature units", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nThe temperature measured by the sensor in Fahrenheit.", "description": "The temperature measured by the sensor in Fahrenheit.", "details": {"Slug": "TemperatureFahrenheit", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureFahrenheit", "Type": "String", "Example": "74"}}, {"section": "Ingredients", "title": "Temperature celsius\nThe temperature measured by the sensor in Celsius.", "description": "The temperature measured by the sensor in Celsius.", "details": {"Slug": "TemperatureCelsius", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureCelsius", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Threshold\nThe temperature threshold set in the recipe.", "description": "The temperature threshold set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.Threshold", "Type": "String", "Example": "75"}}, {"section": "Ingredients", "title": "Threshold units\nThe temperature threshold units (C or F).", "description": "The temperature threshold units (C or F).", "details": {"Slug": "ThresholdUnits", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.ThresholdUnits", "Type": "String", "Example": "F"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the temperature.", "description": "The date and time the sensor measured the temperature.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "// Check if temperature has dropped below the defined threshold\nif (SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureFahrenheit < parseInt(SmartthingsV2.temperatureDropsBelowSmartthings.Threshold)) {\n  // Set the correct unit for the threshold\n  var thresholdUnit = SmartthingsV2.temperatureDropsBelowSmartthings.ThresholdUnits;\n  \n  // If temperature is in Fahrenheit, use it directly\n  if (thresholdUnit === \"F\") {\n    Wiz.turnOn.skip(\"No action required\")\n  } else { // Temperature is in Celsius\n    // Convert Celsius to Fahrenheit and compare with the threshold\n    var temperatureInFahrenheit = parseInt(SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureCelsius) * 1.8 + 32;\n    if (temperatureInFahrenheit < parseInt(SmartthingsV2.temperatureDropsBelowSmartthings.Threshold)) {\n      // Set Cozy mode and dimming for WiZ lights\n      Wiz.turnOn.setMode(\"Cozy\").setDimming(\"50\"); // Replace with your preferred brightness level\n    } else { \n      Wiz.turnOn.skip(\"Temperature is not below the threshold\")\n    }\n  }\n}", "intent": "Automatically change WiZ lights to Cozy mode when SmartThings detects a temperature drop below the defined threshold."}
{"original_description": "Create a Google Calendar event to make sure you have time to handle a voicemail from Zoom Phone.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_user_voicemail"}, "trigger_details": [{"section": "Trigger fields", "title": "Voicemail status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which status should the voicemail have?", "Helper text": "Is the voicemail read or unread?", "Slug": "voicemail_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Voicemail\nThe ID of the voicemail.", "description": "The ID of the voicemail.", "details": {"Slug": "voicemail_id", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailId", "Type": "String", "Example": "alkdoweinld"}}, {"section": "Ingredients", "title": "Call date\nThe start time of the voicemail.", "description": "The start time of the voicemail.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newUserVoicemail.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Voicemail duration\nThe duration of the voicemail in format HH:MM:SS.", "description": "The duration of the voicemail in format HH:MM:SS.", "details": {"Slug": "voicemail_duration", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailDuration", "Type": "String", "Example": "00:03:21"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the caller.", "description": "The phone number of the caller.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the caller.", "description": "The name of the caller.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newUserVoicemail.CallerName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the user who received the voicemail.", "description": "The phone number of the user who received the voicemail.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumber", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the user who received the voicemail.", "description": "The name of the user who received the voicemail.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newUserVoicemail.CalleeName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Voicemail status\nThe status of the voicemail -- read or unread.", "description": "The status of the voicemail -- read or unread.", "details": {"Slug": "voicemail_status", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailStatus", "Type": "String", "Example": "unread"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\") {\n  var calendar = \"Primary Calendar\"; // replace with actual desired calendar name\n  var quickAddText = \"Handle voicemail from \" + ZoomPhone.newUserVoicemail.CallerName;\n  GoogleCalendar.quickAddEvent(calendar, quickAddText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Voicemail has been read\")\n}", "intent": "Create a Google Calendar event when a new voicemail from Zoom Phone is received, ensuring time to handle it."}
{"original_description": "Send a message to Teams when there is a new Asana Project that is created.", "trigger_channel": "Asana", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asana.new_project"}, "trigger_details": [{"section": "Trigger fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asana.newProject.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Project name\nThe name of the project the task is for.", "description": "The name of the project the task is for.", "details": {"Slug": "project_name", "Filter code": "Asana.newProject.ProjectName", "Type": "String", "Example": "Cool things to do with Asana!"}}, {"section": "Ingredients", "title": "Workspace\nThe name of the workspace the project was added to.", "description": "The name of the workspace the project was added to.", "details": {"Slug": "workspace", "Filter code": "Asana.newProject.Workspace", "Type": "String", "Example": "Team Asana"}}, {"section": "Ingredients", "title": "Project description\nDescription associated with the project.", "description": "Description associated with the project.", "details": {"Slug": "project_description", "Filter code": "Asana.newProject.ProjectDescription", "Type": "String", "Example": "Awesome ways you can use Asana with other services."}}, {"section": "Ingredients", "title": "Project url\nThe URL to the project on Asana.", "description": "The URL to the project on Asana.", "details": {"Slug": "project_url", "Filter code": "Asana.newProject.ProjectURL", "Type": "Web URL", "Example": "asana.com/"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "var CreatedAt = Asana.newProject.CreatedAt\nvar ProjectName = Asana.newProject.ProjectName\nvar Workspace = Asana.newProject.Workspace\nvar ProjectDescription = Asana.newProject.ProjectDescription\nvar ProjectURL = Asana.newProject.ProjectURL\n\nif (WhichWorkspace === \"Your desired workspace\") {\n  MicrosoftTeams.postMessageToChannel.skip(\"Invalid workspace selected\")\n}\n\nvar MessageSubject = \"New Asana Project: \" + ProjectName\nvar MessageBody = \"Project created in \" + Workspace + \": \" + ProjectDescription + \". URL: \" + ProjectURL\n\nMicrosoftTeams.postMessageToChannel.setMessageSubject(MessageSubject)\nMicrosoftTeams.postMessageToChannel.setMessageBody(MessageBody)\n\nMicrosoftTeams.postMessageToChannel.run()", "intent": "When a new Asana project is created, send a message to the specified Teams channel with a subject and body generated from the project details."}
{"original_description": "Quand je reçois un SMS sur mon Smartphone il est affiché sur l'écran où est branché ma Bbox Miami.", "trigger_channel": "Android SMS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_messages.received_a_message"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the message.", "description": "The contact name associated with the message.", "details": {"Slug": "ContactName", "Filter code": "AndroidMessages.receivedAMessage.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Text\nThe text of the message", "description": "The text of the message", "details": {"Slug": "Text", "Filter code": "AndroidMessages.receivedAMessage.Text", "Type": "String", "Example": "Hey there! How's it going?"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the message was received.", "description": "The time the message was received.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidMessages.receivedAMessage.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe number that sent the message", "description": "The number that sent the message", "details": {"Slug": "FromNumber", "Filter code": "AndroidMessages.receivedAMessage.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidMessages.receivedAMessage.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Bbox Miami", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bbox_miami.send_toast", "Filter code method": "BboxMiami.sendToast.skip(string?: reason)", "Runtime method": "runAction(\"bbox_miami.send_toast\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What message would you like to send?", "Helper text": "This message will be sent to your Bbox Miami", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "BboxMiami.sendToast.setMessage(string: message)"}}], "filter_code": "// Get trigger data\nvar ContactName = AndroidMessages.receivedAMessage.ContactName;\nvar Text = AndroidMessages.receivedAMessage.Text;\nvar OccurredAt = AndroidMessages.receivedAMessage.OccurredAt;\nvar FromNumber = AndroidMessages.receivedAMessage.FromNumber;\nvar DeviceName = AndroidMessages.receivedAMessage.DeviceName;\n\n// Set the action message\nvar message = \"Received SMS from \" + ContactName + \": '\" + Text + \"' at \" + OccurredAt;\n\n// Send the toast to Bbox Miami with the received message\nBboxMiami.sendToast.setMessage(message).then(() => {\n  // Success\n}).catch((error) => {\n  console.error(\"Error: \" + error);\n});", "intent": "When receiving an SMS on my Android smartphone, display the received message on the screen of my Bbox Miami."}
{"original_description": "Get a message to your Teams channel when there is a new book on the NYT Best Sellers list.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (Nytimes.newBookOnABestSellerList.List === \"Best Sellers List\") {\n  var message = \"New Book Alert: '\" + Nytimes.newBookOnABestSellerList.Title + \"' by \" + Nytimes.newBookOnABestSellerList.Author;\n  message += \"\\nDescription: \" + Nytimes.newBookOnABestSellerList.Description;\n  message += \"\\nPublisher: \" + Nytimes.newBookOnABestSellerList.Publisher;\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Book on the List\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(message);\n  MicrosoftTeams.postMessageToChannel.runAction();\n}", "intent": "When a new book appears on the NYT Best Sellers list, post a message to Microsoft Teams with the title, description, and author."}
{"original_description": "Get a daily reminder on your Kronaby watch to do that thing you always forget to do.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Kronaby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kronaby.notify", "Filter code method": "Kronaby.notify.skip(string?: reason)", "Runtime method": "runAction(\"kronaby.notify\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "Enter a message", "Helper text": "This optional message will be sent as a notification to your phone.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Kronaby.notify.setBody(string: body)"}}], "filter_code": "var CheckTime = DateAndTime.everyDayAt.CheckTime\nif (CheckTime !== \"August 23, 2010 at 11:01PM\") {\n  Kronaby.notify.skip(\"Not the right time\")\n} else {\n  var Body = \"Don't forget to do that thing you always forget to do.\"\n  Kronaby.notify.setBody(Body)\n}", "intent": "Check if it's the specified time, and if not, skip the notification action. If it's the right time, set the notification message to a default value."}
{"original_description": "Receive a daily reminder phone call. Enter hour, minute and the text to be played when call connects. Register your phone number at woop.la/ifttt to receive phone calls.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime >= `${Meta.currentUserTime.format(\"YYYY-MM-DD\")} ${trigger_details[0].details.Label}`) {\n  var time = DateAndTime.everyDayAt.CheckTime\n  var tts = trigger_details[1].details.FilterCode.replace(/August\\s+\\d+,?\\s*\\d{2}\\:\\d{2}PM/g, \"Current Time\")\n  Woopla.ttsCall.setTts(tts)\n  // Set Language\n  Woopla.ttsCall.setLanguage(trigger_details[2].details.Label)\n  Woopla.ttsCall.skip()\n}", "intent": "Receive a daily reminder phone call. Enter hour, minute and the text to be played when call connects."}
{"original_description": "Pause", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  if (Knocki.knocki.Pattern !== \"***\") {\n    Sonos.pause.skip(\"Invalid pattern\")\n  } else {\n    var room = //TODO\n    var includeGroupedRooms = true // Default value\n    if (Knocki.knocki.include_grouped_rooms) {\n      includeGroupedRooms = Knocki.knocki.include_grouped_rooms\n    }\n    Sonos.pause.setIncludeGroupedRooms(includeGroupedRooms)\n    Sonos.pause.skip()\n  }\n}", "intent": "Pause the music playback on Sonos when a specific Knocki gesture is detected."}
{"original_description": "Play Favorite", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  var favorite = \"$$favorite$$\";\n  var room = \"$$room$$\";\n  if (!Sonos.playFavorite.setIncludeGroupedRooms(include_grouped_rooms)) {\n    Sonos.playFavorite.skip(\"Failed to set Include grouped rooms\");\n  } else {\n    Sonos.playFavorite(favorite, room);\n  }\n} else {\n  Sonos.playFavorite.skip(\"Invalid gesture detected\")\n}", "intent": "Play the favorite on Sonos when a specific Knocki gesture is detected."}
{"original_description": "Resume", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.resume", "Filter code method": "Sonos.resume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.resume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to resume?", "Helper text": "Select room. The group containing this room will resume playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Gesture = Knocki.knocki.Gesture;\nvar Pattern = Knocki.knocki.Pattern;\nvar Device = Knocki.knocki.Device;\nif (Gesture === \"Triple Knock\" && Pattern === \"***\") {\n  Sonos.resume.runAction(\"sonos.resume\", {\"room\": Room});\n}", "intent": "Resume the Sonos music playback in a specific room based on a Knocki gesture and pattern recognition."}
{"original_description": "Volume Up", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.decrease_volume", "Filter code method": "Sonos.decreaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.decrease_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.decreaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var Device = Knocki.knocki.Device\nvar Pattern = Knocki.knocki.Pattern\nif (Device === \"KNC1-W-00000088\" && Pattern === \"***\") {\n  Sonos.decreaseVolume(\"My Room\", { include_grouped_rooms: true })\n} else {\n  Sonos.decreaseVolume.skip(\"Invalid device or pattern\")\n}", "intent": "When a Knocki gesture is detected, check if the device ID and pattern match specific conditions. If true, decrease the volume in a specified room."}
{"original_description": "Mute", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.mute", "Filter code method": "Sonos.mute.skip(string?: reason)", "Runtime method": "runAction(\"sonos.mute\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to mute?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Mute in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.mute.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === 'Triple Knock' && Knocki.knocki.Pattern === \"***\") {\n  if (!Knocki.knocki.code.match(/^KNC\\d+-W-\\d+$/)) {\n    Sonos.mute.skip(\"Invalid device ID\")\n  } else {\n    Sonos.mute.runAction({\"room\": \"selected room\", \"include_grouped_rooms\": true})\n  }\n}", "intent": "Automate the Sonos mute action for a specific Knocki gesture and pattern."}
{"original_description": "Skip to next track", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.next_track", "Filter code method": "Sonos.nextTrack.skip(string?: reason)", "Runtime method": "runAction(\"sonos.next_track\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to skip?", "Helper text": "Select room. The group containing this room will skip to the next track.", "Slug": "room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === 'Triple Knock' && Knocki.knocki.Pattern === \"***\") {\n  Sonos.nextTrack.skip(\"Gesture matched, skipping to next track\")\n} else {\n  // do nothing\n}", "intent": "Skip to the next track when a Knocki gesture is recognized and it matches a specific pattern."}
{"original_description": "Flicボタンをダブルクリックすると、風景をランダムに切り替えます。", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.change_view", "Filter code method": "Atmoph.changeView.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.change_view\", {})"}, "action_details": [], "filter_code": "if (Flic.click.ClickType === 'double_click') {\n  var view = ['View1', 'View2', 'View3', 'View4', 'View5'];\n  Atmoph.changeView(Math.floor(Math.random() * view.length));\n} else {\n  Atmoph.changeView.skip('Not a double click');\n}", "intent": "When the Flic button is double-clicked, randomly change the scenery."}
{"original_description": "Flicボタンを長押しすると、Atmoph Window にカレンダーを表示します。もう一度長押しすると消えます。", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.show_calendar", "Filter code method": "Atmoph.showCalendar.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.show_calendar\", {})"}, "action_details": [], "filter_code": "var ButtonUUID = $$Button_UUID$$\nif ($$Click_Type$$ === \"hold\") {\n  if (Atmoph.showCalendar !== undefined) {\n    Atmoph.showCalendar(skip())\n  } else {\n    Atmoph.showCalendar()\n  }\n} else {\n  Atmoph.showCalendar.skip(\"Not a hold event\")\n}", "intent": "Show Atmoph Window calendar when Flic button is long pressed and hide it again when pressed once more."}
{"original_description": "Set Volume", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.set_volume", "Filter code method": "Sonos.setVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.set_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Volume\nText input > Other", "description": "Text input > Other", "details": {"Label": "What level do want the volume to be?", "Helper text": "It doesn't just go to 11. It goes way beyond 11 - enter any value between 0 (total silence) and 100 (maximum overdrive)", "Slug": "volume", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.setVolume.setVolume(string: volume)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to set the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Set the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.setVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "function main() {\n  var Code = trigger.code;\n  if (Code === \"\") {\n    Sonos.setVolume.skip(\"No code provided\")\n  }\n  \n  var CreatedAt = trigger.createdAt;\n  var Device = trigger.device;\n  var Gesture = trigger.gesture;\n  var Pattern = trigger.pattern;\n  \n  var Volume = action.volume;\n  if (Volume < 0 || Volume > 100) {\n    Sonos.setVolume.skip(\"Invalid volume value\")\n  }\n  \n  var Room = action.room;\n  if (!Room) {\n    Sonos.setVolume.skip(\"No room selected\")\n  }\n  \n  if (action.include_grouped_rooms === true) {\n    Sonos.setVolume.setIncludeGroupedRooms(true)\n  } else {\n    Sonos.setVolume.setIncludeGroupedRooms(false)\n  }\n  \n  Sonos.setVolume(Volume, Room)\n}", "intent": "When a Knocki gesture pattern is detected, set the volume to the specified value in the selected room(s) using Sonos."}
{"original_description": "Unmute", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.unmute", "Filter code method": "Sonos.unmute.skip(string?: reason)", "Runtime method": "runAction(\"sonos.unmute\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to unmute?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Mute in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.unmute.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "function main() {\n  var Code = trigger.code;\n  if (Code.match(/^[\\w-]{1,}$/) === null) {\n    Knocki.knocki.skip(\"Invalid code format\");\n  } else {\n    var CreatedAt = Knocki.knocki.CreatedAt;\n    var Device = Knocki.knocki.Device;\n    var Gesture = Knocki.knocki.Gesture;\n    var Pattern = Knocki.knocki.Pattern;\n\n    if (Pattern === \"***\") {\n      Sonos.unmute.skip(\"Invalid pattern\");\n    } else {\n      var Room = action.room;\n      if (Room !== \"\") {\n        Sonos.unmute.runAction({\n          \"room\": Room,\n          \"include_grouped_rooms\": action.include_grouped_rooms\n        });\n      } else {\n        Sonos.unmute.skip(\"No room selected\");\n      }\n    }\n  }\n}", "intent": "Unmutes the Sonos device in the specified room."}
{"original_description": "Set a Nest Thermostat to the temperature you specify.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "// Define the variables\nvar device = Knocki.knocki.Device;\nvar temperatureUnit = GoogleNestThermostat.setHotTemperature.getTemperatureUnit();\nvar degrees = GoogleNestThermostat.setHotTemperature.getDegrees();\n\n// Check if the gesture is valid\nif (Knocki.knocki.Gesture === \"Triple Knock\") {\n  // Set the temperature on the specified device\n  GoogleNestThermostat.setHotTemperature(device, temperatureUnit, degrees);\n} else {\n  // Skip the action\n  GoogleNestThermostat.setHotTemperature.skip(\"Invalid gesture\");\n}", "intent": "Set the temperature on a specified Nest Thermostat based on a Knocki gesture."}
{"original_description": "Change color for Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_color", "Filter code method": "Yeelight.setColor.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which color?", "Slug": "color_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === 'Triple Knock') {\n  // Check if the pattern is correct\n  var Pattern = Knocki.knocki.Pattern\n  if (Pattern === \"***\") {\n    // Get device ID from Trigger\n    var DeviceID = Knocki.knocki.Device\n    // Set color based on selected color\n    Yeelight.setColor(DeviceID, \"color_id\")\n  } else {\n    Yeelight.setColor.skip(\"Incorrect pattern\")\n  }\n}", "intent": "Change the color of Yeelight devices based on Knocki triggers."}
{"original_description": "Let SwitchBot turn on your coffee machine in the morning", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.press_bot", "Filter code method": "Switchbot.pressBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.press_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime\nif (time >= \"08:00\" && time <= \"12:00\") {\n  Switchbot.pressBot(\"Turn on the coffee machine\")\n} else {\n  Switchbot.pressBot.skip(\"Outside of morning hours\")\n}", "intent": "When the Date & Time trigger is triggered, check if it's within the morning hours (08:00 - 12:00), and if so, use SwitchBot to turn on a coffee machine."}
{"original_description": "Change the brightness of a light bulb.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_brightness", "Filter code method": "Kasa.changeBrightness.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_brightness\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Helper text": "Choose a Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Kasa.changeBrightness.setBrightness(string: brightness)"}}], "filter_code": "if (Knocki.knocki.Pattern === \"***\") {\n  var Device = Knocki.knocki.Device;\n  var CreatedAt = new Date(Knocki.knocki.CreatedAt);\n  if (CreatedAt.getHours() < 7 || CreatedAt.getHours() > 22) {\n    Kasa.changeBrightness.skip(\"Outside of active hours\")\n  } else {\n    Kasa.changeBrightness.setBrightness(Knocki.knocki.Gesture)\n  }\n} else {\n  Kasa.changeBrightness.skip(\"Invalid pattern\")\n}", "intent": "The IFTTT automation will change the brightness of a TP-Link Kasa light bulb based on a Knocki gesture, with the ability to set a custom ID and filter by device, pattern, and created at time."}
{"original_description": "Skip to previous track", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.previous_track", "Filter code method": "Sonos.previousTrack.skip(string?: reason)", "Runtime method": "runAction(\"sonos.previous_track\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to skip?", "Helper text": "Select room. The group containing this room will skip to the previous track.", "Slug": "room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Pattern === \"***\") {\n  if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.CreatedAt >= new Date(\"2020-07-08T04:17:06+05:00\")) {\n    Sonos.previousTrack.skip(\"Knocki gesture detected\")\n  }\n}", "intent": "Skip to the previous track in Sonos when a Knocki device is triggered by a gesture pattern."}
{"original_description": "Set scene for Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_scene", "Filter code method": "Yeelight.setScene.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Bundle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "bundle_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "const CreatedAt = Knocki.knocki.CreatedAt\nconst Device = Knocki.knocki.Device\nconst Gesture = Knocki.knocki.Gesture\nconst Pattern = Knocki.knocki.Pattern\nif (Pattern === \"Triple Knock\") {\n  const BundleId = code.match(/^.*$/) // Regular expression to extract the bundle ID from the user's input\n  if (BundleId) {\n    Yeelight.setScene.skip(BundleId)\n  } else {\n    Yeelight.setScene(skip(\"Invalid bundle ID\"))\n  }\n}", "intent": "When the Knocki device detects a specific gesture pattern, set the Yeelight scene to a specified bundle."}
{"original_description": "Change the color temperature of a light bulb.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  var device = Knocki.knocki.Device;\n  var colorTemperature = null;\n  if (Trigger.code.match(/^(\\w+)/) !== null) {\n    colorTemperature = Trigger.code.replace(/^(\\w+)/, \"$1\");\n  }\n  Kasa.changeColorTemp.runAction({\n    \"device\": device,\n    \"color_temperature\": colorTemperature,\n    \"kelvin\": null,\n    \"transition_duration\": null,\n    \"advanced_options\": \"\"\n  });\n} else {\n  Knocki.knocki.skip(\"Invalid gesture pattern\")\n}", "intent": "Change the color temperature of a light bulb when a specific gesture pattern is detected."}
{"original_description": "Change brightness for Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.change_bright", "Filter code method": "Yeelight.changeBright.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.change_bright\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which brightness?", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Pattern === \"***\") {\n  if (Knocki.knocki.Gesture === \"Triple Knock\") {\n    Yeelight.changeBright(Knocki.knocki.Device, \"bright=50\");\n  }\n}", "intent": ""}
