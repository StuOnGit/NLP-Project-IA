{"original_description": "Cette applet permet de passer votre heatzy pilote en mode programmation hebdomadaire lorsque la température extérieure passe en dessous d'une certaine valeur.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-auto-mode", "Filter code method": "Heatzy.aSetAutoMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-auto-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Temperature = Weather.currentTemperatureDropsBelow.TempFahrenheit;\nvar DegreesType = Weather.currentTemperatureDropsBelow.degrees_type;\nvar Location = Weather.currentTemperatureDropsBelow.location;\n\nif (DegreesType === \"F\" && Temperature < 55) {\n    Heatzy.aSetAutoMode.skip(\"Temperature in Fahrenheit is not low enough\");\n} else if (DegreesType === \"C\" && Temperature < 13) {\n    Heatzy.aSetAutoMode();\n}", "intent": "This applet sets Heatzy's auto mode when the temperature outside drops below a certain value."}
{"original_description": "Everyday at the time you selected, IFTTT fires action and turns off your projector automatically.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Optoma", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Optoma.led_on_off", "Filter code method": "Optoma.ledOnOff.skip(string?: reason)", "Runtime method": "runAction(\"Optoma.led_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Optoma.ledOnOff.setTurn On Off(string: turn_on_off)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime === 'time') {\n  if (new Date() >= new Date('time')) {\n    var device_id = // Add your device ID here\n    Optoma.ledOnOff.skip(\"Device not selected\")\n  } else {\n    Optoma.ledOnOff.setTurnOnOff('off')\n  }\n}", "intent": "Automate Optoma LED projector to turn off at a specific time every day."}
{"original_description": "Every time there is a new completed task in a project., a Signal will be sent to your Das Keyboard.", "trigger_channel": "Asana", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asana.new_task_completed"}, "trigger_details": [{"section": "Trigger fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace is the project in?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Project name\nText input", "description": "Text input", "details": {"Label": "Project name or URL:", "Helper text": "Enter the project name exactly as it appears in Asana. The project URL is also accepted.", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asana.newTaskCompleted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Project name\nThe name of the project the task is for.", "description": "The name of the project the task is for.", "details": {"Slug": "project_name", "Filter code": "Asana.newTaskCompleted.ProjectName", "Type": "String", "Example": "Trip to Japan"}}, {"section": "Ingredients", "title": "Task name\nThe name of the task.", "description": "The name of the task.", "details": {"Slug": "task_name", "Filter code": "Asana.newTaskCompleted.TaskName", "Type": "String", "Example": "Build the Asana Channel on IFTTT"}}, {"section": "Ingredients", "title": "Task notes\nThe notes associated with the task.", "description": "The notes associated with the task.", "details": {"Slug": "task_notes", "Filter code": "Asana.newTaskCompleted.TaskNotes", "Type": "String", "Example": "Make it one of the best on IFTTT!"}}, {"section": "Ingredients", "title": "Completed at\nThe date and time the task was completed.", "description": "The date and time the task was completed.", "details": {"Slug": "completed_at", "Filter code": "Asana.newTaskCompleted.CompletedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Assignee\nThe name of the assignee for the project.", "description": "The name of the assignee for the project.", "details": {"Slug": "assignee", "Filter code": "Asana.newTaskCompleted.Assignee", "Type": "String", "Example": "Biff McIFTTT"}}, {"section": "Ingredients", "title": "Workspace\nThe name of the workspace.", "description": "The name of the workspace.", "details": {"Slug": "workspace", "Filter code": "Asana.newTaskCompleted.Workspace", "Type": "String", "Example": "Team Asana"}}, {"section": "Ingredients", "title": "Tags\nThe tags associated with the task. Comma separated if more than one.", "description": "The tags associated with the task. Comma separated if more than one.", "details": {"Slug": "tags", "Filter code": "Asana.newTaskCompleted.Tags", "Type": "String", "Example": "IFTTT, Integrations Save Ingredient"}}, {"section": "Ingredients", "title": "Task url\nThe URL to the task on Asana.", "description": "The URL to the task on Asana.", "details": {"Slug": "task_url", "Filter code": "Asana.newTaskCompleted.TaskURL", "Type": "Web URL", "Example": "asana.com/"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Asana.newTaskCompleted.Workspace === which_workspace) {\n  if (project_name === \"Trip to Japan\") {\n    // If it's the specific project\n    Daskeyboardq.signals.setName(\"Asana task completed in Trip to Japan\")\n      .setZone(\"travel\")\n      .setColor(\"blue\")\n      .setMessage(`Task \"${task_name}\" has been completed by ${assignee} at ${completed_at}`)\n      .setEffect(\"blink\")\n      .runAction()\n  } else {\n    // If it's not the specific project\n    Daskeyboardq.signals.setName(\"New Asana task completed\")\n      .setZone(\"general\")\n      .setColor(\"green\")\n      .setMessage(`Task \"${task_name}\" has been completed by ${assignee} at ${completed_at}`)\n      .setEffect(\"fade\")\n      .runAction()\n  }\n}", "intent": "Triggered by new completed task in Asana, send a Signal to Das Keyboard Q with relevant details."}
{"original_description": "Dim the light when it's late at night , to comfort your feelings.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Cloud Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "link_smart_home.Light-Brightness", "Filter code method": "LinkSmartHome.lightBrightness.skip(string?: reason)", "Runtime method": "runAction(\"link_smart_home.Light-Brightness\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Set brightness to", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "LinkSmartHome.lightBrightness.setValue(string: value)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime >= \"22:00:00\") {  \n  LinkSmartHome.lightBrightness.setValue(value, device_id);\n} else {  \n  LinkSmartHome.lightBrightness.skip(\"Not late enough\");\n}", "intent": "Check the current time and dim the light when it's late at night."}
{"original_description": "Every day, at 9 PM, close the garage door.\n\nThis applet requires an active account linking subscription.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyQ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myq_devices.close_door", "Filter code method": "MyqDevices.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"myq_devices.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door name\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the door name?", "Slug": "door_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime === \"20:00:00\") {\n  MyqDevices.closeDoor(\"Daily closure at 9 PM\")\n} else {\n  MyqDevices.closeDoor.skip(\"Not yet 9 PM\")\n}", "intent": "Every day at 9 PM, close the garage door if the specified time matches."}
{"original_description": "Once you home's PM levels return to healthy levels, this sets your Lennox iComfort central air fan back to Auto.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Lennox iComfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lennoxicomfort.fanmodeauto", "Filter code method": "Lennoxicomfort.fanmodeauto.skip(string?: reason)", "Runtime method": "runAction(\"lennoxicomfort.fanmodeauto\", {})"}, "action_details": [{"section": "Action fields", "title": "Systems\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "systems", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HavenIaq.pm25Event.Value <= parseInt(HavenIaq.pm25Event.Threshold)) {\n  // Check if the value is below or equal to the threshold\n  Lennoxicomfort.fanmodeauto.skip(\"PM levels still unhealthy\");\n} else {\n  // Set the fan mode back to Auto\n  Lennoxicomfort.fanmodeauto();\n}", "intent": "When HAVEN IAQ PM 25 levels return to healthy levels, set Lennox iComfort central air fan back to Auto."}
{"original_description": "Once you home's PM levels return to healthy levels, this turns off the Kasa smart switch attached to your purification device.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HavenIaq.pm25Event.Value <= HAVEN_IQAQ_THRESHOLD.FAIR) {\n  var reason = \"PM levels have returned to healthy levels\";\n  Kasa.turnOff.skip(reason);\n}", "intent": "Once the PM levels return to healthy levels, this automation turns off the Kasa smart switch attached to the purification device."}
{"original_description": "If your home's PM levels are too high, this sets your Lennox iComfort fan to on, allowing more air to be filtered by your central system. Note: Use a second applet to turn off the device once levels are healthy again.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Lennox iComfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lennoxicomfort.fanmodeon", "Filter code method": "Lennoxicomfort.fanmodeon.skip(string?: reason)", "Runtime method": "runAction(\"lennoxicomfort.fanmodeon\", {})"}, "action_details": [{"section": "Action fields", "title": "Systems\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "systems", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HavenIaq.pm25Event.Rising === \"True\" && HavenIaq.pm25Event.Value > parseInt(HavenIaq.pm25Event.Threshold)) {\n  Lennoxicomfort.fanmodeon(\"System: Central Air\")\n} else {\n  Lennoxicomfort.fanmodeon.skip(\"PM levels within healthy range\")\n}", "intent": "This automation sets Lennox iComfort fan to on when PM levels exceed a specified threshold, allowing more air to be filtered by the central system."}
{"original_description": "User can activate MyMilan Scene at a particular time every day. For eg: Turning on outdoor lights exactly at 6:00 pm.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyDayAt.CheckTime\nif (parseInt(Time.split(\" \")[1].split(\":\")[0]) === 18) {\n  Mymilan.aScenes(\"MyMilan Scene\")\n} else {\n  Mymilan.aScenes.skip(\"Not the correct time\")\n}", "intent": "This IFTTT automation enables the user to activate the MyMilan Scene at a specific time every day. The trigger is set to run daily, and the action will only proceed if the time matches the specified time."}
{"original_description": "If your home's PM levels are too high, this sets your Honeywell Total Connect central blower fan to On, ensuring that more air is moved through your filter. Note: Use a second applet to turn off the fan once levels are healthy again.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setfan", "Filter code method": "HoneywellTotalConnectComfort.setfan.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setfan\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fan state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan state", "Slug": "fan_state", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setfan.setFan State(string: fan_state)"}}], "filter_code": "if (HavenIaq.pm25Event.Value > HavenIaq.pm25Event.Threshold) {\n  HoneywellTotalConnectComfort.setfan(\"On\")\n} else {\n  HoneywellTotalConnectComfort.setfan.skip(\"PM levels are within range\")\n}", "intent": "If the HAVEN IAQ PM25 event is triggered, set the Honeywell Total Connect central blower fan to On if the PM level exceeds the threshold."}
{"original_description": "Once you home's PM levels return to healthy levels, this returns your Honeywell Total Connect system fan back to Auto.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setfan", "Filter code method": "HoneywellTotalConnectComfort.setfan.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setfan\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fan state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan state", "Slug": "fan_state", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setfan.setFan State(string: fan_state)"}}], "filter_code": "", "intent": "Automatically set the Honeywell Total Connect Comfort system fan to Auto mode when the PM levels in the home return to healthy levels."}
{"original_description": "Sets a new indefinite temperature point on the Ecobee thermostat you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_indefinite", "Filter code method": "Ecobee.holdIndefinite.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_indefinite\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\") {\n  var createdAt = Apilio.iftttActionReports.CreatedAt\n  var thermostat = //Thermostat dropdown selection\n  var desiredTemperature = //Desired temperature dropdown selection\n  if (createdAt >= \"22:00\" && createdAt <= \"06:59\") {\n    Ecobee.holdIndefinite(thermostat, desiredTemperature)\n  } else {\n    Ecobee.holdIndefinite.skip(\"Only at night\")\n  }\n}", "intent": "When an Apilio event is triggered, checks if it's a specific event name and sets the Ecobee thermostat to hold at a new temperature point."}
{"original_description": "Turn on light switch at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Meta.currentUserTime.hour() === Weather.sunSets.SunsetAt.getHours()) {\n  if (Weather.temp_celsius <= 18) {\n    if (Weather.condition !== \"Sunny\") {\n      Ecobee.turnSwitchOff(\"Light Switch\", \"Sunset triggered - temperature below 18°C and not sunny\")\n    } else {\n      Ecobee.turnSwitchOff.skip(\"Not turning on due to sunny weather condition\")\n    }\n  } else {\n    Ecobee.turnSwitchOff.skip(\"Not turning on due to high temperature above 18°C\")\n  }\n}", "intent": "Turn on light switch at sunset, when temperature is below 18 degrees Celsius and weather condition is not sunny."}
{"original_description": "Turn a light switch off at a specific time of day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === 'Sunday' || DateAndTime.everyWeekdayAt.DayOfWeek === 'Monday' || DateAndTime.everyWeekdayAt.DayOfWeek === 'Tuesday' || DateAndTime.everyWeekdayAt.DayOfWeek === 'Wednesday' || DateAndTime.everyWeekdayAt.DayOfWeek === 'Thursday' || DateAndTime.everyWeekdayAt.DayOfWeek === 'Friday') {\n  if (DateAndTime.everyWeekdayAt.CheckTime >= '06:00' && DateAndTime.everyWeekdayAt.CheckTime <='18:59') {\n    Ecobee.turnSwitchOff('My Switch Name');\n  } else {\n    Ecobee.turnSwitchOff.skip(\"Outside of active hours\");\n  }\n}", "intent": "Turn the ecobee smart light switch off at a specific time of day."}
{"original_description": "Turn a light switch off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var SunriseAt = Weather.sunRises.SunriseAt\nif (Meta.currentUserTime.format(\"YYYY-MM-DDTHH:mm:ssZ\") >= SunriseAt) {\n  Ecobee.turnSwitchOff.skip(\"Not yet sunrise\")\n} else {\n  Ecobee.turnSwitchOff()\n}", "intent": "Turn off a light switch at sunrise."}
{"original_description": "Turn a light switch on at a specific time of day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var Time = DateAndTime.everyWeekdayAt.time\nvar Weekdays = DateAndTime.everyWeekdayAt.weekdays\nif (Weekdays.includes(Meta.currentUserTime.day()) && Time === \"Your desired time\") {\n  Ecobee.turnSwitchOff(Ecobee.name, \"On at the right time\")\n} else {\n  Ecobee.turnSwitchOff.skip(\"Not a weekday or wrong time\")\n}", "intent": "Turn a specific light switch on at a specified time of day, only on weekdays."}
{"original_description": "If current humidity level rises too high, then boost my ventilation", "trigger_channel": "ecobee", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ecobee.indoor_humidity_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Indoor humidity threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Indoor Humidity Threshold", "Helper text": "Enter the humidty % threshold value for this Trigger", "Slug": "indoor_humidity_threshold", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Thermostat name\nThe name of the thermostat", "description": "The name of the thermostat", "details": {"Slug": "thermostat_name", "Filter code": "Ecobee.indoorHumidityBelow.ThermostatName", "Type": "String", "Example": "Living Room"}}, {"section": "Ingredients", "title": "Thermostat identifier\nThe unique thermostat identifier", "description": "The unique thermostat identifier", "details": {"Slug": "thermostat_identifier", "Filter code": "Ecobee.indoorHumidityBelow.ThermostatIdentifier", "Type": "String", "Example": "123456789012"}}, {"section": "Ingredients", "title": "Indoor humidity\nThe current indoor humidity % as measured by your ecobee", "description": "The current indoor humidity % as measured by your ecobee", "details": {"Slug": "indoor_humidity", "Filter code": "Ecobee.indoorHumidityBelow.IndoorHumidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Thermostat time\nDate and time, in thermostat time, the measurement was taken.", "description": "Date and time, in thermostat time, the measurement was taken.", "details": {"Slug": "thermostat_time", "Filter code": "Ecobee.indoorHumidityBelow.ThermostatTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Desired humidity\nThe desired indoor humidity %", "description": "The desired indoor humidity %", "details": {"Slug": "desired_humidity", "Filter code": "Ecobee.indoorHumidityBelow.DesiredHumidity", "Type": "String", "Example": "55"}}, {"section": "Ingredients", "title": "Desired indoor cool temperature\nThe desired indoor cool temperature", "description": "The desired indoor cool temperature", "details": {"Slug": "desired_indoor_cool_temperature", "Filter code": "Ecobee.indoorHumidityBelow.DesiredIndoorCoolTemperature", "Type": "String", "Example": "70"}}, {"section": "Ingredients", "title": "Desired indoor heat temperature\nThe desired indoor heat temperature", "description": "The desired indoor heat temperature", "details": {"Slug": "desired_indoor_heat_temperature", "Filter code": "Ecobee.indoorHumidityBelow.DesiredIndoorHeatTemperature", "Type": "String", "Example": "70"}}, {"section": "Ingredients", "title": "Indoor temperature\nThe current indoor temperature as measured by your ecobee", "description": "The current indoor temperature as measured by your ecobee", "details": {"Slug": "indoor_temperature", "Filter code": "Ecobee.indoorHumidityBelow.IndoorTemperature", "Type": "String", "Example": "74"}}], "action_channel": "myUplink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myuplink.boost-ventilation", "Filter code method": "Myuplink.boostVentilation.skip(string?: reason)", "Runtime method": "runAction(\"myuplink.boost-ventilation\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Ecobee.indoorHumidityBelow.IndoorHumidity >= parseInt(Ecobee.indoorHumidityBelow.indoor_humidity_threshold)) {\n  Myuplink.boostVentilation(\"High indoor humidity detected (\" + Ecobee.indoorHumidityBelow.IndoorHumidity + \"%)\")\n} else {\n  // No action needed\n}", "intent": "Check if current humidity level rises too high, boost ventilation if necessary."}
{"original_description": "When your smanos system is armed to stay (home) mode, set the thermostat to home comfort setting.", "trigger_channel": "smanos connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smanos.tg_arm_stay"}, "trigger_details": [{"section": "Trigger fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_time", "Filter code": "Smanos.tgArmStay.CreatedTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nDevice Name", "description": "Device Name", "details": {"Slug": "device_name", "Filter code": "Smanos.tgArmStay.DeviceName", "Type": "String", "Example": "device name"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_next_transition", "Filter code method": "Ecobee.holdNextTransition.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_next_transition\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Smanos.tgArmStay.which_system === \"Armed\") {\n  Ecobee.holdNextTransition.skip(\"Not Armed\");\n}\nelse {\n  var thermostat = Smanos.tgArmStay.thermostat;\n  var desiredTemperature = Smanos.tgArmStay.desired_temperature;\n  Ecobee.holdNextTransition.runAction({\n    \"thermostat\": thermostat,\n    \"desiredTemperature\": desiredTemperature\n  });\n}", "intent": "When the Smanos system is armed to stay (home) mode, set the Ecobee thermostat to the home comfort setting."}
{"original_description": "Whenever the price hits my threshold, set my ecobee thermostat comfort profile.\n\nThis can be used with other applets to change your ecobee thermostat to a specific Comfort Profile whenever the price goes above of below your set threshold.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.climate_hours", "Filter code method": "Ecobee.climateHours.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.climate_hours\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Hold hours\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of Hours", "Helper text": "The number of hours to hold for", "Slug": "hold_hours", "Required": "true", "Can have default value": "true", "Filter code method": "Ecobee.climateHours.setHold Hours(string: hold_hours)"}}, {"section": "Action fields", "title": "Comfort profile\nDropdown list", "description": "Dropdown list", "details": {"Label": "Comfort Profile", "Helper text": "Select which comfort profile to use for the hold.", "Slug": "comfort_profile", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (ComEd.averagePriceChange.AveragePrice > parseFloat(Trigger.which_price_threshold)) {\n  if (Trigger.trigger_type === \"Exceeds\") {\n    Ecobee.climateHours.setHoldHours(Trigger.how_often_to_trigger).setComfortProfile(Trigger.comfort_profile)\n  } else if (Trigger.trigger_type === \"Below\") {\n    Ecobee.climateHours.skip(\"Price below threshold\")\n  }\n} else if (ComEd.averagePriceChange.AveragePrice < parseFloat(Trigger.which_price_threshold)) {\n  if (Trigger.trigger_type === \"Exceeds\") {\n    Ecobee.climateHours.skip(\"Price exceeds threshold\")\n  } else if (Trigger.trigger_type === \"Below\") {\n    Ecobee.climateHours.setHoldHours(Trigger.how_often_to_trigger).setComfortProfile(Trigger.comfort_profile)\n  }\n}", "intent": "Whenever the ComEd average price change exceeds or goes under my set threshold, I want to set my ecobee thermostat comfort profile."}
{"original_description": "What's Elon up to? Every Friday you'll get a digest of the latest NY Times reporting on SpaceX. 🖖", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "// Check if it's Friday\nvar dayOfWeek = Meta.currentUserTime.day()\nif (dayOfWeek != 5) { \n  EmailDigest.sendWeeklyEmail.skip(\"Not a Friday\")\n}\n\n// Get the search term from trigger fields\nvar searchTerm = trigger_term\n\n// Filter articles by search term and section\nvar filteredArticles = Nytimes.newArticleMatchingSearch.filter({\n  \"term\": searchTerm,\n  \"section\": \"Space Exploration\"\n})\n\n// Check if there are any matching articles\nif (filteredArticles.length == 0) { \n  EmailDigest.sendWeeklyEmail.skip(\"No matching articles found\")\n}\n\n// Extract relevant article information\nvar articleTitle = filteredArticles[0].Title\nvar author = filteredArticles[0].Author\nvar blurb = filteredArticles[0].Blurb\nvar articleUrl = filteredArticles[0].ArticleUrl\nvar imageUrl = filteredArticles[0].ImageUrl\nvar source = filteredArticles[0].Source\n\n// Create the email message\nvar title = \"New Article: \" + articleTitle\nvar message = \"<p>\" + blurb + \"</p>\"\nif (imageUrl) {\n  message += \"<br><img src='\" + imageUrl + \"'/>\"\n}\nmessage += \"<br><a href='\" + articleUrl + \"'>Read the full article</a>\"\n\n// Send the weekly email\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\")\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\")\nEmailDigest.sendWeeklyEmail.setTitle(title)\nEmailDigest.sendWeeklyEmail.setMessage(message)", "intent": "This automaton sends a weekly email digest of new articles from The New York Times on Fridays, filtering by specific terms and sections."}
{"original_description": "This Applet will pause your Roomba® when answering a call.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.pause_robot", "Filter code method": "Irobot.pauseRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.pause_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var CallLength = AndroidPhone.receiveAPhoneCall.CallLength\nif (AndroidPhone.receiveAPhoneCall.CallLength !== \"NaN\" && parseInt(CallLength) > 30) {\n  Irobot.pauseRobot.skip(\"Call duration exceeded 30 seconds\")\n} else if (!Irobot.isPaused()) {\n  Irobot.pauseRobot()\n}", "intent": "When a call is received on an Android device, pause the iRobot Roomba if it's not already paused. If the user answers the call and the call length exceeds 30 seconds, skip pausing the robot."}
{"original_description": "Capture all those great \"on the fly\" blog ideas! Just jot down your note to the notebook of your choice and it'll be in your Wordpress \"Drafts\" folder when you have time to sit down, refine, and publish. ", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_post_wp", "Filter code method": "Wordpress.createPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setBody(string: body)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setPost Status(string: post_status)"}}], "filter_code": "var notebook = Evernote.newNoteInNotebook.Notebook\nif (Evernote.newNoteInNotebook.Title !== \"\" && Evernote.newNoteInNotebook.BodyHTML !== \"\") {\n  Wordpress.createPostWp.setTitle(Evernote.newNoteInNotebook.Title)\n  Wordpress.createPostWp.setBody(Evernote.newNoteInNotebook.BodyHTML)\n  if (Evernote.newNoteInNotebook.PublicUrl !== \"\") {\n    // Skip this step, we don't have a use case for creating a post from the public URL\n  }\n  if (Evernote.newNoteInNotebook.Tags !== \"\") {\n    Wordpress.createPostWp.setTags(Evernote.newNoteInNotebook.Tags)\n  }\n  var createdAt = Evernote.newNoteInNotebook.CreatedAt\n  // Create the post with optional parameters\n  if (notebook === \"Some notebook\") {\n    Wordpress.createPostWp.skip(\"Note from a specific notebook\")\n  } else {\n    Wordpress.createPostWp.run()\n  }\n} else {\n  Wordprress.createPostWp.skip(\"No title and body found in note\")\n}", "intent": "Capture Evernote notes and create a new WordPress blog post based on the note title, body, public URL, tags, and created date."}
{"original_description": "When a SmartThings device is turned off, turn on/off 1-channel switch or plug.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.Device === \"OFF\") {\n  var SwitchName = SmartthingsV2.switchedOnSmartthings.SwitchName\n  var OnOffActQuery = Ewelink.lightSwitchAction.setOnoffActQuery(\"Turn off\")\n  Ewelink.lightSwitchAction.skip(\"Device is turned off\")\n} else if (SmartthingsV2.switchedOnSmartthings.Device === \"ON\") {\n  var SwitchName = SmartthingsV2.switchedOnSmartthings.SwitchName\n  var OnOffActQuery = Ewelink.lightSwitchAction.setOnoffActQuery(\"Turn on\")\n  Domovea.shadeClose.skip(\"Device is already turned on\")\n}", "intent": "When a SmartThings device is turned off, turn on/off 1-channel switch or plug."}
{"original_description": "When a SmartThings device is turned on, turn on/off an eWeLink Support 1-channel switch.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt.indexOf(\"today\") > -1) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"turn_on\")\n} else if (SmartthingsV2.switchedOnSmartthings.SwitchedOnAt.indexOf(\"yesterday\") > -1) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"turn_off\")\n} else {\n  Ewelink.lightSwitchAction.skip(\"Not today or yesterday, skipping action\")\n}", "intent": "When a SmartThings device is turned on, turn on/off an eWeLink Support 1-channel switch based on the switched-on date and time."}
{"original_description": "If you turn on your hood, your Philips Hue lights will turn on.", "trigger_channel": "Home Connect Hood", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_hood.hood_power_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcHood.hoodPowerOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (HcHood.hoodPowerOn.CreatedAt !== null) {\n  if (Hue.turnOffAllHue.reason === undefined || Hue.turnOffAllHue.reason === \"\") {\n    Hue.turnOffAllHue(skip(\"No reason provided\"))\n  } else {\n    Hue.turnOffAllHue()\n  }\n}", "intent": "If the Home Connect Hood is turned on, turn off all Philips Hue lights."}
{"original_description": "Turn off your Philips Hue lights when your mui board turned on night mode.", "trigger_channel": "mui", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "muilab.nightmode_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Mui\nDropdown list", "description": "Dropdown list", "details": {"Label": "mui board", "Helper text": "select target mui board", "Slug": "mui", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Muilab.nightmodeOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Mui name\nname of the mui board which turned on night mode", "description": "name of the mui board which turned on night mode", "details": {"Slug": "mui_name", "Filter code": "Muilab.nightmodeOn.MuiName", "Type": "String", "Example": "living room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Muilab.nightmodeOn.CreatedAt >= new Date('2020-07-08T04:17:06+05:00').getTime()) {\n  var muiName = Muilab.nightmodeOn.MuiName;\n  if (muiName === \"\") {\n    Hue.turnOffAllHue.skip(\"No Mui board name provided\")\n  } else {\n    Hue.turnOffAllHue();\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Mui board night mode not activated\")\n}", "intent": "Automate Philips Hue lights to turn off when the Mui board's night mode is activated."}
{"original_description": "Track every time your WeMo switch has been turned on, into a Google Spreadsheet.", "trigger_channel": "WeMo Insight Switch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTON_N"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which insight switch?", "Helper text": "Name of Your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switch name\nName of the WeMo switch.", "description": "Name of the WeMo switch.", "details": {"Slug": "device_name", "Filter code": "WemoInsightSwitch.attributeINSIGHTONN.SwitchName", "Type": "String", "Example": "Kitchen switch"}}, {"section": "Ingredients", "title": "Switched on at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoInsightSwitch.attributeINSIGHTONN.SwitchedOnAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "var filename = \"IFTTT\" // Set default filename\nif (action_details[0].details.Required === true) {\n  filename = action_details[0].details.Filter_code_method(action_details[0].details.Value)\n}\nvar formatted_row = \"\"\nfor (const ingredient of trigger_details) {\n  switch (ingredient.details.Slug) {\n    case \"device_name\":\n      formatted_row += `${ingredient.details.Label}|||`\n      break\n    case \"created_at\":\n      formatted_row += `${ingredient.details.Type} ${ingredient.details.Filter_code}|||`\n      break\n    default:\n      skip(\"Unknown ingredient\")\n  }\n}\nif (formatted_row.endsWith(\"|||\")) {\n  formatted_row = formatted_row.slice(0, -3)\n}\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(filename).setFormattedRow(formatted_row)", "intent": "Track the WeMo switch on/off events and append them to a Google Spreadsheet."}
{"original_description": "Dim the lights connected to your WeMo Dimmer when you turn off your WeMo Smart Plug.", "trigger_channel": "WeMo Smart Plug", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_switch.attribute_SOCKETON_N"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Helper text": "Name of Your WeMo switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoSwitch.attributeSOCKETONN.SwitchedOnAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Switch name\nName of the WeMo switch.", "description": "Name of the WeMo switch.", "details": {"Slug": "device_name", "Filter code": "WemoSwitch.attributeSOCKETONN.SwitchName", "Type": "String", "Example": "Kitchen switch"}}], "action_channel": "Wemo Dimmer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wemo_dimmer.attribute_dimmerBrightnessChangeDiscrete", "Filter code method": "WemoDimmer.attributeDimmerBrightnessChangeDiscrete.skip(string?: reason)", "Runtime method": "runAction(\"wemo_dimmer.attribute_dimmerBrightnessChangeDiscrete\", {})"}, "action_details": [{"section": "Action fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Dimmer?", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Subtype\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness Level", "Helper text": "Brightness Level", "Slug": "subType", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (WemoSwitch.attributeSOCKETONN.SwitchedOnAt !== null) {\n  // Check if the plug is still on\n  if (WemoSwitch.attributeSOCKETONN.SwitchedOnAt > Date.now()) {\n    WemoDimmer.attributeDimmerBrightnessChangeDiscrete.skip(\"Plug not turned off\")\n  } else {\n    var dimmerMacaddress = \"\";\n    for (var i in trigger_details) {\n      if (trigger_details[i].details.Label === \"Which switch?\") {\n        dimmerMacaddress = trigger_details[i].details.Value\n      }\n    }\n    WemoDimmer.attribute_dimmerBrightnessChangeDiscrete(dimmerMacaddress, 20).skip(\"No action required\")\n  }\n}", "intent": "Automatically dim the WeMo Dimmer when the corresponding WeMo Smart Plug is turned off."}
{"original_description": "Turn on your Philips Hue lights when your mui board turned off night mode.", "trigger_channel": "mui", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "muilab.nightmode_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Mui\nDropdown list", "description": "Dropdown list", "details": {"Label": "mui board", "Helper text": "select target mui board", "Slug": "mui", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Muilab.nightmodeOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Mui name\nname of the mui board which turned off night mode", "description": "name of the mui board which turned off night mode", "details": {"Slug": "mui_name", "Filter code": "Muilab.nightmodeOff.MuiName", "Type": "String", "Example": "living room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Muilab.nightmodeOff.MuiName === 'mui') {\n  Hue.turnOffAllHue.skip('No default light selection');\n} else {\n  const Lights = JSON.parse([[{\"name\": \"All Lights\"}]]);\n  Hue.turnOffAllHue(Lights);\n}", "intent": "When the mui board turns off night mode, turn on all Philips Hue lights."}
{"original_description": "When the smanos security system is armed, your Philip Hue lights will be turned off automatically.", "trigger_channel": "smanos connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smanos.tg_arm_away"}, "trigger_details": [{"section": "Trigger fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created time\ncreated time", "description": "created time", "details": {"Slug": "created_time", "Filter code": "Smanos.tgArmAway.CreatedTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\ndevice name", "description": "device name", "details": {"Slug": "device_name", "Filter code": "Smanos.tgArmAway.DeviceName", "Type": "String", "Example": "device name"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Smanos.tgArmAway.which_system === 'away') {\n  var deviceName = Smanos.tgArmAway.device_name;\n  if (deviceName.includes('office')) {\n    Hue.turnOffAllHue.skip(\"Office is not allowed\")\n  } else {\n    Hue.turnOffAllHue()\n  }\n}", "intent": "When the Smanos security system is armed, turn off all Philips Hue lights automatically."}
{"original_description": "Save energy by making sure all lights are turned off when thermostat mode is set to Away.", "trigger_channel": "Warmup Smart Thermostat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "warmup_smart_thermostat.away"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nDropdown list", "description": "Dropdown list", "details": {"Label": "Location", "Slug": "location", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WarmupSmartThermostat.away.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ""}
{"original_description": "Selected Lexi group lights will be turned off daily at 12:00 am.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.groupTurnOn", "Filter code method": "Lexi.groupTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"lexi.groupTurnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Group List", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}], "filter_code": "// Get current time\nvar CurrentTime = DateAndTime.everyDayAt.CheckTime;\n// Check if it's 12:00 am\nif (CurrentTime === \"August 23, 2010 at 12:00AM\") {\n  // Turn off the lights\n  Lexi.groupTurnOn.skip(\"Lights turned off as scheduled\");\n}", "intent": "This automation will turn off selected Lexi group lights daily at 12:00 am, based on the specified time and conditions."}
{"original_description": "All Lexi lights will be turned off daily at 12:00 am", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceTurnOnAll", "Filter code method": "Lexi.deviceTurnOnAll.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceTurnOnAll\", {})"}, "action_details": [{"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temp", "Required": "true", "Can have default value": "true"}}], "filter_code": "var Hour = DateAndTime.everyDayAt.CheckTime.hour()\nif (Hour >= 24) {\n  Lexi.deviceTurnOnAll.skip(\"Not midnight\")\n} else {\n  Lexi.deviceTurnOnAll.skip(\"Not past midnight\")\n}", "intent": "Daily at midnight, check if it's time to turn off all Lexi lights. If it is past 12:00 am, skip the action."}
