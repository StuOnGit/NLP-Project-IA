{"original_description": "Get your home to automatically light up when the sun goes down.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar tempCelsius = Weather.sunSets.TempCelsius;\nif (sunsetHour >= 16 && sunsetHour <= 20 && tempCelsius > 15) {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the sunset at my location is between 16:00 and 20:00 and the current temperature in degrees Celsius is above 15, turn on all Philips Hue lights in the living room."}
{"original_description": "On, off or toggle Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Yeelight.onOff.setOnOffOption(\"toggle\");\n} else {\n  Yeelight.onOff.skip(\"Gesture or device does not match.\");\n}", "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, toggle the Yeelight device."}
{"original_description": "See what impacts how often you bookmark items", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Pocket.newItemAddedPocket.Tags.includes(\"article\") && Pocket.newItemAddedPocket.Title.toLowerCase().includes(\"productivity\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Pocket\")\n    .setDataType(\"reading\")\n    .setDatetime(Pocket.newItemAddedPocket.AddedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking productivity articles saved to Pocket\");\n} else {\n  Welltory.sendEvent.skip(\"Does not match the criteria.\");\n}", "intent": "When a new item is added to Pocket with the tag \"article\" and the title contains the word \"productivity\", send an event to Welltory with the data source set to \"Pocket\", the data type set to \"reading\", the datetime set to the time the item was added, the value set to 1, and a comment describing the applet as \"Tracking productivity articles saved to Pocket\"."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights ON or OFF.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  var currentHueStatus = Hue.getAllHueStatus();\n  if (currentHueStatus.every(function(light) { return light.on === false; })) {\n    Hue.toggleAllHue.setLights(\"all\").skip(\"All lights are already off\");\n  } else if (currentHueStatus.every(function(light) { return light.on === true; })) {\n    Hue.toggleAllHue.skip(\"All lights are already on\");\n  } else {\n    var allOn = currentHueStatus.every(function(light) { return light.on === true; });\n    var allOff = currentHueStatus.every(function(light) { return light.on === false; });\n    if (!allOn && !allOff) {\n      Hue.toggleAllHue.skip(\"Not all lights are in the same state\");\n    } else {\n      Hue.toggleAllHue.skip();\n    }\n  }\n}", "intent": "When the \"iH\" button on the iHome device is pressed, either short or long press, turn all Philips Hue lights ON if they are currently OFF, or turn them OFF if they are currently ON."}
{"original_description": "See what impacts the number of your notes", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Evernote.newNoteInNotebook.notebook === \"Personal Notes\" && Evernote.newNoteInNotebook.Tags.includes(\"important\") && Evernote.newNoteInNotebook.Title.includes(\"meeting\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Evernote\")\n    .setDataType(\"Notes\")\n    .setDatetime(Evernote.newNoteInNotebook.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"New important meeting note added\");\n} else {\n  Welltory.sendEvent.skip(\"Note does not match the specified criteria.\");\n}", "intent": "When a new note is created in my Evernote notebook named \"Personal Notes\" with the tag \"important\" and the title contains the word \"meeting\", send an event to Welltory with the data source set to \"Evernote\", data type set to \"Notes\", datetime set to the note's creation time, value set to 1, and comment set to \"New important meeting note added\"."}
{"original_description": "When the UV Index is between 3 to 5 outside, it is considered a \"moderate\" risk of harm from unprotected sun exposure. Be prepared and wear protection!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_humidity_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Humidity\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Humidity (%)", "Slug": "humidity", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentHumidityRisesAbove.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentHumidityRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentHumidityRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentHumidityRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentHumidityRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentHumidityRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "if (Weather.currentHumidityRisesAbove.Humidity > 60 && Weather.currentHumidityRisesAbove.TempCelsius >= 18 && Weather.currentHumidityRisesAbove.TempCelsius <= 22 && Weather.currentHumidityRisesAbove.location === \"New York\") {\n  IfNotifications.sendRichNotification\n    .setMessage(\"Humidity is high, consider taking necessary precautions\")\n    .setTitle(\"Weather Alert\")\n    .setLinkUrl(\"http://www.weather.com/weather/5-day/GMXX1273\")\n    .setImageUrl(\"https://example.com/high-humidity-image.jpg\");\n} else {\n  IfNotifications.sendRichNotification.skip(\"Conditions not met.\");\n}", "intent": "When the humidity level is above 60% and the temperature is between 18°C and 22°C in New York, send a rich notification with the title \"Weather Alert\", message \"Humidity is high, consider taking necessary precautions\", link URL \"http://www.weather.com/weather/5-day/GMXX1273\", and image URL \"https://example.com/high-humidity-image.jpg\" to notify users to be prepared."}
{"original_description": "Find out how your videos correlate with other lifestyle events", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_video_by_you_tagged_instagram"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newVideoByYouTaggedInstagram.Caption", "Type": "String", "Example": "A cool video #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the tag", "description": "The caption without the tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CaptionNoTag", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.newVideoByYouTaggedInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newVideoByYouTaggedInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newVideoByYouTaggedInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"#MorningMotivation\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Social Media\")\n    .setDataType(\"Engagement\")\n    .setDatetime(Instagram.newVideoByYouTaggedInstagram.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"New morning motivation video posted\");\n} else {\n  Welltory.sendEvent.skip(\"The video does not contain the #MorningMotivation tag.\");\n}", "intent": "When a new video is posted on Instagram with the tag #MorningMotivation, send an event to Welltory with the data source as \"Social Media\", data type as \"Engagement\", datetime set to the time the video was created, value as 1, and comment as \"New morning motivation video posted\"."}
{"original_description": "Turn on or off your BG Home device when the sun sets in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "BG Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "BG_HOME.powerState", "Filter code method": "BGHOME.powerState.skip(string?: reason)", "Runtime method": "runAction(\"BG_HOME.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On of off?", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "BGHOME.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunSets.TempCelsius > 18) {\n  BGHOME.powerState.setPowerControlChangePowerStateString(\"On\");\n  BGHOME.powerState.skip(\"Turning on Living Room Lamp in New York as sun sets and temperature is above 18°C.\");\n} else {\n  BGHOME.powerState.skip(\"Temperature not above 18°C, not turning on Living Room Lamp.\");\n}", "intent": "Turn on the Living Room Lamp device when the sun sets in New York, and the current temperature is above 18°C."}
{"original_description": "When your Arlo detects motion turn on a My Leviton Light", "trigger_channel": "Arlo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "arlo.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "device_name", "Filter code": "Arlo.motion.DeviceName", "Type": "String", "Example": "48B14C740AD5E"}}, {"section": "Ingredients", "title": "Detection time\nDate and time of motion event detection.", "description": "Date and time of motion event detection.", "details": {"Slug": "detected_at", "Filter code": "Arlo.motion.DetectionTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.toggle_switch", "Filter code method": "MyLeviton.toggleSwitch.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.toggle_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power\nDropdown list", "description": "Dropdown list", "details": {"Label": "Would you like to toggle the device, or turn it on or off?", "Slug": "power", "Required": "false", "Can have default value": "true", "Filter code method": "MyLeviton.toggleSwitch.setPower(string: power)"}}], "filter_code": "if (Arlo.motion.DeviceName === \"48B14C740AD5E\") {\n  MyLeviton.toggleSwitch.setPower(\"on\");\n  MyLeviton.toggleSwitch.setDeviceName(\"Living Room Lamp\");\n} else {\n  MyLeviton.toggleSwitch.skip(\"Motion not detected by device 48B14C740AD5E.\");\n}", "intent": "When motion is detected by the Arlo device named 48B14C740AD5E at any time, turn on the My Leviton Light device named Living Room Lamp."}
{"original_description": "Press the iH button on your iHome device to turn ON Lifx Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_on", "Filter code method": "Lifx.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade in duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade in duration", "Helper text": "How long should it take for the lights to fade in.", "Slug": "fade_in_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not available? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; fade_in_duration: 12&quot; for red at 30% brightness, 12 second fade in. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOn.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Lifx.turnOn.setFadeInDuration(5);\n  Lifx.turnOn.setColor(\"white\");\n  Lifx.turnOn.setBrightness(0.8);\n}", "intent": "When the \"iH\" button on your iHome device is pressed, turn on all Lifx Lights with a fade-in duration of 5 seconds and set the brightness to 80%, using the color white."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights ON.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  if (IhomeEnhance.enhanceButton.press === \"Short press\" || IhomeEnhance.enhanceButton.press === \"Long press\") {\n    Hue.turnOnAllHue();\n  } else {\n    Hue.turnOffAllHue.skip(\"Only short or long presses trigger this action.\");\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Button name does not match 'iH'.\");\n}", "intent": "When the \"iH\" button on my iHome device is pressed, either as a short or long press, turn all Philips Hue Lights ON."}
{"original_description": "Checks the Weather Underground service for the current UV Index based on your threshold, and then sets the Aurora to a color you choose.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_humidity_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Humidity\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Humidity (%)", "Slug": "humidity", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentHumidityRisesAbove.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentHumidityRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentHumidityRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentHumidityRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentHumidityRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentHumidityRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (Weather.currentHumidityRisesAbove.Humidity > 80 && Weather.currentHumidityRisesAbove.TempCelsius > 18 && Weather.currentHumidityRisesAbove.location === \"New York\") {\n  Nanoleaf.changeColorRequest.setMyDevices(\"living room Aurora\");\n  Nanoleaf.changeColorRequest.setValue(\"#032B44\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Conditions not met.\");\n}", "intent": "When the humidity level rises above 80% in New York, and the current temperature is above 18°C, set the living room Aurora to a deep blue color (#032B44)."}
{"original_description": "Automatically turn your lights on at sunset by overriding your on / off zone.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Genius Hub", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "genius_hub.zone_override_on_off", "Filter code method": "GeniusHub.zoneOverrideOnOff.skip(string?: reason)", "Runtime method": "runAction(\"genius_hub.zone_override_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Slug": "temp", "Required": "true", "Can have default value": "true", "Filter code method": "GeniusHub.zoneOverrideOnOff.setTemp(string: temp)"}}, {"section": "Action fields", "title": "Duration\nText input > Other", "description": "Text input > Other", "details": {"Label": "Duration", "Helper text": "How many minutes do you want to override for?", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "GeniusHub.zoneOverrideOnOff.setDuration(string: duration)"}}], "filter_code": "if (Weather.sunSets.SunsetAt !== null) {\n  GeniusHub.zoneOverrideOnOff.setZone(\"Living Room\");\n  GeniusHub.zoneOverrideOnOff.setTemp(\"on\");\n  GeniusHub.zoneOverrideOnOff.setDuration(\"120\");\n  GeniusHub.zoneOverrideOnOff.skip(null);\n}", "intent": "Turn on the lights in the Living Room zone at sunset, overriding the current temperature setting to 72 degrees Fahrenheit for a duration of 120 minutes."}
{"original_description": "Turn on neoplug at sunset", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Heatmiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatmiser.turn_plug_on", "Filter code method": "Heatmiser.turnPlugOn.skip(string?: reason)", "Runtime method": "runAction(\"heatmiser.turn_plug_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Which neo plug\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which neoPlug?", "Slug": "which_neo_plug", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  Heatmiser.turnPlugOn.setWhichNeoPlug(\"Living Room\");\n} else {\n  Heatmiser.turnPlugOn.skip(\"Temperature not above 18 degrees Celsius or weather condition is not Sunny.\");\n}", "intent": "Turn on the Living Room neoPlug at sunset when the temperature is above 18 degrees Celsius and the weather condition is Sunny."}
{"original_description": "Receive recurrent notifications on all Triby", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.send_an_image_to_every_triby", "Filter code method": "InvoxiaTriby.sendAnImageToEveryTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.send_an_image_to_every_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image URL?", "Helper text": "This has to be the URL of an image file (png, jpeg, bmp).", "Slug": "image_url", "Required": "true", "Can have default value": "true", "Filter code method": "InvoxiaTriby.sendAnImageToEveryTriby.setImage Url(string: image_url)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() !== 8) {\n  InvoxiaTriby.sendAnImageToEveryTriby.skip(\"Not 08:00\");\n} else {\n  InvoxiaTriby.sendAnImageToEveryTriby.setImageUrl(\"https://example.com/image.png\");\n}", "intent": "Send a notification with the image from https://example.com/image.png to all Triby devices every weekday at 08:00."}
{"original_description": "Automatically turn on your lights to deter intruders, welcome you home or light the way during a midnight fridge raid. If you want to have your Philips hue lights turn on when motion is detected, try this!", "trigger_channel": "mydlink", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mydlink.motionDetection"}, "trigger_details": [{"section": "Trigger fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Mydlink.motionDetection.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe device reporting the detection.", "description": "The device reporting the detection.", "details": {"Slug": "device_name", "Filter code": "Mydlink.motionDetection.DeviceName", "Type": "String", "Example": "Living room camera"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(Mydlink.motionDetection.CreatedAt).getHours();\nif (Mydlink.motionDetection.DeviceName === \"Living room camera\" && (hour >= 18 || hour < 6)) {\n  PhilipsHue.turnOn Lights(\"Living room lights\");\n} else {\n  PhilipsHue.turnOnLights.skip(\"Not the living room camera or outside of desired hours.\");\n}", "intent": "Turn on the Philips Hue living room lights when motion is detected by the Mydlink Living room camera between 18:00 and 06:00."}
{"original_description": "Turn on a specified product when the current outside temperature drops below a set temperature.\n", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_on", "Filter code method": "Idevices.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 40 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Idevices.turnDeviceOn.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnDeviceOn.skip(\"Conditions not met to turn on the Living Room Lamp.\");\n}", "intent": "Turn on the Living Room Lamp when the outside temperature in New York drops below 40°F."}
{"original_description": "Use your local weather to determine when it's getting hot and turn on your A/C with Ambi Climate.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_mode_comfort", "Filter code method": "Ambiclimate.deviceModeComfort.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_mode_comfort\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 85 && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\" && Weather.currentTemperatureDropsBelow.location === \"New York City\") {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room A/C\");\n} else {\n  Ambiclimate.deviceModeComfort.skip(\"Conditions not met to turn on the A/C.\");\n}", "intent": "When the temperature in New York City exceeds 85 degrees Fahrenheit and the current weather condition is Sunny, turn on my Ambi Climate device named Living Room A/C to comfort mode."}
{"original_description": "This applet turns on your Yeelight when Withings Sleep detects that you get out of bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "var hour = new Date(WithingsSleep.bedout.DateandTime).getHours();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nvar deviceName = \"Living Room Lamp\";\n\nif (deviceUser === \"Tom\" && hour >= 7 && hour < 22) {\n  Yeelight.onOff.setDeviceId(deviceName);\n  Yeelight.onOff.setOnOffOption(\"on\");\n} else {\n  Yeelight.onOff.skip(\"Not Tom or outside of time range.\");\n}", "intent": "Turn on the Yeelight device named \"Living Room Lamp\" when Withings Sleep detects that Tom gets out of bed between 07:00 and 22:00."}
{"original_description": "This applet lets Apilio know that the sun has set at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt.getHours() === 19 && Weather.sunSets.SunsetAt.getMinutes() === 45 && Weather.sunSets.TempCelsius === \"18\") {\n  Apilio.booleanVariableToTrueUpdates.skip();\n} else {\n  Apilio.booleanVariableToTrueUpdates.setVariableIdentifier(\"Sunset_Notification\");\n}", "intent": "When the sunset at your location is at 7:45 PM and the current temperature is 18 degrees Celsius, update the Apilio variable \"Sunset_Notification\" to true."}
{"original_description": "This applet lets Apilio know that the sun has risen at your place, so that you can use this information in your Conditions and Logicblocks.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_true_updates", "Filter code method": "Apilio.booleanVariableToTrueUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_true_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to true?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt && Weather.sunRises.TempFahrenheit > 60) {\n  Apilio.booleanVariableToTrueUpdates.setVariableIdentifier(\"SunriseNotification\");\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Conditions not met for SunriseNotification.\");\n}", "intent": "When the sun rises at my location, which is New York City, and the current temperature is above 60 degrees Fahrenheit, update the Apilio variable \"SunriseNotification\" to true, so I can use this information in my Conditions and Logicblocks to trigger further actions."}
{"original_description": "Don't miss out on a good deal, get alerts directly to your phone any time a new game is on sale on Itch.io.", "trigger_channel": "Itch.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "itchio.recent_games_on_sales"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Itchio.recentGamesOnSales.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Itchio.recentGamesOnSales.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Itchio.recentGamesOnSales.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Itchio.recentGamesOnSales.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Itchio.recentGamesOnSales.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 20) {\n  if (Itchio.recentGamesOnSales.EntryTitle.indexOf(\"Launch Day!\") !== -1 && Itchio.recentGamesOnSales.EntryUrl.startsWith(\"http://itch.io/\")) {\n    var message = \"New game on sale: \" + Itchio.recentGamesOnSales.EntryTitle + \" \" + Itchio.recentGamesOnSales.EntryUrl;\n    IfNotifications.sendNotification.setMessage(message);\n  } else {\n    IfNotifications.sendNotification.skip(\"Game title or URL does not match.\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of notification hours (8 AM to 8 PM).\");\n}", "intent": "Send a notification to my phone with the message \"New game on sale: Launch Day! http://itch.io/game/123\" whenever a new game is posted on Itch.io with a title like \"Launch Day!\" and an entry URL starting with \"http://itch.io/\", between 08:00 and 20:00, so I can stay up-to-date with the latest deals."}
{"original_description": "Select a time to turn on your A/C everyday with Ambi Climate.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.device_mode_comfort", "Filter code method": "Ambiclimate.deviceModeComfort.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.device_mode_comfort\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which A/C?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"3:00 PM\";\nif (currentTime !== targetTime) {\n  Ambiclimate.deviceModeComfort.skip(\"Not the scheduled time\");\n} else {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room A/C\");\n}", "intent": "Turn on my Ambi Climate device, named \"Living Room A/C\", every day at 3:00 PM with the Ambi Climate app."}
{"original_description": "Run a shortcut in Futurehome turning ON multiple garden lights at Sunset", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Futurehome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "futurehome.run_shortcut", "Filter code method": "Futurehome.runShortcut.skip(string?: reason)", "Runtime method": "runAction(\"futurehome.run_shortcut\", {})"}, "action_details": [{"section": "Action fields", "title": "Shortcut\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "shortcut", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.Condition === \"Sunny\" && \n    Weather.sunSets.SunsetAt.getHours() === new Date().getHours() && \n    Weather.sunSets.SunsetAt.getMinutes() === new Date().getMinutes()) {\n  Futurehome.runShortcut.setShortcut(\"Garden Lights Sunset\");\n} else {\n  Futurehome.runShortcut.skip(\"Condition not met or not sunset time yet.\");\n}", "intent": "Turn ON the garden lights in Futurehome by running the 'Garden Lights Sunset' shortcut when the sunset time is reached at the location of 40.7128° N, 74.0060° W, as provided by Weather Underground, and the current weather condition is Sunny."}
{"original_description": "Configure a Nexia automation to turn on your Hue lights.", "trigger_channel": "Nexia", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "trigger_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nexia.nexiaAutomation.NexiaAutomationName === \"Good Morning\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n  Hue.turnOnHue.setLights(\"Living Room\");\n} else {\n  Hue.turnOnHue.skip(\"Nexia automation or house does not match.\");\n}", "intent": "Turn on the Living Room Hue lights when the Nexia automation named \"Good Morning\" is triggered in the house called \"Home\"."}
{"original_description": "Turn on heat pump to heat when outside temperature reaches the value you specify.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 50 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"HEAT\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setAdjustTemperature(72);\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature in New York is not below 50°F.\");\n}", "intent": "Turn on the heat pump to heat when the outside temperature in New York drops below 50°F, and set the operation mode to \"HEAT\" with a temperature of 72°F."}
{"original_description": "Turn on my Nanoleaf lights when my SmartThings sensor detects motion. Works best if the motion sensor is in the same room as the lights =)", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.any_new_motion_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Detected at\nThe date and time motion was sensed.", "description": "The date and time motion was sensed.", "details": {"Slug": "DetectedAt", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DetectedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.anyNewMotionSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_off_request", "Filter code method": "Nanoleaf.turnOffRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_off_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = SmartthingsV2.anyNewMotionSmartthings.DeviceName;\nif (deviceName === \"Living Room Sensor\" && hour >= 7 && hour < 22) {\n  // No action to skip, as the intent is to turn on the lights\n} else {\n  Nanoleaf.turnOnRequest.skip(\"Either not the Living Room Sensor or outside of desired hours (07:00-22:00).\");\n}", "intent": "Turn on my Nanoleaf lights in the living room when the SmartThings motion sensor named 'Living Room Sensor' detects motion between 07:00 and 22:00."}
{"original_description": "Find out how your photos correlate with other lifestyle events", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_photo_post"}, "trigger_details": [{"section": "Trigger fields", "title": "Tumblelog\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tumblelog", "Helper text": "Enter the tumblelog name that this trigger should fire for", "Slug": "tumblelog", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Post body text\nThe post's body (text only)", "description": "The post's body (text only)", "details": {"Slug": "post_body_text", "Filter code": "Tumblr.newPhotoPost.PostBodyText", "Type": "String", "Example": "This is the body of a post. Neat."}}, {"section": "Ingredients", "title": "Url\nThe post URL", "description": "The post URL", "details": {"Slug": "url", "Filter code": "Tumblr.newPhotoPost.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post body html\nThe post's body (HTML)", "description": "The post's body (HTML)", "details": {"Slug": "post_body_html", "Filter code": "Tumblr.newPhotoPost.PostBodyHtml", "Type": "String", "Example": "<figure class=\"tmblr-full\"><img src=\"https://64.media.tumblr.com/a-photo.jpg\"></figure><p>This is an HTML body.</p>"}}, {"section": "Ingredients", "title": "Thumbnail url\nThe thumbnail image URL for the post", "description": "The thumbnail image URL for the post", "details": {"Slug": "thumbnail_url", "Filter code": "Tumblr.newPhotoPost.ThumbnailUrl", "Type": "Web URL", "Example": "https://64.media.tumblr.com/a18c8063bf9d095d99f12b51d3dd1eda/57803298a6ae7123-0a/s1280x1920/fb2fce67958156e2231da15522ddb6850e1559ff.gifv"}}, {"section": "Ingredients", "title": "Full image url\nThe full size image URL", "description": "The full size image URL", "details": {"Slug": "full_image_url", "Filter code": "Tumblr.newPhotoPost.FullImageUrl", "Type": "Image URL", "Example": "https://64.media.tumblr.com/fd654c32f041cb02c757b5646c1cf9e1/a4c5782524284f82-d5/s1280x1920/8e97caae5a975889b3e170e42ea064b68410300a.jpg"}}, {"section": "Ingredients", "title": "Post tags\nThe post's tags", "description": "The post's tags", "details": {"Slug": "post_tags", "Filter code": "Tumblr.newPhotoPost.PostTags", "Type": "String", "Example": "Sky,Earth,Wind,Fire"}}, {"section": "Ingredients", "title": "Post\nThe ID of the post that has been created", "description": "The ID of the post that has been created", "details": {"Slug": "post_id", "Filter code": "Tumblr.newPhotoPost.PostId", "Type": "String", "Example": "123456789"}}, {"section": "Ingredients", "title": "Tumblelog\nThe name of the Tumblelog that published the post", "description": "The name of the Tumblelog that published the post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newPhotoPost.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newPhotoPost.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Tumblr.newPhotoPost.Tumblelog === \"staff\") {\n  Welltory.sendEvent\n    .setDataSource(\"Tumblr\")\n    .setDataType(\"Photo Post\")\n    .setDatetime(Tumblr.newPhotoPost.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking photo posts on staff Tumblelog\");\n} else {\n  Welltory.sendEvent.skip(\"Tumblelog is not 'staff'\");\n}", "intent": "When a new photo post is published on the \"staff\" Tumblelog, send an event to Welltory with the data source set to \"Tumblr\", the data type set to \"Photo Post\", the datetime set to the post's creation time (e.g., 2022-01-01T12:00:00+00:00), the value set to \"1\" for one entry per event, and a comment describing the applet as \"Tracking photo posts on staff Tumblelog\"."}
{"original_description": "Turn on or off your BG Home device when the sun rises in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "BG Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "BG_HOME.powerState", "Filter code method": "BGHOME.powerState.skip(string?: reason)", "Runtime method": "runAction(\"BG_HOME.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On of off?", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "BGHOME.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunRises.TempFahrenheit > 60) {\n  BGHOME.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  BGHOME.powerState.skip(\"Temperature is not above 60 degrees Fahrenheit.\");\n}", "intent": "Turn on the Living Room Light device when the sun rises in New York and the current temperature is above 60 degrees Fahrenheit."}
{"original_description": "If your SpotCam detect motion, then turn on your Philips Hue atuomatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOnAllHue.setLights(\"living room\");\n}", "intent": "When the SpotCam Ring named \"Front Door\" detects motion at any time, turn on all Philips Hue lights in the living room."}
{"original_description": "Turn on a specified product when the current outside temperate rises above a set temperature.\n", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_on", "Filter code method": "Idevices.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit <= 75) {\n  Idevices.turnDeviceOn.skip(\"Outside temperature is not above 75°F.\");\n} else {\n  var location = \"New York\";\n  var device = \"Kitchen Lamp\";\n  if (location === \"New York\" && device === \"Kitchen Lamp\") {\n    // No need to skip, let the action proceed\n  }\n}", "intent": "Turn on the Kitchen Lamp when the outside temperature in New York rises above 75°F."}
{"original_description": "When I unlock my SmartThings connected door lock, turn on my lights.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.unlocked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nThe date and time the lock was unlocked.", "description": "The date and time the lock was unlocked.", "details": {"Slug": "UnlockedAt", "Filter code": "SmartthingsV2.unlockedSmartthings.UnlockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.unlockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.unlockedSmartthings.DeviceName === \"Bedroom lock\") {\n  Kasa.turnOn();\n} else {\n  Kasa.turnOn.skip(\"Not the Bedroom lock\");\n}", "intent": "When the Bedroom lock is unlocked, turn on the Living Room Light."}
{"original_description": "Give yourself light when it's dark. Automatically turn on your light at sunset. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "AduroSmart", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "AduroSmart.turnondevice", "Filter code method": "AduroSmart.turnondevice.skip(string?: reason)", "Runtime method": "runAction(\"AduroSmart.turnondevice\", {})"}, "action_details": [{"section": "Action fields", "title": "Selectdevice\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Choose a device", "Slug": "selectdevice", "Required": "true", "Can have default value": "false"}}], "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar currentTempCelsius = Weather.sunSets.TempCelsius;\nif (sunsetHour >= 16 && sunsetHour <= 20 && currentTempCelsius < 15) {\n  // No need to skip, this is the condition to turn on the device\n} else {\n  AduroSmart.turnondevice.skip(\"Sunset time or temperature does not meet criteria.\");\n}", "intent": "Turn on the living room lamp when the sunset time is between 16:00 and 20:00 in New York, and the current temperature is below 15°C."}
{"original_description": "Turn on air conditioner to cool when outside temperature reaches the value you specify.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 75) {\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"Cool\");\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is not below 75 degrees Fahrenheit.\");\n}", "intent": "Turn on the air conditioner to cool when the outside temperature in New York drops below 75 degrees Fahrenheit."}
{"original_description": "Press the iH button on your iHome device to turn ON a Leviton room", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.toggle_room_on", "Filter code method": "MyLeviton.toggleRoomOn.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.toggle_room_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"Kitchen Lights\" && IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  MyLeviton.toggleRoomOn.setRoom(\"Living Room\");\n} else {\n  MyLeviton.toggleRoomOn.skip(\"Button name or press type does not match.\");\n}", "intent": "When the \"Kitchen Lights\" button on your iHome device is pressed with a long press, turn ON the \"Living Room\" in your Leviton room setup."}
{"original_description": "When the Litter-Robot is full, play a song on your Sonos speaker", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Litter robot is full\") {\n  Sonos.playFavorite.setFavorite(\"Relaxing Music\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Conditions not met.\");\n}", "intent": "When the Litter-Robot named \"My Litter Robot\" is full, as indicated by the \"Litter robot is full\" event type, play the Sonos favorite \"Relaxing Music\" in the room \"Living Room\" and include grouped rooms."}
{"original_description": "Turn on your Philips Hue when FIBARO device detects motion.", "trigger_channel": "FIBARO", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fibaro.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Fibaro.motionDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nID of device", "description": "ID of device", "details": {"Slug": "device_id", "Filter code": "Fibaro.motionDetected.DeviceId", "Type": "String", "Example": "0"}}, {"section": "Ingredients", "title": "Hub serial\nHub serial number", "description": "Hub serial number", "details": {"Slug": "hub_serial", "Filter code": "Fibaro.motionDetected.HubSerial", "Type": "String", "Example": "HC2-000000"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  if (Fibaro.motionDetected.DeviceId === \"12345\") {\n    PhilipsHue.turnOnLights.setLights(\"Living Room\");\n  } else {\n    PhilipsHue.turnOnLights.skip(\"Motion detected by wrong device.\");\n  }\n} else {\n  PhilipsHue.turnOnLights.skip(\"Outside of desired hours (7 AM to 10 PM).\");\n}", "intent": "Turn on the Philips Hue lights in the living room when the FIBARO motion sensor detects movement between 07:00 and 22:00, but only if the motion is detected by device ID 12345."}
{"original_description": "Turn on my charger when my phone battery drops below 15%", "trigger_channel": "Android Battery", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_battery.battery_low"}, "trigger_details": [{"section": "Ingredients", "title": "Battery percentage\nThe battery percentage of the device.", "description": "The battery percentage of the device.", "details": {"Slug": "BatteryPercentage", "Filter code": "AndroidBattery.batteryLow.BatteryPercentage", "Type": "String", "Example": "79"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the device's battery became low.", "description": "The time the device's battery became low.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidBattery.batteryLow.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the battery event occurred.", "description": "The name of the device on which the battery event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidBattery.batteryLow.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage < 15 && AndroidBattery.batteryLow.DeviceName === \"Google Pixel 7\") {\n  Ewelink.lightSwitchAction.setDevice(\"Living Room Charger\");\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Condition not met.\");\n}", "intent": "Turn on my eWeLink Smart Home device, \"Living Room Charger\", when the battery percentage of my Google Pixel 7 drops below 15%."}
{"original_description": "Text message notifications when your Air Conditioner publishes a trigger provides piece of mind if the AC is being tampered with.", "trigger_channel": "FUJITSU GENERAL LIMITED", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fujitsu_general_limited.whenAcIsOn"}, "trigger_details": [{"section": "Trigger fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Operation mode\nAC's operation mode value", "description": "AC's operation mode value", "details": {"Slug": "operation_mode_value", "Filter code": "FujitsuGeneralLimited.whenAcIsOn.OperationMode", "Type": "String", "Example": "2"}}, {"section": "Ingredients", "title": "Trigger finished at\nTrigger check finished-at time stamp.", "description": "Trigger check finished-at time stamp.", "details": {"Slug": "trigger_finished_at", "Filter code": "FujitsuGeneralLimited.whenAcIsOn.TriggerFinishedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nDevice Name", "description": "Device Name", "details": {"Slug": "device_name", "Filter code": "FujitsuGeneralLimited.whenAcIsOn.DeviceName", "Type": "String", "Example": "Living room AC"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "var phoneNumber = \"+1-555-1234\";\nvar deviceName = FujitsuGeneralLimited.whenAcIsOn.DeviceName;\nvar operationModeValue = FujitsuGeneralLimited.whenAcIsOn.OperationMode;\nvar triggerFinishedAt = new Date(FujitsuGeneralLimited.whenAcIsOn.TriggerFinishedAt);\nvar hours = triggerFinishedAt.getHours();\nvar message;\n\nif (deviceName === \"Living room AC\" && operationModeValue === \"2\" && hours >= 7 && hours <= 19) {\n  message = `The Living room AC has been turned on in auto mode at ${triggerFinishedAt.toLocaleTimeString()}`;\n  AndroidMessages.sendAMessage.setText(message);\n  AndroidMessages.sendAMessage.setPhoneNumber(phoneNumber);\n} else {\n  AndroidMessages.sendAMessage.skip(\"Conditions not met.\");\n}", "intent": "Send a text message to phone number +1-555-1234 when the Living room AC is turned on, with the message \"The Living room AC has been turned on in auto mode at 07:00\" if the operation mode value is 2 and the trigger check finished-at time stamp is between 07:00 and 19:00."}
{"original_description": "Play a specific song on your Android device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.play_song", "Filter code method": "AndroidDevice.playSong.skip(string?: reason)", "Runtime method": "runAction(\"android_device.play_song\", {})"}, "action_details": [{"section": "Action fields", "title": "Query\nText input > Title", "description": "Text input > Title", "details": {"Label": "Enter a song title", "Helper text": "e.g. Can You Feel The Love Tonight", "Slug": "query", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.playSong.setQuery(string: query)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  AndroidDevice.playSong.setQuery(\"Happy by Pharrell Williams\");\n} else {\n  AndroidDevice.playSong.skip(\"Wrong gesture. Expected 'Triple Knock'.\");\n}", "intent": "Play the song \"Happy\" by Pharrell Williams on my Android device when I perform a Triple Knock gesture on my Knocki device."}
{"original_description": "Automatically turn on your ceiling fan if weather's hot.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 82) {\n  Fansync.onOff.setDevice(\"Living Room Fan\");\n  Fansync.onOff.setOnOff(\"on\");\n}", "intent": "Turn on the Living Room Fan device through Fanimation when the temperature in New York rises above 82°F."}
{"original_description": "Set the time everyday when you would like the lights to automatically turn on. You'll also select the room where the lights should turn on.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Noon Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "noonhome.change_scene", "Filter code method": "Noonhome.changeScene.skip(string?: reason)", "Runtime method": "runAction(\"noonhome.change_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene in space\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scene in what room?", "Helper text": "Select the room and the scene to change.", "Slug": "scene_in_space", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 PM\";\nif (checkTime !== targetTime) {\n  Noonhome.changeScene.skip(\"Not the targeted time for turning on lights.\");\n} else {\n  Noonhome.changeScene.setSceneInSpace(\"Living Room\");\n}", "intent": "Turn on the lights in the Living Room every day at 7:00 PM."}
{"original_description": "Record your iotty activities by taking advantage of the Google Sheets feature.", "trigger_channel": "iotty Smart Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "iottysmarthome.device_on_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which iotty device was turned on, off, or pressed?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Light state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Check whether the iotty device is on, off, or has been pressed", "Slug": "light_state", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Source\nWas the device turned on manually, by iotty App, or by some smart home platforms?", "description": "Was the device turned on manually, by iotty App, or by some smart home platforms?", "details": {"Slug": "source", "Filter code": "Iottysmarthome.deviceOnOff.Source", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Device name\nThe name of your iotty device", "description": "The name of your iotty device", "details": {"Slug": "device_name", "Filter code": "Iottysmarthome.deviceOnOff.DeviceName", "Type": "String", "Example": "Living Room Light"}}, {"section": "Ingredients", "title": "Created at\nThe exact date and hour when the event happened", "description": "The exact date and hour when the event happened", "details": {"Slug": "created_at", "Filter code": "Iottysmarthome.deviceOnOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Light state\nThe state of the iotty Smart Switch light (on or off)", "description": "The state of the iotty Smart Switch light (on or off)", "details": {"Slug": "light_state", "Filter code": "Iottysmarthome.deviceOnOff.LightState", "Type": "String", "Example": "on"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Iottysmarthome.deviceOnOff.DeviceName === \"Living Room Light\") {\n  var row = Iottysmarthome.deviceOnOff.DeviceName + \"|||\" + Iottysmarthome.deviceOnOff.LightState + \"|||\" + Iottysmarthome.deviceOnOff.Source + \"|||\" + Iottysmarthome.deviceOnOff.CreatedAt;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"iotty_Smart_Home_Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(row);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Smart Home/Logs\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Device is not the Living Room Light\");\n}", "intent": "Record the activity of your Living Room Light iotty device in a Google Sheets spreadsheet named \"iotty_Smart_Home_Log\" whenever it is turned on or off, by appending a new row with the device name, light state, source of the action, and the exact date and time of the event, in the format \"Device Name|||Light State|||Source|||Created At\", to a spreadsheet located in the \"Smart Home/Logs\" folder."}
{"original_description": "Find correlations between your lifestyle and social media performance", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_like"}, "trigger_details": [{"section": "Ingredients", "title": "Url\nThe URL to the liked post", "description": "The URL to the liked post", "details": {"Slug": "url", "Filter code": "Tumblr.newLike.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post title\nThe post title", "description": "The post title", "details": {"Slug": "post_title", "Filter code": "Tumblr.newLike.PostTitle", "Type": "String", "Example": "My Nifty Post"}}, {"section": "Ingredients", "title": "Post\nThe post ID of the liked post", "description": "The post ID of the liked post", "details": {"Slug": "post_id", "Filter code": "Tumblr.newLike.PostId", "Type": "String", "Example": "659803739627094017"}}, {"section": "Ingredients", "title": "Tumblelog\nThe Tumblelog name of the liked post", "description": "The Tumblelog name of the liked post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newLike.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newLike.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Welltory", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "welltory.send_event", "Filter code method": "Welltory.sendEvent.skip(string?: reason)", "Runtime method": "runAction(\"welltory.send_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Data source\nDropdown list", "description": "Dropdown list", "details": {"Label": "What service are you tracking from?", "Helper text": "Choose Other if nothing matches", "Slug": "data_source", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Source(string: data_source)"}}, {"section": "Action fields", "title": "Data type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of data?", "Helper text": "Choose Other if nothing matches.", "Slug": "data_type", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setData Type(string: data_type)"}}, {"section": "Action fields", "title": "Datetime\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "When is the data sent?", "Helper text": "Add an ingredient of time which usually ends with -At}", "Slug": "datetime", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setDatetime(string: datetime)"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "How many entries per event?", "Helper text": "Enter 1 for one entry every time an event occurs", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setValue(string: value)"}}, {"section": "Action fields", "title": "Comment\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Briefly describe your applet (optional)", "Helper text": "It will help understand what your applet does if you chose Other service or data type", "Slug": "comment", "Required": "false", "Can have default value": "true", "Filter code method": "Welltory.sendEvent.setComment(string: comment)"}}], "filter_code": "if (Tumblr.newLike.PostTitle === \"My Morning Routine\" && Tumblr.newLike.Tumblelog === \"staff\") {\n  Welltory.sendEvent\n    .setData_source(\"Social Media\")\n    .setDataType(\"Engagement\")\n    .setDatetime(Tumblr.newLike.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking likes on Tumblr posts\");\n}", "intent": "When a new like is received on Tumblr for a post titled \"My Morning Routine\" from the tumblelog \"staff\", send an event to Welltory with the data source set to \"Social Media\", data type set to \"Engagement\", datetime set to the time the like was created, value set to 1, and a comment describing the applet as \"Tracking likes on Tumblr posts\"."}
{"original_description": "Automatically turn your remote on when the current temperature rises to a certain value", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AICO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aico.run_remote", "Filter code method": "Aico.runRemote.skip(string?: reason)", "Runtime method": "runAction(\"aico.run_remote\", {})"}, "action_details": [{"section": "Action fields", "title": "Key\nDropdown list", "description": "Dropdown list", "details": {"Label": "Key name", "Helper text": "Please select a key", "Slug": "key_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  Aico.runRemote.skip(\"Temperature is above 75°F, turning on living room remote.\");\n} else {\n  Aico.runRemote.setKeyId(\"living_room_remote\");\n}", "intent": "Turn on the living room remote when the temperature in New York rises above 75°F."}
{"original_description": "Turn on TP-LINK Kasa light when Swann Camera detects motion", "trigger_channel": "Swann Security", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "swannsecurity.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "On device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose device", "Helper text": "This trigger would fire when there is a motion detected on this device.", "Slug": "on_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Swannsecurity.motionDetected.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceId = \"Living Room\"; // Assuming this is how you identify your device in Kasa\nvar cameraDeviceId = \"Front Door\"; // Identify the specific Swann Camera device that detected motion\n\nif (hour >= 7 && hour <= 19 && Swannsecurity.motionDetected.OnDeviceId === cameraDeviceId) {\n  Kasa.turnOn.setDevice(deviceId);\n} else {\n  Kasa.turnOn.skip(\"Either outside of desired hours or wrong camera triggered.\");\n}", "intent": "Turn on the Living Room TP-LINK Kasa light when motion is detected by the Front Door Swann Camera between 07:00 and 19:00."}
{"original_description": "Turn Hue lights on/off ", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"Office Button\" && hour >= 7 && hour < 19) {\n  Hue.toggleAllHue.setLights(\"Living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Conditions not met.\");\n}", "intent": "Turn on the living room Hue lights when the Flic button named 'Office Button' is double-clicked between 07:00 and 19:00."}
{"original_description": "Boost my Ventilation when Carbon Dioxide levels are high on my Netatmo Weather Station", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.co2-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target carbon dioxide", "Helper text": "In parts per million (ppm)", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.co2RisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the CO2", "description": "This is the name of the Netamo device where you are reading the CO2", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.co2RisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target co2\nThe target CO2 in parts per million (ppm)", "description": "The target CO2 in parts per million (ppm)", "details": {"Slug": "TargetCO2", "Filter code": "Netatmo.co2RisesAbove.TargetCO2", "Type": "String", "Example": "1200"}}, {"section": "Ingredients", "title": "Measured co2\nThe measured CO2 in parts per million (ppm)", "description": "The measured CO2 in parts per million (ppm)", "details": {"Slug": "MeasuredCO2", "Filter code": "Netatmo.co2RisesAbove.MeasuredCO2", "Type": "String", "Example": "1204"}}], "action_channel": "myUplink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myuplink.boost-ventilation", "Filter code method": "Myuplink.boostVentilation.skip(string?: reason)", "Runtime method": "runAction(\"myuplink.boost-ventilation\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.co2RisesAbove.DeviceName === \"My Home - Indoor station\" && parseInt(Netatmo.co2RisesAbove.MeasuredCO2) > 1200) {\n  Myuplink.boostVentilation.setDevice(\"My Ventilation System\");\n} else {\n  Myuplink.boostVentilation.skip(\"Carbon dioxide levels are not high enough or the measurement is from a different device.\");\n}", "intent": "Boost the ventilation system using myUplink when the carbon dioxide level measured by my Netatmo Weather Station, specifically at \"My Home - Indoor station\", rises above 1200 parts per million."}
{"original_description": "Turn on a Smart Home Solution device when Motion is suspected.", "trigger_channel": "Aerial Technologies", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AerialTechnologies.motion_detection_motion_started"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event", "description": "Type of event", "details": {"Slug": "type", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Type", "Type": "String", "Example": "motionDetection.motion.started"}}, {"section": "Ingredients", "title": "Serial\nSerial", "description": "Serial", "details": {"Slug": "serial", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Serial", "Type": "String", "Example": "ABCDEF"}}, {"section": "Ingredients", "title": "Id\nEvent identifier", "description": "Event identifier", "details": {"Slug": "id", "Filter code": "AerialTechnologies.motionDetectionMotionStarted.Id", "Type": "String", "Example": "uuid"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_on", "Filter code method": "SmartHomeSolution.turnDeviceOn.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The device name", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventType = AerialTechnologies.motionDetectionMotionStarted.Type;\nvar serialNumber = AerialTechnologies.motionDetectionMotionStarted.Serial;\n\nif (hour >= 7 && hour < 19 && eventType === \"motionDetection.motion.started\" && serialNumber === \"ABCDEF\") {\n  SmartHomeSolution.turnDeviceOn.setDeviceAddress(\"Office address\");\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Conditions not met.\");\n}", "intent": "Turn on the Smart Home Solution device at the Office address when motion is suspected between 07:00 and 19:00, given that the event type is \"motionDetection.motion.started\" and the device serial number is ABCDEF."}
{"original_description": "Catch up on your favorite blog in Pocket at your leisure — or use Pocket's text-to-speech function to listen to articles. It's like your own custom podcast! ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Pocket", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pocket.read_it_later", "Filter code method": "Pocket.readItLater.skip(string?: reason)", "Runtime method": "runAction(\"pocket.read_it_later\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setUrl(string: url)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Pocket.readItLater.setTags(string: tags)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.EntryTitle === \"Launch Day!\" && Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"news, updates\");\n} else {\n  Pocket.readItLater.skip(\"Article does not match the specified title or feed.\");\n}", "intent": "When a new article titled like \"Launch Day!\" is published in the ifttt Blog feed at http://blog.ifttt.com/, save the full article content, including any images like http://ifttt.com/images/no_image_card.png, to Pocket with tags \"news, updates\" for later reading."}
{"original_description": "All you need to do is enter an app's name or the link to its listing on the App Store in the field below and we'll let you know as soon as its price drops.", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.app_price_dropped"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.appPriceDropped.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.appPriceDropped.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.appPriceDropped.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.appPriceDropped.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.appPriceDropped.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.appPriceDropped.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.appPriceDropped.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.appPriceDropped.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.appPriceDropped.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.appPriceDropped.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.appPriceDropped.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (AppStore.appPriceDropped.Name === \"IFTTT\" && AppStore.appPriceDropped.Price === \"$0.99\" && AppStore.appPriceDropped.Rating === \"5 stars\" && AppStore.appPriceDropped.Category === \"Productivity\") {\n  IfNotifications.sendNotification.setMessage(\"The IFTTT app is now on sale for $0.99, down from $9.99, and has a 5-star rating in the Productivity category.\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}", "intent": "When the price of the \"IFTTT\" app drops, send a notification with the message \"The IFTTT app is now on sale for $0.99, down from $9.99, and has a 5-star rating in the Productivity category.\""}
{"original_description": "If your SmartThings device is opened, then turn on your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_spotcam", "Filter code method": "Spotcam.turnOnSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.skip();\n}", "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn on the SpotCam with serial number S123456 automatically."}
{"original_description": "If your SpotCam detect sound, then turn on your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOnAllHue.setLights(\"living room\");\n}", "intent": "If the SpotCam Ring named \"Front Door\" detects sound at any time, then turn on all Philips Hue lights in the living room."}
{"original_description": "Automatically open garage door when presence is detected in SmartThings.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Not the Bedroom sensor device.\");\n}", "intent": "When the Bedroom sensor device detects presence in SmartThings, automatically open the Main Garage Door using Garadget."}
{"original_description": "Turn on the home air conditioning at a specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_power", "Filter code method": "Airtouch.acPower.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_power\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or turn off?", "Slug": "power_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acPower.setPower On Off(string: power_on_off)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar desiredTime = \"15:00\";\nif (checkTime.getHours() === 15 && checkTime.getMinutes() === 0) {\n  Airtouch.acPower.setPowerOnOff(\"on\");\n  Airtouch.acPower.skip();\n} else {\n  Airtouch.acPower.skip(\"Not the desired time\");\n}", "intent": "Turn on the living room air conditioning at 15:00 every day."}
{"original_description": "Turn your switches, plugs, or lights on and off to make your home look occupied", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.toggle", "Filter code method": "Kasa.toggle.skip(string?: reason)", "Runtime method": "runAction(\"kasa.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to toggle", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyHourAt.CheckTime;\nvar hour = currentTime.hour();\n\nif (hour == 7) {\n  Kasa.toggle.setDevice(\"Living Room Lamp\");\n} else if (hour == 19) {\n  Kasa.toggle.skip(\"Turn off the Living Room Lamp at 19:00\");\n  Kasa.toggle.setDevice(\"Living Room Lamp\");\n}", "intent": "Turn on the Living Room Lamp at 07:00 and off at 19:00 every day to make your home look occupied."}
{"original_description": "Turning ON/OFF your Nexus Home devices at particular time", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.devices", "Filter code method": "BrilliantNexus.devices.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.devices\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Select any of the Brilliant Nexus device", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your device", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.devices.setStatus(string: status)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetOnTime = \"7:00 AM\";\nvar targetOffTime = \"10:00 PM\";\nvar deviceName = \"Living Room Light\";\n\nif (currentTime === targetOnTime) {\n  BrilliantNexus.devices.setStatus(\"ON\");\n} else if (currentTime === targetOffTime) {\n  BrilliantNexus.devices.setStatus(\"OFF\");\n} else {\n  BrilliantNexus.devices.skip(\"Not the scheduled time to turn the device on or off.\");\n}", "intent": "Turn on the Living Room Light Nexus device at 7:00 AM and turn it off at 10:00 PM every day."}
{"original_description": "Stay on top of the latest businesses in your area by logging them in a Googlesheet!", "trigger_channel": "Yelp", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "yelp.hot_and_new_business"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Business in an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sort by\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sort by", "Slug": "sort_by", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Business\nUnique Yelp ID of this business", "description": "Unique Yelp ID of this business", "details": {"Slug": "business_id", "Filter code": "Yelp.hotAndNewBusiness.BusinessId", "Type": "String", "Example": "lJAGnYzku5zSaLnQ_T6_GQ"}}, {"section": "Ingredients", "title": "Business name\nName of the business.", "description": "Name of the business.", "details": {"Slug": "business_name", "Filter code": "Yelp.hotAndNewBusiness.BusinessName", "Type": "String", "Example": "Brenda's French Soul Food"}}, {"section": "Ingredients", "title": "Business category\nList of category titles associated with the business.", "description": "List of category titles associated with the business.", "details": {"Slug": "business_category", "Filter code": "Yelp.hotAndNewBusiness.BusinessCategory", "Type": "String", "Example": "Breakfast & Brunch, Southern, Cajun/Creole"}}, {"section": "Ingredients", "title": "Business image url\nPhoto for this business.", "description": "Photo for this business.", "details": {"Slug": "business_image_url", "Filter code": "Yelp.hotAndNewBusiness.BusinessImageUrl", "Type": "Image URL", "Example": "https://s3-media3.fl.yelpcdn.com/bphoto/sNIJnePGDenUOyewsD8tLg/o.jpg"}}, {"section": "Ingredients", "title": "Business phone\nPhone number of the business.", "description": "Phone number of the business.", "details": {"Slug": "business_phone", "Filter code": "Yelp.hotAndNewBusiness.BusinessPhone", "Type": "String", "Example": "+14153458100"}}, {"section": "Ingredients", "title": "Business address\nLocation of this business", "description": "Location of this business", "details": {"Slug": "business_address", "Filter code": "Yelp.hotAndNewBusiness.BusinessAddress", "Type": "String", "Example": "652 Polk St, San Francisco, CA 94102"}}, {"section": "Ingredients", "title": "Business rating\nRating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "description": "Rating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "details": {"Slug": "business_rating", "Filter code": "Yelp.hotAndNewBusiness.BusinessRating", "Type": "String", "Example": "4.0"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Yelp.hotAndNewBusiness.Location === \"San Francisco\" && Yelp.hotAndNewBusiness.SortBy === \"distance\") {\n  var row = Yelp.hotAndNewBusiness.BusinessName + \"|||\" + Yelp.hotAndNewBusiness.BusinessCategory + \"|||\" + Yelp.hotAndNewBusiness.BusinessRating + \"|||\" + Yelp.hotAndNewBusiness.BusinessPhone + \"|||\" + Yelp.hotAndNewBusiness.BusinessAddress;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"New SF Businesses\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(row);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/New SF Businesses\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Does not match San Francisco area or distance sort.\");\n}", "intent": "Log new businesses from Yelp in the San Francisco area, sorted by distance, into a Google Sheets spreadsheet named \"New SF Businesses\" with columns for business name, category, rating, phone number, and address, whenever a new business is found."}
{"original_description": "Turns on the LightwaveRF light of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "LightwaveRF Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_lighting.switch_on_light", "Filter code method": "LightwaverfLighting.switchOnLight.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_lighting.switch_on_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Which light\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Light?", "Slug": "which_light", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && \n    ((hour >= 19) || (hour <= 6)) && \n    apilioValue1 === \"Green\") {\n  // Do nothing, let the action proceed\n} else {\n  LightwaverfLighting.switchOnLight.skip(\"Conditions not met for turning on the Living Room Lamp.\");\n}", "intent": "Turn on the Living Room Lamp when an Apilio event named \"run_only_at_nighttime\" is received between 19:00 and 06:00 with a custom value of \"Green\"."}
{"original_description": "Simply enter a specific app's name or the link to its listing on the App Store and we'll let you know as soon as it releases a new update along with the release notes.", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_version_released"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppVersionReleased.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppVersionReleased.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppVersionReleased.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppVersionReleased.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppVersionReleased.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppVersionReleased.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppVersionReleased.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppVersionReleased.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppVersionReleased.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Release notes\nNotes about the new app release.", "description": "Notes about the new app release.", "details": {"Slug": "release_notes", "Filter code": "AppStore.newAppVersionReleased.ReleaseNotes", "Type": "String", "Example": "+ We made some improvements to..."}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppVersionReleased.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppVersionReleased.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (AppStore.newAppVersionReleased.Name === \"IFTTT\" && AppStore.newAppVersionReleased.Version === \"3.0.0\") {\n  var message = `IFTTT app updated to version 3.0.0: ${AppStore.newAppVersionReleased.ReleaseNotes} Current rating: ${AppStore.newAppVersionReleased.Rating}`;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}", "intent": "When the IFTTT app on the Apple App Store releases a new update with version 3.0.0, send a notification with the message \"IFTTT app updated to version 3.0.0: + We made some improvements to the user interface and fixed several bugs.\" including the release notes and current rating of 4.5 stars."}
{"original_description": "Why not create a Scenario to turn your heating on? Use Gideon to turn on your thermostat when the temperature drops below 21! ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 18) {\n  Gideon.launchScenario.setScenarioName(\"Heating\");\n} else {\n  Gideon.launchScenario.skip(\"Temperature is not below 18 degrees Celsius.\");\n}", "intent": "Turn on the heating scenario in Gideon when the temperature drops below 18 degrees Celsius at home."}
{"original_description": "Runs every Monday. Save £52 in Week 1 of the year, £51 in Week 2 of the year, and so on!", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Monzo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "monzo.pot_deposit", "Filter code method": "Monzo.potDeposit.skip(string?: reason)", "Runtime method": "runAction(\"monzo.pot_deposit\", {})"}, "action_details": [{"section": "Action fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Helper text": "One of the pots on your Monzo account.", "Slug": "pot", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nText input > Other", "description": "Text input > Other", "details": {"Label": "Amount", "Helper text": "The amount in GBP (£) to move. For example, &quot;5&quot; for £5 or &quot;0.33&quot; for 33p. Don't include the currency symbol.", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Monzo.potDeposit.setAmount(string: amount)"}}], "filter_code": "var week_of_year = Meta.currentUserTime.format('w');\nvar week_number = parseInt(week_of_year);\nvar day_of_week = DateAndTime.everyWeekdayAt.DayOfWeek;\nif (day_of_week === \"Monday\") {\n  var amount = (53 - week_number);\n  if (amount > 0) {\n    Monzo.potDeposit.setAmount(amount.toFixed(2));\n  } else {\n    Monzo.potDeposit.skip(\"No more savings for this year.\");\n  }\n}", "intent": "Every Monday, save an amount in a Monzo pot, where the amount decreases by £1 each week, starting with £52 in Week 1 and going down to £1 in Week 52.", "filter_code_old": "var week_of_year = Meta.currentUserTime.format('w');\nvar week_number = parseInt(week_of_year); \nvar amount= (53-week_number);\nMonzo.potDeposit.setAmount(amount.toFixed(2));\n\n"}
{"original_description": "Mute your Android phone.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Android Device", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_device.mute_device", "Filter code method": "AndroidDevice.muteDevice.skip(string?: reason)", "Runtime method": "runAction(\"android_device.mute_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate\nDropdown list", "description": "Dropdown list", "details": {"Label": "Vibrate", "Slug": "vibrate", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidDevice.muteDevice.setVibrate(string: vibrate)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  AndroidDevice.muteDevice.setVibrate(\"off\");\n} else {\n  AndroidDevice.muteDevice.skip(\"Gesture or device does not match.\");\n}", "intent": "Mute your Android phone when a triple knock gesture is detected on the Knocki device KNC1-W-00000088."}
{"original_description": "When your compatible SmartThings sensor no longer detects your presence, the Nanoleaf Light Panels you identify is set to white and dimmed down to 30% brightness to save energy.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.change_color_request", "Filter code method": "Nanoleaf.changeColorRequest.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.change_color_request\", {})"}, "action_details": [{"section": "Action fields", "title": "My devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "my_devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which color?", "Helper text": "Set the color value in hex (00FF00) or by name (Green). The hash (#) is not required for hex value input.", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "Nanoleaf.changeColorRequest.setValue(string: value)"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Nanoleaf.changeColorRequest.skip(\"Bedroom sensor no longer detects presence\");\n} else {\n  Nanoleaf.changeColorRequest.setValue(\"white\");\n  Nanoleaf.changeColorRequest.setBrightness(30);\n}", "intent": "When the Bedroom sensor no longer detects your presence, set the Nanoleaf Light Panels in the living room to white (#FFFFFF) and dim them down to 30% brightness."}
{"original_description": "Cancels the StandBy Mode on the Heatmiser Thermostat of your choice, when Apilio triggers the action you specify", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Heatmiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatmiser.cancel_standby", "Filter code method": "Heatmiser.cancelStandby.skip(string?: reason)", "Runtime method": "runAction(\"heatmiser.cancel_standby\", {})"}, "action_details": [{"section": "Action fields", "title": "Which room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "which_room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"wake_up\" \n    && Apilio.iftttActionReports.CreatedAt.getHours() === 7 \n    && Apilio.iftttActionReports.ApilioValue1 === \"Morning\" \n    && Apilio.iftttActionReports.ApilioValue2 === \"Heating\" \n    && which_room === \"Living Room\") {\n  // No need to skip, this is the condition to run the action\n} else {\n  Heatmiser.cancelStandby.skip(\"Conditions not met to cancel StandBy Mode.\");\n}", "intent": "Cancel the StandBy Mode on the Heatmiser Thermostat in the Living Room when an Apilio event named \"wake_up\" is triggered at 07:00 with a custom Value1 set to \"Morning\" and Value2 set to \"Heating\"."}
{"original_description": "Launch into the weekend with a Friday roundup of NY Times reporting on \"NASA\", sent to your inbox. Get it?! 🚀", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 5) { // 5 represents Friday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\n\nvar searchTerm = \"NASA\";\nif (Nytimes.newArticleMatchingSearch.Title.includes(searchTerm) || \n    Nytimes.newArticleMatchingSearch.Author.includes(searchTerm) || \n    Nytimes.newArticleMatchingSearch.Blurb.includes(searchTerm) || \n    Nytimes.newArticleMatchingSearch.ArticleUrl.includes(searchTerm)) {\n  var title = \"Friday NASA Roundup\";\n  var message = \"Here's your weekly roundup of New York Times articles about NASA:<br>\";\n  message += \"<b>\" + Nytimes.newArticleMatchingSearch.Title + \"</b> by \" + Nytimes.newArticleMatchingSearch.Author + \":<br>\";\n  message += Nytimes.newArticleMatchingSearch.Blurb + \"<br>\";\n  message += \"Read more: <a href='\" + Nytimes.newArticleMatchingSearch.ArticleUrl + \"'>Article</a><br>\";\n\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendWeeklyEmail.setTitle(title);\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No NASA articles found.\");\n}", "intent": "Send a weekly email digest to my inbox every Friday at 08:00 with a roundup of New York Times articles matching the search term \"NASA\", including the article title, author, blurb, and URL, with the email titled \"Friday NASA Roundup\" and a message containing a brief summary of each article."}
{"original_description": "Toggles on or off the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.toggle_all_hue", "Filter code method": "Hue.toggleAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.toggle_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar value1 = Apilio.iftttActionReports.ApilioValue1;\nvar value2 = Apilio.iftttActionReports.ApilioValue2;\n\nif (eventName === \"run_only_at_nighttime\" && \n    (hour >= 20 || hour < 6) && \n    value1 === \"Green\" && \n    value2 === \"Blue\") {\n  Hue.toggleAllHue.setLights(\"Living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00 with a custom Value 1 set to \"Green\" and Value 2 set to \"Blue\", toggle on or off the Philips Hue lights in the living room."}
{"original_description": "Activates the StandBy Mode on the Heatmiser Thermostat of your choice, when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Heatmiser", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatmiser.set_standby", "Filter code method": "Heatmiser.setStandby.skip(string?: reason)", "Runtime method": "runAction(\"heatmiser.set_standby\", {})"}, "action_details": [{"section": "Action fields", "title": "Which room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "which_room", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\nvar whichRoom = \"Living Room\";\n\nif (eventName === \"run_only_at_nighttime\" && \n    (hour >= 20 || hour < 6) && \n    apilioValue1 === \"Green\") {\n  Heatmiser.setStandby.setWhichRoom(whichRoom);\n} else {\n  Heatmiser.setStandby.skip(\"Conditions not met.\");\n}", "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 received from Apilio is \"Green\", activate the StandBy Mode on the Heatmiser Thermostat in the room named \"Living Room\"."}
{"original_description": "Receive \"I R\" (editable) when tomorrow's forecast calls for rain.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Xtactor", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "xtactor.vibrate", "Filter code method": "Xtactor.vibrate.skip(string?: reason)", "Runtime method": "runAction(\"xtactor.vibrate\", {})"}, "action_details": [{"section": "Action fields", "title": "Vibrate message\nText input > Other", "description": "Text input > Other", "details": {"Label": "Vibration message", "Helper text": "The message that will play on the Xtactor.", "Slug": "vibrate_message", "Required": "true", "Can have default value": "true", "Filter code method": "Xtactor.vibrate.setVibrate Message(string: vibrate_message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" && \n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Xtactor.vibrate.setVibrateMessage(\"Rain Ahead\");\n} else {\n  Xtactor.vibrate.skip(\"Conditions do not match.\");\n}", "intent": "Receive \"Rain Ahead\" when tomorrow's forecast in New York calls for rain with a high temperature of 60°F and a low of 45°F."}
{"original_description": "Enter a specific app's name or the link to its listing on the App Store and we'll add to the spreadsheet as soon as it releases a new update.", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_version_released"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppVersionReleased.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppVersionReleased.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppVersionReleased.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppVersionReleased.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppVersionReleased.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppVersionReleased.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppVersionReleased.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppVersionReleased.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppVersionReleased.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Release notes\nNotes about the new app release.", "description": "Notes about the new app release.", "details": {"Slug": "release_notes", "Filter code": "AppStore.newAppVersionReleased.ReleaseNotes", "Type": "String", "Example": "+ We made some improvements to..."}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppVersionReleased.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppVersionReleased.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (AppStore.newAppVersionReleased.Name === \"IFTTT\") {\n  var formattedRow = AppStore.newAppVersionReleased.Name + \"|||\" + AppStore.newAppVersionReleased.Version + \"|||\" + AppStore.newAppVersionReleased.ReleaseNotes + \"|||\" + AppStore.newAppVersionReleased.Price;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"App Updates\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Apple Apps\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"The app is not IFTTT.\");\n}", "intent": "When the IFTTT app releases a new update on the Apple App Store, append a new row to a Google Sheets spreadsheet named \"App Updates\" with the formatted row containing the app's name, version, release notes, and current price, and save the spreadsheet in the \"IFTTT/Apple Apps\" folder."}
{"original_description": "Changes Hubitat's mode when you tap a button widget on your mobile device.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (lat === \"37.8267\" && lon === \"-122.4230\") {\n  if (hour >= 7 && hour < 19) {\n    Hubitat.actionMode.setMode(\"Home\");\n  } else {\n    Hubitat.actionMode.setMode(\"Night\");\n  }\n} else {\n  Hubitat.actionMode.skip(\"Location does not match.\");\n}", "intent": "When the button widget on your mobile device is tapped at a location with latitude 37.8267 and longitude -122.4230, change Hubitat's mode to \"Home\" if the tap occurs between 07:00 and 19:00, or to \"Night\" otherwise."}
{"original_description": "Want to make sure to keep up on your favorite articles and videos? Reward yourself with cash once you've archived them!", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_read_item_ril"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newReadItemRil.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newReadItemRil.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newReadItemRil.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newReadItemRil.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newReadItemRil.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newReadItemRil.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Pocket.newReadItemRil.Title === \"My Morning Routine\" \n    && Pocket.newReadItemRil.Url === \"http://blog.ifttt.com\" \n    && Pocket.newReadItemRil.Tags.includes(\"productivity\") \n    && Pocket.newReadItemRil.Tags.includes(\"morning\") \n    && Meta.currentUserTime.hour() === 7) {\n  Qapital.saveTowardGoal.setGoal(\"Weekly Rewards\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Conditions not met.\");\n}", "intent": "When a new article titled \"My Morning Routine\" with the URL http://blog.ifttt.com and tags \"productivity, morning\" is added to Pocket at 07:00, transfer $5 toward the \"Weekly Rewards\" goal in Qapital."}
{"original_description": "Fact Checker tries to uncover the truth behind the headlines. Turn on this Applet and every Monday morning you'll get their latest articles, so you can stay better informed. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Monday\") {\n  var hour = Meta.currentUserTime.hour();\n  if (hour === 8) {\n    var title = \"Fact Checker Weekly Update\";\n    var message = \"\";\n    message += \"<h1>Latest Articles from Fact Checker:</h1><ul>\";\n    message += \"<li><a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryTitle + \"</a> by \" + Feed.newFeedItem.EntryAuthor + \"</li>\";\n    message += \"</ul>\";\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Monday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"8:00 AM\");\n    EmailDigest.sendWeeklyEmail.setTitle(title);\n    EmailDigest.sendWeeklyEmail.setMessage(message);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"Not 8:00 AM on Monday\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Monday\");\n}", "intent": "Every Monday morning at 8:00 AM, send a weekly email digest with the title \"Fact Checker Weekly Update\" and a message containing the latest article titles and URLs from the Fact Checker RSS feed, including images and authors, to stay informed about the latest news and updates."}
{"original_description": "Start your week off right with an email full of Star Trek gifs sent to your inbox on Mondays. LLAP, y'all. 🖖", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Monday\") {\n  var hour = Meta.currentUserTime.hour();\n  if (hour === 8) {\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Monday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n    EmailDigest.sendWeeklyEmail.setTitle(\"Star Trek Monday Motivation\");\n    EmailDigest.sendWeeklyEmail.setMessage(\"Live long and prosper, have a great week! \" + Giphy.search.EmailHTML);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"Not the correct time of day.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Monday.\");\n}", "intent": "Send a weekly email digest with Star Trek gifs to my inbox every Monday at 08:00, including an in-line GIF in the body of the email with the title \"Star Trek Monday Motivation\" and the message \"Live long and prosper, have a great week! 🖖\"."}
{"original_description": "This Applet adds your text status updates as an entry in a Google drive spreadsheet. Look back on all your posts, and marvel at your productivity! ", "trigger_channel": "Facebook Pages", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "facebook_pages.new_status_message_by_page"}, "trigger_details": [{"section": "Ingredients", "title": "Page name\nYour Facebook Page's name.", "description": "Your Facebook Page's name.", "details": {"Slug": "PageName", "Filter code": "FacebookPages.newStatusMessageByPage.PageName", "Type": "String", "Example": "The ifttt Office"}}, {"section": "Ingredients", "title": "Message\nStatus message itself.", "description": "Status message itself.", "details": {"Slug": "Message", "Filter code": "FacebookPages.newStatusMessageByPage.Message", "Type": "String", "Example": "Is having an awesome time!"}}, {"section": "Ingredients", "title": "Updated at\nDate and time the status message was created.", "description": "Date and time the status message was created.", "details": {"Slug": "UpdatedAt", "Filter code": "FacebookPages.newStatusMessageByPage.UpdatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Page url\nThe link to the main Facebook page.", "description": "The link to the main Facebook page.", "details": {"Slug": "PageUrl", "Filter code": "FacebookPages.newStatusMessageByPage.PageUrl", "Type": "String", "Example": "http://www.facebook.com/pages/The-ifttt-office/108073145941483"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (FacebookPages.newStatusMessageByPage.PageName === \"The ifttt Office\" && FacebookPages.newStatusMessageByPage.Message.includes(\"update\")) {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Facebook Status Updates\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Social Media\");\n  var formattedRow = FacebookPages.newStatusMessageByPage.Message + \"|||\" + FacebookPages.newStatusMessageByPage.UpdatedAt + \"|||\" + FacebookPages.newStatusMessageByPage.PageUrl;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Does not match the specified page or keyword.\");\n}", "intent": "When a new status message is posted on the Facebook page named \"The ifttt Office\" with a message containing the keyword \"update\", add a new entry to a Google Sheets spreadsheet titled \"Facebook Status Updates\" in the folder path \"IFTTT/Social Media\" with a formatted row including the status message, updated at time, and page URL, separated by \"|||\", such as \"Is having an awesome time!|||August 23, 2024 at 11:01PM|||http://www.facebook.com/pages/The-ifttt-office/108073145941483\"."}
{"original_description": "Press the iH button on your iHome device to turn Philips Hue Lights OFF.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\" && (IhomeEnhance.enhanceButton.press === \"Short press\" || IhomeEnhance.enhanceButton.press === \"Long press\")) {\n  Hue.turnOnAllHue.skip(\"Turning off all Philips Hue lights as 'iH' button was pressed on iHome device.\");\n}", "intent": "When the \"iH\" button on the iHome device is pressed, either short or long, turn off all Philips Hue lights."}
{"original_description": "Add your current location and time to a Google Drive spreadsheet by pressing the pusher on your Kronaby watch. (Make sure you enable \"Include location\" in the IFTTT trigger in the Kronaby app).", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType !== \"double\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Push type was not double press.\");\n}\n\nvar formattedRow = Kronaby.pusherPressed.Latitude + \"|||\" + Kronaby.pusherPressed.Longitude + \"|||\" + Kronaby.pusherPressed.PressedAt;\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Location Log\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Kronaby Logs\");", "intent": "When the pusher on your Kronaby watch is double pressed, add a new row to your Google Sheets spreadsheet named \"Location Log\" with the formatted row containing the current latitude, longitude, and time of press, separated by \"|||\", and store this spreadsheet in the \"IFTTT/Kronaby Logs\" folder."}
{"original_description": "Tap a button on your mobile device to set the level of a Hubitat dimmer.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_set_level", "Filter code method": "Hubitat.actionSetLevel.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_set_level\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Level\nDropdown list", "description": "Dropdown list", "details": {"Label": "What level?", "Slug": "level", "Required": "true", "Can have default value": "true", "Filter code method": "Hubitat.actionSetLevel.setLevel(string: level)"}}, {"section": "Action fields", "title": "Rate\nText input > Other", "description": "Text input > Other", "details": {"Label": "What rate?", "Helper text": "The rate at which to change the dimming level.", "Slug": "rate", "Required": "false", "Can have default value": "true", "Filter code method": "Hubitat.actionSetLevel.setRate(string: rate)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour <= 19 && latitude == \"37.8267\" && longitude == \"-122.4230\") {\n  Hubitat.actionSetLevel.setLevel(\"75%\");\n  Hubitat.actionSetLevel.setRate(\"50%\");\n  Hubitat.actionSetLevel.setDevice(\"Living Room Light\");\n} else {\n  Hubitat.actionSetLevel.skip(\"Outside of specified conditions.\");\n}", "intent": "When the button on your mobile device is tapped at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, set the level of the Hubitat dimmer device named \"Living Room Light\" to 75%, changing at a rate of 50%."}
{"original_description": "Stay in the know on the go — get a notification to your mobile phone from the IFTTT app when you get a new entry to your JotForm.", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Jotform.latestFormSubmission.FormTitle === \"My Contact Form\" && Jotform.latestFormSubmission.FilteredRichTextData.includes(\"Email\")) {\n  var message = \"New submission from IP address: \" + Jotform.latestFormSubmission.IP + \"\\nSubmitted on: \" + Jotform.latestFormSubmission.SubmissionDateTime + \"\\nTotal submissions: \" + Jotform.latestFormSubmission.TotalSubmissions + \"\\nForm data:\\n\" + Jotform.latestFormSubmission.RichTextData;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"No new submission matches the filter criteria.\");\n}", "intent": "Get a notification on your mobile phone from the IFTTT app when a new entry is submitted to your JotForm \"My Contact Form\" with the question filter set to \"Email\", including the form respondent's detected IP address, submission date and time, total submissions, and rich text data in a tabulated HTML format, and send this information as a message to your device."}
{"original_description": "Button applet used to disarm Blink system.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" && DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\") {\n  Blink.networkDisarm.setNetwork(\"Home Security\");\n  Blink.networkDisarm.skip(\"Button Press\");\n}", "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring at 04:17:06+05:00, disarm the Blink system named \"Home Security\" with the reason \"Button Press\"."}
{"original_description": "Disarm SkylinkNet with a press of button!", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.alarm", "Filter code method": "Skylinknet.alarm.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Hub?", "Slug": "hub_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Alarm\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Mode?", "Slug": "alarm", "Required": "true", "Can have default value": "true", "Filter code method": "Skylinknet.alarm.setAlarm(string: alarm)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Skylinknet.alarm.setAlarm(\"Disarmed\");\n  Skylinknet.alarm.setHubId(\"Living Room\");\n  Skylinknet.alarm.setKey(\"MySecurePassword\");\n} else {\n  Skylinknet.alarm.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, disarm the SkylinkNet alarm on hub \"Living Room\" with password \"MySecurePassword\" and set it to \"Disarmed\" mode."}
{"original_description": "With this Applet, you'll always know where to eat and what to do!", "trigger_channel": "Yelp", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "yelp.hot_and_new_business"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Business in an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sort by\nDropdown list", "description": "Dropdown list", "details": {"Label": "Sort by", "Slug": "sort_by", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Business\nUnique Yelp ID of this business", "description": "Unique Yelp ID of this business", "details": {"Slug": "business_id", "Filter code": "Yelp.hotAndNewBusiness.BusinessId", "Type": "String", "Example": "lJAGnYzku5zSaLnQ_T6_GQ"}}, {"section": "Ingredients", "title": "Business name\nName of the business.", "description": "Name of the business.", "details": {"Slug": "business_name", "Filter code": "Yelp.hotAndNewBusiness.BusinessName", "Type": "String", "Example": "Brenda's French Soul Food"}}, {"section": "Ingredients", "title": "Business category\nList of category titles associated with the business.", "description": "List of category titles associated with the business.", "details": {"Slug": "business_category", "Filter code": "Yelp.hotAndNewBusiness.BusinessCategory", "Type": "String", "Example": "Breakfast & Brunch, Southern, Cajun/Creole"}}, {"section": "Ingredients", "title": "Business image url\nPhoto for this business.", "description": "Photo for this business.", "details": {"Slug": "business_image_url", "Filter code": "Yelp.hotAndNewBusiness.BusinessImageUrl", "Type": "Image URL", "Example": "https://s3-media3.fl.yelpcdn.com/bphoto/sNIJnePGDenUOyewsD8tLg/o.jpg"}}, {"section": "Ingredients", "title": "Business phone\nPhone number of the business.", "description": "Phone number of the business.", "details": {"Slug": "business_phone", "Filter code": "Yelp.hotAndNewBusiness.BusinessPhone", "Type": "String", "Example": "+14153458100"}}, {"section": "Ingredients", "title": "Business address\nLocation of this business", "description": "Location of this business", "details": {"Slug": "business_address", "Filter code": "Yelp.hotAndNewBusiness.BusinessAddress", "Type": "String", "Example": "652 Polk St, San Francisco, CA 94102"}}, {"section": "Ingredients", "title": "Business rating\nRating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "description": "Rating for this business (value ranges from 1, 1.5, ... 4.5, 5).", "details": {"Slug": "business_rating", "Filter code": "Yelp.hotAndNewBusiness.BusinessRating", "Type": "String", "Example": "4.0"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "if (Meta.currentUserTime.day() === \"Sunday\" && Meta.currentUserTime.hour() === 10) {\n  var businessName = Yelp.hotAndNewBusiness.BusinessName;\n  var businessAddress = Yelp.hotAndNewBusiness.BusinessAddress;\n  var businessPhone = Yelp.hotAndNewBusiness.BusinessPhone;\n  var businessRating = Yelp.hotAndNewBusiness.BusinessRating;\n  var businessUrl = \"https://www.yelp.com/biz/\" + Yelp.hotAndNewBusiness.BusinessId;\n\n  EmailDigest.sendWeeklyEmail.setTitle(\"New Restaurants in San Francisco\");\n  EmailDigest.sendWeeklyEmail.setMessage(\n    \"<b>\" + businessName + \"</b><br/>\" +\n    \"Address: \" + businessAddress + \"<br/>\" +\n    \"Phone: \" + businessPhone + \"<br/>\" +\n    \"Rating: \" + businessRating + \"/5<br/>\" +\n    \"<a href='\" + businessUrl + \"'>View on Yelp</a>\"\n  );\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Sunday at 10:00 AM\");\n}", "intent": "Send a weekly email digest every Sunday at 10:00 AM with the title \"New Restaurants in San Francisco\" and a message containing the business name, address, phone number, and rating of newly opened restaurants in the area sorted by highest rated, including a link to the business page on Yelp."}
{"original_description": "When your August lock is unlocked, your Blink System is disarmed", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  Blink.networkDisarm.skip(\"Front Door at San Diego Beach House unlocked by John Smith.\");\n}", "intent": "When the Front Door lock at my San Diego Beach House is unlocked by John Smith, disarm my Blink Home Security system."}
{"original_description": "Get the daily weather sent to Discord. This Applet returns results in Celcius.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Discord", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "discord.post_message_to_channel", "Filter code method": "Discord.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"discord.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which Channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Helper text": "Max limit of 2000 characters. To @mention roles, find the role ID in Discord by running `\\@role`. Ex. 'Hello &lt;@&amp;1234&gt;'", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Allowable mentions\nDropdown list", "description": "Dropdown list", "details": {"Label": "Allowable mentions", "Helper text": "Allows usage of @everyone, &lt;@&amp;(Role ID)&gt;, and &lt;@(User ID)&gt; in the message body", "Slug": "allowable_mentions", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setAllowable Mentions(string: allowable_mentions)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var message = \"Current weather: \" + Weather.currentWeatherAtTime.CurrentCondition + \"\\nHigh temperature: \" + Weather.currentWeatherAtTime.HighTempCelsius + \"°C\\nLow temperature: \" + Weather.currentWeatherAtTime.LowTempCelsius + \"°C\\nHumidity: \" + Weather.currentWeatherAtTime.Humidity + \"%\\n\" + Weather.currentWeatherAtTime.CurrentConditionImageURL;\n  Discord.postMessageToChannel.setMessage(message);\n  Discord.postMessageToChannel.setAllowableMentions(\"@weather-alerts\");\n  Discord.postMessageToChannel.channel_id = \"#weather-updates\";\n} else {\n  Discord.postMessageToChannel.skip(\"Not 7:00 AM\");\n}", "intent": "Send a daily message to the #weather-updates channel on Discord at 7:00 AM with the current weather condition, high and low temperatures in Celsius, and humidity level, including an image of the current condition, using the allowable mentions option to notify the @weather-alerts role."}
{"original_description": "Every time you send an email to trigger@applet.ifttt.com from your IFTTT associated email address, the body of that email is forwarded to your IntuiFace experiences.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Intuiface", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "intuiface.sendMessage", "Filter code method": "Intuiface.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"intuiface.sendMessage\", {})"}, "action_details": [{"section": "Action fields", "title": "Api key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Credential key", "Helper text": "To get your key, go to the <a href=\"https://myintuiface.intuilab.com/credentialkeys?scope=IFTTT_Webtriggers\" target=\"_blank\">Credential keys page</a> then paste the generated key here.", "Slug": "api_key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Msg\nText input > Other", "description": "Text input > Other", "details": {"Label": "Message", "Helper text": "Value to send to all selected experiences. For details , go to the <a href=\"http://support.intuilab.com/kb/web-triggers/web-triggers-overview\" target=\"_blank\">Web Triggers Interface Asset page</a>.", "Slug": "msg", "Required": "true", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setMsg(string: msg)"}}, {"section": "Action fields", "title": "P1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 1", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p1", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP1(string: p1)"}}, {"section": "Action fields", "title": "P2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 2", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p2", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP2(string: p2)"}}, {"section": "Action fields", "title": "P3\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 3", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p3", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP3(string: p3)"}}, {"section": "Action fields", "title": "Xpnames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Experience name(s)", "Helper text": "Optional: Select experience(s) based on their name(s). For multiple experiences, use a comma separated list.", "Slug": "xpNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setXp Names(string: xpNames)"}}, {"section": "Action fields", "title": "Devicenames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player name(s)", "Helper text": "Optional: Select Player(s) based on their device name(s). For multiple Players, use a comma separated list.", "Slug": "deviceNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setDevice Names(string: deviceNames)"}}, {"section": "Action fields", "title": "Tags\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player tag(s)", "Helper text": "Optional: Select Player(s) based on their tag(s). For multiple tags, use a comma separated list. Players with one or more matching tags will be selected.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setTags(string: tags)"}}], "filter_code": "if (Email.sendIftttAnEmailTagged.Subject === \"Daily Update\" \n    && Email.sendIftttAnEmailTagged.tag === \"#office\" \n    && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\") {\n  Intuiface.sendMessage.setMsg(\"Meeting at 2 PM today\");\n  Intuiface.sendMessage.setP1(\"New meeting scheduled\");\n  Intuiface.sendMessage.setXpNames(\"ConferenceRoom,OfficeDisplay\");\n  Intuiface.sendMessage.setDeviceNames(\"MainScreen,SideMonitor\");\n  Intuiface.sendMessage.setTags(\"Important,Urgent\");\n}", "intent": "When an email with the subject \"Daily Update\" and a tag \"#office\" is sent from somebody@gmail.com to trigger@applet.ifttt.com, forward the email body \"Meeting at 2 PM today\" to all IntuiFace experiences named \"ConferenceRoom\" and \"OfficeDisplay\", using the API key \"1234567890abcdef\", with an additional message \"New meeting scheduled\", and targeting players with device names \"MainScreen\" and \"SideMonitor\", as well as those tagged with \"Important\" and \"Urgent\"."}
{"original_description": "Every time a motion is detected by Aura, a Signal will be sent to your Das Keyboard.", "trigger_channel": "Aura", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "aura.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your hub", "Helper text": "The serial number is located at the back of your hub", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Aura.motion.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Aura.motion.serial === \"123456\") {\n    Daskeyboardq.signals.setName(\"Motion Detected\");\n    Daskeyboardq.signals.setZone(1);\n    Daskeyboardq.signals.setColor(\"red\");\n    Daskeyboardq.signals.setEffect(\"breathing\");\n    Daskeyboardq.signals.setDevice(\"Das Keyboard Q\");\n  } else {\n    Daskeyboardq.signals.skip(\"Incorrect serial number.\");\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When a motion is detected by Aura at its serial number 123456, send a Signal named \"Motion Detected\" with the color red to zone 1 of your Das Keyboard Q device, displaying a breathing effect, and trigger this action only when the motion occurs between 07:00 and 19:00."}
{"original_description": "Turn off air conditioner and set thermostat when outside temperature falls below 34°F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 34) {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is below 34°F.\");\n} else if (Weather.currentTemperatureRisesAbove.TempFahrenheit >= 34) {\n  FujitsuGeneralLimited.setOperModeAndTemp.setDsn(\"Living Room AC\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"OFF\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setAdjustTemperature(70);\n}", "intent": "When the outside temperature falls below 34°F in New York, turn off the air conditioner named \"Living Room AC\" and set the thermostat to 70°F."}
{"original_description": "Turn on air conditioner to heat and set thermostat when outside temperature rises above 40°F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "FUJITSU GENERAL LIMITED", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fujitsu_general_limited.setOperModeAndTemp", "Filter code method": "FujitsuGeneralLimited.setOperModeAndTemp.skip(string?: reason)", "Runtime method": "runAction(\"fujitsu_general_limited.setOperModeAndTemp\", {})"}, "action_details": [{"section": "Action fields", "title": "Dsn\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device name", "Helper text": "Which Air Conditioner?", "Slug": "dsn", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Operation mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Operation Mode you want to set?", "Helper text": "Which Operation Mode you want to set?", "Slug": "operation_mode", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Adjust temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the temperature you want to set?", "Helper text": "Please select &quot;---&quot; if you set &quot;OFF&quot; or &quot;Fan&quot; Mode. Temperature can be set between 64F~88F (18C~30C)", "Slug": "adjust_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 40) {\n  FujitsuGeneralLimited.setOperModeAndTemp.setDsn(\"Living Room AC\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"Heat\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setAdjustTemperature(72);\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is not above 40°F.\");\n}", "intent": "When the outside temperature rises above 40°F in New York, turn on the air conditioner named \"Living Room AC\" to heat mode and set the thermostat to 72°F."}
{"original_description": "This applet changes your setpoint temperature on your Honeywell thermostat while activating a routine in Niko Home Control", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Honeywell Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_lyric.setsystemtemperature", "Filter code method": "HoneywellLyric.setsystemtemperature.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_lyric.setsystemtemperature\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which thermostat?", "Helper text": "Select a thermostat", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Heat or cool temperature", "Helper text": "Enter 'heat' or 'cool' or an ingredient from a trigger, for heat make sure your system is in heat or auto mode, for cool make sure it’s in cool or auto mode", "Slug": "temperature_type", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Type(string: temperature_type)"}}, {"section": "Action fields", "title": "Target temperature\nText input > Other", "description": "Text input > Other", "details": {"Label": "Target temperature", "Helper text": "Enter a temperature in degrees (such as 71) or an ingredient from a trigger", "Slug": "target_temperature", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTarget Temperature(string: target_temperature)"}}, {"section": "Action fields", "title": "Temperature scale\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature scale", "Slug": "temperature_scale", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellLyric.setsystemtemperature.setTemperature Scale(string: temperature_scale)"}}], "filter_code": "if (Nikohomecontrol.routineActivated.Routine === \"Party\" && Nikohomecontrol.routineActivated.CreatedAt.hour() === 20) {\n  HoneywellLyric.setsystemtemperature.setSystem(\"Living Room\");\n  HoneywellLyric.setsystemtemperature.setTemperatureType(\"heat\");\n  HoneywellLyric.setsystemtemperature.setTargetTemperature(22);\n  HoneywellLyric.setsystemtemperature.setTemperatureScale(\"celsius\");\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"Routine or time does not match.\");\n}", "intent": "When the \"Party\" routine is activated in Niko Home Control at 20:00, change the setpoint temperature on the \"Living Room\" Honeywell thermostat to 22 degrees Celsius for heating."}
{"original_description": "Going away for the weekend? Want to make sure to not waste unnecessary energy? Press your Kronaby pusher to set the Nest thermostat at the desired \"away\" temperature. ", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\") {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"15\");\n}", "intent": "When the Kronaby pusher is double-pressed, set the Living Room Nest Thermostat to 15°C."}
{"original_description": "Define the light level in lux, when this condition is reached,  turn of my Philips Hue lights. ", "trigger_channel": "UbiBot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ubibot.light"}, "trigger_details": [{"section": "Trigger fields", "title": "Channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Channel ID", "Helper text": "Select a Channel from your account", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "Light level condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Value", "Helper text": "Light level in lux", "Slug": "value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Ubibot.light.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Value\nLight Reading in lux", "description": "Light Reading in lux", "details": {"Slug": "value", "Filter code": "Ubibot.light.Value", "Type": "String", "Example": "500"}}, {"section": "Ingredients", "title": "Channel\nChannel ID", "description": "Channel ID", "details": {"Slug": "channel_id", "Filter code": "Ubibot.light.ChannelId", "Type": "String", "Example": "1510"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Ubibot.light.ChannelId === \"1510\" && Ubibot.light.Value >= \"500\") {\n  Hue.turnOnAllHue.skip(\"Light level reached 500 lux in channel 1510, turning off lights.\");\n}", "intent": "When the light level in channel 1510 reaches 500 lux, turn off all Philips Hue lights."}
{"original_description": "This app allows you to define time windows in which your alarm areas are switched on or off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.areas_on", "Filter code method": "Instar.areasOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.areas_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Area1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 1", "Helper text": "This is to set area 1 to be active or inactive", "Slug": "area1", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea1(string: area1)"}}, {"section": "Action fields", "title": "Area2\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 2", "Helper text": "This is to set area 2 to be active or inactive", "Slug": "area2", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea2(string: area2)"}}, {"section": "Action fields", "title": "Area3\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 3", "Helper text": "This is to set area 3 to be active or inactive", "Slug": "area3", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea3(string: area3)"}}, {"section": "Action fields", "title": "Area4\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 4", "Helper text": "This is to set area 4 to be active or inactive", "Slug": "area4", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.areasOn.setArea4(string: area4)"}}], "filter_code": "if (DateAndTime.everyDayAt.CheckTime.getHours() === 7 && DateAndTime.everyDayAt.CheckTime.getMinutes() === 0) {\n  Instar.areasOn.setArea1(\"on\");\n  Instar.areasOn.setArea2(\"on\");\n  Instar.areasOn.setArea3(\"on\");\n  Instar.areasOn.setCamName(\"Living Room Camera\");\n} else if (DateAndTime.everyDayAt.CheckTime.getHours() === 22 && DateAndTime.everyDayAt.CheckTime.getMinutes() === 0) {\n  Instar.areasOn.setArea1(\"off\");\n  Instar.areasOn.setArea2(\"off\");\n  Instar.areasOn.setArea3(\"off\");\n  Instar.areasOn.setArea4(\"off\");\n  Instar.areasOn.setCamName(\"Living Room Camera\");\n} else {\n  Instar.areasOn.skip(\"Not the scheduled time.\");\n}", "intent": "Turn on areas 1, 2, and 3 of the \"Living Room Camera\" in INSTAR at 7:00 AM every day and turn off areas 1, 2, 3, and 4 at 10:00 PM."}
{"original_description": "If Netatmo weather station reports rain amount for yesterday exceeding 5mm (0.2inch), do not water my yard for today.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-yesterday-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainYesterdayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainYesterdayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (parseFloat(Netatmo.rainYesterdayAmount.MeasuredRainfallMM) > 5) {\n  Netro.water.skip(\"Rain amount for yesterday exceeded 5mm, skipping watering.\");\n}", "intent": "If the Netatmo weather station reports that the rain amount for yesterday from My Rain gauge exceeded 5mm, then skip watering my yard with the Netro device today.", "filter_code_old": "if(parseFloat(Netatmo.rainYesterdayAmount.MeasuredRainfallMM)<5){\n  Netro.noWater.skip()\n}\n\n"}
{"original_description": " If Netatmo weather station reports freezing temperature, do not water my yard for today.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 0) {\n  Netro.water.skip(\"Temperature drop below 0 degrees Celsius reported by Netatmo weather station. Skipping watering for today.\");\n}", "intent": "When the Netatmo weather station named \"My Home - Indoor station\" reports a temperature drop below 0 degrees Celsius, skip watering my yard for today using my Netro device."}
{"original_description": "If Weather Underground reports freezing temperature, do not water my yard for today. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 32) {\n  Netro.water.skip(\"Freezing temperatures, skipping watering for today.\");\n}", "intent": "If the current temperature in degrees Fahrenheit from Weather Underground at my location is below 32°F, then skip watering all zones on my Netro device today."}
{"original_description": "Water yard on fixed time everyday. You could customize days of week, specific the zone to water, and also watering minutes. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || \n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (DateAndTime.everyWeekdayAt.CheckTime.substring(11, 16) === \"07:00\") {\n    Netro.water.setDevice(\"Backyard Controller\");\n    Netro.water.setZone(\"1\");\n    Netro.water.setDuration(\"20\");\n  } else {\n    Netro.water.skip(\"Not the scheduled watering time.\");\n  }\n} else {\n  Netro.water.skip(\"Not a scheduled watering day.\");\n}", "intent": "Water the front yard zone, which is zone 1, for 20 minutes every Monday, Wednesday, and Friday at 07:00 using the Netro device named \"Backyard Controller\"."}
{"original_description": "Water your yard on fixed time on each hour. You could specific the zone to water, watering minutes. This is typically used for new plants. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_hour_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Minutes past the hour", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyHourAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.water", "Filter code method": "Netro.water.skip(string?: reason)", "Runtime method": "runAction(\"netro.water\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to work with.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Zone\nText input > Other", "description": "Text input > Other", "details": {"Label": "zone", "Helper text": "Leave empty if want to water all zones. If you want to water specific zone, please provide the zone index, start with 1.", "Slug": "zone", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setZone(string: zone)"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "duration", "Helper text": "Watering time, number of minutes.", "Slug": "duration", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.water.setDuration(string: duration)"}}, {"section": "Action fields", "title": "Start time\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "start time", "Helper text": "Leave empty if you want to water immediately. If you want to water later, please provide the starting time, e.g. 18:30. Note that the time can not be in the past.", "Slug": "start_time", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.water.setStart Time(string: start_time)"}}], "filter_code": "var minute = DateAndTime.everyHourAt.CheckTime.getMinutes();\nif (minute !== 0) {\n  Netro.water.skip(\"Not on the hour\");\n} else {\n  Netro.water.setZone(\"1\");\n  Netro.water.setDuration(\"10\");\n}", "intent": "Water zone 1 of my Netro device for 10 minutes every hour on the hour."}
{"original_description": "Buzzfeed's upped their political reporting — stay informed by getting their pieces sent straight to your inbox. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "Email.sendMeEmail.setSubject(\"New Buzzfeed Article\");\nEmail.sendMeEmail.setBody(Feed.newFeedItem.EntryTitle + \"\\n\\n\" + Feed.newFeedItem.EntryContent + \"\\n\\nRead more at: \" + Feed.newFeedItem.EntryUrl);", "intent": "Send me an email with the subject \"New Buzzfeed Article\" and the body containing the entry title, entry content, and entry URL whenever a new item is published in the Buzzfeed RSS feed."}
{"original_description": "This Applet changes the color of your Hue lights when a new episode of IoT Podcast is published.", "trigger_channel": "IoT Podcast", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "iot_podcast.new_iot_podcast_episode"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryTitle", "Type": "String", "Example": "Episode 110: IKEA’s smart home plans and will you buy an Amazon Look?"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qBVDO7"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryContent", "Type": "String", "Example": "This week we discuss Apple’s plans to introduce Siri in a can, Amazon’s Style maven ambitions and a few other items on the personal assistant front..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry.", "description": "URL for the first image in the entry.", "details": {"Slug": "EntryImageUrl", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryImageUrl", "Type": "String", "Example": "http://ift.tt/2q1tBib"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "IotPodcast.newIotPodcastEpisode.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 18 && hour <= 22) {\n  if (IotPodcast.newIotPodcastEpisode.EntryTitle.match(/Episode \\d+: .*smart home.*/i)) {\n    Hue.setColorAllHue.setLights(\"Living Room\");\n    Hue.setColorAllHue.setColor(\"#FFA07A\");\n  } else {\n    Hue.setColorAllHue.skip(\"Episode title does not match the condition.\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Outside of the scheduled time (18:00-22:00).\");\n}", "intent": "When a new episode of the IoT Podcast is published with a title like \"Episode 110: IKEA’s smart home plans and will you buy an Amazon Look?\", change the color of all Philips Hue lights in the living room to a vibrant orange, #FFA07A, between 18:00 and 22:00 every day."}
{"original_description": "Automatically save your photos to a folder. Keep in mind, it only works for new photos you post.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "var sourceUrl = Instagram.anyNewPhotoByYou.SourceUrl;\nvar createdAt = Instagram.anyNewPhotoByYou.CreatedAt;\nvar filename = createdAt.replace(\" at \", \" \").replace(\",\", \"\") + \" Photo\";\nvar path = \"Instagram Photos\";\n\nDropbox.addFileFromUrl.setUrl(sourceUrl);\nDropbox.addFileFromUrl.setFilename(filename);\nDropbox.addFileFromUrl.setPath(path);", "intent": "Automatically save new photos posted on Instagram to a folder named \"Instagram Photos\" in Dropbox, using the photo's Source URL and setting the file name to include the date and time the photo was taken, such as \"2023-03-01 14:30 Photo\"."}
{"original_description": "Automatically save your photos to a folder. Keep in mind, it only works for new photos you post.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nGoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(Instagram.anyNewPhotoByYou.CreatedAt.replace(\" at\", \"_\").replace(\",\", \"\").replace(/ /g, \"_\"));\nGoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"Social Media/Instagram Photos\");", "intent": "Automatically save new photos posted on Instagram to a folder named \"Instagram Photos\" in Google Drive, using the photo's Source URL as the file URL and the Created At timestamp as the filename, and store them in the \"Social Media\" folder."}
{"original_description": "Choose a time and get detailed info about today's weather in Telegram, come rain or shine.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Meta.currentUserTime.hour() === 7) {\n  var location = \"New York\";\n  var currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  var currentTempCelsius = Weather.currentWeatherAtTime.CurrentTempCelsius;\n  var humidity = Weather.currentWeatherAtTime.Humidity;\n  var forecastUrl = Weather.currentWeatherAtTime.ForecastUrl;\n\n  Telegram.sendMessage.setText(\n    \"Current weather in \" + location + \": \" + currentCondition + \", Temperature: \" + currentTempCelsius + \"°C, Humidity: \" + humidity + \"%\\n5-day forecast: \" + forecastUrl\n  );\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n  Telegram.sendMessage.skip();\n}", "intent": "Get the current weather condition, temperature in Celsius, and humidity level at 07:00 in New York, and send a detailed message to the #weather_updates chat on Telegram, including a web page preview of the 5-day forecast."}
{"original_description": "A soundtrack for your next coffee break? Not a problem – with this applet you’ll set the theme just in time for the first sip.", "trigger_channel": "Home Connect Coffee Machine", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_coffee_machine.coffee_maker_begins"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which coffee machine?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Active program\nName of the active program.", "description": "Name of the active program.", "details": {"Slug": "active_program", "Filter code": "HcCoffeeMachine.coffeeMakerBegins.ActiveProgram", "Type": "String", "Example": "Espresso"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (HcCoffeeMachine.coffeeMakerBegins.ActiveProgram === \"Espresso\") {\n  Sonos.playFavorite.setFavorite(\"Relaxing Morning\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Not brewing Espresso program\");\n}", "intent": "When the Home Connect Coffee Machine starts brewing an Espresso program, play the 'Relaxing Morning' favorite on the Sonos speaker in the Living Room and include all grouped rooms."}
{"original_description": "If it's raining outside, you'll want change colors inside!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.ChangeColor", "Filter code method": "Magichue.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"magichue.ChangeColor\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.TempCelsius === \"18\" && Weather.currentConditionIs.location === \"New York\") {\n  Magichue.changeColor.setWhichLights(\"all living room lights\");\n  Magichue.changeColor.setColor(\"blue\");\n  Magichue.changeColor.setBrightness(\"medium\");\n} else {\n  Magichue.changeColor.skip(\"Weather conditions do not match.\");\n}", "intent": "If the current weather condition is rainy at a temperature of 18 degrees Celsius in the location of New York, then change the color of all living room lights to blue and set the brightness level to medium."}
{"original_description": "Whenever it starts raining, automatically close your garage door to help keep everything dry.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garageio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garageio.close_garage_door", "Filter code method": "Garageio.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"garageio.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Garageio.closeGarageDoor.setDoorToClose(\"Main Garage Door\");\n} else {\n  Garageio.closeGarageDoor.skip(\"It's not raining.\");\n}", "intent": "When the current weather condition is 'Rain' in your location, close the 'Main Garage Door' to keep everything dry."}
{"original_description": "Send the email to trigger@applet.ifttt.com and add the URL of the transfer to the body of the message.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "put.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "putio.new_transfer", "Filter code method": "Putio.newTransfer.skip(string?: reason)", "Runtime method": "runAction(\"putio.new_transfer\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Other", "description": "Text input > Other", "details": {"Label": "What URL?", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Putio.newTransfer.setUrl(string: url)"}}, {"section": "Action fields", "title": "Folder\nText input > Other", "description": "Text input > Other", "details": {"Label": "Which folder ID?", "Helper text": "File will be downloaded into this folder. Folder ID can be found in the address bar when the folder is open in your browser. If the folder with given ID does not exist, the files will be downloaded into your default download folder.", "Slug": "folder_id", "Required": "false", "Can have default value": "true"}}], "filter_code": "if (Email.sendIftttAnEmailTagged.Tag === \"#new-transfer\" && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\" && Email.sendIftttAnEmailTagged.AttachmentUrl) {\n  Email.sendEmailToTriggerApplet.setSubject(\"New File Transfer\");\n  Email.sendEmailToTriggerApplet.setBody(\"http://example.put.io/download/123456\");\n} else {\n  Putio.newTransfer.skip(\"Conditions not met.\");\n}", "intent": "Send an email to trigger@applet.ifttt.com with the subject \"New File Transfer\" and the body containing the URL of the transfer, http://example.put.io/download/123456, when a new email is received from somebody@gmail.com with the tag #new-transfer and an attachment."}
{"original_description": "Use RainMachine and WUnderground IFTTT services to start a zone with the desired amount of time when the outside temperature rises above the value you provide.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.start_zone", "Filter code method": "RainMachine.startZone.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.start_zone\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone number?", "Helper text": "The gardening zone number", "Slug": "zone_number", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Time\nDropdown list", "description": "Dropdown list", "details": {"Label": "For how long?", "Helper text": "Duration in minutes.", "Slug": "time", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75 && Weather.currentTemperatureRisesAbove.Location === \"New York\") {\n  RainMachine.startZone.setZoneNumber(3);\n  RainMachine.startZone.setTime(30);\n} else {\n  RainMachine.startZone.skip(\"Temperature is not above 75°F or location is not New York.\");\n}", "intent": "When the outside temperature rises above 75°F in New York, start zone 3 of the RainMachine for 30 minutes."}
{"original_description": "Start my Moodo with my chosen fragrance in the morning when I get up.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Moodo & Moodo AIR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moodo.box_start", "Filter code method": "Moodo.boxStart.skip(string?: reason)", "Runtime method": "runAction(\"moodo.box_start\", {})"}, "action_details": [{"section": "Action fields", "title": "Box\nDropdown list", "description": "Dropdown list", "details": {"Label": "Moodo device name", "Slug": "box", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "Favorite name", "Slug": "favorite", "Required": "false", "Can have default value": "false"}}], "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 7 && minute === 0) {\n  Moodo.boxStart.setBox(\"Living Room Moodo\");\n  Moodo.boxStart.setFavorite(\"Morning Breeze\");\n} else {\n  Moodo.boxStart.skip(\"Not the scheduled start time.\");\n}", "intent": "Start my Moodo device, named \"Living Room Moodo\", with my favorite fragrance \"Morning Breeze\" every day at 7:00 AM when I wake up."}
{"original_description": "15 minutes before each event in a specified Google calendar, event details are forwarded to your IntuiFace experiences.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Intuiface", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "intuiface.sendMessage", "Filter code method": "Intuiface.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"intuiface.sendMessage\", {})"}, "action_details": [{"section": "Action fields", "title": "Api key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Credential key", "Helper text": "To get your key, go to the <a href=\"https://myintuiface.intuilab.com/credentialkeys?scope=IFTTT_Webtriggers\" target=\"_blank\">Credential keys page</a> then paste the generated key here.", "Slug": "api_key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Msg\nText input > Other", "description": "Text input > Other", "details": {"Label": "Message", "Helper text": "Value to send to all selected experiences. For details , go to the <a href=\"http://support.intuilab.com/kb/web-triggers/web-triggers-overview\" target=\"_blank\">Web Triggers Interface Asset page</a>.", "Slug": "msg", "Required": "true", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setMsg(string: msg)"}}, {"section": "Action fields", "title": "P1\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 1", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p1", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP1(string: p1)"}}, {"section": "Action fields", "title": "P2\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 2", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p2", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP2(string: p2)"}}, {"section": "Action fields", "title": "P3\nText input > Other", "description": "Text input > Other", "details": {"Label": "Parameter 3", "Helper text": "Optional: An additional value that can be sent to all selected experiences.", "Slug": "p3", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setP3(string: p3)"}}, {"section": "Action fields", "title": "Xpnames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Experience name(s)", "Helper text": "Optional: Select experience(s) based on their name(s). For multiple experiences, use a comma separated list.", "Slug": "xpNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setXp Names(string: xpNames)"}}, {"section": "Action fields", "title": "Devicenames\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player name(s)", "Helper text": "Optional: Select Player(s) based on their device name(s). For multiple Players, use a comma separated list.", "Slug": "deviceNames", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setDevice Names(string: deviceNames)"}}, {"section": "Action fields", "title": "Tags\nText input > Other", "description": "Text input > Other", "details": {"Label": "Player tag(s)", "Helper text": "Optional: Select Player(s) based on their tag(s). For multiple tags, use a comma separated list. Players with one or more matching tags will be selected.", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Intuiface.sendMessage.setTags(string: tags)"}}], "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Team Meeting\" && GoogleCalendar.anyEventStarts.calendar === \"Work\" && GoogleCalendar.anyEventStarts.offset === 15) {\n  var message = \"Event: \" + GoogleCalendar.anyEventStarts.Title + \"\\nDescription: \" + GoogleCalendar.anyEventStarts.Description + \"\\nLocation: \" + GoogleCalendar.anyEventStarts.Where + \"\\nStarts: \" + GoogleCalendar.anyEventStarts.Starts;\n  Intuiface.sendMessage.setMsg(message);\n  Intuiface.sendMessage.setXpNames(\"ConferenceRoom,OfficeDisplay\");\n  Intuiface.sendMessage.setP1(GoogleCalendar.anyEventStarts.EventUrl);\n  if (GoogleCalendar.anyEventStarts.VideoCallUrl) {\n    Intuiface.sendMessage.setP2(GoogleCalendar.anyEventStarts.VideoCallUrl);\n  }\n  Intuiface.sendMessage.setApi_key(\"abcdefg123456\");\n} else {\n  Intuiface.sendMessage.skip(\"Event does not match the specified criteria.\");\n}", "intent": "When an event titled \"Team Meeting\" starts in 15 minutes in my \"Work\" Google calendar, send a message with the event details, including title, description, location, and start time, to all Intuiface experiences named \"ConferenceRoom\" and \"OfficeDisplay\", using the credential key \"abcdefg123456\", and include additional parameters such as the event URL and video call URL if available."}
{"original_description": "You'll hear a reminder in your Orion group fifteen minutes before the next event in your calendar starts.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.any_event_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Helper text": "Select a calendar", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.anyEventStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.anyEventStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.anyEventStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.anyEventStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.anyEventStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.anyEventStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.anyEventStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.anyEventStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Team Meeting\" && GoogleCalendar.anyEventStarts.Where === \"Building A, Room 101\" && GoogleCalendar.anyEventStarts.calendar === \"Work\") {\n  var message = \"You have a team meeting in 15 minutes at \" + GoogleCalendar.anyEventStarts.Where;\n  Orion.sendVoiceMessage.setMessage(message);\n  Orion.sendVoiceMessage.setGroup(\"Marketing Team\");\n} else {\n  Orion.sendVoiceMessage.skip(\"Event does not match the specified criteria.\");\n}", "intent": "When an event titled \"Team Meeting\" starts in 15 minutes in my \"Work\" calendar, send a voice message to the \"Marketing Team\" group in Orion saying \"You have a team meeting in 15 minutes at Building A, Room 101\"."}
{"original_description": "This is an applet that starts a scenario in WeBeHome based on a Button widget", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WeBeHome - Security and Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "webehome.start_scenario", "Filter code method": "Webehome.startScenario.skip(string?: reason)", "Runtime method": "runAction(\"webehome.start_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Actionid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select scenario to be started", "Slug": "actionid", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Webehome.startScenario.setActionid(\"Good Morning\");\n} else {\n  Webehome.startScenario.skip(\"Location does not match.\");\n}", "intent": "Start the \"Good Morning\" scenario in WeBeHome when the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and share the event details on https://ifttt.com/share/McFwJfDH9Ns."}
{"original_description": "Start the Neato after a Litter-Robot Clean Cycle completes", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Neato", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "neato.start_cleaning", "Filter code method": "Neato.startCleaning.skip(string?: reason)", "Runtime method": "runAction(\"neato.start_cleaning\", {})"}, "action_details": [{"section": "Action fields", "title": "Select a robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a robot", "Slug": "select_a_robot", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Clean Cycle\") {\n  Neato.startCleaning.setSelectARobot(\"BotVac\");\n} else {\n  Neato.startCleaning.skip(\"Litter-Robot event does not match the specified conditions.\");\n}", "intent": "Start the Neato BotVac after the Litter-Robot named \"My Litter Robot\" completes a Clean Cycle."}
{"original_description": "Start my Moodo with my chosen fragrance before bedtime.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Moodo & Moodo AIR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moodo.box_start", "Filter code method": "Moodo.boxStart.skip(string?: reason)", "Runtime method": "runAction(\"moodo.box_start\", {})"}, "action_details": [{"section": "Action fields", "title": "Box\nDropdown list", "description": "Dropdown list", "details": {"Label": "Moodo device name", "Slug": "box", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "Favorite name", "Slug": "favorite", "Required": "false", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"10:00 PM\";\nif (checkTime === targetTime) {\n  Moodo.boxStart.setBox(\"Living Room Moodo\");\n  Moodo.boxStart.setFavorite(\"Relaxing Evening\");\n} else {\n  Moodo.boxStart.skip(\"Not the scheduled time for Relaxing Evening.\");\n}", "intent": "Start my Moodo device, named \"Living Room Moodo\", with the favorite fragrance \"Relaxing Evening\" 30 minutes before bedtime, at 10:00 PM every day."}
{"original_description": "Start my iRobot vacuum to help clean the dust when the dust level of my sensor is higher than my threshold.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Uhoo.sensorNotification.SensorName === \"PM2.5\" && Uhoo.sensorNotification.UhooName === \"My Home\" && parseFloat(Uhoo.sensorNotification.SensorValue) > 15 && Irobot.startRobot.skip !== undefined) {\n  if (Irobot.robotName !== \"Living Room Cleaner\") {\n    Irobot.startRobot.skip(\"The robot name does not match 'Living Room Cleaner'.\");\n  } else {\n    // Proceed with starting the robot as all conditions are met\n  }\n} else {\n  Irobot.startRobot.skip(\"Conditions for starting the robot are not met.\");\n}", "intent": "Start my iRobot vacuum, named \"Living Room Cleaner\", to help clean the dust when the PM2.5 level from my uHoo sensor, located in \"My Home\", exceeds a threshold of 15 ug/m3."}
{"original_description": "Starte in COQON ein Programm oder eine Szene wenn in deinem Google Kalender ein Eintrag startet.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"Team Meeting\" && GoogleCalendar.eventFromSearchStarts.offset === \"-PT15M\") {\n  Coqon.simpleRuleAction.setaction_code(\"Morning Routine\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Event title or offset does not match.\");\n}", "intent": "Start the \"Morning Routine\" program in COQON when an event titled \"Team Meeting\" starts in my primary Google Calendar, with a 15-minute offset before the meeting begins."}
{"original_description": "Receive a Microsoft Teams message when an event from search on your Google Calendar is about to begin.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"Team Meeting\" \n    && GoogleCalendar.eventFromSearchStarts.Description.includes(\"urgent\") \n    && GoogleCalendar.eventFromSearchStarts.Offset === 15) {\n  var messageBody = `Event: ${GoogleCalendar.eventFromSearchStarts.Title} is starting soon at ${GoogleCalendar.eventFromSearchStarts.Where}`;\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Upcoming Event\");\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Event does not match the specified criteria.\");\n}", "intent": "When an event titled \"Team Meeting\" from my \"Work\" calendar, containing the keyword \"urgent\", is about to start 15 minutes in advance, send a message with high urgency to the \"#general\" channel in Microsoft Teams, including the event's title, description, location, and start time, such as \"Event: Team Meeting is starting soon at Building A, Room 101\"."}
{"original_description": "Keep your Wordpress fresh and up-to-date with your Instagrams. Note: only works for single photo posts.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_photo_post_wp", "Filter code method": "Wordpress.createPhotoPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_photo_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Source url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "source_url", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setSource Url(string: source_url)"}}, {"section": "Action fields", "title": "Caption\nText input", "description": "Text input", "details": {"Label": "Caption", "Helper text": "Optional", "Slug": "caption", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setCaption(string: caption)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPhotoPostWp.setPost Status(string: post_status)"}}], "filter_code": "Wordpress.createPhotoPostWp.setTitle(\"Instagram Photo Update\");\nWordpress.createPhotoPostWp.setSourceUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nWordpress.createPhotoPostWp.setCaption(Instagram.anyNewPhotoByYou.Caption);\nWordpress.createPhotoPostWp.setCategories(\"Social Media\");\nWordpress.createPhotoPostWp.setTags(\"Instagram, Photo\");\nWordpress.createPhotoPostWp.setPostStatus(\"Published\");", "intent": "Create a new photo post on WordPress with the title \"Instagram Photo Update\" and the source URL set to the URL of the newly posted Instagram photo, including the caption from the Instagram post as the photo's caption, categorized under \"Social Media\" and tagged with \"Instagram\" and \"Photo\", and set the post status to \"Published\"."}
{"original_description": "Arm Away with a press of a button!", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "SkylinkNet", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "skylinknet.alarm", "Filter code method": "Skylinknet.alarm.skip(string?: reason)", "Runtime method": "runAction(\"skylinknet.alarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Hub\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Hub?", "Slug": "hub_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Key\nText input > Other", "description": "Text input > Other", "details": {"Label": "Hub Password", "Slug": "key", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Alarm\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Mode?", "Slug": "alarm", "Required": "true", "Can have default value": "true", "Filter code method": "Skylinknet.alarm.setAlarm(string: alarm)"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Skylinknet.alarm.setAlarm(\"Away\");\n  Skylinknet.alarm.setHubId(\"Home Security\");\n  Skylinknet.alarm.setKey(\"MySecureKey\");\n} else {\n  Skylinknet.alarm.skip(\"Conditions not met.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, arm away the SkylinkNet hub named \"Home Security\" with the password \"MySecureKey\" and set the alarm mode to \"Away\" if the button press occurs between 07:00 and 19:00."}
{"original_description": "Customize this Applet with the date and time you want to be reminded, and you'll get a note so you don't forget to celebrate. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime === \"August 23 at 11:01PM\") {\n  Email.sendMeEmail.setSubject(\"Happy Birthday\");\n  Email.sendMeEmail.setBody(\"Don't forget to celebrate your birthday today!\");\n} else {\n  Email.sendMeEmail.skip(\"It's not August 23rd at 11:01 PM.\");\n}", "intent": "Send me an email with the subject \"Happy Birthday\" and the body \"Don't forget to celebrate your birthday today!\" every year on August 23rd at 11:01 PM."}
{"original_description": "Use this Recipe to update Google Contacts with any new Verizon Contact to keep them synchronized", "trigger_channel": "Verizon Cloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "verizon_cloud.new_contact"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "VerizonCloud.newContact.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nThe name of the contact.", "description": "The name of the contact.", "details": {"Slug": "name", "Filter code": "VerizonCloud.newContact.Name", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Email\nThe email address of the contact.", "description": "The email address of the contact.", "details": {"Slug": "email", "Filter code": "VerizonCloud.newContact.Email", "Type": "String", "Example": "johnsmith@ifttt.com"}}, {"section": "Ingredients", "title": "Phone\nThe phone number of the contact.", "description": "The phone number of the contact.", "details": {"Slug": "phone", "Filter code": "VerizonCloud.newContact.Phone", "Type": "String", "Example": "4155550000"}}], "action_channel": "Google Contacts", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_contacts.create_new_contact", "Filter code method": "GoogleContacts.createNewContact.skip(string?: reason)", "Runtime method": "runAction(\"google_contacts.create_new_contact\", {})"}, "action_details": [{"section": "Action fields", "title": "Full name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Full name", "Helper text": "Required", "Slug": "full_name", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setFull Name(string: full_name)"}}, {"section": "Action fields", "title": "Which group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "Optional group to assign the contact to.", "Slug": "which_group", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "PhoneNumber", "Helper text": "Optional", "Slug": "phone_number", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setPhone Number(string: phone_number)"}}, {"section": "Action fields", "title": "Email\nText input > Other", "description": "Text input > Other", "details": {"Label": "Email", "Helper text": "Optional", "Slug": "email", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setEmail(string: email)"}}, {"section": "Action fields", "title": "Address\nText input > Other", "description": "Text input > Other", "details": {"Label": "Address", "Helper text": "Optional", "Slug": "address", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setAddress(string: address)"}}, {"section": "Action fields", "title": "Job title\nText input > Other", "description": "Text input > Other", "details": {"Label": "Job title", "Helper text": "Optional", "Slug": "job_title", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setJob Title(string: job_title)"}}, {"section": "Action fields", "title": "Company\nText input > Other", "description": "Text input > Other", "details": {"Label": "Company", "Helper text": "Optional", "Slug": "company", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setCompany(string: company)"}}, {"section": "Action fields", "title": "Notes\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Notes", "Helper text": "Optional", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Upload photo\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo Url", "Helper text": "Optional url to a photo of the new contact", "Slug": "upload_photo", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleContacts.createNewContact.setUpload Photo(string: upload_photo)"}}], "filter_code": "if (VerizonCloud.newContact.Name === \"John Smith\" && VerizonCloud.newContact.Email === \"johnsmith@ifttt.com\" && VerizonCloud.newContact.Phone === \"4155550000\") {\n  GoogleContacts.createNewContact.setFull Name(VerizonCloud.newContact.Name);\n  GoogleContacts.createNewContact.setPhone Number(VerizonCloud.newContact.Phone);\n  GoogleContacts.createNewContact.setEmail(VerizonCloud.newContact.Email);\n  GoogleContacts.createNewContact.setWhich group(\"Friends\");\n} else {\n  GoogleContacts.createNewContact.skip(\"Contact does not match the specified criteria.\");\n}", "intent": "When a new contact is created in Verizon Cloud with a name like \"John Smith\", email \"johnsmith@ifttt.com\", and phone number \"4155550000\", create a new contact in Google Contacts with the full name \"John Smith\", phone number \"4155550000\", and email \"johnsmith@ifttt.com\", and assign it to the group \"Friends\"."}
{"original_description": "Set the color of your smart bulb with a button press", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour <= 19 && \n    Math.abs(latitude - 37.8267) < 0.001 && \n    Math.abs(longitude - (-122.4230)) < 0.001) {\n  Kasa.changeColorTemp.setDevice(\"Living Room Bulb\");\n  Kasa.changeColorTemp.setColorTemperature(\"cool\");\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColorTemp.skip(\"Conditions not met.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, set the color temperature of the TP-Link Kasa device named \"Living Room Bulb\" to cool (2700K) with a transition duration of 2 seconds."}
{"original_description": "Set smart light bulb color at the press of a button. This works with TP-Link LB130 and LB230 smart wifi light bulbs.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Kasa.changeColorTemp.setDevice(\"TP-Link LB130 smart light bulb in the living room\");\n  Kasa.changeColorTemp.setColorTemperature(\"2700K\");\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"1000\");\n} else {\n  Kasa.changeColorTemp.skip(\"Location does not match\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, set the TP-Link LB130 smart light bulb in the living room to a warm color temperature of 2700K with a transition duration of 1 second."}
{"original_description": "All you have to do is paste in a specific RSS Feed in the field below and select the channel you want to keep up-to-date with the latest news", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "Slack.postToChannel.setChannel(\"#general\");\nSlack.postToChannel.setTitle(\"New Blog Post\");\nSlack.postToChannel.setMessage(\"Check out the latest article: \" + Feed.newFeedItem.EntryTitle + \" - \" + Feed.newFeedItem.EntryContent);\nSlack.postToChannel.setImageUrl(Feed.newFeedItem.EntryImageUrl);", "intent": "Post a message to the #general channel on Slack with the title \"New Blog Post\" and the message \"Check out the latest article: {{EntryTitle}} - {{EntryContent}}\" whenever a new item is published in the ifttt Blog RSS feed, including a thumbnail image from the entry's first image URL."}
{"original_description": "Sends new posts via your RSS feed to Buffer with an image", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer_with_photo", "Filter code method": "Buffer.addToBufferWithPhoto.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer_with_photo\", {})"}, "action_details": [{"section": "Action fields", "title": "Photo url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Photo URL", "Slug": "photo_url", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setPhoto Url(string: photo_url)"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Description", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBufferWithPhoto.setMessage(string: message)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"My Blog\") {\n  var message = Feed.newFeedItem.EntryTitle + \": \" + Feed.newFeedItem.EntryContent;\n  Buffer.addToBufferWithPhoto.setPhotoUrl(Feed.newFeedItem.EntryImageUrl);\n  Buffer.addToBufferWithPhoto.setMessage(message);\n} else {\n  Buffer.addToBufferWithPhoto.skip(\"Feed title does not match 'My Blog'\");\n}", "intent": "When a new post is published to the \"My Blog\" RSS feed, send the post title and content as a message to Buffer with the first image from the post."}
{"original_description": "The Library of Congress posts news releases every so often. Stay up-to-date with the latest!", "trigger_channel": "Library of Congress", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "loc.latest_news"}, "trigger_details": [{"section": "Ingredients", "title": "Headline\nThe headline for the latest news.", "description": "The headline for the latest news.", "details": {"Slug": "EntryTitle", "Filter code": "Loc.latestNews.Headline", "Type": "String", "Example": "Latest News: Library of Congress Welcomes Junior Fellows"}}, {"section": "Ingredients", "title": "News url\nThe URL to the news article.", "description": "The URL to the news article.", "details": {"Slug": "EntryUrl", "Filter code": "Loc.latestNews.NewsUrl", "Type": "String", "Example": "https://www.loc.gov/item/prn-17-078/?loclr=ealn"}}, {"section": "Ingredients", "title": "Content html\nThe news content, may contain HTML.", "description": "The news content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Loc.latestNews.ContentHtml", "Type": "String", "Example": "<p><span>The Library of Congress this week welcomed 37 undergraduate..."}}, {"section": "Ingredients", "title": "Published date\nDate the news was published.", "description": "Date the news was published.", "details": {"Slug": "EntryPublished", "Filter code": "Loc.latestNews.PublishedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var headline = Loc.latestNews.Headline;\nvar publishedDate = new Date(Loc.latestNews.PublishedDate);\nvar currentTime = new Date();\nvar timeDifference = (currentTime - publishedDate) / (1000 * 3600);\n\nif (headline.includes(\"Announcement\") && timeDifference <= 24) {\n  var message = \"New update from the Library of Congress: Latest News: \" + headline;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Does not match the criteria.\");\n}", "intent": "When the Library of Congress posts a new news release with a headline containing the word \"Announcement\" and the publication date is within the last 24 hours, send a notification with the message \"New update from the Library of Congress: Latest News: {EntryTitle}\" where {EntryTitle} is the actual headline of the latest news, to my primary notifications channel."}
{"original_description": "Lock a door with SmartThings and Blink arms", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.locked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nThe date and time the lock was locked.", "description": "The date and time the lock was locked.", "details": {"Slug": "LockedAt", "Filter code": "SmartthingsV2.lockedSmartthings.LockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.lockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.lockedSmartthings.DeviceName === \"Bedroom lock\" && SmartthingsV2.lockedSmartthings.LockedAt === \"April 1st, 2024 at 08:00AM\") {\n  Blink.networkDisarm.setNetwork(\"Home\");\n} else {\n  Blink.networkDisarm.skip(\"Conditions not met to disarm the network.\");\n}", "intent": "Lock the Bedroom lock device with SmartThings when it is locked at April 1st, 2024, at 08:00AM, and then disarm the Home network system with Blink."}
{"original_description": "The EDF is one of the world's largest environmental organizations. Get an email with the content when they write a new article about the topic you'd like to track. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  if (Feed.newFeedItemMatches.EntryContent.includes(\"sustainability\") || Feed.newFeedItemMatches.EntryTitle.includes(\"sustainability\")) {\n    Email.sendMeEmail.setSubject(\"New EDF Article: \" + Feed.newFeedItemMatches.EntryTitle);\n    Email.sendMeEmail.setBody(Feed.newFeedItemMatches.EntryContent);\n  } else {\n    Email.sendMeEmail.skip(\"Entry does not match the keyword 'sustainability'.\");\n  }\n} else {\n  Email.sendMeEmail.skip(\"Outside of active hours (8 AM to 5 PM).\");\n}", "intent": "Send me an email with the subject \"New EDF Article: {EntryTitle}\" and the body containing the entry content \"{EntryContent}\" from the Environmental Defense Fund's RSS feed at https://www.edf.org/feeds/rss when a new article is published that matches the keyword \"sustainability\" between 08:00 and 17:00 every day."}
{"original_description": "Unlock a door with SmartThings and Blink disarms", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.locked_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nThe date and time the lock was locked.", "description": "The date and time the lock was locked.", "details": {"Slug": "LockedAt", "Filter code": "SmartthingsV2.lockedSmartthings.LockedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.lockedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom lock"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.lockedSmartthings.DeviceName === \"Bedroom lock\" && SmartthingsV2.lockedSmartthings.LockedAt === \"April 1st, 2016 at 12:43PM\") {\n  Blink.networkDisarm.setNetwork(\"Home Security\");\n} else {\n  Blink.networkDisarm.skip(\"Conditions not met to disarm the network.\");\n}", "intent": "Unlock the Bedroom lock device with SmartThings when it is locked at April 1st, 2016 at 12:43PM and disarm the Blink network system named Home Security."}
{"original_description": "Automatically add Tumblr photo posts to your Buffer Queue in a jiffy with this Applet.", "trigger_channel": "Tumblr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "tumblr.new_photo_post"}, "trigger_details": [{"section": "Trigger fields", "title": "Tumblelog\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tumblelog", "Helper text": "Enter the tumblelog name that this trigger should fire for", "Slug": "tumblelog", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Post body text\nThe post's body (text only)", "description": "The post's body (text only)", "details": {"Slug": "post_body_text", "Filter code": "Tumblr.newPhotoPost.PostBodyText", "Type": "String", "Example": "This is the body of a post. Neat."}}, {"section": "Ingredients", "title": "Url\nThe post URL", "description": "The post URL", "details": {"Slug": "url", "Filter code": "Tumblr.newPhotoPost.Url", "Type": "Web URL", "Example": "https://staff.tumblr.com/post/659803739627094017"}}, {"section": "Ingredients", "title": "Post body html\nThe post's body (HTML)", "description": "The post's body (HTML)", "details": {"Slug": "post_body_html", "Filter code": "Tumblr.newPhotoPost.PostBodyHtml", "Type": "String", "Example": "<figure class=\"tmblr-full\"><img src=\"https://64.media.tumblr.com/a-photo.jpg\"></figure><p>This is an HTML body.</p>"}}, {"section": "Ingredients", "title": "Thumbnail url\nThe thumbnail image URL for the post", "description": "The thumbnail image URL for the post", "details": {"Slug": "thumbnail_url", "Filter code": "Tumblr.newPhotoPost.ThumbnailUrl", "Type": "Web URL", "Example": "https://64.media.tumblr.com/a18c8063bf9d095d99f12b51d3dd1eda/57803298a6ae7123-0a/s1280x1920/fb2fce67958156e2231da15522ddb6850e1559ff.gifv"}}, {"section": "Ingredients", "title": "Full image url\nThe full size image URL", "description": "The full size image URL", "details": {"Slug": "full_image_url", "Filter code": "Tumblr.newPhotoPost.FullImageUrl", "Type": "Image URL", "Example": "https://64.media.tumblr.com/fd654c32f041cb02c757b5646c1cf9e1/a4c5782524284f82-d5/s1280x1920/8e97caae5a975889b3e170e42ea064b68410300a.jpg"}}, {"section": "Ingredients", "title": "Post tags\nThe post's tags", "description": "The post's tags", "details": {"Slug": "post_tags", "Filter code": "Tumblr.newPhotoPost.PostTags", "Type": "String", "Example": "Sky,Earth,Wind,Fire"}}, {"section": "Ingredients", "title": "Post\nThe ID of the post that has been created", "description": "The ID of the post that has been created", "details": {"Slug": "post_id", "Filter code": "Tumblr.newPhotoPost.PostId", "Type": "String", "Example": "123456789"}}, {"section": "Ingredients", "title": "Tumblelog\nThe name of the Tumblelog that published the post", "description": "The name of the Tumblelog that published the post", "details": {"Slug": "tumblelog", "Filter code": "Tumblr.newPhotoPost.Tumblelog", "Type": "String", "Example": "staff"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Tumblr.newPhotoPost.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "var tumblelog = Tumblr.newPhotoPost.Tumblelog;\nvar tags = Tumblr.newPhotoPost.PostTags;\nvar bodyText = Tumblr.newPhotoPost.PostBodyText;\nvar fullImageUrl = Tumblr.newPhotoPost.FullImageUrl;\nvar hour = Meta.currentUserTime.hour();\n\nif (tumblelog === \"staff\" && (tags.includes(\"Sky\") || tags.includes(\"Earth\")) && bodyText.includes(\"Neat\") && (hour >= 7 && hour < 19)) {\n  Buffer.addToBuffer.setMessage(fullImageUrl);\n} else {\n  Buffer.addToBuffer.skip(\"Conditions not met for adding to Buffer.\");\n}", "intent": "When a new photo post is published on the \"staff\" Tumblelog, with tags including \"Sky\" or \"Earth\", and the post's body text contains the word \"Neat\", automatically add the post's full image URL to Buffer as an update, scheduling it for the next available time slot between 07:00 and 19:00."}
{"original_description": "Keep your Wordpress fresh and up-to-date with your Instagram videos.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_post_wp", "Filter code method": "Wordpress.createPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setBody(string: body)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setPost Status(string: post_status)"}}], "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"new\")) {\n  Wordpress.createPostWp.setTitle(\"New Video Alert\");\n  Wordpress.createPostWp.setBody(Instagram.anyNewVideoByYouInstagram.EmbedCode);\n  Wordpress.createPostWp.setCategories(\"Social Media\");\n  Wordpress.createPostWp.setTags(\"Instagram, Video\");\n  Wordpress.createPostWp.setPostStatus(\"publish\");\n} else {\n  Wordpress.createPostWp.skip(\"The caption does not contain the keyword 'new'.\");\n}", "intent": "When a new video is uploaded to my Instagram account with a caption containing the keyword \"new\", create a new post on my WordPress blog titled \"New Video Alert\" and set the body to include the embed code of the video, categorize it under \"Social Media\" and tag it with \"Instagram\" and \"Video\", then publish the post immediately."}
{"original_description": "With this applet your house is being cleaned by Roomba when activating your all-off function in Niko Home Control", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.start_robot", "Filter code method": "Irobot.startRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.start_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (Nikohomecontrol.routineActivated.Routine === \"All Off\" && hour === 19 && minute === 0) {\n  Irobot.startRobot.setRobotName(\"Living Room Cleaner\");\n} else {\n  Irobot.startRobot.skip(\"Condition not met.\");\n}", "intent": "When the \"All Off\" routine is activated in Niko Home Control at 7:00 PM, start the Roomba robot named \"Living Room Cleaner\"."}
{"original_description": "Every Saturday you'll get an email with the latest Caltrain news to help you plan your weekly commute. ", "trigger_channel": "Caltrain", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "caltrain.new_update"}, "trigger_details": [{"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Caltrain.newUpdate.EntryTitle", "Type": "String", "Example": "SamTrans and Caltrain Get You to the San Mateo County Fair"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Caltrain.newUpdate.EntryUrl", "Type": "String", "Example": "http://ift.tt/2qUi9lf"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Caltrain.newUpdate.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 6) { // 6 represents Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Saturday.\");\n}\n\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (hour !== 8 || minute !== 0) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 08:00 yet.\");\n}\n\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setTitle(\"Caltrain Weekly Update\");\nvar message = \"Get the latest Caltrain updates here: \" + Caltrain.newUpdate.EntryUrl;\nEmailDigest.sendWeeklyEmail.setMessage(message);", "intent": "Send a weekly email digest every Saturday at 08:00 with the latest Caltrain news, including the entry title, entry URL, and entry published date, to help plan the weekly commute, with the email titled \"Caltrain Weekly Update\" and containing a message that says \"Get the latest Caltrain updates here: http://ift.tt/2qUi9lf\"."}
{"original_description": "Save £1 every time you post on Instagram with a specific hashtag", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.new_photo_by_you_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Caption\nThe full caption", "description": "The full caption", "details": {"Slug": "Caption", "Filter code": "Instagram.newPhotoByYouTagged.Caption", "Type": "String", "Example": "A cool photo #tbt #IFTTT"}}, {"section": "Ingredients", "title": "Caption no tag\nThe caption without the specified tag", "description": "The caption without the specified tag", "details": {"Slug": "CaptionNoTag", "Filter code": "Instagram.newPhotoByYouTagged.CaptionNoTag", "Type": "String", "Example": "A cool photo #IFTTT"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.newPhotoByYouTagged.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.newPhotoByYouTagged.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.newPhotoByYouTagged.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.newPhotoByYouTagged.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#SummerVibes\")) {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"No #SummerVibes hashtag found in the caption.\");\n}", "intent": "Save £1 to your Dozens savings account every time you post a photo on Instagram with the hashtag #SummerVibes."}
{"original_description": "Automatically turn my Nest thermostat up or down to align with my ideal internal temperature when the outside is above or below my ideal temperature.", "trigger_channel": "uHoo", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uhoo.sensor_notification"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which uHoo?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Sensor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air quality parameter?", "Slug": "sensor", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input", "description": "Text input", "details": {"Label": "What is the target level?", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Sign\nDropdown list", "description": "Dropdown list", "details": {"Label": "Trigger alert when above or below target level?", "Slug": "sign", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Uhoo.sensorNotification.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Uhoo name\nThis is the name of your uHoo.", "description": "This is the name of your uHoo.", "details": {"Slug": "uhoo_name", "Filter code": "Uhoo.sensorNotification.UhooName", "Type": "String", "Example": "My Home"}}, {"section": "Ingredients", "title": "Sensor name\nThis is the parameter that triggered the alert.", "description": "This is the parameter that triggered the alert.", "details": {"Slug": "sensor", "Filter code": "Uhoo.sensorNotification.SensorName", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Sensor value\nThis is the parameter value when alert happened.", "description": "This is the parameter value when alert happened.", "details": {"Slug": "sensor_data", "Filter code": "Uhoo.sensorNotification.SensorValue", "Type": "String", "Example": "23.5"}}, {"section": "Ingredients", "title": "Sensor unit\nThis is the parameter unit.", "description": "This is the parameter unit.", "details": {"Slug": "sensor_unit", "Filter code": "Uhoo.sensorNotification.SensorUnit", "Type": "String", "Example": "°C"}}, {"section": "Ingredients", "title": "My threshold\nThis is the target level you set to trigger the alert.", "description": "This is the target level you set to trigger the alert.", "details": {"Slug": "my_threshold", "Filter code": "Uhoo.sensorNotification.MyThreshold", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Above or below\nThis tells you whether alert was sent when it's above or below your threshold", "description": "This tells you whether alert was sent when it's above or below your threshold", "details": {"Slug": "trigger_condition", "Filter code": "Uhoo.sensorNotification.AboveOrBelow", "Type": "String", "Example": "above"}}, {"section": "Ingredients", "title": "Data temperature\nThis is the Temperature value", "description": "This is the Temperature value", "details": {"Slug": "data_temp", "Filter code": "Uhoo.sensorNotification.DataTemperature", "Type": "String", "Example": "23.4"}}, {"section": "Ingredients", "title": "Data humidity\nThis is the Relative Humidity in %", "description": "This is the Relative Humidity in %", "details": {"Slug": "data_humidity", "Filter code": "Uhoo.sensorNotification.DataHumidity", "Type": "String", "Example": "56.7"}}, {"section": "Ingredients", "title": "Data pm25\nThis is the PM2.5 level in ug/m3", "description": "This is the PM2.5 level in ug/m3", "details": {"Slug": "data_dust", "Filter code": "Uhoo.sensorNotification.DataPm25", "Type": "String", "Example": "12.3"}}, {"section": "Ingredients", "title": "Data co2\nThis is the Carbon Dioxide (CO2) level in ppm", "description": "This is the Carbon Dioxide (CO2) level in ppm", "details": {"Slug": "data_co2", "Filter code": "Uhoo.sensorNotification.DataCo2", "Type": "String", "Example": "437"}}, {"section": "Ingredients", "title": "Data co\nThis is the Carbon Monoxide (CO) level in ppm", "description": "This is the Carbon Monoxide (CO) level in ppm", "details": {"Slug": "data_co", "Filter code": "Uhoo.sensorNotification.DataCo", "Type": "String", "Example": "1.3"}}, {"section": "Ingredients", "title": "Data tvoc\nThis is the TVOC level in ppb", "description": "This is the TVOC level in ppb", "details": {"Slug": "data_voc", "Filter code": "Uhoo.sensorNotification.DataTvoc", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Data no2\nThis is the Nitrogen Dioxide (NO2) level in ppb", "description": "This is the Nitrogen Dioxide (NO2) level in ppb", "details": {"Slug": "data_no2", "Filter code": "Uhoo.sensorNotification.DataNo2", "Type": "String", "Example": "12"}}, {"section": "Ingredients", "title": "Data ozone\nThis is the Ozone level in ppb", "description": "This is the Ozone level in ppb", "details": {"Slug": "data_ozone", "Filter code": "Uhoo.sensorNotification.DataOzone", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Data air pressure\nThis is the Air Pressure level in hPa", "description": "This is the Air Pressure level in hPa", "details": {"Slug": "data_airpressure", "Filter code": "Uhoo.sensorNotification.DataAirPressure", "Type": "String", "Example": "1013.0"}}, {"section": "Ingredients", "title": "Data virus index\nThis is the uHoo Virus Index", "description": "This is the uHoo Virus Index", "details": {"Slug": "data_virusindex", "Filter code": "Uhoo.sensorNotification.DataVirusIndex", "Type": "String", "Example": "7"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Uhoo.sensorNotification.SensorName === \"Temperature\" && Uhoo.sensorNotification.UhooName === \"My Home\") {\n  var outsideTemp = parseFloat(Uhoo.sensorNotification.DataTemperature);\n  if (outsideTemp > 25 || outsideTemp < 18) {\n    GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celcius\");\n    GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n  } else {\n    GoogleNestThermostat.setHotTemperature.skip(\"Outside temperature is within the comfortable range.\");\n  }\n}", "intent": "When the outside temperature exceeds 25°C or drops below 18°C, as detected by my uHoo sensor named \"My Home\", automatically adjust my Nest Thermostat, located in the living room, to a comfortable temperature of 22°C."}
{"original_description": "Launch a scenario exactly when it's time to! Launch the Good Morning scenario when it's time to wake up or the Good Night when it's time to go to bed. Everything is easier with IFTTT and Gideon Smart Home", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar morningHour = 7;\nvar nightHour = 22;\n\nif (hour === morningHour) {\n  Gideon.launchScenario.setScenarioName(\"Good Morning\");\n} else if (hour === nightHour) {\n  Gideon.launchScenario.setScenarioName(\"Good Night\");\n} else {\n  Gideon.launchScenario.skip(\"Not the scheduled time for a scenario.\");\n}", "intent": "Launch the Good Morning scenario at 07:00 every day and the Good Night scenario at 22:00 every day using Gideon Smart Home."}
{"original_description": "Set your Security Mode to \"Disarmed\" with a button press. Please make sure that your Bosma devices are set up and connected to the internet.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.switch_security_mode", "Filter code method": "Bosma.switchSecurityMode.skip(string?: reason)", "Runtime method": "runAction(\"bosma.switch_security_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Family\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which family do you want to control?", "Slug": "family", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Security Mode do you want to switch to?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Bosma.switchSecurityMode.setMode(string: mode)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 22) {\n  Bosma.switchSecurityMode.setMode(\"Disarmed\");\n  Bosma.switchSecurityMode.setFamily(\"Home\");\n} else {\n  Bosma.switchSecurityMode.skip(\"Button press is outside of the defined location or time range.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, set your Bosma Security Mode to \"Disarmed\" for the family \"Home\" if the current time is between 07:00 and 22:00."}
{"original_description": "Close garage door with the press of the Logitech POP button.", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (LogitechPop.shortPress.Battery > 50) {\n    if (LogitechPop.shortPress.Source === \"btn\" && LogitechPop.shortPress.Name === \"Living Room\") {\n      Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n    } else {\n      Garadget.closeDoor.skip(\"Either not a physical button press or wrong button name.\");\n    }\n  } else {\n    Garadget.closeDoor.skip(\"Battery level is 50 or below.\");\n  }\n} else {\n  Garadget.closeDoor.skip(\"Outside of allowed hours (07:00 to 22:00).\");\n}", "intent": "Close the garage door with ID \"Main Garage Door\" when the Logitech POP button named \"Living Room\" is pressed, and the battery level of the button is above 50, between 07:00 and 22:00, triggered by a physical button press."}
{"original_description": "Open garage door with the press of the Logitech POP button.", "trigger_channel": "Logitech POP", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "logitech_pop.short_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which button?", "Slug": "switch", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Trigger condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger option?", "Slug": "trigger_condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Trigger source?", "Slug": "trigger_source", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nThis is the unique identifier of the pressed button.", "description": "This is the unique identifier of the pressed button.", "details": {"Slug": "button_id", "Filter code": "LogitechPop.shortPress.ButtonId", "Type": "String", "Example": "a0:e6:f8:8c:f5:33"}}, {"section": "Ingredients", "title": "Battery\nThis is the current battery level of the pressed button.", "description": "This is the current battery level of the pressed button.", "details": {"Slug": "battery", "Filter code": "LogitechPop.shortPress.Battery", "Type": "String", "Example": "100"}}, {"section": "Ingredients", "title": "Source\nThis is the trigger source, either a physical button or an app.", "description": "This is the trigger source, either a physical button or an app.", "details": {"Slug": "src", "Filter code": "LogitechPop.shortPress.Source", "Type": "String", "Example": "btn or app"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "LogitechPop.shortPress.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Name\nName of the Logi Button.", "description": "Name of the Logi Button.", "details": {"Slug": "button_name", "Filter code": "LogitechPop.shortPress.Name", "Type": "String", "Example": "Living Room"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && LogitechPop.shortPress.Name === \"Living Room\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"The pressed button is not the 'Living Room' button or the door ID does not match.\");\n}", "intent": "When the Logitech POP button named \"Living Room\" with the identifier \"a0:e6:f8:8c:f5:33\" is short-pressed, open the Garadget door identified as \"Main Garage Door\"."}
{"original_description": "Get a message on Teams when your spreadsheet has a new row added. Easy way to track results from a form, survey, or keep up with incoming requests.", "trigger_channel": "Google Sheets", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_sheets.new_row_in_spreadsheet"}, "trigger_details": [{"section": "Trigger fields", "title": "Path\nText input > Other", "description": "Text input > Other", "details": {"Label": "Enter the folder path...", "Helper text": "Format: folders separated by &quot;/&quot; like &quot;Recipes/Vegetables&quot;", "Slug": "path", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Filename\nText input > Other", "description": "Text input > Other", "details": {"Label": "and enter the filename", "Helper text": "E.g. Vegetable Recipes", "Slug": "filename", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Spreadsheet url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Or copy and paste the spreadsheet URL", "Helper text": "Must be a valid spreadsheet URL", "Slug": "spreadsheet_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Filename\nThe name of the spreadsheet.", "description": "The name of the spreadsheet.", "details": {"Slug": "spreadsheet_name", "Filter code": "GoogleSheets.newRowInSpreadsheet.Filename", "Type": "String", "Example": "2018 Trip ideas"}}, {"section": "Ingredients", "title": "Path\nPath of the new spreadsheet.", "description": "Path of the new spreadsheet.", "details": {"Slug": "path", "Filter code": "GoogleSheets.newRowInSpreadsheet.Path", "Type": "String", "Example": "IFTTT/Faves"}}, {"section": "Ingredients", "title": "Spreadsheet url\nThe URL to the spreadsheet on Google Sheets.", "description": "The URL to the spreadsheet on Google Sheets.", "details": {"Slug": "spreadsheet_url", "Filter code": "GoogleSheets.newRowInSpreadsheet.SpreadsheetUrl", "Type": "Web URL", "Example": "https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0"}}, {"section": "Ingredients", "title": "Created at\nDate and time row was added.", "description": "Date and time row was added.", "details": {"Slug": "created_at", "Filter code": "GoogleSheets.newRowInSpreadsheet.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Row index\nThe numerical value of the new row.", "description": "The numerical value of the new row.", "details": {"Slug": "row_index", "Filter code": "GoogleSheets.newRowInSpreadsheet.RowIndex", "Type": "String", "Example": "4"}}, {"section": "Ingredients", "title": "Column a\nValue in column A", "description": "Value in column A", "details": {"Slug": "column_a", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnA", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Column b\nValue in column B", "description": "Value in column B", "details": {"Slug": "column_b", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnB", "Type": "String", "Example": "$99"}}, {"section": "Ingredients", "title": "Column c\nValue in column C", "description": "Value in column C", "details": {"Slug": "column_c", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnC", "Type": "String", "Example": "Towel"}}, {"section": "Ingredients", "title": "Column d\nValue in column D", "description": "Value in column D", "details": {"Slug": "column_d", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnD", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Column e\nValue in column E", "description": "Value in column E", "details": {"Slug": "column_e", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnE", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column f\nValue in column F", "description": "Value in column F", "details": {"Slug": "column_f", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnF", "Type": "String", "Example": "FREE SHIPPING"}}, {"section": "Ingredients", "title": "Column g\nValue in column G", "description": "Value in column G", "details": {"Slug": "column_g", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnG", "Type": "String", "Example": "Delivery Date"}}, {"section": "Ingredients", "title": "Column h\nValue in column H", "description": "Value in column H", "details": {"Slug": "column_h", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnH", "Type": "String", "Example": "November 7th, 2017"}}, {"section": "Ingredients", "title": "Column i\nValue in column I", "description": "Value in column I", "details": {"Slug": "column_i", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnI", "Type": "String", "Example": "Delivery Address"}}, {"section": "Ingredients", "title": "Column j\nValue in column J", "description": "Value in column J", "details": {"Slug": "column_j", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnJ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column k\nValue in column K", "description": "Value in column K", "details": {"Slug": "column_k", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnK", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column l\nValue in column L", "description": "Value in column L", "details": {"Slug": "column_l", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnL", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column m\nValue in column M", "description": "Value in column M", "details": {"Slug": "column_m", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnM", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column n\nValue in column N", "description": "Value in column N", "details": {"Slug": "column_n", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnN", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column o\nValue in column O", "description": "Value in column O", "details": {"Slug": "column_o", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnO", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column p\nValue in column P", "description": "Value in column P", "details": {"Slug": "column_p", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnP", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column q\nValue in column Q", "description": "Value in column Q", "details": {"Slug": "column_q", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnQ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column r\nValue in column R", "description": "Value in column R", "details": {"Slug": "column_r", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnR", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column s\nValue in column S", "description": "Value in column S", "details": {"Slug": "column_s", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnS", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column t\nValue in column T", "description": "Value in column T", "details": {"Slug": "column_t", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnT", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column u\nValue in column U", "description": "Value in column U", "details": {"Slug": "column_u", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnU", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column v\nValue in column V", "description": "Value in column V", "details": {"Slug": "column_v", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnV", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column w\nValue in column W", "description": "Value in column W", "details": {"Slug": "column_w", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnW", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column x\nValue in column X", "description": "Value in column X", "details": {"Slug": "column_x", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnX", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column y\nValue in column Y", "description": "Value in column Y", "details": {"Slug": "column_y", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnY", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}, {"section": "Ingredients", "title": "Column z\nValue in column Z", "description": "Value in column Z", "details": {"Slug": "column_z", "Filter code": "GoogleSheets.newRowInSpreadsheet.ColumnZ", "Type": "String", "Example": "923 Market St. San Francisco, CA 94117"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (GoogleSheets.newRowInSpreadsheet.Filename === \"Orders\" && GoogleSheets.newRowInSpreadsheet.Path === \"Work\" && GoogleSheets.newRowInSpreadsheet.ColumnA !== \"\" && GoogleSheets.newRowInSpreadsheet.ColumnB !== \"\") {\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"your_team_id\", \"your_channel_id\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Order Received\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`A new order has been received from ${GoogleSheets.newRowInSpreadsheet.ColumnA} for ${GoogleSheets.newRowInSpreadsheet.ColumnB} items`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Conditions not met.\");\n}", "intent": "When a new row is added to the \"Orders\" spreadsheet in the \"Work\" folder on Google Sheets, with values in columns A and B, send a message to the \"#orders\" channel on Microsoft Teams with the subject \"New Order Received\" and the body \"A new order has been received from {{column_a}} for {{column_b}} items\", marked as Urgent."}
{"original_description": "Trigger the siren on a Bosma device with a button press. Please make sure that the Bosma device is set up and connected to the internet.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOSMA", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bosma.alert", "Filter code method": "Bosma.alert.skip(string?: reason)", "Runtime method": "runAction(\"bosma.alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device do you want to alert?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && latitude === \"37.8267\" && longitude === \"-122.4230\") {\n  Bosma.alert.setDevice(\"Home Security\");\n} else {\n  Bosma.alert.skip(\"Condition not met.\");\n}", "intent": "Trigger the siren on the Bosma device named \"Home Security\" when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00."}
{"original_description": "When you share an Instagram photo, send it to someone via Gmail. If you have a family member or friend who does not use Instagram, you can still share your photo with them automatically. ", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Gmail", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gmail.send_an_email", "Filter code method": "Gmail.sendAnEmail.skip(string?: reason)", "Runtime method": "runAction(\"gmail.send_an_email\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Cc\nText input > Other", "description": "Text input > Other", "details": {"Label": "CC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "cc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Bcc\nText input > Other", "description": "Text input > Other", "details": {"Label": "BCC address", "Helper text": "Accepts up to twenty email addresses, each separated with a space or comma", "Slug": "bcc", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setBody(string: body)"}}, {"section": "Action fields", "title": "Attachment url\nText input > File", "description": "Text input > File", "details": {"Label": "Attachment URL", "Helper text": "URL to include as an attachment", "Slug": "attachment_url", "Required": "false", "Can have default value": "true", "Filter code method": "Gmail.sendAnEmail.setAttachment Url(string: attachment_url)"}}], "filter_code": "var hour = Instagram.anyNewPhotoByYou.CreatedAt.hour();\nif (Instagram.anyNewPhotoByYou.Caption === \"A cool photo\" && hour > 17) {\n  Gmail.sendAnEmail.setSubject(\"New Photo Shared\");\n  Gmail.sendAnEmail.setBody(\"Check out my latest photo: \" + Instagram.anyNewPhotoByYou.Url);\n  Gmail.sendAnEmail.setAttachmentUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com\");\n}", "intent": "When you share a new photo on Instagram with the caption \"A cool photo\" and it's taken after 5:00 PM, send an email to john.doe@example.com with the subject \"New Photo Shared\" and the body \"Check out my latest photo: http://instagr.am/p/CTGBw/\" along with the photo attached from the source URL http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg."}
{"original_description": "This will turn on the lights of your choice in Wake-up mode within 15 minutes of the sunrise in your location. Wake up with the sun!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar fifteenMinutesAfterSunrise = new Date(sunriseTime.getTime() + 15 * 60 * 1000);\nvar currentTime = new Date();\nvar tempCelsius = parseFloat(Weather.sunRises.TempCelsius);\nvar condition = Weather.sunRises.Condition;\n\nif (currentTime >= fifteenMinutesAfterSunrise && tempCelsius > 18 && condition === \"Sunny\") {\n  Aisync.onOff.setDevice(\"Bedroom Light\");\n  Aisync.onOff.setOnOff(\"on\");\n  Aisync.onOff.setMode(\"Wake-up\");\n} else {\n  Aisync.onOff.skip(\"Conditions not met\");\n}", "intent": "Turn on the Bedroom Light device in Wake-up mode 15 minutes after sunrise when the current temperature is above 18°C and the weather condition is Sunny."}
{"original_description": "Let a friend know you're back in town — and need a ride! Just put in their number and when you check-in near the airport they'll get an SMS from your Android telling them it's time to hop in the car and get you that VIP curbside pickup. ", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.new_checkin_by_friends_at_location"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input", "description": "Location input", "details": {"Label": "Locate an area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.Shout", "Type": "String", "Example": "Best muffins ever."}}, {"section": "Ingredients", "title": "User name", "description": "", "details": {"Slug": "UserName", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.UserName", "Type": "String", "Example": "The friends name."}}, {"section": "Ingredients", "title": "User url", "description": "", "details": {"Slug": "UserUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.UserUrl", "Type": "String", "Example": "The friends profile URL."}}, {"section": "Ingredients", "title": "User profile image url", "description": "", "details": {"Slug": "UserProfileImageUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.UserProfileImageUrl", "Type": "String", "Example": "The friends profile image URL."}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.VenueName", "Type": "String", "Example": "The ifttt office"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.VenueUrl", "Type": "String", "Example": "http://4sq.com/cjWcVg"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.776024,-122.425632&zoom=16&size=420x260&maptype=roadmap&sensor=false&markers=color:red|37.776024,-122.425632"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map at this location.", "description": "The image of the map at this location.", "details": {"Slug": "LocationMapImageUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.LocationMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map at this location.", "description": "The link to the map at this location.", "details": {"Slug": "LocationMapUrl", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.LocationMapUrl", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.newCheckinByFriendsAtLocation.CheckinDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Foursquare.newCheckinByFriendsAtLocation.VenueName === \"San Francisco International Airport\") {\n  AndroidMessages.sendAMessage.setPhoneNumber(\"555-1234\");\n  AndroidMessages.sendAMessage.setText(\"Just landed, can you pick me up? I'm at the airport entrance, see you soon!\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Not checking in near San Francisco International Airport.\");\n}", "intent": "When you check-in near the San Francisco International Airport on Foursquare, send an SMS from your Android to 555-1234 saying \"Just landed, can you pick me up? I'm at the airport entrance, see you soon!\""}
{"original_description": "Blink Philips Hue light when garage door opens", "trigger_channel": "Garadget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "garadget.door_opens"}, "trigger_details": [{"section": "Trigger fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Garadget.doorOpens.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(Garadget.doorOpens.CreatedAt).getHours();\nif (hour < 7 || hour > 19) {\n  Hue.blinkAllHue.skip(\"Outside of active hours (7 AM to 7 PM).\");\n} else {\n  Hue.blinkAllHue.setLights([\"Living Room\"]);\n}", "intent": "When the garage door opens, as detected by Garadget between 07:00 and 19:00, blink all Philips Hue lights in the living room."}
{"original_description": "Turn on Philips Hue light when garage door opens.", "trigger_channel": "Garadget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "garadget.door_opens"}, "trigger_details": [{"section": "Trigger fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Garadget.doorOpens.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Garadget.doorOpens.DoorId !== \"living_room_garage_door\") {\n  Hue.turnOnAllHue.skip(\"Not the living room garage door.\");\n}", "intent": "Turn on all Philips Hue lights in the living room when the garage door opens."}
{"original_description": "If Weather Underground detects rain in the area, use beam to close your garage door to protect everything in the garage.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "beam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beam.close_garage_door", "Filter code method": "Beam.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"beam.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.location === \"New York\") {\n  Beam.closeGarageDoor.setDoorToClose(\"Main Garage Door\");\n} else {\n  Beam.closeGarageDoor.skip(\"Not raining in New York or garage door not set to Main Garage Door.\");\n}", "intent": "If the Weather Underground detects rain in the location of New York, close the garage door named \"Main Garage Door\" using beam to protect everything in the garage."}
{"original_description": "You can activate MyMilan Scenes when\nthe Smart Life door sensor is open", "trigger_channel": "Smart Life", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartlife.door_open"}, "trigger_details": [{"section": "Trigger fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device/group?", "Helper text": "Not all Smart Life devices are supported by this service. Refer to the device manufacturer for further information.", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Smartlife.doorOpen.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis ingredient describes the device name which is triggered.", "description": "This ingredient describes the device name which is triggered.", "details": {"Slug": "device_name", "Filter code": "Smartlife.doorOpen.DeviceName", "Type": "String", "Example": "first door sensor"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(Smartlife.doorOpen.CreatedAt).getHours();\nvar deviceName = Smartlife.doorOpen.DeviceName;\nif (deviceName === \"first door sensor\" && hour >= 7 && hour < 9) {\n  // No need to skip, this is the condition to run the action\n} else {\n  Mymilan.aScenes.skip(\"Door sensor not 'first door sensor' or not between 07:00 and 09:00.\");\n}", "intent": "Activate the \"Good Morning\" scene in MyMilan when the Smart Life door sensor named \"first door sensor\" is open between 07:00 and 09:00."}
{"original_description": "Controlling Brilliant scenes at particular time", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 AM\";\nif (currentTime !== targetTime) {\n  BrilliantNexus.execrule.skip(\"Not the targeted time for the Good Morning scene\");\n} else {\n  BrilliantNexus.execrule.setRuleName(\"Good Morning\");\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\");\n}", "intent": "Turn on the \"Good Morning\" scene in Brilliant Nexus at 7:00 AM every day."}
{"original_description": "This applet creates a button widget that you can use from the home screen of your Android or iOS device. Press the button to close your garage door or gate.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.close_door", "Filter code method": "Garagewifi.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar long = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && lat === \"37.8267\" && long === \"-122.4230\") {\n  Garagewifi.closeDoor.setDoorNumber(\"1\");\n} else {\n  Garagewifi.closeDoor.skip(\"Not within the specified time or location.\");\n}", "intent": "Close the main garage door when I press the button widget on my Android device at home, which is located at latitude 37.8267 and longitude -122.4230, at any time between 07:00 and 19:00."}
{"original_description": "Use Weather Underground to close your awning when it's raining to protect it from damage.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.move", "Filter code method": "SomfyMylink.move.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.move\", {})"}, "action_details": [{"section": "Action fields", "title": "Command\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command ?", "Slug": "command", "Required": "true", "Can have default value": "true", "Filter code method": "SomfyMylink.move.setCommand(string: command)"}}, {"section": "Action fields", "title": "Target\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which connected product ?", "Slug": "target", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  SomfyMylink.move.setCommand(\"close\");\n  SomfyMylink.move.setTarget(\"awning\");\n} else {\n  SomfyMylink.move.skip(\"It's not raining.\");\n}", "intent": "Close the awning when the Weather Underground reports it's raining at your location, which is set to New York City, to protect it from damage."}
{"original_description": "When it's sunset, close my blind.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Connector", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dooya_connector.close_blinds", "Filter code method": "DooyaConnector.closeBlinds.skip(string?: reason)", "Runtime method": "runAction(\"dooya_connector.close_blinds\", {})"}, "action_details": [{"section": "Action fields", "title": "Which blinds\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which blind?", "Slug": "which_blinds", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(Weather.sunSets.SunsetAt).getHours();\nif (hour >= 16 && hour <= 20 && Weather.sunSets.Condition === \"Sunny\") {\n  DooyaConnector.closeBlinds.setWhichBlinds(\"Living Room\");\n} else {\n  DooyaConnector.closeBlinds.skip(\"Sunset not between 16:00 and 20:00 or condition is not Sunny.\");\n}", "intent": "When the sunset at my location is between 16:00 and 20:00 and the current weather condition is Sunny, close my Living Room blind."}
{"original_description": "Automatically close garage door at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  Garadget.closeDoor.skip(\"Closing garage door at sunset.\");\n}", "intent": "Close the garage door at sunset when the outside temperature is 72 degrees Fahrenheit and the condition is Sunny."}
{"original_description": "This Applet closes your door at 7pm daily.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyNice", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mynice.close", "Filter code method": "Mynice.close.skip(string?: reason)", "Runtime method": "runAction(\"mynice.close\", {})"}, "action_details": [{"section": "Action fields", "title": "Automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Slug": "automation_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar time = new Date(checkTime).getHours();\nif (time === 19) {\n  Mynice.close.setAutomationId(\"front_door\");\n} else {\n  Mynice.close.skip(\"Not 7:00 PM\");\n}", "intent": "Close the front door at 7:00 PM every day using MyNice automation."}
{"original_description": "Use beam to make sure that your garage door is closed by 9pm. This can be used to make sure you do not leave your door open all night accidentally. ", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "beam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "beam.close_garage_door", "Filter code method": "Beam.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"beam.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door to close\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_to_close", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nif (hour === 21) {\n  Beam.closeGarageDoor.setDoorToClose(\"garage door\");\n} else {\n  Beam.closeGarageDoor.skip(\"Not 9:00 PM\");\n}", "intent": "Close the garage door using Beam every day at 9:00 PM to prevent it from being left open all night."}
{"original_description": "This Applet closes all your garage door when sun goes down", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Tailwind", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tailwind.close_garage_door", "Filter code method": "Tailwind.closeGarageDoor.skip(string?: reason)", "Runtime method": "runAction(\"tailwind.close_garage_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Garage name\nDropdown list", "description": "Dropdown list", "details": {"Label": "garage_name", "Slug": "garage_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt >= new Date() && Weather.sunSets.TempCelsius < 18) {\n  Tailwind.closeGarageDoor.setGarageName(\"Main House Garage\");\n} else {\n  Tailwind.closeGarageDoor.skip(\"Sunset time not reached or temperature above 18°C.\");\n}", "intent": "Close the Main House Garage door when the sunset time is reached at my location, which is set to New York City, and the current temperature is below 18 degrees Celsius."}
{"original_description": "When the UV index outside reaches 7, close the curtain to protect yourself from the scorching sun. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_uv_index_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Index\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "UV index", "Slug": "index", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentUvIndexRisesAbove.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentUvIndexRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentUvIndexRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentUvIndexRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentUvIndexRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentUvIndexRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.electric_curtain_switch_action", "Filter code method": "Ewelink.electricCurtainSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.electric_curtain_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Electric curtain devices query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "electric_curtain_devices_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which action?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.electricCurtainSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex >= 7) {\n  Ewelink.electricCurtainSwitchAction.setElectricCurtainDevicesQuery(\"Living Room\");\n  Ewelink.electricCurtainSwitchAction.setOnoffActQuery(\"Close\");\n} else {\n  Ewelink.electricCurtainSwitchAction.skip(\"UV index is below 7.\");\n}", "intent": "When the UV index at home reaches 7, close the Living Room curtain to protect yourself from the scorching sun."}
{"original_description": "Automatically closes the garage door at the specified time if left open.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar currentHour = currentTime.hour();\nvar currentDayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\n\nif (currentHour === 20 && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(currentDayOfWeek)) {\n  Garadget.closeDoor.skip(\"Garage door closed at 8:00 PM on a weekday.\");\n}", "intent": "Close the garage door at 8:00 PM every weekday if it is left open."}
{"original_description": "When the temperature becomes too hot outside, close the curtains to keep some of the sunlight out.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MyCurtains", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "MyCurtains.move_device", "Filter code method": "MyCurtains.moveDevice.skip(string?: reason)", "Runtime method": "runAction(\"MyCurtains.move_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which drapery or curtain?", "Helper text": "Which drapery system would you like to move?", "Slug": "devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Move type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which move command?", "Helper text": "How open would you like the drapery to be?", "Slug": "move_type", "Required": "true", "Can have default value": "true", "Filter code method": "MyCurtains.moveDevice.setMove Type(string: move_type)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 85 && Weather.currentTemperatureRisesAbove.Location === \"New York\") {\n  MyCurtains.moveDevice.setMoveType(\"close\");\n  MyCurtains.moveDevice.setDevices(\"Living Room Curtains\");\n} else {\n  MyCurtains.moveDevice.skip(\"Temperature is not above 85 degrees Fahrenheit or location is not New York.\");\n}", "intent": "When the temperature rises above 85 degrees Fahrenheit in New York, close the Living Room Curtains to block out sunlight."}
{"original_description": "This applet lets Apilio know if a specific SmartThings device has been closed, and saves this information to a variable", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Apilio.booleanVariableToFalseUpdates.setVariableIdentifier(\"FrontDoorStatus\");\n}", "intent": "When the Bedroom contact device in SmartThings is closed at any time, update the Apilio variable identified as \"FrontDoorStatus\" to false."}
{"original_description": "Close garage door when iHome button is pressed", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"Kitchen Button\" && IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  var hour = new Date(IhomeEnhance.enhanceButton.CreatedAt).getHours();\n  if (hour >= 7 && hour < 19) {\n    // No skip, proceed with the action by default\n  } else {\n    Garadget.closeDoor.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  }\n} else {\n  Garadget.closeDoor.skip(\"Invalid button or press type.\");\n}", "intent": "Close the garage door when the \"Kitchen Button\" on iHome Enhance is pressed with a long press between 07:00 and 19:00."}
{"original_description": "Close garage door when Netatmo weather station detects rain.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  Garadget.closeDoor.setDoorId(\"Main Garage\");\n} else {\n  Garadget.closeDoor.skip(\"Rain not detected at My Rain gauge.\");\n}", "intent": "Close the garage door named \"Main Garage\" when the Netatmo weather station detects rain at My Rain gauge."}
{"original_description": "Close garage door when Abode mode changes (Away, Home, Standby).", "trigger_channel": "abode", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "abode.mode_changed"}, "trigger_details": [{"section": "Trigger fields", "title": "Select mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select mode", "Slug": "select_mode", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Abode.modeChanged.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "New mode\nName of the mode that was activated.", "description": "Name of the mode that was activated.", "details": {"Slug": "new_mode", "Filter code": "Abode.modeChanged.NewMode", "Type": "String", "Example": "Gateway Standby"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Abode.modeChanged.NewMode === \"Away\") {\n  Garadget.closeDoor.skip(\"Abode mode changed to Away\");\n}", "intent": "Close the garage door when the Abode mode changes to Away."}
{"original_description": "Choose your location; if winds are stronger than a value of your choice (for instance: 10 km/h), close (or open) your shutters or venetians.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.wind_speed_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Wind speed\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Speed", "Helper text": "Numbers only", "Slug": "wind_speed", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Units", "Slug": "units", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Wind direction\nDropdown list", "description": "Dropdown list", "details": {"Label": "Direction", "Slug": "wind_direction", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.windSpeedRisesAbove.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.windSpeedRisesAbove.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.windSpeedRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.windSpeedRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Gewiss Smart Home IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gewiss_home.invoke_method", "Filter code method": "GewissHome.invokeMethod.skip(string?: reason)", "Runtime method": "runAction(\"gewiss_home.invoke_method\", {})"}, "action_details": [{"section": "Action fields", "title": "Method functional channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "What command would you like to execute in the smart home?", "Helper text": "Choose what you want this applet to do in your home", "Slug": "method_functional_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Method param\nText input > Other", "description": "Text input > Other", "details": {"Label": "[If needed] How much?", "Helper text": "Please add a parameter to your command, if it is needed", "Slug": "method_param", "Required": "false", "Can have default value": "true", "Filter code method": "GewissHome.invokeMethod.setMethod Param(string: method_param)"}}], "filter_code": "if (Weather.windSpeedRisesAbove.WindDirection === \"North\" && Weather.windSpeedRisesAbove.WindSpeedKph > 15) {\n  GewissHome.invokeMethod.setMethodParam(\"close_shutters_living_room\");\n  GewissHome.invokeMethod.skip(\"Closing shutters due to high wind speed from the North.\");\n}", "intent": "When the wind speed in Paris rises above 15 km/h from the North direction, close the shutters of my living room."}
{"original_description": "Close garage on Adafruit IO feed event.", "trigger_channel": "Adafruit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "adafruit.monitor_your_data"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Feed", "Helper text": "The name of the feed to check.", "Slug": "feed_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Operator\nDropdown list", "description": "Dropdown list", "details": {"Label": "Relationship", "Helper text": "Relationship between two values.", "Slug": "operator", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Value\nText input", "description": "Text input", "details": {"Label": "Value", "Helper text": "The value to compare against.", "Slug": "value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Feed name\nThe name of your feed.", "description": "The name of your feed.", "details": {"Slug": "feed_name", "Filter code": "Adafruit.monitorYourData.FeedName", "Type": "String", "Example": "humidity"}}, {"section": "Ingredients", "title": "Feed value\nThe value for the given feed.", "description": "The value for the given feed.", "details": {"Slug": "value", "Filter code": "Adafruit.monitorYourData.FeedValue", "Type": "String", "Example": "22"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Adafruit.monitorYourData.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Operator\nThe operator text used to compare the values.", "description": "The operator text used to compare the values.", "details": {"Slug": "operator", "Filter code": "Adafruit.monitorYourData.Operator", "Type": "String", "Example": "greater than"}}, {"section": "Ingredients", "title": "Trigger value\nThe value used in the trigger to compare against your feed data.", "description": "The value used in the trigger to compare against your feed data.", "details": {"Slug": "trigger_value", "Filter code": "Adafruit.monitorYourData.TriggerValue", "Type": "String", "Example": "34"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Adafruit.monitorYourData.FeedName === \"humidity\" && Adafruit.monitorYourData.Operator === \"greater than\" && Adafruit.monitorYourData.TriggerValue === \"50\" && parseFloat(Adafruit.monitorYourData.FeedValue) > 50) {\n  Garadget.closeDoor.skip(\"Humidity is higher than 50, closing the garage door.\");\n}", "intent": "Close the garage door on Garadget when the feed value of \"humidity\" from Adafruit IO is greater than 50."}
{"original_description": "If your SmartThings device is closed, then turn on your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.setSn(\"S123456\");\n} else {\n  Spotcam.turnOffSpotcam.skip(\"Device is not the Bedroom contact.\");\n}", "intent": "If the Bedroom contact SmartThings device is closed, then turn on the SpotCam with serial number S123456 automatically."}
{"original_description": "If your SmartThings device is closed, then turn on your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_alert", "Filter code method": "Spotcam.turnOnAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnAlert.skip();\n}", "intent": "If the Bedroom contact SmartThings device is closed at any time, then turn on the SpotCam Alert with serial number S123456 automatically."}
{"original_description": "Close garage door when Netatmo weather station detects strong winds.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.wind-average-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target speed", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Speed in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred.", "description": "The date and time the measurement occurred.", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.windAverageAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo device reading the wind speed.", "description": "The name of the Netatmo device reading the wind speed.", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.windAverageAbove.DeviceName", "Type": "String", "Example": "My Home - Wind gauge"}}, {"section": "Ingredients", "title": "Target wind speed kmh\nThe target wind speed in km/h.", "description": "The target wind speed in km/h.", "details": {"Slug": "TargetWindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedKmh", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Target wind speed mph\nThe target wind speed in mph.", "description": "The target wind speed in mph.", "details": {"Slug": "TargetWindSpeedMph", "Filter code": "Netatmo.windAverageAbove.TargetWindSpeedMph", "Type": "String", "Example": "24"}}, {"section": "Ingredients", "title": "Wind speed kmh\nThe measured wind speed in km/h.", "description": "The measured wind speed in km/h.", "details": {"Slug": "WindSpeedKmh", "Filter code": "Netatmo.windAverageAbove.WindSpeedKmh", "Type": "String", "Example": "13"}}, {"section": "Ingredients", "title": "Wind speed mph\nThe measured wind speed in mph.", "description": "The measured wind speed in mph.", "details": {"Slug": "WindSpeedMph", "Filter code": "Netatmo.windAverageAbove.WindSpeedMph", "Type": "String", "Example": "8"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.windAverageAbove.WindSpeedKmh > Netatmo.windAverageAbove.TargetWindSpeedKmh && Netatmo.windAverageAbove.DeviceName === \"My Home - Wind gauge\") {\n  Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door.\");\n}", "intent": "Close the garage door named \"Main Garage Door\" when the Netatmo weather station named \"My Home - Wind gauge\" detects wind speeds above 24 km/h."}
{"original_description": "Open garage door with the press on Thinga button.", "trigger_channel": "Thinga", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "thinga.thinga_is_clicked"}, "trigger_details": [{"section": "Trigger fields", "title": "Fetchit device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Helper text": "Your unique Thinga Device ID", "Slug": "fetchit_device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Button\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Number", "Helper text": "Button Number", "Slug": "button_id", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Thinga click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Click Type", "Helper text": "Thing Click Type", "Slug": "thinga_click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Button\nButton ID on Thinga", "description": "Button ID on Thinga", "details": {"Slug": "button_id", "Filter code": "Thinga.thingaIsClicked.ButtonID", "Type": "String", "Example": "1"}}, {"section": "Ingredients", "title": "Date time\nTime at which Thinga was clicked.", "description": "Time at which Thinga was clicked.", "details": {"Slug": "date_time", "Filter code": "Thinga.thingaIsClicked.DateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Thinga click type\nThinga Click Type", "description": "Thinga Click Type", "details": {"Slug": "thinga_click_type", "Filter code": "Thinga.thingaIsClicked.ThingaClickType", "Type": "String", "Example": "click"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.close_door", "Filter code method": "Garadget.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Thinga.thingaIsClicked.ButtonID === \"1\" && Thinga.thingaIsClicked.ThingaClickType === \"click\" && fetchit_device_id === \"GARAGE_CONTROLLER\") {\n  Garadget.closeDoor.setDoorId(\"MAIN_GARAGE_DOOR\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door.\");\n}", "intent": "When the Thinga device with ID \"GARAGE_CONTROLLER\" button number 1 is clicked with a click type of \"click\", close the garage door with ID \"MAIN_GARAGE_DOOR\"."}
{"original_description": "If your SmartThings device is closed, then turn off your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_alert", "Filter code method": "Spotcam.turnOffAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOffAlert.skip(\"Bedroom contact is closed.\");\n}", "intent": "If the Bedroom contact SmartThings device is closed, then turn off the SpotCam with serial number SC123456 automatically."}
{"original_description": "If your SmartThings device is closed, then turn off your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.closed_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Closed at\nThe date and time sensor was closed.", "description": "The date and time sensor was closed.", "details": {"Slug": "ClosedAt", "Filter code": "SmartthingsV2.closedSmartthings.ClosedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.closedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOffSpotcam.skip(\"Bedroom contact SmartThings device is closed\");\n}", "intent": "When the Bedroom contact SmartThings device is closed, then turn off SpotCam with serial number S123456 automatically."}
{"original_description": "Close your blinds controlled by Niko Home Control when the temperature rises above a certain threshold via your Netatmo weather station.  ", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "Niko Home Control", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nikohomecontrol.set_motor_position", "Filter code method": "Nikohomecontrol.setMotorPosition.skip(string?: reason)", "Runtime method": "runAction(\"nikohomecontrol.set_motor_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Motor\nDropdown list", "description": "Dropdown list", "details": {"Label": "Motor", "Helper text": "Motor device", "Slug": "motor", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position value\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Helper text": "Desired position value", "Slug": "position_value", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.TargetTemperatureC === \"25\") {\n  Nikohomecontrol.setMotorPosition.setMotor(\"Living Room Blinds\");\n  Nikohomecontrol.setMotorPosition.setPositionValue(0);\n}", "intent": "Close the \"Living Room Blinds\" motor controlled by Niko Home Control to a position of 0% when the temperature measured at \"My Home - Indoor station\" rises above 25 degrees Celsius via your Netatmo weather station."}
{"original_description": "Oh no! Your robot is stuck somewhere inside your home. Send yourself an SMS text to remind you to free your robot when you get home. \n", "trigger_channel": "iRobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "irobot.robot_stuck"}, "trigger_details": [{"section": "Trigger fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nThe time the robot got stuck.", "description": "The time the robot got stuck.", "details": {"Slug": "iso_timestamp", "Filter code": "Irobot.robotStuck.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "AndroidMessages.sendAMessage.setText(\"Free Roomba, it's stuck at \" + Irobot.robotStuck.Timestamp + \"!\"); \nAndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");", "intent": "When my robot named Roomba gets stuck at home, send an SMS to my phone number, +1234567890, with the message \"Free Roomba, it's stuck!\" as soon as I receive the notification that Roomba is stuck, which includes the timestamp of when it got stuck."}
{"original_description": "Oh no motion detected! Launch your security scenario with Gideon and instantly check what's going on. Your locks can be closed, lights up and cameras start recording.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Gideon.launchScenario.setScenarioName(\"Security Alert\");\n  Gideon.launchScenario();\n} else {\n  Gideon.launchScenario.skip(\"Motion not detected by Bedroom sensor.\");\n}", "intent": "When motion is detected by the Bedroom sensor on SmartThings, launch the \"Security Alert\" scenario with Gideon and instantly check what's going on, closing locks, turning lights up, and starting cameras recording."}
{"original_description": "Receive a notification when your Netatmo registers a temperature drop below a specific amount you choose.\nNote: IFTTT app is needed for this Applet.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName !== \"Living Room - Indoor station\") {\n  IfNotifications.sendNotification.skip(\"Device name does not match.\");\n} else if (Netatmo.temperatureDropsBelow.TargetTemperatureC <= Netatmo.temperatureDropsBelow.MeasuredTemperatureC) {\n  IfNotifications.sendNotification.skip(\"Temperature did not drop below target.\");\n} else {\n  var message = \"Temperature dropped below 18°C at \" + Netatmo.temperatureDropsBelow.MeasuredAt + \". Current temperature: \" + Netatmo.temperatureDropsBelow.MeasuredTemperatureC + \"°C\";\n  IfNotifications.sendNotification.setMessage(message);\n}", "intent": "Receive a notification on your device when the temperature measured by your Netatmo device named \"Living Room - Indoor station\" drops below 18 degrees Celsius, with the notification message including the current temperature and the time of measurement."}
{"original_description": "Cold climes now have a silver lining... every time the temperature hits freezing, you’ll save a set amount toward one of your Goals.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= 32 && Weather.currentTemperatureRisesAbove.location === \"New York\") {\n  Qapital.saveTowardGoal.setGoal(\"Winter Savings\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature is above 32°F or location is not New York.\");\n}", "intent": "When the temperature in New York drops to 32°F, save $5 toward my \"Winter Savings\" goal on Qapital."}
{"original_description": "Upload details from Android phone calls made to your Unforgettable Me account. These details include: contact name, to number, start time and duration. ", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.place_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.placeAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.placeAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "To number\nThe number that received the call.", "description": "The number that received the call.", "details": {"Slug": "ToNumber", "Filter code": "AndroidPhone.placeAPhoneCall.ToNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.placeAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.placeAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (AndroidPhone.placeAPhoneCall.DeviceName === \"Google Pixel 7\" && \n    AndroidPhone.placeAPhoneCall.ToNumber === \"14155551234\" && \n    AndroidPhone.placeAPhoneCall.ContactName === \"Jon Snow\" && \n    AndroidPhone.placeAPhoneCall.CallLength === \"25\") {\n  var callDetails = {\n    \"start_time\": AndroidPhone.placeAPhoneCall.OccurredAt,\n    \"contact_name\": AndroidPhone.placeAPhoneCall.ContactName,\n    \"to_number\": AndroidPhone.placeAPhoneCall.ToNumber,\n    \"call_length\": AndroidPhone.placeAPhoneCall.CallLength\n  };\n  UnforgettableMe.uploadData.setBody(JSON.stringify(callDetails));\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCallMade\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Call details do not match the specified conditions.\");\n}", "intent": "When a call is made from my Google Pixel 7 to the number 14155551234, associated with the contact name Jon Snow, and the call lasts for 25 seconds, upload the details of this phone call to my Unforgettable Me account, including the start time of the call, which occurred at 2020-07-08T04:17:06+05:00, in JSON format with the augmenter name AndroidPhoneCallMade."}
{"original_description": "Upload details from Android phone calls answered to your Unforgettable Me account. These details include: contact name, from number, start time and duration.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (AndroidPhone.receiveAPhoneCall.FromNumber === \"14155551234\" \n    && AndroidPhone.receiveAPhoneCall.DeviceName === \"Google Pixel 7\" \n    && AndroidPhone.receiveAPhoneCall.CallLength >= 25 \n    && AndroidPhone.receiveAPhoneCall.ContactName === \"Jon Snow\") {\n  var startDate = AndroidPhone.receiveAPhoneCall.OccurredAt;\n  var callDuration = parseInt(AndroidPhone.receiveAPhoneCall.CallLength);\n  var endDate = new Date(startDate);\n  endDate.setSeconds(endDate.getSeconds() + callDuration);\n  var jsonData = {\n    \"start_date\": startDate,\n    \"end_date\": endDate.toISOString(),\n    \"contact_name\": AndroidPhone.receiveAPhoneCall.ContactName,\n    \"from_number\": AndroidPhone.receiveAPhoneCall.FromNumber,\n    \"call_length\": AndroidPhone.receiveAPhoneCall.CallLength\n  };\n  UnforgettableMe.uploadData.setBody(JSON.stringify(jsonData));\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCall\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Conditions not met.\");\n}", "intent": "When an incoming call from a number like 14155551234 is answered on my Google Pixel 7 device, and the call lasts for at least 25 seconds with someone like Jon Snow, upload the call details to Unforgettable Me as a JSON object with \"start_date\" set to the time the call occurred, such as 2020-07-08T04:17:06+05:00, and \"end_date\" set to the end of the call, using \"AndroidPhoneCall\" as the augmenter name."}
{"original_description": "This Applet automatically saves trending GIFs from Giphy in a Dropbox folder of your choosing.", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.trending"}, "trigger_details": [{"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.trending.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.trending.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF Image URL for posting GIFs on tumblr.", "description": "GIF Image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.trending.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.trending.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.trending.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.trending.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_date", "Filter code": "Giphy.trending.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var url = Giphy.trending.URL;\n  var imageUrl = Giphy.trending.ImageURL;\n  var tags = Giphy.trending.Tags;\n  if (url === \"http://giphy.com/posts/dreams-are-real-and-best-with-cats\" && imageUrl === \"http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif\" && tags === \"cats party\") {\n    Dropbox.addFileFromUrl.setUrl(imageUrl);\n    Dropbox.addFileFromUrl.setFilename(\"trending_gif\");\n    Dropbox.addFileFromUrl.setPath(\"/IFTTT/Giphy Trends\");\n  } else {\n    Dropbox.addFileFromUrl.skip(\"GIF does not match the specified URL, image URL, or tags.\");\n  }\n} else {\n  Dropbox.addFileFromUrl.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "Save the trending GIF from Giphy with the URL http://giphy.com/posts/dreams-are-real-and-best-with-cats, image URL http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif, and tags \"cats party\" to a Dropbox folder named \"GIF Collection\" at the path \"/IFTTT/Giphy Trends\" every time a new trending GIF is posted between 07:00 and 19:00."}
{"original_description": "Record to Unforgettable Me any new Bitly Bitlink", "trigger_channel": "Bitly", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bitly.new_public_bitmark_bitly"}, "trigger_details": [{"section": "Ingredients", "title": "Long url\nThe URL that you bitlinked.", "description": "The URL that you bitlinked.", "details": {"Slug": "LongUrl", "Filter code": "Bitly.newPublicBitmarkBitly.LongUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}, {"section": "Ingredients", "title": "Short url\nThe URL that you bitmarked, shortened.", "description": "The URL that you bitmarked, shortened.", "details": {"Slug": "ShortUrl", "Filter code": "Bitly.newPublicBitmarkBitly.ShortUrl", "Type": "String", "Example": "http://bit.ly/axcv3r"}}, {"section": "Ingredients", "title": "Title\nThe bitmark title, usually the page title at that URL.", "description": "The bitmark title, usually the page title at that URL.", "details": {"Slug": "Title", "Filter code": "Bitly.newPublicBitmarkBitly.Title", "Type": "String", "Example": "A blog about ifttt"}}, {"section": "Ingredients", "title": "Tags\nTags comma seperated.", "description": "Tags comma seperated.", "details": {"Slug": "Tags", "Filter code": "Bitly.newPublicBitmarkBitly.Tags", "Type": "String", "Example": "cool, web, interface"}}, {"section": "Ingredients", "title": "Notes\nThe note you leave on a bitmark, blank otherwise.", "description": "The note you leave on a bitmark, blank otherwise.", "details": {"Slug": "Notes", "Filter code": "Bitly.newPublicBitmarkBitly.Notes", "Type": "String", "Example": "So cool!"}}, {"section": "Ingredients", "title": "Created at\nDate and time you created bitmark.", "description": "Date and time you created bitmark.", "details": {"Slug": "CreatedAt", "Filter code": "Bitly.newPublicBitmarkBitly.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8) {\n  var title = Bitly.newPublicBitmarkBitly.Title;\n  var tags = Bitly.newPublicBitmarkBitly.Tags;\n  if (title.includes(\"IFTTT\") && (tags.includes(\"productivity\") || tags.includes(\"tools\"))) {\n    UnforgettableMe.uploadData.setAugmenterName(\"BitlyBookmark\");\n    var body = {\n      \"start_date\": Bitly.newPublicBitmarkBitly.CreatedAt,\n      \"end_date\": Bitly.newPublicBitmarkBitly.CreatedAt,\n      \"title\": title,\n      \"url\": Bitly.newPublicBitmarkBitly.LongUrl,\n      \"tags\": tags\n    };\n    UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n  } else {\n    UnforgettableMe.uploadData.skip(\"Does not match the filter criteria.\");\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Created before 8:00 AM.\");\n}", "intent": "Record any new Bitly bitlink with a title containing the keyword \"IFTTT\" and tags including \"productivity\" or \"tools\", created after 8:00 AM, to Unforgettable Me as a new entry with the augmenter name \"BitlyBookmark\" and body in JSON format including start_date and end_date fields."}
{"original_description": "Upload details from Obfuscated Android phone calls made to your Unforgettable Me account. These details include: obfuscated number, start time and duration. ", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.place_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.placeAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.placeAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "To number\nThe number that received the call.", "description": "The number that received the call.", "details": {"Slug": "ToNumber", "Filter code": "AndroidPhone.placeAPhoneCall.ToNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.placeAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.placeAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (AndroidPhone.placeAPhoneCall.ToNumber === \"14155551234\" && \n    AndroidPhone.placeAPhoneCall.ContactName === \"Jon Snow\" && \n    AndroidPhone.placeAPhoneCall.DeviceName === \"Google Pixel 7\") {\n  var body = {\n    \"obfuscated_number\": AndroidPhone.placeAPhoneCall.ToNumber,\n    \"start_time\": AndroidPhone.placeAPhoneCall.OccurredAt,\n    \"duration\": AndroidPhone.placeAPhoneCall.CallLength\n  };\n  UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCallDetails\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Conditions not met for uploading call details.\");\n}", "intent": "Upload details from Obfuscated Android phone calls made to your Unforgettable Me account, specifically when a call is received from the number 14155551234, with a contact name of Jon Snow, and the device used is Google Pixel 7, including the obfuscated number, start time in ISO8601 format such as 2020-07-08T04:17:06+05:00, and duration of 25 seconds, to the Unforgettable Me account using the augmenter name AndroidPhoneCallDetails."}
{"original_description": "Upload details from Obfuscated Android phone calls answered to your Unforgettable Me account. These details include: obfuscated number, start time and duration. ", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var occurrenceTime = AndroidPhone.receiveAPhoneCall.OccurredAt;\nvar durationSeconds = AndroidPhone.receiveAPhoneCall.CallLength;\nvar callerNumber = AndroidPhone.receiveAPhoneCall.FromNumber;\nvar deviceName = AndroidPhone.receiveAPhoneCall.DeviceName;\n\nif (callerNumber === \"14155551234\" && deviceName === \"Google Pixel 7\") {\n  var callDetails = {\n    \"obfuscated_number\": callerNumber,\n    \"start_time\": occurrenceTime,\n    \"duration_in_seconds\": durationSeconds,\n    \"start_date\": occurrenceTime,\n    \"end_date\": new Date(new Date(occurrenceTime).getTime() + (durationSeconds * 1000)).toISOString()\n  };\n\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCallReceived\");\n  UnforgettableMe.uploadData.setBody(JSON.stringify(callDetails));\n} else {\n  UnforgettableMe.uploadData.skip(\"The caller number or device does not match the specified criteria.\");\n}", "intent": "When an incoming call from a number like 14155551234 is answered on my Google Pixel 7 device, upload the call details including the obfuscated number, start time (in ISO8601 format, such as 2020-07-08T04:17:06+05:00), and duration in seconds (for example, 25 seconds) to my Unforgettable Me account with the augmenter name \"AndroidPhoneCallReceived\" and include a JSON body containing the start date and end date of the call."}
{"original_description": "Upload any new Instagram photos to your Unforgettable Me account.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_photo_by_you"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewPhotoByYou.Caption", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the photo's Instagram page.", "description": "The short URL to the photo's Instagram page.", "details": {"Slug": "Url", "Filter code": "Instagram.anyNewPhotoByYou.Url", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Source url\nURL to the image file.", "description": "URL to the image file.", "details": {"Slug": "SourceUrl", "Filter code": "Instagram.anyNewPhotoByYou.SourceUrl", "Type": "String", "Example": "http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewPhotoByYou.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the photo.", "description": "The HTML embed code for the photo.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewPhotoByYou.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Instagram.anyNewPhotoByYou.Caption.includes(\"vacation\")) {\n    var jsonData = {\n      \"start_date\": Instagram.anyNewPhotoByYou.CreatedAt.split(\" at \")[0],\n      \"end_date\": Instagram.anyNewPhotoByYou.CreatedAt.split(\" at \")[0],\n      \"photo_url\": Instagram.anyNewPhotoByYou.Url,\n      \"source_url\": Instagram.anyNewPhotoByYou.SourceUrl,\n      \"embed_code\": Instagram.anyNewPhotoByYou.EmbedCode,\n      \"created_at\": Instagram.anyNewPhotoByYou.CreatedAt\n    };\n    UnforgettableMe.uploadData.setBody(JSON.stringify(jsonData));\n    UnforgettableMe.uploadData.setAugmenterName(\"InstagramVacationPhoto\");\n  } else {\n    UnforgettableMe.uploadData.skip(\"Caption does not contain 'vacation'.\");\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Outside of desired hours (7 AM to 7 PM).\");\n}", "intent": "When a new photo is posted to Instagram with a caption containing the keyword \"vacation\" and the photo is taken between 07:00 and 19:00, upload the photo to Unforgettable Me with the augmenter name \"InstagramVacationPhoto\" and include the photo's URL, source URL, embed code, and creation date in the body of the upload data in JSON format, such as {\"start_date\": \"2024-01-01\", \"end_date\": \"2024-01-31\", \"photo_url\": \"http://instagr.am/p/CTGBw/\", \"source_url\": \"http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg\", \"embed_code\": \"<iframe src=\\\"http://instagr.am/p/CTGBw/embed\\\" width=\\\"612\\\" height=\\\"710\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowtransparency=\\\"true\\\"></iframe>\", \"created_at\": \"January 15, 2024 at 14:30\"}."}
{"original_description": "A great way for quick separating and syncing\nscreenshots from your iPhone to a Dropbox\nfolder named \"IFTTT.\"", "trigger_channel": "iOS Photos", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_photos.ios_new_screenshot"}, "trigger_details": [{"section": "Ingredients", "title": "Temporary public photo url\nA public URL to the photo that anyone can visit for 30 days.", "description": "A public URL to the photo that anyone can visit for 30 days.", "details": {"Slug": "TemporaryPublicPhotoURL", "Filter code": "IosPhotos.iosNewScreenshot.TemporaryPublicPhotoURL", "Type": "Image URL", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Public photo url\nA public URL to the photo that anyone can visit.", "description": "A public URL to the photo that anyone can visit.", "details": {"Slug": "PublicPhotoURL", "Filter code": "IosPhotos.iosNewScreenshot.PublicPhotoURL", "Type": "String", "Example": "https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf"}}, {"section": "Ingredients", "title": "Album name\nThe photo album on your phone that you saved the photo to.", "description": "The photo album on your phone that you saved the photo to.", "details": {"Slug": "AlbumName", "Filter code": "IosPhotos.iosNewScreenshot.AlbumName", "Type": "String", "Example": "Pets"}}, {"section": "Ingredients", "title": "Taken date\nThe time the photo was taken.", "description": "The time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "IosPhotos.iosNewScreenshot.TakenDate", "Type": "String", "Example": "April 19, 2013 at 11:01PM"}}], "action_channel": "Dropbox", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dropbox.add_file_from_url", "Filter code method": "Dropbox.addFileFromUrl.skip(string?: reason)", "Runtime method": "runAction(\"dropbox.add_file_from_url\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with downloadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "Optional, no file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Dropbox folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "Dropbox.addFileFromUrl.setPath(string: path)"}}], "filter_code": "if (IosPhotos.iosNewScreenshot.AlbumName === \"Favorites\") {\n  var filename = IosPhotos.iosNewScreenshot.TakenDate.replace(/-/g, \"\").replace(/\\s/g, \"_\").replace(/:/g, \"-\") + \".png\";\n  var path = \"IFTTT/Screenshots\";\n  Dropbox.addFileFromUrl.setUrl(IosPhotos.iosNewScreenshot.TemporaryPublicPhotoURL);\n  Dropbox.addFileFromUrl.setFilename(filename);\n  Dropbox.addFileFromUrl.setPath(path);\n}", "intent": "When a new screenshot is taken on my iPhone and saved to the \"Favorites\" album, automatically upload it to the \"IFTTT/Screenshots\" folder in Dropbox using the temporary public photo URL, and name the file with the date and time it was taken, such as \"2023-02-20_14-30-00.png\"."}
{"original_description": "Record daily steps from fitbit device", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-daily-activity-summary"}, "trigger_details": [{"section": "Ingredients", "title": "Date\nThe day of activity", "description": "The day of activity", "details": {"Slug": "date", "Filter code": "Fitbit.newDailyActivitySummary.Date", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Total steps\nNumber of steps taken", "description": "Number of steps taken", "details": {"Slug": "total_steps", "Filter code": "Fitbit.newDailyActivitySummary.TotalSteps", "Type": "String", "Example": "10123"}}, {"section": "Ingredients", "title": "Total floors climbed\nNumber of floors climbed", "description": "Number of floors climbed", "details": {"Slug": "total_floors_climbed", "Filter code": "Fitbit.newDailyActivitySummary.TotalFloorsClimbed", "Type": "String", "Example": "10"}}, {"section": "Ingredients", "title": "Total calories burned\nNumber of calories burned from BMR and activity", "description": "Number of calories burned from BMR and activity", "details": {"Slug": "total_calories_burned", "Filter code": "Fitbit.newDailyActivitySummary.TotalCaloriesBurned", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Total elevation gained\nDistance climbed", "description": "Distance climbed", "details": {"Slug": "total_elevation_gained", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGained", "Type": "String", "Example": "200"}}, {"section": "Ingredients", "title": "Total elevation gained unit\nUnit for elevation gain based on your Fitbit preferences", "description": "Unit for elevation gain based on your Fitbit preferences", "details": {"Slug": "total_elevation_gained_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalElevationGainedUnit", "Type": "String", "Example": "meters"}}, {"section": "Ingredients", "title": "Total distance covered\nThe total amount of distance covered", "description": "The total amount of distance covered", "details": {"Slug": "total_distance_covered", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCovered", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Total distance covered unit\nUnit for distance covered based on your Fitbit preferences", "description": "Unit for distance covered based on your Fitbit preferences", "details": {"Slug": "total_distance_covered_unit", "Filter code": "Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit", "Type": "String", "Example": "kilometers"}}, {"section": "Ingredients", "title": "Sedentary minutes\nMinutes in the day you weren't moving much", "description": "Minutes in the day you weren't moving much", "details": {"Slug": "sedentary_minutes", "Filter code": "Fitbit.newDailyActivitySummary.SedentaryMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Lightly active minutes\nMinutes in the day you were moving but not exerting much effort, such as walking", "description": "Minutes in the day you were moving but not exerting much effort, such as walking", "details": {"Slug": "lightly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.LightlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Fairly active minutes\nMinutes in the day you were moving enough to elevate your heart rate", "description": "Minutes in the day you were moving enough to elevate your heart rate", "details": {"Slug": "fairly_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.FairlyActiveMinutes", "Type": "String", "Example": "20"}}, {"section": "Ingredients", "title": "Very active minutes\nMinutes in the day doing cardio workouts and high-intensity activities like jogging and running", "description": "Minutes in the day doing cardio workouts and high-intensity activities like jogging and running", "details": {"Slug": "very_active_minutes", "Filter code": "Fitbit.newDailyActivitySummary.VeryActiveMinutes", "Type": "String", "Example": "20"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Fitbit.newDailyActivitySummary.TotalSteps > 10000 && \n    Fitbit.newDailyActivitySummary.TotalFloorsClimbed > 5 && \n    Fitbit.newDailyActivitySummary.TotalCaloriesBurned > 1800) {\n  var currentDate = new Date();\n  var startDate = currentDate.toISOString().split('T')[0];\n  var endDate = currentDate.toISOString().split('T')[0];\n  var body = {\n    \"start_date\": startDate,\n    \"end_date\": endDate,\n    \"total_steps\": Fitbit.newDailyActivitySummary.TotalSteps,\n    \"total_floors_climbed\": Fitbit.newDailyActivitySummary.TotalFloorsClimbed,\n    \"total_calories_burned\": Fitbit.newDailyActivitySummary.TotalCaloriesBurned\n  };\n  UnforgettableMe.uploadData.setAugmenterName(\"FitbitDailyActivity\");\n  UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n} else {\n  UnforgettableMe.uploadData.skip(\"Conditions not met.\");\n}", "intent": "When the Fitbit device reports a new daily activity summary with total steps greater than 10000, total floors climbed more than 5, and total calories burned over 1800, on the same day as reported by the Fitbit date ingredient, upload this data to Unforgettable Me with an augmenter name \"FitbitDailyActivity\" and include in the body a JSON object containing the start date set to the current date and end date also set to the current date."}
{"original_description": "Upload any new Instagram video to your Unforgettable Me account.", "trigger_channel": "Instagram", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instagram.any_new_video_by_you_instagram"}, "trigger_details": [{"section": "Ingredients", "title": "Caption", "description": "", "details": {"Slug": "Caption", "Filter code": "Instagram.anyNewVideoByYouInstagram.Caption", "Type": "String", "Example": "A cool video"}}, {"section": "Ingredients", "title": "Url\nThe short URL to the video's Instagram page.", "description": "The short URL to the video's Instagram page.", "details": {"Slug": "URL", "Filter code": "Instagram.anyNewVideoByYouInstagram.URL", "Type": "String", "Example": "http://instagr.am/p/CTGBw/"}}, {"section": "Ingredients", "title": "Video source url\nURL to the video file.", "description": "URL to the video file.", "details": {"Slug": "VideoSourceURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.VideoSourceURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4"}}, {"section": "Ingredients", "title": "Image thumbnail url\nURL to the video's thumbnail image.", "description": "URL to the video's thumbnail image.", "details": {"Slug": "ImageThumbnailURL", "Filter code": "Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL", "Type": "String", "Example": "http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg"}}, {"section": "Ingredients", "title": "Created at\nDate and time the video was taken.", "description": "Date and time the video was taken.", "details": {"Slug": "CreatedAt", "Filter code": "Instagram.anyNewVideoByYouInstagram.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Embed code\nThe HTML embed code for the video.", "description": "The HTML embed code for the video.", "details": {"Slug": "EmbedCode", "Filter code": "Instagram.anyNewVideoByYouInstagram.EmbedCode", "Type": "String", "Example": "<iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"vacation\") && Instagram.anyNewVideoByYouInstagram.VideoSourceURL.startsWith(\"http://distilleryimage7.s3.amazonaws.com/\")) {\n  var jsonData = {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-01-31\",\n    \"video_url\": Instagram.anyNewVideoByYouInstagram.VideoSourceURL,\n    \"caption\": Instagram.anyNewVideoByYouInstagram.Caption\n  };\n  UnforgettableMe.uploadData.setAugmenterName(\"InstagramVacationVideo\");\n  UnforgettableMe.uploadData.setBody(JSON.stringify(jsonData));\n} else {\n  UnforgettableMe.uploadData.skip(\"Caption does not contain 'vacation' or video source URL does not match.\");\n}", "intent": "When a new video is uploaded to Instagram with a caption containing the keyword \"vacation\" and the video source URL starts with \"http://distilleryimage7.s3.amazonaws.com/\", upload the video to Unforgettable Me with the augmenter name \"InstagramVacationVideo\" and include the JSON body {\"start_date\": \"2024-01-01\", \"end_date\": \"2024-01-31\", \"video_url\": \"{{VideoSourceURL}}\", \"caption\": \"{{Caption}}\"}."}
{"original_description": "Upload any new Flickr public photos to your Unforgettable Me account.", "trigger_channel": "Flickr", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flickr.any_new_public_photo"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Flickr.anyNewPublicPhoto.Title", "Type": "String", "Example": "A cool photo"}}, {"section": "Ingredients", "title": "Description\nOptional photo description.", "description": "Optional photo description.", "details": {"Slug": "Description", "Filter code": "Flickr.anyNewPublicPhoto.Description", "Type": "String", "Example": "Taken at my birthday party!"}}, {"section": "Ingredients", "title": "Flickr url\nThe long URL to the photo's Flickr page.", "description": "The long URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrl", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrl", "Type": "String", "Example": "http://www.flickr.com/photos/sh4de/5197127926/"}}, {"section": "Ingredients", "title": "Flickr url short\nThe shortened URL to the photo's Flickr page.", "description": "The shortened URL to the photo's Flickr page.", "details": {"Slug": "FlickrUrlShort", "Filter code": "Flickr.anyNewPublicPhoto.FlickrUrlShort", "Type": "String", "Example": "http://flic.kr/p/4mdhBE"}}, {"section": "Ingredients", "title": "Source url\nURL to the largest available flickr image file.", "description": "URL to the largest available flickr image file.", "details": {"Slug": "SourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.SourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Original source url\nURL to the orginal image file if available.", "description": "URL to the orginal image file if available.", "details": {"Slug": "OriginalSourceUrl", "Filter code": "Flickr.anyNewPublicPhoto.OriginalSourceUrl", "Type": "String", "Example": "http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg"}}, {"section": "Ingredients", "title": "Uploaded date\nDate and time the photo was uploaded.", "description": "Date and time the photo was uploaded.", "details": {"Slug": "UploadedDate", "Filter code": "Flickr.anyNewPublicPhoto.UploadedDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Taken date\nDate and time the photo was taken.", "description": "Date and time the photo was taken.", "details": {"Slug": "TakenDate", "Filter code": "Flickr.anyNewPublicPhoto.TakenDate", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Tags\nTags added to the photo.", "description": "Tags added to the photo.", "details": {"Slug": "Tags", "Filter code": "Flickr.anyNewPublicPhoto.Tags", "Type": "String", "Example": "baby, pumpkin"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "if (Flickr.anyNewPublicPhoto.Title === \"Summer Vacation\" && Flickr.anyNewPublicPhoto.Tags.includes(\"beach\") && Flickr.anyNewPublicPhoto.Tags.includes(\"sunset\")) {\n  UnforgettableMe.uploadData.setBody(JSON.stringify({\n    \"source_url\": Flickr.anyNewPublicPhoto.SourceUrl,\n    \"start_date\": Flickr.anyNewPublicPhoto.UploadedDate\n  }));\n  UnforgettableMe.uploadData.setAugmenterName(\"FlickrPhoto\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Photo does not match the specified title and tags.\");\n}", "intent": "When a new public photo is uploaded to Flickr with the title \"Summer Vacation\" and tags including \"beach\" and \"sunset\", upload it to Unforgettable Me as a new entry with the body containing the photo's source URL, http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg, and the augmenter name \"FlickrPhoto\"."}
{"original_description": "Save device data to Google sheet.", "trigger_channel": "Huma-i", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "Huma_i.huma_device_sensor_data_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Huma-i?", "Helper text": "Humai Device", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "createdat", "Filter code": "HumaI.humaDeviceSensorDataTrigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2\nCO2", "description": "CO2", "details": {"Slug": "co2", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Co2", "Type": "String", "Example": "CO2"}}, {"section": "Ingredients", "title": "Voc\nVoc", "description": "Voc", "details": {"Slug": "voc", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Voc", "Type": "String", "Example": "Voc"}}, {"section": "Ingredients", "title": "Pm10\nPM10", "description": "PM10", "details": {"Slug": "pm100", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Pm10", "Type": "String", "Example": "PM10"}}, {"section": "Ingredients", "title": "Pm2\nPM2.5", "description": "PM2.5", "details": {"Slug": "pm25", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Pm2", "Type": "String", "Example": "PM2.5"}}, {"section": "Ingredients", "title": "Pm1\nPM1.0", "description": "PM1.0", "details": {"Slug": "pm10", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Pm1", "Type": "String", "Example": "PM1.0"}}, {"section": "Ingredients", "title": "Temperature\nTemperature", "description": "Temperature", "details": {"Slug": "temperature", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Temperature", "Type": "String", "Example": "Temperature"}}, {"section": "Ingredients", "title": "Humidity\nHumidity", "description": "Humidity", "details": {"Slug": "humidity", "Filter code": "HumaI.humaDeviceSensorDataTrigger.Humidity", "Type": "String", "Example": "Humidity"}}, {"section": "Ingredients", "title": "Home name\nHomeName", "description": "HomeName", "details": {"Slug": "homename", "Filter code": "HumaI.humaDeviceSensorDataTrigger.HomeName", "Type": "String", "Example": "HomeName"}}, {"section": "Ingredients", "title": "Room name\nRoomName", "description": "RoomName", "details": {"Slug": "roomname", "Filter code": "HumaI.humaDeviceSensorDataTrigger.RoomName", "Type": "String", "Example": "RoomName"}}, {"section": "Ingredients", "title": "Device name\nDeviceName", "description": "DeviceName", "details": {"Slug": "devicename", "Filter code": "HumaI.humaDeviceSensorDataTrigger.DeviceName", "Type": "String", "Example": "DeviceName"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (HumaI.humaDeviceSensorDataTrigger.DeviceName === \"Living Room Sensor\") {\n  var row = HumaI.humaDeviceSensorDataTrigger.CreatedAt + \"|||\" + \n            HumaI.humaDeviceSensorDataTrigger.Co2 + \"|||\" + \n            HumaI.humaDeviceSensorDataTrigger.Voc + \"|||\" + \n            HumaI.humaDeviceSensorDataTrigger.Pm2 + \"|||\" + \n            HumaI.humaDeviceSensorDataTrigger.Temperature + \"|||\" + \n            HumaI.humaDeviceSensorDataTrigger.Humidity;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Air Quality Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Home/Air Quality\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(row);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Device name does not match 'Living Room Sensor'.\");\n}", "intent": "Save the device data from the Huma-i device named \"Living Room Sensor\" to a Google sheet named \"Air Quality Log\" in the folder \"Home/Air Quality\" with rows formatted as \"Date|||CO2|||VOC|||PM2.5|||Temperature|||Humidity\" whenever new sensor data is created."}
{"original_description": "If a stock drops below a set price, buy or sell it!", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.current_price_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Price\nText input > Other", "description": "Text input > Other", "details": {"Label": "Price", "Slug": "price", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.currentPriceDropsBelow.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.currentPriceDropsBelow.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last trade price of the stock.", "description": "The last trade price of the stock.", "details": {"Slug": "Price", "Filter code": "Finance.currentPriceDropsBelow.Price", "Type": "String", "Example": "603.7"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.currentPriceDropsBelow.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.currentPriceDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "if (Finance.currentPriceDropsBelow.Price < 600 && Finance.currentPriceDropsBelow.StockTicker === \"GOOG\") {\n  Alpaca.placeMarketOrder.setSymbol(Finance.currentPriceDropsBelow.StockTicker);\n  Alpaca.placeMarketOrder.setSide(\"buy\");\n  Alpaca.placeMarketOrder.setQty(\"10\");\n} else {\n  Alpaca.placeMarketOrder.skip(\"Conditions not met to buy Google Inc. stock.\");\n}", "intent": "If the current price of Google Inc. stock (GOOG) drops below $600, place a market order to buy 10 shares."}
{"original_description": "Log Weight from Fitbit Scales to Unforgettable", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.new-weight-logged"}, "trigger_details": [{"section": "Ingredients", "title": "Bmi\nYour body mass index", "description": "Your body mass index", "details": {"Slug": "BMI", "Filter code": "Fitbit.newWeightLogged.BMI", "Type": "String", "Example": "19.62"}}, {"section": "Ingredients", "title": "Weight\nYour weight", "description": "Your weight", "details": {"Slug": "Weight", "Filter code": "Fitbit.newWeightLogged.Weight", "Type": "String", "Example": "65.0"}}, {"section": "Ingredients", "title": "Weight unit\nThe unit of your weight measurement (kilograms, pounds, stone)", "description": "The unit of your weight measurement (kilograms, pounds, stone)", "details": {"Slug": "WeightUnit", "Filter code": "Fitbit.newWeightLogged.WeightUnit", "Type": "String", "Example": "kilograms"}}, {"section": "Ingredients", "title": "Date\nThe date and time of the weight log entry", "description": "The date and time of the weight log entry", "details": {"Slug": "Date", "Filter code": "Fitbit.newWeightLogged.Date", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Unforgettable Me", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "unforgettable_me.upload_data", "Filter code method": "UnforgettableMe.uploadData.skip(string?: reason)", "Runtime method": "runAction(\"unforgettable_me.upload_data\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Body", "Helper text": "This field must be in json format. If possible include a &quot;start_date&quot; and &quot;end_date&quot; fields, otherwise Unforgettable Me will assign a these dates based on when the data arrives to the Unforegettable Me servers.", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setBody(string: body)"}}, {"section": "Action fields", "title": "Augmenter name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Augmenter Name", "Helper text": "Add a informative augmenter name (a label) that you will use to find this data at Unforgettable Me. For example, you might use &quot;GmailMessage&quot; or &quot;AndroidSMSReceived&quot;. Note, use CamelCase with no spaces.", "Slug": "augmenter_name", "Required": "true", "Can have default value": "true", "Filter code method": "UnforgettableMe.uploadData.setAugmenter Name(string: augmenter_name)"}}], "filter_code": "var weight = Fitbit.newWeightLogged.Weight;\nvar bmi = Fitbit.newWeightLogged.BMI;\nvar weightUnit = Fitbit.newWeightLogged.WeightUnit;\nvar date = Fitbit.newWeightLogged.Date;\n\nif (weight === \"65.0\" && weightUnit === \"kilograms\" && bmi === \"19.62\") {\n  var body = {\n    \"start_date\": date,\n    \"end_date\": date,\n    \"weight\": weight + \" \" + weightUnit,\n    \"bmi\": bmi\n  };\n  \n  UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n  UnforgettableMe.uploadData.setAugmenterName(\"FitbitWeightEntry\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Weight or BMI does not match the expected values.\");\n}", "intent": "Log the weight of 65.0 kilograms from Fitbit Scales to Unforgettable Me with a body mass index of 19.62, using the augmenter name \"FitbitWeightEntry\", and including the date and time of the weight log entry as the start and end dates in the JSON format."}
{"original_description": "Automatically trigger your scene when the current temperature drops to a certain value", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AICO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aico.run_scene", "Filter code method": "Aico.runScene.skip(string?: reason)", "Runtime method": "runAction(\"aico.run_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Please select a scene", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius <= 15 && Weather.currentTemperatureRisesAbove.Location === \"Paris\") {\n  Aico.runScene.setSceneId(\"Good Morning\");\n} else {\n  Aico.runScene.skip(\"Temperature or location conditions not met.\");\n}", "intent": "Trigger the \"Good Morning\" scene on AICO when the temperature drops to 15°C in Paris."}
{"original_description": "Check the list before you head to the comic book store or the library. Happy reading! ", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Nytimes.newBookOnABestSellerList.Title === \"The Psychology of Money\" \n    && Nytimes.newBookOnABestSellerList.Author === \"Morgan Housel\" \n    && Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Business\" \n    && Nytimes.newBookOnABestSellerList.Rank === \"1\" \n    && Nytimes.newBookOnABestSellerList.WeeksOnList === \"10\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Best Seller Tracker\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"My Documents/Book Lists\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\"|||New Book|||The Psychology of Money|||Morgan Housel|||Business|||1|||10 weeks\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Conditions not met for appending to spreadsheet.\");\n}", "intent": "When a new book titled \"The Psychology of Money\" by author Morgan Housel is listed on The New York Times Best Sellers list in the category of Business, with a rank of 1 and having been on the list for 10 weeks, append a row to a Google Sheets spreadsheet named \"Best Seller Tracker\" with the formatted row \"|||New Book|||The Psychology of Money|||Morgan Housel|||Business|||1|||10 weeks\" in the folder path \"My Documents/Book Lists\"."}
{"original_description": "Your JotForm online survey form collects all the survey results easily and quickly. This applet collects all the completed forms and automatically backs them up in Google Docs. ", "trigger_channel": "Jotform", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "jotform.latest_form_submission"}, "trigger_details": [{"section": "Trigger fields", "title": "Form\nDropdown list", "description": "Dropdown list", "details": {"Label": "Form", "Helper text": "Choose a form", "Slug": "form_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Question filter\nText input > Other", "description": "Text input > Other", "details": {"Label": "Question Filter", "Helper text": "Optional question filter (label text) e.g. Name, Email, Address", "Slug": "question_filter", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Ip\nThe form respondent's detected IP address.", "description": "The form respondent's detected IP address.", "details": {"Slug": "ip", "Filter code": "Jotform.latestFormSubmission.IP", "Type": "String", "Example": "192.168.0.100"}}, {"section": "Ingredients", "title": "Form title\nThe form title.", "description": "The form title.", "details": {"Slug": "form_title", "Filter code": "Jotform.latestFormSubmission.FormTitle", "Type": "String", "Example": "My Contact Form"}}, {"section": "Ingredients", "title": "Submission date time\nThe date and time of the form submission.", "description": "The date and time of the form submission.", "details": {"Slug": "submission_date_time", "Filter code": "Jotform.latestFormSubmission.SubmissionDateTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Total submissions\nThe total submission count.", "description": "The total submission count.", "details": {"Slug": "total_submissions", "Filter code": "Jotform.latestFormSubmission.TotalSubmissions", "Type": "String", "Example": "8"}}, {"section": "Ingredients", "title": "Form\nA number that uniquely identifies the form.", "description": "A number that uniquely identifies the form.", "details": {"Slug": "form_id", "Filter code": "Jotform.latestFormSubmission.FormID", "Type": "String", "Example": "1234567890"}}, {"section": "Ingredients", "title": "Submission\nA number that uniquely identifies the form submission.", "description": "A number that uniquely identifies the form submission.", "details": {"Slug": "submission_id", "Filter code": "Jotform.latestFormSubmission.SubmissionID", "Type": "String", "Example": "850507727987654321"}}, {"section": "Ingredients", "title": "Rich text data\nThe form data in a tabulated HTML format.", "description": "The form data in a tabulated HTML format.", "details": {"Slug": "rich_text_data", "Filter code": "Jotform.latestFormSubmission.RichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Spreadsheet data\nThe form data in a CSV format.", "description": "The form data in a CSV format.", "details": {"Slug": "spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.SpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "Filtered rich text data\nThe filtered form data in a tabulated HTML format.", "description": "The filtered form data in a tabulated HTML format.", "details": {"Slug": "filtered_rich_text_data", "Filter code": "Jotform.latestFormSubmission.FilteredRichTextData", "Type": "String", "Example": "<table><tr><td>E-mail</td>johndoe@mail.com<td></td></tr></table>"}}, {"section": "Ingredients", "title": "Filtered spreadsheet data\nThe filtered form data in a CSV format.", "description": "The filtered form data in a CSV format.", "details": {"Slug": "filtered_spreadsheet_data", "Filter code": "Jotform.latestFormSubmission.FilteredSpreadsheetData", "Type": "String", "Example": "[]"}}, {"section": "Ingredients", "title": "File url\nThe URL of the file(s) uploaded on your form.", "description": "The URL of the file(s) uploaded on your form.", "details": {"Slug": "file_url", "Filter code": "Jotform.latestFormSubmission.FileUrl", "Type": "String", "Example": "http://www.jotform.com/uploads/user/1234567890/9876543210/images.zip"}}], "action_channel": "Google Docs", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_docs.append_to_google_doc", "Filter code method": "GoogleDocs.appendToGoogleDoc.skip(string?: reason)", "Runtime method": "runAction(\"google_docs.append_to_google_doc\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "Document name", "Helper text": "Will create a new file if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Content", "Helper text": "some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setBody(string: body)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDocs.appendToGoogleDoc.setPath(string: path)"}}], "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" && Jotform.latestFormSubmission.FilteredRichTextData !== \"\") {\n  var ip = Jotform.latestFormSubmission.IP;\n  var submissionDateTime = Jotform.latestFormSubmission.SubmissionDateTime;\n  var filteredRichTextData = Jotform.latestFormSubmission.FilteredRichTextData;\n  GoogleDocs.appendToGoogleDoc.setFilename(\"Survey Responses\");\n  GoogleDocs.appendToGoogleDoc.setPath(\"My Surveys/2023\");\n  GoogleDocs.appendToGoogleDoc.setBody(\"<p>IP: \" + ip + \"</p><p>Submission Date Time: \" + submissionDateTime + \"</p>\" + filteredRichTextData);\n} else {\n  GoogleDocs.appendToGoogleDoc.skip(\"The form ID does not match or the question filter is not set to 'Email'.\");\n}", "intent": "When a new submission is received on my JotForm survey form with the ID 1234567890 and the question filter set to \"Email\", append the filtered rich text data, including the submission date time and the respondent's detected IP address, to a Google Docs file named \"Survey Responses\" located in the folder path \"My Surveys/2023\"."}
{"original_description": "Keep your photos in sync. Once they're added to Drive, you can organize them in whatever way you see fit, so you have a complete archive for your business or community. ", "trigger_channel": "Facebook Pages", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "facebook_pages.new_photo_from_page"}, "trigger_details": [{"section": "Ingredients", "title": "Page name\nYour Facebook Page's name.", "description": "Your Facebook Page's name.", "details": {"Slug": "PageName", "Filter code": "FacebookPages.newPhotoFromPage.PageName", "Type": "String", "Example": "The ifttt Office"}}, {"section": "Ingredients", "title": "Link\nThe link to the photo's FacebookPages page, may be private.", "description": "The link to the photo's FacebookPages page, may be private.", "details": {"Slug": "Link", "Filter code": "FacebookPages.newPhotoFromPage.Link", "Type": "String", "Example": "http://www.facebook.com/#!/photo.php?pid=33943077&id=7302486"}}, {"section": "Ingredients", "title": "Image source\nThe URL to the full sized version of the photo itself.", "description": "The URL to the full sized version of the photo itself.", "details": {"Slug": "ImageSource", "Filter code": "FacebookPages.newPhotoFromPage.ImageSource", "Type": "String", "Example": "http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg"}}, {"section": "Ingredients", "title": "Caption\nThe photo's caption.", "description": "The photo's caption.", "details": {"Slug": "Caption", "Filter code": "FacebookPages.newPhotoFromPage.Caption", "Type": "String", "Example": "Wow what a fun night!"}}, {"section": "Ingredients", "title": "Created at\nDate and time photo was uploaded.", "description": "Date and time photo was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "FacebookPages.newPhotoFromPage.CreatedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Page url\nThe link to the main Facebook Page.", "description": "The link to the main Facebook Page.", "details": {"Slug": "PageUrl", "Filter code": "FacebookPages.newPhotoFromPage.PageUrl", "Type": "String", "Example": "http://www.facebook.com/pages/The-ifttt-office/108073145941483"}}], "action_channel": "Google Drive", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_drive.upload_file_from_url_google_drive", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.skip(string?: reason)", "Runtime method": "runAction(\"google_drive.upload_file_from_url_google_drive\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > File", "description": "Text input > File", "details": {"Label": "File URL", "Helper text": "Works best with uploadable files", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(string: url)"}}, {"section": "Action fields", "title": "Filename\nText input > File name", "description": "Text input > File name", "details": {"Label": "File name", "Helper text": "No file extension needed", "Slug": "filename", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(string: path)"}}], "filter_code": "if (FacebookPages.newPhotoFromPage.PageName === \"The ifttt Office\") {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(FacebookPages.newPhotoFromPage.ImageSource);\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(FacebookPages.newPhotoFromPage.Caption);\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"IFTTT/Facebook Photos\");\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"Not from the Facebook Page named 'The ifttt Office'.\");\n}", "intent": "Upload any new photo from the Facebook Page named \"The ifttt Office\" to Google Drive, specifically to the folder path \"IFTTT/Facebook Photos\", with the filename set to the photo's caption, such as \"Wow what a fun night!\", and use the full-sized image source URL, like http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg, for the upload."}
{"original_description": "Add a single row to the bottom of the first worksheet of a Google Sheet you specify.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  var formattedRow = \"New event at \" + Knocki.knocki.CreatedAt.substring(11, 19);\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Event Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Logs\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Gesture or device does not match.\");\n}", "intent": "When a Triple Knock gesture is detected on device KNC1-W-00000088, add a new row with the text \"New event at 04:17:06\" to the bottom of the first worksheet in the Google Sheet named \"Event Log\", located in the folder path \"IFTTT/Logs\"."}
{"original_description": "Log every started irrigation on Google Sheets using CloudRain's Smart Garden Irrigation System.", "trigger_channel": "CloudRain Smart Garden Irrigation", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "cloudrain.irrigation_started"}, "trigger_details": [{"section": "Trigger fields", "title": "Zone name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone name", "Helper text": "Select zone name", "Slug": "zone_name", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Cloudrain.irrigationStarted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Duration\nPlanned duration in seconds.", "description": "Planned duration in seconds.", "details": {"Slug": "duration", "Filter code": "Cloudrain.irrigationStarted.Duration", "Type": "String", "Example": "300"}}, {"section": "Ingredients", "title": "Zone name\nThe name of the Zone where the irrigation has started", "description": "The name of the Zone where the irrigation has started", "details": {"Slug": "zone_name", "Filter code": "Cloudrain.irrigationStarted.ZoneName", "Type": "String", "Example": "Front Yard"}}, {"section": "Ingredients", "title": "Zone\nThe unique identifier of the Zone where the irrigation has started.", "description": "The unique identifier of the Zone where the irrigation has started.", "details": {"Slug": "zone_id", "Filter code": "Cloudrain.irrigationStarted.ZoneId", "Type": "String", "Example": "1234"}}, {"section": "Ingredients", "title": "Expected end time\nExpected Time when irrigation will be finished.", "description": "Expected Time when irrigation will be finished.", "details": {"Slug": "expected_end", "Filter code": "Cloudrain.irrigationStarted.ExpectedEndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Irrigation\nUnique id representing each irrigation.", "description": "Unique id representing each irrigation.", "details": {"Slug": "irrigation_id", "Filter code": "Cloudrain.irrigationStarted.IrrigationId", "Type": "String", "Example": "1234"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Irrigation Logs\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"Garden Automation\");\nif (Cloudrain.irrigationStarted.ZoneName === \"Front Yard\") {\n  var formattedRow = Cloudrain.irrigationStarted.CreatedAt + \"|||\" + Cloudrain.irrigationStarted.Duration + \"|||\" + Cloudrain.irrigationStarted.ZoneId + \"|||\" + Cloudrain.irrigationStarted.ExpectedEndTime + \"|||\" + Cloudrain.irrigationStarted.IrrigationId;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Irrigation not from Front Yard zone.\");\n}", "intent": "Log every started irrigation from the Front Yard zone on Google Sheets spreadsheet named \"Irrigation Logs\" in the \"Garden Automation\" folder, including the date and time the irrigation was started, the planned duration in seconds, the unique identifier of the zone, the expected end time, and a unique id representing each irrigation, with a formatted row containing values separated by \"|||\"."}
{"original_description": "Add a new row to a spreadsheet when an item matches your RSS Feed search.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Feed.newFeedItemMatches.EntryTitle.includes(\"technology\") && Feed.newFeedItemMatches.FeedUrl === \"http://blog.ifttt.com/rss\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"News Updates\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(Feed.newFeedItemMatches.EntryTitle + \"|||\" + Feed.newFeedItemMatches.EntryUrl + \"|||\" + Feed.newFeedItemMatches.EntryAuthor);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Entry does not match the keyword 'technology' or feed URL\");\n}", "intent": "Add a new row to the \"News Updates\" spreadsheet in the \"IFTTT\" folder with the entry title, entry URL, and entry author when an item matching the keyword \"technology\" is found in the RSS feed at http://blog.ifttt.com/rss."}
{"original_description": "Log when the humidity goes low by adding a row in a google spreadsheet.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.humidity-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get humidity from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How dry you want it to be when it triggers? Example: 30", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.humidityBelow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Humidity\nThe humidity, in percent.", "description": "The humidity, in percent.", "details": {"Slug": "value", "Filter code": "Airthings.humidityBelow.Humidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.humidityBelow.Device", "Type": "String", "Example": "Home - Living room"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "if (Airthings.humidityBelow.Device === \"Home - Living room\" && parseInt(Airthings.humidityBelow.Humidity) < 30) {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Low Humidity Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Weather Alerts\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(Airthings.humidityBelow.CreatedAt + \"|||\" + Airthings.humidityBelow.Humidity + \"|||\" + Airthings.humidityBelow.Device);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Humidity level is not below 30% in the Home - Living room device.\");\n}", "intent": "When the humidity level in the \"Home - Living room\" device drops below 30%, add a new row to the Google Sheets spreadsheet named \"Low Humidity Log\" with the formatted row containing the current date and time \"|||\" the humidity value \"|||\" the device name, and place the spreadsheet in the \"IFTTT/Weather Alerts\" folder."}
{"original_description": "Add a row to a Google Sheet when you have a new public like of a song on SoundCloud.", "trigger_channel": "SoundCloud", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "soundcloud.new_public_favorite_track"}, "trigger_details": [{"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Soundcloud.newPublicFavoriteTrack.Title", "Type": "String", "Example": "A cool track"}}, {"section": "Ingredients", "title": "Description\nThe track's description. May contain HTML.", "description": "The track's description. May contain HTML.", "details": {"Slug": "Description", "Filter code": "Soundcloud.newPublicFavoriteTrack.Description", "Type": "String", "Example": "This track is sweet"}}, {"section": "Ingredients", "title": "Tags\nThe track's tags, comma seperated.", "description": "The track's tags, comma seperated.", "details": {"Slug": "Tags", "Filter code": "Soundcloud.newPublicFavoriteTrack.Tags", "Type": "String", "Example": "killer, noise"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the tracks's Soundcloud page.", "description": "The URL to the tracks's Soundcloud page.", "details": {"Slug": "TrackUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackUrl", "Type": "String", "Example": "http://soundcloud.com/ribbonmusic/john-maus-believer"}}, {"section": "Ingredients", "title": "Username\nThe name of the user who uploaded the track.", "description": "The name of the user who uploaded the track.", "details": {"Slug": "Username", "Filter code": "Soundcloud.newPublicFavoriteTrack.Username", "Type": "String", "Example": "gaga"}}, {"section": "Ingredients", "title": "User profile url\nThe URL to the profile of the user who uploaded the track.", "description": "The URL to the profile of the user who uploaded the track.", "details": {"Slug": "UserProfileUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserProfileUrl", "Type": "String", "Example": "http://soundcloud.com/gaga-digi"}}, {"section": "Ingredients", "title": "Image url\nURL to the track's image file.", "description": "URL to the track's image file.", "details": {"Slug": "ImageUrl", "Filter code": "Soundcloud.newPublicFavoriteTrack.ImageUrl", "Type": "String", "Example": "http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg"}}, {"section": "Ingredients", "title": "Embed code\nHTML embed code for this track.", "description": "HTML embed code for this track.", "details": {"Slug": "EmbedCode", "Filter code": "Soundcloud.newPublicFavoriteTrack.EmbedCode", "Type": "String", "Example": "<object height='81' width='100%'> <param name='movie'..."}}, {"section": "Ingredients", "title": "Created at\nDate and time the track was uploaded.", "description": "Date and time the track was uploaded.", "details": {"Slug": "CreatedAt", "Filter code": "Soundcloud.newPublicFavoriteTrack.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "TrackId", "Filter code": "Soundcloud.newPublicFavoriteTrack.TrackId", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "User\nThe ID of the user who uploaded the track.", "description": "The ID of the user who uploaded the track.", "details": {"Slug": "UserId", "Filter code": "Soundcloud.newPublicFavoriteTrack.UserId", "Type": "String", "Example": "123"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"SoundCloud Favorites\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"SoundCloud/Favorites\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\n  Soundcloud.newPublicFavoriteTrack.Title + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.Description + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.Tags + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.TrackUrl + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.Username + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.UserProfileUrl + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.ImageUrl + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.EmbedCode + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.CreatedAt + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.TrackId + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.UserId\n);", "intent": "Add a new row to the Google Sheets spreadsheet named \"SoundCloud Favorites\" with the details of the newly liked track, including the track title \"A cool track\", description \"This track is sweet\", tags \"killer, noise\", track URL \"http://soundcloud.com/ribbonmusic/john-maus-believer\", username \"gaga\", user profile URL \"http://soundcloud.com/gaga-digi\", image URL \"http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg\", embed code \"<object height='81' width='100%'> <param name='movie'...\", creation date \"2020-07-08T04:17:06+05:00\", track ID \"123\", and user ID \"123\", in the folder path \"SoundCloud/Favorites\", using the formatted row \"Title|||Description|||Tags|||TrackUrl|||Username|||UserProfileUrl|||ImageUrl|||EmbedCode|||CreatedAt|||TrackId|||UserId\" to separate cells."}
{"original_description": "If you're interested in reading the latest update notes, consider using this Applet that sends you an email instead of a notification:", "trigger_channel": "Apple App Store", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "app_store.new_app_version_released"}, "trigger_details": [{"section": "Trigger fields", "title": "App name or url\nText input", "description": "Text input", "details": {"Label": "Enter an app's name or URL", "Helper text": "E.g. &quot;IFTTT&quot; or &quot;Snapchat.&quot; For best results, paste an app's App Store URL.", "Slug": "app_name_or_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Name\nThe name of the App.", "description": "The name of the App.", "details": {"Slug": "name", "Filter code": "AppStore.newAppVersionReleased.Name", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Description\nThe description of the App.", "description": "The description of the App.", "details": {"Slug": "description", "Filter code": "AppStore.newAppVersionReleased.Description", "Type": "String", "Example": "Applets bring your favorite services together to create new experiences..."}}, {"section": "Ingredients", "title": "App store url\nThe URL to the App in the App Store.", "description": "The URL to the App in the App Store.", "details": {"Slug": "app_store_url", "Filter code": "AppStore.newAppVersionReleased.AppStoreUrl", "Type": "String", "Example": "https://itunes.apple.com/us/app/ifttt/id660944635"}}, {"section": "Ingredients", "title": "Developer\nThe name of the developer of the App.", "description": "The name of the developer of the App.", "details": {"Slug": "developer", "Filter code": "AppStore.newAppVersionReleased.Developer", "Type": "String", "Example": "IFTTT"}}, {"section": "Ingredients", "title": "Category\nThe category the App falls under.", "description": "The category the App falls under.", "details": {"Slug": "category", "Filter code": "AppStore.newAppVersionReleased.Category", "Type": "String", "Example": "Productivity"}}, {"section": "Ingredients", "title": "Price\nThe current price of the App.", "description": "The current price of the App.", "details": {"Slug": "price", "Filter code": "AppStore.newAppVersionReleased.Price", "Type": "String", "Example": "$9.99"}}, {"section": "Ingredients", "title": "Rating\nThe current rating of the App.", "description": "The current rating of the App.", "details": {"Slug": "rating", "Filter code": "AppStore.newAppVersionReleased.Rating", "Type": "String", "Example": "5 stars"}}, {"section": "Ingredients", "title": "Screenshot\nThe URL to a screenshot of the App.", "description": "The URL to a screenshot of the App.", "details": {"Slug": "screenshot", "Filter code": "AppStore.newAppVersionReleased.Screenshot", "Type": "Image URL", "Example": "http://ifttt.com"}}, {"section": "Ingredients", "title": "Icon\nThe URL to an image of the App's icon.", "description": "The URL to an image of the App's icon.", "details": {"Slug": "icon", "Filter code": "AppStore.newAppVersionReleased.Icon", "Type": "String", "Example": "http://is2.mzstatic.com/image/thumb/Purple111/v4/5c/3d/43/5c3d4327-22d0-45d0-73c6-bbaf56c08902/source/512x512bb.jpg"}}, {"section": "Ingredients", "title": "Release notes\nNotes about the new app release.", "description": "Notes about the new app release.", "details": {"Slug": "release_notes", "Filter code": "AppStore.newAppVersionReleased.ReleaseNotes", "Type": "String", "Example": "+ We made some improvements to..."}}, {"section": "Ingredients", "title": "Version\nThe current version of the App.", "description": "The current version of the App.", "details": {"Slug": "version", "Filter code": "AppStore.newAppVersionReleased.Version", "Type": "String", "Example": "2.1.3"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AppStore.newAppVersionReleased.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (AppStore.newAppVersionReleased.Name === \"IFTTT\" && AppStore.newAppVersionReleased.Rating === \"5 stars\" && AppStore.newAppVersionReleased.Category === \"Productivity\") {\n  var message = \"New IFTTT update available: Version \" + AppStore.newAppVersionReleased.Version + \". Release notes: \" + AppStore.newAppVersionReleased.ReleaseNotes;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met for sending notification.\");\n}", "intent": "When a new version of the IFTTT app is released on the Apple App Store with a rating of 5 stars and the category is Productivity, send a notification with the message \"New IFTTT update available: Version 2.1.3. Release notes: + We made some improvements to...\"."}
{"original_description": "Don't worry about a cold house when the temperature drops by making your LightwaveRF TRVs fully open automatically.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "LightwaveRF Heating", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_heating.set_trv_position", "Filter code method": "LightwaverfHeating.setTrvPosition.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_heating.set_trv_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Which trv\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which TRV?", "Slug": "which_trv", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What position\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What position?", "Slug": "what_position", "Required": "true", "Can have default value": "true", "Filter code method": "LightwaverfHeating.setTrvPosition.setWhat Position(string: what_position)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5 && Weather.currentTemperatureRisesAbove.Location === \"London\") {\n  LightwaverfHeating.setTrvPosition.setWhatPosition(\"fully open\");\n  LightwaverfHeating.setTrvPosition.skip(\"Temperature outside is below 5°C in London.\");\n} else {\n  LightwaverfHeating.setTrvPosition.skip(\"Temperature outside is not below 5°C in London or location is not London.\");\n}", "intent": "When the temperature outside drops below 5°C in London, set the Living Room TRV to fully open."}
{"original_description": "Reward yourself every time you tick off one of your to-dos by saving a set amount toward one of your Goals.", "trigger_channel": "iOS Reminders", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ios_reminders.any_reminder_completed"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the reminder.", "description": "The title of the reminder.", "details": {"Slug": "Title", "Filter code": "IosReminders.anyReminderCompleted.Title", "Type": "String", "Example": "Pick up milk"}}, {"section": "Ingredients", "title": "Notes\nThe note associated with the reminder.", "description": "The note associated with the reminder.", "details": {"Slug": "Notes", "Filter code": "IosReminders.anyReminderCompleted.Notes", "Type": "String", "Example": "Get 1% for Rick"}}, {"section": "Ingredients", "title": "List\nThe name of the list the reminder is in.", "description": "The name of the list the reminder is in.", "details": {"Slug": "List", "Filter code": "IosReminders.anyReminderCompleted.List", "Type": "String", "Example": "Shopping"}}, {"section": "Ingredients", "title": "Priority\nThe priority of the reminder.", "description": "The priority of the reminder.", "details": {"Slug": "Priority", "Filter code": "IosReminders.anyReminderCompleted.Priority", "Type": "String", "Example": "Medium"}}, {"section": "Ingredients", "title": "Created date\nThe date the reminder was created.", "description": "The date the reminder was created.", "details": {"Slug": "CreatedDate", "Filter code": "IosReminders.anyReminderCompleted.CreatedDate", "Type": "String", "Example": "August 23, 2014 at 11:01PM"}}, {"section": "Ingredients", "title": "Completed date\nThe date the reminder was completed.", "description": "The date the reminder was completed.", "details": {"Slug": "CompletedDate", "Filter code": "IosReminders.anyReminderCompleted.CompletedDate", "Type": "String", "Example": "August 23, 2014 at 11:31PM"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Pick up milk\" \n    && IosReminders.anyReminderCompleted.List === \"Shopping\" \n    && IosReminders.anyReminderCompleted.Priority === \"Medium\") {\n  Qapital.saveTowardGoal.setGoal(\"Dream Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Reminder does not match the specified criteria.\");\n}", "intent": "Save $5 toward my \"Dream Vacation\" goal in Qapital every time I complete a reminder titled \"Pick up milk\" from my \"Shopping\" list with a medium priority."}
{"original_description": "Save £1 every time you check-in on Foursquare", "trigger_channel": "Foursquare", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foursquare.any_new_checkin"}, "trigger_details": [{"section": "Ingredients", "title": "Shout\nShout (message) associated with check-in.", "description": "Shout (message) associated with check-in.", "details": {"Slug": "Shout", "Filter code": "Foursquare.anyNewCheckin.Shout", "Type": "String", "Example": "Hanging out with my mates!"}}, {"section": "Ingredients", "title": "Venue name", "description": "", "details": {"Slug": "VenueName", "Filter code": "Foursquare.anyNewCheckin.VenueName", "Type": "String", "Example": "Sydney Opera House"}}, {"section": "Ingredients", "title": "Venue url\nThe short URL to the venue's Foursquare page.", "description": "The short URL to the venue's Foursquare page.", "details": {"Slug": "VenueUrl", "Filter code": "Foursquare.anyNewCheckin.VenueUrl", "Type": "String", "Example": "http://4sq.com/67UmdR"}}, {"section": "Ingredients", "title": "Venue map image url\nA URL to a static map image of the venue's location.", "description": "A URL to a static map image of the venue's location.", "details": {"Slug": "VenueMapImageUrl", "Filter code": "Foursquare.anyNewCheckin.VenueMapImageUrl", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=-33.85733737872545,151.21505856513977&zoom=16&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C-33.85733737872545,151.21505856513977"}}, {"section": "Ingredients", "title": "Checkin date\nDate and time you checked in.", "description": "Date and time you checked in.", "details": {"Slug": "CheckinDate", "Filter code": "Foursquare.anyNewCheckin.CheckinDate", "Type": "String", "Example": "November 26, 2013 at 11:01AM"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Foursquare.anyNewCheckin.VenueName === \"Sydney Opera House\" && Foursquare.anyNewCheckin.Shout === \"Hanging out with my mates!\") {\n  Dozens.save.setAmount(\"1\");\n}", "intent": "Save £1 to your Dozens savings account every time you check-in on Foursquare at venues like the Sydney Opera House, with a shout like \"Hanging out with my mates!\", and move the funds immediately after each check-in."}
{"original_description": "Turn your Philips Hue lights OFF when the Anyware Energy Saving Mode is activated.", "trigger_channel": "Anyware Services", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AnywareServices.energy_saving_mode_activated"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AnywareServices.energySavingModeActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Location\nWhere energy saving mode was activated", "description": "Where energy saving mode was activated", "details": {"Slug": "location", "Filter code": "AnywareServices.energySavingModeActivated.Location", "Type": "String", "Example": "Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AnywareServices.energySavingModeActivated.Location === \"Home\") {\n  Hue.turnOnAllHue.skip(\"Energy saving mode activated, turning off lights\");\n}", "intent": "Turn off all Philips Hue lights in the living room when Anyware Energy Saving Mode is activated at home."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to rain, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && parseFloat(Weather.currentConditionIs.TempCelsius) < 10) {\n  Mesh.events.setEventID(\"WeatherAlert\");\n  Mesh.events.setText(\"Rain detected, temperature is \" + Weather.currentConditionIs.TempCelsius + \"°C\");\n} else {\n  Mesh.events.skip(\"Conditions do not meet the criteria.\");\n}", "intent": "When the current weather condition in New York changes to rain and the temperature is below 10°C, send a notification with the event ID \"WeatherAlert\" and the text \"Rain detected, temperature is 9°C\" to the MESH app."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to clear, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && parseFloat(Weather.currentConditionIs.TempCelsius) > 18) {\n  Mesh.events.setEventId(\"morning_update\");\n  Mesh.events.setText(\"Good morning, it's sunny!\");\n} else {\n  Mesh.events.skip(\"Conditions are not met.\");\n}", "intent": "When the current weather condition in New York changes to Sunny and the temperature is above 18°C, send a notification with the text \"Good morning, it's sunny!\" to the MESH event with EventID \"morning_update\"."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to cloudy, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Cloudy\" && parseFloat(Weather.currentConditionIs.TempCelsius) < 15) {\n  Mesh.events.setEventID(\"WeatherAlert\");\n  Mesh.events.setText(`Cloudy weather detected, temperature is ${Weather.currentConditionIs.TempCelsius}°C`);\n} else {\n  Mesh.events.skip(\"Conditions not met for sending notification.\");\n}", "intent": "When the current weather condition at my location, New York City, changes to cloudy and the temperature is below 15°C, send a notification to my MESH app with the EventID \"WeatherAlert\" and the text \"Cloudy weather detected, temperature is 12°C\"."}
{"original_description": "This Trigger monitors changes in the current weather condition. When current conditions changes to snow, the Trigger fires. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MESH", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mesh.events"}, "action_details": [{"section": "Trigger fields", "title": "Event\nText input > Other", "description": "Text input > Other", "details": {"Label": "EventID", "Helper text": "Input EventID that you entered in MESH app", "Slug": "event_id", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Text\nThe text contents of the event.", "description": "The text contents of the event.", "details": {"Slug": "text", "Filter code": "Mesh.events.Text", "Type": "String", "Example": "Motion Tag: Detected!"}}, {"section": "Ingredients", "title": "Triggered at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "triggered_at", "Filter code": "Mesh.events.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Snow\" && Weather.currentConditionIs.TempFahrenheit < 32) {\n  Mesh.events.setEventID(\"WinterAlert\");\n  Mesh.events.setText(\"Snowfall detected, temperature at \" + Weather.currentConditionIs.TempFahrenheit + \"°F\");\n} else {\n  Mesh.events.skip(\"Conditions do not meet the criteria for a winter alert.\");\n}", "intent": "When the current weather condition in New York changes to snow and the temperature drops below 32°F, send a notification to the MESH app with the event ID \"WinterAlert\" and the text \"Snowfall detected, temperature at 25°F\"."}
{"original_description": "Get the daily weather sent to Discord. This Applet returns results in Fahrenheit.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_weather_at_time"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.currentWeatherAtTime.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.currentWeatherAtTime.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Current temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "current_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.CurrentTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Current temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "current_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.CurrentTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Current condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "current_condition", "Filter code": "Weather.currentWeatherAtTime.CurrentCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Current condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "current_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.CurrentConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Todays condition image url\nThe URL to an image of todays's condition.", "description": "The URL to an image of todays's condition.", "details": {"Slug": "todays_condition_image_url", "Filter code": "Weather.currentWeatherAtTime.TodaysConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentWeatherAtTime.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Todays condition\nToday's weather condition", "description": "Today's weather condition", "details": {"Slug": "todays_condition", "Filter code": "Weather.currentWeatherAtTime.TodaysCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.currentWeatherAtTime.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.currentWeatherAtTime.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Uv index\nThe current UV index, 0-16", "description": "The current UV index, 0-16", "details": {"Slug": "uv_index", "Filter code": "Weather.currentWeatherAtTime.UvIndex", "Type": "String", "Example": "6"}}, {"section": "Ingredients", "title": "Humidity\nThe current humidity level represented as a percentage.", "description": "The current humidity level represented as a percentage.", "details": {"Slug": "humidity", "Filter code": "Weather.currentWeatherAtTime.Humidity", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Wind speed mph\nWind speed in MPH", "description": "Wind speed in MPH", "details": {"Slug": "wind_speed_mph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedMph", "Type": "String", "Example": "5"}}, {"section": "Ingredients", "title": "Wind speed kph\nWind speed in KPH", "description": "Wind speed in KPH", "details": {"Slug": "wind_speed_kph", "Filter code": "Weather.currentWeatherAtTime.WindSpeedKph", "Type": "String", "Example": "7"}}, {"section": "Ingredients", "title": "Wind direction\nWind direction", "description": "Wind direction", "details": {"Slug": "wind_direction", "Filter code": "Weather.currentWeatherAtTime.WindDirection", "Type": "String", "Example": "North"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentWeatherAtTime.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentWeatherAtTime.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Discord", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "discord.post_message_to_channel", "Filter code method": "Discord.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"discord.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which Channel?", "Helper text": "Confirm that <a href=\"https://ift.tt/disc_faq\" target=\"_blank\">permissions</a> are granted in your server. If your server isn’t listed, <a href=\"https://ift.tt/disc_server\" target=\"_blank\">reconnect the Discord service</a>.", "Slug": "channel_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Helper text": "Max limit of 2000 characters. To @mention roles, find the role ID in Discord by running `\\@role`. Ex. 'Hello &lt;@&amp;1234&gt;'", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Allowable mentions\nDropdown list", "description": "Dropdown list", "details": {"Label": "Allowable mentions", "Helper text": "Allows usage of @everyone, &lt;@&amp;(Role ID)&gt;, and &lt;@(User ID)&gt; in the message body", "Slug": "allowable_mentions", "Required": "true", "Can have default value": "true", "Filter code method": "Discord.postMessageToChannel.setAllowable Mentions(string: allowable_mentions)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var message = \"Current weather: \" + Weather.currentWeatherAtTime.CurrentCondition + \", High: \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F, Low: \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F, UV Index: \" + Weather.currentWeatherAtTime.UvIndex;\n  Discord.postMessageToChannel.setMessage(message);\n  Discord.postMessageToChannel.setAllowableMentions(\"@everyone\");\n  var imageUrl = Weather.currentWeatherAtTime.TodaysConditionImageURL;\n  // Note: The provided JSON does not contain a method to directly add an image to the message.\n  // You may need to modify the Discord action or use a different approach to include the image.\n} else {\n  Discord.postMessageToChannel.skip(\"Not 7:00 AM\");\n}", "intent": "Send a message to the #weather-updates channel on Discord at 7:00 AM every day with the current weather condition, high and low temperatures in Fahrenheit, and a UV index, including an image of today's condition, while allowing mentions of @everyone."}
{"original_description": "Have your LIFX lights automatically turn on at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_on", "Filter code method": "Lifx.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade in duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade in duration", "Helper text": "How long should it take for the lights to fade in.", "Slug": "fade_in_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not available? Specify them here. Example: &quot;color: #ff0000; brightness: 0.3; fade_in_duration: 12&quot; for red at 30% brightness, 12 second fade in. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOn.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit > 60 && Weather.sunSets.SunsetAt !== null) {\n  Lifx.turnOn.setAdvancedOptions(\"color: warm_white; brightness: 0.8; fade_in_duration: 10\");\n  Lifx.turnOn.skip(\"Turning on Living Room LIFX lights at sunset in New York City.\");\n}", "intent": "Turn on the Living Room LIFX lights to a warm white color with 80% brightness and a 10-second fade-in duration when the sunset occurs in New York City, as reported by Weather Underground, and the current temperature is above 60°F."}
{"original_description": "If it begins to rain then change the light colors to blue", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.Location === \"New York\") {\n  Hue.setColorAllHue.setColor(\"#0000FF\");\n} else {\n  Hue.setColorAllHue.skip(\"Not raining in New York or not living room lights.\");\n}", "intent": "If the current weather condition is rain in New York, then set the color of all Philips Hue lights in the living room to blue (#0000FF)."}
{"original_description": "Launch a myLink scene when weather condition changes", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Somfy myLink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "somfy_mylink.play", "Filter code method": "SomfyMylink.play.skip(string?: reason)", "Runtime method": "runAction(\"somfy_mylink.play\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "What scene ?", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && Weather.currentConditionIs.TempCelsius > 18) {\n  SomfyMylink.play.setScene(\"Good Morning\");\n} else {\n  SomfyMylink.play.skip(\"Weather condition is not sunny or temperature is below 18°C.\");\n}", "intent": "When the weather condition changes to Sunny at a location like New York and the temperature is above 18°C, launch the Good Morning scene on myLink."}
{"original_description": "Turn off a light within 15 minutes of the sunrise in your location.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar fifteenMinutesAfterSunrise = new Date(sunriseTime.getTime() + 15 * 60 * 1000);\nvar currentTime = new Date();\n\nif (currentTime >= sunriseTime && currentTime <= fifteenMinutesAfterSunrise) {\n  Kasa.turnOff.setDevice(\"Living Room Light\");\n} else {\n  Kasa.turnOff.skip(\"Not within 15 minutes of sunrise.\");\n}", "intent": "Turn off the Living Room Light device within 15 minutes of the sunrise in New York."}
{"original_description": "Give your savings a boost every time it gets hot... save a set amount toward one of your Goals every time the temperature where you are exceeds 75℉.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature is not above 75°F.\");\n}", "intent": "Save $5 toward my Summer Vacation goal every time the temperature in New York rises above 75°F."}
{"original_description": "Sets your Nanoleaf Light Panels to a scene at sunset in your region.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_scene", "Filter code method": "Nanoleaf.turnOnScene.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "My scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "my_scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && new Date() >= new Date(Weather.sunSets.SunsetAt)) {\n  Nanoleaf.turnOnScene.setMyScenes(\"Relax\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"Conditions not met for Relax scene.\");\n}", "intent": "When the sunset occurs in my location, as determined by Weather Underground, and the current temperature is 72 degrees Fahrenheit, set my Nanoleaf Light Panels to the \"Relax\" scene."}
{"original_description": "Now falling snow means rising fortunes... save a set amount toward one of your Goals every time it snows.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Snow\") {\n  Qapital.saveTowardGoal.setGoal(\"Emergency Fund\");\n  Qapital.saveTowardGoal.setAmount(10);\n} else {\n  Qapital.saveTowardGoal.skip(\"Not snowing tomorrow.\");\n}", "intent": "Save $10 toward my \"Emergency Fund\" goal every time it snows tomorrow in New York City."}
{"original_description": "Husqvarna Automower® is parked until further notice when the temperature drops below 5 °C / 41 °F.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Husqvarna Automower®", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "automower.park_until_further_notice", "Filter code method": "Automower.parkUntilFurtherNotice.skip(string?: reason)", "Runtime method": "runAction(\"automower.park_until_further_notice\", {})"}, "action_details": [{"section": "Action fields", "title": "Automower\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Automower", "Slug": "automower", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5) {\n  Automower.parkUntilFurtherNotice.skip(\"Temperature in Paris is below 5 °C.\");\n}", "intent": "When the temperature in Paris drops below 5 °C, park the Husqvarna Automower until further notice."}
{"original_description": "Sets your Nanoleaf Light Panels to a Scene at Sunrise in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Nanoleaf Smarter Series", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nanoleaf.turn_on_scene", "Filter code method": "Nanoleaf.turnOnScene.skip(string?: reason)", "Runtime method": "runAction(\"nanoleaf.turn_on_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "My scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "my_scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Nanoleaf.turnOnScene.setMyScenes(\"Relax\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"Temperature is not above 18 degrees Celsius or the weather condition is not Sunny.\");\n}", "intent": "Turn on the Nanoleaf Light Panels to the \"Relax\" scene at sunrise in New York City, when the temperature is above 18 degrees Celsius and the weather condition is Sunny."}
{"original_description": "Have your product turn off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_device_off", "Filter code method": "Idevices.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which product?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Idevices.turnDeviceOff.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnDeviceOff.skip(\"Temperature is not above 18°C or weather condition is not Sunny.\");\n}", "intent": "Turn off the Living Room Lamp at sunrise when the temperature is above 18°C and the weather condition is Sunny."}
{"original_description": "", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.turn_off_switch", "Filter code method": "Abode.turnOffSwitch.skip(string?: reason)", "Runtime method": "runAction(\"abode.turn_off_switch\", {})"}, "action_details": [{"section": "Action fields", "title": "Select switch\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which switch?", "Slug": "select_switch", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && Weather.sunRises.TempFahrenheit === \"65\") {\n  Abode.turnOffSwitch.skip(\"Sunrise at 6:00 AM and temperature is 65 degrees Fahrenheit\");\n}", "intent": "Turn off the Living Room Light switch when the sunrise is at 6:00 AM and the current temperature is 65 degrees Fahrenheit in New York."}
{"original_description": "雨が降りそうな時にBOCCOがお知らせします。", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.Location === \"Tokyo\") {\n  Bocco.boccoSpeak.setMessage(\"雨が降りそうなので、傘を持ちましょう\");\n  Bocco.boccoSpeak.setLang(\"ja\");\n  Bocco.boccoSpeak.room = \"living room\";\n} else {\n  Bocco.boccoSpeak.skip(\"Weather condition is not 'Rain' in Tokyo.\");\n}", "intent": "When the weather condition is \"Rain\" in Tokyo, BOCCO speaks \"雨が降りそうなので、傘を持ちましょう\" in the living room."}
{"original_description": "Set a variable in Apilio to TRUE every time Netatmo Weather Station reports that the temperature rose above the level you specified.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.TargetTemperatureC === \"25\") {\n  Apilio.booleanVariableToUpdate.set({ variableIdentifier: \"TemperatureAboveThreshold\", value: true });\n}", "intent": "Set the Apilio variable \"TemperatureAboveThreshold\" to TRUE every time the Netatmo Weather Station reports that the temperature at \"My Home - Indoor station\" has risen above 25 degrees Celsius."}
{"original_description": "Set a variable in Apilio to FALSE every time Netatmo Weather Station reports that the temperature dropped below the level you specified.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 18) {\n  Apilio.booleanVariableToFalseUpdates.setVariableIdentifier(\"Temperature_Drop_Flag\");\n}", "intent": "Set the variable \"Temperature_Drop_Flag\" in Apilio to FALSE every time the Netatmo Weather Station reports that the temperature at \"My Home - Indoor station\" drops below 18 degrees Celsius."}
{"original_description": "Wenn die Sonne untergeht in deiner Region, dann führe eine Aktion in deiner Qbox aus.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunSets.TempCelsius === \"18\") {\n  Coqon.simpleRuleAction.set_action_code(\"Sonnuntergang\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Temperatur ist nicht 18 Grad Celsius\");\n}", "intent": "Wenn die Sonne in deiner Region untergeht und die aktuelle Temperatur 18 Grad Celsius beträgt, führe die Aktion mit dem Code \"Sonnuntergang\" in deiner Qbox aus."}
{"original_description": "Have a product's night light turn off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "iDevices", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "idevices.turn_nightlight_on", "Filter code method": "Idevices.turnNightlightOn.skip(string?: reason)", "Runtime method": "runAction(\"idevices.turn_nightlight_on\", {})"}, "action_details": [{"section": "Action fields", "title": "What device\nDropdown list", "description": "Dropdown list", "details": {"Label": "What product's night light?", "Slug": "what_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar currentTime = new Date();\nif (currentTime >= sunriseTime) {\n  Idevices.turnNightlightOff.setWhatDevice(\"Bedroom Lamp\");\n} else {\n  Idevices.turnNightlightOn.skip(\"Not yet sunrise.\");\n}", "intent": "Turn off the night light of my Bedroom Lamp at sunrise, which is today at 06:04 AM, when the temperature outside is 18 degrees Celsius and the condition is Sunny."}
{"original_description": "When it's sunrise, open my blind.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Connector", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dooya_connector.open_blinds", "Filter code method": "DooyaConnector.openBlinds.skip(string?: reason)", "Runtime method": "runAction(\"dooya_connector.open_blinds\", {})"}, "action_details": [{"section": "Action fields", "title": "Which blinds\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which blind?", "Slug": "which_blinds", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempFahrenheit === \"72\" && Weather.sunRises.Location === \"New York City\") {\n  DooyaConnector.openBlinds.setWhichBlinds(\"Living Room\");\n} else {\n  DooyaConnector.openBlinds.skip(\"Conditions not met.\");\n}", "intent": "When the sunrise occurs at my location, which is set to New York City, and the current weather condition is Sunny with a temperature of 72 degrees Fahrenheit, open my Living Room blind."}
{"original_description": "Configure a Nexia automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit;\nvar location = \"New York\";\nvar hour = Meta.currentUserTime.hour();\nvar nexiaAutomationName = \"Summer Mode\";\n\nif (tempFahrenheit > 75 && location === \"New York\" && hour >= 7 && hour <= 19) {\n  Nexia.nexiaAutomation.setNexiaAutomationName(nexiaAutomationName);\n} else {\n  Nexia.nexiaAutomation.skip(\"Temperature is not above 75 degrees Fahrenheit in New York or outside of hours (7 AM to 7 PM).\");\n}", "intent": "Configure a Nexia automation named \"Summer Mode\" to run when the outdoor temperature in New York rises above 75 degrees Fahrenheit, triggering the automation between 07:00 and 19:00."}
{"original_description": "Receive a notification whenever it starts raining.\nNote: IFTTT app is needed for this Applet.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  IfNotifications.sendNotification.setMessage(\"Rain has started at My Rain gauge\");\n} else {\n  IfNotifications.sendNotification.skip(\"Not My Rain gauge\");\n}", "intent": "Send a notification with the message \"Rain has started at My Rain gauge\" whenever it starts raining, as measured by My Rain gauge, and notify me at the exact moment the rain begins."}
{"original_description": "Change the home air conditioning mode to cool when the current temperature exceeds the pre-set value. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Airtouch.acMode.setMode(\"cool\");\n}", "intent": "When the temperature in New York rises above 75 degrees Fahrenheit, change the living room air conditioning mode to cool."}
{"original_description": "Lancer un scénario energeasy connect lorsqu'il commence à pleuvoir. Par exemple, fermez vos volets de 50% pour protéger vos fenêtres de la pluie.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "energeasy connect", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "energeasyconnect.launch_action_group", "Filter code method": "Energeasyconnect.launchActionGroup.skip(string?: reason)", "Runtime method": "runAction(\"energeasyconnect.launch_action_group\", {})"}, "action_details": [{"section": "Action fields", "title": "Action group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action group", "Helper text": "The action group to launch", "Slug": "action_group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Pluie\" && Weather.currentConditionIs.TempCelsius < 15) {\n  Energeasyconnect.launchActionGroup.setActionGroup(\"Protection pluie\");\n  Energeasyconnect.launchActionGroup.skip(\"Lancement du scénario Protection pluie en raison de la pluie et d'une température inférieure à 15 degrés Celsius.\");\n} else {\n  Energeasyconnect.launchActionGroup.skip(\"Conditions météorologiques ne correspondant pas au lancement du scénario Protection pluie.\");\n}", "intent": "Lancez le scénario « Protection pluie » dans energeasy connect lorsque la condition météorologique actuelle à Paris est « Pluie », avec une température inférieure à 15 degrés Celsius, et fermez vos volets de 50% pour protéger vos fenêtres de la pluie."}
{"original_description": "Arm a tag at your local sunset time", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wireless Tag", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wirelesstag.arm", "Filter code method": "Wirelesstag.arm.skip(string?: reason)", "Runtime method": "runAction(\"wirelesstag.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Tagid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Slug": "tagid", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Doormodesetclosed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Define closed angle?", "Helper text": "Only applicable to angle based motion sensor in door/gate mode. If not specified, does not re-define closed angle (requires the tag be armed in door mode at least once)", "Slug": "doorModeSetClosed", "Required": "false", "Can have default value": "true", "Filter code method": "Wirelesstag.arm.setDoor Mode Set Closed(string: doorModeSetClosed)"}}], "filter_code": "if (Weather.sunSets.SunsetAt == \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius == \"18\" && Weather.sunSets.Condition == \"Sunny\") {\n  Wirelesstag.arm.setDoorModeSetClosed(\"Kitchen Door\");\n} else {\n  Wirelesstag.arm.skip(\"Conditions not met to arm the Wireless Tag.\");\n}", "intent": "Arm the Wireless Tag with ID \"Kitchen Door\" at the local sunset time, which is today at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny."}
{"original_description": "Nutze COQON um beispielsweise deine Rollläden bei Sonnenaufgang in deiner Region zu fahren oder diverse Beleuchtungen zu schalten.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.sunRises.SunriseAt && Weather.sunRises.TempCelsius === \"18\" && Weather.sunRises.Condition === \"Sunny\") {\n  Coqon.simpleRuleAction.set(\"action_code\", \"rolladen_wohnzimmer_hoch\");\n  Coqon.simpleRuleAction.set(\"action_code\", \"beleuchtung_esszimmer_ein\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Bedingungen nicht erfüllt\");\n}", "intent": "Wenn die Sonne in deiner Region aufgeht und die aktuelle Temperatur 18 Grad Celsius beträgt, fahre die Rollläden in deinem Wohnzimmer hoch und schalte die Beleuchtung im Esszimmer ein, wenn das Wetter sonnig ist."}
{"original_description": "Set my Warmup Smart thermostat to a specific temperature when it is raining outside.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Warmup Smart Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "warmup_smart_thermostat.set-temperature", "Filter code method": "WarmupSmartThermostat.setTemperature.skip(string?: reason)", "Runtime method": "runAction(\"warmup_smart_thermostat.set-temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Set temperature to?", "Helper text": "in °C (e.g. 22)", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "WarmupSmartThermostat.setTemperature.setTemperature(string: temperature)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  WarmupSmartThermostat.setTemperature.setTemperature(\"20\");\n} else {\n  WarmupSmartThermostat.setTemperature.skip(\"Not raining.\");\n}", "intent": "Set the living room Warmup Smart thermostat to 20°C when it's raining in New York."}
{"original_description": "Receive an SMS when the temperature rises above 36°C (97°F)", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureF", "Type": "String", "Example": "73"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureRisesAbove.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.TargetTemperatureC === \"36\") {\n  IfNotifications.sendNotification.setMessage(\"High temperature alert: \" + Netatmo.temperatureRisesAbove.MeasuredTemperatureC + \"°C\");\n} else {\n  IfNotifications.sendNotification.skip(\"Temperature is not above 36°C or device name does not match.\");\n}", "intent": "Send an SMS notification with the message \"High temperature alert: 38°C\" when the Netatmo Weather Station measures a temperature rise above 36°C at My Home - Indoor station."}
{"original_description": "Configure a Nexia automation to run when the pollen count rises above a specified level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 8 && Weather.currentPollenCountRisesAbove.Location === \"New York City\") {\n  Nexia.nexiaAutomation.setNexiaAutomationName(\"Pollen Alert\");\n  Nexia.nexiaAutomation.setHouseName(\"Home\");\n  var notificationMessage = \"The pollen count has risen above 8. Current temperature: \" + Weather.currentPollenCountRisesAbove.TempFahrenheit + \"°F, Condition: \" + Weather.currentPollenCountRisesAbove.Condition;\n  if (Weather.currentPollenCountRisesAbove.TempFahrenheit === \"75\" && Weather.currentPollenCountRisesAbove.Condition === \"Partly Cloudy\") {\n    Nexia.nexiaAutomation.sendNotification(notificationMessage);\n  } else {\n    Nexia.nexiaAutomation.skip(\"Temperature or condition does not match.\");\n  }\n} else {\n  Nexia.nexiaAutomation.skip(\"Pollen count is not above 8 or location is not New York City.\");\n}", "intent": "Configure a Nexia automation named \"Pollen Alert\" in the house named \"Home\" to run when the pollen count rises above 8 at the location of New York City, and also send a notification with the current temperature of 75 degrees Fahrenheit and the weather condition as \"Partly Cloudy\"."}
{"original_description": "Disarm a tag at your local sunrise time", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Wireless Tag", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wirelesstag.disarm", "Filter code method": "Wirelesstag.disarm.skip(string?: reason)", "Runtime method": "runAction(\"wirelesstag.disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Tagid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Tag", "Slug": "tagid", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && Weather.sunRises.SunriseAt.getMinutes() === 15 \n    && Weather.sunRises.TempCelsius >= 17.5 && Weather.sunRises.TempCelsius <= 18.5 \n    && Weather.sunRises.Condition === \"Sunny\") {\n  Wirelesstag.disarm.setTagid(\"Home Entrance\");\n} else {\n  Wirelesstag.disarm.skip(\"Conditions not met.\");\n}", "intent": "Disarm the Wireless Tag named \"Home Entrance\" at sunrise time, which is 06:15 AM, when the temperature is around 18 degrees Celsius and the weather condition is Sunny."}
{"original_description": "Run a shortcut in Futurehome turning OFF multiple garden lights at Sunrise", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Futurehome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "futurehome.run_shortcut", "Filter code method": "Futurehome.runShortcut.skip(string?: reason)", "Runtime method": "runAction(\"futurehome.run_shortcut\", {})"}, "action_details": [{"section": "Action fields", "title": "Shortcut\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shortcut?", "Slug": "shortcut", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempCelsius > 15 && Weather.sunRises.Condition === \"Sunny\") {\n  Futurehome.runShortcut(\"Garden Lights OFF\");\n} else {\n  Futurehome.runShortcut.skip(\"Temperature is not above 15°C or weather condition is not Sunny.\");\n}", "intent": "Turn off the garden lights in the backyard and patio area at sunrise when the temperature is above 15°C and the weather condition is Sunny, by running the \"Garden Lights OFF\" shortcut in Futurehome."}
{"original_description": "Change the home air conditioning mode to heat when the current temperature falls below the pre-set value.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_mode", "Filter code method": "Airtouch.acMode.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acMode.setMode(string: mode)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 40) {\n  Airtouch.acMode.setMode(\"heat\");\n}", "intent": "Change the living room air conditioning mode to heat when the current outside temperature in New York falls below 40°F."}
{"original_description": "Receive an an SMS when the humidity rises above 60%", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.humidity-rises-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target humidity percentage", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.humidityRisesAbove.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the humidity", "description": "This is the name of the Netamo device where you are reading the humidity", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.humidityRisesAbove.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target humidity\nThe target humidity in percent", "description": "The target humidity in percent", "details": {"Slug": "TargetHumidity", "Filter code": "Netatmo.humidityRisesAbove.TargetHumidity", "Type": "String", "Example": "83"}}, {"section": "Ingredients", "title": "Measured humidity\nThe measured humidity as a percentage", "description": "The measured humidity as a percentage", "details": {"Slug": "MeasuredHumidity", "Filter code": "Netatmo.humidityRisesAbove.MeasuredHumidity", "Type": "String", "Example": "84"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.humidityRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.humidityRisesAbove.MeasuredHumidity > 65) {\n  IfNotifications.sendNotification.setMessage(\"Humidity alert: \" + Netatmo.humidityRisesAbove.MeasuredHumidity + \"% at \" + Netatmo.humidityRisesAbove.DeviceName);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}", "intent": "Send an SMS notification with the message \"Humidity alert: 67% at My Home - Indoor station\" when the humidity measured by My Home - Indoor station rises above 65% at any time."}
{"original_description": "BOCCO speaks aloud if it is rainy outside.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Bocco.boccoSpeak.setMessage(\"It's raining outside\");\n  Bocco.boccoSpeak.setLang(\"English\");\n} else {\n  Bocco.boccoSpeak.skip(\"Not rainy outside\");\n}", "intent": "If the current weather condition is rainy at the location of New York, then BOCCO speaks aloud in the living room with the message \"It's raining outside\" in English."}
{"original_description": "Set your Philips Hue lights to automatically turn blue if the temperature drops below 0° outside.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.temperature-drops-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input", "description": "Text input", "details": {"Label": "Target temperature", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occurred", "description": "The date and time the measurement occurred", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThis is the name of the Netamo device where you are reading the temperature", "description": "This is the name of the Netamo device where you are reading the temperature", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.temperatureDropsBelow.DeviceName", "Type": "String", "Example": "My Home - Indoor station"}}, {"section": "Ingredients", "title": "Target temperature c\nThe target temperature in degrees Celsius", "description": "The target temperature in degrees Celsius", "details": {"Slug": "TargetTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureC", "Type": "String", "Example": "22.22"}}, {"section": "Ingredients", "title": "Target temperature f\nThe target temperature in degrees Fahrenheit", "description": "The target temperature in degrees Fahrenheit", "details": {"Slug": "TargetTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.TargetTemperatureF", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Measured temperature c\nThe measured temperature in degrees Celsius", "description": "The measured temperature in degrees Celsius", "details": {"Slug": "MeasuredTemperatureC", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureC", "Type": "String", "Example": "22.78"}}, {"section": "Ingredients", "title": "Measured temperature f\nThe measured temperature in degrees Fahrenheit", "description": "The measured temperature in degrees Fahrenheit", "details": {"Slug": "MeasuredTemperatureF", "Filter code": "Netatmo.temperatureDropsBelow.MeasuredTemperatureF", "Type": "String", "Example": "73"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 0) {\n  Hue.setColorAllHue.setColor(\"#0000FF\");\n} else {\n  Hue.setColorAllHue.skip(\"Temperature is not below 0°C or device name does not match.\");\n}", "intent": "When the temperature measured by the Netatmo weather station at \"My Home - Indoor station\" drops below 0°C, set all Philips Hue lights in the living room to blue (#0000FF)."}
{"original_description": "If the forecast in your local area calls for rain, conserve water by pausing your RainMachine.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "RainMachine", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "rain_machine.pause_all_watering", "Filter code method": "RainMachine.pauseAllWatering.skip(string?: reason)", "Runtime method": "runAction(\"rain_machine.pause_all_watering\", {})"}, "action_details": [{"section": "Action fields", "title": "Sprinkler\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Device Name", "Slug": "sprinkler", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "For how long?", "Helper text": "Duration in minutes.", "Slug": "duration", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" && \n    Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"18\" && \n    Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"10\") {\n  RainMachine.pauseAllWatering.setSprinkler(\"Front Yard Sprinkler\");\n  RainMachine.pauseAllWatering.setDuration(60);\n  RainMachine.pauseAllWatering.skip(\"Rain forecasted for tomorrow, pausing watering.\");\n}", "intent": "If the Weather Underground forecast for your location calls for rain tomorrow, with a high temperature of 18°C and a low of 10°C, pause all watering on your RainMachine device named \"Front Yard Sprinkler\" for a duration of 60 minutes."}
{"original_description": "Get a phone call at sunset. Time to wake up.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Woopla.ttsCall.setTts(\"Time to wake up, it's sunset\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Conditions not met\");\n}", "intent": "When the sunset occurs at your location, with a temperature of 18°C and the condition being Sunny, make a phone call using Woopla and play the text \"Time to wake up, it's sunset\" in English."}
{"original_description": "Brighten up my Moonside lights to 100 percent brightness when the sun rises.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Moonside Light", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "moonside.set_brightness100", "Filter code method": "Moonside.setBrightness100.skip(string?: reason)", "Runtime method": "runAction(\"moonside.set_brightness100\", {})"}, "action_details": [], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\") {\n  Moonside.setBrightness100.skip();\n}", "intent": "When the sun rises at my location, as reported by Weather Underground, and the current condition is Sunny, set my Moonside lights to 100 percent brightness."}
{"original_description": "Launch a Scenario that gradually turns your lights on when the sun goes down.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar tempCelsius = parseFloat(Weather.sunSets.TempCelsius);\nif (sunsetHour >= 16 && sunsetHour <= 20 && tempCelsius > 15) {\n  Gideon.launchScenario.setScenarioName(\"Good Evening\");\n} else {\n  Gideon.launchScenario.skip(\"Conditions not met for 'Good Evening' scenario.\");\n}", "intent": "Launch the 'Good Evening' scenario in Gideon Smart Home when the sunset at your location is between 16:00 and 20:00, and the current temperature is above 15°C, to gradually turn on the lights."}
{"original_description": "Open eWeLink Support curtain motor when it starts to rain. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.electric_curtain_switch_action", "Filter code method": "Ewelink.electricCurtainSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.electric_curtain_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Electric curtain devices query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "electric_curtain_devices_query", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which action?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.electricCurtainSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Ewelink.electricCurtainSwitchAction.setOnoffActQuery(\"Open\");\n} else {\n  Ewelink.electricCurtainSwitchAction.skip(\"It's not raining.\");\n}", "intent": "Open the Living Room eWeLink Support curtain motor when it starts to rain in New York City."}
{"original_description": "Send a sms to your phone when it starts raining.", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-has-started"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainHasStarted.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainHasStarted.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Netatmo.rainHasStarted.DeviceName !== \"My Rain gauge\") {\n  IfNotifications.sendNotification.skip(\"Not the specified rain gauge.\");\n} else {\n  var message = `Rain has started at ${Netatmo.rainHasStarted.DeviceName}`;\n  IfNotifications.sendNotification.setMessage(message);\n}", "intent": "Send a sms to your phone with the message \"Rain has started at My Rain gauge\" when it starts raining at My Rain gauge."}
{"original_description": "If Pollen Count rises, Tell my Orion Group.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_pollen_count_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Count\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Pollen count", "Slug": "count", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pollen count\nThe current pollen count, 0-12", "description": "The current pollen count, 0-12", "details": {"Slug": "pollen_count", "Filter code": "Weather.currentPollenCountRisesAbove.PollenCount", "Type": "String", "Example": "6.2"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentPollenCountRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentPollenCountRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentPollenCountRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentPollenCountRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentPollenCountRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Orion - Voice for Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "orion.send_voice_message", "Filter code method": "Orion.sendVoiceMessage.skip(string?: reason)", "Runtime method": "runAction(\"orion.send_voice_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which group?", "Helper text": "The Orion group where you'll hear your message.", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "User\nDropdown list", "description": "Dropdown list", "details": {"Label": "Who hears it?", "Helper text": "Select whether everyone in the group should hear the message, or just you.", "Slug": "user", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What to say?", "Helper text": "This is the message that you'll hear in your group.", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Orion.sendVoiceMessage.setMessage(string: message)"}}], "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 8 && Weather.currentPollenCountRisesAbove.Location === \"New York\") {\n  var message = \"High pollen count of \" + Weather.currentPollenCountRisesAbove.PollenCount + \", currently \" + Weather.currentPollenCountRisesAbove.Condition + \" with a temperature of \" + Weather.currentPollenCountRisesAbove.TempFahrenheit + \"°F, check the 5-day forecast at \" + Weather.currentPollenCountRisesAbove.ForecastUrl + \" for updates.\";\n  Orion.sendVoiceMessage.setMessage(message);\n} else {\n  Orion.sendVoiceMessage.skip(\"Pollen count is not high enough or location does not match.\");\n}", "intent": "If the pollen count rises above 8 in New York, send a voice message to my Orion Group saying \"High pollen count of 9.2, currently sunny with a temperature of 75°F, check the 5-day forecast at http://www.weather.com/weather/5-day/GMXX1273 for updates.\""}
{"original_description": "Configure a American Standard Home automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "American Standard® Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "american_standard_home.nexia_automation", "Filter code method": "AmericanStandardHome.nexiaAutomation.skip(string?: reason)", "Runtime method": "runAction(\"american_standard_home.nexia_automation\", {})"}, "action_details": [{"section": "Action fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75 && Weather.currentTemperatureRisesAbove.location === \"New York\") {\n  AmericanStandardHome.nexiaAutomation.setNexiaAutomation(\"Good Morning\");\n} else {\n  AmericanStandardHome.nexiaAutomation.skip(\"Temperature is not above 75 degrees Fahrenheit in New York.\");\n}", "intent": "When the outdoor temperature in New York rises above 75 degrees Fahrenheit, run the \"Good Morning\" American Standard Home automation."}
{"original_description": "You can trigger a MyMilan Scene during Sunrise. For eg: You can open your curtains, turn on lights & play soothing music when waking up", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempCelsius === \"18\" && Weather.sunRises.Condition === \"Sunny\") {\n  Mymilan.aScenes.setScenes(\"Good Morning\");\n} else {\n  Mymilan.aScenes.skip(\"Conditions not met to trigger 'Good Morning' scene.\");\n}", "intent": "Trigger the \"Good Morning\" scene in MyMilan when the sunrise occurs at a location with a temperature of 18°C and the current weather condition is Sunny, to open the curtains, turn on the lights, and play soothing music."}
{"original_description": "Launch a scenario when the temperature goes up and you're ready to chill at home. Your thermostat goes off, your blinds go up and the environment gets fresh!", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Gideon Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "gideon.launch_scenario", "Filter code method": "Gideon.launchScenario.skip(string?: reason)", "Runtime method": "runAction(\"gideon.launch_scenario\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenario name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scenario Name", "Helper text": "The name of the Scenario from Gideon app.", "Slug": "scenario_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75 && Weather.currentTemperatureRisesAbove.Condition === \"Sunny\" && Weather.currentTemperatureRisesAbove.Location === \"New York\") {\n  Gideon.launchScenario.setScenarioName(\"Relax at Home\");\n} else {\n  Gideon.launchScenario.skip(\"Conditions not met to launch 'Relax at Home' scenario.\");\n}", "intent": "Launch the \"Relax at Home\" scenario on Gideon Smart Home when the temperature rises above 75 degrees Fahrenheit in New York, and it's sunny outside, to turn off the thermostat, open the blinds, and freshen up the environment."}
{"original_description": "This will automatically turn on the light(s) of your choice a few minutes before Sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar fifteenMinutesBeforeSunset = new Date(sunsetTime.getTime() - 15 * 60 * 1000);\nvar currentTime = new Date();\nvar currentTempCelsius = Weather.sunSets.TempCelsius;\nvar currentCondition = Weather.sunSets.Condition;\n\nif (currentCondition === \"Sunny\" && currentTempCelsius > 18 && currentTime >= fifteenMinutesBeforeSunset) {\n  Aisync.onOff.setDevice(\"living room lamp\");\n  Aisync.onOff.setOnOff(\"on\");\n} else {\n  Aisync.onOff.skip(\"Conditions not met to turn on the living room lamp.\");\n}", "intent": "Turn on the living room lamp 15 minutes before sunset when the current weather condition is Sunny and the temperature is above 18°C."}
{"original_description": "At sunset, the selected Lexi group lights will automatically turn on.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.groupTurnOff", "Filter code method": "Lexi.groupTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"lexi.groupTurnOff\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Group", "Slug": "group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunSets.SunsetAt.getHours() === 19 && Weather.sunSets.SunsetAt.getMinutes() === 45) {\n  Lexi.groupTurnOn.setGroup(\"Living Room\");\n} else {\n  Lexi.groupTurnOn.skip(\"It's not sunset time yet.\");\n}", "intent": "At sunset, which is expected to occur at 7:45 PM today according to the Weather Underground forecast for my location, the Lexi living room lights group will automatically turn on."}
{"original_description": "Change Nexus Home AC modes based on outside weather conditions", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_condition_is"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Current condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentConditionIs.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentConditionIs.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentConditionIs.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentConditionIs.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentConditionIs.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentConditionIs.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && Weather.currentConditionIs.TempCelsius > 25) {\n  BrilliantNexus.acExecution.setMode(\"Cool\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n}", "intent": "When the current weather condition is Sunny and the temperature is above 25°C in New York, set the Brilliant Nexus AC device named \"Living Room AC\" to Cool mode with a temperature of 22°C and a fan speed of Medium."}
{"original_description": "This Applet will turn on your LinkJapan device when the sun rises in your area.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "LinkJapan eHome", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "LinkJapan_eHome.powerState", "Filter code method": "LinkJapanEHome.powerState.skip(string?: reason)", "Runtime method": "runAction(\"LinkJapan_eHome.powerState\", {})"}, "action_details": [{"section": "Action fields", "title": "Deviceinfo\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "choose device", "Slug": "deviceinfo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Powercontrol changepowerstate string\nDropdown list", "description": "Dropdown list", "details": {"Label": "On or off?", "Helper text": "choose power", "Slug": "PowerControl_ChangePowerState_string", "Required": "true", "Can have default value": "true", "Filter code method": "LinkJapanEHome.powerState.setPower Control Change Power State String(string: PowerControl_ChangePowerState_string)"}}], "filter_code": "if (Weather.sunRises.TempCelsius > 15) {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Temperature is not above 15°C.\");\n}", "intent": "Turn on my Living Room Lamp device when the sun rises in Tokyo, Japan, and the current temperature is above 15°C."}
{"original_description": "Turn on/off Nexus Home Lights when sun sets at your location", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.lights", "Filter code method": "BrilliantNexus.lights.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.lights\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Please select any of the Light", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your light", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.lights.setStatus(string: status)"}}], "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  BrilliantNexus.lights.setStatus(\"ON\");\n} else {\n  BrilliantNexus.lights.skip(\"Conditions not met to turn on the lights.\");\n}", "intent": "Turn on the Nexus Home Lights when the sun sets at your location, specifically at 04:17:06+05:00, and the current temperature is 18 degrees Celsius with a sunny condition."}
{"original_description": "Set a specific sensitivity value for each alarm area after dark.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.sens_on", "Filter code method": "Instar.sensOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.sens_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Sensitive1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 1 sensitivity", "Helper text": "This is to set sensitivity for area 1", "Slug": "sensitive1", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive1(string: sensitive1)"}}, {"section": "Action fields", "title": "Sensitive2\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 2 sensitivity", "Helper text": "This is to set sensitivity for area 2", "Slug": "sensitive2", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive2(string: sensitive2)"}}, {"section": "Action fields", "title": "Sensitive3\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 3 sensitivity", "Helper text": "This is to set sensitivity for area 3", "Slug": "sensitive3", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive3(string: sensitive3)"}}, {"section": "Action fields", "title": "Sensitive4\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 4 sensitivity", "Helper text": "This is to set sensitivity for area 4", "Slug": "sensitive4", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive4(string: sensitive4)"}}], "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar hour = sunsetTime.getHours();\nif (hour >= 19) {\n  Instar.sensOn.setSensitive1(\"High\");\n  Instar.sensOn.setSensitive2(\"Medium\");\n  Instar.sensOn.setSensitive3(\"Low\");\n  Instar.sensOn.setSensitive4(\"Very Low\");\n  Instar.sensOn.setCamName(\"Backyard Camera\");\n} else {\n  Instar.sensOn.skip(\"Sunset time is before 19:00\");\n}", "intent": "Set the sensitivity of Area 1 to High, Area 2 to Medium, Area 3 to Low, and Area 4 to Very Low for the \"Backyard Camera\" in INSTAR Cloud when the sunset time is after 19:00 according to Weather Underground's weather report for the location set as \"Home\"."}
{"original_description": "When the temperature drops below X modify an iZone target.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "iZone", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "i_zone.setzonesetpoint", "Filter code method": "IZone.setzonesetpoint.skip(string?: reason)", "Runtime method": "runAction(\"i_zone.setzonesetpoint\", {})"}, "action_details": [{"section": "Action fields", "title": "Id\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which zone?", "Helper text": "Select the device and zone you would like to control.", "Slug": "id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nText input > Other", "description": "Text input > Other", "details": {"Label": "What temperature?", "Helper text": "Enter the degrees to change the setpoint temperature to as a number only (in degrees Celsius).", "Slug": "temp", "Required": "true", "Can have default value": "true", "Filter code method": "IZone.setzonesetpoint.setTemp(string: temp)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5) {\n  IZone.setzonesetpoint.setTemp(\"20\");\n} else {\n  IZone.setzonesetpoint.skip(\"Temperature is not below 5 degrees Celsius.\");\n}", "intent": "When the temperature in degrees Celsius drops below 5 at the location of home, modify the iZone target temperature of the living room zone to 20 degrees Celsius."}
{"original_description": "When the temperature gets too cold outside, open the curtain(s) to let in some sunlight.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MyCurtains", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "MyCurtains.move_device", "Filter code method": "MyCurtains.moveDevice.skip(string?: reason)", "Runtime method": "runAction(\"MyCurtains.move_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Devices\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which drapery or curtain?", "Helper text": "Which drapery system would you like to move?", "Slug": "devices", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Move type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which move command?", "Helper text": "How open would you like the drapery to be?", "Slug": "move_type", "Required": "true", "Can have default value": "true", "Filter code method": "MyCurtains.moveDevice.setMove Type(string: move_type)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5) {\n  MyCurtains.moveDevice.setMoveType(\"open\");\n  MyCurtains.moveDevice.skip();\n}", "intent": "When the temperature outside drops below 5°C in the location of my home, open the living room curtains to let in some sunlight."}
{"original_description": "Automatically turn on your ceiling fan if weather's hot.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ai-Sync", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "aisync.on_off", "Filter code method": "Aisync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"aisync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanlight Sync solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Aisync.onOff.setDevice(\"Living Room Ceiling Fan\");\n  Aisync.onOff.setOnOff(\"on\");\n} else {\n  Aisync.onOff.skip(\"Temperature is not above 75 degrees Fahrenheit.\");\n}", "intent": "Turn on the Living Room Ceiling Fan device using Ai-Sync when the temperature rises above 75 degrees Fahrenheit in New York, as reported by Weather Underground."}
{"original_description": "Set a specific sensitivity value for each alarm area during the day.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.sens_on", "Filter code method": "Instar.sensOn.skip(string?: reason)", "Runtime method": "runAction(\"instar.sens_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Cam name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Camera Name in Cloud", "Helper text": "Camera name from INSTAR Cloud, if there is no any camera, you can create it in INSTAR Cloud", "Slug": "cam_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Sensitive1\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 1 sensitivity", "Helper text": "This is to set sensitivity for area 1", "Slug": "sensitive1", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive1(string: sensitive1)"}}, {"section": "Action fields", "title": "Sensitive2\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 2 sensitivity", "Helper text": "This is to set sensitivity for area 2", "Slug": "sensitive2", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive2(string: sensitive2)"}}, {"section": "Action fields", "title": "Sensitive3\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 3 sensitivity", "Helper text": "This is to set sensitivity for area 3", "Slug": "sensitive3", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive3(string: sensitive3)"}}, {"section": "Action fields", "title": "Sensitive4\nDropdown list", "description": "Dropdown list", "details": {"Label": "Area 4 sensitivity", "Helper text": "This is to set sensitivity for area 4", "Slug": "sensitive4", "Required": "true", "Can have default value": "true", "Filter code method": "Instar.sensOn.setSensitive4(string: sensitive4)"}}], "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Instar.sensOn.setSensitive1(\"High\");\n  Instar.sensOn.setSensitive2(\"Medium\");\n  Instar.sensOn.setSensitive3(\"Low\");\n  Instar.sensOn.setSensitive4(\"Very Low\");\n  Instar.sensOn.setCamName(\"Office Camera\");\n} else {\n  Instar.sensOn.skip(\"Conditions not met.\");\n}", "intent": "Set the sensitivity of Area 1 to High, Area 2 to Medium, Area 3 to Low, and Area 4 to Very Low for the Office Camera in INSTAR Cloud when the current temperature is above 18 degrees Celsius and the weather condition is Sunny, as reported by Weather Underground at sunrise."}
{"original_description": "Turn INSTAR Cloud alarm email on at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.cloud_alarm_email_off", "Filter code method": "Instar.cloudAlarmEmailOff.skip(string?: reason)", "Runtime method": "runAction(\"instar.cloud_alarm_email_off\", {})"}, "action_details": [], "filter_code": "var sunriseTime = Weather.sunRises.SunriseAt;\nvar currentTempCelsius = Weather.sunRises.TempCelsius;\nvar condition = Weather.sunRises.Condition;\nvar forecastUrl = Weather.sunRises.ForecastUrl;\n\nif (sunriseTime !== null && currentTempCelsius === \"18\" && condition === \"Sunny\" && forecastUrl === \"http://www.weather.com/weather/5-day/GMXX1273\") {\n  Instar.cloudAlarmEmailOff.skip(\"Turning on INSTAR Cloud alarm email at sunrise.\");\n} else {\n  // No action\n}", "intent": "Turn on the INSTAR Cloud alarm email at sunrise, which is 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny, in the location where the weather forecast URL is http://www.weather.com/weather/5-day/GMXX1273."}
{"original_description": "Set Nexus Home AC mode and temperature in the morning and turn on/off the Nexus Home lights at sunrise", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.lights", "Filter code method": "BrilliantNexus.lights.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.lights\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Please select any of the Light", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Status", "Helper text": "Turn ON/OFF your light", "Slug": "status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.lights.setStatus(string: status)"}}], "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && parseInt(Weather.sunRises.HighTempCelsius) > 25) {\n  BrilliantNexus.lights.setStatus(\"on\");\n} else {\n  BrilliantNexus.lights.setStatus(\"off\");\n}\n\nBrilliantNexus.acMode.setMode(\"cooling\");\nBrilliantNexus.acTemperature.setTemperature(22);", "intent": "At sunrise, set the Nexus Home AC mode to cooling and temperature to 22°C, then turn on the Living Room Light if the current weather condition is Sunny and the high temperature for the day is above 25°C, otherwise turn it off."}
{"original_description": "This will automatically turn on the light(s) of your choice a few minutes before Sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Fanimation", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "fansync.on_off", "Filter code method": "Fansync.onOff.skip(string?: reason)", "Runtime method": "runAction(\"fansync.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "which device?", "Helper text": "Please select the device you have on Fanimation solution.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off\nDropdown list", "description": "Dropdown list", "details": {"Label": "on or off?", "Helper text": "Please choose switch on or off", "Slug": "on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar fifteenMinutesBeforeSunset = new Date(sunsetTime.getTime() - 15 * 60 * 1000);\nvar currentTime = new Date();\nvar tempFahrenheit = parseFloat(Weather.sunSets.TempFahrenheit);\nvar condition = Weather.sunSets.Condition;\n\nif (currentTime >= fifteenMinutesBeforeSunset && tempFahrenheit > 70 && condition === \"Sunny\") {\n  Fansync.onOff.setDevice(\"living room fan\");\n  Fansync.onOff.setOnOff(\"on\");\n} else {\n  Fansync.onOff.skip(\"Conditions not met to turn on the living room fan.\");\n}", "intent": "Turn on the living room fan 15 minutes before sunset when the outside temperature is above 70 degrees Fahrenheit and the weather condition is sunny."}
{"original_description": "기능코스 8교시에서 활용하세요.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.tomorrows_forecast_calls_for"}, "trigger_details": [{"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Tomorrows condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "tomorrows_condition", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsCondition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of tomorrow's condition.", "description": "The URL to an image of tomorrow's condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nTomorrow's high temperature in degrees Fahrenheit", "description": "Tomorrow's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nTomorrow's high temperature in degrees Celsius", "description": "Tomorrow's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nTomorrow's low temperature in degrees Fahrenheit", "description": "Tomorrow's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nTomorrow's low temperature in degrees Celsius", "description": "Tomorrow's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.tomorrowsForecastCallsFor.LowTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Tomorrows date\nTomorrow's date.", "description": "Tomorrow's date.", "details": {"Slug": "tomorrows_date", "Filter code": "Weather.tomorrowsForecastCallsFor.TomorrowsDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.tomorrowsForecastCallsFor.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}], "action_channel": "EveryKit", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "everykit.send_message", "Filter code method": "Everykit.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"everykit.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Which every kit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which EveryKit?", "Slug": "which_every_kit", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What data\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What data?", "Helper text": "Optional — You can use the data from the trigger in this action field.", "Slug": "what_data", "Required": "false", "Can have default value": "true", "Filter code method": "Everykit.sendMessage.setWhat Data(string: what_data)"}}, {"section": "Action fields", "title": "Action message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What message?", "Helper text": "You can choose any name for the message. After making the message, use it on the Everykit block program.", "Slug": "action_message", "Required": "true", "Can have default value": "true", "Filter code method": "Everykit.sendMessage.setAction Message(string: action_message)"}}], "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Sunny\" \n    && Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"22\" \n    && Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"18\") {\n  Everykit.sendMessage.setWhatData(\"Sunny, 22°C high, 18°C low\");\n  Everykit.sendMessage.setActionMessage(\"Tomorrow will be sunny, don't forget your sunglasses!\");\n} else {\n  Everykit.sendMessage.skip(\"Conditions do not match.\");\n}", "intent": "If tomorrow's forecast in Seoul calls for Sunny conditions with a high temperature of 22°C and a low of 18°C, then send a message to My Personal EveryKit saying \"Tomorrow will be sunny, don't forget your sunglasses!\" with the data \"Sunny, 22°C high, 18°C low\"."}
{"original_description": "Report today's rainfall amount from your WeatherFlow device to Netro. Netro will use it to update schedules.   ", "trigger_channel": "Netatmo Weather Station", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "netatmo.rain-today-amount"}, "trigger_details": [{"section": "Trigger fields", "title": "Measure source\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which station?", "Slug": "measure_source", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "DeviceName", "Filter code": "Netatmo.rainTodayAmount.DeviceName", "Type": "String", "Example": "My Rain gauge"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the measurement occured", "description": "The date and time the measurement occured", "details": {"Slug": "MeasuredAt", "Filter code": "Netatmo.rainTodayAmount.MeasuredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Measured rainfall in\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallIn", "Filter code": "Netatmo.rainTodayAmount.MeasuredRainfallIn", "Type": "String", "Example": "0.43"}}, {"section": "Ingredients", "title": "Measured rainfall mm\nThe name of the Netatmo Rain gauge", "description": "The name of the Netatmo Rain gauge", "details": {"Slug": "MeasuredRainfallMM", "Filter code": "Netatmo.rainTodayAmount.MeasuredRainfallMM", "Type": "String", "Example": "10.92"}}], "action_channel": "Netro", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "netro.report_weather", "Filter code method": "Netro.reportWeather.skip(string?: reason)", "Runtime method": "runAction(\"netro.report_weather\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "device", "Helper text": "Select the Netro device to use the weather data.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Date\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "date", "Helper text": "The date of the weather information, e.g. 2000/12/30.", "Slug": "date", "Required": "true", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setDate(string: date)"}}, {"section": "Action fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "condition", "Helper text": "The daily weather condition.", "Slug": "condition", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setCondition(string: condition)"}}, {"section": "Action fields", "title": "Summary\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "summary", "Helper text": "The daily weather summary.", "Slug": "summary", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSummary(string: summary)"}}, {"section": "Action fields", "title": "Rain\nText input > Other", "description": "Text input > Other", "details": {"Label": "rain", "Helper text": "The daily rain amount, float, with unit of MM", "Slug": "rain", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setRain(string: rain)"}}, {"section": "Action fields", "title": "Rain prob\nText input > Other", "description": "Text input > Other", "details": {"Label": "rain probability", "Helper text": "The daily rain probability for forecast data, integer, from 0 to 100", "Slug": "rain_prob", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setRain Prob(string: rain_prob)"}}, {"section": "Action fields", "title": "Temp\nText input > Other", "description": "Text input > Other", "details": {"Label": "temperature", "Helper text": "The daily average temperature, float, of unit Celsius", "Slug": "temp", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setTemp(string: temp)"}}, {"section": "Action fields", "title": "T min\nText input > Other", "description": "Text input > Other", "details": {"Label": "minimum temperature", "Helper text": "The daily minimum temperature, float, of unit Celsius", "Slug": "t_min", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Min(string: t_min)"}}, {"section": "Action fields", "title": "T max\nText input > Other", "description": "Text input > Other", "details": {"Label": "maximum temperature", "Helper text": "The daily maximum temperature of day, float, of unit Celsius", "Slug": "t_max", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Max(string: t_max)"}}, {"section": "Action fields", "title": "T dew\nText input > Other", "description": "Text input > Other", "details": {"Label": "dew point", "Helper text": "The daily dew point, float, of unit Celsius", "Slug": "t_dew", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setT Dew(string: t_dew)"}}, {"section": "Action fields", "title": "Wind speed\nText input > Other", "description": "Text input > Other", "details": {"Label": "wind speed", "Helper text": "The daily wind speed, float, of unit m/s", "Slug": "wind_speed", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setWind Speed(string: wind_speed)"}}, {"section": "Action fields", "title": "Humidity\nText input > Other", "description": "Text input > Other", "details": {"Label": "humidity", "Helper text": "The daily humidity, integer, 0-100", "Slug": "humidity", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setHumidity(string: humidity)"}}, {"section": "Action fields", "title": "Pressure\nText input > Other", "description": "Text input > Other", "details": {"Label": "pressure", "Helper text": "The daily air pressure, float, of unit hpa", "Slug": "pressure", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setPressure(string: pressure)"}}, {"section": "Action fields", "title": "Sunrise\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "sunrise", "Helper text": "sunrise time", "Slug": "sunrise", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSunrise(string: sunrise)"}}, {"section": "Action fields", "title": "Sunset\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "sunset", "Helper text": "sunset time", "Slug": "sunset", "Required": "false", "Can have default value": "true", "Filter code method": "Netro.reportWeather.setSunset(string: sunset)"}}], "filter_code": "Netro.reportWeather.setDevice(\"Smart Garden\")\n      .setDate(\"2020-07-08\")\n      .setCondition(\"Light Rain\")\n      .setSummary(\"Rainy weather\")\n      .setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM)\n      .setRainProb(\"100\");", "intent": "Report the rainfall amount of 10.92 mm measured at 2020-07-08T04:17:06+05:00 from My Rain gauge to Netro device Smart Garden, setting the date to 2020-07-08, condition to Light Rain, summary to Rainy weather, rain amount to 10.92 mm, and rain probability to 100.", "filter_code_old": "Netro.reportWeather.setDate(Netatmo.rainTodayAmount.MeasuredAt)\nNetro.reportWeather.setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM)\nNetro.reportWeather.setRainProb(\"100\")\n\n\n"}
{"original_description": "At sunrise, the selected Lexi group lights will automatically turn off.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.groupTurnOff", "Filter code method": "Lexi.groupTurnOff.skip(string?: reason)", "Runtime method": "runAction(\"lexi.groupTurnOff\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Group", "Slug": "group", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt !== null && Weather.sunRises.Location === \"New York\") {\n  Lexi.groupTurnOff.setGroup(\"Living Room\");\n}", "intent": "At sunrise in New York, automatically turn off the lights in the Living Room group."}
{"original_description": "Turn off INSTAR Cloud alarm email at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "INSTAR", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instar.cloud_alarm_email_off", "Filter code method": "Instar.cloudAlarmEmailOff.skip(string?: reason)", "Runtime method": "runAction(\"instar.cloud_alarm_email_off\", {})"}, "action_details": [], "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Instar.cloudAlarmEmailOff.skip(\"Turning off INSTAR Cloud alarm email at sunset.\");\n}", "intent": "Turn off INSTAR Cloud alarm email at sunset, which is today at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny in my location."}
{"original_description": "Configure a Trane Home automation to run when the outdoor temperature rises above a threshold level.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Trane® Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trane_home.nexia_automation", "Filter code method": "TraneHome.nexiaAutomation.skip(string?: reason)", "Runtime method": "runAction(\"trane_home.nexia_automation\", {})"}, "action_details": [{"section": "Action fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= 75 || Weather.currentTemperatureRisesAbove.location !== \"New York\") {\n  TraneHome.nexiaAutomation.skip(\"Outdoor temperature in New York is not above 75°F.\");\n} else {\n  TraneHome.nexiaAutomation.setNexiaAutomation(\"Summer Mode\");\n}", "intent": "When the outdoor temperature in New York rises above 75°F, run the 'Summer Mode' Nexia automation on my Trane Home system."}
{"original_description": "Change the Nexus Home AC modes and AC temperature when outside temperature rises based on your given value", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_rises_above"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureRisesAbove.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureRisesAbove.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureRisesAbove.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureRisesAbove.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureRisesAbove.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureRisesAbove.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  BrilliantNexus.acExecution.setMode(\"Cool\");\n  BrilliantNexus.acExecution.setTemperature(68);\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n}", "intent": "When the outside temperature rises above 75°F in New York, change the Nexus Home AC mode to 'Cool' and set the AC temperature to 68°F with a fan speed of 'Medium'."}
{"original_description": "Automatically open garage door at sunrise", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.TempFahrenheit > 40 && Weather.sunRises.Condition === \"Sunny\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n  Garadget.openDoor();\n} else {\n  Garadget.openDoor.skip(\"Temperature is not above 40°F or weather condition is not Sunny.\");\n}", "intent": "Open the garage door labeled \"Main Garage Door\" at sunrise when the current temperature is above 40°F and the weather condition is Sunny, using the Garadget account associated with the device named \"Home Garage\"."}
{"original_description": "Good morning with the lights on. ", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "AduroSmart", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "AduroSmart.turnondevice", "Filter code method": "AduroSmart.turnondevice.skip(string?: reason)", "Runtime method": "runAction(\"AduroSmart.turnondevice\", {})"}, "action_details": [{"section": "Action fields", "title": "Selectdevice\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Choose a device", "Slug": "selectdevice", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempFahrenheit === \"72\") {\n  AduroSmart.turnondevice.setSelectdevice(\"Living Room Lamp\");\n} else {\n  AduroSmart.turnondevice.skip(\"Conditions not met to turn on the Living Room Lamp.\");\n}", "intent": "Turn on the Living Room Lamp using AduroSmart when the sunrise is at 6:00 AM in New York and the current weather condition is Sunny with a temperature of 72°F."}
{"original_description": "At sunrise automatically turns off all Lexi lights", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceTurnOnAll", "Filter code method": "Lexi.deviceTurnOnAll.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceTurnOnAll\", {})"}, "action_details": [{"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temp", "Required": "true", "Can have default value": "true"}}], "filter_code": "Lexi.deviceTurnOffAll.skip(\"It's sunrise, turning off all lights in the living room.\");", "intent": "At sunrise, automatically turn off all Lexi lights in the living room."}
{"original_description": "Enable/Disable Nexus Home Actions when someone Locks August lock", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\");\n  BrilliantNexus.execrule({ \"rule_name\": \"Goodnight\" });\n} else {\n  BrilliantNexus.execrule.skip(\"Lock or user does not match.\");\n}", "intent": "When the Front Door lock at the San Diego beach house is locked by John Smith, enable the \"Goodnight\" action on Brilliant Nexus."}
{"original_description": "When a specific person locks the door then enable/disable Nexus Home actions", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" && \n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" && \n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\");\n  BrilliantNexus.execrule.skip(\"Enabling Good Morning action for John Smith\");\n} else {\n  BrilliantNexus.execrule.skip(\"Not enabling action, wrong user or lock\");\n}", "intent": "When John Smith unlocks the Front Door lock at the San Diego beach house, then enable the \"Good Morning\" action on Brilliant Nexus."}
{"original_description": "When a specific person unlocks the door then enable/disable Nexus Home actions", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" && \n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" && \n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.execrule.setRuleStatus(\"enable\");\n  BrilliantNexus.execrule.skip(\"Enabling Good Morning action for John Smith\");\n} else {\n  BrilliantNexus.execrule.setRuleStatus(\"disable\");\n}", "intent": "When John Smith unlocks the Front Door at the San Diego beach house, then enable the Good Morning action on Brilliant Nexus."}
{"original_description": "Enable/disable Nexus Home actions when someone unlocks August lock", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.execrule", "Filter code method": "BrilliantNexus.execrule.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.execrule\", {})"}, "action_details": [{"section": "Action fields", "title": "Rule name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Name", "Helper text": "Brilliant Nexus Action names", "Slug": "rule_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Rule status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Action Status", "Helper text": "Enable/Disable your Brilliant Nexus actions", "Slug": "rule_status", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.execrule.setRule Status(string: rule_status)"}}], "filter_code": "var hour = Augusthome.lockUnlocked.UnlockedAt.hour();\nvar user = Augusthome.lockUnlocked.User;\nvar lockName = Augusthome.lockUnlocked.LockName;\nvar houseName = Augusthome.lockUnlocked.HouseName;\n\nif (user === \"John Smith\" && lockName === \"Front Door\" && houseName === \"San Diego Beach House\" && hour >= 7 && hour < 9) {\n  BrilliantNexus.execrule.setRuleStatus(\"enable\");\n  BrilliantNexus.execrule(\"Good Morning\");\n} else {\n  BrilliantNexus.execrule.skip(\"Conditions not met to enable Good Morning action.\");\n}", "intent": "When John Smith unlocks the Front Door lock at the San Diego Beach House, enable the \"Good Morning\" action on Brilliant Nexus if the unlock time is between 07:00 and 09:00."}
{"original_description": "Send a notification to the IFTTT app when the temperature falls below a given threshold.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.temp-below"}, "trigger_details": [{"section": "Trigger fields", "title": "Unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Measurement unit", "Helper text": "What unit of measurement would you like to receive your temperature in?", "Slug": "unit", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get temperature from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How cold do you want it to be when it triggers? Use the measurement unit you chose. Example: 15", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.tempBelow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temperature\nThe temperature, in the given measurement unit.", "description": "The temperature, in the given measurement unit.", "details": {"Slug": "value", "Filter code": "Airthings.tempBelow.Temperature", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Measurement unit\nThe measurement unit for Temperature, C° or F°.", "description": "The measurement unit for Temperature, C° or F°.", "details": {"Slug": "unit", "Filter code": "Airthings.tempBelow.MeasurementUnit", "Type": "String", "Example": "C°"}}, {"section": "Ingredients", "title": "Device\nName of the device", "description": "Name of the device", "details": {"Slug": "device", "Filter code": "Airthings.tempBelow.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Airthings.tempBelow.Temperature < 10 && Airthings.tempBelow.MeasurementUnit === \"C°\" && Airthings.tempBelow.Device === \"Home - Living Room\") {\n  IfNotifications.sendNotification.setMessage(\"Temperature alert: it's getting cold\");\n} else {\n  IfNotifications.sendNotification.skip(\"Temperature is not below 10°C or device is not Home - Living Room.\");\n}", "intent": "Send a notification to the IFTTT app when the temperature falls below 10°C, as measured by the device named \"Home - Living Room\", and include a message stating \"Temperature alert: it's getting cold\"."}
{"original_description": "Get a notification in your IFTTT app when your indoor air humidity is getting above comfort levels. ", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.humidity-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get humidity from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Helper text": "How humid, in percent, do you want it to be when it triggers? Example: 60", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.humidityAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Humidity\nThe humidity, in percent.", "description": "The humidity, in percent.", "details": {"Slug": "value", "Filter code": "Airthings.humidityAbove.Humidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.humidityAbove.Device", "Type": "String", "Example": "Home - Living room"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Airthings.humidityAbove.Humidity <= 65 || Airthings.humidityAbove.Device !== \"Home - Living room\") {\n  IfNotifications.sendNotification.skip(\"Humidity is within comfort levels or device is not Home - Living room\");\n}", "intent": "Get a notification in your IFTTT app when the humidity level in your Home - Living room device exceeds 65%, so you can take action to adjust it back to a comfortable range."}
{"original_description": "This applet allows you to receive a telegram message when something happens on a choosen device in your house", "trigger_channel": "Gewiss Smart Home IoT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "gewiss_home.property_element_updated"}, "trigger_details": [{"section": "Trigger fields", "title": "Property element\nDropdown list", "description": "Dropdown list", "details": {"Label": "What Should We Check?", "Helper text": "Select what value we should check in the Smart Home devices to Fire this Applet", "Slug": "property_element", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold logic\nDropdown list", "description": "Dropdown list", "details": {"Label": "How Should We Compare The Value?", "Helper text": "Select the type of logic", "Slug": "threshold_logic", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "What is the Threshold?", "Helper text": "Insert here the threshold you would like to compare the value to.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "GewissHome.propertyElementUpdated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Functional channel\nElement unique identifier", "description": "Element unique identifier", "details": {"Slug": "functional_channel_id", "Filter code": "GewissHome.propertyElementUpdated.FunctionalChannelId", "Type": "String", "Example": "KNX_1.1.2_RGBLight_1"}}, {"section": "Ingredients", "title": "Property element\nThe name of the triggered property", "description": "The name of the triggered property", "details": {"Slug": "property_name", "Filter code": "GewissHome.propertyElementUpdated.PropertyElement", "Type": "String", "Example": "position [Venetian]"}}, {"section": "Ingredients", "title": "Value\nThe value of the triggered element", "description": "The value of the triggered element", "details": {"Slug": "value", "Filter code": "GewissHome.propertyElementUpdated.Value", "Type": "String", "Example": "ex.: ON/OFF; 100%; 30°"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (GewissHome.propertyElementUpdated.FunctionalChannelId === \"KNX_1.1.2_RGBLight_1\" && \n    GewissHome.propertyElementUpdated.PropertyElement === \"position [Venetian]\" && \n    GewissHome.propertyElementUpdated.Value === \"100%\" && \n    threshold_logic === \"equals\" && \n    threshold === \"ON\") {\n  Telegram.sendMessage.setText(\"The Venetian blind is now fully open\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Conditions not met.\");\n}", "intent": "When the \"position [Venetian]\" property element of the device with functional channel ID \"KNX_1.1.2_RGBLight_1\" in my Gewiss Smart Home IoT system is updated to \"100%\" and the threshold logic is set to \"equals\" with a threshold value of \"ON\", send a message to my Telegram chat \"@home_notifications\" with the text \"The Venetian blind is now fully open\" and include a web page preview."}
{"original_description": "Make sure you're the first to see content from your favorite broadcasters.", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_video_by_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "What kind of videos\nDropdown list", "description": "Dropdown list", "details": {"Label": "What kind of videos?", "Helper text": "Archived broadcasts, only the highlights, or any.", "Slug": "what_kind_of_videos", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.newVideoByChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Video title\nThe title of the video.", "description": "The title of the video.", "details": {"Slug": "video_title", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoTitle", "Type": "String", "Example": "Twitch Weekly - February 6, 2015"}}, {"section": "Ingredients", "title": "Video description\nThe description of the video.", "description": "The description of the video.", "details": {"Slug": "video_description", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoDescription", "Type": "String", "Example": "Twitch Weekly LIVE on February 6, 2015!"}}, {"section": "Ingredients", "title": "Video preview image\nThe URL to a preview image of the video.", "description": "The URL to a preview image of the video.", "details": {"Slug": "video_preview_image", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoPreviewImage", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Video url\nThe URL to the video on Twitch.", "description": "The URL to the video on Twitch.", "details": {"Slug": "video_url", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Video channel\nThe name of the video's channel", "description": "The name of the video's channel", "details": {"Slug": "video_channel", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoChannel", "Type": "String", "Example": "Twitch"}}, {"section": "Ingredients", "title": "Video channel url\nThe URL to the video's channel on Twitch.", "description": "The URL to the video's channel on Twitch.", "details": {"Slug": "video_channel_url", "Filter code": "Twitch.newVideoByChannelYouFollow.VideoChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Twitch.newVideoByChannelYouFollow.VideoChannel === \"Ninja\" && Twitch.newVideoByChannelYouFollow.VideoTitle.includes(\"Fortnite\")) {\n  IfNotifications.sendNotification.setMessage(\"New Fortnite video from Ninja: https://twitch.com/Ninja\");\n} else {\n  IfNotifications.sendNotification.skip(\"Video does not match the criteria.\");\n}", "intent": "When a new video is posted by the Twitch channel \"Ninja\" and the video title contains the word \"Fortnite\", send a notification with the message \"New Fortnite video from Ninja: https://twitch.com/Ninja\"."}
{"original_description": "This applet sends a notification on Telegram\nin case of reaching a higher or lower setpoint", "trigger_channel": "Gewiss Smart Home IoT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "gewiss_home.property_element_updated"}, "trigger_details": [{"section": "Trigger fields", "title": "Property element\nDropdown list", "description": "Dropdown list", "details": {"Label": "What Should We Check?", "Helper text": "Select what value we should check in the Smart Home devices to Fire this Applet", "Slug": "property_element", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold logic\nDropdown list", "description": "Dropdown list", "details": {"Label": "How Should We Compare The Value?", "Helper text": "Select the type of logic", "Slug": "threshold_logic", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "What is the Threshold?", "Helper text": "Insert here the threshold you would like to compare the value to.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "GewissHome.propertyElementUpdated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Functional channel\nElement unique identifier", "description": "Element unique identifier", "details": {"Slug": "functional_channel_id", "Filter code": "GewissHome.propertyElementUpdated.FunctionalChannelId", "Type": "String", "Example": "KNX_1.1.2_RGBLight_1"}}, {"section": "Ingredients", "title": "Property element\nThe name of the triggered property", "description": "The name of the triggered property", "details": {"Slug": "property_name", "Filter code": "GewissHome.propertyElementUpdated.PropertyElement", "Type": "String", "Example": "position [Venetian]"}}, {"section": "Ingredients", "title": "Value\nThe value of the triggered element", "description": "The value of the triggered element", "details": {"Slug": "value", "Filter code": "GewissHome.propertyElementUpdated.Value", "Type": "String", "Example": "ex.: ON/OFF; 100%; 30°"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (GewissHome.propertyElementUpdated.PropertyElement === \"living room temperature\" && GewissHome.propertyElementUpdated.Value > 25) {\n  Telegram.sendMessage.setText(\"The living room temperature is higher than 25°C\");\n  Telegram.sendMessage.setChatId(\"#home_automation\");\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}", "intent": "Send a notification to the Telegram chat \"#home_automation\" with the message \"The living room temperature is higher than 25°C\" when the Gewiss Smart Home IoT device reports that the living room temperature exceeds 25°C."}
{"original_description": "Press the pusher to receive a VoIP phone call.", "trigger_channel": "Kronaby", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "kronaby.pusher_pressed"}, "trigger_details": [{"section": "Trigger fields", "title": "Action\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Helper text": "E.g. Press X2", "Slug": "action", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nThe time when the pusher was pressed.", "description": "The time when the pusher was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Kronaby.pusherPressed.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Latitude\nThe geographic latitude when the pusher was pressed.", "description": "The geographic latitude when the pusher was pressed.", "details": {"Slug": "latitude", "Filter code": "Kronaby.pusherPressed.Latitude", "Type": "String", "Example": "55.611947"}}, {"section": "Ingredients", "title": "Longitude\nThe geographic longitude when the pusher was pressed.", "description": "The geographic longitude when the pusher was pressed.", "details": {"Slug": "longitude", "Filter code": "Kronaby.pusherPressed.Longitude", "Type": "String", "Example": "12.978337"}}, {"section": "Ingredients", "title": "Press type\nHow the pusher was pressed.", "description": "How the pusher was pressed.", "details": {"Slug": "action", "Filter code": "Kronaby.pusherPressed.PressType", "Type": "String", "Example": "single, double or triple"}}, {"section": "Ingredients", "title": "Map image url\nURL to image showing the location on a map", "description": "URL to image showing the location on a map", "details": {"Slug": "map_image_url", "Filter code": "Kronaby.pusherPressed.MapImageUrl", "Type": "Image URL", "Example": "https://ifttt.apps-kronaby.com/map"}}], "action_channel": "VoIP Calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "voip_calls.call_my_device", "Filter code method": "VoipCalls.callMyDevice.skip(string?: reason)", "Runtime method": "runAction(\"voip_calls.call_my_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Voice message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "VoipCalls.callMyDevice.setMessage(string: message)"}}], "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  var hour = new Date(Kronaby.pusherPressed.PressedAt).getHours();\n  if (hour === 7) {\n    VoipCalls.callMyDevice.setMessage(\"Emergency alert at 07:00\");\n  } else {\n    VoipCalls.callMyDevice.skip(\"Not the correct time for the emergency alert.\");\n  }\n} else {\n  VoipCalls.callMyDevice.skip(\"Wrong press type or location.\");\n}", "intent": "When the Kronaby pusher is pressed with a double press at latitude 55.611947 and longitude 12.978337, make a VoIP phone call to my device with the voice message \"Emergency alert at 07:00\"."}
{"original_description": "Reward yourself for your great taste in music... save a set amount to one of your Goals every time you add a track to one of your Spotify playlists.", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Qapital", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "qapital.save_toward_goal", "Filter code method": "Qapital.saveTowardGoal.skip(string?: reason)", "Runtime method": "runAction(\"qapital.save_toward_goal\", {})"}, "action_details": [{"section": "Action fields", "title": "Goal\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which goal?", "Slug": "goal", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount to transfer", "Slug": "amount", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Favorite Songs\") {\n  Qapital.saveTowardGoal.setGoal(\"Music Lovers\");\n  Qapital.saveTowardGoal.setAmount(1);\n} else {\n  Qapital.saveTowardGoal.skip(\"Wrong playlist\");\n}", "intent": "Save $1 toward my \"Music Lovers\" goal in Qapital every time I add a new track to my \"Favorite Songs\" playlist on Spotify."}
{"original_description": "You can optionally filter for travel warnings to specific countries below.", "trigger_channel": "Department of State", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dos.travel_warnings"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by country (optional)", "Helper text": "E.g. North Korea, Spain, Venezuela", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Dos.travelWarnings.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Dos.travelWarnings.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Content html\nThe entry's content, contains HTML.", "description": "The entry's content, contains HTML.", "details": {"Slug": "EntryContent", "Filter code": "Dos.travelWarnings.ContentHtml", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Dos.travelWarnings.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Dos.travelWarnings.EntryTitle.includes(\"Spain\")) {\n  IfNotifications.sendNotification.setMessage(\"Travel warning issued for Spain\");\n} else {\n  IfNotifications.sendNotification.skip(\"No travel warning for Spain.\");\n}", "intent": "Send a notification with the message \"Travel warning issued for Spain\" when the Department of State issues a travel warning for Spain."}
{"original_description": "Change two lights at a time using DO button.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.ChangeColor", "Filter code method": "Magichue.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"magichue.ChangeColor\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (latitude === \"37.82666360000001\" && longitude === \"-122.42301220000003\" && hour >= 7 && hour <= 19) {\n  Magichue.changeColor.setWhichLights(\"Light 1\");\n  Magichue.changeColor.setColor(\"Red\");\n  Magichue.changeColor.setBrightness(75);\n  Magichue.changeColor.skip();\n\n  Magichue.changeColor.setWhichLights(\"Light 2\");\n  Magichue.changeColor.setColor(\"Red\");\n  Magichue.changeColor.setBrightness(75);\n  Magichue.changeColor.skip();\n\n  Magichue.changeColor.setWhichLights(\"Light 3\");\n  Magichue.changeColor.setColor(\"Blue\");\n  Magichue.changeColor.setBrightness(50);\n  Magichue.changeColor.skip();\n\n  Magichue.changeColor.setWhichLights(\"Light 4\");\n  Magichue.changeColor.setColor(\"Blue\");\n  Magichue.changeColor.setBrightness(50);\n  Magichue.changeColor.skip();\n} else {\n  Magichue.changeColor.skip(\"Conditions not met.\");\n}", "intent": "When the DO button is pressed at a location like 37.82666360000001, -122.42301220000003, and the current time is between 07:00 and 19:00, change the color of the first two lights to red and set their brightness to 75%, then change the color of the next two lights to blue and set their brightness to 50%."}
{"original_description": "Add a widget to your homescreen to press a button and unlock Sesame.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Sesame by CANDY HOUSE", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sesame.open_sesame", "Filter code method": "Sesame.openSesame.skip(string?: reason)", "Runtime method": "runAction(\"sesame.open_sesame\", {})"}, "action_details": [{"section": "Action fields", "title": "Sesame name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Sesame?", "Helper text": "Choose which Sesame to unlock", "Slug": "sesame_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar currentTime = Meta.currentUserTime.hour();\nvar shareURL = DoButton.doButtonNewCommandCommon.ShareURL;\nvar locationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && currentTime >= 7 && currentTime <= 19) {\n  Sesame.openSesame.setSesameName(\"Front Door\");\n  Notification.sendNotification.setNotificationMessage(\"Unlocked Front Door at \" + shareURL + \". Location: \" + locationMapImageURL);\n} else {\n  Sesame.openSesame.skip(\"Conditions not met to unlock Front Door.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, unlock my Sesame named \"Front Door\" and send a notification with the share URL https://ifttt.com/share/McFwJfDH9Ns and a map image of the location."}
{"original_description": "This Applet is an easy way to organize and prioritize your to-read list. ", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_item_added_pocket"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newItemAddedPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newItemAddedPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newItemAddedPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newItemAddedPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newItemAddedPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newItemAddedPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Trello", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "trello.create_card", "Filter code method": "Trello.createCard.skip(string?: reason)", "Runtime method": "runAction(\"trello.create_card\", {})"}, "action_details": [{"section": "Action fields", "title": "Board\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which board?", "Slug": "board", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "List name\nText input > Other", "description": "Text input > Other", "details": {"Label": "List name", "Helper text": "We'll create a new list if one with this name doesn't exist", "Slug": "list_name", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setList Name(string: list_name)"}}, {"section": "Action fields", "title": "Pos\nDropdown list", "description": "Dropdown list", "details": {"Label": "Position", "Slug": "pos", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setPos(string: pos)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "Trello.createCard.setTitle(string: title)"}}, {"section": "Action fields", "title": "Description\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setDescription(string: description)"}}, {"section": "Action fields", "title": "Members\nText input > Other", "description": "Text input > Other", "details": {"Label": "Assign members", "Helper text": "Optional comma separated list of @usernames to assign to card", "Slug": "members", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setMembers(string: members)"}}, {"section": "Action fields", "title": "Labels\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Apply labels", "Helper text": "Optional comma separated list of label names — labels that do not exist on the board will be ignored", "Slug": "labels", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setLabels(string: labels)"}}, {"section": "Action fields", "title": "Url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Attachment URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Trello.createCard.setUrl(string: url)"}}], "filter_code": "if (Pocket.newItemAddedPocket.Tags.includes(\"must-read\") && Pocket.newItemAddedPocket.Title.includes(\"urgent\")) {\n  Trello.createCard.setListName(\"High Priority\");\n  Trello.createCard.setPos(\"Top\");\n  Trello.createCard.setTitle(Pocket.newItemAddedPocket.Title);\n  Trello.createCard.setDescription(Pocket.newItemAddedPocket.Excerpt);\n  Trello.createCard.setMembers(\"@johnDoe, @janeDoe\");\n  Trello.createCard.setLabels(\"Urgent\");\n} else {\n  Trello.createCard.skip(\"Does not match the 'must-read' and 'urgent' criteria.\");\n}", "intent": "When a new item is added to Pocket with the tag \"must-read\" and the title contains the word \"urgent\", create a new card on the Trello board named \"To-Read List\" in the list \"High Priority\" at position \"Top\", with the title set to the Pocket item's title, description set to the Pocket item's excerpt, and assign the card to members @johnDoe and @janeDoe, applying the label \"Urgent\"."}
{"original_description": "Set a time to arm abode into home or away mode each evening", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "abode", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "abode.change_mode", "Filter code method": "Abode.changeMode.skip(string?: reason)", "Runtime method": "runAction(\"abode.change_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Abode.changeMode.setMode(string: mode)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 20 && minute === 0) {\n  Abode.changeMode.setMode(\"home\");\n} else if (hour === 7 && minute === 30) {\n  Abode.changeMode.setMode(\"away\");\n} else {\n  Abode.changeMode.skip(\"Not the scheduled time for mode change.\");\n}", "intent": "Arm abode into home mode every evening at 8:00 PM and into away mode at 7:30 AM."}
{"original_description": "Toggle a device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.toggle", "Filter code method": "Kasa.toggle.skip(string?: reason)", "Runtime method": "runAction(\"kasa.toggle\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to toggle", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (Knocki.knocki.Gesture === \"Triple Knock\") {\n    Kasa.toggle.setDevice(\"living room lamp\");\n  } else {\n    Kasa.toggle.skip(\"Incorrect gesture. Expected 'Triple Knock'.\");\n  }\n} else {\n  Kasa.toggle.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}", "intent": "Toggle the living room lamp using TP-Link Kasa when a triple knock gesture is detected by Knocki between 07:00 and 22:00."}
{"original_description": "Send a notification to the IFTTT app when the CO2 level rises above a certain threshold.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.co2-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get CO2 levels from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.co2Above.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Co2 level\nThe CO2 level. In parts per million.", "description": "The CO2 level. In parts per million.", "details": {"Slug": "value", "Filter code": "Airthings.co2Above.Co2Level", "Type": "String", "Example": "120"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.co2Above.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Airthings.co2Above.Device !== \"Home Office\" || Airthings.co2Above.Co2Level <= 1000) {\n  IfNotifications.sendNotification.skip(\"CO2 level is not above 1000 parts per million in Home Office or device does not match.\");\n} else {\n  IfNotifications.sendNotification.setMessage(`CO2 level in ${Airthings.co2Above.Device} has risen above 1000 parts per million. Current CO2 level: ${Airthings.co2Above.Co2Level} parts per million.`);\n}", "intent": "Send a notification to the IFTTT app when the CO2 level from the device \"Home Office\" rises above 1000 parts per million."}
{"original_description": "This Applet sends you a notification when the FCC posts a new order. Use a filter keyword to get the most relevant updates.", "trigger_channel": "Federal Communications Commission", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcc.order"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword(s) (optional)", "Helper text": "E.g. &quot;Sprint&quot;, &quot;Wireline Competition Bureau&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Subject\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Fcc.order.Subject", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Link\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Fcc.order.Link", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Preview content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Fcc.order.PreviewContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Fcc.order.PreviewContent.indexOf(\"5G\") === -1 || Fcc.order.Subject.indexOf(\"Wireless\") === -1) {\n  IfNotifications.sendNotification.skip(\"Does not contain '5G' in the content or 'Wireless' in the title.\");\n} else {\n  var message = \"New FCC Order: \" + Fcc.order.Subject + \". Read more at \" + Fcc.order.Link + \". Preview: \" + Fcc.order.PreviewContent;\n  IfNotifications.sendNotification.setMessage(message);\n}", "intent": "Send a notification to my device when the Federal Communications Commission posts a new order containing the keyword \"5G\" and the title includes \"Wireless\", with the message including the entry's title, link, and preview content."}
{"original_description": "Turn off a device.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n    Kasa.turnOff.setDevice(\"Living Room Lamp\");\n  } else {\n    Kasa.turnOff.skip(\"Incorrect device or gesture.\");\n  }\n} else {\n  Kasa.turnOff.skip(\"Outside of allowed hours (07:00 to 22:00).\");\n}", "intent": "Turn off the living room lamp when a triple knock gesture is detected on the Knocki device KNC1-W-00000088 between 07:00 and 22:00."}
{"original_description": "This applet creates a button widget that you can use from the home screen of your Android or iOS device. Press the button to open your garage door or gate.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "GarageWiFi & Gates", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garagewifi.open_door", "Filter code method": "Garagewifi.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garagewifi.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Slug": "door_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour <= 19) {\n  Garagewifi.openDoor.setDoorNumber(1);\n} else {\n  Garagewifi.openDoor.skip(\"Outside of specified location or hours.\");\n}", "intent": "When the button widget on my home screen is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, open door number 1."}
{"original_description": "Save £1 every time you add a track to a Spotify playlist", "trigger_channel": "Spotify", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotify.new_track_added_to_playlist"}, "trigger_details": [{"section": "Trigger fields", "title": "Playlist\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which playlist?", "Helper text": "Only the first 50 playlists shown at <a href=\"https://open.spotify.com/\" target=\"_blank\">open.spotify.com</a> will be displayed here. You can click and drag playlists to reorder them", "Slug": "playlist", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Track name\nThe name of the track.", "description": "The name of the track.", "details": {"Slug": "track_name", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackName", "Type": "String", "Example": "Snow (Hey Oh)"}}, {"section": "Ingredients", "title": "Track url\nThe URL to the track on Spotify.", "description": "The URL to the track on Spotify.", "details": {"Slug": "track_url", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackURL", "Type": "Web URL", "Example": "https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Artist name\nThe artist who performed the track.", "description": "The artist who performed the track.", "details": {"Slug": "artist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.ArtistName", "Type": "String", "Example": "Red Hot Chili Peppers"}}, {"section": "Ingredients", "title": "Album name\nThe album on which the track appears.", "description": "The album on which the track appears.", "details": {"Slug": "album_name", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumName", "Type": "String", "Example": "Stadium Arcadium"}}, {"section": "Ingredients", "title": "Album cover url\nAn image of the album cover art.", "description": "An image of the album cover art.", "details": {"Slug": "album_cover_url", "Filter code": "Spotify.newTrackAddedToPlaylist.AlbumCoverURL", "Type": "Image URL", "Example": "https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d"}}, {"section": "Ingredients", "title": "Playlist name\nThe name of the playlist.", "description": "The name of the playlist.", "details": {"Slug": "playlist_name", "Filter code": "Spotify.newTrackAddedToPlaylist.PlaylistName", "Type": "String", "Example": "Mid-2000s Jamz"}}, {"section": "Ingredients", "title": "Added by\nThe name of the user that added this track to the playlist.", "description": "The name of the user that added this track to the playlist.", "details": {"Slug": "added_by", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedBy", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Added at\nThe time at which the track was added to the playlist.", "description": "The time at which the track was added to the playlist.", "details": {"Slug": "added_at", "Filter code": "Spotify.newTrackAddedToPlaylist.AddedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Track\nThe track's ID.", "description": "The track's ID.", "details": {"Slug": "track_id", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackId", "Type": "String", "Example": "2aibwv5hGXSgw7Yru8IYTO"}}, {"section": "Ingredients", "title": "Track isrc\nISRC code for the track.", "description": "ISRC code for the track.", "details": {"Slug": "track_isrc", "Filter code": "Spotify.newTrackAddedToPlaylist.TrackIsrc", "Type": "String", "Example": "IEAAA1900001"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\") {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"Track not added to 'Mid-2000s Jamz' playlist.\");\n}", "intent": "Save £1 to your Dozens savings account every time a new track is added to your \"Mid-2000s Jamz\" Spotify playlist."}
{"original_description": "A nice visual cue that your Twitch audience is growing! 🙌", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.new_follower_on_your_channel"}, "trigger_details": [{"section": "Ingredients", "title": "Followed at\nDate and time the user followed your Channel.", "description": "Date and time the user followed your Channel.", "details": {"Slug": "created_at", "Filter code": "Twitch.newFollowerOnYourChannel.FollowedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Follower name\nThe name of the user who followed your channel.", "description": "The name of the user who followed your channel.", "details": {"Slug": "follower_name", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerName", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Follower bio\nThe bio of the user that followed you.", "description": "The bio of the user that followed you.", "details": {"Slug": "follower_bio", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerBio", "Type": "String", "Example": "A gaming fanatic from Boston."}}, {"section": "Ingredients", "title": "Follower url\nA url to the follower's profile on Twitch.", "description": "A url to the follower's profile on Twitch.", "details": {"Slug": "follower_url", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Follower count\nThe number of followers of your channel.", "description": "The number of followers of your channel.", "details": {"Slug": "follower_count", "Filter code": "Twitch.newFollowerOnYourChannel.FollowerCount", "Type": "String", "Example": "215780"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "Hue.setColorAllHue.setLights(\"Gaming Room\");\nHue.setColorAllHue.setColor(\"#FFA07A\");", "intent": "When a new follower joins your Twitch channel, set all Philips Hue lights to a bright, celebratory orange color (#FFA07A) in your gaming room."}
{"original_description": "This applet sets a Hue scene when Withings Sleep detects that you get into bed.\n", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = new Date(WithingsSleep.bedin.DateandTime).getHours();\nif (hour >= 22 || hour < 6) {\n  if (WithingsSleep.bedin.DeviceUser === \"Tom\") {\n    Hue.setScene.setScene(\"Relax\");\n  } else {\n    Hue.setScene.skip(\"Not Tom's device\");\n  }\n} else {\n  Hue.setScene.skip(\"Outside of bedtime hours (10 PM to 6 AM)\");\n}", "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00, set the Philips Hue scene to \"Relax\" in the living room."}
{"original_description": "This applet sets a Hue scene when Withings Sleep detects that you get out of bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedout"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedout.DeviceUser", "Type": "String", "Example": "Bed out has been detected by Tom's Nokia Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got out of bed", "description": "Date and time when you got out of bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedout.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = WithingsSleep.bedout.DateandTime.hour();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nif (deviceUser === \"Tom's Nokia Sleep\" && hour >= 7 && hour < 9) {\n  Hue.setScene.setScene(\"Morning\");\n} else {\n  Hue.setScene.skip(\"Not the right time or user.\");\n}", "intent": "When Tom's Nokia Sleep detects that he gets out of bed between 07:00 and 09:00, set the Philips Hue scene to \"Morning\" in the living room."}
{"original_description": "Self explanatory", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "if (Putio.transferFinished.Type === \"Video\" && Putio.transferFinished.Name === \"Big Buck Bunny\") {\n  var downloadUrl = Putio.transferFinished.DownloadUrl;\n  var viewUrl = Putio.transferFinished.ViewUrl;\n  IfNotifications.sendNotification.setMessage(`Download Big Buck Bunny from ${downloadUrl} or view it at ${viewUrl}`);\n} else {\n  IfNotifications.sendNotification.skip(\"Transfer type is not 'Video' or transfer name is not 'Big Buck Bunny'\");\n}", "intent": "When a transfer is finished on put.io with the type \"Video\" and the name of the transfer is \"Big Buck Bunny\", send a notification with the message \"Download Big Buck Bunny from https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX or view it at https://app.put.io/files/123456\"."}
{"original_description": "Activate a selected scene from your account.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.activate_scene", "Filter code method": "Kasa.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"kasa.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Select a scene from your account to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Kasa.activateScene.setScene(\"Good Morning\");\n} else {\n  Kasa.activateScene.skip(\"Conditions not met for activating the Good Morning scene.\");\n}", "intent": "Activate the \"Good Morning\" scene from my TP-Link Kasa account when a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088."}
{"original_description": "Self explanatory", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (Putio.transferFinished.Type === \"Video\" && Putio.transferFinished.Name.includes(\"Movie\")) {\n  Telegram.sendMessage.setText(`New movie downloaded: <b>${Putio.transferFinished.Name}</b>. Download from: <a href='${Putio.transferFinished.DownloadUrl}'>here</a>`);\n  Telegram.sendMessage.setChatId(\"#movies\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n}", "intent": "When a new file transfer is finished on put.io with the type \"Video\" and the name contains \"Movie\", send a message to the Telegram chat \"#movies\" with the text \"New movie downloaded: <b>Big Buck Bunny</b>. Download from: <a href='https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX'>here</a>\" and include a web page preview."}
{"original_description": "Generate a call to your phone number after sending an E-Mail to trigger@applet.ifttt.com from your registered E-Mail address. Register your phone number at woop.la/ifttt to receive phone calls.", "trigger_channel": "Email", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "email.send_ifttt_an_email_tagged"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Tag", "Helper text": "e.g. #hashtag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "From\nEmail address of sender.", "description": "Email address of sender.", "details": {"Slug": "From", "Filter code": "Email.sendIftttAnEmailTagged.From", "Type": "String", "Example": "somebody@gmail.com"}}, {"section": "Ingredients", "title": "Attachment temporary url\nThe URL to the first file attachment, if included, that anyone can visit for 30 days.", "description": "The URL to the first file attachment, if included, that anyone can visit for 30 days.", "details": {"Slug": "AttachmentTemporaryUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl", "Type": "File URL", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Body\nEmail body, with most signatures stripped out.", "description": "Email body, with most signatures stripped out.", "details": {"Slug": "Body", "Filter code": "Email.sendIftttAnEmailTagged.Body", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Body html\nEmail body HTML, with most signatures stripped out.", "description": "Email body HTML, with most signatures stripped out.", "details": {"Slug": "BodyHTML", "Filter code": "Email.sendIftttAnEmailTagged.BodyHTML", "Type": "String", "Example": "Been having a good day so far..."}}, {"section": "Ingredients", "title": "Subject\nEmail subject line.", "description": "Email subject line.", "details": {"Slug": "Subject", "Filter code": "Email.sendIftttAnEmailTagged.Subject", "Type": "String", "Example": "Hello there"}}, {"section": "Ingredients", "title": "Attachment url\nThe URL to the first file attachment, if included.", "description": "The URL to the first file attachment, if included.", "details": {"Slug": "AttachmentUrl", "Filter code": "Email.sendIftttAnEmailTagged.AttachmentUrl", "Type": "String", "Example": "http://media.ifttt.com/emails/363-black_and_white.jpg"}}, {"section": "Ingredients", "title": "Received at\nDate and time email was received.", "description": "Date and time email was received.", "details": {"Slug": "ReceivedAt", "Filter code": "Email.sendIftttAnEmailTagged.ReceivedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (Email.sendIftttAnEmailTagged.Subject === \"Hello there\" && Email.sendIftttAnEmailTagged.Body === \"Been having a good day so far...\" && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\" && Email.sendIftttAnEmailTagged.tag === \"#hashtag\") {\n  Woopla.ttsCall.setTts(\"You have received an email from somebody@gmail.com with the subject Hello there\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Conditions not met.\");\n}", "intent": "When an email with the subject \"Hello there\" and the body \"Been having a good day so far...\" is sent from somebody@gmail.com to trigger@applet.ifttt.com with the tag #hashtag, generate a call to your registered phone number at woop.la/ifttt and play the text \"You have received an email from somebody@gmail.com with the subject Hello there\" in English."}
{"original_description": "Save £1 every time a book is added to the NYT Bestsellers list", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Fiction\" && \n    parseInt(Nytimes.newBookOnABestSellerList.Rank) <= 5 && \n    parseInt(Nytimes.newBookOnABestSellerList.WeeksOnList) >= 10) {\n  Dozens.save.setAmount(\"1.00\");\n} else {\n  Dozens.save.skip(\"Conditions not met for saving.\");\n}", "intent": "Save £1 to my Dozens savings account every time a new book is added to the New York Times Best Sellers list in the Fiction category, with a rank of 5 or higher, and has been on the list for at least 10 weeks."}
{"original_description": "At a pre-selected time, lock a LightwaveRF Socket to prevent manual operation.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "LightwaveRF Power", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_power.lock_device", "Filter code method": "LightwaverfPower.lockDevice.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_power.lock_device\", {})"}, "action_details": [{"section": "Action fields", "title": "Which device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:30 PM\";\nif (currentTime.getHours() === 19 && currentTime.getMinutes() === 30) {\n  LightwaverfPower.lockDevice.setWhichDevice(\"Living Room Lamp\");\n} else {\n  LightwaverfPower.lockDevice.skip(\"Not the scheduled lock time.\");\n}", "intent": "Lock the Living Room Lamp LightwaveRF Socket at 7:30 PM every day to prevent manual operation."}
{"original_description": "Every week, you can automatically add your favorite tracks to a playlist of your choice", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Spotify", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotify.add_a_track_to_a_playlist", "Filter code method": "Spotify.addATrackToAPlaylist.skip(string?: reason)", "Runtime method": "runAction(\"spotify.add_a_track_to_a_playlist\", {})"}, "action_details": [{"section": "Action fields", "title": "Playlist\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Playlist name", "Helper text": "Must be a playlist owned by you. If a playlist with the name given can't be found, a new private playlist will be created.", "Slug": "playlist", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setPlaylist(string: playlist)"}}, {"section": "Action fields", "title": "Search query\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Search query", "Helper text": "For maximum accuracy, include the song title here and the artist name in the &quot;Artist name&quot; field", "Slug": "search_query", "Required": "true", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setSearch Query(string: search_query)"}}, {"section": "Action fields", "title": "Artist name\nText input > Other", "description": "Text input > Other", "details": {"Label": "Artist name", "Helper text": "Optional", "Slug": "artist_name", "Required": "false", "Can have default value": "true", "Filter code method": "Spotify.addATrackToAPlaylist.setArtist Name(string: artist_name)"}}], "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar time = DateAndTime.everyWeekdayAt.CheckTime;\n\nif (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\") {\n  var hour = time.split(\" at \")[1].split(\":\")[0];\n  var minute = time.split(\" at \")[1].split(\":\")[1].replace(/PM|AM/, \"\");\n  if ((hour === \"8\" && minute === \"00\") || (hour === \"20\" && minute === \"00\")) {\n    Spotify.addATrackToAPlaylist.setPlaylist(\"Weekly Favorites\");\n    Spotify.addATrackToAPlaylist.setSearchQuery(\"Happy Weekend\");\n    Spotify.addATrackToAPlaylist.setArtistName(\"The Weeknd\");\n  } else {\n    Spotify.addATrackToAPlaylist.skip(\"Not the correct time.\");\n  }\n} else {\n  Spotify.addATrackToAPlaylist.skip(\"Not a Monday, Wednesday, or Friday.\");\n}", "intent": "Every Monday, Wednesday, and Friday at 8:00 PM, automatically add tracks from the search query \"Happy Weekend\" by the artist \"The Weeknd\" to a Spotify playlist named \"Weekly Favorites\"."}
{"original_description": "Twitch alert! Blink your bulb purple when your favorite streamer goes live (you'll choose the specific channel you follow when you set up the Applet). ", "trigger_channel": "Twitch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "twitch.stream_going_live_for_channel_you_follow"}, "trigger_details": [{"section": "Trigger fields", "title": "Which channel\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Helper text": "List of channels limited to 100 subscriptions who have recently broadcasted", "Slug": "which_channel", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Game\nThe name of the game being streamed.", "description": "The name of the game being streamed.", "details": {"Slug": "game", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.Game", "Type": "String", "Example": "StarCraft II: Heart of the Swarm"}}, {"section": "Ingredients", "title": "Channel name\nThe name of the channel broadcasting the stream.", "description": "The name of the channel broadcasting the stream.", "details": {"Slug": "channel_name", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelName", "Type": "String", "Example": "John's Channel"}}, {"section": "Ingredients", "title": "Stream preview\nThe URL to an image of a preview of the stream.", "description": "The URL to an image of a preview of the stream.", "details": {"Slug": "stream_preview", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.StreamPreview", "Type": "Image URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Channel url\nThe URL to the channel on Twitch.", "description": "The URL to the channel on Twitch.", "details": {"Slug": "channel_url", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.ChannelUrl", "Type": "Web URL", "Example": "twitch.com/"}}, {"section": "Ingredients", "title": "Current viewers\nThe current number of viewers of the stream.", "description": "The current number of viewers of the stream.", "details": {"Slug": "current_viewers", "Filter code": "Twitch.streamGoingLiveForChannelYouFollow.CurrentViewers", "Type": "String", "Example": "2123"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.blink", "Filter code method": "Lifx.blink.skip(string?: reason)", "Runtime method": "runAction(\"lifx.blink\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Number of blinks\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of blinks", "Slug": "number_of_blinks", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setNumber Of Blinks(string: number_of_blinks)"}}, {"section": "Action fields", "title": "Blink if off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on first?", "Helper text": "&quot;Yes&quot; will make your lights blink, even when they are turned off in the app.", "Slug": "blink_if_off", "Required": "true", "Can have default value": "true", "Filter code method": "Lifx.blink.setBlink If Off(string: blink_if_off)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want an option that's not in the dropdown? Specify them here. Example: &quot;color: green saturation:0.2; number_of_blinks: 6&quot; for 6 pale green blinks. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.blink.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"John's Channel\" && Twitch.streamGoingLiveForChannelYouFollow.Game === \"StarCraft II: Heart of the Swarm\") {\n  Lifx.blink.setNumberOFBlinks(\"5\");\n  Lifx.blink.setAdvancedOptions(\"color: purple\");\n  Lifx.blink.setBlinkIfOff(\"yes\");\n} else {\n  Lifx.blink.skip(\"Stream does not match the specified criteria.\");\n}", "intent": "When my favorite streamer, John's Channel, goes live on Twitch playing StarCraft II: Heart of the Swarm, blink my Living Room Lamp purple 5 times, even if it's turned off, to alert me that the stream has started."}
{"original_description": "This applet sends a weekly digest email that lists all the transfers for the week. Great if you need those URL's again.", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var dayOfWeek = Meta.currentUserTime.day();\nvar hour = Meta.currentUserTime.hour();\n\nif (dayOfWeek !== 0 || hour !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Sunday at 08:00\");\n}\n\nvar transfers = [];\ntransfers.push({\n  name: Putio.transferFinished.Name,\n  downloadUrl: Putio.transferFinished.DownloadUrl,\n  viewUrl: Putio.transferFinished.ViewUrl\n});\n\nvar message = \"<ul>\";\nfor (var i = 0; i < transfers.length; i++) {\n  message += \"<li><a href='\" + transfers[i].downloadUrl + \"'>\" + transfers[i].name + \"</a> | <a href='\" + transfers[i].viewUrl + \"'>View</a></li>\";\n}\nmessage += \"</ul>\";\nmessage += \"<p><a href='https://app.put.io'>put.io dashboard</a></p>\";\n\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setTitle(\"Weekly Transfer Summary\");\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(\"https://app.put.io\");", "intent": "Send a weekly digest email every Sunday at 08:00 with the title \"Weekly Transfer Summary\" to list all finished transfers from the past week, including their names, download URLs, and view URLs, compiled into an HTML message with a link to the put.io dashboard."}
{"original_description": "Wouldn't Sunday be better if you had koalas waiting in your inbox? Why are you fighting this? 🐨 💙", "trigger_channel": "Giphy", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "giphy.search"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Search for", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Url\nURL to this gif on Giphy", "description": "URL to this gif on Giphy", "details": {"Slug": "url", "Filter code": "Giphy.search.URL", "Type": "Web URL", "Example": "http://giphy.com/posts/dreams-are-real-and-best-with-cats"}}, {"section": "Ingredients", "title": "Image url\nURL to the gif's image if one exists", "description": "URL to the gif's image if one exists", "details": {"Slug": "image_url", "Filter code": "Giphy.search.ImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif"}}, {"section": "Ingredients", "title": "Tumblr image url\nGIF image URL for posting GIFs on tumblr.", "description": "GIF image URL for posting GIFs on tumblr.", "details": {"Slug": "tumblr_image_url", "Filter code": "Giphy.search.TumblrImageURL", "Type": "Image URL", "Example": "http://media.giphy.com/media/QT3k4ZWD6XOaA/giphy-tumblr.gif"}}, {"section": "Ingredients", "title": "Email html\nHTML to include an in-line GIF in the body of an email.", "description": "HTML to include an in-line GIF in the body of an email.", "details": {"Slug": "email_html", "Filter code": "Giphy.search.EmailHTML", "Type": "String", "Example": "<a href=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif><img src=http://media2.giphy.com/media/vhp0BocGjkVjO/giphy.gif border='0'/></a><br />via <a href=http://giphy.com/gifs/vhp0BocGjkVjO>giphy.com</a>"}}, {"section": "Ingredients", "title": "Embed code\nIFrame embed code of gif", "description": "IFrame embed code of gif", "details": {"Slug": "embed_code", "Filter code": "Giphy.search.EmbedCode", "Type": "String", "Example": "<iframe src=\"//giphy.com/embed/PfquFkRaRAv5u\" width=\"500\" height=\"391\" frameBorder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>"}}, {"section": "Ingredients", "title": "Tags\nNewline separate string of tags of this gif", "description": "Newline separate string of tags of this gif", "details": {"Slug": "tags", "Filter code": "Giphy.search.Tags", "Type": "String", "Example": "cats party"}}, {"section": "Ingredients", "title": "Created date\nDate and time when this gif was created", "description": "Date and time when this gif was created", "details": {"Slug": "created_date", "Filter code": "Giphy.search.CreatedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Sunday\") {\n  var gifURL = Giphy.search.ImageURL;\n  var gifHTML = \"<img src='\" + gifURL + \"' border='0'/>\";\n  var message = \"Good morning! Here's a smile to start your Sunday: \" + gifHTML;\n  EmailDigest.sendWeeklyEmail.setTitle(\"Sunday Koalas\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Sunday.\");\n}", "intent": "Send a weekly email digest every Sunday at 10:00 AM with the title \"Sunday Koalas\" and a message containing an inline GIF of koalas, using the search query \"koalas\" on Giphy, to bring a smile to the recipient's face."}
{"original_description": "If a stock rises by 5%, sell it!", "trigger_channel": "Finance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "finance.percentage_rise_stocks"}, "trigger_details": [{"section": "Trigger fields", "title": "Symbol\nText input", "description": "Text input", "details": {"Label": "Ticker symbol", "Slug": "symbol", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Percentage\nText input", "description": "Text input", "details": {"Label": "Percentage increase", "Helper text": "e.g. insert 15 for 15%", "Slug": "percentage", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Stock name\nThe full name of the stock.", "description": "The full name of the stock.", "details": {"Slug": "StockName", "Filter code": "Finance.percentageRiseStocks.StockName", "Type": "String", "Example": "Google Inc."}}, {"section": "Ingredients", "title": "Stock ticker\nThe ticker name of the stock.", "description": "The ticker name of the stock.", "details": {"Slug": "StockTicker", "Filter code": "Finance.percentageRiseStocks.StockTicker", "Type": "String", "Example": "GOOG"}}, {"section": "Ingredients", "title": "Price\nThe last price", "description": "The last price", "details": {"Slug": "Price", "Filter code": "Finance.percentageRiseStocks.Price", "Type": "String", "Example": "89"}}, {"section": "Ingredients", "title": "Info url\nA link to more information about the stock.", "description": "A link to more information about the stock.", "details": {"Slug": "InfoUrl", "Filter code": "Finance.percentageRiseStocks.InfoUrl", "Type": "String", "Example": "http://www.google.com/finance?q=GOOG"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "Finance.percentageRiseStocks.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Percentage change\nThe percentage change", "description": "The percentage change", "details": {"Slug": "PercentageChange", "Filter code": "Finance.percentageRiseStocks.PercentageChange", "Type": "String", "Example": "42"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "if (Finance.percentageRiseStocks.StockTicker === \"GOOG\" && Finance.percentageRiseStocks.PercentageChange >= 5 && Meta.currentUserTime.hour() === 16) {\n  Alpaca.placeMarketOrder.setSymbol(Finance.percentageRiseStocks.StockTicker);\n  Alpaca.placeMarketOrder.setSide(\"sell\");\n  Alpaca.placeMarketOrder.setQty(\"10\");\n} else {\n  Alpaca.placeMarketOrder.skip(\"Conditions not met to sell GOOG.\");\n}", "intent": "If the stock ticker symbol GOOG rises by 5% within a day, as checked at 16:00 EST, sell 10 shares of Google Inc. (GOOG) through Alpaca."}
{"original_description": "Turn off the home air conditioning at a specific time.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "AirTouch", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "airtouch.ac_power", "Filter code method": "Airtouch.acPower.skip(string?: reason)", "Runtime method": "runAction(\"airtouch.ac_power\", {})"}, "action_details": [{"section": "Action fields", "title": "Ac index\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which air conditioning?", "Slug": "ac_index", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Power on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or turn off?", "Slug": "power_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Airtouch.acPower.setPower On Off(string: power_on_off)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (checkTime === targetTime) {\n  Airtouch.acPower.setPowerOnOff(\"off\");\n} else {\n  Airtouch.acPower.skip(\"Not the scheduled time to turn off the air conditioning.\");\n}", "intent": "Turn off the living room air conditioning at 8:00 PM every day."}
{"original_description": "Configure a Nexia automation to activate a Philips Hue lights scene in your home.", "trigger_channel": "Nexia", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "trigger_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nexia.nexiaAutomation.NexiaAutomationName === \"My First Automation\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n  Hue.setScene({ scene: \"Relax\" });\n} else {\n  Hue.setScene.skip(\"Automation name or house does not match.\");\n}", "intent": "When the Nexia automation named \"My First Automation\" is triggered in the house named \"Home\", activate the Philips Hue scene named \"Relax\" to turn on the living room lights."}
{"original_description": "Self explanatory", "trigger_channel": "put.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "putio.transfer_finished"}, "trigger_details": [{"section": "Trigger fields", "title": "Type\nDropdown list", "description": "Dropdown list", "details": {"Label": "What type of transfer?", "Slug": "type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Putio.transferFinished.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Download url\nFiles can be downloaded from this link.", "description": "Files can be downloaded from this link.", "details": {"Slug": "download_url", "Filter code": "Putio.transferFinished.DownloadUrl", "Type": "File URL", "Example": "https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX"}}, {"section": "Ingredients", "title": "Name\nName of the finished transfer.", "description": "Name of the finished transfer.", "details": {"Slug": "name", "Filter code": "Putio.transferFinished.Name", "Type": "String", "Example": "Big Buck Bunny"}}, {"section": "Ingredients", "title": "View url\nFiles can be viewed from this link.", "description": "Files can be viewed from this link.", "details": {"Slug": "view_url", "Filter code": "Putio.transferFinished.ViewUrl", "Type": "Web URL", "Example": "https://app.put.io/files/123456"}}, {"section": "Ingredients", "title": "File\nID of the transferred file or folder.", "description": "ID of the transferred file or folder.", "details": {"Slug": "file_id", "Filter code": "Putio.transferFinished.FileId", "Type": "String", "Example": "123456"}}, {"section": "Ingredients", "title": "Source\nSource of the transfer.", "description": "Source of the transfer.", "details": {"Slug": "source", "Filter code": "Putio.transferFinished.Source", "Type": "String", "Example": "http://example.com/README.txt"}}], "action_channel": "Pushover", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "pushover.send", "Filter code method": "Pushover.send.skip(string?: reason)", "Runtime method": "runAction(\"pushover.send\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Pushover.send.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Pushover.send.setMessage(string: message)"}}, {"section": "Action fields", "title": "Priority\nDropdown list", "description": "Dropdown list", "details": {"Label": "Message Priority", "Slug": "priority", "Required": "false", "Can have default value": "true", "Filter code method": "Pushover.send.setPriority(string: priority)"}}, {"section": "Action fields", "title": "Sound\nDropdown list", "description": "Dropdown list", "details": {"Label": "Message Sound", "Helper text": "Sound to play, overriding your device's default", "Slug": "sound", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Helper text": "URL to display with message", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Pushover.send.setUrl(string: url)"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device or Group", "Helper text": "Send only to a specific device, or broadcast to a delivery group", "Slug": "device", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Putio.transferFinished.Type === \"Movie\" && Putio.transferFinished.Name.includes(\"Big Buck Bunny\")) {\n  Pushover.send.setTitle(\"Transfer Finished\");\n  Pushover.send.setMessage(\"Your movie \" + Putio.transferFinished.Name + \" has finished transferring\");\n  Pushover.send.setPriority(\"1\");\n  Pushover.send.setDevice(\"My Phone\");\n  Pushover.send.setSound(\"pushover\");\n} else {\n  Pushover.send.skip(\"Conditions not met.\");\n}", "intent": "When a new file transfer finishes on put.io with the type \"Movie\" and the name contains \"Big Buck Bunny\", send a priority 1 message via Pushover to the device \"My Phone\" with the title \"Transfer Finished\", the message \"Your movie Big Buck Bunny has finished transferring\", and play the \"pushover\" sound."}
{"original_description": "Don't be surprised by a flooded basement or busted water heater. Flicker your Philips hue lights as soon as a water leak is detected.", "trigger_channel": "mydlink", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "mydlink.waterDetection"}, "trigger_details": [{"section": "Trigger fields", "title": "Mydlink no\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "mydlink_no", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Mydlink.waterDetection.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device detects the event.", "description": "The name of the device detects the event.", "details": {"Slug": "device_name", "Filter code": "Mydlink.waterDetection.DeviceName", "Type": "String", "Example": "Basement water sensor"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Mydlink.waterDetection.DeviceName !== \"Basement water sensor\") {\n  Hue.blinkAllHue.skip(\"Not the basement water sensor.\");\n} else if (PhilipsHue.lights !== \"living room\") {\n  Hue.blinkAllHue.skip(\"Lights are not in the living room.\");\n} else {\n  Hue.blinkAllHue();\n}", "intent": "When the Basement water sensor detects a water leak, flicker all Philips Hue lights in the living room."}
{"original_description": "Set the time everyday you would like to have your bot automatically turn off.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.turn_off_bot", "Filter code method": "Switchbot.turnOffBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.turn_off_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"10:00 PM\";\nif (checkTime !== targetTime) {\n  Switchbot.turnOffBot.skip(\"Not the scheduled turn off time.\");\n}", "intent": "Turn off the SwitchBot device named \"Office Bot\" every day at 10:00 PM."}
{"original_description": "Double-clicking a Flick button changes the view on your Atmoph Window at random.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.change_view", "Filter code method": "Atmoph.changeView.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.change_view\", {})"}, "action_details": [], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"MyOfficeButton\" && hour >= 7 && hour < 19) {\n  var scenes = [\"serene beach\", \"bustling city street\"];\n  var randomScene = scenes[Math.floor(Math.random() * scenes.length)];\n  Atmoph.changeView.setRandomScene(randomScene);\n} else {\n  Atmoph.changeView.skip(\"Outside of active hours or wrong button click.\");\n}", "intent": "When the Flic button named \"MyOfficeButton\" is double-clicked, change the view on your Atmoph Window to a random scene, such as a serene beach or a bustling city street, between 07:00 and 19:00 every day."}
{"original_description": "Press the iH button on your iHome device to begin a Lutron Scene.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_scene", "Filter code method": "LutronCasetaWireless.setScene.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"Kitchen Lights\" && IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  LutronCasetaWireless.setScene(\"Good Night\");\n} else {\n  LutronCasetaWireless.setScene.skip(\"Incorrect button or press type.\");\n}", "intent": "When the \"Kitchen Lights\" button on your iHome device is pressed with a long press, start the \"Good Night\" scene on your Lutron system."}
{"original_description": "Activates the TP-Link Kasa scene you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.activate_scene", "Filter code method": "Kasa.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"kasa.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "Select a scene from your account to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Apilio.iftttActionReports.CreatedAt.getHours();\nvar minutes = Apilio.iftttActionReports.CreatedAt.getMinutes();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar value1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"wake_up\" && value1 === \"Summer\" && hour >= 7 && hour < 8) {\n  // Intentionally left blank to activate the scene\n} else {\n  Kasa.activateScene.skip(\"Conditions not met for 'Good Morning' scene.\");\n}", "intent": "Activate the \"Good Morning\" scene on TP-Link Kasa when the Apilio event named \"wake_up\" is triggered with a value1 of \"Summer\" and the event is created between 07:00 and 08:00."}
{"original_description": "Keep your team in the loop hassle-free. This Applet posts to a Slack channel of your choosing when there is a DART rider alert during weekday morning commute hours (7-10am).", "trigger_channel": "DART", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dart.new_dart_rider_alert"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Filter by keyword (recommended)", "Helper text": "Station name, route color, &quot;streetcar&quot;, etc.", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title, includes abbreviated timestamp.", "description": "The entry's title, includes abbreviated timestamp.", "details": {"Slug": "EntryTitle", "Filter code": "Dart.newDartRiderAlert.EntryTitle", "Type": "String", "Example": "TRE Update 5/22 9:50a"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Dart.newDartRiderAlert.EntryUrl", "Type": "String", "Example": "http://ift.tt/2rIxmGN"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content.", "description": "The entry's content.", "details": {"Slug": "EntryContent", "Filter code": "Dart.newDartRiderAlert.EntryContent", "Type": "String", "Example": "Earlier mechanical problem near Union Station has cleared. All trains resuming normal schedule. Thank you for your patience."}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Dart.newDartRiderAlert.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Slack", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "slack.post_to_channel", "Filter code method": "Slack.postToChannel.skip(string?: reason)", "Runtime method": "runAction(\"slack.post_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Channel\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "channel", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle(string: title)"}}, {"section": "Action fields", "title": "Title url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Title URL", "Helper text": "Optional", "Slug": "title_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setTitle Url(string: title_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Slack.postToChannel.setImage Url(string: image_url)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar day = Meta.currentUserTime.day();\n\n// Check if it's a weekday and within commuting hours\nif (day == 0 || day == 6) { // 0 = Sunday, 6 = Saturday\n  Slack.postToChannel.skip(\"Not a weekday\");\n} else if (hour < 7 || hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\");\n}\n\n// Check for keyword in alert content\nif (!Dart.newDartRiderAlert.EntryContent.includes(\"TRE Update\")) {\n  Slack.postToChannel.skip(\"Keyword 'TRE Update' not found in alert\");\n}\n\n// Post message to Slack with title and content\nSlack.postToChannel.setMessage(Dart.newDartRiderAlert.EntryTitle + \" - \" + Dart.newDartRiderAlert.EntryUrl);\nSlack.postToChannel.setTitle(\"DART Rider Alert\");\nSlack.postToChannel.setChannel(\"#commute-alerts\");", "intent": "Post a message to the #commute-alerts channel in Slack with the title \"DART Rider Alert\" and the content of the latest DART rider alert, including the entry title and entry URL, but only between 7:00 AM and 10:00 AM on weekdays when the keyword \"TRE Update\" is found in the alert.", "filter_code_old": "var Hour = Meta.currentUserTime.hour()\nvar Day = Meta.currentUserTime.day()\n\n// Skip outside of 7-10am and 5-7pm\nif (Hour < 7 || Hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\")\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 7) {\n  Slack.postToChannel.skip(\"Not a weekday\")\n}\n\n\n"}
{"original_description": "Updates a boolean variable to true when SmartThings detects someone present.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_to_false_updates", "Filter code method": "Apilio.booleanVariableToFalseUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_to_false_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to update to false?", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Someone is present\");\n  Apilio.updateBooleanVariableToTrue(\"Occupancy_Status\");\n}", "intent": "When the Bedroom sensor device detects someone is present, update the boolean variable \"Occupancy_Status\" to true in Apilio."}
{"original_description": "Save new Raindrop.io items to Instapaper", "trigger_channel": "Raindrop.io", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "raindrop.raindrops_all"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nName of bookmark or file", "description": "Name of bookmark or file", "details": {"Slug": "title", "Filter code": "Raindrop.raindropsAll.Title", "Type": "String", "Example": "IFTTT API"}}, {"section": "Ingredients", "title": "Url\nURL of bookmark or file", "description": "URL of bookmark or file", "details": {"Slug": "link", "Filter code": "Raindrop.raindropsAll.Url", "Type": "Web URL", "Example": "https://ifttt.com"}}, {"section": "Ingredients", "title": "Description\nDescription", "description": "Description", "details": {"Slug": "excerpt", "Filter code": "Raindrop.raindropsAll.Description", "Type": "String", "Example": "Great article"}}, {"section": "Ingredients", "title": "Thumbnail url\nThumbnail URL of bookmark or file", "description": "Thumbnail URL of bookmark or file", "details": {"Slug": "cover", "Filter code": "Raindrop.raindropsAll.ThumbnailUrl", "Type": "Image URL", "Example": "https://up.raindrop.io/raindrop/123/thumb.jpg"}}, {"section": "Ingredients", "title": "Tags\nTags", "description": "Tags", "details": {"Slug": "tags", "Filter code": "Raindrop.raindropsAll.Tags", "Type": "String", "Example": "api, ifttt"}}, {"section": "Ingredients", "title": "Created at\nWhen bookmark or file is created", "description": "When bookmark or file is created", "details": {"Slug": "created", "Filter code": "Raindrop.raindropsAll.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Domain\nHostname", "description": "Hostname", "details": {"Slug": "domain", "Filter code": "Raindrop.raindropsAll.Domain", "Type": "String", "Example": "google.com"}}, {"section": "Ingredients", "title": "Id\nBookmark unique ID", "description": "Bookmark unique ID", "details": {"Slug": "id", "Filter code": "Raindrop.raindropsAll.Id", "Type": "String", "Example": "123"}}, {"section": "Ingredients", "title": "Note\nNote", "description": "Note", "details": {"Slug": "note", "Filter code": "Raindrop.raindropsAll.Note", "Type": "String", "Example": "Note"}}], "action_channel": "Instapaper", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "instapaper.save_item", "Filter code method": "Instapaper.saveItem.skip(string?: reason)", "Runtime method": "runAction(\"instapaper.save_item\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setUrl(string: url)"}}, {"section": "Action fields", "title": "Description\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Helper text": "Optional", "Slug": "description", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setDescription(string: description)"}}, {"section": "Action fields", "title": "Title\nText input > File name", "description": "Text input > File name", "details": {"Label": "Title", "Helper text": "Optional", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Instapaper.saveItem.setTitle(string: title)"}}, {"section": "Action fields", "title": "Folder\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which folder?", "Helper text": "Optional", "Slug": "folder", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tags\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Which tags?", "Slug": "tags", "Required": "false", "Can have default value": "false"}}], "filter_code": "if (Raindrop.raindropsAll.Tags.includes(\"article\") && Raindrop.raindropsAll.Domain === \"nytimes.com\") {\n  Instapaper.saveItem.setUrl(Raindrop.raindropsAll.Url);\n  Instapaper.saveItem.setTitle(Raindrop.raindropsAll.Title);\n  Instapaper.saveItem.setDescription(Raindrop.raindropsAll.Description);\n  // Note: Since the folder is not directly accessible via filter code, \n  // it's assumed that \"News\" is a predefined folder in Instapaper and \n  // its ID or slug should be used instead of the name. For demonstration, \n  // let's assume 'news-folder-id' is the ID of the \"News\" folder.\n  // However, due to the limitations provided, we cannot directly set the folder here.\n} else {\n  Instapaper.saveItem.skip(\"Bookmark does not match the criteria.\");\n}", "intent": "Save new Raindrop.io bookmarks with the tag \"article\" and the domain \"nytimes.com\" to Instapaper in the folder \"News\" with the title set to the bookmark's title and the description set to the bookmark's excerpt."}
{"original_description": "Save new items from RSS to Raindrop.io", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Raindrop.io", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "raindrop.raindrop", "Filter code method": "Raindrop.raindrop.skip(string?: reason)", "Runtime method": "runAction(\"raindrop.raindrop\", {})"}, "action_details": [{"section": "Action fields", "title": "Link\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "link", "Required": "true", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setLink(string: link)"}}, {"section": "Action fields", "title": "Collectionid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Collection", "Slug": "collectionId", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Excerpt\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Description", "Slug": "excerpt", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setExcerpt(string: excerpt)"}}, {"section": "Action fields", "title": "Cover\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Thumbnail URL", "Slug": "cover", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCover(string: cover)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Single or multiple separated by comma", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setTags(string: tags)"}}, {"section": "Action fields", "title": "Created\nText input > ISO 8601 date and time", "description": "Text input > ISO 8601 date and time", "details": {"Label": "Creation date", "Slug": "created", "Required": "false", "Can have default value": "true", "Filter code method": "Raindrop.raindrop.setCreated(string: created)"}}], "filter_code": "if (Feed.newFeedItem.FeedTitle === \"IFTTT Blog\") {\n  Raindrop.raindrop.setLink(Feed.newFeedItem.EntryUrl);\n  Raindrop.raindrop.setTitle(Feed.newFeedItem.EntryTitle);\n  Raindrop.raindrop.setTags(\"news, rss\");\n}", "intent": "When a new item is published in the \"IFTTT Blog\" RSS feed, save it to Raindrop.io with the title from the EntryTitle ingredient, the URL from the EntryUrl ingredient, and add tags \"news\" and \"rss\"."}
{"original_description": "Flash all of your Hue light bulbs if your abode alarm activates for any reason.", "trigger_channel": "abode", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "abode.alarm_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Abode.alarmTriggered.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Alarm type\nType of alarm triggered.", "description": "Type of alarm triggered.", "details": {"Slug": "alarm_type", "Filter code": "Abode.alarmTriggered.AlarmType", "Type": "String", "Example": "Fire Alarm Triggered"}}, {"section": "Ingredients", "title": "Device name\nName of device whose alarm is triggered.", "description": "Name of device whose alarm is triggered.", "details": {"Slug": "device_name", "Filter code": "Abode.alarmTriggered.DeviceName", "Type": "String", "Example": "abode Gateway Alarm"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}", "intent": "When the abode alarm is triggered for any reason, such as a fire alarm or security breach, and it's between 07:00 and 22:00, flash all of your Philips Hue light bulbs in the living room."}
{"original_description": "When your Blue by ADT alarm goes off receive a notification on your Android Wear watch. \n\nYou may select a specific alarm type or all alarm events.  For all alarm events, specify '(All)' for the Event Type.\n", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time alarm occurred.", "description": "Date and time alarm occurred.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.alarm.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of alarm that occurred.", "description": "The EventType describes the type of alarm that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.alarm.EventType", "Type": "String", "Example": "Fire"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.alarm.FormattedMessage", "Type": "String", "Example": "Medical Alarm"}}], "action_channel": "Wear OS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_wear.send_notification_to_android_wear", "Filter code method": "AndroidWear.sendNotificationToAndroidWear.skip(string?: reason)", "Runtime method": "runAction(\"android_wear.send_notification_to_android_wear\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Notification", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidWear.sendNotificationToAndroidWear.setMessage(string: message)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "AndroidWear.sendNotificationToAndroidWear.setImage Url(string: image_url)"}}], "filter_code": "if (Bluebyadt.alarm.EventType === \"Fire\") {\n  AndroidWear.sendNotificationToAndroidWear.setMessage(\"Fire Alarm Triggered\");\n  AndroidWear.sendNotificationToAndroidWear.skip(null);\n} else {\n  AndroidWear.sendNotificationToAndroidWear.skip(\"Not a fire alarm event\");\n}", "intent": "When a Fire alarm event occurs on your Blue by ADT system at any time, send a notification with the message \"Fire Alarm Triggered\" to your Android Wear watch."}
{"original_description": "Turn off Smart Home Solution device when Suspected Motion Stops.", "trigger_channel": "Aerial Technologies", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "AerialTechnologies.motion_detection_motion_stopped"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event", "description": "Type of event", "details": {"Slug": "type", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Type", "Type": "String", "Example": "motionDetection.humanMotion.stopped"}}, {"section": "Ingredients", "title": "Serial\nSerial", "description": "Serial", "details": {"Slug": "serial", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Serial", "Type": "String", "Example": "ABCDEF"}}, {"section": "Ingredients", "title": "Id\nEvent identifier", "description": "Event identifier", "details": {"Slug": "id", "Filter code": "AerialTechnologies.motionDetectionMotionStopped.Id", "Type": "String", "Example": "uuid"}}], "action_channel": "Smart Home Solution", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "smart_home_solution.turn_device_off", "Filter code method": "SmartHomeSolution.turnDeviceOff.skip(string?: reason)", "Runtime method": "runAction(\"smart_home_solution.turn_device_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device address\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "The name of the device to turn off", "Slug": "device_address", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (AerialTechnologies.motionDetectionMotionStopped.Type === \"motionDetection.humanMotion.stopped\" \n    && AerialTechnologies.motionDetectionMotionStopped.Serial === \"ABCDEF123\") {\n  var hour = new Date(AerialTechnologies.motionDetectionMotionStopped.CreatedAt).getHours();\n  if (hour >= 7 && hour < 22) {\n    SmartHomeSolution.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n  } else {\n    SmartHomeSolution.turnDeviceOff.skip(\"Outside of scheduled hours (07:00 to 22:00).\");\n  }\n}", "intent": "Turn off the Smart Home Solution device located at \"Living Room Lamp\" when a suspected motion stop event is detected by Aerial Technologies between 07:00 and 22:00 with the serial number \"ABCDEF123\" and the event type is \"motionDetection.humanMotion.stopped\"."}
{"original_description": "Want to keep an eye on LGBT rights in your state? Enter your state as the keyword when you set  up the Applet — if there's a new post mentioning it on hrc.org, you'll get an email. Want to track more than one state? You can set up multiple versions!", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item_matches"}, "trigger_details": [{"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or simple phrase", "Helper text": "Search operators are not supported", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItemMatches.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItemMatches.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItemMatches.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItemMatches.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItemMatches.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItemMatches.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItemMatches.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItemMatches.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "if (Feed.newFeedItemMatches.EntryContent.includes(\"California\") || Feed.newFeedItemMatches.EntryTitle.includes(\"California\")) {\n  Email.sendMeEmail.setSubject(\"New LGBT Rights Update in California\");\n  var body = \"Entry Title: \" + Feed.newFeedItemMatches.EntryTitle + \"\\n\\n\" + Feed.newFeedItemMatches.EntryContent + \"\\n\\nEntry URL: \" + Feed.newFeedItemMatches.EntryUrl;\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"No mention of California in the post.\");\n}", "intent": "When there's a new post on hrc.org mentioning \"California\" as the keyword, send me an email with the subject \"New LGBT Rights Update in California\" and the body containing the entry title, entry content, and entry URL from the feed."}
{"original_description": "If your SmartThings device detect presence, then turn off SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Spotcam.turnOffSpotcam.skip(\"Automatically turned off due to absence detected by Bedroom sensor\");\n}", "intent": "If the Bedroom sensor SmartThings device detects that you are not present, then turn off the SpotCam with serial number S123456 automatically."}
{"original_description": "If your SpotCam detect motion, then turn off your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOffAllHue.skip(\"Motion detected by Front Door SpotCam Ring\");\n}", "intent": "If the SpotCam Ring named \"Front Door\" detects motion at any time, then turn off all Philips Hue lights in the living room."}
{"original_description": "If your SpotCam detect sound, then make your Philips Hue blink automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.audio_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.audioEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.audioEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.audioEvent.CameraName", "Type": "String", "Example": "L'aéroport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.audioEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.audioEvent.CameraName === \"SWA00058rhwx\") {\n  Hue.blinkAllHue.skip();\n}", "intent": "When the SpotCam with serial number \"SWA00058rhwx\" detects sound, make all Philips Hue lights blink automatically."}
{"original_description": "If your SmartThings device detect presence, then turn off SpotCam alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_alert", "Filter code method": "Spotcam.turnOffAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Spotcam.turnOffAlert.skip(\"Turning off alert because user is not present.\");\n}", "intent": "If the Bedroom sensor device detects that you are not present, then turn off the SpotCam alert automatically for camera serial number S123456."}
{"original_description": "If your SpotCam detect sound, then dim your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.audio_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.audioEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.audioEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.audioEvent.CameraName", "Type": "String", "Example": "L'aéroport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.audioEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "if (Spotcam.audioEvent.CameraName === \"SWA00058rhwx\") {\n  Hue.setBrightnessAllHue.setBrightness(\"20\");\n}", "intent": "If the SpotCam with serial number SWA00058rhwx detects sound, then dim all Philips Hue lights in the living room to a brightness of 20."}
{"original_description": "If your SpotCam detect motion, then dim your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.setBrightnessAllHue.setBrightness(\"20\");\n}", "intent": "When the SpotCam Ring named \"Front Door\" detects motion at any time, dim all Philips Hue lights in the living room to a brightness of 20."}
{"original_description": "If your SpotCam detect motion, then make your Philips Hue blink", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Motion detected by camera other than Front Door\");\n}", "intent": "If the SpotCam Ring named \"Front Door\" detects motion at any time, then blink all Philips Hue lights in the living room."}
{"original_description": "Turn on all the lights if the alarm is triggered.", "trigger_channel": "Uplink Remote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "uplinkremote.armtrigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial number\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Slug": "serial_number", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Notification date\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "notification_date", "Filter code": "Uplinkremote.armtrigger.NotificationDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event description\nEvent description", "description": "Event description", "details": {"Slug": "message", "Filter code": "Uplinkremote.armtrigger.EventDescription", "Type": "String", "Example": "Panel is Armed"}}, {"section": "Ingredients", "title": "Device name\nName of unit", "description": "Name of unit", "details": {"Slug": "serial_number", "Filter code": "Uplinkremote.armtrigger.DeviceName", "Type": "String", "Example": "John's Home"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = Uplinkremote.armtrigger.DeviceName;\nvar eventDescription = Uplinkremote.armtrigger.EventDescription;\n\nif (deviceName === \"John's Home\" && eventDescription.includes(\"URGENT\") && hour >= 7 && hour < 22) {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met.\");\n}", "intent": "Turn on all Philips Hue lights in the living room when the Uplink Remote alarm is triggered for John's Home between 07:00 and 22:00 if the event description contains the word \"URGENT\"."}
{"original_description": "If Boundary Alarm is triggered send a text message to a chosen number using ClickSend", "trigger_channel": "Boundary", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "boundary.alarm_triggered"}, "trigger_details": [{"section": "Ingredients", "title": "Triggered at\nDate and time alarm was triggered.", "description": "Date and time alarm was triggered.", "details": {"Slug": "triggered_at", "Filter code": "Boundary.alarmTriggered.TriggeredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Type\nType of event occurred", "description": "Type of event occurred", "details": {"Slug": "type", "Filter code": "Boundary.alarmTriggered.Type", "Type": "String", "Example": "Alarm Triggered"}}], "action_channel": "ClickSend SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "clicksend.send_sms", "Filter code method": "Clicksend.sendSms.skip(string?: reason)", "Runtime method": "runAction(\"clicksend.send_sms\", {})"}, "action_details": [{"section": "Action fields", "title": "To\nText input > Other", "description": "Text input > Other", "details": {"Label": "To", "Slug": "to", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "From\nText input > Other", "description": "Text input > Other", "details": {"Label": "From", "Helper text": "Number or name where the message comes 'from'. If you use a name e.g. &quot;MyCompany&quot; the user can't reply. Special rules apply to US and Canada numbers. <a href=\"https://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number?from_search=16912480\" target=\"_blank\">More info</a>.", "Slug": "from", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Clicksend.sendSms.setMessage(string: message)"}}], "filter_code": "Clicksend.sendSms.setFrom(\"SecuritySystem\");\nClicksend.sendSms.setTo(\"+1234567890\");\nClicksend.sendSms.setMessage(\"Alarm Triggered: Boundary breach detected\");", "intent": "When the Boundary alarm is triggered at any time, send a text message to +1234567890 using ClickSend with the message \"Alarm Triggered: Boundary breach detected\" from the sender ID \"SecuritySystem\"."}
{"original_description": "If your SmartThings device is opened, then turn on your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_on_alert", "Filter code method": "Spotcam.turnOnAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_on_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnAlert.setSn(\"S123456\");\n} else {\n  Spotcam.turnOnAlert.skip(\"Device is not the Bedroom contact.\");\n}", "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn on the SpotCam Alert with serial number S123456 automatically."}
{"original_description": "If your SmartThings device presence no longer detected then turn on SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_not_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Departed at\nThe date and time you departed.", "description": "The date and time you departed.", "details": {"Slug": "DepartedAt", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DepartedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newNotPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Spotcam.turnOnSpotcam.setSn(\"S123456\");\n} else {\n  Spotcam.turnOffSpotcam.skip(\"Device is not the Bedroom sensor\");\n}", "intent": "If the Bedroom sensor SmartThings device is no longer detected, then turn on the SpotCam with serial number S123456 automatically."}
{"original_description": "If your SmartThings device is opened, then turn off your SpotCam Alert automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_alert", "Filter code method": "Spotcam.turnOffAlert.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_alert\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOffAlert.skip(\"Bedroom contact SmartThings device is opened.\");\n}", "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn off the SpotCam Alert with serial number SNC123456 automatically."}
{"original_description": "This will change the WiZ light(s) of your choice to Cool white if SmartThings detects a temperature above the level you defined. Best way to refresh the room!", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.temperature_rises_above_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Temperature value", "Helper text": "Temperature in threshold as a number", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature units", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nThe temperature measured by the sensor in Fahrenheit.", "description": "The temperature measured by the sensor in Fahrenheit.", "details": {"Slug": "TemperatureFahrenheit", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit", "Type": "String", "Example": "74"}}, {"section": "Ingredients", "title": "Temperature celsius\nThe temperature measured by the sensor in Celsius.", "description": "The temperature measured by the sensor in Celsius.", "details": {"Slug": "TemperatureCelsius", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureCelsius", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Threshold\nThe temperature threshold set in the recipe.", "description": "The temperature threshold set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.Threshold", "Type": "String", "Example": "75"}}, {"section": "Ingredients", "title": "Threshold units\nThe temperature threshold units (C or F).", "description": "The temperature threshold units (C or F).", "details": {"Slug": "ThresholdUnits", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.ThresholdUnits", "Type": "String", "Example": "F"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the temperature.", "description": "The date and time the sensor measured the temperature.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit > SmartthingsV2.temperatureRisesAboveSmartthings.Threshold && \n    SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName === \"Bedroom sensor\" && \n    SmartthingsV2.temperatureRisesAboveSmartthings.ThresholdUnits === \"F\" && \n    SmartthingsV2.temperatureRisesAboveSmartthings.Threshold === \"78\") {\n  Wiz.turnOn.setMode(\"Cool white\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}", "intent": "When the SmartThings sensor in the Bedroom detects a temperature rise above 78 degrees Fahrenheit, turn on the WiZ light in the Living Room to Cool white at a brightness of 75%."}
{"original_description": "If your SpotCam detect sound, then turn off your Philips Hue automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.audio_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.audioEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.audioEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.audioEvent.CameraName", "Type": "String", "Example": "L'aéroport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.audioEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.audioEvent.CameraName === \"SNC12345\") {\n  Hue.turnOnAllHue.skip(\"Sound detected by SpotCam, turning off lights.\");\n}", "intent": "If the sound is detected by SpotCam serial number SNC12345 at any time, then turn off all Philips Hue lights in the living room."}
{"original_description": "This applet calls your phone when Camio detects motion.", "trigger_channel": "Camio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "camio.motion_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Camera\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a camera", "Helper text": "Choose &quot;All Cameras&quot; to monitor all cameras.", "Slug": "camera", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Camera name\nThe camera that detected the motion.", "description": "The camera that detected the motion.", "details": {"Slug": "camera_name", "Filter code": "Camio.motionDetected.CameraName", "Type": "String", "Example": "DoorCamera"}}, {"section": "Ingredients", "title": "Triggered time\nThe time at which the event was triggered.", "description": "The time at which the event was triggered.", "details": {"Slug": "triggered_time", "Filter code": "Camio.motionDetected.TriggeredTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Colors\nA comma separated list of colors that were detected in the event.", "description": "A comma separated list of colors that were detected in the event.", "details": {"Slug": "colors", "Filter code": "Camio.motionDetected.Colors", "Type": "String", "Example": "blue, purple, green"}}, {"section": "Ingredients", "title": "Event link\nA link to the event at camio.com (only accessible if you're logged in).", "description": "A link to the event at camio.com (only accessible if you're logged in).", "details": {"Slug": "event_link", "Filter code": "Camio.motionDetected.EventLink", "Type": "Web URL", "Example": "https://www.camio.com/#search;t=123"}}, {"section": "Ingredients", "title": "Zones\nA comma separated list of zones in which motion occurred.", "description": "A comma separated list of zones in which motion occurred.", "details": {"Slug": "zones", "Filter code": "Camio.motionDetected.Zones", "Type": "String", "Example": "Window, Door"}}, {"section": "Ingredients", "title": "Motion direction\nThe direction of motion in the event (approaching or departing the camera or N/A).", "description": "The direction of motion in the event (approaching or departing the camera or N/A).", "details": {"Slug": "motion_direction", "Filter code": "Camio.motionDetected.MotionDirection", "Type": "String", "Example": "approaching"}}, {"section": "Ingredients", "title": "Objects detected\nThe objects detected in the event (currently just people and cars).", "description": "The objects detected in the event (currently just people and cars).", "details": {"Slug": "objects_detected", "Filter code": "Camio.motionDetected.ObjectsDetected", "Type": "String", "Example": "People, Cars"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (Camio.motionDetected.CameraName === \"DoorCamera\") {\n  Woopla.ttsCall.setTts(\"Motion detected at the door\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Motion not detected by DoorCamera.\");\n}", "intent": "Call my phone using Woopla when motion is detected by the DoorCamera at any time, speaking the text \"Motion detected at the door\" in English."}
{"original_description": "毎日、指定した日時にBOCCOがリマインドします", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "BOCCO", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bocco.bocco_speak", "Filter code method": "Bocco.boccoSpeak.skip(string?: reason)", "Runtime method": "runAction(\"bocco.bocco_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "room", "Helper text": "Select room where you want to speak by BOCCO.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setMessage(string: message)"}}, {"section": "Action fields", "title": "Lang\nDropdown list", "description": "Dropdown list", "details": {"Label": "lang", "Slug": "lang", "Required": "true", "Can have default value": "true", "Filter code method": "Bocco.boccoSpeak.setLang(string: lang)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 8 && minute === 0) {\n  Bocco.boccoSpeak.setRoom(\"living room\");\n  Bocco.boccoSpeak.setMessage(\"Good morning, it's time to wake up\");\n  Bocco.boccoSpeak.setLang(\"Japanese\");\n} else {\n  Bocco.boccoSpeak.skip(\"Not 8:00 AM\");\n}", "intent": "Every day at 8:00 AM, BOCCO speaks in the living room with the message \"Good morning, it's time to wake up\" in Japanese."}
{"original_description": "Whenever the price comes back down below my threshold, change the color of my Philips Hue light bulbs to my specified value.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (ComEd.averagePriceChange.AveragePrice < 10 && ComEd.averagePriceChange.which_season === \"winter\" && ComEd.averagePriceChange.trigger_type === \"below\" && ComEd.averagePriceChange.how_often_to_trigger === \"first_time_below\") {\n  Hue.setColorAllHue.setColor(\"#008000\");\n}", "intent": "When the average price of electricity from ComEd goes below 10 cents per hour during the winter season, and this is the first time it has dropped below this threshold after previously being higher, change the color of all my Philips Hue light bulbs to a blue-green hue (#008000)."}
{"original_description": "Whenever the price exceeds the set threshold, change the color of my Philips Hue light bulbs to my specified value.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (ComEd.averagePriceChange.AveragePrice > 15 && ComEd.averagePriceChange.Timestamp.includes(\"Summer\") && \n    (ComEd.averagePriceChange.FromHour >= 7 || ComEd.averagePriceChange.ToHour <= 19) && \n    ComEd.averagePriceChange.trigger_type === \"exceeds\" && ComEd.averagePriceChange.how_often_to_trigger === \"first_time\") {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the average price exceeds 15 cents during the summer season, between 07:00 and 19:00, and this is the first time it goes above the threshold, change the color of all my Philips Hue light bulbs to red (#FF0000)."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of three phases total power consumption ", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_action_power_consumption_trifase"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.energyGlobalActionPowerConsumptionTrifase.State > 4500) {\n  Telegram.sendMessage.setText(`High energy consumption detected: ${ViewProd.energyGlobalActionPowerConsumptionTrifase.State} Watts`);\n  Telegram.sendMessage.setIncludeWebPagePreview(false);\n}", "intent": "Send a notification to the Telegram chat \"#energy_monitoring\" with the message \"High energy consumption detected: 5000 Watts\" when the total power consumption of the device \"Home Energy Meter\" exceeds 4500 Watts."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of single phase total power consumption ", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_action_power_consumption_trifase"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActionPowerConsumptionTrifase.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.energyGlobalActionPowerConsumptionTrifase.Device === \"HomeEnergyMeter\" && \n    (ViewProd.energyGlobalActionPowerConsumptionTrifase.State > 5 || ViewProd.energyGlobalActionPowerConsumptionTrifase.State < 1)) {\n  Telegram.sendMessage.setText(\"Current power consumption: \" + ViewProd.energyGlobalActionPowerConsumptionTrifase.State + \" kW. Check the energy monitoring dashboard: https://example.com/energy-monitoring\");\n  Telegram.sendMessage.setIncludeWebPagePreview(true);\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}", "intent": "Send a notification to the Telegram chat \"#EnergyMonitor\" when the single phase total power consumption of device \"HomeEnergyMeter\" exceeds 5 kW or drops below 1 kW, including a message with the current power consumption value and a web page preview of the energy monitoring dashboard."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of single phase exchanged power (positive value means taken from the utility / negative value means given to the utility)", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_active_power_exchange"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActivePowerExchange.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActivePowerExchange.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActivePowerExchange.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.energyGlobalActivePowerExchange.Device === \"Living Room Meter\" && \n    (ViewProd.energyGlobalActivePowerExchange.State > 500 || ViewProd.energyGlobalActivePowerExchange.State < -200)) {\n  Telegram.sendMessage.setText(\"Single phase exchanged power from device \\\"Living Room Meter\\\" has exceeded 500 Watts or dropped below -200 Watts. Current state: \" + ViewProd.energyGlobalActivePowerExchange.State);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip(false);\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}", "intent": "Send a notification to the Telegram chat \"#energy_monitoring\" when the single phase exchanged power from device \"Living Room Meter\" exceeds 500 Watts or drops below -200 Watts, including a web page preview in the message."}
{"original_description": "This applet sends a notification on Telegram in case of reaching a higher or lower value of single phase produced power ", "trigger_channel": "Vimar VIEW", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "view_prod.energy_global_action_power_product"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select your device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Condition\nDropdown list", "description": "Dropdown list", "details": {"Label": "Condition", "Helper text": "notification condition", "Slug": "condition", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Threshold", "Helper text": "threshold or value to notify", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "ViewProd.energyGlobalActionPowerProduct.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour selected device", "description": "Your selected device", "details": {"Slug": "device", "Filter code": "ViewProd.energyGlobalActionPowerProduct.Device", "Type": "String", "Example": "device"}}, {"section": "Ingredients", "title": "State\nYour device state", "description": "Your device state", "details": {"Slug": "state", "Filter code": "ViewProd.energyGlobalActionPowerProduct.State", "Type": "String", "Example": "state"}}], "action_channel": "Telegram", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "telegram.send_message", "Filter code method": "Telegram.sendMessage.skip(string?: reason)", "Runtime method": "runAction(\"telegram.send_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Chat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Target chat", "Helper text": "Use the <a href=\"https://telegram.me/ifttt\" target=\"_blank\">@IFTTT</a> bot on Telegram to connect new <a href=\"https://telegram.me/ifttt?startgroup=c\" target=\"_blank\">groups</a> or <a href=\"https://telegram.me/ifttt?start=c\" target=\"_blank\">channels</a>.", "Slug": "chat_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Text\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message text", "Helper text": "Some HTML tags are supported: b, i, a, br, pre, code.", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setText(string: text)"}}, {"section": "Action fields", "title": "Include web page preview\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include web page preview?", "Helper text": "Telegram will check the first URL in the text to include a small preview of the page. Disabled by default.", "Slug": "include_web_page_preview", "Required": "false", "Can have default value": "true", "Filter code method": "Telegram.sendMessage.setInclude Web Page Preview(string: include_web_page_preview)"}}], "filter_code": "if (ViewProd.energyGlobalActionPowerProduct.Device === \"Home_Power_Monitor\" && \n    (ViewProd.energyGlobalActionPowerProduct.State > 5000 || ViewProd.energyGlobalActionPowerProduct.State < 1000)) {\n  Telegram.sendMessage.setText(\"Single phase produced power of Home_Power_Monitor is \" + ViewProd.energyGlobalActionPowerProduct.State + \" watts.\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}", "intent": "Send a notification to the Telegram chat \"#energy_monitoring\" when the single phase produced power of device \"Home_Power_Monitor\" exceeds 5000 watts or drops below 1000 watts, including a web page preview in the message."}
{"original_description": "When the Litter-Robot is full, turn the Philips Hue lighting to purple", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.event_type === \"Litter Box Full\") {\n  if (Hue.getLightsInRoom(\"living room\").length > 0) {\n    Hue.setColorAllHue.setColor(\"#7A288A\");\n  } else {\n    Hue.setColorAllHue.skip(\"No lights found in the living room.\");\n  }\n}", "intent": "When the litter robot named \"My Litter Robot\" sends a \"Litter Box Full\" event, turn all the lights in the living room to purple (#7A288A) using Philips Hue."}
{"original_description": "Press the iH button on your iHome device to dim Philips Hue Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Hue.setBrightnessAllHue.setBrightness(\"50\");\n  Hue.setBrightnessAllHue.skip(\"Dimming living room lights to 50%\");\n}", "intent": "When the \"iH\" button on your iHome device is pressed, dim all Philips Hue lights in the living room to a brightness of 50."}
{"original_description": "Press the iH button on your iHome device to change the color of Philips Hue Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iHome Button\") {\n  Hue.setColorAllHue.setColor(\"#FF69B4\");\n} else {\n  Hue.setColorAllHue.skip(\"Button name does not match 'iHome Button'.\");\n}", "intent": "When the \"iHome Button\" on your iHome device is pressed, change the color of all Philips Hue lights in the living room to \"#FF69B4\"."}
{"original_description": "Blink the Phillips hue lights when your child gets Boosted.", "trigger_channel": "RoosterMoney", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "roostermoney.removed"}, "trigger_details": [{"section": "Trigger fields", "title": "Child\nDropdown list", "description": "Dropdown list", "details": {"Label": "Child", "Slug": "child", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Pot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pot", "Slug": "pot", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Roostermoney.removed.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Amount\nThe amount they were removed", "description": "The amount they were removed", "details": {"Slug": "amount", "Filter code": "Roostermoney.removed.Amount", "Type": "String", "Example": "£1.23"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar amount = parseFloat(Roostermoney.removed.Amount.replace(\"£\", \"\"));\nvar child = Roostermoney.removed.Child;\nvar pot = Roostermoney.removed.Pot;\n\nif (child === \"Emily\" && pot === \"Savings Pot\" && amount >= 5 && hour >= 15) {\n  Hue.blinkAllHue.setLights([\"Living room\"]);\n} else {\n  Hue.blinkAllHue.skip(\"Conditions not met.\");\n}", "intent": "Blink all the living room Philips Hue lights when your child, Emily, gets £5 or more Boosted from the Savings Pot on RoosterMoney after 3 PM."}
{"original_description": "Sets a scene on the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_scene", "Filter code method": "Hue.setScene.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Helper text": "Don't see your scenes? Make sure your lights connected to the latest hue app for iOS or Android.", "Slug": "scene", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" \n    && Apilio.iftttActionReports.CreatedAt.getHours() === 20 \n    && Apilio.iftttActionReports.ApilioValue1 === \"Relax\") {\n  Hue.setScene({ scene: \"Evening\" });\n} else {\n  Hue.setScene.skip(\"Conditions not met for setting the Evening scene.\");\n}", "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered at 20:00 and has a custom value of \"Relax\" for Apilio value1, set the Philips Hue scene to \"Evening\" on all connected lights."}
{"original_description": "Changes the color of the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6) && apilioValue1 === \"Green\") {\n  Hue.setColorAllHue.setColor(\"#008000\");\n} else {\n  Hue.setColorAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the value received from Apilio is \"Green\", change the color of the living room lights to #008000."}
{"original_description": "Everyday at the time you selected, IFTTT fires action, turns off your projector and Philip Hue automatically.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Optoma", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Optoma.led_on_off", "Filter code method": "Optoma.ledOnOff.skip(string?: reason)", "Runtime method": "runAction(\"Optoma.led_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Optoma.ledOnOff.setTurn On Off(string: turn_on_off)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (currentTime.indexOf(targetTime) !== -1) {\n  Optoma.ledOnOff.setTurnOnOff(\"off\");\n  Optoma.ledOnOff.setDeviceId(\"LivingRoomProjector\");\n  PhilipsHue.switchLightsOff();\n} else {\n  Optoma.ledOnOff.skip(\"Not the target time\");\n}", "intent": "Every day at 8:00 PM, turn off the Optoma projector with Device ID \"LivingRoomProjector\" and also switch off the Philip Hue lights automatically."}
{"original_description": "Turn on Philips Hue light automatically to designated account when someone's SpotCam detects human", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.human_detected"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.humanDetected.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.humanDetected.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.humanDetected.CameraName", "Type": "String", "Example": "Airport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.humanDetected.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Spotcam.humanDetected.CameraName === \"Airport\") {\n    Hue.turnOnAllHue.setLights(\"Living room\");\n  } else {\n    Hue.turnOnAllHue.skip(\"Not Airport camera\");\n  }\n} else {\n  Hue.turnOnAllHue.skip(\"Outside of active hours (7 AM to 7 PM)\");\n}", "intent": "Turn on all Philips Hue lights in the living room automatically when someone is detected by the SpotCam named \"Airport\" between 07:00 and 19:00."}
{"original_description": "Dims or brightens the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_brightness_all_hue", "Filter code method": "Hue.setBrightnessAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_brightness_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nText input > Other", "description": "Text input > Other", "details": {"Label": "Brightness", "Helper text": "Value between 0-100", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setBrightnessAllHue.setBrightness(string: brightness)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && \n    (hour >= 20 || hour < 6) && \n    apilioValue1 === \"Green\") {\n  Hue.setBrightnessAllHue.setBrightness(\"20\");\n} else {\n  Hue.setBrightnessAllHue.skip(\"Conditions not met.\");\n}", "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 from Apilio is \"Green\", dim the brightness of the living room lights to 20."}
{"original_description": "Everyday at the time you selected, IFTTT fires action, turns on my Optoma projector and Philip Hue.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Optoma", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Optoma.projector_on_off", "Filter code method": "Optoma.projectorOnOff.skip(string?: reason)", "Runtime method": "runAction(\"Optoma.projector_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Optoma.projectorOnOff.setTurn On Off(string: turn_on_off)"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:30 PM\";\n\nif (currentTime === targetTime) {\n  Optoma.projectorOnOff.setTurnOnOff(\"on\");\n  Optoma.projectorOnOff.setDeviceId(\"LivingRoomProjector\");\n  // Assuming Philip Hue action is similar, but since it's not provided in the action details,\n  // we will comment it out for now. In a real scenario, you would need to add the actual method.\n  // PhilipHue.lightsOnOff.setTurnOnOff(\"on\");\n} else {\n  Optoma.projectorOnOff.skip(\"Not the target time\");\n}", "intent": "Every day at 7:30 PM, turn on my Optoma projector with Device ID \"LivingRoomProjector\" and also activate the Philip Hue lights."}
{"original_description": "Turn your Philips Hue light bulb red during on-peak hours to always know when electricity costs more. Be sure to create another Applet to change the color when the cost of electricity decreases.", "trigger_channel": "Fort Collins Utilities Time of Day Pricing", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fcu_tod.time_of_day"}, "trigger_details": [{"section": "Trigger fields", "title": "Event\nDropdown list", "description": "Dropdown list", "details": {"Label": "This event should trigger when peak rates:", "Slug": "event", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Season\nDropdown list", "description": "Dropdown list", "details": {"Label": "During which season?", "Slug": "season", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Day type\nThe type of day for this event.", "description": "The type of day for this event.", "details": {"Slug": "day_type", "Filter code": "FcuTod.timeOfDay.DayType", "Type": "String", "Example": "Weekday"}}, {"section": "Ingredients", "title": "Season\nThe current season.", "description": "The current season.", "details": {"Slug": "season", "Filter code": "FcuTod.timeOfDay.Season", "Type": "String", "Example": "Summer"}}, {"section": "Ingredients", "title": "Event type\nWhether this is a \"start\" or \"end\" time-of-day event.", "description": "Whether this is a \"start\" or \"end\" time-of-day event.", "details": {"Slug": "event_type", "Filter code": "FcuTod.timeOfDay.EventType", "Type": "String", "Example": "start"}}, {"section": "Ingredients", "title": "Datetime\nWhen the time-of-date change occurred.", "description": "When the time-of-date change occurred.", "details": {"Slug": "datetime", "Filter code": "FcuTod.timeOfDay.Datetime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (FcuTod.timeOfDay.EventType === \"start\" && FcuTod.timeOfDay.DayType === \"Weekday\" && FcuTod.timeOfDay.Season === \"Summer\") {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Not peak hours or not weekday/summer.\");\n}", "intent": "Turn on the living room Philips Hue light bulb to red (#FF0000) when Fort Collins Utilities signals the start of peak hours on weekdays during the summer season."}
{"original_description": "If your SpotCam Ring battery is low, then make your Philips Hue blink automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door Camera\" && Spotcam.spotcamRingEvent.EventType === \"low_battery\") {\n  Hue.blinkAllHue.setLights(\"all\");\n}", "intent": "If the battery of your SpotCam Ring, named \"Front Door Camera\", is low, then make all your Philips Hue lights blink automatically."}
{"original_description": "If your SpotCam Ring battery cover is removed, then make your Philips Hue blink automatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.cover_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.coverEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.coverEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.coverEvent.CameraName === \"Front Door Camera\") {\n  if (Spotcam.coverEvent.EventTime !== null) {\n    Hue.blinkAllHue.skip();\n  } else {\n    Hue.blinkAllHue.skip(\"Event time is null.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Camera name does not match 'Front Door Camera'.\");\n}", "intent": "If the battery cover of your SpotCam Ring, named \"Front Door Camera\", is removed at any time, then make all your Philips Hue lights blink automatically."}
{"original_description": "If your SpotCam detect motion, then turn on your Philips Hue atuomatically", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.spotcam_ring_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.spotcamRingEvent.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam Ring.", "description": "The name of the SpotCam Ring.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.spotcamRingEvent.CameraName", "Type": "String", "Example": "SpotCam Ring"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.spotcamRingEvent.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.spotcamRingEvent.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOnAllHue.setLights(\"Living Room\");\n}", "intent": "When the SpotCam Ring named \"Front Door\" detects motion at any time, turn on all Philips Hue lights in the living room."}
{"original_description": "Turn on Philips Hue light automatically to designated account when someone's SpotCam detects fence crossed", "trigger_channel": "SpotCam", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "spotcam.virtual_fence_crossed"}, "trigger_details": [{"section": "Trigger fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "event_time", "Filter code": "Spotcam.virtualFenceCrossed.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Image url\nThe url of the event thumbnail.", "description": "The url of the event thumbnail.", "details": {"Slug": "imgurl", "Filter code": "Spotcam.virtualFenceCrossed.ImageUrl", "Type": "Image URL", "Example": "https://spotcam-image.s3-ap-southeast-1.amazonaws.com/jpg/SWA00058rhwx/20160815/1471244520.jpg?AWSAccessKeyId=AKIAIKW3CJGP7LZCADFA&Expires=1471251745&Signature=Q8%2F5NZGm%2B0my%2FwVEj652fDfoJWI%3D"}}, {"section": "Ingredients", "title": "Camera name\nThe name of the SpotCam.", "description": "The name of the SpotCam.", "details": {"Slug": "camera_name", "Filter code": "Spotcam.virtualFenceCrossed.CameraName", "Type": "String", "Example": "Airport"}}, {"section": "Ingredients", "title": "Image page url\nThe web page URL of the event thumbnail.", "description": "The web page URL of the event thumbnail.", "details": {"Slug": "polaroid_url", "Filter code": "Spotcam.virtualFenceCrossed.ImagePageUrl", "Type": "Web URL", "Example": "https://www.myspotcam.com/welcome/polaroid?imgbase=http%3A%2F%2Fwww.myspotcam.com%2Fimages%2Findexlogo.jpg"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Spotcam.virtualFenceCrossed.CameraName === \"Airport\") {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n}", "intent": "Turn on all Philips Hue lights in the living room automatically when someone's Airport SpotCam detects a fence being crossed."}
{"original_description": "Briefly blinks the Philips Hue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && \n    Apilio.iftttActionReports.ApilioValue1 === \"Green\" && \n    (hour >= 20 || hour < 6)) {\n  Hue.blinkAllHue.setLights([\"Living room\", \"Kitchen\"]);\n} else {\n  Hue.blinkAllHue.skip(\"Conditions not met.\");\n}", "intent": "Blink the living room and kitchen Philips Hue lights briefly when an Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00 with a custom value of \"Green\" for value1."}
{"original_description": "Turn your audio and TV appliances of via Logitec Harmony while activating your NIko Home Control routines", "trigger_channel": "Niko Home Control", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nikohomecontrol.routine_activated"}, "trigger_details": [{"section": "Trigger fields", "title": "Routine\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Routine will be the trigger?", "Helper text": "Select the Routine which will trigger an action when it is activated", "Slug": "routine", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nikohomecontrol.routineActivated.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Routine\nThe Routine which was activated.", "description": "The Routine which was activated.", "details": {"Slug": "routine", "Filter code": "Nikohomecontrol.routineActivated.Routine", "Type": "String", "Example": "Party"}}], "action_channel": "Harmony", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "harmony.end-activity", "Filter code method": "Harmony.endActivity.skip(string?: reason)", "Runtime method": "runAction(\"harmony.end-activity\", {})"}, "action_details": [{"section": "Action fields", "title": "Activity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which activity?", "Helper text": "Activities that include locks are not supported", "Slug": "activity", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Nikohomecontrol.routineActivated.Routine === \"Goodnight\" && Meta.currentUserTime.hour() === 22) {\n  Harmony.endActivity.setActivity(\"Living Room\");\n} else {\n  Harmony.endActivity.skip(\"Conditions not met to turn off Living Room activity.\");\n}", "intent": "When the \"Goodnight\" routine is activated on Niko Home Control at 10:00 PM, turn off the \"Living Room\" activity on Logitec Harmony."}
{"original_description": "When there appears a new popular article in a specified section of the New York Times, let Homey announce this as your personal news anchor.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.any_new_popular_article_today"}, "trigger_details": [{"section": "Trigger fields", "title": "Section\nDropdown list", "description": "Dropdown list", "details": {"Label": "Section", "Slug": "section", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.anyNewPopularArticleToday.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.anyNewPopularArticleToday.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.anyNewPopularArticleToday.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.anyNewPopularArticleToday.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.anyNewPopularArticleToday.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.anyNewPopularArticleToday.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.anyNewPopularArticleToday.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Homey", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "homey.let_homey_speak", "Filter code method": "Homey.letHomeySpeak.skip(string?: reason)", "Runtime method": "runAction(\"homey.let_homey_speak\", {})"}, "action_details": [{"section": "Action fields", "title": "Which homey\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Homey?", "Slug": "which_homey", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "What text\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What text?", "Slug": "what_text", "Required": "true", "Can have default value": "true", "Filter code method": "Homey.letHomeySpeak.setWhat Text(string: what_text)"}}], "filter_code": "if (Nytimes.anyNewPopularArticleToday.Section === \"Sports\") {\n  var text = `A new article by ${Nytimes.anyNewPopularArticleToday.Author} is now available, titled ${Nytimes.anyNewPopularArticleToday.Title}, with the blurb ${Nytimes.anyNewPopularArticleToday.Blurb}, and can be found at ${Nytimes.anyNewPopularArticleToday.ArticleUrl}`;\n  Homey.letHomeySpeak.setWhatText(text);\n} else {\n  Homey.letHomeySpeak.skip(\"Article is not in the Sports section.\");\n}", "intent": "When a new popular article appears in the Sports section of the New York Times, let Homey announce it as your personal news anchor, speaking the text \"A new article by Alexander P. Tibbets is now available, titled In a fish tank, 'Algae is the worst', with the blurb This article was written to keep you informed, and can be found at http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html\"."}
{"original_description": "A simple way to let someone know you're on your way home, or any other message you'd like to send regularly. Enter the phone number to text from your Android phone, and customize the message! When you press the Stone, it'll send. ", "trigger_channel": "Pebblebee", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pebblebee.stone_press"}, "trigger_details": [{"section": "Trigger fields", "title": "Stone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Stone?", "Slug": "stone_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Stone press type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which press type?", "Slug": "stone_press_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Pressed at\nDate and time the Stone was pressed.", "description": "Date and time the Stone was pressed.", "details": {"Slug": "pressed_at", "Filter code": "Pebblebee.stonePress.PressedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Stone name\nName of selected Stone.", "description": "Name of selected Stone.", "details": {"Slug": "stone_name", "Filter code": "Pebblebee.stonePress.StoneName", "Type": "String", "Example": "My Stone"}}, {"section": "Ingredients", "title": "Trigger type\nType of trigger set in Recipe.", "description": "Type of trigger set in Recipe.", "details": {"Slug": "trigger_type", "Filter code": "Pebblebee.stonePress.TriggerType", "Type": "String", "Example": "Pressed or held"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Pebblebee.stonePress.StoneName === \"My Stone\" && Pebblebee.stonePress.TriggerType === \"Pressed\") {\n  AndroidMessages.sendAMessage.setText(\"I'm on my way home, see you soon!\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1-123-456-7890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Condition not met.\");\n}", "intent": "When the \"My Stone\" Pebblebee Stone is pressed with a single press type, send a text message to phone number \"+1-123-456-7890\" saying \"I'm on my way home, see you soon!\"."}
{"original_description": "If your SmartThings device is opened, then turn on your SpotCam automatically", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.opened_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Opened at\nThe date and time sensor was opened.", "description": "The date and time sensor was opened.", "details": {"Slug": "OpenedAt", "Filter code": "SmartthingsV2.openedSmartthings.OpenedAt", "Type": "String", "Example": "April 1st, 2023 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.openedSmartthings.DeviceName", "Type": "String", "Example": "Bedroom contact"}}], "action_channel": "SpotCam", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "spotcam.turn_off_spotcam", "Filter code method": "Spotcam.turnOffSpotcam.skip(string?: reason)", "Runtime method": "runAction(\"spotcam.turn_off_spotcam\", {})"}, "action_details": [{"section": "Action fields", "title": "Sn\nDropdown list", "description": "Dropdown list", "details": {"Label": "SpotCam serial number", "Slug": "sn", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.setSn(\"S123456\");\n} else {\n  Spotcam.turnOnSpotcam.skip(\"Not the Bedroom contact device.\");\n}", "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn on the SpotCam with serial number S123456 automatically."}
{"original_description": "This applet turns off your Hue light when Withings Sleep detects that you get into bed.\n", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_on_all_hue", "Filter code method": "Hue.turnOnAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_on_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (WithingsSleep.bedin.DeviceUser === \"Tom\" && \n    WithingsSleep.bedin.DateandTime.hour() >= 22 || \n    WithingsSleep.bedin.DateandTime.hour() <= 6) {\n  Hue.turnOnAllHue.setLights(\"Living room\").skip(\"Turning off the living room light as Tom is in bed\");\n}", "intent": "Turn off the living room Hue light when Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00."}
{"original_description": "This applet turns off your Yeelight when Withings Sleep detects that you get into bed.", "trigger_channel": "Withings Sleep", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "WithingsSleep.bedin"}, "trigger_details": [{"section": "Trigger fields", "title": "Start date\nDropdown list", "description": "Dropdown list", "details": {"Label": "Start time", "Helper text": "Set the start time for when this applet should be activated so, for example, your cat can’t accidentally trigger a response.", "Slug": "start_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "End date\nDropdown list", "description": "Dropdown list", "details": {"Label": "End time", "Helper text": "Set the end time for when this applet should be deactivated.", "Slug": "end_date", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which sensor do you want to use?", "Helper text": "If you have more than one sensor linked to your Withings Health Mate account, you can select which one you want to use.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Device user\nUsername associated to the Withings Sleep", "description": "Username associated to the Withings Sleep", "details": {"Slug": "device_mac", "Filter code": "WithingsSleep.bedin.DeviceUser", "Type": "String", "Example": "Bed in has been detected by Tom's Withings Sleep"}}, {"section": "Ingredients", "title": "Dateand time\nDate and time when you got in bed", "description": "Date and time when you got in bed", "details": {"Slug": "time", "Filter code": "WithingsSleep.bedin.DateandTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.on_off", "Filter code method": "Yeelight.onOff.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "On off option\nDropdown list", "description": "Dropdown list", "details": {"Label": "On, off or toggle?", "Slug": "on_off_option", "Required": "true", "Can have default value": "true", "Filter code method": "Yeelight.onOff.setOn Off Option(string: on_off_option)"}}], "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nif (hour >= 22 || hour < 6) {\n  if (WithingsSleep.bedin.DeviceUser === \"Tom\") {\n    Yeelight.onOff.setDeviceId(\"Living Room\");\n    Yeelight.onOff.setOnOffOption(\"off\");\n  } else {\n    Yeelight.onOff.skip(\"Not Tom's device.\");\n  }\n} else {\n  Yeelight.onOff.skip(\"Outside of bedtime hours (22:00 to 06:00).\");\n}", "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00, turn off the Living Room Yeelight."}
{"original_description": "When the radon levels reach a level above 100, turn my hue lights red so I can get in some fresh air.", "trigger_channel": "Airthings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "airthings.radon-above"}, "trigger_details": [{"section": "Trigger fields", "title": "Unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Measurement unit", "Helper text": "What unit of measurement would you like to receive your radon levels in?", "Slug": "unit", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "The device you would like to get radon levels from.", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Threshold", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Airthings.radonAbove.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Radon level\nThe radon level. In the measurement unit specified.", "description": "The radon level. In the measurement unit specified.", "details": {"Slug": "value", "Filter code": "Airthings.radonAbove.RadonLevel", "Type": "String", "Example": "120"}}, {"section": "Ingredients", "title": "Measurement unit\nThe unit of measurement used for radon, Bq/m3 or pCi/L.", "description": "The unit of measurement used for radon, Bq/m3 or pCi/L.", "details": {"Slug": "unit", "Filter code": "Airthings.radonAbove.MeasurementUnit", "Type": "String", "Example": "Bq/m3"}}, {"section": "Ingredients", "title": "Device\nName of the device.", "description": "Name of the device.", "details": {"Slug": "device", "Filter code": "Airthings.radonAbove.Device", "Type": "String", "Example": "Home - Living Room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.set_color_all_hue", "Filter code method": "Hue.setColorAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.set_color_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nText input > Other", "description": "Text input > Other", "details": {"Label": "Color value or name", "Helper text": "Accepts color names or CSS hex codes", "Slug": "color", "Required": "true", "Can have default value": "true", "Filter code method": "Hue.setColorAllHue.setColor(string: color)"}}], "filter_code": "if (Airthings.radonAbove.Device === \"Home - Living Room\" && Airthings.radonAbove.MeasurementUnit === \"Bq/m3\" && parseFloat(Airthings.radonAbove.RadonLevel) > 100) {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Radon level is not above 100 Bq/m3 in Home - Living Room.\");\n}", "intent": "When the radon level in my Home - Living Room device exceeds 100 Bq/m3, change all my Philips Hue lights to red (#FF0000) so I can take action to get some fresh air."}
{"original_description": "Blink your Philips Hue lights when you have a new unread voicemail.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_user_voicemail"}, "trigger_details": [{"section": "Trigger fields", "title": "Voicemail status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which status should the voicemail have?", "Helper text": "Is the voicemail read or unread?", "Slug": "voicemail_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Voicemail\nThe ID of the voicemail.", "description": "The ID of the voicemail.", "details": {"Slug": "voicemail_id", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailId", "Type": "String", "Example": "alkdoweinld"}}, {"section": "Ingredients", "title": "Call date\nThe start time of the voicemail.", "description": "The start time of the voicemail.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newUserVoicemail.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Voicemail duration\nThe duration of the voicemail in format HH:MM:SS.", "description": "The duration of the voicemail in format HH:MM:SS.", "details": {"Slug": "voicemail_duration", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailDuration", "Type": "String", "Example": "00:03:21"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the caller.", "description": "The phone number of the caller.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the caller.", "description": "The name of the caller.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newUserVoicemail.CallerName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the user who received the voicemail.", "description": "The phone number of the user who received the voicemail.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumber", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the user who received the voicemail.", "description": "The name of the user who received the voicemail.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newUserVoicemail.CalleeName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Voicemail status\nThe status of the voicemail -- read or unread.", "description": "The status of the voicemail -- read or unread.", "details": {"Slug": "voicemail_status", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailStatus", "Type": "String", "Example": "unread"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\" && ZoomPhone.newUserVoicemail.CallerNumberType === \"external\") {\n    Hue.blinkAllHue.setLights(\"Living room\");\n  } else {\n    Hue.blinkAllHue.skip(\"Does not match the conditions.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Outside of the specified time range (08:00-18:00).\");\n}", "intent": "Blink all Philips Hue lights in the living room when a new unread voicemail from an external caller is received on your Zoom Phone between 08:00 and 18:00."}
{"original_description": "During the chosen days of the week send a signal to your sRemo based on a pre-chosen conditions in your sCloud.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "sRemo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sRemo.send_signal_s", "Filter code method": "SRemo.sendSignalS.skip(string?: reason)", "Runtime method": "runAction(\"sRemo.send_signal_s\", {})"}, "action_details": [{"section": "Action fields", "title": "Sremo\nDropdown list", "description": "Dropdown list", "details": {"Label": "sremo", "Helper text": "select your sRemo which is registered in sCloud", "Slug": "sremo", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Signal number\nDropdown list", "description": "Dropdown list", "details": {"Label": "signal number", "Helper text": "select 1 - 141 number of sRemo signal", "Slug": "signal_number", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Monday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Thursday\") {\n  SRemo.sendSignalS.skip(\"Not the chosen day of the week.\");\n} else if (DateAndTime.everyWeekdayAt.CheckTime.indexOf(\"08:00\") === -1) {\n  SRemo.sendSignalS.skip(\"Not the chosen time of day.\");\n} else {\n  SRemo.sendSignalS.setSremo(\"Office\");\n  SRemo.sendSignalS.setSignalNumber(53);\n}", "intent": "Send a signal number 53 to my Office sRemo every Monday and Thursday at 08:00."}
{"original_description": "When specific person unlocks the door then control Nexus Home AC", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked_by_specific_person"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Which person\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which person?", "Helper text": "Enter the first name and last name of the person as it appears on the guest list in your August app.", "Slug": "which_person", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time the lock was unlocked.", "description": "Date and time the lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlockedBySpecificPerson.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" && \n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" && \n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.acExecution.setMode(\"Cool\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n} else {\n  BrilliantNexus.acExecution.skip(\"Conditions not met.\");\n}", "intent": "When John Smith unlocks the Front Door of the San Diego beach house, then set the Brilliant Nexus AC device named \"Living Room AC\" to Cool mode with a temperature of 22°C and a fan speed of Medium."}
{"original_description": "When some unlocks the door then set AC to Cool/Heat/Auto/Dry/Fan mode and set temperature and fan speed.", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_unlocked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Unlocked at\nDate and time lock was unlocked.", "description": "Date and time lock was unlocked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockUnlocked.UnlockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who unlocked the lock.", "description": "The user who unlocked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockUnlocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockUnlocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockUnlocked.HouseName", "Type": "String", "Example": "San Diego Beach House"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who unlocked the lock.", "description": "An image url to the profile photo of the user who unlocked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockUnlocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Brilliant Nexus", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "brilliant_nexus.ACExecution", "Filter code method": "BrilliantNexus.acExecution.skip(string?: reason)", "Runtime method": "runAction(\"brilliant_nexus.ACExecution\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device Name", "Helper text": "Name of the AC device which you have created in Brilliant Nexus", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Mode", "Helper text": "Select the Mode which you want to set it too", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setMode(string: mode)"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "Set the AC temperature you want to set it for the mode", "Slug": "temperature", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setTemperature(string: temperature)"}}, {"section": "Action fields", "title": "Fan speed\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan speed", "Helper text": "set your fan speed for the AC on selected mode", "Slug": "fan_speed", "Required": "true", "Can have default value": "true", "Filter code method": "BrilliantNexus.acExecution.setFan Speed(string: fan_speed)"}}], "filter_code": "if (Augusthome.lockUnlocked.User === \"John Smith\" && Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\") {\n  BrilliantNexus.acExecution.setMode(\"Auto\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n}", "intent": "When John Smith unlocks the Front Door lock at the San Diego Beach House, then set the Living Room AC device to Auto mode with a temperature of 22°C and a fan speed of Medium."}
{"original_description": "Notify me when the false alarm detection flags over 80% of my alarm videos in my INSTAR Cloud storage.", "trigger_channel": "INSTAR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instar.falsealarm_percent"}, "trigger_details": [{"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instar.falsealarmPercent.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var falseAlarmPercent = Instar.falsealarmPercent.Value;\n  if (falseAlarmPercent > 80) {\n    IfNotifications.sendNotification.setMessage(\"High false alarm rate detected\");\n  } else {\n    IfNotifications.sendNotification.skip(\"False alarm rate is below 80%\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of notification hours (7 AM to 7 PM)\");\n}", "intent": "Notify me with a message saying \"High false alarm rate detected\" when more than 80% of my alarm videos in INSTAR Cloud storage are flagged as false alarms, and send this notification between 07:00 and 19:00 every day."}
{"original_description": "When the Litter-Robot cycles, send over the Roomba to vacuum", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.clean_by_room", "Filter code method": "Irobot.cleanByRoom.skip(string?: reason)", "Runtime method": "runAction(\"irobot.clean_by_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Room info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room would you like to clean?", "Slug": "room_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.event_type === \"Cycle Completed\") {\n  Irobot.cleanByRoom.setRoomInfo(\"Living Room\");\n} else {\n  Irobot.cleanByRoom.skip(\"Litter-Robot is not 'My Litter Robot' or event type is not 'Cycle Completed'.\");\n}", "intent": "When my Litter-Robot, named \"My Litter Robot\", cycles with the event type \"Cycle Completed\", send the Roomba to vacuum the \"Living Room\"."}
{"original_description": "This will change the WiZ light(s) of your choice to the light mode and brightness you select whenever a dishwashing cycle completes on your GE dishwasher.", "trigger_channel": "GE Appliances Dishwasher", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ge_appliances_dishwasher.dishwasher-end-of-cycle"}, "trigger_details": [{"section": "Trigger fields", "title": "Applianceid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which appliance?", "Slug": "applianceId", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Appliance\nThe appliance identifier.", "description": "The appliance identifier.", "details": {"Slug": "applianceId", "Filter code": "GeAppliancesDishwasher.dishwasherEndOfCycle.Appliance", "Type": "String", "Example": "D828C901A076"}}, {"section": "Ingredients", "title": "Event\nThe appliance event.", "description": "The appliance event.", "details": {"Slug": "event", "Filter code": "GeAppliancesDishwasher.dishwasherEndOfCycle.Event", "Type": "String", "Example": "dishwasher-end-of-cycle"}}, {"section": "Ingredients", "title": "Date and time\nThe date and time the event occurred.", "description": "The date and time the event occurred.", "details": {"Slug": "time", "Filter code": "GeAppliancesDishwasher.dishwasherEndOfCycle.DateAndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (GeAppliancesDishwasher.dishwasherEndOfCycle.Appliance === \"D828C901A076\" && GeAppliancesDishwasher.dishwasherEndOfCycle.Event === \"dishwasher-end-of-cycle\") {\n  Wiz.turnOn.setEntity(\"Living Room\");\n  Wiz.turnOn.setMode(\"Warm White\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}", "intent": "When the GE dishwasher with appliance ID D828C901A076 completes a dishwashing cycle, as indicated by the \"dishwasher-end-of-cycle\" event at any time, turn on the WiZ light in the \"Living Room\" entity, setting it to \"Warm White\" mode and adjusting the dimming to 75%."}
{"original_description": "Notify me when the number of new alarms in the INSTAR Cloud is over the number specified above.", "trigger_channel": "INSTAR", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instar.new_alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Quantity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Alarms Quantity", "Slug": "quantity", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instar.newAlarm.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_notification", "Filter code method": "IfNotifications.sendNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendNotification.setMessage(string: message)"}}], "filter_code": "var hour = Instar.newAlarm.CreatedAt.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Instar.newAlarm.Quantity > 5) {\n    IfNotifications.sendNotification.setMessage(\"New Alarms Detected\");\n  } else {\n    IfNotifications.sendNotification.skip(\"Number of new alarms is not over 5.\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of specified hours (7 AM to 7 PM).\");\n}", "intent": "Notify me with a message saying \"New Alarms Detected\" when the number of new alarms in the INSTAR Cloud exceeds 5, for events created between 07:00 and 19:00, by sending a notification through the Notifications channel."}
{"original_description": "Press the iH button on your iHome device to set your Nest Temperature.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Wrong button pressed\");\n}", "intent": "When the \"iH\" button on your iHome device is pressed, set the temperature of your Nest Thermostat in the living room to 22 degrees Celsius."}
{"original_description": "Press the iH button on your iHome device to turn OFF Lifx Lights.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.turn_off", "Filter code method": "Lifx.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"lifx.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Selector\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "selector", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fade out duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fade out duration", "Helper text": "How long should it take for the lights to fade out.", "Slug": "fade_out_duration", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want a custom fade out duration? Set it here. Example: &quot;fade_out_duration: 7200&quot; for 2 hours. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.turnOff.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Lifx.turnOff.setSelector(\"all\");\n  Lifx.turnOff.setFadeOutDuration(1);\n}", "intent": "When the \"iH\" button on your iHome device is pressed, turn off all Lifx Lights with a fade out duration of 1 second."}
{"original_description": "Press the iH button on your iHome device to set a Lutron brightness level.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_light_level", "Filter code method": "LutronCasetaWireless.setLightLevel.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_light_level\", {})"}, "action_details": [{"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light?", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Level\nDropdown list", "description": "Dropdown list", "details": {"Label": "Set light level", "Slug": "level", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  LutronCasetaWireless.setLightLevel.setZone(\"Living Room\");\n  LutronCasetaWireless.setLightLevel.setLevel(75);\n}", "intent": "When the \"iH\" button on your iHome device is pressed, set the living room lights to 75% brightness using Lutron Caséta."}
{"original_description": "Press the iH button on your iHome device to turn OFF a Leviton room", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.toggle_room_off", "Filter code method": "MyLeviton.toggleRoomOff.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.toggle_room_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\" && IhomeEnhance.enhanceButton.Press === \"Long\") {\n  MyLeviton.toggleRoomOff.setRoomName(\"Living Room\");\n} else {\n  MyLeviton.toggleRoomOff.skip(\"Conditions not met to turn off the Living Room.\");\n}", "intent": "When the \"iH\" button on your iHome device is pressed, specifically a long press, turn OFF the \"Living Room\" in your Leviton setup."}
{"original_description": "Press the iH button on your iHome device to begin Lifx scene.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "LIFX", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lifx.activate_scene", "Filter code method": "Lifx.activateScene.skip(string?: reason)", "Runtime method": "runAction(\"lifx.activate_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Scene", "Helper text": "The Scene you'd like to activate", "Slug": "scene", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Want to set a custom duration? Specify it here. Example: &quot;transition_duration: 5&quot; for a 5 second transition duration. <a href=\"https://support.lifx.com/hc/en-us/articles/204881760\" target=\"_blank\">More info</a>", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Lifx.activateScene.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Lifx.activateScene.setAdvancedOptions(\"transition_duration: 2\");\n  Lifx.activateScene({\"scene\": \"Relax\"});\n}", "intent": "When the \"iH\" button on your iHome device is pressed, activate the \"Relax\" scene on LIFX with a transition duration of 2 seconds."}
{"original_description": "Press the iH button on your iHome device to set a Lutron shade level.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Lutron Caséta and RA2 Select", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lutron_caseta_wireless.set_shade_position", "Filter code method": "LutronCasetaWireless.setShadePosition.skip(string?: reason)", "Runtime method": "runAction(\"lutron_caseta_wireless.set_shade_position\", {})"}, "action_details": [{"section": "Action fields", "title": "Shade\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which shade?", "Slug": "shade", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Position\nDropdown list", "description": "Dropdown list", "details": {"Label": "Set shade position", "Slug": "position", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  LutronCasetaWireless.setShadePosition.setShade(\"Living Room Shade\");\n  LutronCasetaWireless.setShadePosition.setPosition(50);\n} else {\n  LutronCasetaWireless.setShadePosition.skip(\"Incorrect button pressed\");\n}", "intent": "When the \"iH\" button on your iHome device is pressed, set the \"Living Room Shade\" in Lutron Caséta to 50% open."}
{"original_description": "Open garage door when iHome button is pressed", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "Garadget", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "garadget.open_door", "Filter code method": "Garadget.openDoor.skip(string?: reason)", "Runtime method": "runAction(\"garadget.open_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which door?", "Helper text": "Please identify which door in your account you want to open", "Slug": "door_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = IhomeEnhance.enhanceButton.Time.hour();\nvar buttonName = IhomeEnhance.enhanceButton.ButtonName;\nvar pressType = \"Long Press\"; // Assuming Long Press is the value for long press in the 'press' ingredient\n\nif (buttonName === \"iHome Smart Button\" && pressType === \"Long Press\" && hour >= 7 && hour < 19) {\n  Garadget.openDoor.setDoorId(\"main_garage_door\");\n} else {\n  Garadget.openDoor.skip(\"Conditions not met to open the main garage door.\");\n}", "intent": "Open the main garage door when the iHome Smart Button is pressed with a long press between 07:00 and 19:00."}
{"original_description": "Press the iH button on your iHome device to begin Leviton scene.", "trigger_channel": "iHome Enhance", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ihome_enhance.enhance_button"}, "trigger_details": [{"section": "Trigger fields", "title": "Button name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Button Name", "Slug": "button_name", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Press\nDropdown list", "description": "Dropdown list", "details": {"Label": "Short or Long Press", "Slug": "press", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "IhomeEnhance.enhanceButton.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Button name\nThis the name of the iHome Enhance Button as defined in your mobile app.", "description": "This the name of the iHome Enhance Button as defined in your mobile app.", "details": {"Slug": "button_name", "Filter code": "IhomeEnhance.enhanceButton.ButtonName", "Type": "String", "Example": "iBT297 Smart Button"}}, {"section": "Ingredients", "title": "Time\nTime that event was created", "description": "Time that event was created", "details": {"Slug": "time", "Filter code": "IhomeEnhance.enhanceButton.Time", "Type": "String", "Example": "04:47:33 PM"}}], "action_channel": "My Leviton", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "my_leviton.run_scene", "Filter code method": "MyLeviton.runScene.skip(string?: reason)", "Runtime method": "runAction(\"my_leviton.run_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iHome Button\" && IhomeEnhance.enhanceButton.press === \"Long Press\") {\n  MyLeviton.runScene.setname(\"Welcome Home\");\n} else {\n  MyLeviton.runScene.skip(\"Incorrect button or press type.\");\n}", "intent": "When the \"iHome Button\" on the iHome device is pressed with a long press, start the Leviton scene named \"Welcome Home\"."}
{"original_description": "Changes Hubitat's mode when Flic is clicked, double clicked, or held.", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Flic.click.ButtonUuid === \"Home Button\" && Flic.click.ClickType === \"double_click\" && Meta.currentUserTime.hour() >= 7 && Meta.currentUserTime.hour() < 19 && Flic.click.Longitude === \"18.0649000\" && Flic.click.Latitude === \"59.3325800\") {\n  Hubitat.actionMode.setMode(\"Away\");\n} else {\n  Hubitat.actionMode.skip(\"Conditions not met.\");\n}", "intent": "When the Flic button named \"Home Button\" is double clicked between 07:00 and 19:00, change Hubitat's mode to \"Away\" if the click occurs at a location with longitude 18.0649000 and latitude 59.3325800."}
{"original_description": "Starte in COQON ein Programm oder eine Szene wenn in deinem Google Kalender ein Eintrag endet.", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_ends"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchEnds.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchEnds.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchEnds.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Start time\nDate and time the event started.", "description": "Date and time the event started.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchEnds.StartTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "End time\nDate and time the event ended.", "description": "Date and time the event ended.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchEnds.EndTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchEnds.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchEnds.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "coqon", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "coqon.simple_rule_action", "Filter code method": "Coqon.simpleRuleAction.skip(string?: reason)", "Runtime method": "runAction(\"coqon.simple_rule_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Action code\nText input > Other", "description": "Text input > Other", "details": {"Label": "action_code", "Helper text": "The code provided by the coqon rule, associating the action to the rule.", "Slug": "action_code", "Required": "true", "Can have default value": "true"}}], "filter_code": "if (GoogleCalendar.eventFromSearchEnds.Title === \"Team Meeting\" \n    && GoogleCalendar.eventFromSearchEnds.Description.includes(\"URGENT\") \n    && GoogleCalendar.eventFromSearchEnds.Where === \"Conference Room\") {\n  Coqon.simpleRuleAction.setActionCode(\"Morning Routine\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Event does not match the specified criteria.\");\n}", "intent": "Start the \"Morning Routine\" program in COQON when an event titled \"Team Meeting\" ends in my primary Google Calendar, given that the event description contains the keyword \"URGENT\" and its location is set to \"Conference Room\"."}
{"original_description": "This will turn on the WiZ lights of your choice in the mode and brightness you defined whenever Aura detects motion.", "trigger_channel": "Aura", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "aura.motion"}, "trigger_details": [{"section": "Trigger fields", "title": "Serial\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select your hub", "Helper text": "The serial number is located at the back of your hub", "Slug": "serial", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Aura.motion.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  var entity = \"Living Room\";\n  var mode = \"Warm White\";\n  var dimming = \"75%\";\n  Wiz.turnOn.setEntity(entity);\n  Wiz.turnOn.setMode(mode);\n  Wiz.turnOn.setDimming(dimming);\n} else {\n  Wiz.turnOn.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}", "intent": "Turn on the WiZ lights in the Living Room to Warm White mode with 75% brightness whenever Aura detects motion between 07:00 and 22:00."}
{"original_description": "Send automated birthday wishes via phone call. Better than E-Mail :-)", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_year_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Datetime\nText input", "description": "Text input", "details": {"Label": "Date and time", "Slug": "datetime", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyYearOn.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "if (DateAndTime.everyYearOn.CheckTime === \"August 23 at 11:01PM\") {\n  Woopla.ttsCall.setTts(\"Happy Birthday, have a wonderful day!\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"It's not the birthday.\");\n}", "intent": "Send an automated birthday wish phone call with the text \"Happy Birthday, have a wonderful day!\" in English to the recipient every year on August 23rd at 11:01 PM."}
{"original_description": "In addition to your LifeShield alarm siren, you can blink the Hue lights as a visual alert when an alarm is going off. You may select a specific alarm type or all alarm events. For all alarm events, specify '(All)' for the Event Type. Next, select by name which Hue lights to blink. ", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.alarm"}, "trigger_details": [{"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type?", "Slug": "event_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time alarm occurred.", "description": "Date and time alarm occurred.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.alarm.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of alarm that occurred.", "description": "The EventType describes the type of alarm that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.alarm.EventType", "Type": "String", "Example": "Fire"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.alarm.FormattedMessage", "Type": "String", "Example": "Medical Alarm"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.blink_all_hue", "Filter code method": "Hue.blinkAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.blink_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Bluebyadt.alarm.EventType !== \"Fire\") {\n  Hue.blinkAllHue.skip(\"Not a fire alarm event.\");\n} else if (PhilipsHue.getLightsByName(\"Living Room\").length === 0) {\n  Hue.blinkAllHue.skip(\"No Living Room lights found.\");\n} else {\n  var livingRoomLights = PhilipsHue.getLightsByName(\"Living Room\");\n  for (var i = 0; i < livingRoomLights.length; i++) {\n    Hue.blinkLight(livingRoomLights[i].id);\n  }\n}", "intent": "When a Fire alarm event occurs on the Blue by ADT system, blink all the Living Room Hue lights to serve as a visual alert."}
{"original_description": "Open curtains everyday at 6am 5 minutes before you wake up in the morning", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "OSUM SMART", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "osumsmart.open", "Filter code method": "Osumsmart.open.skip(string?: reason)", "Runtime method": "runAction(\"osumsmart.open\", {})"}, "action_details": [{"section": "Action fields", "title": "Device list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Devices", "Helper text": "Device to operate", "Slug": "device_list", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"5:55 AM\";\nif (currentTime.hour() === 5 && currentTime.minute() === 55) {\n  Osumsmart.open.setDeviceList([\"Living Room Curtains\"]);\n} else {\n  Osumsmart.open.skip(\"Not the scheduled time for opening curtains.\");\n}", "intent": "Open the curtains every day at 5:55am using the OSUM SMART device named \"Living Room Curtains\"."}
{"original_description": "Play Stream", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_stream", "Filter code method": "Sonos.playStream.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_stream\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "What do you want to play?", "Helper text": "Enter the URL of the audio stream you want to play", "Slug": "url", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setUrl(string: url)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Name\nText input > Title", "description": "Text input > Title", "details": {"Label": "What name do you want to show for this stream?", "Slug": "name", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setName(string: name)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "What image do you want to show for this stream?", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.playStream.setImage Url(string: image_url)"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playStream.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n  Sonos.playStream.setUrl(\"https://example.com/radio_stream.mp3\");\n  Sonos.playStream.setName(\"Morning Radio\");\n  Sonos.playStream.setImageUrl(\"https://example.com/morning_radio.jpg\");\n  Sonos.playStream.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playStream.skip(\"Invalid device or gesture.\");\n}", "intent": "Play a stream from the URL https://example.com/radio_stream.mp3 on the Sonos device in the Living Room, with the name \"Morning Radio\" and image https://example.com/morning_radio.jpg, including grouped rooms, when a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088."}
{"original_description": "Press this button to buy/sell stocks. You can customize which stock to buy or sell and set the quantity.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Alpaca", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "alpaca.place_market_order", "Filter code method": "Alpaca.placeMarketOrder.skip(string?: reason)", "Runtime method": "runAction(\"alpaca.place_market_order\", {})"}, "action_details": [{"section": "Action fields", "title": "Symbol\nText input > Title", "description": "Text input > Title", "details": {"Label": "Symbol", "Helper text": "The symbol to place the order for.", "Slug": "symbol", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSymbol(string: symbol)"}}, {"section": "Action fields", "title": "Side\nDropdown list", "description": "Dropdown list", "details": {"Label": "Side", "Helper text": "The side to place the order for.", "Slug": "side", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setSide(string: side)"}}, {"section": "Action fields", "title": "Qty\nText input > Title", "description": "Text input > Title", "details": {"Label": "Quantity", "Helper text": "The number of shares to place the order for.", "Slug": "qty", "Required": "true", "Can have default value": "true", "Filter code method": "Alpaca.placeMarketOrder.setQty(string: qty)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Alpaca.placeMarketOrder.setSymbol(\"AAPL\");\n  Alpaca.placeMarketOrder.setSide(\"buy\");\n  Alpaca.placeMarketOrder.setQty(\"10\");\n} else {\n  Alpaca.placeMarketOrder.skip(\"Location does not match the specified coordinates.\");\n}", "intent": "When the button is pressed at a location with latitude 37.8267 and longitude -122.4230, buy 10 shares of Apple stock (AAPL) immediately."}
{"original_description": "Turn off your lights when it is time for bed", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 22 && minute === 0) {\n  // No skip, proceed with turning off\n} else {\n  Kasa.turnOff.skip(\"Not 10:00 PM\");\n}", "intent": "Turn off the Living Room Lamp at 10:00 PM every day."}
{"original_description": "When your August lock is engaged, your Blink System is armed", "trigger_channel": "August", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "augusthome.lock_locked"}, "trigger_details": [{"section": "Trigger fields", "title": "Which lock\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lock?", "Helper text": "Format w/ house name and lock name", "Slug": "which_lock", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Locked at\nDate and time lock was locked.", "description": "Date and time lock was locked.", "details": {"Slug": "created_at", "Filter code": "Augusthome.lockLocked.LockedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "User\nThe user who locked the lock.", "description": "The user who locked the lock.", "details": {"Slug": "user", "Filter code": "Augusthome.lockLocked.User", "Type": "String", "Example": "John Smith"}}, {"section": "Ingredients", "title": "Lock name\nThe name of the lock.", "description": "The name of the lock.", "details": {"Slug": "lock_name", "Filter code": "Augusthome.lockLocked.LockName", "Type": "String", "Example": "Front Door"}}, {"section": "Ingredients", "title": "House name\nThe name of the house associated with the lock.", "description": "The name of the house associated with the lock.", "details": {"Slug": "house_name", "Filter code": "Augusthome.lockLocked.HouseName", "Type": "String", "Example": "San Diego beach house"}}, {"section": "Ingredients", "title": "User photo\nAn image url to the profile photo of the user who locked the lock.", "description": "An image url to the profile photo of the user who locked the lock.", "details": {"Slug": "user_photo", "Filter code": "Augusthome.lockLocked.UserPhoto", "Type": "Image URL", "Example": "blah.com"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  Blink.networkArm.setNetwork(\"Home\");\n} else {\n  Blink.networkArm.skip(\"Lock engagement does not match specified conditions.\");\n}", "intent": "When the Front Door lock at my San Diego beach house is engaged by John Smith, arm my Blink System on the Home network."}
{"original_description": "Collect all your Reddit upvotes to Histre to bookmark them and use them for improving your recommendations.", "trigger_channel": "Reddit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "reddit.new_dislike_by_you_reddit"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nTitle of this post.", "description": "Title of this post.", "details": {"Slug": "Title", "Filter code": "Reddit.newDislikeByYouReddit.Title", "Type": "String", "Example": "Little Bobby Tables!"}}, {"section": "Ingredients", "title": "Image url\nURL to the post's image if one exists.", "description": "URL to the post's image if one exists.", "details": {"Slug": "ImageURL", "Filter code": "Reddit.newDislikeByYouReddit.ImageURL", "Type": "String", "Example": "http://imgs.xkcd.com/comics/exploits_of_a_mom.png"}}, {"section": "Ingredients", "title": "Content\nContent of this post, may be text or external link.", "description": "Content of this post, may be text or external link.", "details": {"Slug": "Content", "Filter code": "Reddit.newDislikeByYouReddit.Content", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Content html\nContent of this post in HTML.", "description": "Content of this post in HTML.", "details": {"Slug": "ContentHTML", "Filter code": "Reddit.newDislikeByYouReddit.ContentHTML", "Type": "String", "Example": "http://xkcd.com/327"}}, {"section": "Ingredients", "title": "Post url\nURL to this post on reddit.", "description": "URL to this post on reddit.", "details": {"Slug": "PostURL", "Filter code": "Reddit.newDislikeByYouReddit.PostURL", "Type": "String", "Example": "http://www.reddit.com/r/ProgrammerHumor/comments/16dazp/little_bobby_tables_xkcd/"}}, {"section": "Ingredients", "title": "Subreddit\nName of the subreddit where this item was posted.", "description": "Name of the subreddit where this item was posted.", "details": {"Slug": "Subreddit", "Filter code": "Reddit.newDislikeByYouReddit.Subreddit", "Type": "String", "Example": "ifttt"}}, {"section": "Ingredients", "title": "Author\nUsername of this post's author.", "description": "Username of this post's author.", "details": {"Slug": "Author", "Filter code": "Reddit.newDislikeByYouReddit.Author", "Type": "String", "Example": "ltibbets"}}, {"section": "Ingredients", "title": "Posted at\nDate this post was posted.", "description": "Date this post was posted.", "details": {"Slug": "PostedAt", "Filter code": "Reddit.newDislikeByYouReddit.PostedAt", "Type": "String", "Example": "August 23, 2013 at 05:00PM"}}], "action_channel": "Histre", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "histre.add_note", "Filter code method": "Histre.addNote.skip(string?: reason)", "Runtime method": "runAction(\"histre.add_note\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setUrl(string: url)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setNote(string: note)"}}], "filter_code": "if (Reddit.newUpvoteByYouReddit.Subreddit === \"learnprogramming\" \n    && Reddit.newUpvoteByYouReddit.Title.includes(\"Python\") \n    && Reddit.newUpvoteByYouReddit.NumComments > 100) {\n  Histre.addNote.setUrl(Reddit.newUpvoteByYouReddit.PostURL);\n  Histre.addNote.setTitle(\"Useful Python Resource\");\n  Histre.addNote.setNote(Reddit.newUpvoteByYouReddit.Content);\n} else {\n  Histre.addNote.skip(\"Does not match the criteria.\");\n}", "intent": "When I upvote a post on the r/learnprogramming subreddit with the keyword \"Python\" in the title, and the post has more than 100 comments, add a new note to Histre with the post's URL, titled \"Useful Python Resource\", and include the post's content in the note."}
{"original_description": "Save energy by making sure that your hue lights are off at midnight each night.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar midnight = \"12:00 AM\";\nif (checkTime.includes(midnight)) {\n  Hue.turnOffAllHue.skip(\"Midnight, turning off all Hue lights.\");\n}", "intent": "Turn off all Philips Hue lights every day at midnight."}
{"original_description": "Use this applet to save the notes you take on Instapaper into your Histre notebook.", "trigger_channel": "Instapaper", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "instapaper.new_liked_item"}, "trigger_details": [{"section": "Ingredients", "title": "Title\nThe title of the liked item.", "description": "The title of the liked item.", "details": {"Slug": "title", "Filter code": "Instapaper.newLikedItem.Title", "Type": "String", "Example": "The Computer for the 21st Century"}}, {"section": "Ingredients", "title": "Description\nThe description of the liked item.", "description": "The description of the liked item.", "details": {"Slug": "description", "Filter code": "Instapaper.newLikedItem.Description", "Type": "String", "Example": "The most profound technologies are those that disappear. They weave themselves into the fabric of everyday life until they are indistinguishable from it. Consider writing, perhaps the first information..."}}, {"section": "Ingredients", "title": "Url\nThe URL of the liked item.", "description": "The URL of the liked item.", "details": {"Slug": "url", "Filter code": "Instapaper.newLikedItem.URL", "Type": "Web URL", "Example": "http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Instapaper.newLikedItem.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Histre", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "histre.add_note", "Filter code method": "Histre.addNote.skip(string?: reason)", "Runtime method": "runAction(\"histre.add_note\", {})"}, "action_details": [{"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "URL", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setUrl(string: url)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setTitle(string: title)"}}, {"section": "Action fields", "title": "Note\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Note", "Slug": "note", "Required": "false", "Can have default value": "true", "Filter code method": "Histre.addNote.setNote(string: note)"}}], "filter_code": "if (Instapaper.newLikedItem.Title.includes(\"The Computer for the 21st Century\") && (Instapaper.newLikedItem.Description.includes(\"technology\") || Instapaper.newLikedItem.Description.includes(\"innovation\"))) {\n  var noteTitle = \"Instapaper Liked Item - \" + Instapaper.newLikedItem.Title;\n  var noteText = Instapaper.newLikedItem.URL + \"\\n\" + Instapaper.newLikedItem.Description.substring(0, 50) + \"...\";\n  Histre.addNote.setTitle(noteTitle);\n  Histre.addNote.setUrl(Instapaper.newLikedItem.URL);\n  Histre.addNote.setNote(noteText);\n} else {\n  Histre.addNote.skip(\"Does not match the desired title or description.\");\n}", "intent": "When a new item is liked on Instapaper with a title like \"The Computer for the 21st Century\" and a description containing keywords like \"technology\" or \"innovation\", save it to Histre notebook as a new note titled \"Instapaper Liked Item - The Computer for the 21st Century\" with the note text including the item's URL http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html and a brief summary of the description, such as \"The most profound technologies are those that disappear.\""}
{"original_description": "When your Blue by ADT system is armed away, pause a Sonos stream. You must specify where to pause it.\n", "trigger_channel": "Blue by ADT", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "bluebyadt.arm_state_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Arm type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Arm Type?", "Slug": "arm_type", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "timestamp", "Filter code": "Bluebyadt.armStateChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event type\nThe EventType describes the type of event that occurred.", "description": "The EventType describes the type of event that occurred.", "details": {"Slug": "event_type", "Filter code": "Bluebyadt.armStateChange.EventType", "Type": "String", "Example": "System Disarmed"}}, {"section": "Ingredients", "title": "Formatted message\nThe FormattedMessage provides a user-friendly description of the event", "description": "The FormattedMessage provides a user-friendly description of the event", "details": {"Slug": "formatted_message", "Filter code": "Bluebyadt.armStateChange.FormattedMessage", "Type": "String", "Example": "Disarmed"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  Sonos.pause.setRoom(\"Living Room\");\n  Sonos.pause.setIncludeGroupedRooms(\"false\");\n  Sonos.pause.skip(\"Blue by ADT system is armed away.\");\n}", "intent": "When the Blue by ADT system is armed away, pause the Sonos stream in the Living Room and do not include grouped rooms."}
{"original_description": "Set an everyday cleaning cycle for your Neato Robot using your calendar", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "Neato", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "neato.start_cleaning", "Filter code method": "Neato.startCleaning.skip(string?: reason)", "Runtime method": "runAction(\"neato.start_cleaning\", {})"}, "action_details": [{"section": "Action fields", "title": "Select a robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select a robot", "Slug": "select_a_robot", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() !== 8 || DateAndTime.everyWeekdayAt.DayOfWeek === \"Saturday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Sunday\") {\n  Neato.startCleaning.skip(\"Not a weekday or not 8:00 AM\");\n} else {\n  Neato.startCleaning.setSelectARobot(\"Living Room Bot\");\n}", "intent": "Set the Neato Robot to start cleaning every weekday at 8:00 AM, using the robot named \"Living Room Bot\", to maintain a tidy space during the workweek."}
{"original_description": "Tell Ambi Climate you're feeling comfortable via button, either through your mobile or smart watch.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.feedback", "Filter code method": "Ambiclimate.feedback.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.feedback\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Feedback\nDropdown list", "description": "Dropdown list", "details": {"Label": "feedback", "Slug": "feedback", "Required": "true", "Can have default value": "true", "Filter code method": "Ambiclimate.feedback.setFeedback(string: feedback)"}}], "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Ambiclimate.feedback.setFeedback(\"comfortable\");\n  Ambiclimate.feedback.setDeviceName(\"Living Room\");\n} else {\n  Ambiclimate.feedback.skip(\"Location does not match.\");\n}", "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, tell Ambi Climate that you're feeling comfortable on your Living Room device."}
{"original_description": "Whenever you \"Share\" something via Pocket, it'll go straight to your Buffer Queue.", "trigger_channel": "Pocket", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "pocket.new_tagged_item_pocket"}, "trigger_details": [{"section": "Trigger fields", "title": "Tag\nText input > Other", "description": "Text input > Other", "details": {"Label": "Single tag", "Slug": "tag", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe item's title.", "description": "The item's title.", "details": {"Slug": "Title", "Filter code": "Pocket.newTaggedItemPocket.Title", "Type": "String", "Example": "My first blog post"}}, {"section": "Ingredients", "title": "Url\nThe item's URL.", "description": "The item's URL.", "details": {"Slug": "Url", "Filter code": "Pocket.newTaggedItemPocket.Url", "Type": "String", "Example": "http://blog.ifttt.com"}}, {"section": "Ingredients", "title": "Excerpt\nThe item's excerpt.", "description": "The item's excerpt.", "details": {"Slug": "Excerpt", "Filter code": "Pocket.newTaggedItemPocket.Excerpt", "Type": "String", "Example": "This is an article about something cool."}}, {"section": "Ingredients", "title": "Image url\nA URL to this item's image.", "description": "A URL to this item's image.", "details": {"Slug": "ImageUrl", "Filter code": "Pocket.newTaggedItemPocket.ImageUrl", "Type": "String", "Example": "http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg"}}, {"section": "Ingredients", "title": "Tags\nThe item's tags, comma separated.", "description": "The item's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Pocket.newTaggedItemPocket.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Added at\nDate and time item was added.", "description": "Date and time item was added.", "details": {"Slug": "AddedAt", "Filter code": "Pocket.newTaggedItemPocket.AddedAt", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Buffer", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "buffer.add_to_buffer", "Filter code method": "Buffer.addToBuffer.skip(string?: reason)", "Runtime method": "runAction(\"buffer.add_to_buffer\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Update", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "Buffer.addToBuffer.setMessage(string: message)"}}], "filter_code": "if (Pocket.newTaggedItemPocket.Tags.includes(\"readlater\")) {\n  var hour = Meta.currentUserTime.hour();\n  if (hour >= 8 && hour < 17) {\n    var message = Pocket.newTaggedItemPocket.Title + \" - \" + Pocket.newTaggedItemPocket.Url;\n    if (Pocket.newTaggedItemPocket.Excerpt !== \"\") {\n      message += \"\\n\" + Pocket.newTaggedItemPocket.Excerpt;\n    }\n    Buffer.addToBuffer.setMessage(message);\n    if (Pocket.newTaggedItemPocket.ImageUrl !== \"\") {\n      // Note: The provided JSON does not include a method for setting an image in the Buffer action.\n      // This would typically be done with something like Buffer.addToBuffer.setImage(Pocket.newTaggedItemPocket.ImageUrl);\n      // However, since this is not available in the given data, it's commented out here.\n    }\n  } else {\n    Buffer.addToBuffer.skip(\"Not within posting hours (08:00-17:00).\");\n  }\n} else {\n  Buffer.addToBuffer.skip(\"Item not tagged with 'readlater'.\");\n}", "intent": "When a new item is tagged with \"readlater\" in Pocket, add the item's title, URL, and excerpt to Buffer as a new update, including an image if available, and schedule it to post between 08:00 and 17:00."}
{"original_description": "Tell Ambi Climate you're feeling cold via button, either through your mobile or smart watch.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.feedback", "Filter code method": "Ambiclimate.feedback.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.feedback\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Feedback\nDropdown list", "description": "Dropdown list", "details": {"Label": "feedback", "Slug": "feedback", "Required": "true", "Can have default value": "true", "Filter code method": "Ambiclimate.feedback.setFeedback(string: feedback)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour <= 22 && \n    Math.abs(latitude - 37.8267) < 0.001 && \n    Math.abs(longitude - (-122.4230)) < 0.001) {\n  Ambiclimate.feedback.setFeedback(\"cold\");\n  Ambiclimate.feedback.setDeviceName(\"Living Room Thermostat\");\n} else {\n  Ambiclimate.feedback.skip(\"Outside of specified location or time.\");\n}", "intent": "When the button is pressed on the mobile or smart watch at a location like 37.8267, -122.4230, between 07:00 and 22:00, tell Ambi Climate that you're feeling cold by sending feedback from your \"Living Room Thermostat\" device."}
{"original_description": "Tell Ambi Climate you're feeling hot via button, either through your mobile or smart watch.", "trigger_channel": "Button widget", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "do_button.do_button_new_command_common"}, "trigger_details": [{"section": "Ingredients", "title": "Share url\nThe link to the Share page for the button press.", "description": "The link to the Share page for the button press.", "details": {"Slug": "ShareURL", "Filter code": "DoButton.doButtonNewCommandCommon.ShareURL", "Type": "String", "Example": "https://ifttt.com/share/McFwJfDH9Ns"}}, {"section": "Ingredients", "title": "Latitude\nThe latitude of the location of the button press.", "description": "The latitude of the location of the button press.", "details": {"Slug": "Latitude", "Filter code": "DoButton.doButtonNewCommandCommon.Latitude", "Type": "String", "Example": "37.82666360000001"}}, {"section": "Ingredients", "title": "Longitude\nThe longitude of the location of the button press.", "description": "The longitude of the location of the button press.", "details": {"Slug": "Longitude", "Filter code": "DoButton.doButtonNewCommandCommon.Longitude", "Type": "String", "Example": "-122.42301220000003"}}, {"section": "Ingredients", "title": "Location map url\nThe link to the map of the location of the button press.", "description": "The link to the map of the location of the button press.", "details": {"Slug": "LocationMapURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapURL", "Type": "String", "Example": "https://maps.google.com/?ll=37.78308,-122.417236667&z=21"}}, {"section": "Ingredients", "title": "Location map image url\nThe image of the map of the location of the button press.", "description": "The image of the map of the location of the button press.", "details": {"Slug": "LocationMapImageURL", "Filter code": "DoButton.doButtonNewCommandCommon.LocationMapImageURL", "Type": "String", "Example": "http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667"}}, {"section": "Ingredients", "title": "Occurred at\nThe date and time you pressed the button.", "description": "The date and time you pressed the button.", "details": {"Slug": "OccurredAt", "Filter code": "DoButton.doButtonNewCommandCommon.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Ambi Climate", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ambiclimate.feedback", "Filter code method": "Ambiclimate.feedback.skip(string?: reason)", "Runtime method": "runAction(\"ambiclimate.feedback\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Feedback\nDropdown list", "description": "Dropdown list", "details": {"Label": "feedback", "Slug": "feedback", "Required": "true", "Can have default value": "true", "Filter code method": "Ambiclimate.feedback.setFeedback(string: feedback)"}}], "filter_code": "Ambiclimate.feedback.setDeviceName(\"Living Room AC\");\nAmbiclimate.feedback.setFeedback(\"hot\");", "intent": "When the button is pressed on the mobile or smart watch at a location like 37.8267, -122.4230, tell Ambi Climate that you're feeling hot using the \"Living Room AC\" device."}
{"original_description": "Volume Down", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.decrease_volume", "Filter code method": "Sonos.decreaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.decrease_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.decreaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.decreaseVolume.setRoom(\"Living Room\");\n  Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n}", "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, decrease the volume in the Living Room and include grouped rooms."}
{"original_description": "Configure a Nexia automation to run when my child arrives at home.", "trigger_channel": "dondeEsta Family", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "dondeesta.kid_arrived_at_home"}, "trigger_details": [{"section": "Ingredients", "title": "Name\nName of the kid arriving at home.", "description": "Name of the kid arriving at home.", "details": {"Slug": "name", "Filter code": "Dondeesta.kidArrivedAtHome.Name", "Type": "String", "Example": "John"}}, {"section": "Ingredients", "title": "Time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "time", "Filter code": "Dondeesta.kidArrivedAtHome.Time", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Nexia", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "nexia.nexia_automation"}, "action_details": [{"section": "Trigger fields", "title": "Nexia automation\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which automation?", "Helper text": "This automation must be configured in Nexia to have &quot;Notify IFTTT&quot; as it's action.", "Slug": "nexia_automation", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Nexia.nexiaAutomation.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Nexia automation name\nThe name of your Nexia automation", "description": "The name of your Nexia automation", "details": {"Slug": "nexia_automation_name", "Filter code": "Nexia.nexiaAutomation.NexiaAutomationName", "Type": "String", "Example": "\"My First Automation\""}}, {"section": "Ingredients", "title": "House name\nThe name of the house of your automation", "description": "The name of the house of your automation", "details": {"Slug": "house_name", "Filter code": "Nexia.nexiaAutomation.HouseName", "Type": "String", "Example": "\"Home\""}}], "filter_code": "if (Dondeesta.kidArrivedAtHome.Name === \"John\" && Nexia.nexiaAutomation.NexiaAutomationName === \"Welcome Home\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n  Nexia.nexiaAutomation.setNexiaAutomation(\"Welcome Home\");\n} else {\n  Nexia.nexiaAutomation.skip(\"Conditions not met for running 'Welcome Home' automation.\");\n}", "intent": "Run my Nexia automation named \"Welcome Home\" when my child, John, arrives at our house called \"Home\", triggering the pre-configured \"Notify IFTTT\" action in Nexia."}
{"original_description": "Save £1 every time you achieve your calorie goals on Fitbit", "trigger_channel": "Fitbit", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "fitbit.daily-calorie-burn-goal"}, "trigger_details": [{"section": "Ingredients", "title": "Calorie burn goal\nYour daily calorie burn goal", "description": "Your daily calorie burn goal", "details": {"Slug": "CalorieBurnGoal", "Filter code": "Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal", "Type": "String", "Example": "2000"}}, {"section": "Ingredients", "title": "Calories burned\nNumber of calories burned", "description": "Number of calories burned", "details": {"Slug": "CaloriesBurned", "Filter code": "Fitbit.dailyCalorieBurnGoal.CaloriesBurned", "Type": "String", "Example": "2123"}}, {"section": "Ingredients", "title": "Date achieved\nDate you achieved your calorie burn goal", "description": "Date you achieved your calorie burn goal", "details": {"Slug": "DateAchieved", "Filter code": "Fitbit.dailyCalorieBurnGoal.DateAchieved", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}], "action_channel": "Dozens", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "dozens.save", "Filter code method": "Dozens.save.skip(string?: reason)", "Runtime method": "runAction(\"dozens.save\", {})"}, "action_details": [{"section": "Action fields", "title": "Amount\nDropdown list", "description": "Dropdown list", "details": {"Label": "Amount", "Helper text": "Specify amount that should be moved to savings account", "Slug": "amount", "Required": "true", "Can have default value": "true", "Filter code method": "Dozens.save.setAmount(string: amount)"}}], "filter_code": "if (Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal === \"2000\" && \n    parseInt(Fitbit.dailyCalorieBurnGoal.CaloriesBurned) >= 2000 && \n    Fitbit.dailyCalorieBurnGoal.DateAchieved === Meta.currentUserTime.toISOString().split('T')[0]) {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"Conditions not met to save £1.\");\n}", "intent": "Save £1 to your Dozens savings account every time you achieve your daily calorie burn goal of 2000 calories on Fitbit, where the number of calories burned is at least 2000, and the date achieved is today."}
{"original_description": "Receive an Android SMS when the Litter-Robot waste drawer is full", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Android SMS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "android_messages.send_a_message", "Filter code method": "AndroidMessages.sendAMessage.skip(string?: reason)", "Runtime method": "runAction(\"android_messages.send_a_message\", {})"}, "action_details": [{"section": "Action fields", "title": "Phone number\nText input > Other", "description": "Text input > Other", "details": {"Label": "Phone number", "Helper text": "Experiment with including or excluding the country code depending on your device and carrier settings.", "Slug": "phone_number", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Text\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "text", "Required": "true", "Can have default value": "true", "Filter code method": "AndroidMessages.sendAMessage.setText(string: text)"}}], "filter_code": "if (Whisker.lr3Events.EventType === \"Waste Drawer Full\" && Whisker.lr3Events.LitterRobotName === \"My Litter Robot\") {\n  AndroidMessages.sendAMessage.setText(\"The Litter-Robot waste drawer is full\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Event type or litter robot name does not match.\");\n}", "intent": "Send an Android SMS to phone number +1234567890 with the message \"The Litter-Robot waste drawer is full\" when the Event Type is \"Waste Drawer Full\" for the Litter-Robot named \"My Litter Robot\"."}
{"original_description": "Arms Blink Security System when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode !== \"Night\") {\n  Blink.networkDisarm.skip(\"Not arming because the mode is not 'Night'.\");\n} else {\n  Blink.networkDisarm.setNetwork(\"Home\");\n}", "intent": "Arm the Blink Security System on the \"Home\" network when the Hubitat mode changes to \"Night\"."}
{"original_description": "Arms Arlo when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.arm", "Filter code method": "Arlo.arm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode === \"Night\") {\n  Arlo.arm.setDeviceName(\"Front Door Camera\");\n} else {\n  Arlo.arm.skip(\"Not arming because Hubitat mode is not 'Night'.\");\n}", "intent": "Arm the Arlo device named \"Front Door Camera\" when the Hubitat mode changes to \"Night\"."}
{"original_description": "Disarms Blink Security System when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Blink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink.network_disarm", "Filter code method": "Blink.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode === \"Day\") {\n  Blink.networkDisarm.setNetwork(\"Home\");\n} else {\n  Blink.networkDisarm.skip(\"Not disarming because mode is not 'Day'.\");\n}", "intent": "Disarm the Blink Security System on the \"Home\" network when the Hubitat mode changes to \"Day\"."}
{"original_description": "Disarms Arlo when the Hubitat mode changes.", "trigger_channel": "Hubitat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hubitat.trigger_mode"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Mode\nThe new mode.", "description": "The new mode.", "details": {"Slug": "val", "Filter code": "Hubitat.triggerMode.Mode", "Type": "String", "Example": "Day"}}, {"section": "Ingredients", "title": "Changed at\nDate/Time the mode changed.", "description": "Date/Time the mode changed.", "details": {"Slug": "time", "Filter code": "Hubitat.triggerMode.ChangedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Arlo", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "arlo.arm", "Filter code method": "Arlo.arm.skip(string?: reason)", "Runtime method": "runAction(\"arlo.arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Hubitat.triggerMode.Mode === \"Night\") {\n  Arlo.arm.setDeviceName(\"Front Door Camera\");\n} else {\n  Arlo.arm.skip(\"Not changing to Night mode.\");\n}", "intent": "When the Hubitat mode changes to \"Night\", disarm the Arlo device named \"Front Door Camera\"."}
{"original_description": "Changes Hubitat's mode when the Scout Alarm mode changes to armed.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_armed"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Name\nName of mode.", "description": "Name of mode.", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeArmed.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeArmed.FormattedText", "Type": "String", "Example": "Dave via IFTTT armed Away mode"}}, {"section": "Ingredients", "title": "Event\nState of mode.", "description": "State of mode.", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeArmed.Event", "Type": "String", "Example": "Armed"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that triggered the mode to arm.", "description": "The name of the person or thing that triggered the mode to arm.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeArmed.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "At\nDate and time the mode was armed.", "description": "Date and time the mode was armed.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeArmed.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Scoutalarm.modeArmed.Event === \"Armed\" && Scoutalarm.modeArmed.By === \"Dave via IFTTT\") {\n  Hubitat.actionMode.setMode(\"Away\");\n}", "intent": "When the Scout Alarm mode changes to \"Armed\" and the event is triggered by \"Dave via IFTTT\" at any time, change Hubitat's mode to \"Away\"."}
{"original_description": "Sets your Blink (Europe) system to armed when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Blink (Europe)", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink_eu.network_arm", "Filter code method": "BlinkEu.networkArm.skip(string?: reason)", "Runtime method": "runAction(\"blink_eu.network_arm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to arm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"nighttime_mode\" \n    && Apilio.iftttActionReports.CreatedAt.hour() === 20 \n    && Apilio.iftttActionReports.ApilioValue1 === \"Armed\") {\n  BlinkEu.networkArm.setNetwork(\"Home Security\");\n} else {\n  BlinkEu.networkArm.skip(\"Conditions not met to arm the system.\");\n}", "intent": "When the Apilio event named \"nighttime_mode\" is triggered at 20:00 with a custom value of \"Armed\" for Apilio value1, set my Blink (Europe) system named \"Home Security\" to armed."}
{"original_description": "Pauses Sonos playback when Apilio triggers the action you specify", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6)) {\n  Sonos.pause.setRoom(\"Living Room\");\n  Sonos.pause.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.pause.skip(\"Not nighttime or wrong event.\");\n}", "intent": "Pause the Sonos playback in the Living Room when an Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, including the entire household."}
{"original_description": "Sets your Blink (Europe) system to disarmed when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Blink (Europe)", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "blink_eu.network_disarm", "Filter code method": "BlinkEu.networkDisarm.skip(string?: reason)", "Runtime method": "runAction(\"blink_eu.network_disarm\", {})"}, "action_details": [{"section": "Action fields", "title": "Network\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Helper text": "Select which system you would like to disarm.", "Slug": "network", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && \n    Apilio.iftttActionReports.ApilioValue1 === \"Green\" && \n    (hour >= 19 || hour < 7)) {\n  BlinkEu.networkDisarm.setNetwork(\"Home Security\");\n} else {\n  BlinkEu.networkDisarm.skip(\"Conditions not met.\");\n}", "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered with Value 1 set to \"Green\" and the time is between 19:00 and 07:00, disarm my Blink (Europe) system on the network labeled \"Home Security\"."}
{"original_description": "Changes Hubitat's mode when the Scout Alarm mode changes to disarmed.", "trigger_channel": "Scout Alarm", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "scoutalarm.mode_disarmed"}, "trigger_details": [{"section": "Trigger fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Slug": "mode_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Name\nName of mode.", "description": "Name of mode.", "details": {"Slug": "name", "Filter code": "Scoutalarm.modeDisarmed.Name", "Type": "String", "Example": "Away"}}, {"section": "Ingredients", "title": "Formatted text\nText shown in activity feed.", "description": "Text shown in activity feed.", "details": {"Slug": "formatted_text", "Filter code": "Scoutalarm.modeDisarmed.FormattedText", "Type": "String", "Example": "Dave via IFTTT disarmed Away mode"}}, {"section": "Ingredients", "title": "Event\nState of mode.", "description": "State of mode.", "details": {"Slug": "event", "Filter code": "Scoutalarm.modeDisarmed.Event", "Type": "String", "Example": "Armed"}}, {"section": "Ingredients", "title": "By\nThe name of the person or thing that triggered the mode to start arming.", "description": "The name of the person or thing that triggered the mode to start arming.", "details": {"Slug": "by", "Filter code": "Scoutalarm.modeDisarmed.By", "Type": "String", "Example": "Dave via IFTTT"}}, {"section": "Ingredients", "title": "At\nDate and time the mode was arming.", "description": "Date and time the mode was arming.", "details": {"Slug": "at", "Filter code": "Scoutalarm.modeDisarmed.At", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Hubitat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hubitat.action_mode", "Filter code method": "Hubitat.actionMode.skip(string?: reason)", "Runtime method": "runAction(\"hubitat.action_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which mode?", "Helper text": "The new mode.", "Slug": "mode", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Scoutalarm.modeDisarmed.Event === \"Disarmed\" && Scoutalarm.modeDisarmed.By === \"Dave via IFTTT\") {\n  Hubitat.actionMode.setMode(\"Home\");\n}", "intent": "When the Scout Alarm mode changes to disarmed, specifically when it transitions from \"Armed\" to \"Disarmed\" and the event is triggered by someone like \"Dave via IFTTT\", change Hubitat's mode to \"Home\" to ensure both systems are in sync and reflect the current security status accurately."}
{"original_description": "Plays a Sonos favorite of your choice when Apilio triggers the action you specify", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  Sonos.playFavorite.setFavorite(\"Morning Music\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Conditions not met.\");\n}", "intent": "Play the Sonos favorite named \"Morning Music\" in the room \"Living Room\" when Apilio triggers an event named \"run_only_at_nighttime\" with a value1 of \"Green\" and include grouped rooms."}
{"original_description": "Turns off the LightwaveRF light of your choice when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "LightwaveRF Lighting", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lightwaverf_lighting.switch_off_light", "Filter code method": "LightwaverfLighting.switchOffLight.skip(string?: reason)", "Runtime method": "runAction(\"lightwaverf_lighting.switch_off_light\", {})"}, "action_details": [{"section": "Action fields", "title": "Which light\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Light?", "Slug": "which_light", "Required": "true", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && apilioValue1 === \"Green\" && (hour >= 19 || hour < 7)) {\n  // No need to skip, the conditions are met for turning off the light\n} else {\n  LightwaverfLighting.switchOffLight.skip(\"Conditions not met for turning off the Living Room Lamp.\");\n}", "intent": "Turn off the Living Room Lamp light when an Apilio event named \"run_only_at_nighttime\" is received with a custom value of \"Green\" between 19:00 and 07:00."}
{"original_description": "Changes the color of the MagicHue lights you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "MagicHue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "magichue.ChangeColor", "Filter code method": "Magichue.changeColor.skip(string?: reason)", "Runtime method": "runAction(\"magichue.ChangeColor\", {})"}, "action_details": [{"section": "Action fields", "title": "Which lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "which_lights", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness level", "Slug": "brightness", "Required": "false", "Can have default value": "false"}}], "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6) && apilioValue1 === \"Green\") {\n  Magichue.changeColor.setWhichLights(\"Living Room\");\n  Magichue.changeColor.setColor(\"green\");\n  Magichue.changeColor.setBrightness(70);\n} else {\n  Magichue.changeColor.skip(\"Conditions not met.\");\n}", "intent": "When the Apilio event \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value from Apilio is \"Green\", change the color of the \"Living Room\" MagicHue lights to green and set the brightness to 70%."}
{"original_description": "Have iRobot clean the room when the Litter-Robot waste drawer is full", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.clean_by_room", "Filter code method": "Irobot.cleanByRoom.skip(string?: reason)", "Runtime method": "runAction(\"irobot.clean_by_room\", {})"}, "action_details": [{"section": "Action fields", "title": "Room info\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which room would you like to clean?", "Slug": "room_info", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Whisker.lr3Events.EventType === \"Waste Drawer Full\" && Whisker.lr3Events.LitterRobotName === \"My Litter Robot\") {\n  Irobot.cleanByRoom.setRoomInfo(\"Living Room\");\n} else {\n  Irobot.cleanByRoom.skip(\"Conditions not met for cleaning.\");\n}", "intent": "When the Litter-Robot named \"My Litter Robot\" reports that its waste drawer is full, as indicated by the \"Waste Drawer Full\" event type at any time, trigger the iRobot to clean the \"Living Room\"."}
{"original_description": "Updates a boolean variable to false when SmartThings no longer detects someone present.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.new_present_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Arrived at\nThe date and time you arrived.", "description": "The date and time you arrived.", "details": {"Slug": "ArrivedAt", "Filter code": "SmartthingsV2.newPresentSmartthings.ArrivedAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.newPresentSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "Apilio", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "apilio.boolean_variable_toggle_updates", "Filter code method": "Apilio.booleanVariableToggleUpdates.skip(string?: reason)", "Runtime method": "runAction(\"apilio.boolean_variable_toggle_updates\", {})"}, "action_details": [{"section": "Action fields", "title": "Variable identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Apilio variable do you want to toggle?", "Helper text": "The variable will change from true to false or from false to true", "Slug": "variable_identifier", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\" && SmartthingsV2.newPresentSmartthings.ArrivedAt === null) {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Occupancy Status\");\n  Apilio.booleanVariableToggleUpdates.skip(\"No one is present in the Bedroom.\");\n}", "intent": "When the Bedroom sensor device no longer detects someone present, update the boolean variable \"Occupancy Status\" to false in Apilio."}
{"original_description": "Receive notifications whenever there is news about the Tokyo Olympics.", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Notifications", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "if_notifications.send_rich_notification", "Filter code method": "IfNotifications.sendRichNotification.skip(string?: reason)", "Runtime method": "runAction(\"if_notifications.send_rich_notification\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input", "description": "Text input", "details": {"Label": "Message", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setMessage(string: message)"}}, {"section": "Action fields", "title": "Title\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Title", "Helper text": "Optional, bold text above the message", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setTitle(string: title)"}}, {"section": "Action fields", "title": "Link url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Link URL", "Helper text": "Optional, link may open in a browser or installed app", "Slug": "link_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setLink Url(string: link_url)"}}, {"section": "Action fields", "title": "Image url\nText input > Photo", "description": "Text input > Photo", "details": {"Label": "Image URL", "Helper text": "Optional", "Slug": "image_url", "Required": "false", "Can have default value": "true", "Filter code method": "IfNotifications.sendRichNotification.setImage Url(string: image_url)"}}], "filter_code": "IfNotifications.sendRichNotification\n  .setTitle(\"Tokyo Olympics News\")\n  .setMessage(\"New update: \" + Feed.newFeedItem.EntryTitle)\n  .setLinkUrl(Feed.newFeedItem.EntryUrl)\n  .setImageUrl(Feed.newFeedItem.EntryImageUrl);", "intent": "Send a notification with the title \"Tokyo Olympics News\" and the message \"New update: {{EntryTitle}}\" whenever a new entry is published in the Tokyo Olympics RSS feed, including a link to the full entry at {{EntryUrl}} and an image from the entry if available at {{EntryImageUrl}}."}
{"original_description": "Cette applet permet de passer un pilote en mode \"lock\" tous les jours après une certaine heure. Lorsque le produit passe en mode \"lock\" les LEDs s'éteignent. C'est pratique si vous avez un pilote dans votre chambre et que la lumière vous dérange pour dormir.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-close-child-lock-mode", "Filter code method": "Heatzy.aCloseChildLockMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-close-child-lock-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 22 && minute === 0) {\n  Heatzy.aCloseChildLockMode.setDevice(\"Bedroom Thermostat\");\n} else {\n  Heatzy.aCloseChildLockMode.skip(\"Not 10:00 PM\");\n}", "intent": "Turn on the child lock mode for my Heatzy device named \"Bedroom Thermostat\" every day at 10:00 PM to disable the LEDs and prevent the light from disturbing my sleep."}
{"original_description": "Cette applet permet de désactiver le mode \"lock\" de vos produits tous les matins après une certaine heure.\nSi le produit est en mode \"lock\" la nuit pour vous permettre de mieux dormir, il peut aussi repasser en mode normal la journée pour vous permettre de l'utiliser normalement.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-close-child-lock-mode", "Filter code method": "Heatzy.aCloseChildLockMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-close-child-lock-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.getHours() === 7 && currentTime.getMinutes() === 0) {\n  Heatzy.aCloseChildLockMode.setDevice(\"Salon\");\n} else {\n  Heatzy.aCloseChildLockMode.skip(\"Not the targeted time.\");\n}", "intent": "Désactivez le mode \"lock\" de votre thermostat Heatzy \"Salon\" tous les matins à 07:00 pour permettre une utilisation normale pendant la journée."}
{"original_description": "When the waste drawer is full, create an Asana task to empty the drawer", "trigger_channel": "Litter-Robot by Whisker", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "whisker.lr3_events"}, "trigger_details": [{"section": "Trigger fields", "title": "Litter robot\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Litter-Robot?", "Slug": "litter_robot", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Event type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Event Type", "Slug": "event_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Whisker.lr3Events.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Litter robot name\nThe name of your litter robot.", "description": "The name of your litter robot.", "details": {"Slug": "litter_robot_name", "Filter code": "Whisker.lr3Events.LitterRobotName", "Type": "String", "Example": "My Litter Robot"}}], "action_channel": "Asana", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "asana.create_task", "Filter code method": "Asana.createTask.skip(string?: reason)", "Runtime method": "runAction(\"asana.create_task\", {})"}, "action_details": [{"section": "Action fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Project name\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "In which project?", "Helper text": "Enter project name exactly as it appears in Asana.", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Task name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Task name", "Slug": "task_name", "Required": "true", "Can have default value": "true", "Filter code method": "Asana.createTask.setTask Name(string: task_name)"}}, {"section": "Action fields", "title": "Notes\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Notes", "Helper text": "Optional", "Slug": "notes", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setNotes(string: notes)"}}, {"section": "Action fields", "title": "Due on\nText input > Other", "description": "Text input > Other", "details": {"Label": "Due on", "Helper text": "Optional. Use a date Ingredient or enter as YYYY-MM-DD", "Slug": "due_on", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setDue On(string: due_on)"}}, {"section": "Action fields", "title": "Assignee\nDropdown list", "description": "Dropdown list", "details": {"Label": "Assignee", "Helper text": "Optional", "Slug": "assignee", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Tag name\nText input > Title", "description": "Text input > Title", "details": {"Label": "Add a tag?", "Helper text": "Optional", "Slug": "tag_name", "Required": "false", "Can have default value": "true"}}, {"section": "Action fields", "title": "Attach a file\nText input > File", "description": "Text input > File", "details": {"Label": "Attach a file?", "Slug": "attach_a_file", "Required": "false", "Can have default value": "true", "Filter code method": "Asana.createTask.setAttach A File(string: attach_a_file)"}}], "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.event_type === \"Waste Drawer Full\") {\n  Asana.createTask.setTaskName(\"Empty Waste Drawer\");\n  Asana.createTask.setNotes(\"The waste drawer of My Litter Robot is full and needs to be emptied\");\n  Asana.createTask.setDueOn(Meta.currentUserTime.toISO8601String().split('T')[0]);\n  Asana.createTask.setAssignee(\"John Doe\");\n  Asana.createTask.setTags([\"Urgent\", \"Cleaning\"]);\n  Asana.createTask.setProjectName(\"Household Chores\");\n} else {\n  Asana.createTask.skip(\"Conditions not met.\");\n}", "intent": "When the Litter-Robot named \"My Litter Robot\" sends a \"Waste Drawer Full\" event, create a new task in Asana's \"Household Chores\" project named \"Empty Waste Drawer\", with notes \"The waste drawer of My Litter Robot is full and needs to be emptied\", due on the current day, assigned to John Doe, and tagged with \"Urgent\" and \"Cleaning\"."}
{"original_description": "Get a notification on all your Triby when Foobot notices a high level of pollution (higher than 50)", "trigger_channel": "Foobot", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "foobot.allPollu50Any"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Foobot?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Event time\nDate & time threshold was reached.", "description": "Date & time threshold was reached.", "details": {"Slug": "created_at", "Filter code": "Foobot.allPollu50Any.EventTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nThe name of the Foobot.", "description": "The name of the Foobot.", "details": {"Slug": "device_name", "Filter code": "Foobot.allPollu50Any.DeviceName", "Type": "String", "Example": "HappyBot"}}, {"section": "Ingredients", "title": "Value\nThe global pollution value.", "description": "The global pollution value.", "details": {"Slug": "value", "Filter code": "Foobot.allPollu50Any.Value", "Type": "String", "Example": "73.70"}}], "action_channel": "Invoxia Triby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "invoxia_triby.send_a_message_to_every_triby", "Filter code method": "InvoxiaTriby.sendAMessageToEveryTriby.skip(string?: reason)", "Runtime method": "runAction(\"invoxia_triby.send_a_message_to_every_triby\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What message?", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "InvoxiaTriby.sendAMessageToEveryTriby.setMessage(string: message)"}}], "filter_code": "if (Foobot.allPollu50Any.DeviceName === \"HappyBot\" && Foobot.allPollu50Any.Value > 50) {\n  InvoxiaTriby.sendAMessageToEveryTriby.setMessage(\"High pollution alert: \" + Foobot.allPollu50Any.Value + \", please take necessary precautions\");\n} else {\n  InvoxiaTriby.sendAMessageToEveryTriby.skip(\"Conditions not met\");\n}", "intent": "When the Foobot device named \"HappyBot\" detects a pollution level higher than 50, send a message to all Invoxia Triby devices saying \"High pollution alert: 73.70, please take necessary precautions\"."}
{"original_description": "This will automatically change the WiZ light(s) of your choice to Cozy mode if SmartThings detects that the temperature has dropped below the level you have defined.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.temperature_drops_below_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Threshold value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Temperature value", "Helper text": "Temperature threshold as a number", "Slug": "threshold_value", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold units\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature units", "Slug": "threshold_units", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temperature fahrenheit\nThe temperature measured by the sensor in Fahrenheit.", "description": "The temperature measured by the sensor in Fahrenheit.", "details": {"Slug": "TemperatureFahrenheit", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureFahrenheit", "Type": "String", "Example": "74"}}, {"section": "Ingredients", "title": "Temperature celsius\nThe temperature measured by the sensor in Celsius.", "description": "The temperature measured by the sensor in Celsius.", "details": {"Slug": "TemperatureCelsius", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureCelsius", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Threshold\nThe temperature threshold set in the recipe.", "description": "The temperature threshold set in the recipe.", "details": {"Slug": "Threshold", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.Threshold", "Type": "String", "Example": "75"}}, {"section": "Ingredients", "title": "Threshold units\nThe temperature threshold units (C or F).", "description": "The temperature threshold units (C or F).", "details": {"Slug": "ThresholdUnits", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.ThresholdUnits", "Type": "String", "Example": "F"}}, {"section": "Ingredients", "title": "Measured at\nThe date and time the sensor measured the temperature.", "description": "The date and time the sensor measured the temperature.", "details": {"Slug": "MeasuredAt", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.MeasuredAt", "Type": "String", "Example": "April 1st, 2016 at 12:43PM"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device.", "description": "The name of the device.", "details": {"Slug": "DeviceName", "Filter code": "SmartthingsV2.temperatureDropsBelowSmartthings.DeviceName", "Type": "String", "Example": "Bedroom sensor"}}], "action_channel": "WiZ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wiz.turn_on", "Filter code method": "Wiz.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"wiz.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Entity\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light(s)?", "Helper text": "This can be the whole home, a room, a group, or a light.", "Slug": "entity", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "What light mode / color?", "Slug": "mode", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setMode(string: mode)"}}, {"section": "Action fields", "title": "Dimming\nDropdown list", "description": "Dropdown list", "details": {"Label": "What brightness?", "Helper text": "Select the brightness level of your choice.", "Slug": "dimming", "Required": "true", "Can have default value": "true", "Filter code method": "Wiz.turnOn.setDimming(string: dimming)"}}], "filter_code": "if (SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureCelsius < 18 && SmartthingsV2.temperatureDropsBelowSmartthings.DeviceName === \"Bedroom sensor\") {\n  Wiz.turnOn.setMode(\"Cozy\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Temperature is not below 18°C or device is not Bedroom sensor.\");\n}", "intent": "When the SmartThings sensor in the Bedroom detects a temperature drop below 18°C, automatically turn on the WiZ light in the Living Room to Cozy mode at a brightness of 50%."}
{"original_description": "Create a Google Calendar event to make sure you have time to handle a voicemail from Zoom Phone.", "trigger_channel": "Zoom Phone", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "zoom_phone.new_user_voicemail"}, "trigger_details": [{"section": "Trigger fields", "title": "Voicemail status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which status should the voicemail have?", "Helper text": "Is the voicemail read or unread?", "Slug": "voicemail_status", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Voicemail\nThe ID of the voicemail.", "description": "The ID of the voicemail.", "details": {"Slug": "voicemail_id", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailId", "Type": "String", "Example": "alkdoweinld"}}, {"section": "Ingredients", "title": "Call date\nThe start time of the voicemail.", "description": "The start time of the voicemail.", "details": {"Slug": "call_date", "Filter code": "ZoomPhone.newUserVoicemail.CallDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Voicemail duration\nThe duration of the voicemail in format HH:MM:SS.", "description": "The duration of the voicemail in format HH:MM:SS.", "details": {"Slug": "voicemail_duration", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailDuration", "Type": "String", "Example": "00:03:21"}}, {"section": "Ingredients", "title": "Caller number\nThe phone number of the caller.", "description": "The phone number of the caller.", "details": {"Slug": "caller_number", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumber", "Type": "String", "Example": "12345678"}}, {"section": "Ingredients", "title": "Caller name\nThe name of the caller.", "description": "The name of the caller.", "details": {"Slug": "caller_name", "Filter code": "ZoomPhone.newUserVoicemail.CallerName", "Type": "String", "Example": "Biff McIftt"}}, {"section": "Ingredients", "title": "Caller number type\nThe source of the caller's phone number -- Internal or External.", "description": "The source of the caller's phone number -- Internal or External.", "details": {"Slug": "caller_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CallerNumberType", "Type": "String", "Example": "external"}}, {"section": "Ingredients", "title": "Callee number\nThe phone number of the user who received the voicemail.", "description": "The phone number of the user who received the voicemail.", "details": {"Slug": "callee_number", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumber", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee name\nThe name of the user who received the voicemail.", "description": "The name of the user who received the voicemail.", "details": {"Slug": "callee_name", "Filter code": "ZoomPhone.newUserVoicemail.CalleeName", "Type": "String", "Example": "Biff McIfttt"}}, {"section": "Ingredients", "title": "Callee number type\nThe source of the callee's phone number -- Internal or External.", "description": "The source of the callee's phone number -- Internal or External.", "details": {"Slug": "callee_number_type", "Filter code": "ZoomPhone.newUserVoicemail.CalleeNumberType", "Type": "String", "Example": "internal"}}, {"section": "Ingredients", "title": "Voicemail status\nThe status of the voicemail -- read or unread.", "description": "The status of the voicemail -- read or unread.", "details": {"Slug": "voicemail_status", "Filter code": "ZoomPhone.newUserVoicemail.VoicemailStatus", "Type": "String", "Example": "unread"}}], "action_channel": "Google Calendar", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_calendar.quick_add_event", "Filter code method": "GoogleCalendar.quickAddEvent.skip(string?: reason)", "Runtime method": "runAction(\"google_calendar.quick_add_event\", {})"}, "action_details": [{"section": "Action fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Quick add\nText input", "description": "Text input", "details": {"Label": "Quick add text", "Helper text": "Note: Google's Quick Add feature is English-only e.g. “dinner with Alex tomorrow 7pm”", "Slug": "quick_add", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleCalendar.quickAddEvent.setQuick Add(string: quick_add)"}}], "filter_code": "if (ZoomPhone.newUserVoicemail.CallerNumberType === \"external\" && ZoomPhone.newUserVoicemail.CalleeName === \"Biff McIfttt\" && ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Voicemail follow-up with Biff McIftt tomorrow at 2pm\");\n  GoogleCalendar.quickAddEvent.skip();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for voicemail follow-up event.\");\n}", "intent": "Create a Google Calendar event for 30 minutes to handle an unread voicemail from Zoom Phone when the caller's number is external and the callee's name is Biff McIfttt, using the quick add text \"Voicemail follow-up with Biff McIftt tomorrow at 2pm\" on the default calendar."}
{"original_description": "Send a message to Teams when there is a new Asana Project that is created.", "trigger_channel": "Asana", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asana.new_project"}, "trigger_details": [{"section": "Trigger fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asana.newProject.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Project name\nThe name of the project the task is for.", "description": "The name of the project the task is for.", "details": {"Slug": "project_name", "Filter code": "Asana.newProject.ProjectName", "Type": "String", "Example": "Cool things to do with Asana!"}}, {"section": "Ingredients", "title": "Workspace\nThe name of the workspace the project was added to.", "description": "The name of the workspace the project was added to.", "details": {"Slug": "workspace", "Filter code": "Asana.newProject.Workspace", "Type": "String", "Example": "Team Asana"}}, {"section": "Ingredients", "title": "Project description\nDescription associated with the project.", "description": "Description associated with the project.", "details": {"Slug": "project_description", "Filter code": "Asana.newProject.ProjectDescription", "Type": "String", "Example": "Awesome ways you can use Asana with other services."}}, {"section": "Ingredients", "title": "Project url\nThe URL to the project on Asana.", "description": "The URL to the project on Asana.", "details": {"Slug": "project_url", "Filter code": "Asana.newProject.ProjectURL", "Type": "Web URL", "Example": "asana.com/"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (Asana.newProject.Workspace === \"Team Asana\") {\n  var subject = \"New Project Created: \" + Asana.newProject.ProjectName;\n  var body = \"A new project named \" + Asana.newProject.ProjectName + \" has been created in Asana. You can view it here: \" + Asana.newProject.ProjectURL;\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(subject);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(body);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"New project is not in 'Team Asana' workspace.\");\n}", "intent": "When a new Asana project is created in the \"Team Asana\" workspace, send a message to the \"#general\" channel in Microsoft Teams with the subject \"New Project Created: {{project_name}}\" and the body \"A new project named {{project_name}} has been created in Asana. You can view it here: {{project_url}}\". Set the message urgency to \"Important\"."}
{"original_description": "Quand je reçois un SMS sur mon Smartphone il est affiché sur l'écran où est branché ma Bbox Miami.", "trigger_channel": "Android SMS", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_messages.received_a_message"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the message.", "description": "The contact name associated with the message.", "details": {"Slug": "ContactName", "Filter code": "AndroidMessages.receivedAMessage.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Text\nThe text of the message", "description": "The text of the message", "details": {"Slug": "Text", "Filter code": "AndroidMessages.receivedAMessage.Text", "Type": "String", "Example": "Hey there! How's it going?"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the message was received.", "description": "The time the message was received.", "details": {"Slug": "OccurredAt", "Filter code": "AndroidMessages.receivedAMessage.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe number that sent the message", "description": "The number that sent the message", "details": {"Slug": "FromNumber", "Filter code": "AndroidMessages.receivedAMessage.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidMessages.receivedAMessage.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "Bbox Miami", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "bbox_miami.send_toast", "Filter code method": "BboxMiami.sendToast.skip(string?: reason)", "Runtime method": "runAction(\"bbox_miami.send_toast\", {})"}, "action_details": [{"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "What message would you like to send?", "Helper text": "This message will be sent to your Bbox Miami", "Slug": "message", "Required": "true", "Can have default value": "true", "Filter code method": "BboxMiami.sendToast.setMessage(string: message)"}}], "filter_code": "if (AndroidMessages.receivedAMessage.ContactName === \"Jon Snow\" && \n    AndroidMessages.receivedAMessage.Text.includes(\"URGENT\") && \n    AndroidMessages.receivedAMessage.DeviceName === \"Google Pixel 7\") {\n  BboxMiami.sendToast.setMessage(\"New urgent message from Jon Snow\");\n} else {\n  BboxMiami.sendToast.skip(\"Does not match the conditions.\");\n}", "intent": "When I receive an SMS from Jon Snow on my Google Pixel 7 with the text containing the word \"URGENT\" at any time, send a toast message to my Bbox Miami saying \"New urgent message from Jon Snow\"."}
{"original_description": "Get a message to your Teams channel when there is a new book on the NYT Best Sellers list.", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_book_on_a_best_seller_list"}, "trigger_details": [{"section": "Trigger fields", "title": "List\nDropdown list", "description": "Dropdown list", "details": {"Label": "Best Sellers List", "Slug": "list", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newBookOnABestSellerList.Title", "Type": "String", "Example": "Thinking, Fast and Slow"}}, {"section": "Ingredients", "title": "Description\nThe book's description", "description": "The book's description", "details": {"Slug": "Description", "Filter code": "Nytimes.newBookOnABestSellerList.Description", "Type": "String", "Example": "The winner of the Nobel in economic science discusses how we make choices..."}}, {"section": "Ingredients", "title": "Book cover image url\nA URL to the book's cover image", "description": "A URL to the book's cover image", "details": {"Slug": "BookCoverImageUrl", "Filter code": "Nytimes.newBookOnABestSellerList.BookCoverImageUrl", "Type": "String", "Example": "http://images.amazon.com/images/P/0553801473.01.LZZZZZZZ.jpg"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newBookOnABestSellerList.Author", "Type": "String", "Example": "Daniel Kahneman"}}, {"section": "Ingredients", "title": "Publisher\nThe name of the book's publisher", "description": "The name of the book's publisher", "details": {"Slug": "Publisher", "Filter code": "Nytimes.newBookOnABestSellerList.Publisher", "Type": "String", "Example": "Farrar, Straus and Giroux"}}, {"section": "Ingredients", "title": "Best seller category", "description": "", "details": {"Slug": "BestSellerCategory", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerCategory", "Type": "String", "Example": "Business"}}, {"section": "Ingredients", "title": "Rank\nRank this week on the list", "description": "Rank this week on the list", "details": {"Slug": "Rank", "Filter code": "Nytimes.newBookOnABestSellerList.Rank", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "Weeks on list\nNumber of weeks on the list", "description": "Number of weeks on the list", "details": {"Slug": "WeeksOnList", "Filter code": "Nytimes.newBookOnABestSellerList.WeeksOnList", "Type": "String", "Example": "23"}}, {"section": "Ingredients", "title": "Best seller listed date\nThe listed date of the book", "description": "The listed date of the book", "details": {"Slug": "BestSellerListedDate", "Filter code": "Nytimes.newBookOnABestSellerList.BestSellerListedDate", "Type": "Date (ISO8601)", "Example": "2020-07-07"}}, {"section": "Ingredients", "title": "Isbn\nISBN Number (ISBN 13)", "description": "ISBN Number (ISBN 13)", "details": {"Slug": "ISBN", "Filter code": "Nytimes.newBookOnABestSellerList.ISBN", "Type": "String", "Example": "1726474927483"}}], "action_channel": "Microsoft Teams", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "microsoft_teams.post_message_to_channel", "Filter code method": "MicrosoftTeams.postMessageToChannel.skip(string?: reason)", "Runtime method": "runAction(\"microsoft_teams.post_message_to_channel\", {})"}, "action_details": [{"section": "Action fields", "title": "Team and channel ids\nNested dropdown list", "description": "Nested dropdown list", "details": {"Label": "Which channel?", "Slug": "team_and_channel_ids", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "What is the subject of the message?", "Helper text": "This will appear as the header text of the message", "Slug": "message_subject", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Subject(string: message_subject)"}}, {"section": "Action fields", "title": "Message body\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "What is the content of the message?", "Helper text": "This will appear as the body of the message", "Slug": "message_body", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Body(string: message_body)"}}, {"section": "Action fields", "title": "Message urgency\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the urgency of the message?", "Helper text": "Select between <a href=\"https://support.microsoft.com/en-us/office/mark-a-message-as-important-or-urgent-in-teams-ea99d5b6-1317-4550-8d75-86ff14cd4462\" target=\"_blank\">Normal, Important, or Urgent</a> to call desired attention to your message", "Slug": "message_urgency", "Required": "true", "Can have default value": "true", "Filter code method": "MicrosoftTeams.postMessageToChannel.setMessage Urgency(string: message_urgency)"}}], "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Fiction\" && Nytimes.newBookOnABestSellerList.Rank === \"1\" && parseInt(Nytimes.newBookOnABestSellerList.WeeksOnList) > 10) {\n  var subject = `New NYT Best Seller: ${Nytimes.newBookOnABestSellerList.Title} by ${Nytimes.newBookOnABestSellerList.Author}`;\n  var body = `A new book, '${Nytimes.newBookOnABestSellerList.Title}' by ${Nytimes.newBookOnABestSellerList.Author}, has reached the top of the New York Times Best Sellers list in the Fiction category. It has been on the list for ${Nytimes.newBookOnABestSellerList.WeeksOnList} weeks and is currently ranked #${Nytimes.newBookOnABestSellerList.Rank}. You can find more information about this book at ${Nytimes.newBookOnABestSellerList.BookCoverImageUrl}. ISBN: ${Nytimes.newBookOnABestSellerList.ISBN}`;\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"book-club\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(subject);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(body);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Conditions not met for sending message.\");\n}", "intent": "When a new book is listed on the New York Times Best Sellers list in the \"Fiction\" category, with a rank of 1 and having been on the list for more than 10 weeks, send a message to the \"#book-club\" channel on Microsoft Teams with the subject \"New NYT Best Seller: {{Title}} by {{Author}}\" and the message body \"A new book, '{{Title}}' by {{Author}}, has reached the top of the New York Times Best Sellers list in the Fiction category. It has been on the list for {{WeeksOnList}} weeks and is currently ranked #{{Rank]]. You can find more information about this book at {{BookCoverImageUrl}}. ISBN: {{ISBN}}\". Mark the message as \"Urgent\" to notify team members immediately."}
{"original_description": "Get a daily reminder on your Kronaby watch to do that thing you always forget to do.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Kronaby", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kronaby.notify", "Filter code method": "Kronaby.notify.skip(string?: reason)", "Runtime method": "runAction(\"kronaby.notify\", {})"}, "action_details": [{"section": "Action fields", "title": "Body\nText input > Notification", "description": "Text input > Notification", "details": {"Label": "Enter a message", "Helper text": "This optional message will be sent as a notification to your phone.", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Kronaby.notify.setBody(string: body)"}}], "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nif (hour === 8) {\n  Kronaby.notify.setBody(\"Remember to take your morning pill\");\n} else {\n  Kronaby.notify.skip(\"Not the scheduled reminder time.\");\n}", "intent": "Send a daily reminder to my Kronaby watch at 08:00 to take medication, with a notification message saying \"Remember to take your morning pill\"."}
{"original_description": "Receive a daily reminder phone call. Enter hour, minute and the text to be played when call connects. Register your phone number at woop.la/ifttt to receive phone calls.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "woopla phone calls", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "woopla.tts_call", "Filter code method": "Woopla.ttsCall.skip(string?: reason)", "Runtime method": "runAction(\"woopla.tts_call\", {})"}, "action_details": [{"section": "Action fields", "title": "Tts\nText input > Long text", "description": "Text input > Long text", "details": {"Label": "Text", "Helper text": "Enter the text to be played when call connects.", "Slug": "tts", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setTts(string: tts)"}}, {"section": "Action fields", "title": "Language\nDropdown list", "description": "Dropdown list", "details": {"Label": "Language", "Helper text": "Select text's language.", "Slug": "language", "Required": "true", "Can have default value": "true", "Filter code method": "Woopla.ttsCall.setLanguage(string: language)"}}], "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 8 && minute === 0) {\n  Woopla.ttsCall.setTts(\"Good morning, it's time to start your day\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Not the scheduled time for the daily reminder.\");\n}", "intent": "Receive a daily reminder phone call at 08:00 with the text \"Good morning, it's time to start your day\" played when the call connects, using the English language."}
{"original_description": "Pause", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.pause", "Filter code method": "Sonos.pause.skip(string?: reason)", "Runtime method": "runAction(\"sonos.pause\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to pause?", "Helper text": "Select room. The group containing this room will pause playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Pause entire household?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.pause.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.pause.setRoom(\"Living Room\");\n  Sonos.pause.setIncludeGroupedRooms(\"true\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, pause the Sonos playback in the Living Room and include all grouped rooms."}
{"original_description": "Play Favorite", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.play_favorite", "Filter code method": "Sonos.playFavorite.skip(string?: reason)", "Runtime method": "runAction(\"sonos.play_favorite\", {})"}, "action_details": [{"section": "Action fields", "title": "Favorite\nDropdown list", "description": "Dropdown list", "details": {"Label": "What favorite do you want to play?", "Helper text": "Choose a Sonos Favorite", "Slug": "favorite", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to play?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Play in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.playFavorite.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.playFavorite.setFavorite(\"Living Room Playlist\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Incorrect gesture or device.\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, play my Sonos favorite \"Living Room Playlist\" in the room \"Living Room\" and include all grouped rooms."}
{"original_description": "Resume", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.resume", "Filter code method": "Sonos.resume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.resume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to resume?", "Helper text": "Select room. The group containing this room will resume playback.", "Slug": "room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture !== \"Triple Knock\" || Knocki.knocki.Device !== \"KNC1-W-00000088\") {\n  Sonos.resume.skip(\"Invalid gesture or device\");\n} else {\n  Sonos.resume.setRoom(\"Living Room\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, resume playback in the Living Room on Sonos."}
{"original_description": "Volume Up", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.decrease_volume", "Filter code method": "Sonos.decreaseVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.decrease_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to change the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Change the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.decreaseVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.decreaseVolume.setRoom(\"Living Room\");\n  Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n  Sonos.decreaseVolume.skip(); // This line is incorrect based on the intent to turn up the volume, it should be adjusted according to Sonos API for increasing volume.\n}", "intent": "When a Triple Knock gesture is detected on the KNC1-W-00000088 device at any time, turn up the volume in the Living Room, including all grouped rooms."}
{"original_description": "Mute", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.mute", "Filter code method": "Sonos.mute.skip(string?: reason)", "Runtime method": "runAction(\"sonos.mute\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to mute?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Mute in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.mute.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.mute.setRoom(\"Living Room\");\n  Sonos.mute.setIncludeGroupedRooms(\"true\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, mute the Sonos speaker in the Living Room and include grouped rooms."}
{"original_description": "Skip to next track", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.next_track", "Filter code method": "Sonos.nextTrack.skip(string?: reason)", "Runtime method": "runAction(\"sonos.next_track\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to skip?", "Helper text": "Select room. The group containing this room will skip to the next track.", "Slug": "room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.nextTrack.setRoom(\"Living Room\");\n  Sonos.nextTrack.skip();\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, skip to the next track in the Living Room on Sonos."}
{"original_description": "Flicボタンをダブルクリックすると、風景をランダムに切り替えます。", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.change_view", "Filter code method": "Atmoph.changeView.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.change_view\", {})"}, "action_details": [], "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"MyFlic\") {\n    var landscapes = [\"Mountain\", \"Beach\"];\n    var randomIndex = Math.floor(Math.random() * landscapes.length);\n    Atmoph.changeView.setView(landscapes[randomIndex]);\n  } else {\n    Atmoph.changeView.skip(\"Either not a double click or not the MyFlic button.\");\n  }\n} else {\n  Atmoph.changeView.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}", "intent": "When the Flic button named \"MyFlic\" is double-clicked, change the Atmoph view to a random landscape between \"Mountain\" and \"Beach\" if the click occurs between 07:00 and 19:00."}
{"original_description": "Flicボタンを長押しすると、Atmoph Window にカレンダーを表示します。もう一度長押しすると消えます。", "trigger_channel": "Flic", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "flic.click"}, "trigger_details": [{"section": "Trigger fields", "title": "Button uuid\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Name", "Helper text": "The name of the Flic you want to trigger.", "Slug": "button_uuid", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Click type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Flic Click Type", "Slug": "click_type", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Longitude\nLongitude of the button press.", "description": "Longitude of the button press.", "details": {"Slug": "longitude", "Filter code": "Flic.click.Longitude", "Type": "String", "Example": "18.0649000"}}, {"section": "Ingredients", "title": "Latitude\nLatitude of the button press.", "description": "Latitude of the button press.", "details": {"Slug": "latitude", "Filter code": "Flic.click.Latitude", "Type": "String", "Example": "59.3325800"}}, {"section": "Ingredients", "title": "Clicked at\nDate and time Flic was clicked.", "description": "Date and time Flic was clicked.", "details": {"Slug": "created_at", "Filter code": "Flic.click.ClickedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Click type\nThe click type of the event: 'click', 'double_click' or 'hold'.", "description": "The click type of the event: 'click', 'double_click' or 'hold'.", "details": {"Slug": "click_type", "Filter code": "Flic.click.ClickType", "Type": "String", "Example": "double_click"}}], "action_channel": "Atmoph", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "atmoph.show_calendar", "Filter code method": "Atmoph.showCalendar.skip(string?: reason)", "Runtime method": "runAction(\"atmoph.show_calendar\", {})"}, "action_details": [], "filter_code": "var clickType = Flic.click.ClickType;\nif (clickType === 'hold') {\n  var buttonUuid = 'MyFlic'; // assuming this is how to get or set the specific Flic name\n  if (buttonUuid === 'MyFlic') {\n    Atmoph.showCalendar.skip(); // This line needs adjustment as per actual implementation details\n  } else {\n    Atmoph.showCalendar.setCalendarVisible(false); // Assuming such a method exists for hiding\n  }\n} else {\n  Atmoph.showCalendar.skip('Not a hold click');\n}", "intent": "When the Flic button named \"MyFlic\" is held for a long time, display the calendar on Atmoph Window; if held again, hide it."}
{"original_description": "Set Volume", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.set_volume", "Filter code method": "Sonos.setVolume.skip(string?: reason)", "Runtime method": "runAction(\"sonos.set_volume\", {})"}, "action_details": [{"section": "Action fields", "title": "Volume\nText input > Other", "description": "Text input > Other", "details": {"Label": "What level do want the volume to be?", "Helper text": "It doesn't just go to 11. It goes way beyond 11 - enter any value between 0 (total silence) and 100 (maximum overdrive)", "Slug": "volume", "Required": "true", "Can have default value": "true", "Filter code method": "Sonos.setVolume.setVolume(string: volume)"}}, {"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to set the volume?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Set the volume for this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.setVolume.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.setVolume.setVolume(\"75\");\n  Sonos.setVolume.setIncludeGroupedRooms(\"true\");\n  Sonos.setVolume.setRoom(\"Living Room\");\n} else {\n  Sonos.setVolume.skip(\"Gesture or device does not match.\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, set the volume to 75 in the Living Room and include grouped rooms."}
{"original_description": "Unmute", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.unmute", "Filter code method": "Sonos.unmute.skip(string?: reason)", "Runtime method": "runAction(\"sonos.unmute\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to unmute?", "Helper text": "Select room", "Slug": "room", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Include grouped rooms\nDropdown list", "description": "Dropdown list", "details": {"Label": "Include grouped rooms?", "Helper text": "Mute in this room only, or include grouped rooms?", "Slug": "include_grouped_rooms", "Required": "false", "Can have default value": "true", "Filter code method": "Sonos.unmute.setInclude Grouped Rooms(string: include_grouped_rooms)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.unmute.setRoom(\"Living Room\");\n  Sonos.unmute.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.unmute.skip(\"Gesture or device does not match.\");\n}", "intent": "When a Triple Knock gesture is detected on the device KNC1-W-00000088 at any time, unmute the Sonos speaker in the Living Room and include all grouped rooms."}
{"original_description": "Set a Nest Thermostat to the temperature you specify.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Google Nest Thermostat", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_nest_thermostat.set_hot_temperature", "Filter code method": "GoogleNestThermostat.setHotTemperature.skip(string?: reason)", "Runtime method": "runAction(\"google_nest_thermostat.set_hot_temperature\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which Thermostat?", "Helper text": "Select your Nest Thermostat", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature unit\nDropdown list", "description": "Dropdown list", "details": {"Label": "Celcius or Fahrenheit", "Helper text": "Select the unit of temperature", "Slug": "temperature_unit", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setTemperature Unit(string: temperature_unit)"}}, {"section": "Action fields", "title": "Degrees\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Temperature", "Helper text": "Temperature value", "Slug": "degrees", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleNestThermostat.setHotTemperature.setDegrees(string: degrees)"}}], "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Incorrect device or gesture.\");\n}", "intent": "When the Knocki device KNC1-W-00000088 detects a Triple Knock gesture, set the Living Room Nest Thermostat to 22°C."}
{"original_description": "Change color for Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_color", "Filter code method": "Yeelight.setColor.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_color\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which color?", "Slug": "color_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Yeelight.setColor.set_color(\"red\");\n} else {\n  Yeelight.setColor.skip(\"Gesture or device does not match.\");\n}", "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, change the Yeelight color to red."}
{"original_description": "Let SwitchBot turn on your coffee machine in the morning", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "SwitchBot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "switchbot.press_bot", "Filter code method": "Switchbot.pressBot.skip(string?: reason)", "Runtime method": "runAction(\"switchbot.press_bot\", {})"}, "action_details": [{"section": "Action fields", "title": "Chose a device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Choose a device", "Slug": "chose_a_device", "Required": "true", "Can have default value": "false"}}], "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 AM\";\nif (currentTime !== targetTime) {\n  Switchbot.pressBot.skip(\"Not the scheduled time for coffee.\");\n} else {\n  // Assuming 'chose_a_device' is set to the coffee machine in the action details\n  Switchbot.pressBot.setChoseADevice(\"coffee_machine\");\n}", "intent": "Turn on the coffee machine with SwitchBot every day at 7:00 AM."}
{"original_description": "Change the brightness of a light bulb.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_brightness", "Filter code method": "Kasa.changeBrightness.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_brightness\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Helper text": "Choose a Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true", "Filter code method": "Kasa.changeBrightness.setBrightness(string: brightness)"}}], "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && \n    Knocki.knocki.Gesture === \"Triple Knock\" && \n    Knocki.knocki.Pattern === \"***\") {\n  Kasa.changeBrightness.setBrightness(\"75%\");\n} else {\n  Kasa.changeBrightness.skip(\"Conditions not met.\");\n}", "intent": "When the Knocki device KNC1-W-00000088 detects a Triple Knock gesture with a *** pattern at any time, change the brightness of the Living Room Light bulb to 75% using the TP-Link Kasa channel."}
{"original_description": "Skip to previous track", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Sonos", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "sonos.previous_track", "Filter code method": "Sonos.previousTrack.skip(string?: reason)", "Runtime method": "runAction(\"sonos.previous_track\", {})"}, "action_details": [{"section": "Action fields", "title": "Room\nDropdown list", "description": "Dropdown list", "details": {"Label": "Where do you want to skip?", "Helper text": "Select room. The group containing this room will skip to the previous track.", "Slug": "room", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.previousTrack.setRoom(\"Living Room\");\n  Sonos.previousTrack.skip();\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, skip to the previous track in the Living Room on Sonos."}
{"original_description": "Set scene for Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.set_scene", "Filter code method": "Yeelight.setScene.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.set_scene\", {})"}, "action_details": [{"section": "Action fields", "title": "Bundle\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which scene?", "Slug": "bundle_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Yeelight.setScene.setBundleId(\"Movie\");\n} else {\n  Yeelight.setScene.skip(\"Incorrect gesture or device.\");\n}", "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, set the Yeelight scene to Movie."}
{"original_description": "Change the color temperature of a light bulb.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.change_color_temp", "Filter code method": "Kasa.changeColorTemp.skip(string?: reason)", "Runtime method": "runAction(\"kasa.change_color_temp\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color Temperature", "Slug": "color_temperature", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setColor Temperature(string: color_temperature)"}}, {"section": "Action fields", "title": "Kelvin\nDropdown list", "description": "Dropdown list", "details": {"Label": "Kelvin", "Helper text": "If set, kelvin value will override the color temperature.", "Slug": "kelvin", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setKelvin(string: kelvin)"}}, {"section": "Action fields", "title": "Transition duration\nDropdown list", "description": "Dropdown list", "details": {"Label": "Transition duration", "Helper text": "How long should it take for the lights to transition between colors.", "Slug": "transition_duration", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setTransition Duration(string: transition_duration)"}}, {"section": "Action fields", "title": "Advanced options\nText input > Other", "description": "Text input > Other", "details": {"Label": "Advanced options", "Helper text": "Provide custom options here. For example : &quot;color_temperature: cool; transition_duration: 3000” for cool and 3 seconds transition duration or “kelvin: 5000; transition_duration: 2000” for temperature of 5000K and 2 seconds transition duration", "Slug": "advanced_options", "Required": "false", "Can have default value": "true", "Filter code method": "Kasa.changeColorTemp.setAdvanced Options(string: advanced_options)"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Kasa.changeColorTemp.setDevice(\"Living Room Light bulb\");\n  Kasa.changeColorTemp.setColorTemperature(\"Cool White\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n}", "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, change the color temperature of the Living Room Light bulb to Cool White with a transition duration of 2 seconds."}
{"original_description": "Change brightness for Yeelight.", "trigger_channel": "Knocki", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "knocki.knocki"}, "trigger_details": [{"section": "Trigger fields", "title": "Code\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "ID", "Helper text": "Create a unique ID with no spaces. This ID is used to reference this trigger from the Knocki app.", "Slug": "code", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Knocki.knocki.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device\nYour Device ID", "description": "Your Device ID", "details": {"Slug": "device", "Filter code": "Knocki.knocki.Device", "Type": "String", "Example": "KNC1-W-00000088"}}, {"section": "Ingredients", "title": "Gesture\nName of gesture", "description": "Name of gesture", "details": {"Slug": "gesture", "Filter code": "Knocki.knocki.Gesture", "Type": "String", "Example": "Triple Knock"}}, {"section": "Ingredients", "title": "Pattern\nGesture Pattern", "description": "Gesture Pattern", "details": {"Slug": "pattern", "Filter code": "Knocki.knocki.Pattern", "Type": "String", "Example": "***"}}], "action_channel": "Yeelight", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "yeelight.change_bright", "Filter code method": "Yeelight.changeBright.skip(string?: reason)", "Runtime method": "runAction(\"yeelight.change_bright\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which light?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Scene\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which brightness?", "Slug": "scene_id", "Required": "true", "Can have default value": "false"}}], "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\" && Meta.currentUserTime.hour() === 7) {\n  Yeelight.changeBright.setDeviceId(\"living_room_device_id\");\n  Yeelight.changeBright.setSceneId(\"50_percent_brightness_scene_id\");\n} else {\n  Yeelight.changeBright.skip(\"Gesture or device does not match, or it's not 07:00.\");\n}", "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, change the brightness of the Yeelight device in the living room to 50% at 07:00 every day."}
