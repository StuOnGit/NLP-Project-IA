[
  {
    "intent": "When the sunset at my location is between 16:00 and 20:00 and the current temperature in degrees Celsius is above 15, turn on all Philips Hue lights in the living room.",
    "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar tempCelsius = Weather.sunSets.TempCelsius;\nif (sunsetHour >= 16 && sunsetHour <= 20 && tempCelsius > 15) {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, toggle the Yeelight device.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Yeelight.onOff.setOnOffOption(\"toggle\");\n} else {\n  Yeelight.onOff.skip(\"Gesture or device does not match.\");\n}"
  },
  {
    "intent": "When a new item is added to Pocket with the tag \"article\" and the title contains the word \"productivity\", send an event to Welltory with the data source set to \"Pocket\", the data type set to \"reading\", the datetime set to the time the item was added, the value set to 1, and a comment describing the applet as \"Tracking productivity articles saved to Pocket\".",
    "filter_code": "if (Pocket.newItemAddedPocket.Tags.includes(\"article\") && Pocket.newItemAddedPocket.Title.toLowerCase().includes(\"productivity\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Pocket\")\n    .setDataType(\"reading\")\n    .setDatetime(Pocket.newItemAddedPocket.AddedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking productivity articles saved to Pocket\");\n} else {\n  Welltory.sendEvent.skip(\"Does not match the criteria.\");\n}"
  },
  {
    "intent": "When the \"iH\" button on the iHome device is pressed, either short or long press, turn all Philips Hue lights ON if they are currently OFF, or turn them OFF if they are currently ON.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  var currentHueStatus = Hue.getAllHueStatus();\n  if (currentHueStatus.every(function(light) { return light.on === false; })) {\n    Hue.toggleAllHue.setLights(\"all\").skip(\"All lights are already off\");\n  } else if (currentHueStatus.every(function(light) { return light.on === true; })) {\n    Hue.toggleAllHue.skip(\"All lights are already on\");\n  } else {\n    var allOn = currentHueStatus.every(function(light) { return light.on === true; });\n    var allOff = currentHueStatus.every(function(light) { return light.on === false; });\n    if (!allOn && !allOff) {\n      Hue.toggleAllHue.skip(\"Not all lights are in the same state\");\n    } else {\n      Hue.toggleAllHue.skip();\n    }\n  }\n}"
  },
  {
    "intent": "When a new note is created in my Evernote notebook named \"Personal Notes\" with the tag \"important\" and the title contains the word \"meeting\", send an event to Welltory with the data source set to \"Evernote\", data type set to \"Notes\", datetime set to the note's creation time, value set to 1, and comment set to \"New important meeting note added\".",
    "filter_code": "if (Evernote.newNoteInNotebook.notebook === \"Personal Notes\" && Evernote.newNoteInNotebook.Tags.includes(\"important\") && Evernote.newNoteInNotebook.Title.includes(\"meeting\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Evernote\")\n    .setDataType(\"Notes\")\n    .setDatetime(Evernote.newNoteInNotebook.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"New important meeting note added\");\n} else {\n  Welltory.sendEvent.skip(\"Note does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the humidity level is above 60% and the temperature is between 18°C and 22°C in New York, send a rich notification with the title \"Weather Alert\", message \"Humidity is high, consider taking necessary precautions\", link URL \"http://www.weather.com/weather/5-day/GMXX1273\", and image URL \"https://example.com/high-humidity-image.jpg\" to notify users to be prepared.",
    "filter_code": "if (Weather.currentHumidityRisesAbove.Humidity > 60 && Weather.currentHumidityRisesAbove.TempCelsius >= 18 && Weather.currentHumidityRisesAbove.TempCelsius <= 22 && Weather.currentHumidityRisesAbove.location === \"New York\") {\n  IfNotifications.sendRichNotification\n    .setMessage(\"Humidity is high, consider taking necessary precautions\")\n    .setTitle(\"Weather Alert\")\n    .setLinkUrl(\"http://www.weather.com/weather/5-day/GMXX1273\")\n    .setImageUrl(\"https://example.com/high-humidity-image.jpg\");\n} else {\n  IfNotifications.sendRichNotification.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new video is posted on Instagram with the tag #MorningMotivation, send an event to Welltory with the data source as \"Social Media\", data type as \"Engagement\", datetime set to the time the video was created, value as 1, and comment as \"New morning motivation video posted\".",
    "filter_code": "if (Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"#MorningMotivation\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Social Media\")\n    .setDataType(\"Engagement\")\n    .setDatetime(Instagram.newVideoByYouTaggedInstagram.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"New morning motivation video posted\");\n} else {\n  Welltory.sendEvent.skip(\"The video does not contain the #MorningMotivation tag.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp device when the sun sets in New York, and the current temperature is above 18°C.",
    "filter_code": "if (Weather.sunSets.TempCelsius > 18) {\n  BGHOME.powerState.setPowerControlChangePowerStateString(\"On\");\n  BGHOME.powerState.skip(\"Turning on Living Room Lamp in New York as sun sets and temperature is above 18°C.\");\n} else {\n  BGHOME.powerState.skip(\"Temperature not above 18°C, not turning on Living Room Lamp.\");\n}"
  },
  {
    "intent": "When motion is detected by the Arlo device named 48B14C740AD5E at any time, turn on the My Leviton Light device named Living Room Lamp.",
    "filter_code": "if (Arlo.motion.DeviceName === \"48B14C740AD5E\") {\n  MyLeviton.toggleSwitch.setPower(\"on\");\n  MyLeviton.toggleSwitch.setDeviceName(\"Living Room Lamp\");\n} else {\n  MyLeviton.toggleSwitch.skip(\"Motion not detected by device 48B14C740AD5E.\");\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, turn on all Lifx Lights with a fade-in duration of 5 seconds and set the brightness to 80%, using the color white.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Lifx.turnOn.setFadeInDuration(5);\n  Lifx.turnOn.setColor(\"white\");\n  Lifx.turnOn.setBrightness(0.8);\n}"
  },
  {
    "intent": "When the \"iH\" button on my iHome device is pressed, either as a short or long press, turn all Philips Hue Lights ON.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  if (IhomeEnhance.enhanceButton.press === \"Short press\" || IhomeEnhance.enhanceButton.press === \"Long press\") {\n    Hue.turnOnAllHue();\n  } else {\n    Hue.turnOffAllHue.skip(\"Only short or long presses trigger this action.\");\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Button name does not match 'iH'.\");\n}"
  },
  {
    "intent": "When the humidity level rises above 80% in New York, and the current temperature is above 18°C, set the living room Aurora to a deep blue color (#032B44).",
    "filter_code": "if (Weather.currentHumidityRisesAbove.Humidity > 80 && Weather.currentHumidityRisesAbove.TempCelsius > 18 && Weather.currentHumidityRisesAbove.location === \"New York\") {\n  Nanoleaf.changeColorRequest.setMyDevices(\"living room Aurora\");\n  Nanoleaf.changeColorRequest.setValue(\"#032B44\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the lights in the Living Room zone at sunset, overriding the current temperature setting to 72 degrees Fahrenheit for a duration of 120 minutes.",
    "filter_code": "if (Weather.sunSets.SunsetAt !== null) {\n  GeniusHub.zoneOverrideOnOff.setZone(\"Living Room\");\n  GeniusHub.zoneOverrideOnOff.setTemp(\"on\");\n  GeniusHub.zoneOverrideOnOff.setDuration(\"120\");\n  GeniusHub.zoneOverrideOnOff.skip(null);\n}"
  },
  {
    "intent": "Turn on the Living Room neoPlug at sunset when the temperature is above 18 degrees Celsius and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  Heatmiser.turnPlugOn.setWhichNeoPlug(\"Living Room\");\n} else {\n  Heatmiser.turnPlugOn.skip(\"Temperature not above 18 degrees Celsius or weather condition is not Sunny.\");\n}"
  },
  {
    "intent": "Send a notification with the image from https://example.com/image.png to all Triby devices every weekday at 08:00.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() !== 8) {\n  InvoxiaTriby.sendAnImageToEveryTriby.skip(\"Not 08:00\");\n} else {\n  InvoxiaTriby.sendAnImageToEveryTriby.setImageUrl(\"https://example.com/image.png\");\n}"
  },
  {
    "intent": "Turn on the Philips Hue living room lights when motion is detected by the Mydlink Living room camera between 18:00 and 06:00.",
    "filter_code": "var hour = new Date(Mydlink.motionDetection.CreatedAt).getHours();\nif (Mydlink.motionDetection.DeviceName === \"Living room camera\" && (hour >= 18 || hour < 6)) {\n  PhilipsHue.turnOn Lights(\"Living room lights\");\n} else {\n  PhilipsHue.turnOnLights.skip(\"Not the living room camera or outside of desired hours.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp when the outside temperature in New York drops below 40°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 40 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Idevices.turnDeviceOn.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnDeviceOn.skip(\"Conditions not met to turn on the Living Room Lamp.\");\n}"
  },
  {
    "intent": "When the temperature in New York City exceeds 85 degrees Fahrenheit and the current weather condition is Sunny, turn on my Ambi Climate device named Living Room A/C to comfort mode.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 85 && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\" && Weather.currentTemperatureDropsBelow.location === \"New York City\") {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room A/C\");\n} else {\n  Ambiclimate.deviceModeComfort.skip(\"Conditions not met to turn on the A/C.\");\n}"
  },
  {
    "intent": "Turn on the Yeelight device named \"Living Room Lamp\" when Withings Sleep detects that Tom gets out of bed between 07:00 and 22:00.",
    "filter_code": "var hour = new Date(WithingsSleep.bedout.DateandTime).getHours();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nvar deviceName = \"Living Room Lamp\";\n\nif (deviceUser === \"Tom\" && hour >= 7 && hour < 22) {\n  Yeelight.onOff.setDeviceId(deviceName);\n  Yeelight.onOff.setOnOffOption(\"on\");\n} else {\n  Yeelight.onOff.skip(\"Not Tom or outside of time range.\");\n}"
  },
  {
    "intent": "When the sunset at your location is at 7:45 PM and the current temperature is 18 degrees Celsius, update the Apilio variable \"Sunset_Notification\" to true.",
    "filter_code": "if (Weather.sunSets.SunsetAt.getHours() === 19 && Weather.sunSets.SunsetAt.getMinutes() === 45 && Weather.sunSets.TempCelsius === \"18\") {\n  Apilio.booleanVariableToTrueUpdates.skip();\n} else {\n  Apilio.booleanVariableToTrueUpdates.setVariableIdentifier(\"Sunset_Notification\");\n}"
  },
  {
    "intent": "When the sun rises at my location, which is New York City, and the current temperature is above 60 degrees Fahrenheit, update the Apilio variable \"SunriseNotification\" to true, so I can use this information in my Conditions and Logicblocks to trigger further actions.",
    "filter_code": "if (Weather.sunRises.SunriseAt && Weather.sunRises.TempFahrenheit > 60) {\n  Apilio.booleanVariableToTrueUpdates.setVariableIdentifier(\"SunriseNotification\");\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Conditions not met for SunriseNotification.\");\n}"
  },
  {
    "intent": "Send a notification to my phone with the message \"New game on sale: Launch Day! http://itch.io/game/123\" whenever a new game is posted on Itch.io with a title like \"Launch Day!\" and an entry URL starting with \"http://itch.io/\", between 08:00 and 20:00, so I can stay up-to-date with the latest deals.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 20) {\n  if (Itchio.recentGamesOnSales.EntryTitle.indexOf(\"Launch Day!\") !== -1 && Itchio.recentGamesOnSales.EntryUrl.startsWith(\"http://itch.io/\")) {\n    var message = \"New game on sale: \" + Itchio.recentGamesOnSales.EntryTitle + \" \" + Itchio.recentGamesOnSales.EntryUrl;\n    IfNotifications.sendNotification.setMessage(message);\n  } else {\n    IfNotifications.sendNotification.skip(\"Game title or URL does not match.\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of notification hours (8 AM to 8 PM).\");\n}"
  },
  {
    "intent": "Turn on my Ambi Climate device, named \"Living Room A/C\", every day at 3:00 PM with the Ambi Climate app.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"3:00 PM\";\nif (currentTime !== targetTime) {\n  Ambiclimate.deviceModeComfort.skip(\"Not the scheduled time\");\n} else {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room A/C\");\n}"
  },
  {
    "intent": "Turn ON the garden lights in Futurehome by running the 'Garden Lights Sunset' shortcut when the sunset time is reached at the location of 40.7128° N, 74.0060° W, as provided by Weather Underground, and the current weather condition is Sunny.",
    "filter_code": "if (Weather.sunSets.Condition === \"Sunny\" &&\n    Weather.sunSets.SunsetAt.getHours() === new Date().getHours() &&\n    Weather.sunSets.SunsetAt.getMinutes() === new Date().getMinutes()) {\n  Futurehome.runShortcut.setShortcut(\"Garden Lights Sunset\");\n} else {\n  Futurehome.runShortcut.skip(\"Condition not met or not sunset time yet.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Hue lights when the Nexia automation named \"Good Morning\" is triggered in the house called \"Home\".",
    "filter_code": "if (Nexia.nexiaAutomation.NexiaAutomationName === \"Good Morning\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n  Hue.turnOnHue.setLights(\"Living Room\");\n} else {\n  Hue.turnOnHue.skip(\"Nexia automation or house does not match.\");\n}"
  },
  {
    "intent": "Turn on the heat pump to heat when the outside temperature in New York drops below 50°F, and set the operation mode to \"HEAT\" with a temperature of 72°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 50 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"HEAT\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setAdjustTemperature(72);\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature in New York is not below 50°F.\");\n}"
  },
  {
    "intent": "Turn on my Nanoleaf lights in the living room when the SmartThings motion sensor named 'Living Room Sensor' detects motion between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = SmartthingsV2.anyNewMotionSmartthings.DeviceName;\nif (deviceName === \"Living Room Sensor\" && hour >= 7 && hour < 22) {\n  // No action to skip, as the intent is to turn on the lights\n} else {\n  Nanoleaf.turnOnRequest.skip(\"Either not the Living Room Sensor or outside of desired hours (07:00-22:00).\");\n}"
  },
  {
    "intent": "When a new photo post is published on the \"staff\" Tumblelog, send an event to Welltory with the data source set to \"Tumblr\", the data type set to \"Photo Post\", the datetime set to the post's creation time (e.g., 2022-01-01T12:00:00+00:00), the value set to \"1\" for one entry per event, and a comment describing the applet as \"Tracking photo posts on staff Tumblelog\".",
    "filter_code": "if (Tumblr.newPhotoPost.Tumblelog === \"staff\") {\n  Welltory.sendEvent\n    .setDataSource(\"Tumblr\")\n    .setDataType(\"Photo Post\")\n    .setDatetime(Tumblr.newPhotoPost.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking photo posts on staff Tumblelog\");\n} else {\n  Welltory.sendEvent.skip(\"Tumblelog is not 'staff'\");\n}"
  },
  {
    "intent": "Turn on the Living Room Light device when the sun rises in New York and the current temperature is above 60 degrees Fahrenheit.",
    "filter_code": "if (Weather.sunRises.TempFahrenheit > 60) {\n  BGHOME.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  BGHOME.powerState.skip(\"Temperature is not above 60 degrees Fahrenheit.\");\n}"
  },
  {
    "intent": "When the SpotCam Ring named \"Front Door\" detects motion at any time, turn on all Philips Hue lights in the living room.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOnAllHue.setLights(\"living room\");\n}"
  },
  {
    "intent": "Turn on the Kitchen Lamp when the outside temperature in New York rises above 75°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit <= 75) {\n  Idevices.turnDeviceOn.skip(\"Outside temperature is not above 75°F.\");\n} else {\n  var location = \"New York\";\n  var device = \"Kitchen Lamp\";\n  if (location === \"New York\" && device === \"Kitchen Lamp\") {\n    // No need to skip, let the action proceed\n  }\n}"
  },
  {
    "intent": "When the Bedroom lock is unlocked, turn on the Living Room Light.",
    "filter_code": "if (SmartthingsV2.unlockedSmartthings.DeviceName === \"Bedroom lock\") {\n  Kasa.turnOn();\n} else {\n  Kasa.turnOn.skip(\"Not the Bedroom lock\");\n}"
  },
  {
    "intent": "Turn on the living room lamp when the sunset time is between 16:00 and 20:00 in New York, and the current temperature is below 15°C.",
    "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar currentTempCelsius = Weather.sunSets.TempCelsius;\nif (sunsetHour >= 16 && sunsetHour <= 20 && currentTempCelsius < 15) {\n  // No need to skip, this is the condition to turn on the device\n} else {\n  AduroSmart.turnondevice.skip(\"Sunset time or temperature does not meet criteria.\");\n}"
  },
  {
    "intent": "Turn on the air conditioner to cool when the outside temperature in New York drops below 75 degrees Fahrenheit.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 75) {\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"Cool\");\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is not below 75 degrees Fahrenheit.\");\n}"
  },
  {
    "intent": "When the \"Kitchen Lights\" button on your iHome device is pressed with a long press, turn ON the \"Living Room\" in your Leviton room setup.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"Kitchen Lights\" && IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  MyLeviton.toggleRoomOn.setRoom(\"Living Room\");\n} else {\n  MyLeviton.toggleRoomOn.skip(\"Button name or press type does not match.\");\n}"
  },
  {
    "intent": "When the Litter-Robot named \"My Litter Robot\" is full, as indicated by the \"Litter robot is full\" event type, play the Sonos favorite \"Relaxing Music\" in the room \"Living Room\" and include grouped rooms.",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Litter robot is full\") {\n  Sonos.playFavorite.setFavorite(\"Relaxing Music\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the Philips Hue lights in the living room when the FIBARO motion sensor detects movement between 07:00 and 22:00, but only if the motion is detected by device ID 12345.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  if (Fibaro.motionDetected.DeviceId === \"12345\") {\n    PhilipsHue.turnOnLights.setLights(\"Living Room\");\n  } else {\n    PhilipsHue.turnOnLights.skip(\"Motion detected by wrong device.\");\n  }\n} else {\n  PhilipsHue.turnOnLights.skip(\"Outside of desired hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "Turn on my eWeLink Smart Home device, \"Living Room Charger\", when the battery percentage of my Google Pixel 7 drops below 15%.",
    "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage < 15 && AndroidBattery.batteryLow.DeviceName === \"Google Pixel 7\") {\n  Ewelink.lightSwitchAction.setDevice(\"Living Room Charger\");\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Send a text message to phone number +1-555-1234 when the Living room AC is turned on, with the message \"The Living room AC has been turned on in auto mode at 07:00\" if the operation mode value is 2 and the trigger check finished-at time stamp is between 07:00 and 19:00.",
    "filter_code": "var phoneNumber = \"+1-555-1234\";\nvar deviceName = FujitsuGeneralLimited.whenAcIsOn.DeviceName;\nvar operationModeValue = FujitsuGeneralLimited.whenAcIsOn.OperationMode;\nvar triggerFinishedAt = new Date(FujitsuGeneralLimited.whenAcIsOn.TriggerFinishedAt);\nvar hours = triggerFinishedAt.getHours();\nvar message;\n\nif (deviceName === \"Living room AC\" && operationModeValue === \"2\" && hours >= 7 && hours <= 19) {\n  message = `The Living room AC has been turned on in auto mode at ${triggerFinishedAt.toLocaleTimeString()}`;\n  AndroidMessages.sendAMessage.setText(message);\n  AndroidMessages.sendAMessage.setPhoneNumber(phoneNumber);\n} else {\n  AndroidMessages.sendAMessage.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Play the song \"Happy\" by Pharrell Williams on my Android device when I perform a Triple Knock gesture on my Knocki device.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\") {\n  AndroidDevice.playSong.setQuery(\"Happy by Pharrell Williams\");\n} else {\n  AndroidDevice.playSong.skip(\"Wrong gesture. Expected 'Triple Knock'.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Fan device through Fanimation when the temperature in New York rises above 82°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 82) {\n  Fansync.onOff.setDevice(\"Living Room Fan\");\n  Fansync.onOff.setOnOff(\"on\");\n}"
  },
  {
    "intent": "Turn on the lights in the Living Room every day at 7:00 PM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 PM\";\nif (checkTime !== targetTime) {\n  Noonhome.changeScene.skip(\"Not the targeted time for turning on lights.\");\n} else {\n  Noonhome.changeScene.setSceneInSpace(\"Living Room\");\n}"
  },
  {
    "intent": "Record the activity of your Living Room Light iotty device in a Google Sheets spreadsheet named \"iotty_Smart_Home_Log\" whenever it is turned on or off, by appending a new row with the device name, light state, source of the action, and the exact date and time of the event, in the format \"Device Name|||Light State|||Source|||Created At\", to a spreadsheet located in the \"Smart Home/Logs\" folder.",
    "filter_code": "if (Iottysmarthome.deviceOnOff.DeviceName === \"Living Room Light\") {\n  var row = Iottysmarthome.deviceOnOff.DeviceName + \"|||\" + Iottysmarthome.deviceOnOff.LightState + \"|||\" + Iottysmarthome.deviceOnOff.Source + \"|||\" + Iottysmarthome.deviceOnOff.CreatedAt;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"iotty_Smart_Home_Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(row);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Smart Home/Logs\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Device is not the Living Room Light\");\n}"
  },
  {
    "intent": "When a new like is received on Tumblr for a post titled \"My Morning Routine\" from the tumblelog \"staff\", send an event to Welltory with the data source set to \"Social Media\", data type set to \"Engagement\", datetime set to the time the like was created, value set to 1, and a comment describing the applet as \"Tracking likes on Tumblr posts\".",
    "filter_code": "if (Tumblr.newLike.PostTitle === \"My Morning Routine\" && Tumblr.newLike.Tumblelog === \"staff\") {\n  Welltory.sendEvent\n    .setData_source(\"Social Media\")\n    .setDataType(\"Engagement\")\n    .setDatetime(Tumblr.newLike.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking likes on Tumblr posts\");\n}"
  },
  {
    "intent": "Turn on the living room remote when the temperature in New York rises above 75°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  Aico.runRemote.skip(\"Temperature is above 75°F, turning on living room remote.\");\n} else {\n  Aico.runRemote.setKeyId(\"living_room_remote\");\n}"
  },
  {
    "intent": "Turn on the Living Room TP-LINK Kasa light when motion is detected by the Front Door Swann Camera between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceId = \"Living Room\"; // Assuming this is how you identify your device in Kasa\nvar cameraDeviceId = \"Front Door\"; // Identify the specific Swann Camera device that detected motion\n\nif (hour >= 7 && hour <= 19 && Swannsecurity.motionDetected.OnDeviceId === cameraDeviceId) {\n  Kasa.turnOn.setDevice(deviceId);\n} else {\n  Kasa.turnOn.skip(\"Either outside of desired hours or wrong camera triggered.\");\n}"
  },
  {
    "intent": "Turn on the living room Hue lights when the Flic button named 'Office Button' is double-clicked between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"Office Button\" && hour >= 7 && hour < 19) {\n  Hue.toggleAllHue.setLights(\"Living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Boost the ventilation system using myUplink when the carbon dioxide level measured by my Netatmo Weather Station, specifically at \"My Home - Indoor station\", rises above 1200 parts per million.",
    "filter_code": "if (Netatmo.co2RisesAbove.DeviceName === \"My Home - Indoor station\" && parseInt(Netatmo.co2RisesAbove.MeasuredCO2) > 1200) {\n  Myuplink.boostVentilation.setDevice(\"My Ventilation System\");\n} else {\n  Myuplink.boostVentilation.skip(\"Carbon dioxide levels are not high enough or the measurement is from a different device.\");\n}"
  },
  {
    "intent": "Turn on the Smart Home Solution device at the Office address when motion is suspected between 07:00 and 19:00, given that the event type is \"motionDetection.motion.started\" and the device serial number is ABCDEF.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventType = AerialTechnologies.motionDetectionMotionStarted.Type;\nvar serialNumber = AerialTechnologies.motionDetectionMotionStarted.Serial;\n\nif (hour >= 7 && hour < 19 && eventType === \"motionDetection.motion.started\" && serialNumber === \"ABCDEF\") {\n  SmartHomeSolution.turnDeviceOn.setDeviceAddress(\"Office address\");\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new article titled like \"Launch Day!\" is published in the ifttt Blog feed at http://blog.ifttt.com/, save the full article content, including any images like http://ifttt.com/images/no_image_card.png, to Pocket with tags \"news, updates\" for later reading.",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.EntryTitle === \"Launch Day!\" && Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"news, updates\");\n} else {\n  Pocket.readItLater.skip(\"Article does not match the specified title or feed.\");\n}"
  },
  {
    "intent": "When the price of the \"IFTTT\" app drops, send a notification with the message \"The IFTTT app is now on sale for $0.99, down from $9.99, and has a 5-star rating in the Productivity category.\"",
    "filter_code": "if (AppStore.appPriceDropped.Name === \"IFTTT\" && AppStore.appPriceDropped.Price === \"$0.99\" && AppStore.appPriceDropped.Rating === \"5 stars\" && AppStore.appPriceDropped.Category === \"Productivity\") {\n  IfNotifications.sendNotification.setMessage(\"The IFTTT app is now on sale for $0.99, down from $9.99, and has a 5-star rating in the Productivity category.\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn on the SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.skip();\n}"
  },
  {
    "intent": "If the SpotCam Ring named \"Front Door\" detects sound at any time, then turn on all Philips Hue lights in the living room.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOnAllHue.setLights(\"living room\");\n}"
  },
  {
    "intent": "When the Bedroom sensor device detects presence in SmartThings, automatically open the Main Garage Door using Garadget.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Not the Bedroom sensor device.\");\n}"
  },
  {
    "intent": "Turn on the living room air conditioning at 15:00 every day.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar desiredTime = \"15:00\";\nif (checkTime.getHours() === 15 && checkTime.getMinutes() === 0) {\n  Airtouch.acPower.setPowerOnOff(\"on\");\n  Airtouch.acPower.skip();\n} else {\n  Airtouch.acPower.skip(\"Not the desired time\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp at 07:00 and off at 19:00 every day to make your home look occupied.",
    "filter_code": "var currentTime = DateAndTime.everyHourAt.CheckTime;\nvar hour = currentTime.hour();\n\nif (hour == 7) {\n  Kasa.toggle.setDevice(\"Living Room Lamp\");\n} else if (hour == 19) {\n  Kasa.toggle.skip(\"Turn off the Living Room Lamp at 19:00\");\n  Kasa.toggle.setDevice(\"Living Room Lamp\");\n}"
  },
  {
    "intent": "Turn on the Living Room Light Nexus device at 7:00 AM and turn it off at 10:00 PM every day.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetOnTime = \"7:00 AM\";\nvar targetOffTime = \"10:00 PM\";\nvar deviceName = \"Living Room Light\";\n\nif (currentTime === targetOnTime) {\n  BrilliantNexus.devices.setStatus(\"ON\");\n} else if (currentTime === targetOffTime) {\n  BrilliantNexus.devices.setStatus(\"OFF\");\n} else {\n  BrilliantNexus.devices.skip(\"Not the scheduled time to turn the device on or off.\");\n}"
  },
  {
    "intent": "Log new businesses from Yelp in the San Francisco area, sorted by distance, into a Google Sheets spreadsheet named \"New SF Businesses\" with columns for business name, category, rating, phone number, and address, whenever a new business is found.",
    "filter_code": "if (Yelp.hotAndNewBusiness.Location === \"San Francisco\" && Yelp.hotAndNewBusiness.SortBy === \"distance\") {\n  var row = Yelp.hotAndNewBusiness.BusinessName + \"|||\" + Yelp.hotAndNewBusiness.BusinessCategory + \"|||\" + Yelp.hotAndNewBusiness.BusinessRating + \"|||\" + Yelp.hotAndNewBusiness.BusinessPhone + \"|||\" + Yelp.hotAndNewBusiness.BusinessAddress;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"New SF Businesses\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(row);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/New SF Businesses\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Does not match San Francisco area or distance sort.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp when an Apilio event named \"run_only_at_nighttime\" is received between 19:00 and 06:00 with a custom value of \"Green\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" &&\n    ((hour >= 19) || (hour <= 6)) &&\n    apilioValue1 === \"Green\") {\n  // Do nothing, let the action proceed\n} else {\n  LightwaverfLighting.switchOnLight.skip(\"Conditions not met for turning on the Living Room Lamp.\");\n}"
  },
  {
    "intent": "When the IFTTT app on the Apple App Store releases a new update with version 3.0.0, send a notification with the message \"IFTTT app updated to version 3.0.0: + We made some improvements to the user interface and fixed several bugs.\" including the release notes and current rating of 4.5 stars.",
    "filter_code": "if (AppStore.newAppVersionReleased.Name === \"IFTTT\" && AppStore.newAppVersionReleased.Version === \"3.0.0\") {\n  var message = `IFTTT app updated to version 3.0.0: ${AppStore.newAppVersionReleased.ReleaseNotes} Current rating: ${AppStore.newAppVersionReleased.Rating}`;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the heating scenario in Gideon when the temperature drops below 18 degrees Celsius at home.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 18) {\n  Gideon.launchScenario.setScenarioName(\"Heating\");\n} else {\n  Gideon.launchScenario.skip(\"Temperature is not below 18 degrees Celsius.\");\n}"
  },
  {
    "intent": "Every Monday, save an amount in a Monzo pot, where the amount decreases by £1 each week, starting with £52 in Week 1 and going down to £1 in Week 52.",
    "filter_code": "var week_of_year = Meta.currentUserTime.format('w');\nvar week_number = parseInt(week_of_year);\nvar day_of_week = DateAndTime.everyWeekdayAt.DayOfWeek;\nif (day_of_week === \"Monday\") {\n  var amount = (53 - week_number);\n  if (amount > 0) {\n    Monzo.potDeposit.setAmount(amount.toFixed(2));\n  } else {\n    Monzo.potDeposit.skip(\"No more savings for this year.\");\n  }\n}"
  },
  {
    "intent": "Mute your Android phone when a triple knock gesture is detected on the Knocki device KNC1-W-00000088.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  AndroidDevice.muteDevice.setVibrate(\"off\");\n} else {\n  AndroidDevice.muteDevice.skip(\"Gesture or device does not match.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor no longer detects your presence, set the Nanoleaf Light Panels in the living room to white (#FFFFFF) and dim them down to 30% brightness.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Nanoleaf.changeColorRequest.skip(\"Bedroom sensor no longer detects presence\");\n} else {\n  Nanoleaf.changeColorRequest.setValue(\"white\");\n  Nanoleaf.changeColorRequest.setBrightness(30);\n}"
  },
  {
    "intent": "Cancel the StandBy Mode on the Heatmiser Thermostat in the Living Room when an Apilio event named \"wake_up\" is triggered at 07:00 with a custom Value1 set to \"Morning\" and Value2 set to \"Heating\".",
    "filter_code": "if (Apilio.iftttActionReports.EventName === \"wake_up\"\n    && Apilio.iftttActionReports.CreatedAt.getHours() === 7\n    && Apilio.iftttActionReports.ApilioValue1 === \"Morning\"\n    && Apilio.iftttActionReports.ApilioValue2 === \"Heating\"\n    && which_room === \"Living Room\") {\n  // No need to skip, this is the condition to run the action\n} else {\n  Heatmiser.cancelStandby.skip(\"Conditions not met to cancel StandBy Mode.\");\n}"
  },
  {
    "intent": "Send a weekly email digest to my inbox every Friday at 08:00 with a roundup of New York Times articles matching the search term \"NASA\", including the article title, author, blurb, and URL, with the email titled \"Friday NASA Roundup\" and a message containing a brief summary of each article.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 5) { // 5 represents Friday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\n\nvar searchTerm = \"NASA\";\nif (Nytimes.newArticleMatchingSearch.Title.includes(searchTerm) ||\n    Nytimes.newArticleMatchingSearch.Author.includes(searchTerm) ||\n    Nytimes.newArticleMatchingSearch.Blurb.includes(searchTerm) ||\n    Nytimes.newArticleMatchingSearch.ArticleUrl.includes(searchTerm)) {\n  var title = \"Friday NASA Roundup\";\n  var message = \"Here's your weekly roundup of New York Times articles about NASA:<br>\";\n  message += \"<b>\" + Nytimes.newArticleMatchingSearch.Title + \"</b> by \" + Nytimes.newArticleMatchingSearch.Author + \":<br>\";\n  message += Nytimes.newArticleMatchingSearch.Blurb + \"<br>\";\n  message += \"Read more: <a href='\" + Nytimes.newArticleMatchingSearch.ArticleUrl + \"'>Article</a><br>\";\n\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendWeeklyEmail.setTitle(title);\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No NASA articles found.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00 with a custom Value 1 set to \"Green\" and Value 2 set to \"Blue\", toggle on or off the Philips Hue lights in the living room.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar value1 = Apilio.iftttActionReports.ApilioValue1;\nvar value2 = Apilio.iftttActionReports.ApilioValue2;\n\nif (eventName === \"run_only_at_nighttime\" &&\n    (hour >= 20 || hour < 6) &&\n    value1 === \"Green\" &&\n    value2 === \"Blue\") {\n  Hue.toggleAllHue.setLights(\"Living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 received from Apilio is \"Green\", activate the StandBy Mode on the Heatmiser Thermostat in the room named \"Living Room\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\nvar whichRoom = \"Living Room\";\n\nif (eventName === \"run_only_at_nighttime\" &&\n    (hour >= 20 || hour < 6) &&\n    apilioValue1 === \"Green\") {\n  Heatmiser.setStandby.setWhichRoom(whichRoom);\n} else {\n  Heatmiser.setStandby.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Receive \"Rain Ahead\" when tomorrow's forecast in New York calls for rain with a high temperature of 60°F and a low of 45°F.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Xtactor.vibrate.setVibrateMessage(\"Rain Ahead\");\n} else {\n  Xtactor.vibrate.skip(\"Conditions do not match.\");\n}"
  },
  {
    "intent": "When the IFTTT app releases a new update on the Apple App Store, append a new row to a Google Sheets spreadsheet named \"App Updates\" with the formatted row containing the app's name, version, release notes, and current price, and save the spreadsheet in the \"IFTTT/Apple Apps\" folder.",
    "filter_code": "if (AppStore.newAppVersionReleased.Name === \"IFTTT\") {\n  var formattedRow = AppStore.newAppVersionReleased.Name + \"|||\" + AppStore.newAppVersionReleased.Version + \"|||\" + AppStore.newAppVersionReleased.ReleaseNotes + \"|||\" + AppStore.newAppVersionReleased.Price;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"App Updates\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Apple Apps\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"The app is not IFTTT.\");\n}"
  },
  {
    "intent": "When the button widget on your mobile device is tapped at a location with latitude 37.8267 and longitude -122.4230, change Hubitat's mode to \"Home\" if the tap occurs between 07:00 and 19:00, or to \"Night\" otherwise.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (lat === \"37.8267\" && lon === \"-122.4230\") {\n  if (hour >= 7 && hour < 19) {\n    Hubitat.actionMode.setMode(\"Home\");\n  } else {\n    Hubitat.actionMode.setMode(\"Night\");\n  }\n} else {\n  Hubitat.actionMode.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When a new article titled \"My Morning Routine\" with the URL http://blog.ifttt.com and tags \"productivity, morning\" is added to Pocket at 07:00, transfer $5 toward the \"Weekly Rewards\" goal in Qapital.",
    "filter_code": "if (Pocket.newReadItemRil.Title === \"My Morning Routine\"\n    && Pocket.newReadItemRil.Url === \"http://blog.ifttt.com\"\n    && Pocket.newReadItemRil.Tags.includes(\"productivity\")\n    && Pocket.newReadItemRil.Tags.includes(\"morning\")\n    && Meta.currentUserTime.hour() === 7) {\n  Qapital.saveTowardGoal.setGoal(\"Weekly Rewards\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Every Monday morning at 8:00 AM, send a weekly email digest with the title \"Fact Checker Weekly Update\" and a message containing the latest article titles and URLs from the Fact Checker RSS feed, including images and authors, to stay informed about the latest news and updates.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Monday\") {\n  var hour = Meta.currentUserTime.hour();\n  if (hour === 8) {\n    var title = \"Fact Checker Weekly Update\";\n    var message = \"\";\n    message += \"<h1>Latest Articles from Fact Checker:</h1><ul>\";\n    message += \"<li><a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryTitle + \"</a> by \" + Feed.newFeedItem.EntryAuthor + \"</li>\";\n    message += \"</ul>\";\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Monday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"8:00 AM\");\n    EmailDigest.sendWeeklyEmail.setTitle(title);\n    EmailDigest.sendWeeklyEmail.setMessage(message);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"Not 8:00 AM on Monday\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Monday\");\n}"
  },
  {
    "intent": "Send a weekly email digest with Star Trek gifs to my inbox every Monday at 08:00, including an in-line GIF in the body of the email with the title \"Star Trek Monday Motivation\" and the message \"Live long and prosper, have a great week! 🖖\".",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Monday\") {\n  var hour = Meta.currentUserTime.hour();\n  if (hour === 8) {\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Monday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n    EmailDigest.sendWeeklyEmail.setTitle(\"Star Trek Monday Motivation\");\n    EmailDigest.sendWeeklyEmail.setMessage(\"Live long and prosper, have a great week! \" + Giphy.search.EmailHTML);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"Not the correct time of day.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Monday.\");\n}"
  },
  {
    "intent": "When a new status message is posted on the Facebook page named \"The ifttt Office\" with a message containing the keyword \"update\", add a new entry to a Google Sheets spreadsheet titled \"Facebook Status Updates\" in the folder path \"IFTTT/Social Media\" with a formatted row including the status message, updated at time, and page URL, separated by \"|||\", such as \"Is having an awesome time!|||August 23, 2024 at 11:01PM|||http://www.facebook.com/pages/The-ifttt-office/108073145941483\".",
    "filter_code": "if (FacebookPages.newStatusMessageByPage.PageName === \"The ifttt Office\" && FacebookPages.newStatusMessageByPage.Message.includes(\"update\")) {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Facebook Status Updates\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Social Media\");\n  var formattedRow = FacebookPages.newStatusMessageByPage.Message + \"|||\" + FacebookPages.newStatusMessageByPage.UpdatedAt + \"|||\" + FacebookPages.newStatusMessageByPage.PageUrl;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Does not match the specified page or keyword.\");\n}"
  },
  {
    "intent": "When the \"iH\" button on the iHome device is pressed, either short or long, turn off all Philips Hue lights.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\" && (IhomeEnhance.enhanceButton.press === \"Short press\" || IhomeEnhance.enhanceButton.press === \"Long press\")) {\n  Hue.turnOnAllHue.skip(\"Turning off all Philips Hue lights as 'iH' button was pressed on iHome device.\");\n}"
  },
  {
    "intent": "When the pusher on your Kronaby watch is double pressed, add a new row to your Google Sheets spreadsheet named \"Location Log\" with the formatted row containing the current latitude, longitude, and time of press, separated by \"|||\", and store this spreadsheet in the \"IFTTT/Kronaby Logs\" folder.",
    "filter_code": "if (Kronaby.pusherPressed.PressType !== \"double\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Push type was not double press.\");\n}\n\nvar formattedRow = Kronaby.pusherPressed.Latitude + \"|||\" + Kronaby.pusherPressed.Longitude + \"|||\" + Kronaby.pusherPressed.PressedAt;\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Location Log\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Kronaby Logs\");"
  },
  {
    "intent": "When the button on your mobile device is tapped at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, set the level of the Hubitat dimmer device named \"Living Room Light\" to 75%, changing at a rate of 50%.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour <= 19 && latitude == \"37.8267\" && longitude == \"-122.4230\") {\n  Hubitat.actionSetLevel.setLevel(\"75%\");\n  Hubitat.actionSetLevel.setRate(\"50%\");\n  Hubitat.actionSetLevel.setDevice(\"Living Room Light\");\n} else {\n  Hubitat.actionSetLevel.skip(\"Outside of specified conditions.\");\n}"
  },
  {
    "intent": "Get a notification on your mobile phone from the IFTTT app when a new entry is submitted to your JotForm \"My Contact Form\" with the question filter set to \"Email\", including the form respondent's detected IP address, submission date and time, total submissions, and rich text data in a tabulated HTML format, and send this information as a message to your device.",
    "filter_code": "if (Jotform.latestFormSubmission.FormTitle === \"My Contact Form\" && Jotform.latestFormSubmission.FilteredRichTextData.includes(\"Email\")) {\n  var message = \"New submission from IP address: \" + Jotform.latestFormSubmission.IP + \"\\nSubmitted on: \" + Jotform.latestFormSubmission.SubmissionDateTime + \"\\nTotal submissions: \" + Jotform.latestFormSubmission.TotalSubmissions + \"\\nForm data:\\n\" + Jotform.latestFormSubmission.RichTextData;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"No new submission matches the filter criteria.\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring at 04:17:06+05:00, disarm the Blink system named \"Home Security\" with the reason \"Button Press\".",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" && DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\") {\n  Blink.networkDisarm.setNetwork(\"Home Security\");\n  Blink.networkDisarm.skip(\"Button Press\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, disarm the SkylinkNet alarm on hub \"Living Room\" with password \"MySecurePassword\" and set it to \"Disarmed\" mode.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Skylinknet.alarm.setAlarm(\"Disarmed\");\n  Skylinknet.alarm.setHubId(\"Living Room\");\n  Skylinknet.alarm.setKey(\"MySecurePassword\");\n} else {\n  Skylinknet.alarm.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Send a weekly email digest every Sunday at 10:00 AM with the title \"New Restaurants in San Francisco\" and a message containing the business name, address, phone number, and rating of newly opened restaurants in the area sorted by highest rated, including a link to the business page on Yelp.",
    "filter_code": "if (Meta.currentUserTime.day() === \"Sunday\" && Meta.currentUserTime.hour() === 10) {\n  var businessName = Yelp.hotAndNewBusiness.BusinessName;\n  var businessAddress = Yelp.hotAndNewBusiness.BusinessAddress;\n  var businessPhone = Yelp.hotAndNewBusiness.BusinessPhone;\n  var businessRating = Yelp.hotAndNewBusiness.BusinessRating;\n  var businessUrl = \"https://www.yelp.com/biz/\" + Yelp.hotAndNewBusiness.BusinessId;\n\n  EmailDigest.sendWeeklyEmail.setTitle(\"New Restaurants in San Francisco\");\n  EmailDigest.sendWeeklyEmail.setMessage(\n    \"<b>\" + businessName + \"</b><br/>\" +\n    \"Address: \" + businessAddress + \"<br/>\" +\n    \"Phone: \" + businessPhone + \"<br/>\" +\n    \"Rating: \" + businessRating + \"/5<br/>\" +\n    \"<a href='\" + businessUrl + \"'>View on Yelp</a>\"\n  );\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Sunday at 10:00 AM\");\n}"
  },
  {
    "intent": "When the Front Door lock at my San Diego Beach House is unlocked by John Smith, disarm my Blink Home Security system.",
    "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  Blink.networkDisarm.skip(\"Front Door at San Diego Beach House unlocked by John Smith.\");\n}"
  },
  {
    "intent": "Send a daily message to the #weather-updates channel on Discord at 7:00 AM with the current weather condition, high and low temperatures in Celsius, and humidity level, including an image of the current condition, using the allowable mentions option to notify the @weather-alerts role.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var message = \"Current weather: \" + Weather.currentWeatherAtTime.CurrentCondition + \"\\nHigh temperature: \" + Weather.currentWeatherAtTime.HighTempCelsius + \"°C\\nLow temperature: \" + Weather.currentWeatherAtTime.LowTempCelsius + \"°C\\nHumidity: \" + Weather.currentWeatherAtTime.Humidity + \"%\\n\" + Weather.currentWeatherAtTime.CurrentConditionImageURL;\n  Discord.postMessageToChannel.setMessage(message);\n  Discord.postMessageToChannel.setAllowableMentions(\"@weather-alerts\");\n  Discord.postMessageToChannel.channel_id = \"#weather-updates\";\n} else {\n  Discord.postMessageToChannel.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "When an email with the subject \"Daily Update\" and a tag \"#office\" is sent from somebody@gmail.com to trigger@applet.ifttt.com, forward the email body \"Meeting at 2 PM today\" to all IntuiFace experiences named \"ConferenceRoom\" and \"OfficeDisplay\", using the API key \"1234567890abcdef\", with an additional message \"New meeting scheduled\", and targeting players with device names \"MainScreen\" and \"SideMonitor\", as well as those tagged with \"Important\" and \"Urgent\".",
    "filter_code": "if (Email.sendIftttAnEmailTagged.Subject === \"Daily Update\"\n    && Email.sendIftttAnEmailTagged.tag === \"#office\"\n    && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\") {\n  Intuiface.sendMessage.setMsg(\"Meeting at 2 PM today\");\n  Intuiface.sendMessage.setP1(\"New meeting scheduled\");\n  Intuiface.sendMessage.setXpNames(\"ConferenceRoom,OfficeDisplay\");\n  Intuiface.sendMessage.setDeviceNames(\"MainScreen,SideMonitor\");\n  Intuiface.sendMessage.setTags(\"Important,Urgent\");\n}"
  },
  {
    "intent": "When a motion is detected by Aura at its serial number 123456, send a Signal named \"Motion Detected\" with the color red to zone 1 of your Das Keyboard Q device, displaying a breathing effect, and trigger this action only when the motion occurs between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Aura.motion.serial === \"123456\") {\n    Daskeyboardq.signals.setName(\"Motion Detected\");\n    Daskeyboardq.signals.setZone(1);\n    Daskeyboardq.signals.setColor(\"red\");\n    Daskeyboardq.signals.setEffect(\"breathing\");\n    Daskeyboardq.signals.setDevice(\"Das Keyboard Q\");\n  } else {\n    Daskeyboardq.signals.skip(\"Incorrect serial number.\");\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the outside temperature falls below 34°F in New York, turn off the air conditioner named \"Living Room AC\" and set the thermostat to 70°F.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 34) {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is below 34°F.\");\n} else if (Weather.currentTemperatureRisesAbove.TempFahrenheit >= 34) {\n  FujitsuGeneralLimited.setOperModeAndTemp.setDsn(\"Living Room AC\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"OFF\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setAdjustTemperature(70);\n}"
  },
  {
    "intent": "When the outside temperature rises above 40°F in New York, turn on the air conditioner named \"Living Room AC\" to heat mode and set the thermostat to 72°F.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 40) {\n  FujitsuGeneralLimited.setOperModeAndTemp.setDsn(\"Living Room AC\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setOperationMode(\"Heat\");\n  FujitsuGeneralLimited.setOperModeAndTemp.setAdjustTemperature(72);\n} else {\n  FujitsuGeneralLimited.setOperModeAndTemp.skip(\"Outside temperature is not above 40°F.\");\n}"
  },
  {
    "intent": "When the \"Party\" routine is activated in Niko Home Control at 20:00, change the setpoint temperature on the \"Living Room\" Honeywell thermostat to 22 degrees Celsius for heating.",
    "filter_code": "if (Nikohomecontrol.routineActivated.Routine === \"Party\" && Nikohomecontrol.routineActivated.CreatedAt.hour() === 20) {\n  HoneywellLyric.setsystemtemperature.setSystem(\"Living Room\");\n  HoneywellLyric.setsystemtemperature.setTemperatureType(\"heat\");\n  HoneywellLyric.setsystemtemperature.setTargetTemperature(22);\n  HoneywellLyric.setsystemtemperature.setTemperatureScale(\"celsius\");\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"Routine or time does not match.\");\n}"
  },
  {
    "intent": "When the Kronaby pusher is double-pressed, set the Living Room Nest Thermostat to 15°C.",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\") {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"15\");\n}"
  },
  {
    "intent": "When the light level in channel 1510 reaches 500 lux, turn off all Philips Hue lights.",
    "filter_code": "if (Ubibot.light.ChannelId === \"1510\" && Ubibot.light.Value >= \"500\") {\n  Hue.turnOnAllHue.skip(\"Light level reached 500 lux in channel 1510, turning off lights.\");\n}"
  },
  {
    "intent": "Turn on areas 1, 2, and 3 of the \"Living Room Camera\" in INSTAR at 7:00 AM every day and turn off areas 1, 2, 3, and 4 at 10:00 PM.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.getHours() === 7 && DateAndTime.everyDayAt.CheckTime.getMinutes() === 0) {\n  Instar.areasOn.setArea1(\"on\");\n  Instar.areasOn.setArea2(\"on\");\n  Instar.areasOn.setArea3(\"on\");\n  Instar.areasOn.setCamName(\"Living Room Camera\");\n} else if (DateAndTime.everyDayAt.CheckTime.getHours() === 22 && DateAndTime.everyDayAt.CheckTime.getMinutes() === 0) {\n  Instar.areasOn.setArea1(\"off\");\n  Instar.areasOn.setArea2(\"off\");\n  Instar.areasOn.setArea3(\"off\");\n  Instar.areasOn.setArea4(\"off\");\n  Instar.areasOn.setCamName(\"Living Room Camera\");\n} else {\n  Instar.areasOn.skip(\"Not the scheduled time.\");\n}"
  },
  {
    "intent": "If the Netatmo weather station reports that the rain amount for yesterday from My Rain gauge exceeded 5mm, then skip watering my yard with the Netro device today.",
    "filter_code": "if (parseFloat(Netatmo.rainYesterdayAmount.MeasuredRainfallMM) > 5) {\n  Netro.water.skip(\"Rain amount for yesterday exceeded 5mm, skipping watering.\");\n}"
  },
  {
    "intent": "When the Netatmo weather station named \"My Home - Indoor station\" reports a temperature drop below 0 degrees Celsius, skip watering my yard for today using my Netro device.",
    "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 0) {\n  Netro.water.skip(\"Temperature drop below 0 degrees Celsius reported by Netatmo weather station. Skipping watering for today.\");\n}"
  },
  {
    "intent": "If the current temperature in degrees Fahrenheit from Weather Underground at my location is below 32°F, then skip watering all zones on my Netro device today.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 32) {\n  Netro.water.skip(\"Freezing temperatures, skipping watering for today.\");\n}"
  },
  {
    "intent": "Water the front yard zone, which is zone 1, for 20 minutes every Monday, Wednesday, and Friday at 07:00 using the Netro device named \"Backyard Controller\".",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (DateAndTime.everyWeekdayAt.CheckTime.substring(11, 16) === \"07:00\") {\n    Netro.water.setDevice(\"Backyard Controller\");\n    Netro.water.setZone(\"1\");\n    Netro.water.setDuration(\"20\");\n  } else {\n    Netro.water.skip(\"Not the scheduled watering time.\");\n  }\n} else {\n  Netro.water.skip(\"Not a scheduled watering day.\");\n}"
  },
  {
    "intent": "Water zone 1 of my Netro device for 10 minutes every hour on the hour.",
    "filter_code": "var minute = DateAndTime.everyHourAt.CheckTime.getMinutes();\nif (minute !== 0) {\n  Netro.water.skip(\"Not on the hour\");\n} else {\n  Netro.water.setZone(\"1\");\n  Netro.water.setDuration(\"10\");\n}"
  },
  {
    "intent": "Send me an email with the subject \"New Buzzfeed Article\" and the body containing the entry title, entry content, and entry URL whenever a new item is published in the Buzzfeed RSS feed.",
    "filter_code": "Email.sendMeEmail.setSubject(\"New Buzzfeed Article\");\nEmail.sendMeEmail.setBody(Feed.newFeedItem.EntryTitle + \"\\n\\n\" + Feed.newFeedItem.EntryContent + \"\\n\\nRead more at: \" + Feed.newFeedItem.EntryUrl);"
  },
  {
    "intent": "When a new episode of the IoT Podcast is published with a title like \"Episode 110: IKEA’s smart home plans and will you buy an Amazon Look?\", change the color of all Philips Hue lights in the living room to a vibrant orange, #FFA07A, between 18:00 and 22:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 18 && hour <= 22) {\n  if (IotPodcast.newIotPodcastEpisode.EntryTitle.match(/Episode \\d+: .*smart home.*/i)) {\n    Hue.setColorAllHue.setLights(\"Living Room\");\n    Hue.setColorAllHue.setColor(\"#FFA07A\");\n  } else {\n    Hue.setColorAllHue.skip(\"Episode title does not match the condition.\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Outside of the scheduled time (18:00-22:00).\");\n}"
  },
  {
    "intent": "Automatically save new photos posted on Instagram to a folder named \"Instagram Photos\" in Dropbox, using the photo's Source URL and setting the file name to include the date and time the photo was taken, such as \"2023-03-01 14:30 Photo\".",
    "filter_code": "var sourceUrl = Instagram.anyNewPhotoByYou.SourceUrl;\nvar createdAt = Instagram.anyNewPhotoByYou.CreatedAt;\nvar filename = createdAt.replace(\" at \", \" \").replace(\",\", \"\") + \" Photo\";\nvar path = \"Instagram Photos\";\n\nDropbox.addFileFromUrl.setUrl(sourceUrl);\nDropbox.addFileFromUrl.setFilename(filename);\nDropbox.addFileFromUrl.setPath(path);"
  },
  {
    "intent": "Automatically save new photos posted on Instagram to a folder named \"Instagram Photos\" in Google Drive, using the photo's Source URL as the file URL and the Created At timestamp as the filename, and store them in the \"Social Media\" folder.",
    "filter_code": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nGoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(Instagram.anyNewPhotoByYou.CreatedAt.replace(\" at\", \"_\").replace(\",\", \"\").replace(/ /g, \"_\"));\nGoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"Social Media/Instagram Photos\");"
  },
  {
    "intent": "Get the current weather condition, temperature in Celsius, and humidity level at 07:00 in New York, and send a detailed message to the #weather_updates chat on Telegram, including a web page preview of the 5-day forecast.",
    "filter_code": "if (Meta.currentUserTime.hour() === 7) {\n  var location = \"New York\";\n  var currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  var currentTempCelsius = Weather.currentWeatherAtTime.CurrentTempCelsius;\n  var humidity = Weather.currentWeatherAtTime.Humidity;\n  var forecastUrl = Weather.currentWeatherAtTime.ForecastUrl;\n\n  Telegram.sendMessage.setText(\n    \"Current weather in \" + location + \": \" + currentCondition + \", Temperature: \" + currentTempCelsius + \"°C, Humidity: \" + humidity + \"%\\n5-day forecast: \" + forecastUrl\n  );\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n  Telegram.sendMessage.skip();\n}"
  },
  {
    "intent": "When the Home Connect Coffee Machine starts brewing an Espresso program, play the 'Relaxing Morning' favorite on the Sonos speaker in the Living Room and include all grouped rooms.",
    "filter_code": "if (HcCoffeeMachine.coffeeMakerBegins.ActiveProgram === \"Espresso\") {\n  Sonos.playFavorite.setFavorite(\"Relaxing Morning\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Not brewing Espresso program\");\n}"
  },
  {
    "intent": "If the current weather condition is rainy at a temperature of 18 degrees Celsius in the location of New York, then change the color of all living room lights to blue and set the brightness level to medium.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.TempCelsius === \"18\" && Weather.currentConditionIs.location === \"New York\") {\n  Magichue.changeColor.setWhichLights(\"all living room lights\");\n  Magichue.changeColor.setColor(\"blue\");\n  Magichue.changeColor.setBrightness(\"medium\");\n} else {\n  Magichue.changeColor.skip(\"Weather conditions do not match.\");\n}"
  },
  {
    "intent": "When the current weather condition is 'Rain' in your location, close the 'Main Garage Door' to keep everything dry.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Garageio.closeGarageDoor.setDoorToClose(\"Main Garage Door\");\n} else {\n  Garageio.closeGarageDoor.skip(\"It's not raining.\");\n}"
  },
  {
    "intent": "Send an email to trigger@applet.ifttt.com with the subject \"New File Transfer\" and the body containing the URL of the transfer, http://example.put.io/download/123456, when a new email is received from somebody@gmail.com with the tag #new-transfer and an attachment.",
    "filter_code": "if (Email.sendIftttAnEmailTagged.Tag === \"#new-transfer\" && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\" && Email.sendIftttAnEmailTagged.AttachmentUrl) {\n  Email.sendEmailToTriggerApplet.setSubject(\"New File Transfer\");\n  Email.sendEmailToTriggerApplet.setBody(\"http://example.put.io/download/123456\");\n} else {\n  Putio.newTransfer.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the outside temperature rises above 75°F in New York, start zone 3 of the RainMachine for 30 minutes.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75 && Weather.currentTemperatureRisesAbove.Location === \"New York\") {\n  RainMachine.startZone.setZoneNumber(3);\n  RainMachine.startZone.setTime(30);\n} else {\n  RainMachine.startZone.skip(\"Temperature is not above 75°F or location is not New York.\");\n}"
  },
  {
    "intent": "Start my Moodo device, named \"Living Room Moodo\", with my favorite fragrance \"Morning Breeze\" every day at 7:00 AM when I wake up.",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 7 && minute === 0) {\n  Moodo.boxStart.setBox(\"Living Room Moodo\");\n  Moodo.boxStart.setFavorite(\"Morning Breeze\");\n} else {\n  Moodo.boxStart.skip(\"Not the scheduled start time.\");\n}"
  },
  {
    "intent": "When an event titled \"Team Meeting\" starts in 15 minutes in my \"Work\" Google calendar, send a message with the event details, including title, description, location, and start time, to all Intuiface experiences named \"ConferenceRoom\" and \"OfficeDisplay\", using the credential key \"abcdefg123456\", and include additional parameters such as the event URL and video call URL if available.",
    "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Team Meeting\" && GoogleCalendar.anyEventStarts.calendar === \"Work\" && GoogleCalendar.anyEventStarts.offset === 15) {\n  var message = \"Event: \" + GoogleCalendar.anyEventStarts.Title + \"\\nDescription: \" + GoogleCalendar.anyEventStarts.Description + \"\\nLocation: \" + GoogleCalendar.anyEventStarts.Where + \"\\nStarts: \" + GoogleCalendar.anyEventStarts.Starts;\n  Intuiface.sendMessage.setMsg(message);\n  Intuiface.sendMessage.setXpNames(\"ConferenceRoom,OfficeDisplay\");\n  Intuiface.sendMessage.setP1(GoogleCalendar.anyEventStarts.EventUrl);\n  if (GoogleCalendar.anyEventStarts.VideoCallUrl) {\n    Intuiface.sendMessage.setP2(GoogleCalendar.anyEventStarts.VideoCallUrl);\n  }\n  Intuiface.sendMessage.setApi_key(\"abcdefg123456\");\n} else {\n  Intuiface.sendMessage.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When an event titled \"Team Meeting\" starts in 15 minutes in my \"Work\" calendar, send a voice message to the \"Marketing Team\" group in Orion saying \"You have a team meeting in 15 minutes at Building A, Room 101\".",
    "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Team Meeting\" && GoogleCalendar.anyEventStarts.Where === \"Building A, Room 101\" && GoogleCalendar.anyEventStarts.calendar === \"Work\") {\n  var message = \"You have a team meeting in 15 minutes at \" + GoogleCalendar.anyEventStarts.Where;\n  Orion.sendVoiceMessage.setMessage(message);\n  Orion.sendVoiceMessage.setGroup(\"Marketing Team\");\n} else {\n  Orion.sendVoiceMessage.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Start the \"Good Morning\" scenario in WeBeHome when the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and share the event details on https://ifttt.com/share/McFwJfDH9Ns.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Webehome.startScenario.setActionid(\"Good Morning\");\n} else {\n  Webehome.startScenario.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Start the Neato BotVac after the Litter-Robot named \"My Litter Robot\" completes a Clean Cycle.",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Clean Cycle\") {\n  Neato.startCleaning.setSelectARobot(\"BotVac\");\n} else {\n  Neato.startCleaning.skip(\"Litter-Robot event does not match the specified conditions.\");\n}"
  },
  {
    "intent": "Start my Moodo device, named \"Living Room Moodo\", with the favorite fragrance \"Relaxing Evening\" 30 minutes before bedtime, at 10:00 PM every day.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"10:00 PM\";\nif (checkTime === targetTime) {\n  Moodo.boxStart.setBox(\"Living Room Moodo\");\n  Moodo.boxStart.setFavorite(\"Relaxing Evening\");\n} else {\n  Moodo.boxStart.skip(\"Not the scheduled time for Relaxing Evening.\");\n}"
  },
  {
    "intent": "Start my iRobot vacuum, named \"Living Room Cleaner\", to help clean the dust when the PM2.5 level from my uHoo sensor, located in \"My Home\", exceeds a threshold of 15 ug/m3.",
    "filter_code": "if (Uhoo.sensorNotification.SensorName === \"PM2.5\" && Uhoo.sensorNotification.UhooName === \"My Home\" && parseFloat(Uhoo.sensorNotification.SensorValue) > 15 && Irobot.startRobot.skip !== undefined) {\n  if (Irobot.robotName !== \"Living Room Cleaner\") {\n    Irobot.startRobot.skip(\"The robot name does not match 'Living Room Cleaner'.\");\n  } else {\n    // Proceed with starting the robot as all conditions are met\n  }\n} else {\n  Irobot.startRobot.skip(\"Conditions for starting the robot are not met.\");\n}"
  },
  {
    "intent": "Start the \"Morning Routine\" program in COQON when an event titled \"Team Meeting\" starts in my primary Google Calendar, with a 15-minute offset before the meeting begins.",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"Team Meeting\" && GoogleCalendar.eventFromSearchStarts.offset === \"-PT15M\") {\n  Coqon.simpleRuleAction.setaction_code(\"Morning Routine\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Event title or offset does not match.\");\n}"
  },
  {
    "intent": "When an event titled \"Team Meeting\" from my \"Work\" calendar, containing the keyword \"urgent\", is about to start 15 minutes in advance, send a message with high urgency to the \"#general\" channel in Microsoft Teams, including the event's title, description, location, and start time, such as \"Event: Team Meeting is starting soon at Building A, Room 101\".",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"Team Meeting\"\n    && GoogleCalendar.eventFromSearchStarts.Description.includes(\"urgent\")\n    && GoogleCalendar.eventFromSearchStarts.Offset === 15) {\n  var messageBody = `Event: ${GoogleCalendar.eventFromSearchStarts.Title} is starting soon at ${GoogleCalendar.eventFromSearchStarts.Where}`;\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Upcoming Event\");\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Create a new photo post on WordPress with the title \"Instagram Photo Update\" and the source URL set to the URL of the newly posted Instagram photo, including the caption from the Instagram post as the photo's caption, categorized under \"Social Media\" and tagged with \"Instagram\" and \"Photo\", and set the post status to \"Published\".",
    "filter_code": "Wordpress.createPhotoPostWp.setTitle(\"Instagram Photo Update\");\nWordpress.createPhotoPostWp.setSourceUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nWordpress.createPhotoPostWp.setCaption(Instagram.anyNewPhotoByYou.Caption);\nWordpress.createPhotoPostWp.setCategories(\"Social Media\");\nWordpress.createPhotoPostWp.setTags(\"Instagram, Photo\");\nWordpress.createPhotoPostWp.setPostStatus(\"Published\");"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, arm away the SkylinkNet hub named \"Home Security\" with the password \"MySecureKey\" and set the alarm mode to \"Away\" if the button press occurs between 07:00 and 19:00.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Skylinknet.alarm.setAlarm(\"Away\");\n  Skylinknet.alarm.setHubId(\"Home Security\");\n  Skylinknet.alarm.setKey(\"MySecureKey\");\n} else {\n  Skylinknet.alarm.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send me an email with the subject \"Happy Birthday\" and the body \"Don't forget to celebrate your birthday today!\" every year on August 23rd at 11:01 PM.",
    "filter_code": "if (DateAndTime.everyYearOn.CheckTime === \"August 23 at 11:01PM\") {\n  Email.sendMeEmail.setSubject(\"Happy Birthday\");\n  Email.sendMeEmail.setBody(\"Don't forget to celebrate your birthday today!\");\n} else {\n  Email.sendMeEmail.skip(\"It's not August 23rd at 11:01 PM.\");\n}"
  },
  {
    "intent": "When a new contact is created in Verizon Cloud with a name like \"John Smith\", email \"johnsmith@ifttt.com\", and phone number \"4155550000\", create a new contact in Google Contacts with the full name \"John Smith\", phone number \"4155550000\", and email \"johnsmith@ifttt.com\", and assign it to the group \"Friends\".",
    "filter_code": "if (VerizonCloud.newContact.Name === \"John Smith\" && VerizonCloud.newContact.Email === \"johnsmith@ifttt.com\" && VerizonCloud.newContact.Phone === \"4155550000\") {\n  GoogleContacts.createNewContact.setFull Name(VerizonCloud.newContact.Name);\n  GoogleContacts.createNewContact.setPhone Number(VerizonCloud.newContact.Phone);\n  GoogleContacts.createNewContact.setEmail(VerizonCloud.newContact.Email);\n  GoogleContacts.createNewContact.setWhich group(\"Friends\");\n} else {\n  GoogleContacts.createNewContact.skip(\"Contact does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, set the color temperature of the TP-Link Kasa device named \"Living Room Bulb\" to cool (2700K) with a transition duration of 2 seconds.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour <= 19 &&\n    Math.abs(latitude - 37.8267) < 0.001 &&\n    Math.abs(longitude - (-122.4230)) < 0.001) {\n  Kasa.changeColorTemp.setDevice(\"Living Room Bulb\");\n  Kasa.changeColorTemp.setColorTemperature(\"cool\");\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColorTemp.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, set the TP-Link LB130 smart light bulb in the living room to a warm color temperature of 2700K with a transition duration of 1 second.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Kasa.changeColorTemp.setDevice(\"TP-Link LB130 smart light bulb in the living room\");\n  Kasa.changeColorTemp.setColorTemperature(\"2700K\");\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"1000\");\n} else {\n  Kasa.changeColorTemp.skip(\"Location does not match\");\n}"
  },
  {
    "intent": "Post a message to the #general channel on Slack with the title \"New Blog Post\" and the message \"Check out the latest article: {{EntryTitle}} - {{EntryContent}}\" whenever a new item is published in the ifttt Blog RSS feed, including a thumbnail image from the entry's first image URL.",
    "filter_code": "Slack.postToChannel.setChannel(\"#general\");\nSlack.postToChannel.setTitle(\"New Blog Post\");\nSlack.postToChannel.setMessage(\"Check out the latest article: \" + Feed.newFeedItem.EntryTitle + \" - \" + Feed.newFeedItem.EntryContent);\nSlack.postToChannel.setImageUrl(Feed.newFeedItem.EntryImageUrl);"
  },
  {
    "intent": "When a new post is published to the \"My Blog\" RSS feed, send the post title and content as a message to Buffer with the first image from the post.",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"My Blog\") {\n  var message = Feed.newFeedItem.EntryTitle + \": \" + Feed.newFeedItem.EntryContent;\n  Buffer.addToBufferWithPhoto.setPhotoUrl(Feed.newFeedItem.EntryImageUrl);\n  Buffer.addToBufferWithPhoto.setMessage(message);\n} else {\n  Buffer.addToBufferWithPhoto.skip(\"Feed title does not match 'My Blog'\");\n}"
  },
  {
    "intent": "When the Library of Congress posts a new news release with a headline containing the word \"Announcement\" and the publication date is within the last 24 hours, send a notification with the message \"New update from the Library of Congress: Latest News: {EntryTitle}\" where {EntryTitle} is the actual headline of the latest news, to my primary notifications channel.",
    "filter_code": "var headline = Loc.latestNews.Headline;\nvar publishedDate = new Date(Loc.latestNews.PublishedDate);\nvar currentTime = new Date();\nvar timeDifference = (currentTime - publishedDate) / (1000 * 3600);\n\nif (headline.includes(\"Announcement\") && timeDifference <= 24) {\n  var message = \"New update from the Library of Congress: Latest News: \" + headline;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Does not match the criteria.\");\n}"
  },
  {
    "intent": "Lock the Bedroom lock device with SmartThings when it is locked at April 1st, 2024, at 08:00AM, and then disarm the Home network system with Blink.",
    "filter_code": "if (SmartthingsV2.lockedSmartthings.DeviceName === \"Bedroom lock\" && SmartthingsV2.lockedSmartthings.LockedAt === \"April 1st, 2024 at 08:00AM\") {\n  Blink.networkDisarm.setNetwork(\"Home\");\n} else {\n  Blink.networkDisarm.skip(\"Conditions not met to disarm the network.\");\n}"
  },
  {
    "intent": "Send me an email with the subject \"New EDF Article: {EntryTitle}\" and the body containing the entry content \"{EntryContent}\" from the Environmental Defense Fund's RSS feed at https://www.edf.org/feeds/rss when a new article is published that matches the keyword \"sustainability\" between 08:00 and 17:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  if (Feed.newFeedItemMatches.EntryContent.includes(\"sustainability\") || Feed.newFeedItemMatches.EntryTitle.includes(\"sustainability\")) {\n    Email.sendMeEmail.setSubject(\"New EDF Article: \" + Feed.newFeedItemMatches.EntryTitle);\n    Email.sendMeEmail.setBody(Feed.newFeedItemMatches.EntryContent);\n  } else {\n    Email.sendMeEmail.skip(\"Entry does not match the keyword 'sustainability'.\");\n  }\n} else {\n  Email.sendMeEmail.skip(\"Outside of active hours (8 AM to 5 PM).\");\n}"
  },
  {
    "intent": "Unlock the Bedroom lock device with SmartThings when it is locked at April 1st, 2016 at 12:43PM and disarm the Blink network system named Home Security.",
    "filter_code": "if (SmartthingsV2.lockedSmartthings.DeviceName === \"Bedroom lock\" && SmartthingsV2.lockedSmartthings.LockedAt === \"April 1st, 2016 at 12:43PM\") {\n  Blink.networkDisarm.setNetwork(\"Home Security\");\n} else {\n  Blink.networkDisarm.skip(\"Conditions not met to disarm the network.\");\n}"
  },
  {
    "intent": "When a new photo post is published on the \"staff\" Tumblelog, with tags including \"Sky\" or \"Earth\", and the post's body text contains the word \"Neat\", automatically add the post's full image URL to Buffer as an update, scheduling it for the next available time slot between 07:00 and 19:00.",
    "filter_code": "var tumblelog = Tumblr.newPhotoPost.Tumblelog;\nvar tags = Tumblr.newPhotoPost.PostTags;\nvar bodyText = Tumblr.newPhotoPost.PostBodyText;\nvar fullImageUrl = Tumblr.newPhotoPost.FullImageUrl;\nvar hour = Meta.currentUserTime.hour();\n\nif (tumblelog === \"staff\" && (tags.includes(\"Sky\") || tags.includes(\"Earth\")) && bodyText.includes(\"Neat\") && (hour >= 7 && hour < 19)) {\n  Buffer.addToBuffer.setMessage(fullImageUrl);\n} else {\n  Buffer.addToBuffer.skip(\"Conditions not met for adding to Buffer.\");\n}"
  },
  {
    "intent": "When a new video is uploaded to my Instagram account with a caption containing the keyword \"new\", create a new post on my WordPress blog titled \"New Video Alert\" and set the body to include the embed code of the video, categorize it under \"Social Media\" and tag it with \"Instagram\" and \"Video\", then publish the post immediately.",
    "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"new\")) {\n  Wordpress.createPostWp.setTitle(\"New Video Alert\");\n  Wordpress.createPostWp.setBody(Instagram.anyNewVideoByYouInstagram.EmbedCode);\n  Wordpress.createPostWp.setCategories(\"Social Media\");\n  Wordpress.createPostWp.setTags(\"Instagram, Video\");\n  Wordpress.createPostWp.setPostStatus(\"publish\");\n} else {\n  Wordpress.createPostWp.skip(\"The caption does not contain the keyword 'new'.\");\n}"
  },
  {
    "intent": "When the \"All Off\" routine is activated in Niko Home Control at 7:00 PM, start the Roomba robot named \"Living Room Cleaner\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (Nikohomecontrol.routineActivated.Routine === \"All Off\" && hour === 19 && minute === 0) {\n  Irobot.startRobot.setRobotName(\"Living Room Cleaner\");\n} else {\n  Irobot.startRobot.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Send a weekly email digest every Saturday at 08:00 with the latest Caltrain news, including the entry title, entry URL, and entry published date, to help plan the weekly commute, with the email titled \"Caltrain Weekly Update\" and containing a message that says \"Get the latest Caltrain updates here: http://ift.tt/2qUi9lf\".",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 6) { // 6 represents Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Saturday.\");\n}\n\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (hour !== 8 || minute !== 0) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 08:00 yet.\");\n}\n\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setTitle(\"Caltrain Weekly Update\");\nvar message = \"Get the latest Caltrain updates here: \" + Caltrain.newUpdate.EntryUrl;\nEmailDigest.sendWeeklyEmail.setMessage(message);"
  },
  {
    "intent": "Save £1 to your Dozens savings account every time you post a photo on Instagram with the hashtag #SummerVibes.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#SummerVibes\")) {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"No #SummerVibes hashtag found in the caption.\");\n}"
  },
  {
    "intent": "When the outside temperature exceeds 25°C or drops below 18°C, as detected by my uHoo sensor named \"My Home\", automatically adjust my Nest Thermostat, located in the living room, to a comfortable temperature of 22°C.",
    "filter_code": "if (Uhoo.sensorNotification.SensorName === \"Temperature\" && Uhoo.sensorNotification.UhooName === \"My Home\") {\n  var outsideTemp = parseFloat(Uhoo.sensorNotification.DataTemperature);\n  if (outsideTemp > 25 || outsideTemp < 18) {\n    GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celcius\");\n    GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n  } else {\n    GoogleNestThermostat.setHotTemperature.skip(\"Outside temperature is within the comfortable range.\");\n  }\n}"
  },
  {
    "intent": "Launch the Good Morning scenario at 07:00 every day and the Good Night scenario at 22:00 every day using Gideon Smart Home.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar morningHour = 7;\nvar nightHour = 22;\n\nif (hour === morningHour) {\n  Gideon.launchScenario.setScenarioName(\"Good Morning\");\n} else if (hour === nightHour) {\n  Gideon.launchScenario.setScenarioName(\"Good Night\");\n} else {\n  Gideon.launchScenario.skip(\"Not the scheduled time for a scenario.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, set your Bosma Security Mode to \"Disarmed\" for the family \"Home\" if the current time is between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 22) {\n  Bosma.switchSecurityMode.setMode(\"Disarmed\");\n  Bosma.switchSecurityMode.setFamily(\"Home\");\n} else {\n  Bosma.switchSecurityMode.skip(\"Button press is outside of the defined location or time range.\");\n}"
  },
  {
    "intent": "Close the garage door with ID \"Main Garage Door\" when the Logitech POP button named \"Living Room\" is pressed, and the battery level of the button is above 50, between 07:00 and 22:00, triggered by a physical button press.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (LogitechPop.shortPress.Battery > 50) {\n    if (LogitechPop.shortPress.Source === \"btn\" && LogitechPop.shortPress.Name === \"Living Room\") {\n      Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n    } else {\n      Garadget.closeDoor.skip(\"Either not a physical button press or wrong button name.\");\n    }\n  } else {\n    Garadget.closeDoor.skip(\"Battery level is 50 or below.\");\n  }\n} else {\n  Garadget.closeDoor.skip(\"Outside of allowed hours (07:00 to 22:00).\");\n}"
  },
  {
    "intent": "When the Logitech POP button named \"Living Room\" with the identifier \"a0:e6:f8:8c:f5:33\" is short-pressed, open the Garadget door identified as \"Main Garage Door\".",
    "filter_code": "if (LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && LogitechPop.shortPress.Name === \"Living Room\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"The pressed button is not the 'Living Room' button or the door ID does not match.\");\n}"
  },
  {
    "intent": "When a new row is added to the \"Orders\" spreadsheet in the \"Work\" folder on Google Sheets, with values in columns A and B, send a message to the \"#orders\" channel on Microsoft Teams with the subject \"New Order Received\" and the body \"A new order has been received from {{column_a}} for {{column_b}} items\", marked as Urgent.",
    "filter_code": "if (GoogleSheets.newRowInSpreadsheet.Filename === \"Orders\" && GoogleSheets.newRowInSpreadsheet.Path === \"Work\" && GoogleSheets.newRowInSpreadsheet.ColumnA !== \"\" && GoogleSheets.newRowInSpreadsheet.ColumnB !== \"\") {\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"your_team_id\", \"your_channel_id\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Order Received\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`A new order has been received from ${GoogleSheets.newRowInSpreadsheet.ColumnA} for ${GoogleSheets.newRowInSpreadsheet.ColumnB} items`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Trigger the siren on the Bosma device named \"Home Security\" when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && latitude === \"37.8267\" && longitude === \"-122.4230\") {\n  Bosma.alert.setDevice(\"Home Security\");\n} else {\n  Bosma.alert.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When you share a new photo on Instagram with the caption \"A cool photo\" and it's taken after 5:00 PM, send an email to john.doe@example.com with the subject \"New Photo Shared\" and the body \"Check out my latest photo: http://instagr.am/p/CTGBw/\" along with the photo attached from the source URL http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg.",
    "filter_code": "var hour = Instagram.anyNewPhotoByYou.CreatedAt.hour();\nif (Instagram.anyNewPhotoByYou.Caption === \"A cool photo\" && hour > 17) {\n  Gmail.sendAnEmail.setSubject(\"New Photo Shared\");\n  Gmail.sendAnEmail.setBody(\"Check out my latest photo: \" + Instagram.anyNewPhotoByYou.Url);\n  Gmail.sendAnEmail.setAttachmentUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com\");\n}"
  },
  {
    "intent": "Turn on the Bedroom Light device in Wake-up mode 15 minutes after sunrise when the current temperature is above 18°C and the weather condition is Sunny.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar fifteenMinutesAfterSunrise = new Date(sunriseTime.getTime() + 15 * 60 * 1000);\nvar currentTime = new Date();\nvar tempCelsius = parseFloat(Weather.sunRises.TempCelsius);\nvar condition = Weather.sunRises.Condition;\n\nif (currentTime >= fifteenMinutesAfterSunrise && tempCelsius > 18 && condition === \"Sunny\") {\n  Aisync.onOff.setDevice(\"Bedroom Light\");\n  Aisync.onOff.setOnOff(\"on\");\n  Aisync.onOff.setMode(\"Wake-up\");\n} else {\n  Aisync.onOff.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When you check-in near the San Francisco International Airport on Foursquare, send an SMS from your Android to 555-1234 saying \"Just landed, can you pick me up? I'm at the airport entrance, see you soon!\"",
    "filter_code": "if (Foursquare.newCheckinByFriendsAtLocation.VenueName === \"San Francisco International Airport\") {\n  AndroidMessages.sendAMessage.setPhoneNumber(\"555-1234\");\n  AndroidMessages.sendAMessage.setText(\"Just landed, can you pick me up? I'm at the airport entrance, see you soon!\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Not checking in near San Francisco International Airport.\");\n}"
  },
  {
    "intent": "When the garage door opens, as detected by Garadget between 07:00 and 19:00, blink all Philips Hue lights in the living room.",
    "filter_code": "var hour = new Date(Garadget.doorOpens.CreatedAt).getHours();\nif (hour < 7 || hour > 19) {\n  Hue.blinkAllHue.skip(\"Outside of active hours (7 AM to 7 PM).\");\n} else {\n  Hue.blinkAllHue.setLights([\"Living Room\"]);\n}"
  },
  {
    "intent": "Turn on all Philips Hue lights in the living room when the garage door opens.",
    "filter_code": "if (Garadget.doorOpens.DoorId !== \"living_room_garage_door\") {\n  Hue.turnOnAllHue.skip(\"Not the living room garage door.\");\n}"
  },
  {
    "intent": "If the Weather Underground detects rain in the location of New York, close the garage door named \"Main Garage Door\" using beam to protect everything in the garage.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.location === \"New York\") {\n  Beam.closeGarageDoor.setDoorToClose(\"Main Garage Door\");\n} else {\n  Beam.closeGarageDoor.skip(\"Not raining in New York or garage door not set to Main Garage Door.\");\n}"
  },
  {
    "intent": "Activate the \"Good Morning\" scene in MyMilan when the Smart Life door sensor named \"first door sensor\" is open between 07:00 and 09:00.",
    "filter_code": "var hour = new Date(Smartlife.doorOpen.CreatedAt).getHours();\nvar deviceName = Smartlife.doorOpen.DeviceName;\nif (deviceName === \"first door sensor\" && hour >= 7 && hour < 9) {\n  // No need to skip, this is the condition to run the action\n} else {\n  Mymilan.aScenes.skip(\"Door sensor not 'first door sensor' or not between 07:00 and 09:00.\");\n}"
  },
  {
    "intent": "Turn on the \"Good Morning\" scene in Brilliant Nexus at 7:00 AM every day.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 AM\";\nif (currentTime !== targetTime) {\n  BrilliantNexus.execrule.skip(\"Not the targeted time for the Good Morning scene\");\n} else {\n  BrilliantNexus.execrule.setRuleName(\"Good Morning\");\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\");\n}"
  },
  {
    "intent": "Close the main garage door when I press the button widget on my Android device at home, which is located at latitude 37.8267 and longitude -122.4230, at any time between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar long = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && lat === \"37.8267\" && long === \"-122.4230\") {\n  Garagewifi.closeDoor.setDoorNumber(\"1\");\n} else {\n  Garagewifi.closeDoor.skip(\"Not within the specified time or location.\");\n}"
  },
  {
    "intent": "Close the awning when the Weather Underground reports it's raining at your location, which is set to New York City, to protect it from damage.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  SomfyMylink.move.setCommand(\"close\");\n  SomfyMylink.move.setTarget(\"awning\");\n} else {\n  SomfyMylink.move.skip(\"It's not raining.\");\n}"
  },
  {
    "intent": "When the sunset at my location is between 16:00 and 20:00 and the current weather condition is Sunny, close my Living Room blind.",
    "filter_code": "var hour = new Date(Weather.sunSets.SunsetAt).getHours();\nif (hour >= 16 && hour <= 20 && Weather.sunSets.Condition === \"Sunny\") {\n  DooyaConnector.closeBlinds.setWhichBlinds(\"Living Room\");\n} else {\n  DooyaConnector.closeBlinds.skip(\"Sunset not between 16:00 and 20:00 or condition is not Sunny.\");\n}"
  },
  {
    "intent": "Close the garage door at sunset when the outside temperature is 72 degrees Fahrenheit and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  Garadget.closeDoor.skip(\"Closing garage door at sunset.\");\n}"
  },
  {
    "intent": "Close the front door at 7:00 PM every day using MyNice automation.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar time = new Date(checkTime).getHours();\nif (time === 19) {\n  Mynice.close.setAutomationId(\"front_door\");\n} else {\n  Mynice.close.skip(\"Not 7:00 PM\");\n}"
  },
  {
    "intent": "Close the garage door using Beam every day at 9:00 PM to prevent it from being left open all night.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nif (hour === 21) {\n  Beam.closeGarageDoor.setDoorToClose(\"garage door\");\n} else {\n  Beam.closeGarageDoor.skip(\"Not 9:00 PM\");\n}"
  },
  {
    "intent": "Close the Main House Garage door when the sunset time is reached at my location, which is set to New York City, and the current temperature is below 18 degrees Celsius.",
    "filter_code": "if (Weather.sunSets.SunsetAt >= new Date() && Weather.sunSets.TempCelsius < 18) {\n  Tailwind.closeGarageDoor.setGarageName(\"Main House Garage\");\n} else {\n  Tailwind.closeGarageDoor.skip(\"Sunset time not reached or temperature above 18°C.\");\n}"
  },
  {
    "intent": "When the UV index at home reaches 7, close the Living Room curtain to protect yourself from the scorching sun.",
    "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex >= 7) {\n  Ewelink.electricCurtainSwitchAction.setElectricCurtainDevicesQuery(\"Living Room\");\n  Ewelink.electricCurtainSwitchAction.setOnoffActQuery(\"Close\");\n} else {\n  Ewelink.electricCurtainSwitchAction.skip(\"UV index is below 7.\");\n}"
  },
  {
    "intent": "Close the garage door at 8:00 PM every weekday if it is left open.",
    "filter_code": "var currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar currentHour = currentTime.hour();\nvar currentDayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\n\nif (currentHour === 20 && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(currentDayOfWeek)) {\n  Garadget.closeDoor.skip(\"Garage door closed at 8:00 PM on a weekday.\");\n}"
  },
  {
    "intent": "When the temperature rises above 85 degrees Fahrenheit in New York, close the Living Room Curtains to block out sunlight.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 85 && Weather.currentTemperatureRisesAbove.Location === \"New York\") {\n  MyCurtains.moveDevice.setMoveType(\"close\");\n  MyCurtains.moveDevice.setDevices(\"Living Room Curtains\");\n} else {\n  MyCurtains.moveDevice.skip(\"Temperature is not above 85 degrees Fahrenheit or location is not New York.\");\n}"
  },
  {
    "intent": "When the Bedroom contact device in SmartThings is closed at any time, update the Apilio variable identified as \"FrontDoorStatus\" to false.",
    "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Apilio.booleanVariableToFalseUpdates.setVariableIdentifier(\"FrontDoorStatus\");\n}"
  },
  {
    "intent": "Close the garage door when the \"Kitchen Button\" on iHome Enhance is pressed with a long press between 07:00 and 19:00.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"Kitchen Button\" && IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  var hour = new Date(IhomeEnhance.enhanceButton.CreatedAt).getHours();\n  if (hour >= 7 && hour < 19) {\n    // No skip, proceed with the action by default\n  } else {\n    Garadget.closeDoor.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  }\n} else {\n  Garadget.closeDoor.skip(\"Invalid button or press type.\");\n}"
  },
  {
    "intent": "Close the garage door named \"Main Garage\" when the Netatmo weather station detects rain at My Rain gauge.",
    "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  Garadget.closeDoor.setDoorId(\"Main Garage\");\n} else {\n  Garadget.closeDoor.skip(\"Rain not detected at My Rain gauge.\");\n}"
  },
  {
    "intent": "Close the garage door when the Abode mode changes to Away.",
    "filter_code": "if (Abode.modeChanged.NewMode === \"Away\") {\n  Garadget.closeDoor.skip(\"Abode mode changed to Away\");\n}"
  },
  {
    "intent": "When the wind speed in Paris rises above 15 km/h from the North direction, close the shutters of my living room.",
    "filter_code": "if (Weather.windSpeedRisesAbove.WindDirection === \"North\" && Weather.windSpeedRisesAbove.WindSpeedKph > 15) {\n  GewissHome.invokeMethod.setMethodParam(\"close_shutters_living_room\");\n  GewissHome.invokeMethod.skip(\"Closing shutters due to high wind speed from the North.\");\n}"
  },
  {
    "intent": "Close the garage door on Garadget when the feed value of \"humidity\" from Adafruit IO is greater than 50.",
    "filter_code": "if (Adafruit.monitorYourData.FeedName === \"humidity\" && Adafruit.monitorYourData.Operator === \"greater than\" && Adafruit.monitorYourData.TriggerValue === \"50\" && parseFloat(Adafruit.monitorYourData.FeedValue) > 50) {\n  Garadget.closeDoor.skip(\"Humidity is higher than 50, closing the garage door.\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is closed, then turn on the SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.setSn(\"S123456\");\n} else {\n  Spotcam.turnOffSpotcam.skip(\"Device is not the Bedroom contact.\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is closed at any time, then turn on the SpotCam Alert with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnAlert.skip();\n}"
  },
  {
    "intent": "Close the garage door named \"Main Garage Door\" when the Netatmo weather station named \"My Home - Wind gauge\" detects wind speeds above 24 km/h.",
    "filter_code": "if (Netatmo.windAverageAbove.WindSpeedKmh > Netatmo.windAverageAbove.TargetWindSpeedKmh && Netatmo.windAverageAbove.DeviceName === \"My Home - Wind gauge\") {\n  Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door.\");\n}"
  },
  {
    "intent": "When the Thinga device with ID \"GARAGE_CONTROLLER\" button number 1 is clicked with a click type of \"click\", close the garage door with ID \"MAIN_GARAGE_DOOR\".",
    "filter_code": "if (Thinga.thingaIsClicked.ButtonID === \"1\" && Thinga.thingaIsClicked.ThingaClickType === \"click\" && fetchit_device_id === \"GARAGE_CONTROLLER\") {\n  Garadget.closeDoor.setDoorId(\"MAIN_GARAGE_DOOR\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door.\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is closed, then turn off the SpotCam with serial number SC123456 automatically.",
    "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOffAlert.skip(\"Bedroom contact is closed.\");\n}"
  },
  {
    "intent": "When the Bedroom contact SmartThings device is closed, then turn off SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.closedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOffSpotcam.skip(\"Bedroom contact SmartThings device is closed\");\n}"
  },
  {
    "intent": "Close the \"Living Room Blinds\" motor controlled by Niko Home Control to a position of 0% when the temperature measured at \"My Home - Indoor station\" rises above 25 degrees Celsius via your Netatmo weather station.",
    "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.TargetTemperatureC === \"25\") {\n  Nikohomecontrol.setMotorPosition.setMotor(\"Living Room Blinds\");\n  Nikohomecontrol.setMotorPosition.setPositionValue(0);\n}"
  },
  {
    "intent": "When my robot named Roomba gets stuck at home, send an SMS to my phone number, +1234567890, with the message \"Free Roomba, it's stuck!\" as soon as I receive the notification that Roomba is stuck, which includes the timestamp of when it got stuck.",
    "filter_code": "AndroidMessages.sendAMessage.setText(\"Free Roomba, it's stuck at \" + Irobot.robotStuck.Timestamp + \"!\");\nAndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");"
  },
  {
    "intent": "When motion is detected by the Bedroom sensor on SmartThings, launch the \"Security Alert\" scenario with Gideon and instantly check what's going on, closing locks, turning lights up, and starting cameras recording.",
    "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Gideon.launchScenario.setScenarioName(\"Security Alert\");\n  Gideon.launchScenario();\n} else {\n  Gideon.launchScenario.skip(\"Motion not detected by Bedroom sensor.\");\n}"
  },
  {
    "intent": "Receive a notification on your device when the temperature measured by your Netatmo device named \"Living Room - Indoor station\" drops below 18 degrees Celsius, with the notification message including the current temperature and the time of measurement.",
    "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName !== \"Living Room - Indoor station\") {\n  IfNotifications.sendNotification.skip(\"Device name does not match.\");\n} else if (Netatmo.temperatureDropsBelow.TargetTemperatureC <= Netatmo.temperatureDropsBelow.MeasuredTemperatureC) {\n  IfNotifications.sendNotification.skip(\"Temperature did not drop below target.\");\n} else {\n  var message = \"Temperature dropped below 18°C at \" + Netatmo.temperatureDropsBelow.MeasuredAt + \". Current temperature: \" + Netatmo.temperatureDropsBelow.MeasuredTemperatureC + \"°C\";\n  IfNotifications.sendNotification.setMessage(message);\n}"
  },
  {
    "intent": "When the temperature in New York drops to 32°F, save $5 toward my \"Winter Savings\" goal on Qapital.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= 32 && Weather.currentTemperatureRisesAbove.location === \"New York\") {\n  Qapital.saveTowardGoal.setGoal(\"Winter Savings\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature is above 32°F or location is not New York.\");\n}"
  },
  {
    "intent": "When a call is made from my Google Pixel 7 to the number 14155551234, associated with the contact name Jon Snow, and the call lasts for 25 seconds, upload the details of this phone call to my Unforgettable Me account, including the start time of the call, which occurred at 2020-07-08T04:17:06+05:00, in JSON format with the augmenter name AndroidPhoneCallMade.",
    "filter_code": "if (AndroidPhone.placeAPhoneCall.DeviceName === \"Google Pixel 7\" &&\n    AndroidPhone.placeAPhoneCall.ToNumber === \"14155551234\" &&\n    AndroidPhone.placeAPhoneCall.ContactName === \"Jon Snow\" &&\n    AndroidPhone.placeAPhoneCall.CallLength === \"25\") {\n  var callDetails = {\n    \"start_time\": AndroidPhone.placeAPhoneCall.OccurredAt,\n    \"contact_name\": AndroidPhone.placeAPhoneCall.ContactName,\n    \"to_number\": AndroidPhone.placeAPhoneCall.ToNumber,\n    \"call_length\": AndroidPhone.placeAPhoneCall.CallLength\n  };\n  UnforgettableMe.uploadData.setBody(JSON.stringify(callDetails));\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCallMade\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Call details do not match the specified conditions.\");\n}"
  },
  {
    "intent": "When an incoming call from a number like 14155551234 is answered on my Google Pixel 7 device, and the call lasts for at least 25 seconds with someone like Jon Snow, upload the call details to Unforgettable Me as a JSON object with \"start_date\" set to the time the call occurred, such as 2020-07-08T04:17:06+05:00, and \"end_date\" set to the end of the call, using \"AndroidPhoneCall\" as the augmenter name.",
    "filter_code": "if (AndroidPhone.receiveAPhoneCall.FromNumber === \"14155551234\"\n    && AndroidPhone.receiveAPhoneCall.DeviceName === \"Google Pixel 7\"\n    && AndroidPhone.receiveAPhoneCall.CallLength >= 25\n    && AndroidPhone.receiveAPhoneCall.ContactName === \"Jon Snow\") {\n  var startDate = AndroidPhone.receiveAPhoneCall.OccurredAt;\n  var callDuration = parseInt(AndroidPhone.receiveAPhoneCall.CallLength);\n  var endDate = new Date(startDate);\n  endDate.setSeconds(endDate.getSeconds() + callDuration);\n  var jsonData = {\n    \"start_date\": startDate,\n    \"end_date\": endDate.toISOString(),\n    \"contact_name\": AndroidPhone.receiveAPhoneCall.ContactName,\n    \"from_number\": AndroidPhone.receiveAPhoneCall.FromNumber,\n    \"call_length\": AndroidPhone.receiveAPhoneCall.CallLength\n  };\n  UnforgettableMe.uploadData.setBody(JSON.stringify(jsonData));\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCall\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Save the trending GIF from Giphy with the URL http://giphy.com/posts/dreams-are-real-and-best-with-cats, image URL http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif, and tags \"cats party\" to a Dropbox folder named \"GIF Collection\" at the path \"/IFTTT/Giphy Trends\" every time a new trending GIF is posted between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var url = Giphy.trending.URL;\n  var imageUrl = Giphy.trending.ImageURL;\n  var tags = Giphy.trending.Tags;\n  if (url === \"http://giphy.com/posts/dreams-are-real-and-best-with-cats\" && imageUrl === \"http://media.giphy.com/media/9WsTM8zLbys4o/giphy.gif\" && tags === \"cats party\") {\n    Dropbox.addFileFromUrl.setUrl(imageUrl);\n    Dropbox.addFileFromUrl.setFilename(\"trending_gif\");\n    Dropbox.addFileFromUrl.setPath(\"/IFTTT/Giphy Trends\");\n  } else {\n    Dropbox.addFileFromUrl.skip(\"GIF does not match the specified URL, image URL, or tags.\");\n  }\n} else {\n  Dropbox.addFileFromUrl.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Record any new Bitly bitlink with a title containing the keyword \"IFTTT\" and tags including \"productivity\" or \"tools\", created after 8:00 AM, to Unforgettable Me as a new entry with the augmenter name \"BitlyBookmark\" and body in JSON format including start_date and end_date fields.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8) {\n  var title = Bitly.newPublicBitmarkBitly.Title;\n  var tags = Bitly.newPublicBitmarkBitly.Tags;\n  if (title.includes(\"IFTTT\") && (tags.includes(\"productivity\") || tags.includes(\"tools\"))) {\n    UnforgettableMe.uploadData.setAugmenterName(\"BitlyBookmark\");\n    var body = {\n      \"start_date\": Bitly.newPublicBitmarkBitly.CreatedAt,\n      \"end_date\": Bitly.newPublicBitmarkBitly.CreatedAt,\n      \"title\": title,\n      \"url\": Bitly.newPublicBitmarkBitly.LongUrl,\n      \"tags\": tags\n    };\n    UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n  } else {\n    UnforgettableMe.uploadData.skip(\"Does not match the filter criteria.\");\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Created before 8:00 AM.\");\n}"
  },
  {
    "intent": "Upload details from Obfuscated Android phone calls made to your Unforgettable Me account, specifically when a call is received from the number 14155551234, with a contact name of Jon Snow, and the device used is Google Pixel 7, including the obfuscated number, start time in ISO8601 format such as 2020-07-08T04:17:06+05:00, and duration of 25 seconds, to the Unforgettable Me account using the augmenter name AndroidPhoneCallDetails.",
    "filter_code": "if (AndroidPhone.placeAPhoneCall.ToNumber === \"14155551234\" &&\n    AndroidPhone.placeAPhoneCall.ContactName === \"Jon Snow\" &&\n    AndroidPhone.placeAPhoneCall.DeviceName === \"Google Pixel 7\") {\n  var body = {\n    \"obfuscated_number\": AndroidPhone.placeAPhoneCall.ToNumber,\n    \"start_time\": AndroidPhone.placeAPhoneCall.OccurredAt,\n    \"duration\": AndroidPhone.placeAPhoneCall.CallLength\n  };\n  UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCallDetails\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Conditions not met for uploading call details.\");\n}"
  },
  {
    "intent": "When an incoming call from a number like 14155551234 is answered on my Google Pixel 7 device, upload the call details including the obfuscated number, start time (in ISO8601 format, such as 2020-07-08T04:17:06+05:00), and duration in seconds (for example, 25 seconds) to my Unforgettable Me account with the augmenter name \"AndroidPhoneCallReceived\" and include a JSON body containing the start date and end date of the call.",
    "filter_code": "var occurrenceTime = AndroidPhone.receiveAPhoneCall.OccurredAt;\nvar durationSeconds = AndroidPhone.receiveAPhoneCall.CallLength;\nvar callerNumber = AndroidPhone.receiveAPhoneCall.FromNumber;\nvar deviceName = AndroidPhone.receiveAPhoneCall.DeviceName;\n\nif (callerNumber === \"14155551234\" && deviceName === \"Google Pixel 7\") {\n  var callDetails = {\n    \"obfuscated_number\": callerNumber,\n    \"start_time\": occurrenceTime,\n    \"duration_in_seconds\": durationSeconds,\n    \"start_date\": occurrenceTime,\n    \"end_date\": new Date(new Date(occurrenceTime).getTime() + (durationSeconds * 1000)).toISOString()\n  };\n\n  UnforgettableMe.uploadData.setAugmenterName(\"AndroidPhoneCallReceived\");\n  UnforgettableMe.uploadData.setBody(JSON.stringify(callDetails));\n} else {\n  UnforgettableMe.uploadData.skip(\"The caller number or device does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new photo is posted to Instagram with a caption containing the keyword \"vacation\" and the photo is taken between 07:00 and 19:00, upload the photo to Unforgettable Me with the augmenter name \"InstagramVacationPhoto\" and include the photo's URL, source URL, embed code, and creation date in the body of the upload data in JSON format, such as {\"start_date\": \"2024-01-01\", \"end_date\": \"2024-01-31\", \"photo_url\": \"http://instagr.am/p/CTGBw/\", \"source_url\": \"http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg\", \"embed_code\": \"<iframe src=\\\"http://instagr.am/p/CTGBw/embed\\\" width=\\\"612\\\" height=\\\"710\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowtransparency=\\\"true\\\"></iframe>\", \"created_at\": \"January 15, 2024 at 14:30\"}.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Instagram.anyNewPhotoByYou.Caption.includes(\"vacation\")) {\n    var jsonData = {\n      \"start_date\": Instagram.anyNewPhotoByYou.CreatedAt.split(\" at \")[0],\n      \"end_date\": Instagram.anyNewPhotoByYou.CreatedAt.split(\" at \")[0],\n      \"photo_url\": Instagram.anyNewPhotoByYou.Url,\n      \"source_url\": Instagram.anyNewPhotoByYou.SourceUrl,\n      \"embed_code\": Instagram.anyNewPhotoByYou.EmbedCode,\n      \"created_at\": Instagram.anyNewPhotoByYou.CreatedAt\n    };\n    UnforgettableMe.uploadData.setBody(JSON.stringify(jsonData));\n    UnforgettableMe.uploadData.setAugmenterName(\"InstagramVacationPhoto\");\n  } else {\n    UnforgettableMe.uploadData.skip(\"Caption does not contain 'vacation'.\");\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Outside of desired hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new screenshot is taken on my iPhone and saved to the \"Favorites\" album, automatically upload it to the \"IFTTT/Screenshots\" folder in Dropbox using the temporary public photo URL, and name the file with the date and time it was taken, such as \"2023-02-20_14-30-00.png\".",
    "filter_code": "if (IosPhotos.iosNewScreenshot.AlbumName === \"Favorites\") {\n  var filename = IosPhotos.iosNewScreenshot.TakenDate.replace(/-/g, \"\").replace(/\\s/g, \"_\").replace(/:/g, \"-\") + \".png\";\n  var path = \"IFTTT/Screenshots\";\n  Dropbox.addFileFromUrl.setUrl(IosPhotos.iosNewScreenshot.TemporaryPublicPhotoURL);\n  Dropbox.addFileFromUrl.setFilename(filename);\n  Dropbox.addFileFromUrl.setPath(path);\n}"
  },
  {
    "intent": "When the Fitbit device reports a new daily activity summary with total steps greater than 10000, total floors climbed more than 5, and total calories burned over 1800, on the same day as reported by the Fitbit date ingredient, upload this data to Unforgettable Me with an augmenter name \"FitbitDailyActivity\" and include in the body a JSON object containing the start date set to the current date and end date also set to the current date.",
    "filter_code": "if (Fitbit.newDailyActivitySummary.TotalSteps > 10000 &&\n    Fitbit.newDailyActivitySummary.TotalFloorsClimbed > 5 &&\n    Fitbit.newDailyActivitySummary.TotalCaloriesBurned > 1800) {\n  var currentDate = new Date();\n  var startDate = currentDate.toISOString().split('T')[0];\n  var endDate = currentDate.toISOString().split('T')[0];\n  var body = {\n    \"start_date\": startDate,\n    \"end_date\": endDate,\n    \"total_steps\": Fitbit.newDailyActivitySummary.TotalSteps,\n    \"total_floors_climbed\": Fitbit.newDailyActivitySummary.TotalFloorsClimbed,\n    \"total_calories_burned\": Fitbit.newDailyActivitySummary.TotalCaloriesBurned\n  };\n  UnforgettableMe.uploadData.setAugmenterName(\"FitbitDailyActivity\");\n  UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n} else {\n  UnforgettableMe.uploadData.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new video is uploaded to Instagram with a caption containing the keyword \"vacation\" and the video source URL starts with \"http://distilleryimage7.s3.amazonaws.com/\", upload the video to Unforgettable Me with the augmenter name \"InstagramVacationVideo\" and include the JSON body {\"start_date\": \"2024-01-01\", \"end_date\": \"2024-01-31\", \"video_url\": \"{{VideoSourceURL}}\", \"caption\": \"{{Caption}}\"}.",
    "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"vacation\") && Instagram.anyNewVideoByYouInstagram.VideoSourceURL.startsWith(\"http://distilleryimage7.s3.amazonaws.com/\")) {\n  var jsonData = {\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-01-31\",\n    \"video_url\": Instagram.anyNewVideoByYouInstagram.VideoSourceURL,\n    \"caption\": Instagram.anyNewVideoByYouInstagram.Caption\n  };\n  UnforgettableMe.uploadData.setAugmenterName(\"InstagramVacationVideo\");\n  UnforgettableMe.uploadData.setBody(JSON.stringify(jsonData));\n} else {\n  UnforgettableMe.uploadData.skip(\"Caption does not contain 'vacation' or video source URL does not match.\");\n}"
  },
  {
    "intent": "When a new public photo is uploaded to Flickr with the title \"Summer Vacation\" and tags including \"beach\" and \"sunset\", upload it to Unforgettable Me as a new entry with the body containing the photo's source URL, http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg, and the augmenter name \"FlickrPhoto\".",
    "filter_code": "if (Flickr.anyNewPublicPhoto.Title === \"Summer Vacation\" && Flickr.anyNewPublicPhoto.Tags.includes(\"beach\") && Flickr.anyNewPublicPhoto.Tags.includes(\"sunset\")) {\n  UnforgettableMe.uploadData.setBody(JSON.stringify({\n    \"source_url\": Flickr.anyNewPublicPhoto.SourceUrl,\n    \"start_date\": Flickr.anyNewPublicPhoto.UploadedDate\n  }));\n  UnforgettableMe.uploadData.setAugmenterName(\"FlickrPhoto\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Photo does not match the specified title and tags.\");\n}"
  },
  {
    "intent": "Save the device data from the Huma-i device named \"Living Room Sensor\" to a Google sheet named \"Air Quality Log\" in the folder \"Home/Air Quality\" with rows formatted as \"Date|||CO2|||VOC|||PM2.5|||Temperature|||Humidity\" whenever new sensor data is created.",
    "filter_code": "if (HumaI.humaDeviceSensorDataTrigger.DeviceName === \"Living Room Sensor\") {\n  var row = HumaI.humaDeviceSensorDataTrigger.CreatedAt + \"|||\" +\n            HumaI.humaDeviceSensorDataTrigger.Co2 + \"|||\" +\n            HumaI.humaDeviceSensorDataTrigger.Voc + \"|||\" +\n            HumaI.humaDeviceSensorDataTrigger.Pm2 + \"|||\" +\n            HumaI.humaDeviceSensorDataTrigger.Temperature + \"|||\" +\n            HumaI.humaDeviceSensorDataTrigger.Humidity;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Air Quality Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Home/Air Quality\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(row);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Device name does not match 'Living Room Sensor'.\");\n}"
  },
  {
    "intent": "If the current price of Google Inc. stock (GOOG) drops below $600, place a market order to buy 10 shares.",
    "filter_code": "if (Finance.currentPriceDropsBelow.Price < 600 && Finance.currentPriceDropsBelow.StockTicker === \"GOOG\") {\n  Alpaca.placeMarketOrder.setSymbol(Finance.currentPriceDropsBelow.StockTicker);\n  Alpaca.placeMarketOrder.setSide(\"buy\");\n  Alpaca.placeMarketOrder.setQty(\"10\");\n} else {\n  Alpaca.placeMarketOrder.skip(\"Conditions not met to buy Google Inc. stock.\");\n}"
  },
  {
    "intent": "Log the weight of 65.0 kilograms from Fitbit Scales to Unforgettable Me with a body mass index of 19.62, using the augmenter name \"FitbitWeightEntry\", and including the date and time of the weight log entry as the start and end dates in the JSON format.",
    "filter_code": "var weight = Fitbit.newWeightLogged.Weight;\nvar bmi = Fitbit.newWeightLogged.BMI;\nvar weightUnit = Fitbit.newWeightLogged.WeightUnit;\nvar date = Fitbit.newWeightLogged.Date;\n\nif (weight === \"65.0\" && weightUnit === \"kilograms\" && bmi === \"19.62\") {\n  var body = {\n    \"start_date\": date,\n    \"end_date\": date,\n    \"weight\": weight + \" \" + weightUnit,\n    \"bmi\": bmi\n  };\n\n  UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n  UnforgettableMe.uploadData.setAugmenterName(\"FitbitWeightEntry\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Weight or BMI does not match the expected values.\");\n}"
  },
  {
    "intent": "Trigger the \"Good Morning\" scene on AICO when the temperature drops to 15°C in Paris.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius <= 15 && Weather.currentTemperatureRisesAbove.Location === \"Paris\") {\n  Aico.runScene.setSceneId(\"Good Morning\");\n} else {\n  Aico.runScene.skip(\"Temperature or location conditions not met.\");\n}"
  },
  {
    "intent": "When a new book titled \"The Psychology of Money\" by author Morgan Housel is listed on The New York Times Best Sellers list in the category of Business, with a rank of 1 and having been on the list for 10 weeks, append a row to a Google Sheets spreadsheet named \"Best Seller Tracker\" with the formatted row \"|||New Book|||The Psychology of Money|||Morgan Housel|||Business|||1|||10 weeks\" in the folder path \"My Documents/Book Lists\".",
    "filter_code": "if (Nytimes.newBookOnABestSellerList.Title === \"The Psychology of Money\"\n    && Nytimes.newBookOnABestSellerList.Author === \"Morgan Housel\"\n    && Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Business\"\n    && Nytimes.newBookOnABestSellerList.Rank === \"1\"\n    && Nytimes.newBookOnABestSellerList.WeeksOnList === \"10\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Best Seller Tracker\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"My Documents/Book Lists\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\"|||New Book|||The Psychology of Money|||Morgan Housel|||Business|||1|||10 weeks\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Conditions not met for appending to spreadsheet.\");\n}"
  },
  {
    "intent": "When a new submission is received on my JotForm survey form with the ID 1234567890 and the question filter set to \"Email\", append the filtered rich text data, including the submission date time and the respondent's detected IP address, to a Google Docs file named \"Survey Responses\" located in the folder path \"My Surveys/2023\".",
    "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" && Jotform.latestFormSubmission.FilteredRichTextData !== \"\") {\n  var ip = Jotform.latestFormSubmission.IP;\n  var submissionDateTime = Jotform.latestFormSubmission.SubmissionDateTime;\n  var filteredRichTextData = Jotform.latestFormSubmission.FilteredRichTextData;\n  GoogleDocs.appendToGoogleDoc.setFilename(\"Survey Responses\");\n  GoogleDocs.appendToGoogleDoc.setPath(\"My Surveys/2023\");\n  GoogleDocs.appendToGoogleDoc.setBody(\"<p>IP: \" + ip + \"</p><p>Submission Date Time: \" + submissionDateTime + \"</p>\" + filteredRichTextData);\n} else {\n  GoogleDocs.appendToGoogleDoc.skip(\"The form ID does not match or the question filter is not set to 'Email'.\");\n}"
  },
  {
    "intent": "Upload any new photo from the Facebook Page named \"The ifttt Office\" to Google Drive, specifically to the folder path \"IFTTT/Facebook Photos\", with the filename set to the photo's caption, such as \"Wow what a fun night!\", and use the full-sized image source URL, like http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg, for the upload.",
    "filter_code": "if (FacebookPages.newPhotoFromPage.PageName === \"The ifttt Office\") {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(FacebookPages.newPhotoFromPage.ImageSource);\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(FacebookPages.newPhotoFromPage.Caption);\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"IFTTT/Facebook Photos\");\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"Not from the Facebook Page named 'The ifttt Office'.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on device KNC1-W-00000088, add a new row with the text \"New event at 04:17:06\" to the bottom of the first worksheet in the Google Sheet named \"Event Log\", located in the folder path \"IFTTT/Logs\".",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  var formattedRow = \"New event at \" + Knocki.knocki.CreatedAt.substring(11, 19);\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Event Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Logs\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Gesture or device does not match.\");\n}"
  },
  {
    "intent": "Log every started irrigation from the Front Yard zone on Google Sheets spreadsheet named \"Irrigation Logs\" in the \"Garden Automation\" folder, including the date and time the irrigation was started, the planned duration in seconds, the unique identifier of the zone, the expected end time, and a unique id representing each irrigation, with a formatted row containing values separated by \"|||\".",
    "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Irrigation Logs\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"Garden Automation\");\nif (Cloudrain.irrigationStarted.ZoneName === \"Front Yard\") {\n  var formattedRow = Cloudrain.irrigationStarted.CreatedAt + \"|||\" + Cloudrain.irrigationStarted.Duration + \"|||\" + Cloudrain.irrigationStarted.ZoneId + \"|||\" + Cloudrain.irrigationStarted.ExpectedEndTime + \"|||\" + Cloudrain.irrigationStarted.IrrigationId;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Irrigation not from Front Yard zone.\");\n}"
  },
  {
    "intent": "Add a new row to the \"News Updates\" spreadsheet in the \"IFTTT\" folder with the entry title, entry URL, and entry author when an item matching the keyword \"technology\" is found in the RSS feed at http://blog.ifttt.com/rss.",
    "filter_code": "if (Feed.newFeedItemMatches.EntryTitle.includes(\"technology\") && Feed.newFeedItemMatches.FeedUrl === \"http://blog.ifttt.com/rss\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"News Updates\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(Feed.newFeedItemMatches.EntryTitle + \"|||\" + Feed.newFeedItemMatches.EntryUrl + \"|||\" + Feed.newFeedItemMatches.EntryAuthor);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Entry does not match the keyword 'technology' or feed URL\");\n}"
  },
  {
    "intent": "When the humidity level in the \"Home - Living room\" device drops below 30%, add a new row to the Google Sheets spreadsheet named \"Low Humidity Log\" with the formatted row containing the current date and time \"|||\" the humidity value \"|||\" the device name, and place the spreadsheet in the \"IFTTT/Weather Alerts\" folder.",
    "filter_code": "if (Airthings.humidityBelow.Device === \"Home - Living room\" && parseInt(Airthings.humidityBelow.Humidity) < 30) {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Low Humidity Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Weather Alerts\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(Airthings.humidityBelow.CreatedAt + \"|||\" + Airthings.humidityBelow.Humidity + \"|||\" + Airthings.humidityBelow.Device);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Humidity level is not below 30% in the Home - Living room device.\");\n}"
  },
  {
    "intent": "Add a new row to the Google Sheets spreadsheet named \"SoundCloud Favorites\" with the details of the newly liked track, including the track title \"A cool track\", description \"This track is sweet\", tags \"killer, noise\", track URL \"http://soundcloud.com/ribbonmusic/john-maus-believer\", username \"gaga\", user profile URL \"http://soundcloud.com/gaga-digi\", image URL \"http://i1.sndcdn.com/artworks-000006560516-1730pb-large.jpg\", embed code \"<object height='81' width='100%'> <param name='movie'...\", creation date \"2020-07-08T04:17:06+05:00\", track ID \"123\", and user ID \"123\", in the folder path \"SoundCloud/Favorites\", using the formatted row \"Title|||Description|||Tags|||TrackUrl|||Username|||UserProfileUrl|||ImageUrl|||EmbedCode|||CreatedAt|||TrackId|||UserId\" to separate cells.",
    "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"SoundCloud Favorites\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"SoundCloud/Favorites\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\n  Soundcloud.newPublicFavoriteTrack.Title + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.Description + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.Tags + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.TrackUrl + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.Username + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.UserProfileUrl + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.ImageUrl + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.EmbedCode + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.CreatedAt + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.TrackId + \"|||\" +\n  Soundcloud.newPublicFavoriteTrack.UserId\n);"
  },
  {
    "intent": "When a new version of the IFTTT app is released on the Apple App Store with a rating of 5 stars and the category is Productivity, send a notification with the message \"New IFTTT update available: Version 2.1.3. Release notes: + We made some improvements to...\".",
    "filter_code": "if (AppStore.newAppVersionReleased.Name === \"IFTTT\" && AppStore.newAppVersionReleased.Rating === \"5 stars\" && AppStore.newAppVersionReleased.Category === \"Productivity\") {\n  var message = \"New IFTTT update available: Version \" + AppStore.newAppVersionReleased.Version + \". Release notes: \" + AppStore.newAppVersionReleased.ReleaseNotes;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met for sending notification.\");\n}"
  },
  {
    "intent": "When the temperature outside drops below 5°C in London, set the Living Room TRV to fully open.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5 && Weather.currentTemperatureRisesAbove.Location === \"London\") {\n  LightwaverfHeating.setTrvPosition.setWhatPosition(\"fully open\");\n  LightwaverfHeating.setTrvPosition.skip(\"Temperature outside is below 5°C in London.\");\n} else {\n  LightwaverfHeating.setTrvPosition.skip(\"Temperature outside is not below 5°C in London or location is not London.\");\n}"
  },
  {
    "intent": "Save $5 toward my \"Dream Vacation\" goal in Qapital every time I complete a reminder titled \"Pick up milk\" from my \"Shopping\" list with a medium priority.",
    "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Pick up milk\"\n    && IosReminders.anyReminderCompleted.List === \"Shopping\"\n    && IosReminders.anyReminderCompleted.Priority === \"Medium\") {\n  Qapital.saveTowardGoal.setGoal(\"Dream Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Reminder does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Save £1 to your Dozens savings account every time you check-in on Foursquare at venues like the Sydney Opera House, with a shout like \"Hanging out with my mates!\", and move the funds immediately after each check-in.",
    "filter_code": "if (Foursquare.anyNewCheckin.VenueName === \"Sydney Opera House\" && Foursquare.anyNewCheckin.Shout === \"Hanging out with my mates!\") {\n  Dozens.save.setAmount(\"1\");\n}"
  },
  {
    "intent": "Turn off all Philips Hue lights in the living room when Anyware Energy Saving Mode is activated at home.",
    "filter_code": "if (AnywareServices.energySavingModeActivated.Location === \"Home\") {\n  Hue.turnOnAllHue.skip(\"Energy saving mode activated, turning off lights\");\n}"
  },
  {
    "intent": "When the current weather condition in New York changes to rain and the temperature is below 10°C, send a notification with the event ID \"WeatherAlert\" and the text \"Rain detected, temperature is 9°C\" to the MESH app.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && parseFloat(Weather.currentConditionIs.TempCelsius) < 10) {\n  Mesh.events.setEventID(\"WeatherAlert\");\n  Mesh.events.setText(\"Rain detected, temperature is \" + Weather.currentConditionIs.TempCelsius + \"°C\");\n} else {\n  Mesh.events.skip(\"Conditions do not meet the criteria.\");\n}"
  },
  {
    "intent": "When the current weather condition in New York changes to Sunny and the temperature is above 18°C, send a notification with the text \"Good morning, it's sunny!\" to the MESH event with EventID \"morning_update\".",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && parseFloat(Weather.currentConditionIs.TempCelsius) > 18) {\n  Mesh.events.setEventId(\"morning_update\");\n  Mesh.events.setText(\"Good morning, it's sunny!\");\n} else {\n  Mesh.events.skip(\"Conditions are not met.\");\n}"
  },
  {
    "intent": "When the current weather condition at my location, New York City, changes to cloudy and the temperature is below 15°C, send a notification to my MESH app with the EventID \"WeatherAlert\" and the text \"Cloudy weather detected, temperature is 12°C\".",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Cloudy\" && parseFloat(Weather.currentConditionIs.TempCelsius) < 15) {\n  Mesh.events.setEventID(\"WeatherAlert\");\n  Mesh.events.setText(`Cloudy weather detected, temperature is ${Weather.currentConditionIs.TempCelsius}°C`);\n} else {\n  Mesh.events.skip(\"Conditions not met for sending notification.\");\n}"
  },
  {
    "intent": "When the current weather condition in New York changes to snow and the temperature drops below 32°F, send a notification to the MESH app with the event ID \"WinterAlert\" and the text \"Snowfall detected, temperature at 25°F\".",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Snow\" && Weather.currentConditionIs.TempFahrenheit < 32) {\n  Mesh.events.setEventID(\"WinterAlert\");\n  Mesh.events.setText(\"Snowfall detected, temperature at \" + Weather.currentConditionIs.TempFahrenheit + \"°F\");\n} else {\n  Mesh.events.skip(\"Conditions do not meet the criteria for a winter alert.\");\n}"
  },
  {
    "intent": "Send a message to the #weather-updates channel on Discord at 7:00 AM every day with the current weather condition, high and low temperatures in Fahrenheit, and a UV index, including an image of today's condition, while allowing mentions of @everyone.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var message = \"Current weather: \" + Weather.currentWeatherAtTime.CurrentCondition + \", High: \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F, Low: \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F, UV Index: \" + Weather.currentWeatherAtTime.UvIndex;\n  Discord.postMessageToChannel.setMessage(message);\n  Discord.postMessageToChannel.setAllowableMentions(\"@everyone\");\n  var imageUrl = Weather.currentWeatherAtTime.TodaysConditionImageURL;\n  // Note: The provided JSON does not contain a method to directly add an image to the message.\n  // You may need to modify the Discord action or use a different approach to include the image.\n} else {\n  Discord.postMessageToChannel.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "Turn on the Living Room LIFX lights to a warm white color with 80% brightness and a 10-second fade-in duration when the sunset occurs in New York City, as reported by Weather Underground, and the current temperature is above 60°F.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit > 60 && Weather.sunSets.SunsetAt !== null) {\n  Lifx.turnOn.setAdvancedOptions(\"color: warm_white; brightness: 0.8; fade_in_duration: 10\");\n  Lifx.turnOn.skip(\"Turning on Living Room LIFX lights at sunset in New York City.\");\n}"
  },
  {
    "intent": "If the current weather condition is rain in New York, then set the color of all Philips Hue lights in the living room to blue (#0000FF).",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.Location === \"New York\") {\n  Hue.setColorAllHue.setColor(\"#0000FF\");\n} else {\n  Hue.setColorAllHue.skip(\"Not raining in New York or not living room lights.\");\n}"
  },
  {
    "intent": "When the weather condition changes to Sunny at a location like New York and the temperature is above 18°C, launch the Good Morning scene on myLink.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && Weather.currentConditionIs.TempCelsius > 18) {\n  SomfyMylink.play.setScene(\"Good Morning\");\n} else {\n  SomfyMylink.play.skip(\"Weather condition is not sunny or temperature is below 18°C.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Light device within 15 minutes of the sunrise in New York.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar fifteenMinutesAfterSunrise = new Date(sunriseTime.getTime() + 15 * 60 * 1000);\nvar currentTime = new Date();\n\nif (currentTime >= sunriseTime && currentTime <= fifteenMinutesAfterSunrise) {\n  Kasa.turnOff.setDevice(\"Living Room Light\");\n} else {\n  Kasa.turnOff.skip(\"Not within 15 minutes of sunrise.\");\n}"
  },
  {
    "intent": "Save $5 toward my Summer Vacation goal every time the temperature in New York rises above 75°F.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature is not above 75°F.\");\n}"
  },
  {
    "intent": "When the sunset occurs in my location, as determined by Weather Underground, and the current temperature is 72 degrees Fahrenheit, set my Nanoleaf Light Panels to the \"Relax\" scene.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && new Date() >= new Date(Weather.sunSets.SunsetAt)) {\n  Nanoleaf.turnOnScene.setMyScenes(\"Relax\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"Conditions not met for Relax scene.\");\n}"
  },
  {
    "intent": "Save $10 toward my \"Emergency Fund\" goal every time it snows tomorrow in New York City.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Snow\") {\n  Qapital.saveTowardGoal.setGoal(\"Emergency Fund\");\n  Qapital.saveTowardGoal.setAmount(10);\n} else {\n  Qapital.saveTowardGoal.skip(\"Not snowing tomorrow.\");\n}"
  },
  {
    "intent": "When the temperature in Paris drops below 5 °C, park the Husqvarna Automower until further notice.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5) {\n  Automower.parkUntilFurtherNotice.skip(\"Temperature in Paris is below 5 °C.\");\n}"
  },
  {
    "intent": "Turn on the Nanoleaf Light Panels to the \"Relax\" scene at sunrise in New York City, when the temperature is above 18 degrees Celsius and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Nanoleaf.turnOnScene.setMyScenes(\"Relax\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"Temperature is not above 18 degrees Celsius or the weather condition is not Sunny.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp at sunrise when the temperature is above 18°C and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Idevices.turnDeviceOff.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnDeviceOff.skip(\"Temperature is not above 18°C or weather condition is not Sunny.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Light switch when the sunrise is at 6:00 AM and the current temperature is 65 degrees Fahrenheit in New York.",
    "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && Weather.sunRises.TempFahrenheit === \"65\") {\n  Abode.turnOffSwitch.skip(\"Sunrise at 6:00 AM and temperature is 65 degrees Fahrenheit\");\n}"
  },
  {
    "intent": "When the weather condition is \"Rain\" in Tokyo, BOCCO speaks \"雨が降りそうなので、傘を持ちましょう\" in the living room.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.Location === \"Tokyo\") {\n  Bocco.boccoSpeak.setMessage(\"雨が降りそうなので、傘を持ちましょう\");\n  Bocco.boccoSpeak.setLang(\"ja\");\n  Bocco.boccoSpeak.room = \"living room\";\n} else {\n  Bocco.boccoSpeak.skip(\"Weather condition is not 'Rain' in Tokyo.\");\n}"
  },
  {
    "intent": "Set the Apilio variable \"TemperatureAboveThreshold\" to TRUE every time the Netatmo Weather Station reports that the temperature at \"My Home - Indoor station\" has risen above 25 degrees Celsius.",
    "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.TargetTemperatureC === \"25\") {\n  Apilio.booleanVariableToUpdate.set({ variableIdentifier: \"TemperatureAboveThreshold\", value: true });\n}"
  },
  {
    "intent": "Set the variable \"Temperature_Drop_Flag\" in Apilio to FALSE every time the Netatmo Weather Station reports that the temperature at \"My Home - Indoor station\" drops below 18 degrees Celsius.",
    "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 18) {\n  Apilio.booleanVariableToFalseUpdates.setVariableIdentifier(\"Temperature_Drop_Flag\");\n}"
  },
  {
    "intent": "Wenn die Sonne in deiner Region untergeht und die aktuelle Temperatur 18 Grad Celsius beträgt, führe die Aktion mit dem Code \"Sonnuntergang\" in deiner Qbox aus.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\") {\n  Coqon.simpleRuleAction.set_action_code(\"Sonnuntergang\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Temperatur ist nicht 18 Grad Celsius\");\n}"
  },
  {
    "intent": "Turn off the night light of my Bedroom Lamp at sunrise, which is today at 06:04 AM, when the temperature outside is 18 degrees Celsius and the condition is Sunny.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar currentTime = new Date();\nif (currentTime >= sunriseTime) {\n  Idevices.turnNightlightOff.setWhatDevice(\"Bedroom Lamp\");\n} else {\n  Idevices.turnNightlightOn.skip(\"Not yet sunrise.\");\n}"
  },
  {
    "intent": "When the sunrise occurs at my location, which is set to New York City, and the current weather condition is Sunny with a temperature of 72 degrees Fahrenheit, open my Living Room blind.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempFahrenheit === \"72\" && Weather.sunRises.Location === \"New York City\") {\n  DooyaConnector.openBlinds.setWhichBlinds(\"Living Room\");\n} else {\n  DooyaConnector.openBlinds.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Configure a Nexia automation named \"Summer Mode\" to run when the outdoor temperature in New York rises above 75 degrees Fahrenheit, triggering the automation between 07:00 and 19:00.",
    "filter_code": "var tempFahrenheit = Weather.currentTemperatureRisesAbove.TempFahrenheit;\nvar location = \"New York\";\nvar hour = Meta.currentUserTime.hour();\nvar nexiaAutomationName = \"Summer Mode\";\n\nif (tempFahrenheit > 75 && location === \"New York\" && hour >= 7 && hour <= 19) {\n  Nexia.nexiaAutomation.setNexiaAutomationName(nexiaAutomationName);\n} else {\n  Nexia.nexiaAutomation.skip(\"Temperature is not above 75 degrees Fahrenheit in New York or outside of hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Send a notification with the message \"Rain has started at My Rain gauge\" whenever it starts raining, as measured by My Rain gauge, and notify me at the exact moment the rain begins.",
    "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  IfNotifications.sendNotification.setMessage(\"Rain has started at My Rain gauge\");\n} else {\n  IfNotifications.sendNotification.skip(\"Not My Rain gauge\");\n}"
  },
  {
    "intent": "When the temperature in New York rises above 75 degrees Fahrenheit, change the living room air conditioning mode to cool.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Airtouch.acMode.setMode(\"cool\");\n}"
  },
  {
    "intent": "Lancez le scénario « Protection pluie » dans energeasy connect lorsque la condition météorologique actuelle à Paris est « Pluie », avec une température inférieure à 15 degrés Celsius, et fermez vos volets de 50% pour protéger vos fenêtres de la pluie.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Pluie\" && Weather.currentConditionIs.TempCelsius < 15) {\n  Energeasyconnect.launchActionGroup.setActionGroup(\"Protection pluie\");\n  Energeasyconnect.launchActionGroup.skip(\"Lancement du scénario Protection pluie en raison de la pluie et d'une température inférieure à 15 degrés Celsius.\");\n} else {\n  Energeasyconnect.launchActionGroup.skip(\"Conditions météorologiques ne correspondant pas au lancement du scénario Protection pluie.\");\n}"
  },
  {
    "intent": "Arm the Wireless Tag with ID \"Kitchen Door\" at the local sunset time, which is today at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.SunsetAt == \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius == \"18\" && Weather.sunSets.Condition == \"Sunny\") {\n  Wirelesstag.arm.setDoorModeSetClosed(\"Kitchen Door\");\n} else {\n  Wirelesstag.arm.skip(\"Conditions not met to arm the Wireless Tag.\");\n}"
  },
  {
    "intent": "Wenn die Sonne in deiner Region aufgeht und die aktuelle Temperatur 18 Grad Celsius beträgt, fahre die Rollläden in deinem Wohnzimmer hoch und schalte die Beleuchtung im Esszimmer ein, wenn das Wetter sonnig ist.",
    "filter_code": "if (Weather.sunRises.SunriseAt && Weather.sunRises.TempCelsius === \"18\" && Weather.sunRises.Condition === \"Sunny\") {\n  Coqon.simpleRuleAction.set(\"action_code\", \"rolladen_wohnzimmer_hoch\");\n  Coqon.simpleRuleAction.set(\"action_code\", \"beleuchtung_esszimmer_ein\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Bedingungen nicht erfüllt\");\n}"
  },
  {
    "intent": "Set the living room Warmup Smart thermostat to 20°C when it's raining in New York.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  WarmupSmartThermostat.setTemperature.setTemperature(\"20\");\n} else {\n  WarmupSmartThermostat.setTemperature.skip(\"Not raining.\");\n}"
  },
  {
    "intent": "Send an SMS notification with the message \"High temperature alert: 38°C\" when the Netatmo Weather Station measures a temperature rise above 36°C at My Home - Indoor station.",
    "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.TargetTemperatureC === \"36\") {\n  IfNotifications.sendNotification.setMessage(\"High temperature alert: \" + Netatmo.temperatureRisesAbove.MeasuredTemperatureC + \"°C\");\n} else {\n  IfNotifications.sendNotification.skip(\"Temperature is not above 36°C or device name does not match.\");\n}"
  },
  {
    "intent": "Configure a Nexia automation named \"Pollen Alert\" in the house named \"Home\" to run when the pollen count rises above 8 at the location of New York City, and also send a notification with the current temperature of 75 degrees Fahrenheit and the weather condition as \"Partly Cloudy\".",
    "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 8 && Weather.currentPollenCountRisesAbove.Location === \"New York City\") {\n  Nexia.nexiaAutomation.setNexiaAutomationName(\"Pollen Alert\");\n  Nexia.nexiaAutomation.setHouseName(\"Home\");\n  var notificationMessage = \"The pollen count has risen above 8. Current temperature: \" + Weather.currentPollenCountRisesAbove.TempFahrenheit + \"°F, Condition: \" + Weather.currentPollenCountRisesAbove.Condition;\n  if (Weather.currentPollenCountRisesAbove.TempFahrenheit === \"75\" && Weather.currentPollenCountRisesAbove.Condition === \"Partly Cloudy\") {\n    Nexia.nexiaAutomation.sendNotification(notificationMessage);\n  } else {\n    Nexia.nexiaAutomation.skip(\"Temperature or condition does not match.\");\n  }\n} else {\n  Nexia.nexiaAutomation.skip(\"Pollen count is not above 8 or location is not New York City.\");\n}"
  },
  {
    "intent": "Disarm the Wireless Tag named \"Home Entrance\" at sunrise time, which is 06:15 AM, when the temperature is around 18 degrees Celsius and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && Weather.sunRises.SunriseAt.getMinutes() === 15\n    && Weather.sunRises.TempCelsius >= 17.5 && Weather.sunRises.TempCelsius <= 18.5\n    && Weather.sunRises.Condition === \"Sunny\") {\n  Wirelesstag.disarm.setTagid(\"Home Entrance\");\n} else {\n  Wirelesstag.disarm.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn off the garden lights in the backyard and patio area at sunrise when the temperature is above 15°C and the weather condition is Sunny, by running the \"Garden Lights OFF\" shortcut in Futurehome.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 15 && Weather.sunRises.Condition === \"Sunny\") {\n  Futurehome.runShortcut(\"Garden Lights OFF\");\n} else {\n  Futurehome.runShortcut.skip(\"Temperature is not above 15°C or weather condition is not Sunny.\");\n}"
  },
  {
    "intent": "Change the living room air conditioning mode to heat when the current outside temperature in New York falls below 40°F.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 40) {\n  Airtouch.acMode.setMode(\"heat\");\n}"
  },
  {
    "intent": "Send an SMS notification with the message \"Humidity alert: 67% at My Home - Indoor station\" when the humidity measured by My Home - Indoor station rises above 65% at any time.",
    "filter_code": "if (Netatmo.humidityRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.humidityRisesAbove.MeasuredHumidity > 65) {\n  IfNotifications.sendNotification.setMessage(\"Humidity alert: \" + Netatmo.humidityRisesAbove.MeasuredHumidity + \"% at \" + Netatmo.humidityRisesAbove.DeviceName);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "If the current weather condition is rainy at the location of New York, then BOCCO speaks aloud in the living room with the message \"It's raining outside\" in English.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Bocco.boccoSpeak.setMessage(\"It's raining outside\");\n  Bocco.boccoSpeak.setLang(\"English\");\n} else {\n  Bocco.boccoSpeak.skip(\"Not rainy outside\");\n}"
  },
  {
    "intent": "When the temperature measured by the Netatmo weather station at \"My Home - Indoor station\" drops below 0°C, set all Philips Hue lights in the living room to blue (#0000FF).",
    "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 0) {\n  Hue.setColorAllHue.setColor(\"#0000FF\");\n} else {\n  Hue.setColorAllHue.skip(\"Temperature is not below 0°C or device name does not match.\");\n}"
  },
  {
    "intent": "If the Weather Underground forecast for your location calls for rain tomorrow, with a high temperature of 18°C and a low of 10°C, pause all watering on your RainMachine device named \"Front Yard Sprinkler\" for a duration of 60 minutes.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"18\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"10\") {\n  RainMachine.pauseAllWatering.setSprinkler(\"Front Yard Sprinkler\");\n  RainMachine.pauseAllWatering.setDuration(60);\n  RainMachine.pauseAllWatering.skip(\"Rain forecasted for tomorrow, pausing watering.\");\n}"
  },
  {
    "intent": "When the sunset occurs at your location, with a temperature of 18°C and the condition being Sunny, make a phone call using Woopla and play the text \"Time to wake up, it's sunset\" in English.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Woopla.ttsCall.setTts(\"Time to wake up, it's sunset\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When the sun rises at my location, as reported by Weather Underground, and the current condition is Sunny, set my Moonside lights to 100 percent brightness.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\") {\n  Moonside.setBrightness100.skip();\n}"
  },
  {
    "intent": "Launch the 'Good Evening' scenario in Gideon Smart Home when the sunset at your location is between 16:00 and 20:00, and the current temperature is above 15°C, to gradually turn on the lights.",
    "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar tempCelsius = parseFloat(Weather.sunSets.TempCelsius);\nif (sunsetHour >= 16 && sunsetHour <= 20 && tempCelsius > 15) {\n  Gideon.launchScenario.setScenarioName(\"Good Evening\");\n} else {\n  Gideon.launchScenario.skip(\"Conditions not met for 'Good Evening' scenario.\");\n}"
  },
  {
    "intent": "Open the Living Room eWeLink Support curtain motor when it starts to rain in New York City.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Ewelink.electricCurtainSwitchAction.setOnoffActQuery(\"Open\");\n} else {\n  Ewelink.electricCurtainSwitchAction.skip(\"It's not raining.\");\n}"
  },
  {
    "intent": "Send a sms to your phone with the message \"Rain has started at My Rain gauge\" when it starts raining at My Rain gauge.",
    "filter_code": "if (Netatmo.rainHasStarted.DeviceName !== \"My Rain gauge\") {\n  IfNotifications.sendNotification.skip(\"Not the specified rain gauge.\");\n} else {\n  var message = `Rain has started at ${Netatmo.rainHasStarted.DeviceName}`;\n  IfNotifications.sendNotification.setMessage(message);\n}"
  },
  {
    "intent": "If the pollen count rises above 8 in New York, send a voice message to my Orion Group saying \"High pollen count of 9.2, currently sunny with a temperature of 75°F, check the 5-day forecast at http://www.weather.com/weather/5-day/GMXX1273 for updates.\"",
    "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 8 && Weather.currentPollenCountRisesAbove.Location === \"New York\") {\n  var message = \"High pollen count of \" + Weather.currentPollenCountRisesAbove.PollenCount + \", currently \" + Weather.currentPollenCountRisesAbove.Condition + \" with a temperature of \" + Weather.currentPollenCountRisesAbove.TempFahrenheit + \"°F, check the 5-day forecast at \" + Weather.currentPollenCountRisesAbove.ForecastUrl + \" for updates.\";\n  Orion.sendVoiceMessage.setMessage(message);\n} else {\n  Orion.sendVoiceMessage.skip(\"Pollen count is not high enough or location does not match.\");\n}"
  },
  {
    "intent": "When the outdoor temperature in New York rises above 75 degrees Fahrenheit, run the \"Good Morning\" American Standard Home automation.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75 && Weather.currentTemperatureRisesAbove.location === \"New York\") {\n  AmericanStandardHome.nexiaAutomation.setNexiaAutomation(\"Good Morning\");\n} else {\n  AmericanStandardHome.nexiaAutomation.skip(\"Temperature is not above 75 degrees Fahrenheit in New York.\");\n}"
  },
  {
    "intent": "Trigger the \"Good Morning\" scene in MyMilan when the sunrise occurs at a location with a temperature of 18°C and the current weather condition is Sunny, to open the curtains, turn on the lights, and play soothing music.",
    "filter_code": "if (Weather.sunRises.TempCelsius === \"18\" && Weather.sunRises.Condition === \"Sunny\") {\n  Mymilan.aScenes.setScenes(\"Good Morning\");\n} else {\n  Mymilan.aScenes.skip(\"Conditions not met to trigger 'Good Morning' scene.\");\n}"
  },
  {
    "intent": "Launch the \"Relax at Home\" scenario on Gideon Smart Home when the temperature rises above 75 degrees Fahrenheit in New York, and it's sunny outside, to turn off the thermostat, open the blinds, and freshen up the environment.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75 && Weather.currentTemperatureRisesAbove.Condition === \"Sunny\" && Weather.currentTemperatureRisesAbove.Location === \"New York\") {\n  Gideon.launchScenario.setScenarioName(\"Relax at Home\");\n} else {\n  Gideon.launchScenario.skip(\"Conditions not met to launch 'Relax at Home' scenario.\");\n}"
  },
  {
    "intent": "Turn on the living room lamp 15 minutes before sunset when the current weather condition is Sunny and the temperature is above 18°C.",
    "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar fifteenMinutesBeforeSunset = new Date(sunsetTime.getTime() - 15 * 60 * 1000);\nvar currentTime = new Date();\nvar currentTempCelsius = Weather.sunSets.TempCelsius;\nvar currentCondition = Weather.sunSets.Condition;\n\nif (currentCondition === \"Sunny\" && currentTempCelsius > 18 && currentTime >= fifteenMinutesBeforeSunset) {\n  Aisync.onOff.setDevice(\"living room lamp\");\n  Aisync.onOff.setOnOff(\"on\");\n} else {\n  Aisync.onOff.skip(\"Conditions not met to turn on the living room lamp.\");\n}"
  },
  {
    "intent": "At sunset, which is expected to occur at 7:45 PM today according to the Weather Underground forecast for my location, the Lexi living room lights group will automatically turn on.",
    "filter_code": "if (Weather.sunSets.SunsetAt.getHours() === 19 && Weather.sunSets.SunsetAt.getMinutes() === 45) {\n  Lexi.groupTurnOn.setGroup(\"Living Room\");\n} else {\n  Lexi.groupTurnOn.skip(\"It's not sunset time yet.\");\n}"
  },
  {
    "intent": "When the current weather condition is Sunny and the temperature is above 25°C in New York, set the Brilliant Nexus AC device named \"Living Room AC\" to Cool mode with a temperature of 22°C and a fan speed of Medium.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && Weather.currentConditionIs.TempCelsius > 25) {\n  BrilliantNexus.acExecution.setMode(\"Cool\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n}"
  },
  {
    "intent": "Turn on my Living Room Lamp device when the sun rises in Tokyo, Japan, and the current temperature is above 15°C.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 15) {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Temperature is not above 15°C.\");\n}"
  },
  {
    "intent": "Turn on the Nexus Home Lights when the sun sets at your location, specifically at 04:17:06+05:00, and the current temperature is 18 degrees Celsius with a sunny condition.",
    "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  BrilliantNexus.lights.setStatus(\"ON\");\n} else {\n  BrilliantNexus.lights.skip(\"Conditions not met to turn on the lights.\");\n}"
  },
  {
    "intent": "Set the sensitivity of Area 1 to High, Area 2 to Medium, Area 3 to Low, and Area 4 to Very Low for the \"Backyard Camera\" in INSTAR Cloud when the sunset time is after 19:00 according to Weather Underground's weather report for the location set as \"Home\".",
    "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar hour = sunsetTime.getHours();\nif (hour >= 19) {\n  Instar.sensOn.setSensitive1(\"High\");\n  Instar.sensOn.setSensitive2(\"Medium\");\n  Instar.sensOn.setSensitive3(\"Low\");\n  Instar.sensOn.setSensitive4(\"Very Low\");\n  Instar.sensOn.setCamName(\"Backyard Camera\");\n} else {\n  Instar.sensOn.skip(\"Sunset time is before 19:00\");\n}"
  },
  {
    "intent": "When the temperature in degrees Celsius drops below 5 at the location of home, modify the iZone target temperature of the living room zone to 20 degrees Celsius.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5) {\n  IZone.setzonesetpoint.setTemp(\"20\");\n} else {\n  IZone.setzonesetpoint.skip(\"Temperature is not below 5 degrees Celsius.\");\n}"
  },
  {
    "intent": "When the temperature outside drops below 5°C in the location of my home, open the living room curtains to let in some sunlight.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5) {\n  MyCurtains.moveDevice.setMoveType(\"open\");\n  MyCurtains.moveDevice.skip();\n}"
  },
  {
    "intent": "Turn on the Living Room Ceiling Fan device using Ai-Sync when the temperature rises above 75 degrees Fahrenheit in New York, as reported by Weather Underground.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Aisync.onOff.setDevice(\"Living Room Ceiling Fan\");\n  Aisync.onOff.setOnOff(\"on\");\n} else {\n  Aisync.onOff.skip(\"Temperature is not above 75 degrees Fahrenheit.\");\n}"
  },
  {
    "intent": "Set the sensitivity of Area 1 to High, Area 2 to Medium, Area 3 to Low, and Area 4 to Very Low for the Office Camera in INSTAR Cloud when the current temperature is above 18 degrees Celsius and the weather condition is Sunny, as reported by Weather Underground at sunrise.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Instar.sensOn.setSensitive1(\"High\");\n  Instar.sensOn.setSensitive2(\"Medium\");\n  Instar.sensOn.setSensitive3(\"Low\");\n  Instar.sensOn.setSensitive4(\"Very Low\");\n  Instar.sensOn.setCamName(\"Office Camera\");\n} else {\n  Instar.sensOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the INSTAR Cloud alarm email at sunrise, which is 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny, in the location where the weather forecast URL is http://www.weather.com/weather/5-day/GMXX1273.",
    "filter_code": "var sunriseTime = Weather.sunRises.SunriseAt;\nvar currentTempCelsius = Weather.sunRises.TempCelsius;\nvar condition = Weather.sunRises.Condition;\nvar forecastUrl = Weather.sunRises.ForecastUrl;\n\nif (sunriseTime !== null && currentTempCelsius === \"18\" && condition === \"Sunny\" && forecastUrl === \"http://www.weather.com/weather/5-day/GMXX1273\") {\n  Instar.cloudAlarmEmailOff.skip(\"Turning on INSTAR Cloud alarm email at sunrise.\");\n} else {\n  // No action\n}"
  },
  {
    "intent": "At sunrise, set the Nexus Home AC mode to cooling and temperature to 22°C, then turn on the Living Room Light if the current weather condition is Sunny and the high temperature for the day is above 25°C, otherwise turn it off.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && parseInt(Weather.sunRises.HighTempCelsius) > 25) {\n  BrilliantNexus.lights.setStatus(\"on\");\n} else {\n  BrilliantNexus.lights.setStatus(\"off\");\n}\n\nBrilliantNexus.acMode.setMode(\"cooling\");\nBrilliantNexus.acTemperature.setTemperature(22);"
  },
  {
    "intent": "Turn on the living room fan 15 minutes before sunset when the outside temperature is above 70 degrees Fahrenheit and the weather condition is sunny.",
    "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar fifteenMinutesBeforeSunset = new Date(sunsetTime.getTime() - 15 * 60 * 1000);\nvar currentTime = new Date();\nvar tempFahrenheit = parseFloat(Weather.sunSets.TempFahrenheit);\nvar condition = Weather.sunSets.Condition;\n\nif (currentTime >= fifteenMinutesBeforeSunset && tempFahrenheit > 70 && condition === \"Sunny\") {\n  Fansync.onOff.setDevice(\"living room fan\");\n  Fansync.onOff.setOnOff(\"on\");\n} else {\n  Fansync.onOff.skip(\"Conditions not met to turn on the living room fan.\");\n}"
  },
  {
    "intent": "If tomorrow's forecast in Seoul calls for Sunny conditions with a high temperature of 22°C and a low of 18°C, then send a message to My Personal EveryKit saying \"Tomorrow will be sunny, don't forget your sunglasses!\" with the data \"Sunny, 22°C high, 18°C low\".",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Sunny\"\n    && Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"22\"\n    && Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"18\") {\n  Everykit.sendMessage.setWhatData(\"Sunny, 22°C high, 18°C low\");\n  Everykit.sendMessage.setActionMessage(\"Tomorrow will be sunny, don't forget your sunglasses!\");\n} else {\n  Everykit.sendMessage.skip(\"Conditions do not match.\");\n}"
  },
  {
    "intent": "Report the rainfall amount of 10.92 mm measured at 2020-07-08T04:17:06+05:00 from My Rain gauge to Netro device Smart Garden, setting the date to 2020-07-08, condition to Light Rain, summary to Rainy weather, rain amount to 10.92 mm, and rain probability to 100.",
    "filter_code": "Netro.reportWeather.setDevice(\"Smart Garden\")\n      .setDate(\"2020-07-08\")\n      .setCondition(\"Light Rain\")\n      .setSummary(\"Rainy weather\")\n      .setRain(Netatmo.rainTodayAmount.MeasuredRainfallMM)\n      .setRainProb(\"100\");"
  },
  {
    "intent": "At sunrise in New York, automatically turn off the lights in the Living Room group.",
    "filter_code": "if (Weather.sunRises.SunriseAt !== null && Weather.sunRises.Location === \"New York\") {\n  Lexi.groupTurnOff.setGroup(\"Living Room\");\n}"
  },
  {
    "intent": "Turn off INSTAR Cloud alarm email at sunset, which is today at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny in my location.",
    "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Instar.cloudAlarmEmailOff.skip(\"Turning off INSTAR Cloud alarm email at sunset.\");\n}"
  },
  {
    "intent": "When the outdoor temperature in New York rises above 75°F, run the 'Summer Mode' Nexia automation on my Trane Home system.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= 75 || Weather.currentTemperatureRisesAbove.location !== \"New York\") {\n  TraneHome.nexiaAutomation.skip(\"Outdoor temperature in New York is not above 75°F.\");\n} else {\n  TraneHome.nexiaAutomation.setNexiaAutomation(\"Summer Mode\");\n}"
  },
  {
    "intent": "When the outside temperature rises above 75°F in New York, change the Nexus Home AC mode to 'Cool' and set the AC temperature to 68°F with a fan speed of 'Medium'.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  BrilliantNexus.acExecution.setMode(\"Cool\");\n  BrilliantNexus.acExecution.setTemperature(68);\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n}"
  },
  {
    "intent": "Open the garage door labeled \"Main Garage Door\" at sunrise when the current temperature is above 40°F and the weather condition is Sunny, using the Garadget account associated with the device named \"Home Garage\".",
    "filter_code": "if (Weather.sunRises.TempFahrenheit > 40 && Weather.sunRises.Condition === \"Sunny\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n  Garadget.openDoor();\n} else {\n  Garadget.openDoor.skip(\"Temperature is not above 40°F or weather condition is not Sunny.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp using AduroSmart when the sunrise is at 6:00 AM in New York and the current weather condition is Sunny with a temperature of 72°F.",
    "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 && Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempFahrenheit === \"72\") {\n  AduroSmart.turnondevice.setSelectdevice(\"Living Room Lamp\");\n} else {\n  AduroSmart.turnondevice.skip(\"Conditions not met to turn on the Living Room Lamp.\");\n}"
  },
  {
    "intent": "At sunrise, automatically turn off all Lexi lights in the living room.",
    "filter_code": "Lexi.deviceTurnOffAll.skip(\"It's sunrise, turning off all lights in the living room.\");"
  },
  {
    "intent": "When the Front Door lock at the San Diego beach house is locked by John Smith, enable the \"Goodnight\" action on Brilliant Nexus.",
    "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\");\n  BrilliantNexus.execrule({ \"rule_name\": \"Goodnight\" });\n} else {\n  BrilliantNexus.execrule.skip(\"Lock or user does not match.\");\n}"
  },
  {
    "intent": "When John Smith unlocks the Front Door lock at the San Diego beach house, then enable the \"Good Morning\" action on Brilliant Nexus.",
    "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" &&\n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" &&\n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.execrule.setRuleStatus(\"Enable\");\n  BrilliantNexus.execrule.skip(\"Enabling Good Morning action for John Smith\");\n} else {\n  BrilliantNexus.execrule.skip(\"Not enabling action, wrong user or lock\");\n}"
  },
  {
    "intent": "When John Smith unlocks the Front Door at the San Diego beach house, then enable the Good Morning action on Brilliant Nexus.",
    "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" &&\n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" &&\n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.execrule.setRuleStatus(\"enable\");\n  BrilliantNexus.execrule.skip(\"Enabling Good Morning action for John Smith\");\n} else {\n  BrilliantNexus.execrule.setRuleStatus(\"disable\");\n}"
  },
  {
    "intent": "When John Smith unlocks the Front Door lock at the San Diego Beach House, enable the \"Good Morning\" action on Brilliant Nexus if the unlock time is between 07:00 and 09:00.",
    "filter_code": "var hour = Augusthome.lockUnlocked.UnlockedAt.hour();\nvar user = Augusthome.lockUnlocked.User;\nvar lockName = Augusthome.lockUnlocked.LockName;\nvar houseName = Augusthome.lockUnlocked.HouseName;\n\nif (user === \"John Smith\" && lockName === \"Front Door\" && houseName === \"San Diego Beach House\" && hour >= 7 && hour < 9) {\n  BrilliantNexus.execrule.setRuleStatus(\"enable\");\n  BrilliantNexus.execrule(\"Good Morning\");\n} else {\n  BrilliantNexus.execrule.skip(\"Conditions not met to enable Good Morning action.\");\n}"
  },
  {
    "intent": "Send a notification to the IFTTT app when the temperature falls below 10°C, as measured by the device named \"Home - Living Room\", and include a message stating \"Temperature alert: it's getting cold\".",
    "filter_code": "if (Airthings.tempBelow.Temperature < 10 && Airthings.tempBelow.MeasurementUnit === \"C°\" && Airthings.tempBelow.Device === \"Home - Living Room\") {\n  IfNotifications.sendNotification.setMessage(\"Temperature alert: it's getting cold\");\n} else {\n  IfNotifications.sendNotification.skip(\"Temperature is not below 10°C or device is not Home - Living Room.\");\n}"
  },
  {
    "intent": "Get a notification in your IFTTT app when the humidity level in your Home - Living room device exceeds 65%, so you can take action to adjust it back to a comfortable range.",
    "filter_code": "if (Airthings.humidityAbove.Humidity <= 65 || Airthings.humidityAbove.Device !== \"Home - Living room\") {\n  IfNotifications.sendNotification.skip(\"Humidity is within comfort levels or device is not Home - Living room\");\n}"
  },
  {
    "intent": "When the \"position [Venetian]\" property element of the device with functional channel ID \"KNX_1.1.2_RGBLight_1\" in my Gewiss Smart Home IoT system is updated to \"100%\" and the threshold logic is set to \"equals\" with a threshold value of \"ON\", send a message to my Telegram chat \"@home_notifications\" with the text \"The Venetian blind is now fully open\" and include a web page preview.",
    "filter_code": "if (GewissHome.propertyElementUpdated.FunctionalChannelId === \"KNX_1.1.2_RGBLight_1\" &&\n    GewissHome.propertyElementUpdated.PropertyElement === \"position [Venetian]\" &&\n    GewissHome.propertyElementUpdated.Value === \"100%\" &&\n    threshold_logic === \"equals\" &&\n    threshold === \"ON\") {\n  Telegram.sendMessage.setText(\"The Venetian blind is now fully open\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new video is posted by the Twitch channel \"Ninja\" and the video title contains the word \"Fortnite\", send a notification with the message \"New Fortnite video from Ninja: https://twitch.com/Ninja\".",
    "filter_code": "if (Twitch.newVideoByChannelYouFollow.VideoChannel === \"Ninja\" && Twitch.newVideoByChannelYouFollow.VideoTitle.includes(\"Fortnite\")) {\n  IfNotifications.sendNotification.setMessage(\"New Fortnite video from Ninja: https://twitch.com/Ninja\");\n} else {\n  IfNotifications.sendNotification.skip(\"Video does not match the criteria.\");\n}"
  },
  {
    "intent": "Send a notification to the Telegram chat \"#home_automation\" with the message \"The living room temperature is higher than 25°C\" when the Gewiss Smart Home IoT device reports that the living room temperature exceeds 25°C.",
    "filter_code": "if (GewissHome.propertyElementUpdated.PropertyElement === \"living room temperature\" && GewissHome.propertyElementUpdated.Value > 25) {\n  Telegram.sendMessage.setText(\"The living room temperature is higher than 25°C\");\n  Telegram.sendMessage.setChatId(\"#home_automation\");\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When the Kronaby pusher is pressed with a double press at latitude 55.611947 and longitude 12.978337, make a VoIP phone call to my device with the voice message \"Emergency alert at 07:00\".",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  var hour = new Date(Kronaby.pusherPressed.PressedAt).getHours();\n  if (hour === 7) {\n    VoipCalls.callMyDevice.setMessage(\"Emergency alert at 07:00\");\n  } else {\n    VoipCalls.callMyDevice.skip(\"Not the correct time for the emergency alert.\");\n  }\n} else {\n  VoipCalls.callMyDevice.skip(\"Wrong press type or location.\");\n}"
  },
  {
    "intent": "Save $1 toward my \"Music Lovers\" goal in Qapital every time I add a new track to my \"Favorite Songs\" playlist on Spotify.",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Favorite Songs\") {\n  Qapital.saveTowardGoal.setGoal(\"Music Lovers\");\n  Qapital.saveTowardGoal.setAmount(1);\n} else {\n  Qapital.saveTowardGoal.skip(\"Wrong playlist\");\n}"
  },
  {
    "intent": "Send a notification with the message \"Travel warning issued for Spain\" when the Department of State issues a travel warning for Spain.",
    "filter_code": "if (Dos.travelWarnings.EntryTitle.includes(\"Spain\")) {\n  IfNotifications.sendNotification.setMessage(\"Travel warning issued for Spain\");\n} else {\n  IfNotifications.sendNotification.skip(\"No travel warning for Spain.\");\n}"
  },
  {
    "intent": "When the DO button is pressed at a location like 37.82666360000001, -122.42301220000003, and the current time is between 07:00 and 19:00, change the color of the first two lights to red and set their brightness to 75%, then change the color of the next two lights to blue and set their brightness to 50%.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (latitude === \"37.82666360000001\" && longitude === \"-122.42301220000003\" && hour >= 7 && hour <= 19) {\n  Magichue.changeColor.setWhichLights(\"Light 1\");\n  Magichue.changeColor.setColor(\"Red\");\n  Magichue.changeColor.setBrightness(75);\n  Magichue.changeColor.skip();\n\n  Magichue.changeColor.setWhichLights(\"Light 2\");\n  Magichue.changeColor.setColor(\"Red\");\n  Magichue.changeColor.setBrightness(75);\n  Magichue.changeColor.skip();\n\n  Magichue.changeColor.setWhichLights(\"Light 3\");\n  Magichue.changeColor.setColor(\"Blue\");\n  Magichue.changeColor.setBrightness(50);\n  Magichue.changeColor.skip();\n\n  Magichue.changeColor.setWhichLights(\"Light 4\");\n  Magichue.changeColor.setColor(\"Blue\");\n  Magichue.changeColor.setBrightness(50);\n  Magichue.changeColor.skip();\n} else {\n  Magichue.changeColor.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, unlock my Sesame named \"Front Door\" and send a notification with the share URL https://ifttt.com/share/McFwJfDH9Ns and a map image of the location.",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar currentTime = Meta.currentUserTime.hour();\nvar shareURL = DoButton.doButtonNewCommandCommon.ShareURL;\nvar locationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && currentTime >= 7 && currentTime <= 19) {\n  Sesame.openSesame.setSesameName(\"Front Door\");\n  Notification.sendNotification.setNotificationMessage(\"Unlocked Front Door at \" + shareURL + \". Location: \" + locationMapImageURL);\n} else {\n  Sesame.openSesame.skip(\"Conditions not met to unlock Front Door.\");\n}"
  },
  {
    "intent": "When a new item is added to Pocket with the tag \"must-read\" and the title contains the word \"urgent\", create a new card on the Trello board named \"To-Read List\" in the list \"High Priority\" at position \"Top\", with the title set to the Pocket item's title, description set to the Pocket item's excerpt, and assign the card to members @johnDoe and @janeDoe, applying the label \"Urgent\".",
    "filter_code": "if (Pocket.newItemAddedPocket.Tags.includes(\"must-read\") && Pocket.newItemAddedPocket.Title.includes(\"urgent\")) {\n  Trello.createCard.setListName(\"High Priority\");\n  Trello.createCard.setPos(\"Top\");\n  Trello.createCard.setTitle(Pocket.newItemAddedPocket.Title);\n  Trello.createCard.setDescription(Pocket.newItemAddedPocket.Excerpt);\n  Trello.createCard.setMembers(\"@johnDoe, @janeDoe\");\n  Trello.createCard.setLabels(\"Urgent\");\n} else {\n  Trello.createCard.skip(\"Does not match the 'must-read' and 'urgent' criteria.\");\n}"
  },
  {
    "intent": "Arm abode into home mode every evening at 8:00 PM and into away mode at 7:30 AM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 20 && minute === 0) {\n  Abode.changeMode.setMode(\"home\");\n} else if (hour === 7 && minute === 30) {\n  Abode.changeMode.setMode(\"away\");\n} else {\n  Abode.changeMode.skip(\"Not the scheduled time for mode change.\");\n}"
  },
  {
    "intent": "Toggle the living room lamp using TP-Link Kasa when a triple knock gesture is detected by Knocki between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (Knocki.knocki.Gesture === \"Triple Knock\") {\n    Kasa.toggle.setDevice(\"living room lamp\");\n  } else {\n    Kasa.toggle.skip(\"Incorrect gesture. Expected 'Triple Knock'.\");\n  }\n} else {\n  Kasa.toggle.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "Send a notification to the IFTTT app when the CO2 level from the device \"Home Office\" rises above 1000 parts per million.",
    "filter_code": "if (Airthings.co2Above.Device !== \"Home Office\" || Airthings.co2Above.Co2Level <= 1000) {\n  IfNotifications.sendNotification.skip(\"CO2 level is not above 1000 parts per million in Home Office or device does not match.\");\n} else {\n  IfNotifications.sendNotification.setMessage(`CO2 level in ${Airthings.co2Above.Device} has risen above 1000 parts per million. Current CO2 level: ${Airthings.co2Above.Co2Level} parts per million.`);\n}"
  },
  {
    "intent": "Send a notification to my device when the Federal Communications Commission posts a new order containing the keyword \"5G\" and the title includes \"Wireless\", with the message including the entry's title, link, and preview content.",
    "filter_code": "if (Fcc.order.PreviewContent.indexOf(\"5G\") === -1 || Fcc.order.Subject.indexOf(\"Wireless\") === -1) {\n  IfNotifications.sendNotification.skip(\"Does not contain '5G' in the content or 'Wireless' in the title.\");\n} else {\n  var message = \"New FCC Order: \" + Fcc.order.Subject + \". Read more at \" + Fcc.order.Link + \". Preview: \" + Fcc.order.PreviewContent;\n  IfNotifications.sendNotification.setMessage(message);\n}"
  },
  {
    "intent": "Turn off the living room lamp when a triple knock gesture is detected on the Knocki device KNC1-W-00000088 between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n    Kasa.turnOff.setDevice(\"Living Room Lamp\");\n  } else {\n    Kasa.turnOff.skip(\"Incorrect device or gesture.\");\n  }\n} else {\n  Kasa.turnOff.skip(\"Outside of allowed hours (07:00 to 22:00).\");\n}"
  },
  {
    "intent": "When the button widget on my home screen is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, open door number 1.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour <= 19) {\n  Garagewifi.openDoor.setDoorNumber(1);\n} else {\n  Garagewifi.openDoor.skip(\"Outside of specified location or hours.\");\n}"
  },
  {
    "intent": "Save £1 to your Dozens savings account every time a new track is added to your \"Mid-2000s Jamz\" Spotify playlist.",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\") {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"Track not added to 'Mid-2000s Jamz' playlist.\");\n}"
  },
  {
    "intent": "When a new follower joins your Twitch channel, set all Philips Hue lights to a bright, celebratory orange color (#FFA07A) in your gaming room.",
    "filter_code": "Hue.setColorAllHue.setLights(\"Gaming Room\");\nHue.setColorAllHue.setColor(\"#FFA07A\");"
  },
  {
    "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00, set the Philips Hue scene to \"Relax\" in the living room.",
    "filter_code": "var hour = new Date(WithingsSleep.bedin.DateandTime).getHours();\nif (hour >= 22 || hour < 6) {\n  if (WithingsSleep.bedin.DeviceUser === \"Tom\") {\n    Hue.setScene.setScene(\"Relax\");\n  } else {\n    Hue.setScene.skip(\"Not Tom's device\");\n  }\n} else {\n  Hue.setScene.skip(\"Outside of bedtime hours (10 PM to 6 AM)\");\n}"
  },
  {
    "intent": "When Tom's Nokia Sleep detects that he gets out of bed between 07:00 and 09:00, set the Philips Hue scene to \"Morning\" in the living room.",
    "filter_code": "var hour = WithingsSleep.bedout.DateandTime.hour();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nif (deviceUser === \"Tom's Nokia Sleep\" && hour >= 7 && hour < 9) {\n  Hue.setScene.setScene(\"Morning\");\n} else {\n  Hue.setScene.skip(\"Not the right time or user.\");\n}"
  },
  {
    "intent": "When a transfer is finished on put.io with the type \"Video\" and the name of the transfer is \"Big Buck Bunny\", send a notification with the message \"Download Big Buck Bunny from https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX or view it at https://app.put.io/files/123456\".",
    "filter_code": "if (Putio.transferFinished.Type === \"Video\" && Putio.transferFinished.Name === \"Big Buck Bunny\") {\n  var downloadUrl = Putio.transferFinished.DownloadUrl;\n  var viewUrl = Putio.transferFinished.ViewUrl;\n  IfNotifications.sendNotification.setMessage(`Download Big Buck Bunny from ${downloadUrl} or view it at ${viewUrl}`);\n} else {\n  IfNotifications.sendNotification.skip(\"Transfer type is not 'Video' or transfer name is not 'Big Buck Bunny'\");\n}"
  },
  {
    "intent": "Activate the \"Good Morning\" scene from my TP-Link Kasa account when a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Kasa.activateScene.setScene(\"Good Morning\");\n} else {\n  Kasa.activateScene.skip(\"Conditions not met for activating the Good Morning scene.\");\n}"
  },
  {
    "intent": "When a new file transfer is finished on put.io with the type \"Video\" and the name contains \"Movie\", send a message to the Telegram chat \"#movies\" with the text \"New movie downloaded: <b>Big Buck Bunny</b>. Download from: <a href='https://api.put.io/v2/files/123456/download?oauth_token=XXXXXX'>here</a>\" and include a web page preview.",
    "filter_code": "if (Putio.transferFinished.Type === \"Video\" && Putio.transferFinished.Name.includes(\"Movie\")) {\n  Telegram.sendMessage.setText(`New movie downloaded: <b>${Putio.transferFinished.Name}</b>. Download from: <a href='${Putio.transferFinished.DownloadUrl}'>here</a>`);\n  Telegram.sendMessage.setChatId(\"#movies\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n}"
  },
  {
    "intent": "When an email with the subject \"Hello there\" and the body \"Been having a good day so far...\" is sent from somebody@gmail.com to trigger@applet.ifttt.com with the tag #hashtag, generate a call to your registered phone number at woop.la/ifttt and play the text \"You have received an email from somebody@gmail.com with the subject Hello there\" in English.",
    "filter_code": "if (Email.sendIftttAnEmailTagged.Subject === \"Hello there\" && Email.sendIftttAnEmailTagged.Body === \"Been having a good day so far...\" && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\" && Email.sendIftttAnEmailTagged.tag === \"#hashtag\") {\n  Woopla.ttsCall.setTts(\"You have received an email from somebody@gmail.com with the subject Hello there\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Save £1 to my Dozens savings account every time a new book is added to the New York Times Best Sellers list in the Fiction category, with a rank of 5 or higher, and has been on the list for at least 10 weeks.",
    "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Fiction\" &&\n    parseInt(Nytimes.newBookOnABestSellerList.Rank) <= 5 &&\n    parseInt(Nytimes.newBookOnABestSellerList.WeeksOnList) >= 10) {\n  Dozens.save.setAmount(\"1.00\");\n} else {\n  Dozens.save.skip(\"Conditions not met for saving.\");\n}"
  },
  {
    "intent": "Lock the Living Room Lamp LightwaveRF Socket at 7:30 PM every day to prevent manual operation.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:30 PM\";\nif (currentTime.getHours() === 19 && currentTime.getMinutes() === 30) {\n  LightwaverfPower.lockDevice.setWhichDevice(\"Living Room Lamp\");\n} else {\n  LightwaverfPower.lockDevice.skip(\"Not the scheduled lock time.\");\n}"
  },
  {
    "intent": "Every Monday, Wednesday, and Friday at 8:00 PM, automatically add tracks from the search query \"Happy Weekend\" by the artist \"The Weeknd\" to a Spotify playlist named \"Weekly Favorites\".",
    "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar time = DateAndTime.everyWeekdayAt.CheckTime;\n\nif (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\") {\n  var hour = time.split(\" at \")[1].split(\":\")[0];\n  var minute = time.split(\" at \")[1].split(\":\")[1].replace(/PM|AM/, \"\");\n  if ((hour === \"8\" && minute === \"00\") || (hour === \"20\" && minute === \"00\")) {\n    Spotify.addATrackToAPlaylist.setPlaylist(\"Weekly Favorites\");\n    Spotify.addATrackToAPlaylist.setSearchQuery(\"Happy Weekend\");\n    Spotify.addATrackToAPlaylist.setArtistName(\"The Weeknd\");\n  } else {\n    Spotify.addATrackToAPlaylist.skip(\"Not the correct time.\");\n  }\n} else {\n  Spotify.addATrackToAPlaylist.skip(\"Not a Monday, Wednesday, or Friday.\");\n}"
  },
  {
    "intent": "When my favorite streamer, John's Channel, goes live on Twitch playing StarCraft II: Heart of the Swarm, blink my Living Room Lamp purple 5 times, even if it's turned off, to alert me that the stream has started.",
    "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"John's Channel\" && Twitch.streamGoingLiveForChannelYouFollow.Game === \"StarCraft II: Heart of the Swarm\") {\n  Lifx.blink.setNumberOFBlinks(\"5\");\n  Lifx.blink.setAdvancedOptions(\"color: purple\");\n  Lifx.blink.setBlinkIfOff(\"yes\");\n} else {\n  Lifx.blink.skip(\"Stream does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Send a weekly digest email every Sunday at 08:00 with the title \"Weekly Transfer Summary\" to list all finished transfers from the past week, including their names, download URLs, and view URLs, compiled into an HTML message with a link to the put.io dashboard.",
    "filter_code": "var dayOfWeek = Meta.currentUserTime.day();\nvar hour = Meta.currentUserTime.hour();\n\nif (dayOfWeek !== 0 || hour !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Sunday at 08:00\");\n}\n\nvar transfers = [];\ntransfers.push({\n  name: Putio.transferFinished.Name,\n  downloadUrl: Putio.transferFinished.DownloadUrl,\n  viewUrl: Putio.transferFinished.ViewUrl\n});\n\nvar message = \"<ul>\";\nfor (var i = 0; i < transfers.length; i++) {\n  message += \"<li><a href='\" + transfers[i].downloadUrl + \"'>\" + transfers[i].name + \"</a> | <a href='\" + transfers[i].viewUrl + \"'>View</a></li>\";\n}\nmessage += \"</ul>\";\nmessage += \"<p><a href='https://app.put.io'>put.io dashboard</a></p>\";\n\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setTitle(\"Weekly Transfer Summary\");\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(\"https://app.put.io\");"
  },
  {
    "intent": "Send a weekly email digest every Sunday at 10:00 AM with the title \"Sunday Koalas\" and a message containing an inline GIF of koalas, using the search query \"koalas\" on Giphy, to bring a smile to the recipient's face.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Sunday\") {\n  var gifURL = Giphy.search.ImageURL;\n  var gifHTML = \"<img src='\" + gifURL + \"' border='0'/>\";\n  var message = \"Good morning! Here's a smile to start your Sunday: \" + gifHTML;\n  EmailDigest.sendWeeklyEmail.setTitle(\"Sunday Koalas\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Sunday.\");\n}"
  },
  {
    "intent": "If the stock ticker symbol GOOG rises by 5% within a day, as checked at 16:00 EST, sell 10 shares of Google Inc. (GOOG) through Alpaca.",
    "filter_code": "if (Finance.percentageRiseStocks.StockTicker === \"GOOG\" && Finance.percentageRiseStocks.PercentageChange >= 5 && Meta.currentUserTime.hour() === 16) {\n  Alpaca.placeMarketOrder.setSymbol(Finance.percentageRiseStocks.StockTicker);\n  Alpaca.placeMarketOrder.setSide(\"sell\");\n  Alpaca.placeMarketOrder.setQty(\"10\");\n} else {\n  Alpaca.placeMarketOrder.skip(\"Conditions not met to sell GOOG.\");\n}"
  },
  {
    "intent": "Turn off the living room air conditioning at 8:00 PM every day.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (checkTime === targetTime) {\n  Airtouch.acPower.setPowerOnOff(\"off\");\n} else {\n  Airtouch.acPower.skip(\"Not the scheduled time to turn off the air conditioning.\");\n}"
  },
  {
    "intent": "When the Nexia automation named \"My First Automation\" is triggered in the house named \"Home\", activate the Philips Hue scene named \"Relax\" to turn on the living room lights.",
    "filter_code": "if (Nexia.nexiaAutomation.NexiaAutomationName === \"My First Automation\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n  Hue.setScene({ scene: \"Relax\" });\n} else {\n  Hue.setScene.skip(\"Automation name or house does not match.\");\n}"
  },
  {
    "intent": "When a new file transfer finishes on put.io with the type \"Movie\" and the name contains \"Big Buck Bunny\", send a priority 1 message via Pushover to the device \"My Phone\" with the title \"Transfer Finished\", the message \"Your movie Big Buck Bunny has finished transferring\", and play the \"pushover\" sound.",
    "filter_code": "if (Putio.transferFinished.Type === \"Movie\" && Putio.transferFinished.Name.includes(\"Big Buck Bunny\")) {\n  Pushover.send.setTitle(\"Transfer Finished\");\n  Pushover.send.setMessage(\"Your movie \" + Putio.transferFinished.Name + \" has finished transferring\");\n  Pushover.send.setPriority(\"1\");\n  Pushover.send.setDevice(\"My Phone\");\n  Pushover.send.setSound(\"pushover\");\n} else {\n  Pushover.send.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Basement water sensor detects a water leak, flicker all Philips Hue lights in the living room.",
    "filter_code": "if (Mydlink.waterDetection.DeviceName !== \"Basement water sensor\") {\n  Hue.blinkAllHue.skip(\"Not the basement water sensor.\");\n} else if (PhilipsHue.lights !== \"living room\") {\n  Hue.blinkAllHue.skip(\"Lights are not in the living room.\");\n} else {\n  Hue.blinkAllHue();\n}"
  },
  {
    "intent": "Turn off the SwitchBot device named \"Office Bot\" every day at 10:00 PM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"10:00 PM\";\nif (checkTime !== targetTime) {\n  Switchbot.turnOffBot.skip(\"Not the scheduled turn off time.\");\n}"
  },
  {
    "intent": "When the Flic button named \"MyOfficeButton\" is double-clicked, change the view on your Atmoph Window to a random scene, such as a serene beach or a bustling city street, between 07:00 and 19:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"MyOfficeButton\" && hour >= 7 && hour < 19) {\n  var scenes = [\"serene beach\", \"bustling city street\"];\n  var randomScene = scenes[Math.floor(Math.random() * scenes.length)];\n  Atmoph.changeView.setRandomScene(randomScene);\n} else {\n  Atmoph.changeView.skip(\"Outside of active hours or wrong button click.\");\n}"
  },
  {
    "intent": "When the \"Kitchen Lights\" button on your iHome device is pressed with a long press, start the \"Good Night\" scene on your Lutron system.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"Kitchen Lights\" && IhomeEnhance.enhanceButton.Press === \"Long Press\") {\n  LutronCasetaWireless.setScene(\"Good Night\");\n} else {\n  LutronCasetaWireless.setScene.skip(\"Incorrect button or press type.\");\n}"
  },
  {
    "intent": "Activate the \"Good Morning\" scene on TP-Link Kasa when the Apilio event named \"wake_up\" is triggered with a value1 of \"Summer\" and the event is created between 07:00 and 08:00.",
    "filter_code": "var hour = Apilio.iftttActionReports.CreatedAt.getHours();\nvar minutes = Apilio.iftttActionReports.CreatedAt.getMinutes();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar value1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"wake_up\" && value1 === \"Summer\" && hour >= 7 && hour < 8) {\n  // Intentionally left blank to activate the scene\n} else {\n  Kasa.activateScene.skip(\"Conditions not met for 'Good Morning' scene.\");\n}"
  },
  {
    "intent": "Post a message to the #commute-alerts channel in Slack with the title \"DART Rider Alert\" and the content of the latest DART rider alert, including the entry title and entry URL, but only between 7:00 AM and 10:00 AM on weekdays when the keyword \"TRE Update\" is found in the alert.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar day = Meta.currentUserTime.day();\n\n// Check if it's a weekday and within commuting hours\nif (day == 0 || day == 6) { // 0 = Sunday, 6 = Saturday\n  Slack.postToChannel.skip(\"Not a weekday\");\n} else if (hour < 7 || hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\");\n}\n\n// Check for keyword in alert content\nif (!Dart.newDartRiderAlert.EntryContent.includes(\"TRE Update\")) {\n  Slack.postToChannel.skip(\"Keyword 'TRE Update' not found in alert\");\n}\n\n// Post message to Slack with title and content\nSlack.postToChannel.setMessage(Dart.newDartRiderAlert.EntryTitle + \" - \" + Dart.newDartRiderAlert.EntryUrl);\nSlack.postToChannel.setTitle(\"DART Rider Alert\");\nSlack.postToChannel.setChannel(\"#commute-alerts\");"
  },
  {
    "intent": "When the Bedroom sensor device detects someone is present, update the boolean variable \"Occupancy_Status\" to true in Apilio.",
    "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Someone is present\");\n  Apilio.updateBooleanVariableToTrue(\"Occupancy_Status\");\n}"
  },
  {
    "intent": "Save new Raindrop.io bookmarks with the tag \"article\" and the domain \"nytimes.com\" to Instapaper in the folder \"News\" with the title set to the bookmark's title and the description set to the bookmark's excerpt.",
    "filter_code": "if (Raindrop.raindropsAll.Tags.includes(\"article\") && Raindrop.raindropsAll.Domain === \"nytimes.com\") {\n  Instapaper.saveItem.setUrl(Raindrop.raindropsAll.Url);\n  Instapaper.saveItem.setTitle(Raindrop.raindropsAll.Title);\n  Instapaper.saveItem.setDescription(Raindrop.raindropsAll.Description);\n  // Note: Since the folder is not directly accessible via filter code,\n  // it's assumed that \"News\" is a predefined folder in Instapaper and\n  // its ID or slug should be used instead of the name. For demonstration,\n  // let's assume 'news-folder-id' is the ID of the \"News\" folder.\n  // However, due to the limitations provided, we cannot directly set the folder here.\n} else {\n  Instapaper.saveItem.skip(\"Bookmark does not match the criteria.\");\n}"
  },
  {
    "intent": "When a new item is published in the \"IFTTT Blog\" RSS feed, save it to Raindrop.io with the title from the EntryTitle ingredient, the URL from the EntryUrl ingredient, and add tags \"news\" and \"rss\".",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"IFTTT Blog\") {\n  Raindrop.raindrop.setLink(Feed.newFeedItem.EntryUrl);\n  Raindrop.raindrop.setTitle(Feed.newFeedItem.EntryTitle);\n  Raindrop.raindrop.setTags(\"news, rss\");\n}"
  },
  {
    "intent": "When the abode alarm is triggered for any reason, such as a fire alarm or security breach, and it's between 07:00 and 22:00, flash all of your Philips Hue light bulbs in the living room.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "When a Fire alarm event occurs on your Blue by ADT system at any time, send a notification with the message \"Fire Alarm Triggered\" to your Android Wear watch.",
    "filter_code": "if (Bluebyadt.alarm.EventType === \"Fire\") {\n  AndroidWear.sendNotificationToAndroidWear.setMessage(\"Fire Alarm Triggered\");\n  AndroidWear.sendNotificationToAndroidWear.skip(null);\n} else {\n  AndroidWear.sendNotificationToAndroidWear.skip(\"Not a fire alarm event\");\n}"
  },
  {
    "intent": "Turn off the Smart Home Solution device located at \"Living Room Lamp\" when a suspected motion stop event is detected by Aerial Technologies between 07:00 and 22:00 with the serial number \"ABCDEF123\" and the event type is \"motionDetection.humanMotion.stopped\".",
    "filter_code": "if (AerialTechnologies.motionDetectionMotionStopped.Type === \"motionDetection.humanMotion.stopped\"\n    && AerialTechnologies.motionDetectionMotionStopped.Serial === \"ABCDEF123\") {\n  var hour = new Date(AerialTechnologies.motionDetectionMotionStopped.CreatedAt).getHours();\n  if (hour >= 7 && hour < 22) {\n    SmartHomeSolution.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n  } else {\n    SmartHomeSolution.turnDeviceOff.skip(\"Outside of scheduled hours (07:00 to 22:00).\");\n  }\n}"
  },
  {
    "intent": "When there's a new post on hrc.org mentioning \"California\" as the keyword, send me an email with the subject \"New LGBT Rights Update in California\" and the body containing the entry title, entry content, and entry URL from the feed.",
    "filter_code": "if (Feed.newFeedItemMatches.EntryContent.includes(\"California\") || Feed.newFeedItemMatches.EntryTitle.includes(\"California\")) {\n  Email.sendMeEmail.setSubject(\"New LGBT Rights Update in California\");\n  var body = \"Entry Title: \" + Feed.newFeedItemMatches.EntryTitle + \"\\n\\n\" + Feed.newFeedItemMatches.EntryContent + \"\\n\\nEntry URL: \" + Feed.newFeedItemMatches.EntryUrl;\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"No mention of California in the post.\");\n}"
  },
  {
    "intent": "If the Bedroom sensor SmartThings device detects that you are not present, then turn off the SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Spotcam.turnOffSpotcam.skip(\"Automatically turned off due to absence detected by Bedroom sensor\");\n}"
  },
  {
    "intent": "If the SpotCam Ring named \"Front Door\" detects motion at any time, then turn off all Philips Hue lights in the living room.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOffAllHue.skip(\"Motion detected by Front Door SpotCam Ring\");\n}"
  },
  {
    "intent": "When the SpotCam with serial number \"SWA00058rhwx\" detects sound, make all Philips Hue lights blink automatically.",
    "filter_code": "if (Spotcam.audioEvent.CameraName === \"SWA00058rhwx\") {\n  Hue.blinkAllHue.skip();\n}"
  },
  {
    "intent": "If the Bedroom sensor device detects that you are not present, then turn off the SpotCam alert automatically for camera serial number S123456.",
    "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Spotcam.turnOffAlert.skip(\"Turning off alert because user is not present.\");\n}"
  },
  {
    "intent": "If the SpotCam with serial number SWA00058rhwx detects sound, then dim all Philips Hue lights in the living room to a brightness of 20.",
    "filter_code": "if (Spotcam.audioEvent.CameraName === \"SWA00058rhwx\") {\n  Hue.setBrightnessAllHue.setBrightness(\"20\");\n}"
  },
  {
    "intent": "When the SpotCam Ring named \"Front Door\" detects motion at any time, dim all Philips Hue lights in the living room to a brightness of 20.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.setBrightnessAllHue.setBrightness(\"20\");\n}"
  },
  {
    "intent": "If the SpotCam Ring named \"Front Door\" detects motion at any time, then blink all Philips Hue lights in the living room.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Motion detected by camera other than Front Door\");\n}"
  },
  {
    "intent": "Turn on all Philips Hue lights in the living room when the Uplink Remote alarm is triggered for John's Home between 07:00 and 22:00 if the event description contains the word \"URGENT\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = Uplinkremote.armtrigger.DeviceName;\nvar eventDescription = Uplinkremote.armtrigger.EventDescription;\n\nif (deviceName === \"John's Home\" && eventDescription.includes(\"URGENT\") && hour >= 7 && hour < 22) {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Boundary alarm is triggered at any time, send a text message to +1234567890 using ClickSend with the message \"Alarm Triggered: Boundary breach detected\" from the sender ID \"SecuritySystem\".",
    "filter_code": "Clicksend.sendSms.setFrom(\"SecuritySystem\");\nClicksend.sendSms.setTo(\"+1234567890\");\nClicksend.sendSms.setMessage(\"Alarm Triggered: Boundary breach detected\");"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn on the SpotCam Alert with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnAlert.setSn(\"S123456\");\n} else {\n  Spotcam.turnOnAlert.skip(\"Device is not the Bedroom contact.\");\n}"
  },
  {
    "intent": "If the Bedroom sensor SmartThings device is no longer detected, then turn on the SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Spotcam.turnOnSpotcam.setSn(\"S123456\");\n} else {\n  Spotcam.turnOffSpotcam.skip(\"Device is not the Bedroom sensor\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn off the SpotCam Alert with serial number SNC123456 automatically.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOffAlert.skip(\"Bedroom contact SmartThings device is opened.\");\n}"
  },
  {
    "intent": "When the SmartThings sensor in the Bedroom detects a temperature rise above 78 degrees Fahrenheit, turn on the WiZ light in the Living Room to Cool white at a brightness of 75%.",
    "filter_code": "if (SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit > SmartthingsV2.temperatureRisesAboveSmartthings.Threshold &&\n    SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName === \"Bedroom sensor\" &&\n    SmartthingsV2.temperatureRisesAboveSmartthings.ThresholdUnits === \"F\" &&\n    SmartthingsV2.temperatureRisesAboveSmartthings.Threshold === \"78\") {\n  Wiz.turnOn.setMode(\"Cool white\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "If the sound is detected by SpotCam serial number SNC12345 at any time, then turn off all Philips Hue lights in the living room.",
    "filter_code": "if (Spotcam.audioEvent.CameraName === \"SNC12345\") {\n  Hue.turnOnAllHue.skip(\"Sound detected by SpotCam, turning off lights.\");\n}"
  },
  {
    "intent": "Call my phone using Woopla when motion is detected by the DoorCamera at any time, speaking the text \"Motion detected at the door\" in English.",
    "filter_code": "if (Camio.motionDetected.CameraName === \"DoorCamera\") {\n  Woopla.ttsCall.setTts(\"Motion detected at the door\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Motion not detected by DoorCamera.\");\n}"
  },
  {
    "intent": "Every day at 8:00 AM, BOCCO speaks in the living room with the message \"Good morning, it's time to wake up\" in Japanese.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 8 && minute === 0) {\n  Bocco.boccoSpeak.setRoom(\"living room\");\n  Bocco.boccoSpeak.setMessage(\"Good morning, it's time to wake up\");\n  Bocco.boccoSpeak.setLang(\"Japanese\");\n} else {\n  Bocco.boccoSpeak.skip(\"Not 8:00 AM\");\n}"
  },
  {
    "intent": "When the average price of electricity from ComEd goes below 10 cents per hour during the winter season, and this is the first time it has dropped below this threshold after previously being higher, change the color of all my Philips Hue light bulbs to a blue-green hue (#008000).",
    "filter_code": "if (ComEd.averagePriceChange.AveragePrice < 10 && ComEd.averagePriceChange.which_season === \"winter\" && ComEd.averagePriceChange.trigger_type === \"below\" && ComEd.averagePriceChange.how_often_to_trigger === \"first_time_below\") {\n  Hue.setColorAllHue.setColor(\"#008000\");\n}"
  },
  {
    "intent": "When the average price exceeds 15 cents during the summer season, between 07:00 and 19:00, and this is the first time it goes above the threshold, change the color of all my Philips Hue light bulbs to red (#FF0000).",
    "filter_code": "if (ComEd.averagePriceChange.AveragePrice > 15 && ComEd.averagePriceChange.Timestamp.includes(\"Summer\") &&\n    (ComEd.averagePriceChange.FromHour >= 7 || ComEd.averagePriceChange.ToHour <= 19) &&\n    ComEd.averagePriceChange.trigger_type === \"exceeds\" && ComEd.averagePriceChange.how_often_to_trigger === \"first_time\") {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a notification to the Telegram chat \"#energy_monitoring\" with the message \"High energy consumption detected: 5000 Watts\" when the total power consumption of the device \"Home Energy Meter\" exceeds 4500 Watts.",
    "filter_code": "if (ViewProd.energyGlobalActionPowerConsumptionTrifase.State > 4500) {\n  Telegram.sendMessage.setText(`High energy consumption detected: ${ViewProd.energyGlobalActionPowerConsumptionTrifase.State} Watts`);\n  Telegram.sendMessage.setIncludeWebPagePreview(false);\n}"
  },
  {
    "intent": "Send a notification to the Telegram chat \"#EnergyMonitor\" when the single phase total power consumption of device \"HomeEnergyMeter\" exceeds 5 kW or drops below 1 kW, including a message with the current power consumption value and a web page preview of the energy monitoring dashboard.",
    "filter_code": "if (ViewProd.energyGlobalActionPowerConsumptionTrifase.Device === \"HomeEnergyMeter\" &&\n    (ViewProd.energyGlobalActionPowerConsumptionTrifase.State > 5 || ViewProd.energyGlobalActionPowerConsumptionTrifase.State < 1)) {\n  Telegram.sendMessage.setText(\"Current power consumption: \" + ViewProd.energyGlobalActionPowerConsumptionTrifase.State + \" kW. Check the energy monitoring dashboard: https://example.com/energy-monitoring\");\n  Telegram.sendMessage.setIncludeWebPagePreview(true);\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Send a notification to the Telegram chat \"#energy_monitoring\" when the single phase exchanged power from device \"Living Room Meter\" exceeds 500 Watts or drops below -200 Watts, including a web page preview in the message.",
    "filter_code": "if (ViewProd.energyGlobalActivePowerExchange.Device === \"Living Room Meter\" &&\n    (ViewProd.energyGlobalActivePowerExchange.State > 500 || ViewProd.energyGlobalActivePowerExchange.State < -200)) {\n  Telegram.sendMessage.setText(\"Single phase exchanged power from device \\\"Living Room Meter\\\" has exceeded 500 Watts or dropped below -200 Watts. Current state: \" + ViewProd.energyGlobalActivePowerExchange.State);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip(false);\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Send a notification to the Telegram chat \"#energy_monitoring\" when the single phase produced power of device \"Home_Power_Monitor\" exceeds 5000 watts or drops below 1000 watts, including a web page preview in the message.",
    "filter_code": "if (ViewProd.energyGlobalActionPowerProduct.Device === \"Home_Power_Monitor\" &&\n    (ViewProd.energyGlobalActionPowerProduct.State > 5000 || ViewProd.energyGlobalActionPowerProduct.State < 1000)) {\n  Telegram.sendMessage.setText(\"Single phase produced power of Home_Power_Monitor is \" + ViewProd.energyGlobalActionPowerProduct.State + \" watts.\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When the litter robot named \"My Litter Robot\" sends a \"Litter Box Full\" event, turn all the lights in the living room to purple (#7A288A) using Philips Hue.",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.event_type === \"Litter Box Full\") {\n  if (Hue.getLightsInRoom(\"living room\").length > 0) {\n    Hue.setColorAllHue.setColor(\"#7A288A\");\n  } else {\n    Hue.setColorAllHue.skip(\"No lights found in the living room.\");\n  }\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, dim all Philips Hue lights in the living room to a brightness of 50.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Hue.setBrightnessAllHue.setBrightness(\"50\");\n  Hue.setBrightnessAllHue.skip(\"Dimming living room lights to 50%\");\n}"
  },
  {
    "intent": "When the \"iHome Button\" on your iHome device is pressed, change the color of all Philips Hue lights in the living room to \"#FF69B4\".",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iHome Button\") {\n  Hue.setColorAllHue.setColor(\"#FF69B4\");\n} else {\n  Hue.setColorAllHue.skip(\"Button name does not match 'iHome Button'.\");\n}"
  },
  {
    "intent": "Blink all the living room Philips Hue lights when your child, Emily, gets £5 or more Boosted from the Savings Pot on RoosterMoney after 3 PM.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar amount = parseFloat(Roostermoney.removed.Amount.replace(\"£\", \"\"));\nvar child = Roostermoney.removed.Child;\nvar pot = Roostermoney.removed.Pot;\n\nif (child === \"Emily\" && pot === \"Savings Pot\" && amount >= 5 && hour >= 15) {\n  Hue.blinkAllHue.setLights([\"Living room\"]);\n} else {\n  Hue.blinkAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered at 20:00 and has a custom value of \"Relax\" for Apilio value1, set the Philips Hue scene to \"Evening\" on all connected lights.",
    "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && Apilio.iftttActionReports.CreatedAt.getHours() === 20\n    && Apilio.iftttActionReports.ApilioValue1 === \"Relax\") {\n  Hue.setScene({ scene: \"Evening\" });\n} else {\n  Hue.setScene.skip(\"Conditions not met for setting the Evening scene.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the value received from Apilio is \"Green\", change the color of the living room lights to #008000.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6) && apilioValue1 === \"Green\") {\n  Hue.setColorAllHue.setColor(\"#008000\");\n} else {\n  Hue.setColorAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Every day at 8:00 PM, turn off the Optoma projector with Device ID \"LivingRoomProjector\" and also switch off the Philip Hue lights automatically.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (currentTime.indexOf(targetTime) !== -1) {\n  Optoma.ledOnOff.setTurnOnOff(\"off\");\n  Optoma.ledOnOff.setDeviceId(\"LivingRoomProjector\");\n  PhilipsHue.switchLightsOff();\n} else {\n  Optoma.ledOnOff.skip(\"Not the target time\");\n}"
  },
  {
    "intent": "Turn on all Philips Hue lights in the living room automatically when someone is detected by the SpotCam named \"Airport\" between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Spotcam.humanDetected.CameraName === \"Airport\") {\n    Hue.turnOnAllHue.setLights(\"Living room\");\n  } else {\n    Hue.turnOnAllHue.skip(\"Not Airport camera\");\n  }\n} else {\n  Hue.turnOnAllHue.skip(\"Outside of active hours (7 AM to 7 PM)\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 from Apilio is \"Green\", dim the brightness of the living room lights to 20.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" &&\n    (hour >= 20 || hour < 6) &&\n    apilioValue1 === \"Green\") {\n  Hue.setBrightnessAllHue.setBrightness(\"20\");\n} else {\n  Hue.setBrightnessAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Every day at 7:30 PM, turn on my Optoma projector with Device ID \"LivingRoomProjector\" and also activate the Philip Hue lights.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:30 PM\";\n\nif (currentTime === targetTime) {\n  Optoma.projectorOnOff.setTurnOnOff(\"on\");\n  Optoma.projectorOnOff.setDeviceId(\"LivingRoomProjector\");\n  // Assuming Philip Hue action is similar, but since it's not provided in the action details,\n  // we will comment it out for now. In a real scenario, you would need to add the actual method.\n  // PhilipHue.lightsOnOff.setTurnOnOff(\"on\");\n} else {\n  Optoma.projectorOnOff.skip(\"Not the target time\");\n}"
  },
  {
    "intent": "Turn on the living room Philips Hue light bulb to red (#FF0000) when Fort Collins Utilities signals the start of peak hours on weekdays during the summer season.",
    "filter_code": "if (FcuTod.timeOfDay.EventType === \"start\" && FcuTod.timeOfDay.DayType === \"Weekday\" && FcuTod.timeOfDay.Season === \"Summer\") {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Not peak hours or not weekday/summer.\");\n}"
  },
  {
    "intent": "If the battery of your SpotCam Ring, named \"Front Door Camera\", is low, then make all your Philips Hue lights blink automatically.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door Camera\" && Spotcam.spotcamRingEvent.EventType === \"low_battery\") {\n  Hue.blinkAllHue.setLights(\"all\");\n}"
  },
  {
    "intent": "If the battery cover of your SpotCam Ring, named \"Front Door Camera\", is removed at any time, then make all your Philips Hue lights blink automatically.",
    "filter_code": "if (Spotcam.coverEvent.CameraName === \"Front Door Camera\") {\n  if (Spotcam.coverEvent.EventTime !== null) {\n    Hue.blinkAllHue.skip();\n  } else {\n    Hue.blinkAllHue.skip(\"Event time is null.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Camera name does not match 'Front Door Camera'.\");\n}"
  },
  {
    "intent": "When the SpotCam Ring named \"Front Door\" detects motion at any time, turn on all Philips Hue lights in the living room.",
    "filter_code": "if (Spotcam.spotcamRingEvent.CameraName === \"Front Door\") {\n  Hue.turnOnAllHue.setLights(\"Living Room\");\n}"
  },
  {
    "intent": "Turn on all Philips Hue lights in the living room automatically when someone's Airport SpotCam detects a fence being crossed.",
    "filter_code": "if (Spotcam.virtualFenceCrossed.CameraName === \"Airport\") {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n}"
  },
  {
    "intent": "Blink the living room and kitchen Philips Hue lights briefly when an Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00 with a custom value of \"Green\" for value1.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" &&\n    Apilio.iftttActionReports.ApilioValue1 === \"Green\" &&\n    (hour >= 20 || hour < 6)) {\n  Hue.blinkAllHue.setLights([\"Living room\", \"Kitchen\"]);\n} else {\n  Hue.blinkAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the \"Goodnight\" routine is activated on Niko Home Control at 10:00 PM, turn off the \"Living Room\" activity on Logitec Harmony.",
    "filter_code": "if (Nikohomecontrol.routineActivated.Routine === \"Goodnight\" && Meta.currentUserTime.hour() === 22) {\n  Harmony.endActivity.setActivity(\"Living Room\");\n} else {\n  Harmony.endActivity.skip(\"Conditions not met to turn off Living Room activity.\");\n}"
  },
  {
    "intent": "When a new popular article appears in the Sports section of the New York Times, let Homey announce it as your personal news anchor, speaking the text \"A new article by Alexander P. Tibbets is now available, titled In a fish tank, 'Algae is the worst', with the blurb This article was written to keep you informed, and can be found at http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html\".",
    "filter_code": "if (Nytimes.anyNewPopularArticleToday.Section === \"Sports\") {\n  var text = `A new article by ${Nytimes.anyNewPopularArticleToday.Author} is now available, titled ${Nytimes.anyNewPopularArticleToday.Title}, with the blurb ${Nytimes.anyNewPopularArticleToday.Blurb}, and can be found at ${Nytimes.anyNewPopularArticleToday.ArticleUrl}`;\n  Homey.letHomeySpeak.setWhatText(text);\n} else {\n  Homey.letHomeySpeak.skip(\"Article is not in the Sports section.\");\n}"
  },
  {
    "intent": "When the \"My Stone\" Pebblebee Stone is pressed with a single press type, send a text message to phone number \"+1-123-456-7890\" saying \"I'm on my way home, see you soon!\".",
    "filter_code": "if (Pebblebee.stonePress.StoneName === \"My Stone\" && Pebblebee.stonePress.TriggerType === \"Pressed\") {\n  AndroidMessages.sendAMessage.setText(\"I'm on my way home, see you soon!\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1-123-456-7890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn on the SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.setSn(\"S123456\");\n} else {\n  Spotcam.turnOnSpotcam.skip(\"Not the Bedroom contact device.\");\n}"
  },
  {
    "intent": "Turn off the living room Hue light when Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00.",
    "filter_code": "if (WithingsSleep.bedin.DeviceUser === \"Tom\" &&\n    WithingsSleep.bedin.DateandTime.hour() >= 22 ||\n    WithingsSleep.bedin.DateandTime.hour() <= 6) {\n  Hue.turnOnAllHue.setLights(\"Living room\").skip(\"Turning off the living room light as Tom is in bed\");\n}"
  },
  {
    "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00, turn off the Living Room Yeelight.",
    "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nif (hour >= 22 || hour < 6) {\n  if (WithingsSleep.bedin.DeviceUser === \"Tom\") {\n    Yeelight.onOff.setDeviceId(\"Living Room\");\n    Yeelight.onOff.setOnOffOption(\"off\");\n  } else {\n    Yeelight.onOff.skip(\"Not Tom's device.\");\n  }\n} else {\n  Yeelight.onOff.skip(\"Outside of bedtime hours (22:00 to 06:00).\");\n}"
  },
  {
    "intent": "When the radon level in my Home - Living Room device exceeds 100 Bq/m3, change all my Philips Hue lights to red (#FF0000) so I can take action to get some fresh air.",
    "filter_code": "if (Airthings.radonAbove.Device === \"Home - Living Room\" && Airthings.radonAbove.MeasurementUnit === \"Bq/m3\" && parseFloat(Airthings.radonAbove.RadonLevel) > 100) {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Radon level is not above 100 Bq/m3 in Home - Living Room.\");\n}"
  },
  {
    "intent": "Blink all Philips Hue lights in the living room when a new unread voicemail from an external caller is received on your Zoom Phone between 08:00 and 18:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\" && ZoomPhone.newUserVoicemail.CallerNumberType === \"external\") {\n    Hue.blinkAllHue.setLights(\"Living room\");\n  } else {\n    Hue.blinkAllHue.skip(\"Does not match the conditions.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Outside of the specified time range (08:00-18:00).\");\n}"
  },
  {
    "intent": "Send a signal number 53 to my Office sRemo every Monday and Thursday at 08:00.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Monday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Thursday\") {\n  SRemo.sendSignalS.skip(\"Not the chosen day of the week.\");\n} else if (DateAndTime.everyWeekdayAt.CheckTime.indexOf(\"08:00\") === -1) {\n  SRemo.sendSignalS.skip(\"Not the chosen time of day.\");\n} else {\n  SRemo.sendSignalS.setSremo(\"Office\");\n  SRemo.sendSignalS.setSignalNumber(53);\n}"
  },
  {
    "intent": "When John Smith unlocks the Front Door of the San Diego beach house, then set the Brilliant Nexus AC device named \"Living Room AC\" to Cool mode with a temperature of 22°C and a fan speed of Medium.",
    "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" &&\n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" &&\n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.acExecution.setMode(\"Cool\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n} else {\n  BrilliantNexus.acExecution.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When John Smith unlocks the Front Door lock at the San Diego Beach House, then set the Living Room AC device to Auto mode with a temperature of 22°C and a fan speed of Medium.",
    "filter_code": "if (Augusthome.lockUnlocked.User === \"John Smith\" && Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\") {\n  BrilliantNexus.acExecution.setMode(\"Auto\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n}"
  },
  {
    "intent": "Notify me with a message saying \"High false alarm rate detected\" when more than 80% of my alarm videos in INSTAR Cloud storage are flagged as false alarms, and send this notification between 07:00 and 19:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var falseAlarmPercent = Instar.falsealarmPercent.Value;\n  if (falseAlarmPercent > 80) {\n    IfNotifications.sendNotification.setMessage(\"High false alarm rate detected\");\n  } else {\n    IfNotifications.sendNotification.skip(\"False alarm rate is below 80%\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of notification hours (7 AM to 7 PM)\");\n}"
  },
  {
    "intent": "When my Litter-Robot, named \"My Litter Robot\", cycles with the event type \"Cycle Completed\", send the Roomba to vacuum the \"Living Room\".",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.event_type === \"Cycle Completed\") {\n  Irobot.cleanByRoom.setRoomInfo(\"Living Room\");\n} else {\n  Irobot.cleanByRoom.skip(\"Litter-Robot is not 'My Litter Robot' or event type is not 'Cycle Completed'.\");\n}"
  },
  {
    "intent": "When the GE dishwasher with appliance ID D828C901A076 completes a dishwashing cycle, as indicated by the \"dishwasher-end-of-cycle\" event at any time, turn on the WiZ light in the \"Living Room\" entity, setting it to \"Warm White\" mode and adjusting the dimming to 75%.",
    "filter_code": "if (GeAppliancesDishwasher.dishwasherEndOfCycle.Appliance === \"D828C901A076\" && GeAppliancesDishwasher.dishwasherEndOfCycle.Event === \"dishwasher-end-of-cycle\") {\n  Wiz.turnOn.setEntity(\"Living Room\");\n  Wiz.turnOn.setMode(\"Warm White\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Notify me with a message saying \"New Alarms Detected\" when the number of new alarms in the INSTAR Cloud exceeds 5, for events created between 07:00 and 19:00, by sending a notification through the Notifications channel.",
    "filter_code": "var hour = Instar.newAlarm.CreatedAt.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Instar.newAlarm.Quantity > 5) {\n    IfNotifications.sendNotification.setMessage(\"New Alarms Detected\");\n  } else {\n    IfNotifications.sendNotification.skip(\"Number of new alarms is not over 5.\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of specified hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, set the temperature of your Nest Thermostat in the living room to 22 degrees Celsius.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Wrong button pressed\");\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, turn off all Lifx Lights with a fade out duration of 1 second.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Lifx.turnOff.setSelector(\"all\");\n  Lifx.turnOff.setFadeOutDuration(1);\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, set the living room lights to 75% brightness using Lutron Caséta.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  LutronCasetaWireless.setLightLevel.setZone(\"Living Room\");\n  LutronCasetaWireless.setLightLevel.setLevel(75);\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, specifically a long press, turn OFF the \"Living Room\" in your Leviton setup.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\" && IhomeEnhance.enhanceButton.Press === \"Long\") {\n  MyLeviton.toggleRoomOff.setRoomName(\"Living Room\");\n} else {\n  MyLeviton.toggleRoomOff.skip(\"Conditions not met to turn off the Living Room.\");\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, activate the \"Relax\" scene on LIFX with a transition duration of 2 seconds.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Lifx.activateScene.setAdvancedOptions(\"transition_duration: 2\");\n  Lifx.activateScene({\"scene\": \"Relax\"});\n}"
  },
  {
    "intent": "When the \"iH\" button on your iHome device is pressed, set the \"Living Room Shade\" in Lutron Caséta to 50% open.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  LutronCasetaWireless.setShadePosition.setShade(\"Living Room Shade\");\n  LutronCasetaWireless.setShadePosition.setPosition(50);\n} else {\n  LutronCasetaWireless.setShadePosition.skip(\"Incorrect button pressed\");\n}"
  },
  {
    "intent": "Open the main garage door when the iHome Smart Button is pressed with a long press between 07:00 and 19:00.",
    "filter_code": "var hour = IhomeEnhance.enhanceButton.Time.hour();\nvar buttonName = IhomeEnhance.enhanceButton.ButtonName;\nvar pressType = \"Long Press\"; // Assuming Long Press is the value for long press in the 'press' ingredient\n\nif (buttonName === \"iHome Smart Button\" && pressType === \"Long Press\" && hour >= 7 && hour < 19) {\n  Garadget.openDoor.setDoorId(\"main_garage_door\");\n} else {\n  Garadget.openDoor.skip(\"Conditions not met to open the main garage door.\");\n}"
  },
  {
    "intent": "When the \"iHome Button\" on the iHome device is pressed with a long press, start the Leviton scene named \"Welcome Home\".",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iHome Button\" && IhomeEnhance.enhanceButton.press === \"Long Press\") {\n  MyLeviton.runScene.setname(\"Welcome Home\");\n} else {\n  MyLeviton.runScene.skip(\"Incorrect button or press type.\");\n}"
  },
  {
    "intent": "When the Flic button named \"Home Button\" is double clicked between 07:00 and 19:00, change Hubitat's mode to \"Away\" if the click occurs at a location with longitude 18.0649000 and latitude 59.3325800.",
    "filter_code": "if (Flic.click.ButtonUuid === \"Home Button\" && Flic.click.ClickType === \"double_click\" && Meta.currentUserTime.hour() >= 7 && Meta.currentUserTime.hour() < 19 && Flic.click.Longitude === \"18.0649000\" && Flic.click.Latitude === \"59.3325800\") {\n  Hubitat.actionMode.setMode(\"Away\");\n} else {\n  Hubitat.actionMode.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Start the \"Morning Routine\" program in COQON when an event titled \"Team Meeting\" ends in my primary Google Calendar, given that the event description contains the keyword \"URGENT\" and its location is set to \"Conference Room\".",
    "filter_code": "if (GoogleCalendar.eventFromSearchEnds.Title === \"Team Meeting\"\n    && GoogleCalendar.eventFromSearchEnds.Description.includes(\"URGENT\")\n    && GoogleCalendar.eventFromSearchEnds.Where === \"Conference Room\") {\n  Coqon.simpleRuleAction.setActionCode(\"Morning Routine\");\n} else {\n  Coqon.simpleRuleAction.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Turn on the WiZ lights in the Living Room to Warm White mode with 75% brightness whenever Aura detects motion between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  var entity = \"Living Room\";\n  var mode = \"Warm White\";\n  var dimming = \"75%\";\n  Wiz.turnOn.setEntity(entity);\n  Wiz.turnOn.setMode(mode);\n  Wiz.turnOn.setDimming(dimming);\n} else {\n  Wiz.turnOn.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "Send an automated birthday wish phone call with the text \"Happy Birthday, have a wonderful day!\" in English to the recipient every year on August 23rd at 11:01 PM.",
    "filter_code": "if (DateAndTime.everyYearOn.CheckTime === \"August 23 at 11:01PM\") {\n  Woopla.ttsCall.setTts(\"Happy Birthday, have a wonderful day!\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"It's not the birthday.\");\n}"
  },
  {
    "intent": "When a Fire alarm event occurs on the Blue by ADT system, blink all the Living Room Hue lights to serve as a visual alert.",
    "filter_code": "if (Bluebyadt.alarm.EventType !== \"Fire\") {\n  Hue.blinkAllHue.skip(\"Not a fire alarm event.\");\n} else if (PhilipsHue.getLightsByName(\"Living Room\").length === 0) {\n  Hue.blinkAllHue.skip(\"No Living Room lights found.\");\n} else {\n  var livingRoomLights = PhilipsHue.getLightsByName(\"Living Room\");\n  for (var i = 0; i < livingRoomLights.length; i++) {\n    Hue.blinkLight(livingRoomLights[i].id);\n  }\n}"
  },
  {
    "intent": "Open the curtains every day at 5:55am using the OSUM SMART device named \"Living Room Curtains\".",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"5:55 AM\";\nif (currentTime.hour() === 5 && currentTime.minute() === 55) {\n  Osumsmart.open.setDeviceList([\"Living Room Curtains\"]);\n} else {\n  Osumsmart.open.skip(\"Not the scheduled time for opening curtains.\");\n}"
  },
  {
    "intent": "Play a stream from the URL https://example.com/radio_stream.mp3 on the Sonos device in the Living Room, with the name \"Morning Radio\" and image https://example.com/morning_radio.jpg, including grouped rooms, when a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088.",
    "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n  Sonos.playStream.setUrl(\"https://example.com/radio_stream.mp3\");\n  Sonos.playStream.setName(\"Morning Radio\");\n  Sonos.playStream.setImageUrl(\"https://example.com/morning_radio.jpg\");\n  Sonos.playStream.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playStream.skip(\"Invalid device or gesture.\");\n}"
  },
  {
    "intent": "When the button is pressed at a location with latitude 37.8267 and longitude -122.4230, buy 10 shares of Apple stock (AAPL) immediately.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Alpaca.placeMarketOrder.setSymbol(\"AAPL\");\n  Alpaca.placeMarketOrder.setSide(\"buy\");\n  Alpaca.placeMarketOrder.setQty(\"10\");\n} else {\n  Alpaca.placeMarketOrder.skip(\"Location does not match the specified coordinates.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp at 10:00 PM every day.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 22 && minute === 0) {\n  // No skip, proceed with turning off\n} else {\n  Kasa.turnOff.skip(\"Not 10:00 PM\");\n}"
  },
  {
    "intent": "When the Front Door lock at my San Diego beach house is engaged by John Smith, arm my Blink System on the Home network.",
    "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  Blink.networkArm.setNetwork(\"Home\");\n} else {\n  Blink.networkArm.skip(\"Lock engagement does not match specified conditions.\");\n}"
  },
  {
    "intent": "When I upvote a post on the r/learnprogramming subreddit with the keyword \"Python\" in the title, and the post has more than 100 comments, add a new note to Histre with the post's URL, titled \"Useful Python Resource\", and include the post's content in the note.",
    "filter_code": "if (Reddit.newUpvoteByYouReddit.Subreddit === \"learnprogramming\"\n    && Reddit.newUpvoteByYouReddit.Title.includes(\"Python\")\n    && Reddit.newUpvoteByYouReddit.NumComments > 100) {\n  Histre.addNote.setUrl(Reddit.newUpvoteByYouReddit.PostURL);\n  Histre.addNote.setTitle(\"Useful Python Resource\");\n  Histre.addNote.setNote(Reddit.newUpvoteByYouReddit.Content);\n} else {\n  Histre.addNote.skip(\"Does not match the criteria.\");\n}"
  },
  {
    "intent": "Turn off all Philips Hue lights every day at midnight.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar midnight = \"12:00 AM\";\nif (checkTime.includes(midnight)) {\n  Hue.turnOffAllHue.skip(\"Midnight, turning off all Hue lights.\");\n}"
  },
  {
    "intent": "When a new item is liked on Instapaper with a title like \"The Computer for the 21st Century\" and a description containing keywords like \"technology\" or \"innovation\", save it to Histre notebook as a new note titled \"Instapaper Liked Item - The Computer for the 21st Century\" with the note text including the item's URL http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html and a brief summary of the description, such as \"The most profound technologies are those that disappear.\"",
    "filter_code": "if (Instapaper.newLikedItem.Title.includes(\"The Computer for the 21st Century\") && (Instapaper.newLikedItem.Description.includes(\"technology\") || Instapaper.newLikedItem.Description.includes(\"innovation\"))) {\n  var noteTitle = \"Instapaper Liked Item - \" + Instapaper.newLikedItem.Title;\n  var noteText = Instapaper.newLikedItem.URL + \"\\n\" + Instapaper.newLikedItem.Description.substring(0, 50) + \"...\";\n  Histre.addNote.setTitle(noteTitle);\n  Histre.addNote.setUrl(Instapaper.newLikedItem.URL);\n  Histre.addNote.setNote(noteText);\n} else {\n  Histre.addNote.skip(\"Does not match the desired title or description.\");\n}"
  },
  {
    "intent": "When the Blue by ADT system is armed away, pause the Sonos stream in the Living Room and do not include grouped rooms.",
    "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  Sonos.pause.setRoom(\"Living Room\");\n  Sonos.pause.setIncludeGroupedRooms(\"false\");\n  Sonos.pause.skip(\"Blue by ADT system is armed away.\");\n}"
  },
  {
    "intent": "Set the Neato Robot to start cleaning every weekday at 8:00 AM, using the robot named \"Living Room Bot\", to maintain a tidy space during the workweek.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() !== 8 || DateAndTime.everyWeekdayAt.DayOfWeek === \"Saturday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Sunday\") {\n  Neato.startCleaning.skip(\"Not a weekday or not 8:00 AM\");\n} else {\n  Neato.startCleaning.setSelectARobot(\"Living Room Bot\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, tell Ambi Climate that you're feeling comfortable on your Living Room device.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Ambiclimate.feedback.setFeedback(\"comfortable\");\n  Ambiclimate.feedback.setDeviceName(\"Living Room\");\n} else {\n  Ambiclimate.feedback.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When a new item is tagged with \"readlater\" in Pocket, add the item's title, URL, and excerpt to Buffer as a new update, including an image if available, and schedule it to post between 08:00 and 17:00.",
    "filter_code": "if (Pocket.newTaggedItemPocket.Tags.includes(\"readlater\")) {\n  var hour = Meta.currentUserTime.hour();\n  if (hour >= 8 && hour < 17) {\n    var message = Pocket.newTaggedItemPocket.Title + \" - \" + Pocket.newTaggedItemPocket.Url;\n    if (Pocket.newTaggedItemPocket.Excerpt !== \"\") {\n      message += \"\\n\" + Pocket.newTaggedItemPocket.Excerpt;\n    }\n    Buffer.addToBuffer.setMessage(message);\n    if (Pocket.newTaggedItemPocket.ImageUrl !== \"\") {\n      // Note: The provided JSON does not include a method for setting an image in the Buffer action.\n      // This would typically be done with something like Buffer.addToBuffer.setImage(Pocket.newTaggedItemPocket.ImageUrl);\n      // However, since this is not available in the given data, it's commented out here.\n    }\n  } else {\n    Buffer.addToBuffer.skip(\"Not within posting hours (08:00-17:00).\");\n  }\n} else {\n  Buffer.addToBuffer.skip(\"Item not tagged with 'readlater'.\");\n}"
  },
  {
    "intent": "When the button is pressed on the mobile or smart watch at a location like 37.8267, -122.4230, between 07:00 and 22:00, tell Ambi Climate that you're feeling cold by sending feedback from your \"Living Room Thermostat\" device.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour <= 22 &&\n    Math.abs(latitude - 37.8267) < 0.001 &&\n    Math.abs(longitude - (-122.4230)) < 0.001) {\n  Ambiclimate.feedback.setFeedback(\"cold\");\n  Ambiclimate.feedback.setDeviceName(\"Living Room Thermostat\");\n} else {\n  Ambiclimate.feedback.skip(\"Outside of specified location or time.\");\n}"
  },
  {
    "intent": "When the button is pressed on the mobile or smart watch at a location like 37.8267, -122.4230, tell Ambi Climate that you're feeling hot using the \"Living Room AC\" device.",
    "filter_code": "Ambiclimate.feedback.setDeviceName(\"Living Room AC\");\nAmbiclimate.feedback.setFeedback(\"hot\");"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, decrease the volume in the Living Room and include grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.decreaseVolume.setRoom(\"Living Room\");\n  Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n}"
  },
  {
    "intent": "Run my Nexia automation named \"Welcome Home\" when my child, John, arrives at our house called \"Home\", triggering the pre-configured \"Notify IFTTT\" action in Nexia.",
    "filter_code": "if (Dondeesta.kidArrivedAtHome.Name === \"John\" && Nexia.nexiaAutomation.NexiaAutomationName === \"Welcome Home\" && Nexia.nexiaAutomation.HouseName === \"Home\") {\n  Nexia.nexiaAutomation.setNexiaAutomation(\"Welcome Home\");\n} else {\n  Nexia.nexiaAutomation.skip(\"Conditions not met for running 'Welcome Home' automation.\");\n}"
  },
  {
    "intent": "Save £1 to your Dozens savings account every time you achieve your daily calorie burn goal of 2000 calories on Fitbit, where the number of calories burned is at least 2000, and the date achieved is today.",
    "filter_code": "if (Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal === \"2000\" &&\n    parseInt(Fitbit.dailyCalorieBurnGoal.CaloriesBurned) >= 2000 &&\n    Fitbit.dailyCalorieBurnGoal.DateAchieved === Meta.currentUserTime.toISOString().split('T')[0]) {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"Conditions not met to save £1.\");\n}"
  },
  {
    "intent": "Send an Android SMS to phone number +1234567890 with the message \"The Litter-Robot waste drawer is full\" when the Event Type is \"Waste Drawer Full\" for the Litter-Robot named \"My Litter Robot\".",
    "filter_code": "if (Whisker.lr3Events.EventType === \"Waste Drawer Full\" && Whisker.lr3Events.LitterRobotName === \"My Litter Robot\") {\n  AndroidMessages.sendAMessage.setText(\"The Litter-Robot waste drawer is full\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Event type or litter robot name does not match.\");\n}"
  },
  {
    "intent": "Arm the Blink Security System on the \"Home\" network when the Hubitat mode changes to \"Night\".",
    "filter_code": "if (Hubitat.triggerMode.Mode !== \"Night\") {\n  Blink.networkDisarm.skip(\"Not arming because the mode is not 'Night'.\");\n} else {\n  Blink.networkDisarm.setNetwork(\"Home\");\n}"
  },
  {
    "intent": "Arm the Arlo device named \"Front Door Camera\" when the Hubitat mode changes to \"Night\".",
    "filter_code": "if (Hubitat.triggerMode.Mode === \"Night\") {\n  Arlo.arm.setDeviceName(\"Front Door Camera\");\n} else {\n  Arlo.arm.skip(\"Not arming because Hubitat mode is not 'Night'.\");\n}"
  },
  {
    "intent": "Disarm the Blink Security System on the \"Home\" network when the Hubitat mode changes to \"Day\".",
    "filter_code": "if (Hubitat.triggerMode.Mode === \"Day\") {\n  Blink.networkDisarm.setNetwork(\"Home\");\n} else {\n  Blink.networkDisarm.skip(\"Not disarming because mode is not 'Day'.\");\n}"
  },
  {
    "intent": "When the Hubitat mode changes to \"Night\", disarm the Arlo device named \"Front Door Camera\".",
    "filter_code": "if (Hubitat.triggerMode.Mode === \"Night\") {\n  Arlo.arm.setDeviceName(\"Front Door Camera\");\n} else {\n  Arlo.arm.skip(\"Not changing to Night mode.\");\n}"
  },
  {
    "intent": "When the Scout Alarm mode changes to \"Armed\" and the event is triggered by \"Dave via IFTTT\" at any time, change Hubitat's mode to \"Away\".",
    "filter_code": "if (Scoutalarm.modeArmed.Event === \"Armed\" && Scoutalarm.modeArmed.By === \"Dave via IFTTT\") {\n  Hubitat.actionMode.setMode(\"Away\");\n}"
  },
  {
    "intent": "When the Apilio event named \"nighttime_mode\" is triggered at 20:00 with a custom value of \"Armed\" for Apilio value1, set my Blink (Europe) system named \"Home Security\" to armed.",
    "filter_code": "if (Apilio.iftttActionReports.EventName === \"nighttime_mode\"\n    && Apilio.iftttActionReports.CreatedAt.hour() === 20\n    && Apilio.iftttActionReports.ApilioValue1 === \"Armed\") {\n  BlinkEu.networkArm.setNetwork(\"Home Security\");\n} else {\n  BlinkEu.networkArm.skip(\"Conditions not met to arm the system.\");\n}"
  },
  {
    "intent": "Pause the Sonos playback in the Living Room when an Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, including the entire household.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6)) {\n  Sonos.pause.setRoom(\"Living Room\");\n  Sonos.pause.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.pause.skip(\"Not nighttime or wrong event.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered with Value 1 set to \"Green\" and the time is between 19:00 and 07:00, disarm my Blink (Europe) system on the network labeled \"Home Security\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" &&\n    Apilio.iftttActionReports.ApilioValue1 === \"Green\" &&\n    (hour >= 19 || hour < 7)) {\n  BlinkEu.networkDisarm.setNetwork(\"Home Security\");\n} else {\n  BlinkEu.networkDisarm.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Scout Alarm mode changes to disarmed, specifically when it transitions from \"Armed\" to \"Disarmed\" and the event is triggered by someone like \"Dave via IFTTT\", change Hubitat's mode to \"Home\" to ensure both systems are in sync and reflect the current security status accurately.",
    "filter_code": "if (Scoutalarm.modeDisarmed.Event === \"Disarmed\" && Scoutalarm.modeDisarmed.By === \"Dave via IFTTT\") {\n  Hubitat.actionMode.setMode(\"Home\");\n}"
  },
  {
    "intent": "Play the Sonos favorite named \"Morning Music\" in the room \"Living Room\" when Apilio triggers an event named \"run_only_at_nighttime\" with a value1 of \"Green\" and include grouped rooms.",
    "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  Sonos.playFavorite.setFavorite(\"Morning Music\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp light when an Apilio event named \"run_only_at_nighttime\" is received with a custom value of \"Green\" between 19:00 and 07:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && apilioValue1 === \"Green\" && (hour >= 19 || hour < 7)) {\n  // No need to skip, the conditions are met for turning off the light\n} else {\n  LightwaverfLighting.switchOffLight.skip(\"Conditions not met for turning off the Living Room Lamp.\");\n}"
  },
  {
    "intent": "When the Apilio event \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value from Apilio is \"Green\", change the color of the \"Living Room\" MagicHue lights to green and set the brightness to 70%.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6) && apilioValue1 === \"Green\") {\n  Magichue.changeColor.setWhichLights(\"Living Room\");\n  Magichue.changeColor.setColor(\"green\");\n  Magichue.changeColor.setBrightness(70);\n} else {\n  Magichue.changeColor.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Litter-Robot named \"My Litter Robot\" reports that its waste drawer is full, as indicated by the \"Waste Drawer Full\" event type at any time, trigger the iRobot to clean the \"Living Room\".",
    "filter_code": "if (Whisker.lr3Events.EventType === \"Waste Drawer Full\" && Whisker.lr3Events.LitterRobotName === \"My Litter Robot\") {\n  Irobot.cleanByRoom.setRoomInfo(\"Living Room\");\n} else {\n  Irobot.cleanByRoom.skip(\"Conditions not met for cleaning.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor device no longer detects someone present, update the boolean variable \"Occupancy Status\" to false in Apilio.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\" && SmartthingsV2.newPresentSmartthings.ArrivedAt === null) {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Occupancy Status\");\n  Apilio.booleanVariableToggleUpdates.skip(\"No one is present in the Bedroom.\");\n}"
  },
  {
    "intent": "Send a notification with the title \"Tokyo Olympics News\" and the message \"New update: {{EntryTitle}}\" whenever a new entry is published in the Tokyo Olympics RSS feed, including a link to the full entry at {{EntryUrl}} and an image from the entry if available at {{EntryImageUrl}}.",
    "filter_code": "IfNotifications.sendRichNotification\n  .setTitle(\"Tokyo Olympics News\")\n  .setMessage(\"New update: \" + Feed.newFeedItem.EntryTitle)\n  .setLinkUrl(Feed.newFeedItem.EntryUrl)\n  .setImageUrl(Feed.newFeedItem.EntryImageUrl);"
  },
  {
    "intent": "Turn on the child lock mode for my Heatzy device named \"Bedroom Thermostat\" every day at 10:00 PM to disable the LEDs and prevent the light from disturbing my sleep.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 22 && minute === 0) {\n  Heatzy.aCloseChildLockMode.setDevice(\"Bedroom Thermostat\");\n} else {\n  Heatzy.aCloseChildLockMode.skip(\"Not 10:00 PM\");\n}"
  },
  {
    "intent": "Désactivez le mode \"lock\" de votre thermostat Heatzy \"Salon\" tous les matins à 07:00 pour permettre une utilisation normale pendant la journée.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.getHours() === 7 && currentTime.getMinutes() === 0) {\n  Heatzy.aCloseChildLockMode.setDevice(\"Salon\");\n} else {\n  Heatzy.aCloseChildLockMode.skip(\"Not the targeted time.\");\n}"
  },
  {
    "intent": "When the Litter-Robot named \"My Litter Robot\" sends a \"Waste Drawer Full\" event, create a new task in Asana's \"Household Chores\" project named \"Empty Waste Drawer\", with notes \"The waste drawer of My Litter Robot is full and needs to be emptied\", due on the current day, assigned to John Doe, and tagged with \"Urgent\" and \"Cleaning\".",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.event_type === \"Waste Drawer Full\") {\n  Asana.createTask.setTaskName(\"Empty Waste Drawer\");\n  Asana.createTask.setNotes(\"The waste drawer of My Litter Robot is full and needs to be emptied\");\n  Asana.createTask.setDueOn(Meta.currentUserTime.toISO8601String().split('T')[0]);\n  Asana.createTask.setAssignee(\"John Doe\");\n  Asana.createTask.setTags([\"Urgent\", \"Cleaning\"]);\n  Asana.createTask.setProjectName(\"Household Chores\");\n} else {\n  Asana.createTask.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Foobot device named \"HappyBot\" detects a pollution level higher than 50, send a message to all Invoxia Triby devices saying \"High pollution alert: 73.70, please take necessary precautions\".",
    "filter_code": "if (Foobot.allPollu50Any.DeviceName === \"HappyBot\" && Foobot.allPollu50Any.Value > 50) {\n  InvoxiaTriby.sendAMessageToEveryTriby.setMessage(\"High pollution alert: \" + Foobot.allPollu50Any.Value + \", please take necessary precautions\");\n} else {\n  InvoxiaTriby.sendAMessageToEveryTriby.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When the SmartThings sensor in the Bedroom detects a temperature drop below 18°C, automatically turn on the WiZ light in the Living Room to Cozy mode at a brightness of 50%.",
    "filter_code": "if (SmartthingsV2.temperatureDropsBelowSmartthings.TemperatureCelsius < 18 && SmartthingsV2.temperatureDropsBelowSmartthings.DeviceName === \"Bedroom sensor\") {\n  Wiz.turnOn.setMode(\"Cozy\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Temperature is not below 18°C or device is not Bedroom sensor.\");\n}"
  },
  {
    "intent": "Create a Google Calendar event for 30 minutes to handle an unread voicemail from Zoom Phone when the caller's number is external and the callee's name is Biff McIfttt, using the quick add text \"Voicemail follow-up with Biff McIftt tomorrow at 2pm\" on the default calendar.",
    "filter_code": "if (ZoomPhone.newUserVoicemail.CallerNumberType === \"external\" && ZoomPhone.newUserVoicemail.CalleeName === \"Biff McIfttt\" && ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Voicemail follow-up with Biff McIftt tomorrow at 2pm\");\n  GoogleCalendar.quickAddEvent.skip();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for voicemail follow-up event.\");\n}"
  },
  {
    "intent": "When a new Asana project is created in the \"Team Asana\" workspace, send a message to the \"#general\" channel in Microsoft Teams with the subject \"New Project Created: {{project_name}}\" and the body \"A new project named {{project_name}} has been created in Asana. You can view it here: {{project_url}}\". Set the message urgency to \"Important\".",
    "filter_code": "if (Asana.newProject.Workspace === \"Team Asana\") {\n  var subject = \"New Project Created: \" + Asana.newProject.ProjectName;\n  var body = \"A new project named \" + Asana.newProject.ProjectName + \" has been created in Asana. You can view it here: \" + Asana.newProject.ProjectURL;\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(subject);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(body);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"New project is not in 'Team Asana' workspace.\");\n}"
  },
  {
    "intent": "When I receive an SMS from Jon Snow on my Google Pixel 7 with the text containing the word \"URGENT\" at any time, send a toast message to my Bbox Miami saying \"New urgent message from Jon Snow\".",
    "filter_code": "if (AndroidMessages.receivedAMessage.ContactName === \"Jon Snow\" &&\n    AndroidMessages.receivedAMessage.Text.includes(\"URGENT\") &&\n    AndroidMessages.receivedAMessage.DeviceName === \"Google Pixel 7\") {\n  BboxMiami.sendToast.setMessage(\"New urgent message from Jon Snow\");\n} else {\n  BboxMiami.sendToast.skip(\"Does not match the conditions.\");\n}"
  },
  {
    "intent": "When a new book is listed on the New York Times Best Sellers list in the \"Fiction\" category, with a rank of 1 and having been on the list for more than 10 weeks, send a message to the \"#book-club\" channel on Microsoft Teams with the subject \"New NYT Best Seller: {{Title}} by {{Author}}\" and the message body \"A new book, '{{Title}}' by {{Author}}, has reached the top of the New York Times Best Sellers list in the Fiction category. It has been on the list for {{WeeksOnList}} weeks and is currently ranked #{{Rank]]. You can find more information about this book at {{BookCoverImageUrl}}. ISBN: {{ISBN}}\". Mark the message as \"Urgent\" to notify team members immediately.",
    "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Fiction\" && Nytimes.newBookOnABestSellerList.Rank === \"1\" && parseInt(Nytimes.newBookOnABestSellerList.WeeksOnList) > 10) {\n  var subject = `New NYT Best Seller: ${Nytimes.newBookOnABestSellerList.Title} by ${Nytimes.newBookOnABestSellerList.Author}`;\n  var body = `A new book, '${Nytimes.newBookOnABestSellerList.Title}' by ${Nytimes.newBookOnABestSellerList.Author}, has reached the top of the New York Times Best Sellers list in the Fiction category. It has been on the list for ${Nytimes.newBookOnABestSellerList.WeeksOnList} weeks and is currently ranked #${Nytimes.newBookOnABestSellerList.Rank}. You can find more information about this book at ${Nytimes.newBookOnABestSellerList.BookCoverImageUrl}. ISBN: ${Nytimes.newBookOnABestSellerList.ISBN}`;\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"book-club\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(subject);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(body);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Conditions not met for sending message.\");\n}"
  },
  {
    "intent": "Send a daily reminder to my Kronaby watch at 08:00 to take medication, with a notification message saying \"Remember to take your morning pill\".",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nif (hour === 8) {\n  Kronaby.notify.setBody(\"Remember to take your morning pill\");\n} else {\n  Kronaby.notify.skip(\"Not the scheduled reminder time.\");\n}"
  },
  {
    "intent": "Receive a daily reminder phone call at 08:00 with the text \"Good morning, it's time to start your day\" played when the call connects, using the English language.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 8 && minute === 0) {\n  Woopla.ttsCall.setTts(\"Good morning, it's time to start your day\");\n  Woopla.ttsCall.setLanguage(\"English\");\n} else {\n  Woopla.ttsCall.skip(\"Not the scheduled time for the daily reminder.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, pause the Sonos playback in the Living Room and include all grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.pause.setRoom(\"Living Room\");\n  Sonos.pause.setIncludeGroupedRooms(\"true\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, play my Sonos favorite \"Living Room Playlist\" in the room \"Living Room\" and include all grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.playFavorite.setFavorite(\"Living Room Playlist\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Incorrect gesture or device.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, resume playback in the Living Room on Sonos.",
    "filter_code": "if (Knocki.knocki.Gesture !== \"Triple Knock\" || Knocki.knocki.Device !== \"KNC1-W-00000088\") {\n  Sonos.resume.skip(\"Invalid gesture or device\");\n} else {\n  Sonos.resume.setRoom(\"Living Room\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on the KNC1-W-00000088 device at any time, turn up the volume in the Living Room, including all grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.decreaseVolume.setRoom(\"Living Room\");\n  Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n  Sonos.decreaseVolume.skip(); // This line is incorrect based on the intent to turn up the volume, it should be adjusted according to Sonos API for increasing volume.\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, mute the Sonos speaker in the Living Room and include grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.mute.setRoom(\"Living Room\");\n  Sonos.mute.setIncludeGroupedRooms(\"true\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, skip to the next track in the Living Room on Sonos.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.nextTrack.setRoom(\"Living Room\");\n  Sonos.nextTrack.skip();\n}"
  },
  {
    "intent": "When the Flic button named \"MyFlic\" is double-clicked, change the Atmoph view to a random landscape between \"Mountain\" and \"Beach\" if the click occurs between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"MyFlic\") {\n    var landscapes = [\"Mountain\", \"Beach\"];\n    var randomIndex = Math.floor(Math.random() * landscapes.length);\n    Atmoph.changeView.setView(landscapes[randomIndex]);\n  } else {\n    Atmoph.changeView.skip(\"Either not a double click or not the MyFlic button.\");\n  }\n} else {\n  Atmoph.changeView.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the Flic button named \"MyFlic\" is held for a long time, display the calendar on Atmoph Window; if held again, hide it.",
    "filter_code": "var clickType = Flic.click.ClickType;\nif (clickType === 'hold') {\n  var buttonUuid = 'MyFlic'; // assuming this is how to get or set the specific Flic name\n  if (buttonUuid === 'MyFlic') {\n    Atmoph.showCalendar.skip(); // This line needs adjustment as per actual implementation details\n  } else {\n    Atmoph.showCalendar.setCalendarVisible(false); // Assuming such a method exists for hiding\n  }\n} else {\n  Atmoph.showCalendar.skip('Not a hold click');\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, set the volume to 75 in the Living Room and include grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.setVolume.setVolume(\"75\");\n  Sonos.setVolume.setIncludeGroupedRooms(\"true\");\n  Sonos.setVolume.setRoom(\"Living Room\");\n} else {\n  Sonos.setVolume.skip(\"Gesture or device does not match.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on the device KNC1-W-00000088 at any time, unmute the Sonos speaker in the Living Room and include all grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.unmute.setRoom(\"Living Room\");\n  Sonos.unmute.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.unmute.skip(\"Gesture or device does not match.\");\n}"
  },
  {
    "intent": "When the Knocki device KNC1-W-00000088 detects a Triple Knock gesture, set the Living Room Nest Thermostat to 22°C.",
    "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Incorrect device or gesture.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, change the Yeelight color to red.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Yeelight.setColor.set_color(\"red\");\n} else {\n  Yeelight.setColor.skip(\"Gesture or device does not match.\");\n}"
  },
  {
    "intent": "Turn on the coffee machine with SwitchBot every day at 7:00 AM.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 AM\";\nif (currentTime !== targetTime) {\n  Switchbot.pressBot.skip(\"Not the scheduled time for coffee.\");\n} else {\n  // Assuming 'chose_a_device' is set to the coffee machine in the action details\n  Switchbot.pressBot.setChoseADevice(\"coffee_machine\");\n}"
  },
  {
    "intent": "When the Knocki device KNC1-W-00000088 detects a Triple Knock gesture with a *** pattern at any time, change the brightness of the Living Room Light bulb to 75% using the TP-Link Kasa channel.",
    "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" &&\n    Knocki.knocki.Gesture === \"Triple Knock\" &&\n    Knocki.knocki.Pattern === \"***\") {\n  Kasa.changeBrightness.setBrightness(\"75%\");\n} else {\n  Kasa.changeBrightness.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, skip to the previous track in the Living Room on Sonos.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.previousTrack.setRoom(\"Living Room\");\n  Sonos.previousTrack.skip();\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, set the Yeelight scene to Movie.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Yeelight.setScene.setBundleId(\"Movie\");\n} else {\n  Yeelight.setScene.skip(\"Incorrect gesture or device.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, change the color temperature of the Living Room Light bulb to Cool White with a transition duration of 2 seconds.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Kasa.changeColorTemp.setDevice(\"Living Room Light bulb\");\n  Kasa.changeColorTemp.setColorTemperature(\"Cool White\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, change the brightness of the Yeelight device in the living room to 50% at 07:00 every day.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\" && Meta.currentUserTime.hour() === 7) {\n  Yeelight.changeBright.setDeviceId(\"living_room_device_id\");\n  Yeelight.changeBright.setSceneId(\"50_percent_brightness_scene_id\");\n} else {\n  Yeelight.changeBright.skip(\"Gesture or device does not match, or it's not 07:00.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on the device KNC1-W-00000088, change the color temperature of the living room bulb to 2700K with a transition duration of 2 seconds.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n}"
  },
  {
    "intent": "When the Knocki device KNC1-W-00000088 detects a Triple Knock gesture, set the Living Room Nest Thermostat to a temperature range of 22°C for heating and 25°C for cooling.",
    "filter_code": "if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n  GoogleNestThermostat.setTemperatureRange.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setTemperatureRange.setHeatTemperature(\"22\");\n  GoogleNestThermostat.setTemperatureRange.setCoolTemperature(\"25\");\n} else {\n  GoogleNestThermostat.setTemperatureRange.skip(\"Wrong device or gesture.\");\n}"
  },
  {
    "intent": "Lock the Front Door device on Hubitat when the Flic named MyFlicButton is double-clicked.",
    "filter_code": "if (Flic.click.ClickType === 'double_click' && Flic.click.ButtonUuid === 'MyFlicButton') {\n  // No need to skip, this is the condition to lock\n} else {\n  Hubitat.actionLock.skip('Not double-click or not MyFlicButton');\n}"
  },
  {
    "intent": "Open the garage door when the Adafruit IO feed named \"humidity\" has a value greater than \"34\".",
    "filter_code": "if (Adafruit.monitorYourData.FeedName === \"humidity\" && Adafruit.monitorYourData.FeedValue > 34) {\n  Garadget.openDoor();\n} else {\n  Garadget.openDoor.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Trigger a MyMilan scene named \"Good Morning\" when the Logitech POP button with the name \"Living Room\" and ID \"a0:e6:f8:8c:f5:33\" is short pressed, the battery level is above 50%, and the event is triggered between 07:00 and 09:00.",
    "filter_code": "if (LogitechPop.shortPress.Name === \"Living Room\" && LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && parseInt(LogitechPop.shortPress.Battery) > 50 && Meta.currentUserTime.hour() >= 7 && Meta.currentUserTime.hour() < 9) {\n  Mymilan.aScenes.setScenes(\"Good Morning\");\n} else {\n  Mymilan.aScenes.skip(\"Conditions not met for triggering 'Good Morning' scene.\");\n}"
  },
  {
    "intent": "Turn on the living room lights at 7:00 AM every day using the Hager IoT system to run the \"Good Morning\" scene.",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour === 7 && minute === 0) {\n  HagerIot.runScene.setScene(\"Good Morning\");\n} else {\n  HagerIot.runScene.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "Send a message to the #general channel in Microsoft Teams with the subject \"Upcoming Event\" and the body \"The event 'Practice Presentation' is about to start in 15 minutes at Building A, Room 101. Join the video call at https://meet.google.com\" when an event from the \"Work\" calendar containing the keyword \"meeting\" is about to begin, 15 minutes before the event starts.",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Calendar === \"Work\" && GoogleCalendar.eventFromSearchStarts.Query === \"meeting\") {\n  var messageBody = `The event '${GoogleCalendar.eventFromSearchStarts.Title}' is about to start in 15 minutes at ${GoogleCalendar.eventFromSearchStarts.Where}. Join the video call at ${GoogleCalendar.eventFromSearchStarts.VideoCallUrl}`;\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"general\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Upcoming Event\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When my Husqvarna Automower named Jupiter leaves its charging station with a status of LEAVING, automatically open the garage door labeled \"Main Garage Door\" so it can begin its mowing job.",
    "filter_code": "if (Automower.automowerLeaving.Automower === \"Jupiter\" && Automower.automowerLeaving.Status === \"LEAVING\") {\n  if (Garageio.openGarageDoor !== undefined) {\n    Garageio.openGarageDoor.setDoorToOpen(\"Main Garage Door\");\n  } else {\n    Garageio.openGarageDoor.skip(\"Action not supported.\");\n  }\n} else {\n  Garageio.openGarageDoor.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new response is submitted to the Typeform with the ID \"123\" and title \"My awesome form!\", append a row to the Google Sheets spreadsheet named \"Typeform Responses\" in the folder path \"IFTTT/Typeform Data\", with the formatted row containing the form title, response URL, and public status, like this: \"My awesome form!|||https://subdomain.typeform.com/to/abc123|||false\".",
    "filter_code": "if (Typeform.newForm.FormId === \"123\" && Typeform.newForm.FormTitle === \"My awesome form!\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Typeform Responses\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Typeform Data\");\n  var formattedRow = Typeform.newForm.FormTitle + \"|||\" + Typeform.newForm.FormUrl + \"|||\" + Typeform.newForm.FormIsPublic;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Not the target form.\");\n}"
  },
  {
    "intent": "When the garage door event type is \"opening\" or \"closing\" on the main garage door, display a LaMetric notification with a \"car\" icon and the message \"Garage door is {event_type}\" on the \"Living Room Display\" device with a priority of \"info\" and the sound \"ding\".",
    "filter_code": "if (Garadget.doorEvent.EventType === \"opening\" || Garadget.doorEvent.EventType === \"closing\") {\n  if (Garadget.doorEvent.DoorId === \"main_garage_door\") {\n    Lametric.notification.setText(\"Garage door is \" + Garadget.doorEvent.EventType);\n    Lametric.notification.setSound(\"ding\");\n    Lametric.notification.setPriority(\"info\");\n    Lametric.notification.setIcon(\"car\");\n    Lametric.notification.setDevice(\"Living Room Display\");\n  } else {\n    Lametric.notification.skip(\"Not the main garage door.\");\n  }\n} else {\n  Lametric.notification.skip(\"Event type is not opening or closing.\");\n}"
  },
  {
    "intent": "Automatically disarm the alarm system on Mondays, Wednesdays, and Fridays at 8:00 AM using the device named \"Office Alarm System\".",
    "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar timeOfDay = DateAndTime.everyWeekdayAt.CheckTime;\n\nif (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\") {\n  var hours = timeOfDay.getHours();\n  var minutes = timeOfDay.getMinutes();\n\n  if (hours === 8 && minutes === 0) {\n    Uplinkremote.disarmaction.setSerialNumber(\"Office Alarm System\");\n  } else {\n    Uplinkremote.disarmaction.skip(\"Not the scheduled disarm time.\");\n  }\n} else {\n  Uplinkremote.disarmaction.skip(\"Not a scheduled disarm day.\");\n}"
  },
  {
    "intent": "When the air quality index (AQI) from my Kaiterra Laseregg device exceeds 50, change the color of my Nanoleaf Smarter Series panel to red (#FF0000).",
    "filter_code": "if (Kaiterra.lasereggAqiThreshold.Aqi > 50) {\n  Nanoleaf.changeColorRequest.setValue(\"red\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Air quality is good.\");\n}"
  },
  {
    "intent": "When the air quality index from my Kaiterra Laseregg device exceeds 100, change the color of my Nanoleaf Smarter Series lights to red (#FF0000) if it's between 07:00 and 19:00, and to purple (#7A288A) otherwise.",
    "filter_code": "let aqi = parseInt(Kaiterra.lasereggAqi.Aqi);\nlet hour = Meta.currentUserTime.hour();\n\nif (aqi > 100) {\n  if (hour >= 7 && hour < 19) {\n    Nanoleaf.changeColorRequest.setValue(\"FF0000\");\n  } else {\n    Nanoleaf.changeColorRequest.setValue(\"7A288A\");\n  }\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Air quality index is not exceeded.\");\n}"
  },
  {
    "intent": "Turn on the WiZ light in the Living Room to 75% brightness with Warm White mode whenever motion is detected by the Ivideon camera named \"Front Door\" between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (Ivideon.motionDetected.CameraName === \"Front Door\") {\n    Wiz.turnOn.setMode(\"Warm White\");\n    Wiz.turnOn.setDimming(\"75%\");\n  } else {\n    Wiz.turnOn.skip(\"Motion detected by camera other than Front Door.\");\n  }\n} else {\n  Wiz.turnOn.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "Turn off the WiZ living room lamp when SmartThings no longer detects presence from the bedroom sensor after 10 minutes of absence between 07:00 and 22:00.",
    "filter_code": "var currentTime = Meta.currentUserTime.hour();\nvar deviceName = SmartthingsV2.newPresentSmartthings.DeviceName;\nvar arrivedAt = SmartthingsV2.newPresentSmartthings.ArrivedAt;\n\nif (deviceName === \"Bedroom sensor\" &&\n    currentTime >= 7 && currentTime < 22 &&\n    (new Date() - new Date(arrivedAt)) / 60000 > 10) {\n  Wiz.turnOff.setEntity(\"living room lamp\");\n} else {\n  Wiz.turnOff.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a notification to the Telegram chat \"#home_automation\" with the message \"Temperature alert: the living room sensor has reached 25°C\" when the Vimar VIEW device \"Living Room Sensor\" exceeds the threshold of 25°C.",
    "filter_code": "if (ViewProd.sensorTemperature.Device === \"Living Room Sensor\" && ViewProd.sensorTemperature.State > 25) {\n  Telegram.sendMessage.setText(\"Temperature alert: the living room sensor has reached 25°C\");\n  Telegram.sendMessage.setIncludeWebPagePreview(false);\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "Send a notification to the #home_monitoring Telegram chat when the living room temperature exceeds 25°C or drops below 18°C, including a web page preview in the message.",
    "filter_code": "if (ViewProd.climaAmbientTemperature.State > 25 || ViewProd.climaAmbientTemperature.State < 18) {\n  Telegram.sendMessage.setText(`Temperature alert: ${ViewProd.climaAmbientTemperature.State}°C in the living room.`);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip(null);\n} else {\n  Telegram.sendMessage.skip(\"Temperature is within the acceptable range.\");\n}"
  },
  {
    "intent": "When the EveryKit named \"MyDailyKit\" sends a message with the command \"SendReminders\" and the data \"Reminder: Meeting at 2 PM\", send an SMS to the phone number \"+1234567890\" with the text \"You have a meeting at 2 PM today\".",
    "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyDailyKit\" && Everykit.triggerFire.Message === \"SendReminders\" && Everykit.triggerFire.Data === \"Reminder: Meeting at 2 PM\") {\n  AndroidMessages.sendAMessage.setText(\"You have a meeting at 2 PM today\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the EveryKit named \"MyDailyKit\" is triggered with the command \"StartActivity\" at 14:00, send a notification with the message \"It's time for activity class 5\".",
    "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyDailyKit\"\n    && Everykit.triggerFire.Message === \"StartActivity\"\n    && Everykit.triggerFire.CreatedAt.hour() === 14) {\n  IfNotifications.sendNotification.setMessage(\"It's time for activity class 5\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the EveryKit named \"My Daily Kit\" sends a message with the text \"Reminder for activity class 2\" at 14:00, quickly add an event to my Google Calendar named \"Personal\" with the text \"Activity class 2 at 14:00 today\".",
    "filter_code": "if (Everykit.triggerFire.EveryKitName === \"My Daily Kit\" && Everykit.triggerFire.Message === \"Reminder for activity class 2\" && Everykit.triggerFire.CreatedAt.getHours() === 14) {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Activity class 2 at 14:00 today\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for adding event to calendar.\");\n}"
  },
  {
    "intent": "When the \"Everykit\" is selected and a message with the text \"Start activity\" is sent through the EveryKit block program at 10:00 AM, create a new task named \"Activity Time\" in the \"To-Do\" section of MeisterTask with the description \"It's time for the 4th period activity\".",
    "filter_code": "if (Everykit.triggerFire.EveryKitName === \"Everykit\" && Everykit.triggerFire.Message === \"Start activity\" && Meta.currentUserTime.hour() === 10) {\n  Meistertask.createATask.setTaskName(\"Activity Time\");\n  Meistertask.createATask.setSectionId(\"To-Do\");\n  Meistertask.createATask.setTaskDescription(\"It's time for the 4th period activity\");\n} else {\n  Meistertask.createATask.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the EveryKit named \"MyEveryKit\" sends a message with the content \"Start activity\" at 10:00 AM, mute the Android device \"Office Phone\" and set it to vibrate mode.",
    "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyEveryKit\"\n    && Everykit.triggerFire.Message === \"Start activity\"\n    && Everykit.triggerFire.CreatedAt.hour() === 10) {\n  AndroidDevice.muteDevice.setVibrate(\"vibrate\");\n} else {\n  AndroidDevice.muteDevice.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the EveryKit named \"MyEveryKit\" sends a message with the content \"Reminder: 기능코스 8교시\" at 14:00, send an SMS to the phone number \"+821012345678\" with the text \"功能コース 8時限を開始してください\".",
    "filter_code": "if (Everykit.triggerFire.EveryKitName === \"MyEveryKit\"\n    && Everykit.triggerFire.Message === \"Reminder: 기능코스 8교시\"\n    && Everykit.triggerFire.CreatedAt.getHours() === 14) {\n  AndroidMessages.sendAMessage.setText(\"功能コース 8時限を開始してください\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+821012345678\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When I call the Woopla trigger hotline at +16282222790 from my phone number +49203987654321, and enter the 3-digit trigger code 123 during the call between 07:00 and 22:00, disarm all modes at my Scout Alarm location named \"Home\".",
    "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\"\n    && Woopla.triggerCall.PhoneNumber === \"+49203987654321\"\n    && Woopla.triggerCall.TriggerCode === \"123\") {\n  var hour = new Date(Woopla.triggerCall.CreatedAt).getHours();\n  if (hour >= 7 && hour < 22) {\n    Scoutalarm.disarmAllModes.setLocationId(\"Home\");\n  } else {\n    Scoutalarm.disarmAllModes.skip(\"Outside of allowed hours (07:00 to 22:00).\");\n  }\n} else {\n  Scoutalarm.disarmAllModes.skip(\"Invalid trigger details.\");\n}"
  },
  {
    "intent": "When the Das Keyboard Q device in the \"Living Room\" zone is triggered with the \"set_value\" action and the action value is \"72\", toggle all Philips Hue lights.",
    "filter_code": "if (Daskeyboardq.deviceZoneAction.ZoneName === \"Living Room\"\n    && Daskeyboardq.deviceZoneAction.ActionType === \"set_value\"\n    && Daskeyboardq.deviceZoneAction.ActionValue === \"72\") {\n  Hue.toggleAllHue();\n} else {\n  Hue.toggleAllHue.skip(\"Conditions not met to toggle lights.\");\n}"
  },
  {
    "intent": "When the \"Office Button\" on device \"Kitchen Fetchit\" is pressed, activate the \"Welcome Home\" wink shortcut.",
    "filter_code": "if (Tantiv4.whenFetchitButtonPress.ButtonName === \"Office Button\" && Tantiv4.whenFetchitButtonPress.DeviceName === \"Kitchen Fetchit\") {\n  WinkShortcuts.activateScene.setSceneId(\"Welcome Home\");\n} else {\n  WinkShortcuts.activateScene.skip(\"Incorrect button or device.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor device detects presence, toggle the \"Someone_Is_Home\" Apilio variable.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Someone_Is_Home\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Not the Bedroom sensor device.\");\n}"
  },
  {
    "intent": "Send a notification with the message \"INSTAR Cloud storage is full\" when my INSTAR Cloud storage reaches its limit at any time, using the Notifications channel.",
    "filter_code": "IfNotifications.sendNotification.setMessage(\"INSTAR Cloud storage is full\");"
  },
  {
    "intent": "Turn off the Smart Home Solution device at address \"Living Room Lamp\" when motion stops being detected by the Aerial Technologies sensor with serial number \"ABCDEF\", which is triggered when the type of event is \"motionDetection.humanMotion.stopped\".",
    "filter_code": "if (AerialTechnologies.motionDetectionMotionStopped.Type === \"motionDetection.humanMotion.stopped\" && AerialTechnologies.motionDetectionMotionStopped.Serial === \"ABCDEF\") {\n  SmartHomeSolution.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  SmartHomeSolution.turnDeviceOff.skip(\"Conditions not met to turn off the device.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Light every day at 6:00 PM.",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 18 && minute === 0) {\n  LinkSmartHome.lightLightSwitch.setDeviceId(\"Living Room Light\");\n  LinkSmartHome.lightLightSwitch.setValue(\"on\");\n} else {\n  LinkSmartHome.lightLightSwitch.skip(\"Not 6:00 PM\");\n}"
  },
  {
    "intent": "Send a text message to phone number +1234567890 with the message \"Client computer has disconnected from the DIR-2660 router at 04:17:06+05:00\" when a client disconnects from the D-Link Wi-Fi Router.",
    "filter_code": "AndroidMessages.sendAMessage.setText(\"Client \" + DlinkWifiRouter.routerClientDisconnect.ClientName + \" has disconnected from the \" + DlinkWifiRouter.routerClientDisconnect.DeviceName + \" router at \" + DlinkWifiRouter.routerClientDisconnect.CreatedAt);\nAndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");"
  },
  {
    "intent": "Turn on the Living Room Lamp when motion is detected by the device with serial number ABCDEF between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar serialNumber = AerialTechnologies.motionDetectionMotionStarted.Serial;\nif (serialNumber === \"ABCDEF\" && hour >= 7 && hour < 22) {\n  SmartHomeSolution.turnDeviceOn.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Either not the correct device or outside of desired hours.\");\n}"
  },
  {
    "intent": "If the Bedroom contact SmartThings device is opened at any time, then turn off the SpotCam with serial number S123456 automatically.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Spotcam.turnOnSpotcam.skip(\"Bedroom contact SmartThings device is opened.\");\n}"
  },
  {
    "intent": "When leaving the living room, turn off the Office Lamp device in ThingaOS hub.",
    "filter_code": "if (Linkdesk.leaveRoom.RoomName === \"living room\") {\n  if (ThingaOS.selectedDevice === \"Office Lamp\") {\n    Tantiv4.turnOnOff.setTurnOnOff(\"off\");\n  } else {\n    Tantiv4.turnOnOff.skip(\"Selected device is not Office Lamp.\");\n  }\n} else {\n  Tantiv4.turnOnOff.skip(\"Not leaving the living room.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp device when the IFTTT app button is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, occurring at 2020-07-08T04:17:06+05:00.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" &&\n    DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\" &&\n    DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\") {\n  Viva.turnDeviceOff.setdevice_address(\"Living Room Lamp\");\n} else {\n  Viva.turnDeviceOff.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the conference room light, named \"Conference Room Light\", is turned on through the iotty App, mute the smartphone to prevent distractions during meetings.",
    "filter_code": "if (Iottysmarthome.deviceOnOff.DeviceName === \"Conference Room Light\" && Iottysmarthome.deviceOnOff.Source === \"iotty App\" && Iottysmarthome.deviceOnOff.LightState === \"on\") {\n  AndroidDevice.muteDevice.skip(\"Muting smartphone for a meeting in the conference room.\");\n}"
  },
  {
    "intent": "When the Bedroom contact device in SmartThings is opened at any time, update the Apilio variable identified as \"FrontDoorStatus\" to toggle its current state between true and false.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"FrontDoorStatus\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Device is not Bedroom contact\");\n}"
  },
  {
    "intent": "When John Smith unlocks the Front Door at the San Diego beach house, then turn ON the Living Room Lights device.",
    "filter_code": "if (Augusthome.lockUnlockedBySpecificPerson.User === \"John Smith\" &&\n    Augusthome.lockUnlockedBySpecificPerson.LockName === \"Front Door\" &&\n    Augusthome.lockUnlockedBySpecificPerson.HouseName === \"San Diego beach house\") {\n  BrilliantNexus.devices.setStatus(\"ON\");\n} else {\n  BrilliantNexus.devices.skip(\"Conditions not met to turn ON the device.\");\n}"
  },
  {
    "intent": "Get a notification in the Microsoft Teams channel \"#general\" when a new top story is posted on Hacker News with more than 50 points and containing the keyword \"AI\", and send a message with the subject \"New Top Story on Hacker News\" and the body \"A new top story has been posted on Hacker News: {{title}} ({{url}}) by {{username}} with {{score}} points and {{comments_count}} comments\", marked as Important.",
    "filter_code": "if (HackerNews.newTopStory.Points > 50 && HackerNews.newTopStory.Title.includes(\"AI\")) {\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Top Story on Hacker News\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`A new top story has been posted on Hacker News: ${HackerNews.newTopStory.Title} (${HackerNews.newTopStory.StoryUrl}) by ${HackerNews.newTopStory.Username} with ${HackerNews.newTopStory.Points} points and ${HackerNews.newTopStory.CommentsCount} comments`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Does not meet the conditions.\");\n}"
  },
  {
    "intent": "When the button is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 09:00 and 17:00, cancel all open orders on Alpaca immediately.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 9 && hour <= 17) {\n  Alpaca.cancelOpenOrders.skip(\"Canceling all open orders as per button press at specified location and time.\");\n}"
  },
  {
    "intent": "Set the living room Nuheat thermostat to 22°C indefinitely when the \"Comfort\" button widget is pressed.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.ShareURL === \"https://ifttt.com/share/your_comfort_button_widget_url\") {\n  NVentNuheat.setTemperature.setThermostat(\"Living Room\");\n  NVentNuheat.setTemperature.setScale(\"Celsius\");\n  NVentNuheat.setTemperature.setSetpointTemperature(\"22\");\n  NVentNuheat.setTemperature.setDuration(\"indefinitely\");\n}"
  },
  {
    "intent": "Turn off all Philips Hue lights in the living room when the \"Goodnight\" routine is activated on Niko Home Control at 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (Nikohomecontrol.routineActivated.Routine === \"Goodnight\" && hour === 22 && minute === 0) {\n  Hue.turnOffAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When a user enters the living room, as detected by LinkDesk, turn on the TV device connected to ThingaOS Hub.",
    "filter_code": "if (Linkdesk.enterRoom.RoomName !== \"living room\") {\n  Tantiv4.turnOnOff.skip(\"Not entering the living room.\");\n} else if (Tantiv4.getDeviceByName(\"TV\") === null) {\n  Tantiv4.turnOnOff.skip(\"TV device not found in ThingaOS Hub.\");\n} else {\n  Tantiv4.turnOnOff.setDeviceName(\"TV\");\n  Tantiv4.turnOnOff.setTurnOnOff(true);\n}"
  },
  {
    "intent": "Disarm the \"Living Room Camera\" INSTAR camera alarm every day at 07:30.",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:30\";\nif (time.slice(-8) === targetTime) {\n  Instar.mDetectOff.setCamName(\"Living Room Camera\");\n} else {\n  Instar.mDetectOff.skip(\"Not the scheduled disarm time.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor device detects presence, as reported by SmartThings at any time, then turn on the Living Room ceiling fan device using Fanimation.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Fansync.onOff.setDevice(\"Living Room ceiling fan\");\n  Fansync.onOff.setOn(true);\n}"
  },
  {
    "intent": "Turn off the Nexus Home lights in the Living Room when John Smith locks the Front Door lock at the San Diego beach house.",
    "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  BrilliantNexus.lights.setStatus(\"OFF\");\n}"
  },
  {
    "intent": "When a new item titled \"Launch Day!\" is published in the \"ifttt Blog\" feed, share it to the \"#general\" channel in Microsoft Teams with the subject \"New Blog Post\" and the message body containing the entry title, author, and content. Set the message urgency to \"Important\".",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.EntryTitle === \"Launch Day!\") {\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"team_id\", \"channel_id\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Blog Post\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`New post by ${Feed.newFeedItem.EntryAuthor}: ${Feed.newFeedItem.EntryTitle}\\n\\n${Feed.newFeedItem.EntryContent}`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Feed or entry title does not match.\");\n}"
  },
  {
    "intent": "When you post a new photo to Instagram with the caption \"Company Update\" and it was taken after 08:00, send a message to the #general channel in Microsoft Teams with the subject \"New Company Post\" and the message body \"Check out our latest company update: http://instagr.am/p/CTGBw/\", marking the message as Important.",
    "filter_code": "if (Instagram.anyNewPhotoByYou.Caption === \"Company Update\" && Instagram.anyNewPhotoByYou.CreatedAt.hour() > 8) {\n  MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"your_team_id\", \"your_channel_id\");\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Company Post\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(`Check out our latest company update: ${Instagram.anyNewPhotoByYou.Url}`);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "If the Bedroom sensor device presence is no longer detected in SmartThings, then turn on the SpotCam alert automatically for the device with serial number S123456.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\" && !SmartthingsV2.newPresentSmartthings.ArrivedAt) {\n  Spotcam.turnOnAlert.setSn(\"S123456\");\n} else {\n  Spotcam.turnOnAlert.skip(\"Device presence detected or not Bedroom sensor.\");\n}"
  },
  {
    "intent": "When you post a new photo on Instagram with a caption like \"A cool photo\" and it's between 07:00 and 19:00, send the photo's short URL to the Discord channel #general with a message saying \"New photo posted: http://instagr.am/p/CTGBw/\" and allow @everyone mentions.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var caption = Instagram.anyNewPhotoByYou.Caption;\n  if (caption === \"A cool photo\") {\n    var url = Instagram.anyNewPhotoByYou.Url;\n    Discord.postMessageToChannel.setChannel(\"general\");\n    Discord.postMessageToChannel.setMessage(\"New photo posted: \" + url);\n    Discord.postMessageToChannel.setAllowableMentions(\"@everyone\");\n  } else {\n    Discord.postMessageToChannel.skip(\"Caption does not match.\");\n  }\n} else {\n  Discord.postMessageToChannel.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, disarm the Uplink Remote device named \"Office Security System\" if the button press occurs between 07:00 and 19:00.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (lat === \"37.82666360000001\" && lon === \"-122.42301220000003\" && hour >= 7 && hour < 19) {\n  Uplinkremote.armaction.setSerialNumber(\"Office Security System\");\n} else {\n  Uplinkremote.armaction.skip(\"Location or time does not match the disarm criteria.\");\n}"
  },
  {
    "intent": "When the security system is disarmed at John's Home between 06:00 and 22:00, as indicated by the Uplink Remote arm trigger event description \"Panel is Disarmed\", automatically turn on all Philips Hue lights in the living room.",
    "filter_code": "var hour = Uplinkremote.armtrigger.NotificationDate.hour();\nvar deviceName = Uplinkremote.armtrigger.DeviceName;\nvar eventDescription = Uplinkremote.armtrigger.EventDescription;\n\nif (deviceName === \"John's Home\" && eventDescription === \"Panel is Disarmed\" && hour >= 6 && hour <= 22) {\n  Hue.turnOnAllHue.setLights(\"living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the 'Welcome Home' Lutron scene when the Blue by ADT system is disarmed by the Master User, and turn on the 'Goodnight' Lutron scene when the system is armed away.",
    "filter_code": "if (Bluebyadt.issues.EventType === \"System Disarmed\" && Bluebyadt.issues.FormattedMessage.includes(\"Master User\")) {\n  LutronCasetaWireless.setScene(\"Welcome Home\");\n} else if (Bluebyadt.issues.EventType === \"System Armed Away\") {\n  LutronCasetaWireless.setScene(\"Goodnight\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, arm the Blink system named \"Home Security\" and send a notification with the share URL https://ifttt.com/share/McFwJfDH9Ns and a map image of the location http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667 to confirm the action was triggered at the occurred time 2020-07-08T04:17:06+05:00.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Blink.networkDisarm.setNetwork(\"Home Security\");\n  var notificationMessage = \"Armed Blink system at location: \" + DoButton.doButtonNewCommandCommon.LocationMapImageURL + \". Share URL: \" + DoButton.doButtonNewCommandCommon.ShareURL + \". Triggered at: \" + DoButton.doButtonNewCommandCommon.OccurredAt;\n  // Assuming there's a method to send notifications, replace this with actual method\n  // NotificationService.sendNotification(notificationMessage);\n} else {\n  Blink.networkDisarm.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Turn on the Nexus Home Lights device named \"Living Room Lamp\" when someone unlocks the August Lock named \"Front Door\" at the \"San Diego Beach House\".",
    "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\") {\n  BrilliantNexus.lights.setStatus(\"on\");\n} else {\n  BrilliantNexus.lights.skip(\"Lock or house does not match.\");\n}"
  },
  {
    "intent": "When an intrusion alert is detected at my Home location, blink the Living Room light 10 times with maximum brightness and a red color to maximize the stress effect on the burglar, even if the light is turned off.",
    "filter_code": "if (AnywareServices.intrusionAlert.Location === \"Home\") {\n  Lifx.blink.setNumberOFBlinks(\"10\");\n  Lifx.blink.setBrightness(\"Maximum\");\n  Lifx.blink.setColor(\"Red\");\n  Lifx.blink.setBlinkIfOff(\"Yes\");\n}"
  },
  {
    "intent": "When the security system is armed at John's Home, as indicated by the event description \"Panel is Armed\" from the Uplink Remote device, automatically turn off all lights in the living room and kitchen.",
    "filter_code": "if (Uplinkremote.armtrigger.EventDescription === \"Panel is Armed\" && Uplinkremote.armtrigger.DeviceName === \"John's Home\") {\n  Hue.turnOffAllHue.setLights([\"Living Room\", \"Kitchen\"]);\n}"
  },
  {
    "intent": "When the Bedroom sensor detects presence, turn on the Living Room ceiling fan.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Aisync.onOff.setDevice(\"Living Room ceiling fan\");\n  Aisync.onOff.setOnOff(\"on\");\n}"
  },
  {
    "intent": "When the Samsung SmartThings IoT sensor detects presence from the \"Living Room Motion Sensor\" device, share a custom voice alert with the Orion Group \"Family Alerts\" saying \"Someone has entered the living room\" to everyone in the group.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Living Room Motion Sensor\") {\n  Orion.sendVoiceMessage.setMessage(\"Someone has entered the living room\");\n  Orion.sendVoiceMessage.setGroup(\"Family Alerts\");\n  Orion.sendVoiceMessage.setUser(\"everyone\");\n} else {\n  Orion.sendVoiceMessage.skip(\"Device is not the Living Room Motion Sensor.\");\n}"
  },
  {
    "intent": "When motion is detected by the ASUS ZenEye camera named \"Front Door\" at any time, check for and install new firmware updates on the ASUS Router.",
    "filter_code": "var cameraName = Asuszeneye.asusMotion.CameraName;\nif (cameraName !== \"Front Door\") {\n  Asusrouter.checkNewFirmwareAndUpgrade.skip(\"Motion detected by a different camera.\");\n}"
  },
  {
    "intent": "Arm the \"Front Door Camera\" INSTAR camera alarm every day at 8:00 PM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (checkTime === targetTime) {\n  Instar.mDetectOn.setCamName(\"Front Door Camera\");\n} else {\n  Instar.mDetectOn.skip(\"Not the targeted time for arming the camera.\");\n}"
  },
  {
    "intent": "Arm the \"Home Security\" alarm system when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, which occurs between 07:00 and 22:00, and log the event with the share URL https://ifttt.com/share/McFwJfDH9Ns.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  var occurredAt = new Date(DoButton.doButtonNewCommandCommon.OccurredAt);\n  var hour = occurredAt.getHours();\n  if (hour >= 7 && hour < 22) {\n    Uplinkremote.armaction.setSerialNumber(\"Home Security\");\n    console.log(\"Arming Home Security alarm system. Share URL: \" + DoButton.doButtonNewCommandCommon.ShareURL);\n  } else {\n    Uplinkremote.armaction.skip(\"Outside of armable hours (7 AM to 10 PM).\");\n  }\n} else {\n  Uplinkremote.armaction.skip(\"Incorrect location.\");\n}"
  },
  {
    "intent": "Create a new link card in my \"Personal Notes\" notebook on Zoho Notebook with the notecard name set to the Entry Title from the RSS feed, the link URL set to the Entry Url, and add tags \"News\" and \"Updates\" whenever a new item is published in the \"ifttt Blog\" RSS feed.",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\") {\n  Notebook.createLinkCard.setNotecardName(Feed.newFeedItem.EntryTitle);\n  Notebook.createLinkCard.setLinkUrl(Feed.newFeedItem.EntryUrl);\n  Notebook.createLinkCard.setTags(\"News, Updates\");\n} else {\n  Notebook.createLinkCard.skip(\"The RSS feed is not from the 'ifttt Blog'.\");\n}"
  },
  {
    "intent": "Turn off the motion detection on the Wyze Cam device labeled \"Office Camera\" every weekday at 8:00 AM.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() === 8 && DateAndTime.everyWeekdayAt.CheckTime.minute() === 0) {\n  Wyzecam.turnOffAlarm.setSerializeDeviceInfo(\"Office Camera\");\n} else {\n  Wyzecam.turnOffAlarm.skip(\"Not the scheduled time for turning off motion detection.\");\n}"
  },
  {
    "intent": "Send me an email every day at 8:00 AM with the total number of INSTAR Cloud alarm uploads from the previous day.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar currentHour = currentTime.hour();\nif (currentHour !== 8) {\n  Instar.cloudAlarmCount.skip(\"Not 8:00 AM\");\n} else {\n  var yesterday = Meta.currentTime.yesterday();\n  var uploadsYesterday = Instar.cloudAlarmCount(yesterday);\n  Gmail.sendEmail.setSubject(\"INSTAR Cloud Alarm Uploads for \" + yesterday.format(\"MMMM d, yyyy\"));\n  Gmail.sendEmail.setMessage(\"There were \" + uploadsYesterday + \" INSTAR Cloud alarm uploads yesterday.\");\n}"
  },
  {
    "intent": "Open the garage door labeled \"Main Entrance\" when Sarah's Subaru enters the geo-circle named \"Home\".",
    "filter_code": "if (Bouncie.geoCircleEnter.CircleName === \"Home\" && Bouncie.geoCircleEnter.VehicleName === \"Sarah's Subaru\") {\n  Garadget.openDoor.setDoorId(\"Main Entrance\");\n} else {\n  Garadget.openDoor.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When a new note titled \"Today's Meeting Notes\" is created in the Evernote notebook \"Work Projects\" with tags \"meeting, work, important\", save it to Histre with the title \"Meeting Summary\", including the note body and public URL, under the note \"Key Takeaways from Today\".",
    "filter_code": "if (Evernote.newNoteInNotebook.Title === \"Today's Meeting Notes\"\n    && Evernote.newNoteInNotebook.Tags.includes(\"meeting\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"work\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"important\")) {\n  Histre.addNote.setTitle(\"Meeting Summary\");\n  Histre.addNote.setNote(Evernote.newNoteInNotebook.BodyHTML + \"\\nPublic URL: \" + Evernote.newNoteInNotebook.PublicUrl);\n  Histre.addNote.setUrl(Evernote.newNoteInNotebook.PublicUrl);\n} else {\n  Histre.addNote.skip(\"Note does not match the specified title or tags.\");\n}"
  },
  {
    "intent": "Upload any new photo posted by you on Instagram to Google Drive, using the photo's Source URL as the file URL and setting the filename to \"Instagram_Photo_{CreatedAt}\" where {CreatedAt} is the date and time the photo was taken, and save it in the \"/Photos/Instagram\" folder.",
    "filter_code": "GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nGoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(\"Instagram_Photo_\" + Instagram.anyNewPhotoByYou.CreatedAt);\nGoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"/Photos/Instagram\");"
  },
  {
    "intent": "Create a new Photo Card in my \"Personal Notebook\" within Zoho Notebook, named \"Instagram Capture\", using the image URL from my latest Instagram photo, and tag it with \"Social Media\" and \"Memories\".",
    "filter_code": "Notebook.createImageCard.setNotecardName(\"Instagram Capture\");\nNotebook.createImageCard.setImageUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nNotebook.createImageCard.setTags(\"Social Media, Memories\");\nNotebook.createImageCard.setNotebookName(\"Personal Notebook\");"
  },
  {
    "intent": "Open the Main Garage Door at Stark Industries HQ when Nick Fury, hosted by Tony Stark, finishes signing in between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Envoy.entryCreated.LocationName === \"Stark Industries HQ\" &&\n      Envoy.entryCreated.FullName === \"Nick Fury\" &&\n      Envoy.entryCreated.HostName === \"Tony Stark\") {\n    Garadget.openDoor.setDoorId(\"Main Garage Door\");\n  } else {\n    Garadget.openDoor.skip(\"Visitor details do not match the required criteria.\");\n  }\n} else {\n  Garadget.openDoor.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new post is published in the NAACP news, save the entry titled \"Launch Day!\" to Instapaper with the URL http://blog.ifttt.com/coming-soon, description \"Well here we are on, blah, blah...\", and title \"NAACP News\" in the folder \"News\" with the tags \"NAACP\" and \"News\".",
    "filter_code": "if (Naacp.newPostInNaacpNews.EntryTitle === \"Launch Day!\") {\n  Instapaper.saveItem.setUrl(Naacp.newPostInNaacpNews.EntryUrl);\n  Instapaper.saveItem.setDescription(Naacp.newPostInNaacpNews.EntryContent);\n  Instapaper.saveItem.setTitle(\"NAACP News\");\n  // Note: The folder and tags are not directly supported in the provided filter code methods.\n  // The following lines are commented out as they cannot be implemented with the given API.\n  // Instapaper.saveItem.setFolder(\"News\");\n  // Instapaper.saveItem.setTags([\"NAACP\", \"News\"]);\n}"
  },
  {
    "intent": "When the weather forecast for my location, Paris, calls for rain tomorrow, with a high temperature of 18°C and a low of 10°C, close my Living Room shutters in Domovea.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\"\n    && Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"18\"\n    && Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"10\") {\n  Domovea.shadeClose.setDeviceId(\"Living Room\");\n} else {\n  Domovea.shadeClose.skip(\"Conditions not met for closing shutters.\");\n}"
  },
  {
    "intent": "When the Logitech Pop button with the name \"Living Room\" and ID \"a0:e6:f8:8c:f5:33\" is pressed, and the battery level is above 50, turn on the device named \"Kitchen Light\" in domovea.",
    "filter_code": "if (LogitechPop.shortPress.Name === \"Living Room\" && LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && parseInt(LogitechPop.shortPress.Battery) > 50) {\n  Domovea.switchOn.setDeviceId(\"Kitchen Light\");\n} else {\n  Domovea.switchOn.skip(\"Conditions not met for turning on the Kitchen Light.\");\n}"
  },
  {
    "intent": "When the Litter-Robot waste drawer is full, as indicated by the \"Waste Drawer Full\" event type from my litter robot named \"My Litter Robot\", turn the TP-Link Kasa lights in the living room to fuschia (#C154C1) with a transition duration of 2 seconds.",
    "filter_code": "if (Whisker.lr3Events.EventType === \"Waste Drawer Full\" && Whisker.lr3Events.LitterRobotName === \"My Litter Robot\") {\n  Kasa.changeColorTemp.setAdvancedOptions(\"color:#C154C1; transition_duration:2000\");\n} else {\n  Kasa.changeColorTemp.skip(\"Litter-Robot waste drawer is not full or event type does not match.\");\n}"
  },
  {
    "intent": "Post a message to the #commute-alerts channel on Slack with the title \"Pink Line Alert: {{EntryTitle}}\" and the message \"{{EntryContent}}\" whenever there's an alert affecting the pink line during weekday mornings between 7:00 and 10:00 AM.",
    "filter_code": "var Hour = Meta.currentUserTime.hour();\nvar Day = Meta.currentUserTime.day();\n\n// Skip outside of 7-10am\nif (Hour < 7 || Hour > 10) {\n  Slack.postToChannel.skip(\"Outside of morning commuting hours\");\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 0) {\n  Slack.postToChannel.skip(\"Not a weekday\");\n}\n\n// Set the channel\nSlack.postToChannel.setChannel(\"#commute-alerts\");\n\n// Set the title\nSlack.postToChannel.setTitle(\"Pink Line Alert: \" + Cta.newOrangeLineAlert.AlertTitle);\n\n// Set the message\nSlack.postToChannel.setMessage(Cta.newOrangeLineAlert.AlertContent);"
  },
  {
    "intent": "When Twitch user \"Ninja\" follows a new channel, send a push notification with the message \"Ninja just followed a new channel: {channel_name}\" and log the channel information, including the channel name, logo URL, and follower count, to a Google Drive spreadsheet named \"Twitch Follows\" in the \"Twitch Tracking\" folder.",
    "filter_code": "if (Twitch.followedNewChannel.ChannelName !== \"Ninja\") {\n  IfNotifications.sendNotification.skip(\"The trigger was not from Ninja's follows.\");\n}\n\nvar message = `Ninja just followed a new channel: ${Twitch.followedNewChannel.ChannelName}`;\nIfNotifications.sendNotification.setMessage(message);\n\n// Log to Google Drive Spreadsheet\nGoogleDrive.appendRowToSpreadsheet.setSpreadsheetName(\"Twitch Follows\");\nGoogleDrive.appendRowToSpreadsheet.setFolder(\"Twitch Tracking\");\nvar rowData = [\n  Twitch.followedNewChannel.ChannelName,\n  Twitch.followedNewChannel.ChannelLogo,\n  Twitch.followedNewChannel.FollowerCount\n];\nGoogleDrive.appendRowToSpreadsheet.addRow(rowData);"
  },
  {
    "intent": "Send a notification when the CO2 level from the Huma-i device named \"Living Room Air Quality Monitor\" exceeds 1000 ppm, which is the average for 5 minutes, with a message \"High CO2 levels detected in the living room\".",
    "filter_code": "if (HumaI.humaCarbonDioxideAlertTrigger.Co2 > 1000 && HumaI.humaCarbonDioxideAlertTrigger.DeviceName === \"Living Room Air Quality Monitor\") {\n  IfNotifications.sendNotification.setMessage(\"High CO2 levels detected in the living room\");\n} else {\n  IfNotifications.sendNotification.skip(\"CO2 level is not exceeding 1000 ppm or device name does not match.\");\n}"
  },
  {
    "intent": "When the pollen count in New York rises above 7.2, as reported by Weather Underground at 6:00 AM, send a notification with the message \"High pollen alert: 8.1\" to my phone if the current temperature is above 18°C and the weather condition is Sunny.",
    "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 7.2 &&\n    Meta.currentUserTime.hour() === 6 &&\n    Weather.currentPollenCountRisesAbove.TempCelsius > 18 &&\n    Weather.currentPollenCountRisesAbove.Condition === \"Sunny\") {\n  IfNotifications.sendNotification.setMessage(\"High pollen alert: \" + Weather.currentPollenCountRisesAbove.PollenCount);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met for high pollen alert.\");\n}"
  },
  {
    "intent": "When the current weather condition in New York is Snow and the temperature is below 32°F, blink my Living Room LIFX lights 3 times with a soft blue color at 50% brightness, even if they are turned off.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Snow\" && Weather.currentConditionIs.TempFahrenheit < 32) {\n  Lifx.blink.setNumberOfBirths(\"3\");\n  Lifx.blink.setAdvancedOptions(\"color: blue saturation:0.5; brightness: 50%\");\n  Lifx.blink.setBlinkIfOff(\"Yes\");\n} else {\n  Lifx.blink.skip(\"Condition is not snow or temperature is above 32°F.\");\n}"
  },
  {
    "intent": "Send a notification when the VOC level from my Huma-i device named \"Living Room Sensor\" exceeds 500 AQI, which is the average for 5 minutes, and include a message saying \"High VOC levels detected in the living room\".",
    "filter_code": "if (HumaI.humaVocAlertTrigger.DeviceName === \"Living Room Sensor\" && HumaI.humaVocAlertTrigger.Voc > 500) {\n  IfNotifications.sendNotification.setMessage(\"High VOC levels detected in the living room\");\n} else {\n  IfNotifications.sendNotification.skip(\"VOC level is not exceeded or device name does not match.\");\n}"
  },
  {
    "intent": "Send a notification with the message \"AQI level exceeded\" when the Huma-i device named \"Living Room Air Quality Monitor\" exceeds the threshold of 50 AQI for 5 minutes, between 07:00 and 19:00, including the current PM2.5 level and temperature.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var deviceName = HumaI.humaDustLevelAlertTrigger.DeviceName;\n  var threshold = HumaI.humaDustLevelAlertTrigger.Threshold;\n  var pm25 = HumaI.humaDustLevelAlertTrigger.Pm2;\n  var temperature = HumaI.humaDustLevelAlertTrigger.Temperature;\n\n  if (deviceName === \"Living Room Air Quality Monitor\" && threshold > 50) {\n    var message = `AQI level exceeded. Current PM2.5: ${pm25}, Temperature: ${temperature}`;\n    IfNotifications.sendNotification.setMessage(message);\n  } else {\n    IfNotifications.sendNotification.skip(\"Conditions not met.\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Send a notification when the PM2.5 level from the Living Room Huma-i device exceeds 50 μg/m³, which is the average for 5 minutes, with a message including the current PM2.5 level and the device name.",
    "filter_code": "if (HumaI.humaDustLevelAlertTrigger.Pm2 > 50 && HumaI.humaDustLevelAlertTrigger.RoomName === \"Living Room\") {\n  IfNotifications.sendNotification.setMessage(\"The current PM2.5 level is \" + HumaI.humaDustLevelAlertTrigger.Pm2 + \" μg/m³ from the \" + HumaI.humaDustLevelAlertTrigger.DeviceName + \" device.\");\n} else {\n  IfNotifications.sendNotification.skip(\"PM2.5 level is below threshold or not from Living Room device.\");\n}"
  },
  {
    "intent": "When the Wyze camera named \"Living Room Camera\" detects sound, send an SMS with the message \"Sound alarm detected at Living Room Camera\" from the sender ID \"WyzeAlert\" to the recipient's phone number \"+1234567890\".",
    "filter_code": "if (Wyzecam.soundTrigger.SoundDetected && Wyzecam.soundTrigger.SerializeDeviceInfo === \"Living Room Camera\") {\n  Routee.sendSms.setMessage(\"Sound alarm detected at Living Room Camera\");\n  Routee.sendSms.setFrom(\"WyzeAlert\");\n  Routee.sendSms.setTo(\"+1234567890\");\n} else {\n  Routee.sendSms.skip(\"Conditions not met for sending SMS.\");\n}"
  },
  {
    "intent": "When a leak alert is detected at my Vacation home between 07:00 and 22:00, change the color of all my Living Room lights to red (#FF0000).",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Phyn.alertRaised.HomeName === \"Vacation home\" && Phyn.alertRaised.AlertType === \"Leak alert\" && hour >= 7 && hour < 22) {\n  if (hour >= 7 && hour < 22) {\n    Hue.setColorAllHue.setColor(\"#FF0000\");\n  } else {\n    Hue.setColorAllHue.skip(\"Outside of active hours (7 AM to 10 PM).\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Alert not for Vacation home or not a leak alert.\");\n}"
  },
  {
    "intent": "When a smoke alarm is detected on the Wyze camera in the living room at any time, immediately raise an alarm in Zuluhood for the home location and notify all tribe members and watchers with the message \"Smoke alarm detected\", allowing them to communicate and check on each other's status.",
    "filter_code": "if (Wyzecam.smokeTrigger.SmokeDetected === \"Smoke alarm detected on your wyze camera.\") {\n  Zuluhood.raiseAlarm.setHome(\"home location\");\n  Zuluhood.raiseAlarm.setType(\"Smoke Alarm\");\n  Zuluhood.raiseAlarm.setMessage(\"Smoke alarm detected\");\n}"
  },
  {
    "intent": "Get a notification on your phone when tomorrow's weather forecast in New York calls for rain, with a high temperature of 60°F and a low of 45°F, and receive an SMS from the Routee sender ID \"WeatherAlert\" to the recipient number \"+1234567890\" with the message \"Tomorrow's forecast: Rain, High: 60°F, Low: 45°F\".",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Routee.sendSms.setFrom(\"WeatherAlert\");\n  Routee.sendSms.setTo(\"+1234567890\");\n  Routee.sendSms.setMessage(\"Tomorrow's forecast: Rain, High: 60°F, Low: 45°F\");\n} else {\n  Routee.sendSms.skip(\"Tomorrow's weather forecast does not match the conditions.\");\n}"
  },
  {
    "intent": "Send an SMS with the message \"Good morning, have a great day!\" from sender ID \"OfficeBot\" to recipient \"+1234567890\" every Monday, Wednesday, and Friday at 08:00.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (DateAndTime.everyWeekdayAt.CheckTime.getHours() === 8 &&\n      DateAndTime.everyWeekdayAt.CheckTime.getMinutes() === 0) {\n    Routee.sendSms.setMessage(\"Good morning, have a great day!\");\n    Routee.sendSms.setFrom(\"OfficeBot\");\n    Routee.sendSms.setTo(\"+1234567890\");\n  } else {\n    Routee.sendSms.skip(\"Not the correct time.\");\n  }\n} else {\n  Routee.sendSms.skip(\"Not the correct day.\");\n}"
  },
  {
    "intent": "When the Bedroom contact sensor detects that the door is opened at 3:00 PM, send a voice message to everyone in the #office-group saying \"The bedroom door has been opened\".",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\" && Meta.currentUserTime.hour() === 15) {\n  Orion.sendVoiceMessage.setMessage(\"The bedroom door has been opened\");\n  Orion.sendVoiceMessage.setGroup(\"#office-group\");\n  Orion.sendVoiceMessage.setUser(\"everyone\");\n} else {\n  Orion.sendVoiceMessage.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Home Connect Washer cycle is complete and it's between 07:00 and 19:00, blink all Philips Hue lights in the living room to notify that the Christmas table cloth is ready to go in the dryer.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var location = \"living room\";\n  Hue.blinkAllHue.setLights(location);\n} else {\n  Hue.blinkAllHue.skip(\"Outside of notification hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the Scout Alarm is triggered while in Away mode, immediately notify my whole Tribe and all Watchers through Zuluhood, including a message with the formatted text \"Active Alarm in Away mode\" and the details of who triggered it, such as \"Dave via IFTTT\", so we can quickly assess the situation and respond accordingly.",
    "filter_code": "if (Scoutalarm.modeAlarming.Event === \"Alarmed\" && Scoutalarm.modeAlarming.Name === \"Away\") {\n  var message = Scoutalarm.modeAlarming.FormattedText + \" triggered by \" + Scoutalarm.modeAlarming.By;\n  Zuluhood.raiseAlarm.setHome(\"My Home\").setType(\"Alert\").setMessage(message);\n} else {\n  Zuluhood.raiseAlarm.skip(\"Not in Away mode or not alarmed\");\n}"
  },
  {
    "intent": "When the Arlo camera named \"48B14C740AD5E\" detects motion at any time, immediately notify my whole Tribe and all my Watchers through Zuluhood, and then raise an alarm for my home selected as \"My Primary Residence\" with the type set to \"Security Breach\".",
    "filter_code": "if (Arlo.motion.DeviceName === \"48B14C740AD5E\") {\n  Zuluhood.notifyTribeAndWatchers(\"Motion detected by Arlo camera!\");\n  Zuluhood.raiseAlarm.setHome(\"My Primary Residence\");\n  Zuluhood.raiseAlarm.setType(\"Security Breach\");\n  Zuluhood.raiseAlarm.skip();\n}"
  },
  {
    "intent": "When the Abode alarm is triggered, specifically for a \"Fire Alarm Triggered\" event at the device named \"abode Gateway Alarm\", immediately notify my whole Tribe and all Watchers on Zuluhood, and then raise an alarm of type \"Security Alert\" for my home, allowing everyone to check in and confirm who is safe and who is heading to check on our home.",
    "filter_code": "if (Abode.alarmTriggered.AlarmType === \"Fire Alarm Triggered\" && Abode.alarmTriggered.DeviceName === \"abode Gateway Alarm\") {\n  Zuluhood.raiseAlarm.setHome(\"My Home\");\n  Zuluhood.raiseAlarm.setType(\"Security Alert\");\n} else {\n  Zuluhood.raiseAlarm.skip(\"Not a fire alarm triggered at abode Gateway Alarm.\");\n}"
  },
  {
    "intent": "When a \"Fire\" alarm is raised at home, immediately notify my whole Tribe and all Watchers in Zuluhood with the formatted message \"Medical Alarm\" and raise an alarm at my selected home.",
    "filter_code": "if (Bluebyadt.alarm.EventType === \"Fire\") {\n  if (Zuluhood.raiseAlarm.setHome(\"selected_home\").setType(\"Medical Alarm\").setMessage(Bluebyadt.alarm.FormattedMessage)) {\n    Zuluhood.notifyTribeAndWatchers(Bluebyadt.alarm.FormattedMessage);\n  } else {\n    Zuluhood.raiseAlarm.skip(\"Failed to set home or type for alarm\");\n  }\n} else {\n  Zuluhood.raiseAlarm.skip(\"Alarm type is not 'Fire'\");\n}"
  },
  {
    "intent": "When a CO alarm is detected on the \"Living Room Wyze Camera\" at any time, immediately raise an alarm in Zuluhood for the \"Main Home\" and notify all watchers with the message \"CO alarm detected\", allowing everyone to check in and confirm their safety.",
    "filter_code": "if (Wyzecam.coTrigger.CoDetected === \"CO alarm detected on your wyze camera.\" && Wyzecam.coTrigger.serialize_device_info === \"Living Room Wyze Camera\") {\n  Zuluhood.raiseAlarm.setHome(\"Main Home\");\n  Zuluhood.raiseAlarm.setType(\"CO Alarm\");\n  Zuluhood.raiseAlarm.skip(null);\n}"
  },
  {
    "intent": "When the button on your phone or smartwatch is pressed at a location with latitude 37.8267 and longitude -122.4230, trigger your iRobot to clean the living room.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Irobot.cleanByRoom.setroom_info(\"living room\");\n} else {\n  Irobot.cleanByRoom.skip(\"Location does not match the specified coordinates.\");\n}"
  },
  {
    "intent": "Record an NPR story from the \"News\" category, with a title like \"From The 'Inside Out,' A Lively Look Inside A Young Mind\", and upload it to Unforgettable Me as a new entry named \"NPRNewsStory\" when the story is published between 07:00 and 19:00, including the story's excerpt and URL in the body of the entry.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  var category = Npr.newsStoryPublished.Category;\n  var title = Npr.newsStoryPublished.StoryTitle;\n  var excerpt = Npr.newsStoryPublished.StoryExcerpt;\n  var url = Npr.newsStoryPublished.StoryURL;\n\n  if (category === \"News\" && title.includes(\"From The 'Inside Out,' A Lively Look Inside A Young Mind\")) {\n    var body = {\n      \"title\": title,\n      \"excerpt\": excerpt,\n      \"url\": url,\n      \"start_date\": new Date().toISOString(),\n      \"end_date\": new Date().toISOString()\n    };\n\n    UnforgettableMe.uploadData.setBody(JSON.stringify(body));\n    UnforgettableMe.uploadData.setAugmenterName(\"NPRNewsStory\");\n  } else {\n    UnforgettableMe.uploadData.skip(\"Does not match the desired category or title.\");\n  }\n} else {\n  UnforgettableMe.uploadData.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new story is published by NPR in the \"Politics\" category, send a message to the Telegram chat \"#news_updates\" with the story title, excerpt, and URL, including a web page preview.",
    "filter_code": "if (Npr.newsStoryPublished.Category === \"Politics\") {\n  var messageText = \"<b>\" + Npr.newsStoryPublished.StoryTitle + \"</b><br>\" + Npr.newsStoryPublished.StoryExcerpt + \"<br><a href='\" + Npr.newsStoryPublished.StoryURL + \"'>Read more</a>\";\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Story is not in the Politics category.\");\n}"
  },
  {
    "intent": "Send a daily email digest at 08:00 to my inbox with the title \"NPR Daily News\" and a message containing the story title, excerpt, and URL, but only for stories in the \"People & Places\" category that were published between 05:00 and 20:00, with the item URL set to the story's original link.",
    "filter_code": "var hour = Npr.newsStoryPublished.PublishedAt.hour();\nvar category = Npr.newsStoryPublished.Category;\nif (category === \"People & Places\" && hour >= 5 && hour <= 20) {\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendDailyEmail.setTitle(\"NPR Daily News\");\n  var message = \"<b>\" + Npr.newsStoryPublished.StoryTitle + \"</b><br/>\" + Npr.newsStoryPublished.StoryExcerpt + \"<br/><a href='\" + Npr.newsStoryPublished.StoryURL + \"'>Read more</a>\";\n  EmailDigest.sendDailyEmail.setMessage(message);\n  EmailDigest.sendDailyEmail.setUrl(Npr.newsStoryPublished.StoryURL);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Does not match category or publication time.\");\n}"
  },
  {
    "intent": "When a new story is published by NPR in the category of \"Politics\" and the story's title contains the keyword \"Election\", automatically post the story's title, excerpt, and URL to the Slack channel \"#news-updates\" with the message \"New politics story from NPR: {{story_title}} - {{story_excerpt}} - {{story_url}}\" and include a title \"NPR Politics Update\" that links to the story.",
    "filter_code": "if (Npr.newsStoryPublished.Category === \"Politics\" && Npr.newsStoryPublished.StoryTitle.includes(\"Election\")) {\n  Slack.postToChannel.setMessage(`New politics story from NPR: ${Npr.newsStoryPublished.StoryTitle} - ${Npr.newsStoryPublished.StoryExcerpt} - ${Npr.newsStoryPublished.StoryURL}`);\n  Slack.postToChannel.setTitle(\"NPR Politics Update\");\n  Slack.postToChannel.setTitleUrl(Npr.newsStoryPublished.StoryURL);\n} else {\n  Slack.postToChannel.skip(\"Story does not match the filter criteria.\");\n}"
  },
  {
    "intent": "When a new story is published by NPR in the \"News\" category, automatically save it to my iOS reading list with the title of the story, the URL of the story, and a preview text that includes the first 50 characters of the story excerpt.",
    "filter_code": "if (Npr.newsStoryPublished.Category === \"News\") {\n  IosReadingList.createReadingListItem.setTitle(Npr.newsStoryPublished.StoryTitle);\n  IosReadingList.createReadingListItem.setUrl(Npr.newsStoryPublished.StoryURL);\n  var previewText = Npr.newsStoryPublished.StoryExcerpt.substring(0, 50);\n  IosReadingList.createReadingListItem.setPreviewText(previewText);\n} else {\n  IosReadingList.createReadingListItem.skip(\"Story is not in the News category.\");\n}"
  },
  {
    "intent": "Withdraw £5 from the \"Emergency Fund\" pot every day at 8:00 AM.",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar pot = \"Emergency Fund\";\nvar amount = \"5\";\n\nif (hour === 8) {\n  Monzo.potWithdraw.setPot(pot);\n  Monzo.potWithdraw.setAmount(amount);\n} else {\n  Monzo.potWithdraw.skip(\"Not 8:00 AM\");\n}"
  },
  {
    "intent": "When the weather condition is \"Rain\" in London, move £10 from my \"Emergency Fund\" pot to my main account.",
    "filter_code": "if (Weather.currentConditionIs.Condition !== \"Rain\" || Weather.currentConditionIs.Location !== \"London\") {\n  Monzo.potWithdraw.skip(\"Conditions not met: weather is not rain in London.\");\n} else {\n  Monzo.potWithdraw.setAmount(\"10\");\n  Monzo.potWithdraw.setPot(\"Emergency Fund\");\n}"
  },
  {
    "intent": "Every day at 8am, calculate the total of today's date by adding the day, month, and year (for example, for May 24th, 2019, it would be 24 + 5 + 19 = 48), then deposit this amount in pence into the \"Savings\" Pot on my Monzo account.",
    "filter_code": "var momentObject = Meta.currentUserTime;\nvar date_of_month = momentObject.date();\nvar month = momentObject.month() + 1; // Months are 0-based in Moment.js\nvar year = Number(momentObject.format(\"YY\")); // Get the last two digits of the year\n\n// Calculate the deposit amount by adding the day, month, and year\nvar depositAmountInPence = date_of_month + month + year;\nvar depositAmountInGBP = depositAmountInPence / 100;\n\n// Set the amount to deposit into the \"Savings\" Pot\nMonzo.potDeposit.setAmount(depositAmountInGBP.toString());"
  },
  {
    "intent": "Save £1 in my \"Holiday Fund\" pot on Monzo every day I achieve my 10000 step goal on Fitbit.",
    "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Monzo.potDeposit.setPot(\"Holiday Fund\");\n  Monzo.potDeposit.setAmount(\"1\");\n} else {\n  Monzo.potDeposit.skip(\"Did not achieve the step goal of 10000 steps.\");\n}"
  },
  {
    "intent": "When the temperature in London goes above 22 degrees Celsius, save £3 into my Summer Savings Pot on Monzo.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius > 22) {\n  Monzo.potDeposit.setAmount(\"3\");\n  Monzo.potDeposit.skip();\n} else {\n  Monzo.potDeposit.skip(\"Temperature is not above 22 degrees Celsius.\");\n}"
  },
  {
    "intent": "When the temperature in London drops below 10 degrees Celsius, deposit £2 into my Savings Pot on Monzo.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 10) {\n  Monzo.potDeposit.setAmount(\"2\");\n  Monzo.potDeposit.skip();\n}"
  },
  {
    "intent": "Every day at 12:00 AM, deposit an amount equal to the current day of the year in pence into my \"Savings\" pot on Monzo. For example, on January 1st, deposit 1p, on January 2nd, deposit 2p, and so on, until December 31st when you would deposit 365p (£3.65).",
    "filter_code": "var day_of_year = Meta.currentUserTime.format('DDD');\nvar amount = parseInt(day_of_year);\nMonzo.potDeposit.setAmount(amount / 100);\nMonzo.potDeposit.skip(\"Not depositing into Savings pot\");\nif (Meta.currentUserTime.hour() === 0) {\n  Monzo.potDeposit.setPot(\"Savings\");\n}"
  },
  {
    "intent": "When I complete a cycling or running activity on Strava with a distance of at least 10 meters, reward me by withdrawing 1p from my \"Rainy Day\" pot on Monzo.",
    "filter_code": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar activityType = Strava.newActivityByYou.ActivityType;\nif (distance >= 10 && (activityType === \"Ride\" || activityType === \"Run\")) {\n  var amount = (distance / 10) * 0.01; // Calculate the reward amount based on distance\n  Monzo.potWithdraw.setPot(\"Rainy Day\");\n  Monzo.potWithdraw.setAmount(amount.toFixed(2));\n} else {\n  Monzo.potWithdraw.skip(\"Activity distance is less than 10 meters or not a cycling/running activity.\");\n}"
  },
  {
    "intent": "When the temperature in London drops below 5 degrees Celsius, save £1 into my Savings Pot on Monzo.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5) {\n  Monzo.potDeposit.setAmount(\"1\");\n  Monzo.potDeposit.setPot(\"Savings Pot\");\n} else {\n  Monzo.potDeposit.skip(\"Temperature is not below 5 degrees Celsius.\");\n}"
  },
  {
    "intent": "Get a notification with the title \"New Harry Potter Story\" and the message \"Check out the latest story from MuggleNet: {{EntryTitle}}\" whenever a new story is published in the MuggleNet RSS feed, including a link to the full story at {{EntryUrl}} and an image from the story at {{EntryImageUrl}}, sent between 07:00 and 22:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  IfNotifications.sendRichNotification\n    .setTitle(\"New Harry Potter Story\")\n    .setMessage(\"Check out the latest story from MuggleNet: \" + Feed.newFeedItem.EntryTitle)\n    .setLinkUrl(Feed.newFeedItem.EntryUrl)\n    .setImageUrl(Feed.newFeedItem.EntryImageUrl);\n} else {\n  IfNotifications.sendRichNotification.skip(\"Outside of notification hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "On April 22nd every year, at 12:00 PM, boost £10 to my child, Emily's, Give pot with the description \"Earth Day Donation\" so we can choose an environmental charity to donate to together.",
    "filter_code": "if (DateAndTime.everyYearOn.CheckTime.getMonth() === 3 && DateAndTime.everyYearOn.CheckTime.getDate() === 22 && DateAndTime.everyYearOn.CheckTime.getHours() === 12) {\n  Roostermoney.boost.setAmount(\"10\");\n  Roostermoney.boost.setPot(\"Give pot\");\n  Roostermoney.boost.setDescription(\"Earth Day Donation\");\n  Roostermoney.boost.setChild(\"Emily\");\n} else {\n  Roostermoney.boost.skip(\"Not April 22nd at 12:00 PM.\");\n}"
  },
  {
    "intent": "On November 20th every year, boost £10 to my child, Emily's, Give pot with the description \"International Children's Day donation\" so we can choose a children's charity to donate to together.",
    "filter_code": "if (DateAndTime.everyYearOn.CheckTime.getMonth() === 10 && DateAndTime.everyYearOn.CheckTime.getDate() === 20) {\n  Roostermoney.boost.setAmount(\"10\");\n  Roostermoney.boost.setPot(\"Give pot\");\n  Roostermoney.boost.setDescription(\"International Children's Day donation\");\n  Roostermoney.boost.setChild(\"Emily\");\n} else {\n  Roostermoney.boost.skip(\"Not November 20th\");\n}"
  },
  {
    "intent": "When my child reaches their daily step goal of 10000 steps on Fitbit, boost their Give pot by £10, assigning it to the \"Charity Fund\" pot with the description \"Daily Step Goal Reward for Charity\", and apply this reward to my child, Emily.",
    "filter_code": "if (Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Roostermoney.boost.setAmount(\"10\");\n  Roostermoney.boost.setPot(\"Charity Fund\");\n  Roostermoney.boost.setDescription(\"Daily Step Goal Reward for Charity\");\n  Roostermoney.boost.child = \"Emily\";\n}"
  },
  {
    "intent": "When the sunrise is at 6:00 AM in New York City and the current weather condition is Sunny with a temperature of 72°F, turn on my WeMo Coffeemaker device named \"Kitchen Coffee\" to start brewing a fresh pot of coffee.",
    "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 &&\n    Weather.sunRises.Condition === \"Sunny\" &&\n    Weather.sunRises.TempFahrenheit === \"72\" &&\n    location === \"New York City\") {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"start\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "Save $5 toward my Summer Vacation goal every time I reach my daily step goal of 10,000 steps on Fitbit.",
    "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Daily step goal of 10,000 steps not reached.\");\n}"
  },
  {
    "intent": "When you press the button widget at a location like 37.8267, -122.4230, send a message to the #commute-delays Slack channel saying \"Running late due to traffic, will arrive soon\" along with a map image of your current location.",
    "filter_code": "Slack.postToChannel.setChannel(\"#commute-delays\");\nSlack.postToChannel.setMessage(\"Running late due to traffic, will arrive soon\");\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar mapImageUrl = \"http://maps.google.com/maps/api/staticmap?center=\" + latitude + \",\" + longitude + \"&zoom=15&size=400x200&maptype=roadmap&sensor=false&markers=color:red|\" + latitude + \",\" + longitude;\nSlack.postToChannel.setImageUrl(mapImageUrl);"
  },
  {
    "intent": "When a new message is posted in the #general channel on Discord after 08:00 and before 18:00, and the message is pinned by username123, re-post the message contents, including any links or images, to the #announcements channel on Slack with the title \"Important Update\" and a link back to the original Discord message.",
    "filter_code": "if (Discord.newMessageInChannel.Channel === \"#general\"\n    && Discord.newMessageInChannel.Author === \"username123\"\n    && Discord.newMessageInChannel.CreatedAt.hour() >= 8\n    && Discord.newMessageInChannel.CreatedAt.hour() < 18\n    && Discord.newMessageInChannel.Message.includes(\"pinned\")) {\n  Slack.postToChannel.setMessage(Discord.newMessageInChannel.Message);\n  Slack.postToChannel.setTitle(\"Important Update\");\n  Slack.postToChannel.setTitleUrl(Discord.newMessageInChannel.LinkToMessage);\n  Slack.postToChannel.setImageUrl(null); // No image URL provided in the intent\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the \"Washing machine\" Lyric Wi-Fi water leak and freeze detector detects a leak, turn on the \"Living Room\" lights and set their color to Blue (#0000FF).",
    "filter_code": "if (HoneywellLyric.waterLeak.DeviceName === \"Washing machine\") {\n  PhilipsHue.setColorAllHue.skip(\"Not the Washing machine detector\");\n} else {\n  PhilipsHue.setColorAllHue.setLights(\"Living Room\");\n  PhilipsHue.setColorAllHue.setColor(\"#0000FF\");\n}"
  },
  {
    "intent": "When a new story is published by the WWF on their RSS feed at https://www.wwf.org.uk/feed, with an entry title containing the keyword \"conservation\" and an entry author named \"WWF Official\", save the article to my Pocket queue with the URL of the entry, tags \"WWF, conservation, wildlife\", so I can read it later at my leisure.",
    "filter_code": "if (Feed.newFeedItem.EntryTitle.includes(\"conservation\") && Feed.newFeedItem.EntryAuthor === \"WWF Official\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"WWF, conservation, wildlife\");\n} else {\n  Pocket.readItLater.skip(\"Entry title does not contain 'conservation' or entry author is not 'WWF Official'\");\n}"
  },
  {
    "intent": "Post a status message \"Hello community, don't forget our monthly meetup!\" to the Facebook Page every month on the 15th at 10:00 AM to remind followers of the upcoming event and encourage feedback.",
    "filter_code": "if (DateAndTime.everyMonthOnThe.month_day !== \"15\" || DateAndTime.everyMonthOnThe.time !== \"10:00 AM\") {\n  FacebookPages.createStatusMessagePage.skip(\"Not the scheduled time for the monthly reminder.\");\n} else {\n  FacebookPages.createStatusMessagePage.setMessage(\"Hello community, don't forget our monthly meetup!\");\n}"
  },
  {
    "intent": "When a new systemwide service alert is posted on the King County Metro between 7:00 AM and 10:00 AM, send a message to the #commute-alerts channel on Slack with the title \"Metro Service Alert\" and the message \"Transit Alert: $(EntryTitle) - Check $(EntryUrl) for details\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\n\n// Skip outside of 7-10am\nif (hour < 7 || hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\");\n}\n\n// Set message and title for the Slack post\nSlack.postToChannel.setMessage(\"Transit Alert: \" + KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryTitle + \" - Check \" + KingCountyMetro.newMetroAlertFromKingCountyMetro.EntryUrl + \" for details\");\nSlack.postToChannel.setTitle(\"Metro Service Alert\");\n\n// Set channel to #commute-alerts"
  },
  {
    "intent": "Send a notification from the IFTTT app when there's a service alert on the Rapid Ride C line between 7:00 AM and 10:00 AM with the message \"Rapid Ride C Line Alert: Launch Day! - Well here we are on, blah, blah...\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar title = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle;\nvar content = KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml;\n\nif (hour >= 7 && hour < 10) {\n  IfNotifications.sendNotification.setMessage(\"Rapid Ride C Line Alert: \" + title + \" - \" + content);\n} else {\n  IfNotifications.sendNotification.skip(\"Not during the morning commute\");\n}"
  },
  {
    "intent": "Send a notification to my device when a new service alert is posted on the King County Metro channel for the Rapid Ride E line between 7:00 AM and 10:00 AM or between 5:00 PM and 7:00 PM, including the alert title, URL, content, and publication date in the message.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar title = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryTitle;\nvar url = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryUrl;\nvar content = KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml;\nvar published = KingCountyMetro.newServiceAlertOnRapidRideALine.EntryPublished;\n\n// Skip outside of 7-10am and 5-7pm\nif (hour < 7 || (hour > 10 && hour < 17) || hour > 19) {\n  IfNotifications.sendNotification.skip(\"Outside of commuting hours\");\n} else {\n  var message = \"New Service Alert: \" + title + \"\\nURL: \" + url + \"\\nContent: \" + content + \"\\nPublished: \" + published;\n  IfNotifications.sendNotification.setMessage(message);\n}"
  },
  {
    "intent": "Post a message to the #commute-alerts channel on Slack with the title \"Rapid Ride D Service Alert\" and the message \"There is a service alert on Rapid Ride D line: {{EntryContent}}\" whenever a new service alert is published on the King County Metro between 7:00 AM and 10:00 AM.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour < 7 || hour > 10) {\n  Slack.postToChannel.skip(\"Outside of commuting hours\");\n}\nSlack.postToChannel.setMessage(\"There is a service alert on Rapid Ride D line: \" + KingCountyMetro.newServiceAlertOnRapidRideALine.ContentHtml);\nSlack.postToChannel.setTitle(\"Rapid Ride D Service Alert\");\nSlack.postToChannel.setChannel(\"#commute-alerts\");"
  },
  {
    "intent": "Start the Home Connect Dishwasher when the electricity price in West Denmark is below 150 DKK per kWh.",
    "filter_code": "if (TrueEnergyDK.electricityPriceCheap.Region === \"West Denmark\" && parseFloat(TrueEnergyDK.electricityPriceCheap.Price) < 150) {\n  // No action needed, let the dishwasher turn on\n} else {\n  HcDishwasher.dishwasherTurnOn.skip(\"Electricity price is not below 150 DKK per kWh in West Denmark.\");\n}"
  },
  {
    "intent": "When you press the button widget on your phone between 07:00 and 19:00, prioritize the internet connection for the device named \"Office Laptop\" on your TP-Link network for a duration of 2 hours.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  TplinkRouter.prioritizeDevice.setDeviceName(\"Office Laptop\");\n  TplinkRouter.prioritizeDevice.setDurationOfPriority(\"2 hours\");\n} else {\n  TplinkRouter.prioritizeDevice.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Prioritize the internet connection for my Arlo camera named 48B14C740AD5E on my TP-Link Router for 30 minutes every time a motion event is detected, so I can immediately review what triggered the alert.",
    "filter_code": "if (Arlo.motion.DeviceName === \"48B14C740AD5E\") {\n  TplinkRouter.prioritizeDevice.setDurationOfPriority(30);\n  TplinkRouter.prioritizeDevice.setDeviceName(\"48B14C740AD5E\");\n} else {\n  TplinkRouter.prioritizeDevice.skip(\"Arlo camera not named 48B14C740AD5E\");\n}"
  },
  {
    "intent": "Prioritize the internet connection for my Arlo device named 48B14C740AD5E on the TP-Link Router for 30 minutes every time a sound event is detected, so I can immediately check what triggered the alert.",
    "filter_code": "if (Arlo.audio.DeviceName === \"48B14C740AD5E\") {\n  TplinkRouter.prioritizeDevice.setDeviceName(\"48B14C740AD5E\");\n  TplinkRouter.prioritizeDevice.setDurationOfPriority(30);\n} else {\n  TplinkRouter.prioritizeDevice.skip(\"Arlo device not matched.\");\n}"
  },
  {
    "intent": "When a new event is added to my Personal iOS Calendar, such as a meeting titled \"Team Meeting\" starting at 10:00 AM and ending at 11:30 AM on February 12th, with invitees including John Doe and Jane Smith, create a corresponding detailed event in my Google Calendar named \"Work Events\", setting the start time to 10:00 AM, end time to 11:30 AM, title to \"Team Meeting\", description to \"Discuss project updates\", location to \"Conference Room A\", and attendees to john.doe@example.com, jane.smith@example.com.",
    "filter_code": "if (IosCalendar.newCalendarEventInCalendar.CalendarName === \"Personal\") {\n  GoogleCalendar.addDetailedEvent.setStart_Time(IosCalendar.newCalendarEventInCalendar.StartDate);\n  GoogleCalendar.addDetailedEvent.setEnd_Time(IosCalendar.newCalendarEventInCalendar.EndDate);\n  GoogleCalendar.addDetailedEvent.setTitle(IosCalendar.newCalendarEventInCalendar.Title);\n  GoogleCalendar.addDetailedEvent.setDescription(\"Discuss project updates\");\n  GoogleCalendar.addDetailedEvent.setLocation(\"Conference Room A\");\n  var attendees = IosCalendar.newCalendarEventInCalendar.Invitees;\n  if (attendees.includes(\"John Doe\")) {\n    attendees = attendees.replace(\"John Doe\", \"john.doe@example.com\");\n  }\n  if (attendees.includes(\"Jane Smith\")) {\n    attendees = attendees.replace(\"Jane Smith\", \"jane.smith@example.com\");\n  }\n  GoogleCalendar.addDetailedEvent.setAttendees(attendees);\n} else {\n  GoogleCalendar.addDetailedEvent.skip(\"Event not in Personal calendar\");\n}"
  },
  {
    "intent": "When a new event titled \"Team Meeting\" is added to the \"Work\" calendar on iOS Calendar, with invitees including \"john.doe@example.com, jane.smith@example.com\", and notes containing the phrase \"Discuss project updates\", copy this event to the \"Primary\" calendar on Google Calendar, setting the start time to \"2024-09-17T10:00:00-07:00\", end time to \"2024-09-17T11:00:00-07:00\", and adding a description that includes the original event's location, \"Conference Room A\".",
    "filter_code": "if (IosCalendar.newCalendarEventInCalendar.Title === \"Team Meeting\"\n    && IosCalendar.newCalendarEventInCalendar.CalendarName === \"Work\"\n    && IosCalendar.newCalendarEventInCalendar.Invitees.includes(\"john.doe@example.com\")\n    && IosCalendar.newCalendarEventInCalendar.Invitees.includes(\"jane.smith@example.com\")\n    && IosCalendar.newCalendarEventInCalendar.Notes.includes(\"Discuss project updates\")) {\n  GoogleCalendar.addDetailedEvent.setStart Time(\"2024-09-17T10:00:00-07:00\");\n  GoogleCalendar.addDetailedEvent.setEnd Time(\"2024-09-17T11:00:00-07:00\");\n  GoogleCalendar.addDetailedEvent.setTitle(IosCalendar.newCalendarEventInCalendar.Title);\n  GoogleCalendar.addDetailedEvent.setDescription(\"Location: \" + IosCalendar.newCalendarEventInCalendar.Location + \". Original event notes: \" + IosCalendar.newCalendarEventInCalendar.Notes);\n  GoogleCalendar.addDetailedEvent.setAttendees(IosCalendar.newCalendarEventInCalendar.Invitees);\n  GoogleCalendar.addDetailedEvent.setLocation(IosCalendar.newCalendarEventInCalendar.Location);\n} else {\n  GoogleCalendar.addDetailedEvent.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the electricity price exceeds 170 DKK per kWh in West Denmark, adjust the freezer temperature of my Home Connect fridge freezer to -18°C to reduce energy consumption.",
    "filter_code": "if (TrueEnergyDK.electricityPriceExpensive.Price > 170 && TrueEnergyDK.electricityPriceExpensive.Region === \"West Denmark\") {\n  HcFridge.freezerSetTemperature.setTemperature(-18);\n} else {\n  HcFridge.freezerSetTemperature.skip(\"Electricity price is not high or region is not West Denmark.\");\n}"
  },
  {
    "intent": "When the temperature in New York drops below 18 degrees Celsius, set the Brilliant Nexus AC device named \"Living Room AC\" to Cooling mode with a temperature of 22 degrees Celsius and a fan speed of Medium.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 18 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  BrilliantNexus.acExecution.setMode(\"Cooling\");\n  BrilliantNexus.acExecution.setTemperature(\"22\");\n  BrilliantNexus.acExecution.setFanSpeed(\"Medium\");\n} else {\n  BrilliantNexus.acExecution.skip(\"Temperature in New York is not below 18 degrees Celsius.\");\n}"
  },
  {
    "intent": "When your Fitbit step count reaches 10000 steps, display a notification on your Glance Clock with the message \"Daily step goal achieved: 10000 steps\" in a cheerful animation with a green color.",
    "filter_code": "if (Fitbit.dailyStepGoal.Steps >= 10000) {\n  Glanceclock.notice.setText(\"Daily step goal achieved: \" + Fitbit.dailyStepGoal.StepGoal + \" steps\");\n  // Assuming default or no specific sound, animation, and color options are set in the action details\n}"
  },
  {
    "intent": "When your daily Fitbit calorie burn goal of 2000 calories is achieved, send a Signal to your Das Keyboard named \"Calorie Goal Achieved\" with the message \"You burned 2123 calories on 2020-07-07\", setting the color of the keyboard's Zone 1 to red and displaying it with a blink effect on the device named \"Office Keyboard\".",
    "filter_code": "if (Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal === \"2000\" && Fitbit.dailyCalorieBurnGoal.CaloriesBurned >= Fitbit.dailyCalorieBurnGoal.CalorieBurnGoal) {\n  Daskeyboardq.signals.setName(\"Calorie Goal Achieved\");\n  Daskeyboardq.signals.setMessage(`You burned ${Fitbit.dailyCalorieBurnGoal.CaloriesBurned} calories on ${Fitbit.dailyCalorieBurnGoal.DateAchieved}`);\n  Daskeyboardq.signals.setZone(1);\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setEffect(\"blink\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Daily calorie burn goal not achieved.\");\n}"
  },
  {
    "intent": "When the SmartHours price changes to critical, put my Aquanta device named \"Home Water Heater\" into Away mode immediately for a duration of 4 hours to save energy and money during the critical pricing event.",
    "filter_code": "if (Oge.priceChanges.SmartHoursPrice === \"critical\") {\n  Aquanta.away.setDevice(\"Home Water Heater\");\n  Aquanta.away.setStart(\"\");\n  Aquanta.away.setEnd(\"4 hours\");\n}"
  },
  {
    "intent": "Schedule a Christmas boost of $25 to my child, Emily, in the Savings pot on December 25th every year at 8:00 AM, with the description \"Christmas Gift Money\", so the funds are delivered on the big day without needing to wake up early.",
    "filter_code": "if (DateAndTime.everyYearOn.CheckTime.getMonth() === 11 && DateAndTime.everyYearOn.CheckTime.getDate() === 25 && DateAndTime.everyYearOn.CheckTime.getHours() === 8) {\n  Roostermoney.boost.setAmount(\"25\");\n  Roostermoney.boost.setPot(\"Savings\");\n  Roostermoney.boost.setDescription(\"Christmas Gift Money\");\n  Roostermoney.boost.child = \"Emily\";\n} else {\n  Roostermoney.boost.skip(\"Not Christmas morning at 8:00 AM.\");\n}"
  },
  {
    "intent": "When I complete a 30-minute run or a 10km ride on Strava, save $5 toward my Emergency Fund goal on Qapital.",
    "filter_code": "if ((Strava.newActivityByYou.ActivityType === \"Run\" && Strava.newActivityByYou.ElapsedTimeInSeconds >= 1800) ||\n    (Strava.newActivityByYou.ActivityType === \"Ride\" && Strava.newActivityByYou.DistanceMeters >= 10000)) {\n  Qapital.saveTowardGoal.setGoal(\"Emergency Fund\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Activity does not meet the conditions.\");\n}"
  },
  {
    "intent": "Log the daily exchange rate between USD and EUR to a Google Docs spreadsheet named \"Currency Tracker\" in the folder \"Financial Reports\", every day at 08:00, including the current exchange rate and a link to more information.",
    "filter_code": "if (Finance.currencyExchangeRateStocks.CheckTime.hour() === 8 && Finance.currencyExchangeRateStocks.InputCurrency === \"USD\" && Finance.currencyExchangeRateStocks.OutputCurrency === \"EUR\") {\n  var body = \"Current exchange rate: 1 USD = \" + Finance.currencyExchangeRateStocks.ExchangeRate + \" EUR. More info: <a href='\" + Finance.currencyExchangeRateStocks.InfoUrl + \"'>Click here</a>\";\n  GoogleDocs.appendToGoogleDoc.setFilename(\"Currency Tracker\");\n  GoogleDocs.appendToGoogleDoc.setPath(\"Financial Reports\");\n  GoogleDocs.appendToGoogleDoc.setBody(body);\n} else {\n  GoogleDocs.appendToGoogleDoc.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the weather condition is \"Rain\" at London, move £5 into my \"Emergency Fund\" Monzo pot.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.Location === \"London\") {\n  Monzo.potDeposit.setPot(\"Emergency Fund\");\n  Monzo.potDeposit.setAmount(\"5\");\n} else {\n  Monzo.potDeposit.skip(\"Not raining in London.\");\n}"
  },
  {
    "intent": "Blink all the Philips Hue living room lights when your child, Emily, has £5 or more removed from her Save pot on RoosterMoney after 3 PM.",
    "filter_code": "if (Roostermoney.boosted.Child !== \"Emily\" || Roostermoney.boosted.Pot !== \"Save\") {\n  Hue.blinkAllHue.skip(\"Child or pot does not match.\");\n} else if (parseFloat(Roostermoney.boosted.Amount.replace(\"£\", \"\")) < 5) {\n  Hue.blinkAllHue.skip(\"Amount removed is less than £5.\");\n} else {\n  var currentTime = new Date();\n  var triggerTime = new Date(Roostermoney.boosted.CreatedAt);\n  if (triggerTime.getHours() < 15) { // 15 is 3 PM in 24-hour format\n    Hue.blinkAllHue.skip(\"Trigger time is before 3 PM.\");\n  } else {\n    // Assuming the lights are selected based on the action details, but since it's not provided in the trigger or intent,\n    // we will directly call the blink method without any condition for light selection.\n    Hue.blinkAllHue();\n  }\n}"
  },
  {
    "intent": "Send a weekly email digest to my inbox every Wednesday morning at 08:00 with updates from The Center's RSS feed, including the entry title, author, and content, and use \"The Center's Weekly Updates\" as the email title.",
    "filter_code": "EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setTitle(\"The Center's Weekly Updates\");\nvar message = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nAuthor: \" + Feed.newFeedItem.EntryAuthor + \"\\nContent: \" + Feed.newFeedItem.EntryContent;\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.EntryUrl);"
  },
  {
    "intent": "Turn off all Philips Hue lights in the house when Marley's Fiat exits the Home Geo-Circle, so that energy can be saved when no one is at home.",
    "filter_code": "if (Bouncie.geoCircleExit.VehicleName === \"Marley's Fiat\" && Bouncie.geoCircleExit.CircleName === \"Home\") {\n  Hue.turnOffAllHue();\n}"
  },
  {
    "intent": "When the Flic button named \"TravelSaver\" is double-clicked at latitude 59.3325800 and longitude 18.0649000, save $5 toward the Qapital goal named \"Dream Vacation\".",
    "filter_code": "if (Flic.click.ButtonUuid === \"TravelSaver\" && Flic.click.ClickType === \"double_click\" && Flic.click.Latitude === \"59.3325800\" && Flic.click.Longitude === \"18.0649000\") {\n  Qapital.saveTowardGoal.setGoal(\"Dream Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a weekly email digest to my inbox every Sunday at 08:00 with the title \"Weekly BEA Data Update\" and a message containing a list of new data from the Bureau of Economic Analysis, including entry titles, URLs, and preview content, filtered by the keyword \"GDP\".",
    "filter_code": "if (Meta.currentUserTime.day() !== \"Sunday\" || Meta.currentUserTime.hour() !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Sunday at 08:00\");\n}\n\nvar message = \"Weekly BEA Data Update:<br>\";\n\nBea.newDataFromTheBea.entries.forEach(function(entry) {\n  if (entry.EntryTitle.toLowerCase().includes(\"GDP\") || entry.PreviewContent.toLowerCase().includes(\"GDP\")) {\n    message += \"<b>\" + entry.EntryTitle + \"</b>: \" + entry.EntryUrl + \"<br>\" + entry.PreviewContent + \"<br><br>\";\n  }\n});\n\nif (message === \"Weekly BEA Data Update:<br>\") {\n  EmailDigest.sendWeeklyEmail.skip(\"No new data found\");\n} else {\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Sunday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendWeeklyEmail.setTitle(\"Weekly BEA Data Update\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n}"
  },
  {
    "intent": "When the Bureau of Economic Analysis releases new data, such as an update on Personal Income and Outlays, append a new row to a Google Sheets spreadsheet named \"BEA Releases\" with the entry title, entry URL, preview content, and entry published date, using the format \"Entry Title|||Entry URL|||Preview Content|||Entry Published\" in the IFTTT folder.",
    "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"BEA Releases\");\nvar formattedRow = Bea.newDataFromTheBea.EntryTitle + \"|||\" + Bea.newDataFromTheBea.EntryUrl + \"|||\" + Bea.newDataFromTheBea.PreviewContent + \"|||\" + Bea.newDataFromTheBea.EntryPublished;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT\");"
  },
  {
    "intent": "Post a message to the #economy-updates Slack channel with the title \"New Economic Data\" and the message \"Personal income increased $58.4 billion (0.4 percent) in April according to estimates released today by the Bureau of Economic Analysis.\" whenever new data from the BEA is published, filtering by the keyword \"Personal Income\".",
    "filter_code": "if (Bea.newDataFromTheBea.EntryTitle.includes(\"Personal Income\")) {\n  Slack.postToChannel.setChannel(\"#economy-updates\");\n  Slack.postToChannel.setTitle(\"New Economic Data\");\n  Slack.postToChannel.setMessage(Bea.newDataFromTheBea.PreviewContent);\n} else {\n  Slack.postToChannel.skip(\"Entry does not contain 'Personal Income'.\");\n}"
  },
  {
    "intent": "When the EZVIZ camera named \"Front Door Camera\" with serial number \"1234567890\" triggers a \"Motion Detection Alarm\" event between 07:00 and 19:00, launch the Apilio Logicblock evaluation for the logicblock identified as \"Home Security Alert\" to send notifications to the \"#home-security-alerts\" channel.",
    "filter_code": "if (Ezviz.alarmLog.AlarmName === \"Front Door Camera - 1234567890\" && Ezviz.alarmLog.Type === \"Motion Detection Alarm\") {\n  var hour = new Date(Ezviz.alarmLog.TriggerTime).getHours();\n  if (hour >= 7 && hour <= 19) {\n    Apilio.logicblockEvaluationRequests.setLogicblockIdentifier(\"Home Security Alert\");\n  } else {\n    Apilio.logicblockEvaluationRequests.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  }\n}"
  },
  {
    "intent": "When the EZVIZ camera named \"Front Door Camera\" with serial number \"EZVIZ123456\" triggers a \"Motion Detection Alarm\" type of alarm, save this information to the Apilio variable identified as \"Security_Breach\", updating it from false to true if it's currently false or vice versa.",
    "filter_code": "if (Ezviz.alarmLog.AlarmName === \"Front Door Camera\" && Ezviz.alarmLog.Type === \"Motion Detection Alarm\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Security_Breach\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Alarm does not match the specified camera or type.\");\n}"
  },
  {
    "intent": "When a new post is made in the r/worldnews subreddit on Reddit, save the post's content to Instapaper with the title set to the post's title and the URL set to the post's URL.",
    "filter_code": "if (Reddit.newPostInSubreddit.Subreddit === \"worldnews\") {\n  Instapaper.saveItem.setUrl(Reddit.newPostInSubreddit.PostURL);\n  Instapaper.saveItem.setTitle(Reddit.newPostInSubreddit.Title);\n  Instapaper.saveItem.setDescription(Reddit.newPostInSubreddit.Content);\n}"
  },
  {
    "intent": "When my Litter-Robot, named My Litter Robot, starts its cleaning cycle, immediately start my iRobot vacuum, Roomba, to clean around the litter box area.",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Cleaning Cycle Started\") {\n  Irobot.startRobot.setRobotName(\"Roomba\");\n} else {\n  Irobot.startRobot.skip(\"Litter-Robot not starting cleaning cycle or incorrect robot.\");\n}"
  },
  {
    "intent": "When a new sleep log is recorded on Fitbit with a total time slept of more than 7 hours and an awake count of less than 3, use the Tochie Speaker to ask Alexa about the current weather condition using the device named \"Living Room Speaker\" and play a chime before speaking.",
    "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSleptInSeconds > 25200 && Fitbit.newSleepLogged.AwakeCount < 3) {\n  TochieSpeaker.ttsSpeaker.setText(\"Alexa, what's the current weather condition?\");\n  TochieSpeaker.ttsSpeaker.setChime(\"play\");\n  TochieSpeaker.ttsSpeaker.setDeviceId(\"Living Room Speaker\");\n} else {\n  TochieSpeaker.ttsSpeaker.skip(\"Sleep conditions not met.\");\n}"
  },
  {
    "intent": "Post a message to the #travel-alerts channel on Slack with the title \"U.S Department of State Travel Alert\" and the message \"New travel alert issued: {{EntryTitle}}. Read more at {{EntryUrl}}\" whenever the U.S Department of State publishes a new travel alert, including the alert's content in the message.",
    "filter_code": "Slack.postToChannel.setChannel(\"#travel-alerts\");\nSlack.postToChannel.setTitle(\"U.S Department of State Travel Alert\");\nSlack.postToChannel.setMessage(\"New travel alert issued: \" + Dos.travelAlerts.EntryTitle + \". Read more at \" + Dos.travelAlerts.EntryUrl + \". Alert details: \" + Dos.travelAlerts.ContentHtml);"
  },
  {
    "intent": "When a new task is completed in the \"Household Tasks\" project on Todoist with priority \"Priority 1\" and label \"to_follow_up\", send a datapoint value of \"1\" to the \"Productivity\" goal on Beeminder with a comment \"Task completed: Pay telephone bill\".",
    "filter_code": "if (Todoist.newCompletedTask.Project === \"Household Tasks\" && Todoist.newCompletedTask.Priority === \"Priority 1\" && Todoist.newCompletedTask.Labels.includes(\"to_follow_up\")) {\n  Beeminder.addData.setDatapointValue(\"1\");\n  Beeminder.addData.setDatapointComment(\"Task completed: \" + Todoist.newCompletedTask.TaskContent);\n} else {\n  Beeminder.addData.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new post is published on the IFTTT Blog at http://blog.ifttt.com/, with an entry title like \"Launch Day!\" and an entry author such as \"Linden Tibbets\", send an email to my inbox with the subject \"New Post from IFTTT Blog: {EntryTitle}\" and the body containing the entry content, including any HTML, along with a link to the full post at {EntryUrl}.",
    "filter_code": "if (Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var subject = \"New Post from IFTTT Blog: \" + Feed.newFeedItem.EntryTitle;\n  var body = Feed.newFeedItem.EntryContent + \"<br><br>Read the full post at <a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryUrl + \"</a>\";\n  Email.sendMeEmail.setSubject(subject);\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"The new post is not from the IFTTT Blog.\");\n}"
  },
  {
    "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"Wedding Blog Updates\" and a message containing the latest entry titles, URLs, and images from the wedding blog RSS feed, including the feed title, entry authors, and publication dates, to subscribers who want to stay up-to-date on real-life wedding photoshoots, planning tips, DIY projects, and giveaways.",
    "filter_code": "EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"Wedding Blog Updates\");\nvar message = \"Latest updates from \" + Feed.newFeedItem.FeedTitle + \":\\n\";\nmessage += \"- \" + Feed.newFeedItem.EntryTitle + \" by \" + Feed.newFeedItem.EntryAuthor + \" on \" + Feed.newFeedItem.EntryPublished + \"\\n\";\nmessage += \"  Read more: \" + Feed.newFeedItem.EntryUrl + \"\\n\";\nmessage += \"  Image: \" + Feed.newFeedItem.EntryImageUrl + \"\\n\";\nEmailDigest.sendWeeklyEmail.setMessage(message);"
  },
  {
    "intent": "When a new post is published on the IFTTT Blog feed (http://blog.ifttt.com/), send a message to the Telegram chat @MyNewsChannel with the post's title, URL, and a brief summary, including a web page preview.",
    "filter_code": "var text = \"New post: <b>\" + Feed.newFeedItem.EntryTitle + \"</b> - \" + Feed.newFeedItem.EntryContent.substring(0, 100) + \"... Read more at: \" + Feed.newFeedItem.EntryUrl;\nTelegram.sendMessage.setText(text);\nTelegram.sendMessage.setChatId(\"@MyNewsChannel\");\nTelegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");"
  },
  {
    "intent": "When a new post is published on the IFTTT Blog feed at http://blog.ifttt.com/, with an entry title like \"Launch Day!\" and containing content such as \"Well here we are on, blah, blah...\", share the link to the post on the Facebook page with a message saying \"Check out our latest update: \".",
    "filter_code": "if (Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var message = \"Check out our latest update: \" + Feed.newFeedItem.EntryTitle;\n  FacebookPages.createLinkPage.setLinkUrl(Feed.newFeedItem.EntryUrl);\n  FacebookPages.createLinkPage.setMessage(message);\n} else {\n  FacebookPages.createLinkPage.skip(\"Not an IFTTT Blog post.\");\n}"
  },
  {
    "intent": "When a new article is published in the Travel + Leisure RSS feed, save it to Pocket with the tags \"travel\" and \"leisure\" for later reading.",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"Travel + Leisure\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"travel, leisure\");\n}"
  },
  {
    "intent": "When a new sleep session is logged on Fitbit with more than 7 hours of total time slept and the time to fall asleep is less than 15 minutes, quickly add an event to my primary Google Calendar with the text \"Sleep - 7 hours 30 minutes, fell asleep at 10:45 PM, woke up at 6:15 AM\" to track my sleep pattern.",
    "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSleptInSeconds > 25200 && Fitbit.newSleepLogged.TimeToFallAsleepSeconds < 900) {\n  var fellAsleepAt = new Date(Fitbit.newSleepLogged.FellAsleepAt);\n  var awokeAt = new Date(Fitbit.newSleepLogged.AwokeAt);\n  var hours = Math.floor(Fitbit.newSleepLogged.TotalTimeSleptInSeconds / 3600);\n  var minutes = Math.floor((Fitbit.newSleepLogged.TotalTimeSleptInSeconds % 3600) / 60);\n\n  var eventText = `Sleep - ${hours} hours ${minutes} minutes, fell asleep at ${fellAsleepAt.toLocaleTimeString()}, woke up at ${awokeAt.toLocaleTimeString()}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(eventText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Sleep duration or fall asleep time does not meet the criteria.\");\n}"
  },
  {
    "intent": "When I sleep for more than 7 hours and 30 minutes, with a restless count of less than 5, and my time to fall asleep is under 15 minutes, log my sleep in the iOS Health app with the duration as the total time slept, the asleep at time as the time I fell asleep at, which is before 12:00 AM, and the date sleep ended as the current date.",
    "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSleptInSeconds > 27000 &&\n    Fitbit.newSleepLogged.RestlessCount < 5 &&\n    Fitbit.newSleepLogged.TimeToFallAsleepSeconds < 900 &&\n    new Date(Fitbit.newSleepLogged.FellAsleepAt).getHours() < 12) {\n  IosHealth.logSleep.setSleepDuration(Fitbit.newSleepLogged.TotalTimeSlept);\n  IosHealth.logSleep.setAsleepAt(Fitbit.newSleepLogged.FellAsleepAt);\n  var currentDate = new Date();\n  IosHealth.logSleep.setDateSleepEnded(currentDate.toISOString().split('T')[0]);\n} else {\n  IosHealth.logSleep.skip(\"Sleep conditions not met.\");\n}"
  },
  {
    "intent": "When a new photo is taken using the Camera widget, post the image with the caption \"New Photo\" to the Slack channel #general, including a link to the photo and its location on the map.",
    "filter_code": "Slack.postToChannel.setMessage(\"New Photo\");\nSlack.postToChannel.setTitle(\"Photo taken at \" + DoCamera.doCameraNewPhoto.OccurredAt);\nSlack.postToChannel.setTitleUrl(DoCamera.doCameraNewPhoto.ShareURL);\nSlack.postToChannel.setImageUrl(DoCamera.doCameraNewPhoto.PublicPhotoURL);\nSlack.postToChannel.setChannel(\"#general\");"
  },
  {
    "intent": "When a new text file named \"report.txt\" is added to the \"/Incoming\" subfolder in Dropbox, send the file to the \"#general\" channel on Slack with the message \"New report available\" and include a title \"Daily Report\" that links to https://www.example.com/reports, along with a thumbnail image from https://www.example.com/report-image.png.",
    "filter_code": "if (Dropbox.newTextFileInFolder.Filename === \"report.txt\" && Dropbox.newTextFileInFolder.path === \"/Incoming\") {\n  Slack.postToChannel.setMessage(\"New report available\");\n  Slack.postToChannel.setTitle(\"Daily Report\");\n  Slack.postToChannel.setTitleUrl(\"https://www.example.com/reports\");\n  Slack.postToChannel.setImageUrl(\"https://www.example.com/report-image.png\");\n  Slack.postToChannel.setChannel(\"#general\");\n} else {\n  Slack.postToChannel.skip(\"File does not match the report.txt criteria.\");\n}"
  },
  {
    "intent": "Turn on the Yeelight device named \"Bedroom Lamp\" and set it to a warm sunset color at 9:00 PM every day, then gradually dim it over 10 minutes to help me sleep.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() === 21 && DateAndTime.everyDayAt.CheckTime.minute() === 0) {\n  Yeelight.setColor.setDeviceId(\"Bedroom Lamp\");\n  Yeelight.setColor.setColorId(\"Sunset\");\n  setTimeout(function() {\n    var dimInterval = setInterval(function() {\n      var currentBrightness = Yeelight.getColor.brightness();\n      if (currentBrightness > 0) {\n        Yeelight.setColor.setBrightness(currentBrightness - 10);\n      } else {\n        Yeelight.turnOff.skip(\"Dimming completed, turning off the light.\");\n        clearInterval(dimInterval);\n      }\n    }, 60000); // dim every minute\n  }, 0); // start dimming immediately after setting the color\n}"
  },
  {
    "intent": "When the total time slept is less than 7.5 hours, as tracked by Fitbit, and it's between 20:00 and 22:00, create a new event in Google Calendar on the primary calendar with the quick add text \"Go to bed now\" to remind you to head to bed at a reasonable time.",
    "filter_code": "var totalHoursSlept = Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds / 3600;\nvar currentHour = Meta.currentUserTime.hour();\nif (totalHoursSlept < 7.5 && currentHour >= 20 && currentHour <= 22) {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Go to bed now\");\n  GoogleCalendar.quickAddEvent.skip(\"Reminder sent.\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not reminding to go to bed now.\");\n}"
  },
  {
    "intent": "Post a message to the #general channel in Slack with the text \"Motion detected in the office!\" and the title \"Security Alert\" whenever a new event is triggered in MESH with the EventID 12345 between 07:00 and 19:00, including a thumbnail URL https://example.com/alert_image.jpg.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Mesh.events.event_id === \"12345\") {\n    Slack.postToChannel.setMessage(\"Motion detected in the office!\");\n    Slack.postToChannel.setTitle(\"Security Alert\");\n    Slack.postToChannel.setImageUrl(\"https://example.com/alert_image.jpg\");\n    Slack.postToChannel.setChannel(\"#general\");\n  } else {\n    Slack.postToChannel.skip(\"EventID does not match.\");\n  }\n} else {\n  Slack.postToChannel.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new photo is posted to Instagram with a caption containing the keyword \"vacation\" and the photo was taken after 5:00 PM, share the photo on the Slack channel #travel_pics, including the photo's short URL in the message, and set the title to \"New Vacation Photo\" with a link to the image file.",
    "filter_code": "if (Instagram.anyNewPhotoByYou.Caption.includes(\"vacation\") && Instagram.anyNewPhotoByYou.CreatedAt.hour() > 17) {\n  Slack.postToChannel.setMessage(`New photo: ${Instagram.anyNewPhotoByYou.Url}`);\n  Slack.postToChannel.setTitle(\"New Vacation Photo\");\n  Slack.postToChannel.setTitleUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Slack.postToChannel.setImageUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Slack.postToChannel.setChannel(\"#travel_pics\");\n} else {\n  Slack.postToChannel.skip(\"Does not match vacation criteria or time.\");\n}"
  },
  {
    "intent": "When a new post is published on WordPress with the title containing the keyword \"Update\" and including an image, share the post's title, link, and thumbnail image to the Slack channel #announcements, setting the message to \"New update: {{PostTitle}} - {{PostUrl}}\", the title to \"Latest News\", and the title URL to {{PostUrl}}, along with the thumbnail URL set to {{PostImageUrl}}.",
    "filter_code": "if (Wordpress.anyNewPostWp.PostTitle.includes(\"Update\") && Wordpress.anyNewPostWp.PostImageUrl !== \"http://ifttt.com/images/no_image_card.png\") {\n  Slack.postToChannel.setMessage(`New update: ${Wordpress.anyNewPostWp.PostTitle} - ${Wordpress.anyNewPostWp.PostUrl}`);\n  Slack.postToChannel.setTitle(\"Latest News\");\n  Slack.postToChannel.setTitleUrl(Wordpress.anyNewPostWp.PostUrl);\n  Slack.postToChannel.setImageUrl(Wordpress.anyNewPostWp.PostImageUrl);\n} else {\n  Slack.postToChannel.skip(\"The post does not contain the keyword 'Update' or does not include an image.\");\n}"
  },
  {
    "intent": "Post a message to the #security-alerts channel on Slack with the title \"New USCERT Alert: {{EntryTitle}}\" and the message \"USCERT has issued a new alert: {{EntryContent}}. Read more at {{EntryUrl}}\" whenever a new alert is published by USCERT, filtered by the keyword \"vulnerability\".",
    "filter_code": "if (Uscert.newAlert.EntryContentHtml.toLowerCase().includes(\"vulnerability\")) {\n  Slack.postToChannel.setMessage(\"USCERT has issued a new alert: \" + Uscert.newAlert.EntryContentHtml + \". Read more at \" + Uscert.newAlert.EntryUrl);\n  Slack.postToChannel.setTitle(\"New USCERT Alert: \" + Uscert.newAlert.EntryTitle);\n  Slack.postToChannel.setChannel(\"#security-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Does not contain the keyword 'vulnerability'.\");\n}"
  },
  {
    "intent": "Deliver BrainyQuote's daily quote from Voltaire to the #inspiration Slack channel with a message containing the quote and a link to https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html, including an optional title \"Daily Motivation\" and an image URL https://brainyquote.com/photos/voltaire.jpg.",
    "filter_code": "if (Brainyquote.todaySQuote.Source === \"Voltaire\") {\n  Slack.postToChannel.setMessage(Brainyquote.todaySQuote.Quote + \" \" + Brainyquote.todaySQuote.QuoteUrl);\n  Slack.postToChannel.setTitle(\"Daily Motivation\");\n  Slack.postToChannel.setTitleUrl(\"https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html\");\n  Slack.postToChannel.setImageUrl(\"https://brainyquote.com/photos/voltaire.jpg\");\n  Slack.postToChannel.setChannel(\"#inspiration\");\n} else {\n  Slack.postToChannel.skip(\"Quote is not from Voltaire.\");\n}"
  },
  {
    "intent": "When a new popular business article is published in the \"Business\" section of The New York Times, post the article title, author, and URL to the \"#business-news\" channel on Slack, including a thumbnail image from the article.",
    "filter_code": "if (Nytimes.anyNewPopularArticleToday.Section === \"Business\") {\n  var message = Nytimes.anyNewPopularArticleToday.Title + \" by \" + Nytimes.anyNewPopularArticleToday.Author + \": \" + Nytimes.anyNewPopularArticleToday.ArticleUrl;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(Nytimes.anyNewPopularArticleToday.Title);\n  Slack.postToChannel.setTitleUrl(Nytimes.anyNewPopularArticleToday.ArticleUrl);\n  Slack.postToChannel.setImageUrl(Nytimes.anyNewPopularArticleToday.ImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Article is not from the Business section.\");\n}"
  },
  {
    "intent": "Post a message to the #congress-updates Slack channel with the title \"New Senate Agenda Item\" and the message \"A new item has been added to the day's agenda: {{EntryTitle}}. Read more at {{EntryUrl}}\" whenever a new item is posted to the Congress.gov RSS feed, including an image thumbnail from the entry if available.",
    "filter_code": "Slack.postToChannel.setMessage(\"A new item has been added to the day's agenda: \" + Feed.newFeedItem.EntryTitle + \". Read more at \" + Feed.newFeedItem.EntryUrl);\nSlack.postToChannel.setTitle(\"New Senate Agenda Item\");\nSlack.postToChannel.setImageUrl(Feed.newFeedItem.EntryImageUrl);"
  },
  {
    "intent": "When the World Health Organization reports a new disease outbreak news, such as an update on Middle East respiratory syndrome coronavirus (MERS-CoV) in Saudi Arabia, send a message to the #globalhealth channel on Slack with the entry title, for example \"Middle East respiratory syndrome coronavirus (MERS-CoV) – Saudi Arabia, United Arab Emirates, and Qatar\", and include a link to the full report, like http://www.who.int/entity/csr/don/06-june-2017-mers-saudi-arabia-united-arab-emirates-qatar/en/index.html, to keep colleagues informed about the latest global health updates.",
    "filter_code": "Slack.postToChannel.setChannel(\"#globalhealth\");\nSlack.postToChannel.setMessage(Who.newDiseaseOutbreakNewsFromWho.EntryTitle + \" - \" + Who.newDiseaseOutbreakNewsFromWho.EntryUrl);"
  },
  {
    "intent": "Send a notification from the IFTTT app when a new \"Ask Slashdot\" article is posted with a title like \"Microsoft Is Bringing Office to the Windows Store\", containing the entry's URL, such as http://ift.tt/2qvWxfd, and its content, which may include HTML, to the user immediately after publication.",
    "filter_code": "var title = Slashdot.newStory.EntryTitle;\nvar subject = 'Ask Slashdot';\nvar url = Slashdot.newStory.EntryUrl;\nvar content = Slashdot.newStory.EntryContent;\n\nif (title.indexOf(subject) >= 0) {\n  IfNotifications.sendNotification.setMessage(\"New 'Ask Slashdot' article: \" + title + \". Read more at \" + url + \". Content: \" + content);\n} else {\n  IfNotifications.sendNotification.skip(\"Not an 'Ask Slashdot' article\");\n}"
  },
  {
    "intent": "Save $5 toward my \"Vacation Fund\" goal in Qapital every time I reach my target sleep duration of 7.5 hours as tracked by Fitbit.",
    "filter_code": "if (Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds >= 7.5 * 60 * 60) {\n  Qapital.saveTowardGoal.setAmount(5);\n  Qapital.saveTowardGoal.setGoalName(\"Vacation Fund\");\n}"
  },
  {
    "intent": "When a new service is published on IFTTT with the name \"Smart Home Device\" and the description contains the keyword \"automation\", post a message to the Slack channel \"#new-services\" with the title \"New Service: Smart Home Automation\" and the message \"A new service called Smart Home Device has been published on IFTTT, offering home automation capabilities. Check it out at https://ifttt.com/SmartHomeDevice\". Include a thumbnail image of the service's logo, which can be found at https://assets.ifttt.com/images/channels/1/icons/regular.png.",
    "filter_code": "if (Ifttt.newServicePublished.Name === \"Smart Home Device\" && Ifttt.newServicePublished.Description.includes(\"automation\")) {\n  Slack.postToChannel.setMessage(`A new service called ${Ifttt.newServicePublished.Name} has been published on IFTTT, offering home automation capabilities. Check it out at ${Ifttt.newServicePublished.ServiceUrl}`);\n  Slack.postToChannel.setTitle(\"New Service: Smart Home Automation\");\n  Slack.postToChannel.setTitleUrl(Ifttt.newServicePublished.ServiceUrl);\n  Slack.postToChannel.setImageUrl(Ifttt.newServicePublished.ServiceLogo);\n  Slack.postToChannel.setChannel(\"#new-services\");\n} else {\n  Slack.postToChannel.skip(\"The new service does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new article is published in The New York Times with the keyword \"climate change\" and the section is \"World News\", post a message to the Slack channel \"#news-alerts\" with the article title, author, and a brief summary, including a link to the full article and an image of the article's main photo.",
    "filter_code": "if (Nytimes.newArticleMatchingSearch.Keywords.includes(\"climate change\") && Nytimes.newArticleMatchingSearch.Section === \"World News\") {\n  var message = `${Nytimes.newArticleMatchingSearch.Title} by ${Nytimes.newArticleMatchingSearch.Author}: ${Nytimes.newArticleMatchingSearch.Blurb}. Read more at ${Nytimes.newArticleMatchingSearch.ArticleUrl}`;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(Nytimes.newArticleMatchingSearch.Title);\n  Slack.postToChannel.setTitleUrl(Nytimes.newArticleMatchingSearch.ArticleUrl);\n  Slack.postToChannel.setImageUrl(Nytimes.newArticleMatchingSearch.ImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Article does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new grant opportunity matching the keyword \"Education\" is posted on Grants.gov, send a message to the Slack channel #education-grants with the grant title, URL, and content. The message should include the title of the grant, a link to the grant URL, and an image thumbnail from the grant content.",
    "filter_code": "if (Grants.newGrantOpportunity.GrantContentHtml.includes(\"Education\") || Grants.newGrantOpportunity.GrantTitle.includes(\"Education\")) {\n  Slack.postToChannel.setMessage(`New Grant Opportunity: ${Grants.newGrantOpportunity.GrantTitle} - ${Grants.newGrantOpportunity.GrantUrl}`);\n  Slack.postToChannel.setTitle(Grants.newGrantOpportunity.GrantTitle);\n  Slack.postToChannel.setTitleUrl(Grants.newGrantOpportunity.GrantUrl);\n  // Assuming the image URL can be extracted from the grant content HTML\n  const imageUrl = Grants.newGrantOpportunity.GrantContentHtml.match(/<img src=\"([^\"]+)\"/);\n  if (imageUrl && imageUrl[1]) {\n    Slack.postToChannel.setImageUrl(imageUrl[1]);\n  }\n} else {\n  Slack.postToChannel.skip(\"Grant does not match the keyword 'Education'.\");\n}"
  },
  {
    "intent": "Post new SEC investor alerts containing the keyword \"crowdfunding\" to the Slack channel \"#investor-alerts\" with a message that includes the entry title, link, and description, and set the title to \"New SEC Alert\" with a title URL linking back to the original entry.",
    "filter_code": "if (Sec.secInvestorAlerts.EntryContent.includes(\"crowdfunding\") || Sec.secInvestorAlerts.EntryTitle.includes(\"crowdfunding\") || Sec.secInvestorAlerts.EntryDescription.includes(\"crowdfunding\")) {\n  Slack.postToChannel.setTitle(\"New SEC Alert\");\n  Slack.postToChannel.setTitleUrl(Sec.secInvestorAlerts.Link);\n  Slack.postToChannel.setMessage(`New SEC Investor Alert: ${Sec.secInvestorAlerts.EntryTitle} - ${Sec.secInvestorAlerts.Link}\\n${Sec.secInvestorAlerts.EntryDescription}`);\n  Slack.postToChannel.setChannel(\"#investor-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Does not contain keyword 'crowdfunding'\");\n}"
  },
  {
    "intent": "When a new IFTTT trigger or action is published by the service \"Google Assistant\" and its description contains the word \"update\", post a message to the Slack channel \"#ifttt-updates\" with the title \"New Trigger: {{name}}\" and the message \"A new trigger or action named {{name}} has been published by Google Assistant. Description: {{description}}. Service URL: {{service_url}}. Type: {{type}}. Created at: {{created_at}}\".",
    "filter_code": "if (Ifttt.newTriggerOrActionPublished.Service === \"Google Assistant\" && Ifttt.newTriggerOrActionPublished.Description.includes(\"update\")) {\n  Slack.postToChannel.setTitle(\"New Trigger: \" + Ifttt.newTriggerOrActionPublished.Name);\n  Slack.postToChannel.setMessage(\"A new trigger or action named \" + Ifttt.newTriggerOrActionPublished.Name + \" has been published by Google Assistant. Description: \" + Ifttt.newTriggerOrActionPublished.Description + \". Service URL: \" + Ifttt.newTriggerOrActionPublished.ServiceUrl + \". Type: \" + Ifttt.newTriggerOrActionPublished.Type + \". Created at: \" + Ifttt.newTriggerOrActionPublished.CreatedAt);\n  Slack.postToChannel.setChannel(\"#ifttt-updates\");\n} else {\n  Slack.postToChannel.skip(\"The new trigger or action does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with the hashtag #Slack, share it to the #general channel on Slack, including the photo's caption without the hashtag and a link to the photo.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#Slack\")) {\n  var captionWithoutHashtag = Instagram.newPhotoByYouTagged.CaptionNoTag;\n  var photoUrl = Instagram.newPhotoByYouTagged.Url;\n  Slack.postToChannel.setMessage(captionWithoutHashtag + \" \" + photoUrl);\n  Slack.postToChannel.setTitle(\"New Photo\");\n  Slack.postToChannel.setTitleUrl(photoUrl);\n  Slack.postToChannel.setImageUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n} else {\n  Slack.postToChannel.skip(\"The photo does not contain the #Slack hashtag.\");\n}"
  },
  {
    "intent": "When a new note is tagged with \"urgent\" in Evernote, post the note title \"Action Required\" and its public URL to the Slack channel #operations-alerts, including a thumbnail of the note's image.",
    "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"urgent\")) {\n  Slack.postToChannel.setMessage(`Action Required: ${Evernote.addTagToNote.Title} - ${Evernote.addTagToNote.PublicUrl}`);\n  Slack.postToChannel.setTitle(\"Action Required\");\n  Slack.postToChannel.setTitleUrl(Evernote.addTagToNote.PublicUrl);\n  // Assuming the image URL is available as an ingredient or can be derived\n  // For demonstration, let's assume it's directly available like other ingredients\n  Slack.postToChannel.setImageUrl(\"https://example.com/thumbnail.jpg\"); // Replace with actual image URL logic\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Note is not tagged as urgent.\");\n}"
  },
  {
    "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 23:30, his Living Room Nest Thermostat will adjust the room temperature to 18°C for optimal sleeping.",
    "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nvar minute = WithingsSleep.bedin.DateandTime.minute();\nif (WithingsSleep.bedin.DeviceUser === \"Tom\" &&\n    WithingsSleep.bedin.device === \"Tom's Withings Sleep\" &&\n    GoogleNestThermostat.actionFields.device === \"Living Room Nest Thermostat\" &&\n    (hour === 22 || (hour === 23 && minute <= 30))) {\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celcius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"18\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Conditions not met for adjusting temperature.\");\n}"
  },
  {
    "intent": "When the Kronaby pusher is pressed with a double press type at a location with latitude 55.611947 and longitude 12.978337, send a Slack message to the #general channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Kronaby Pusher Alert\", title URL \"https://ifttt.apps-kronaby.com/map\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map/image\".",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + Kronaby.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Kronaby Pusher Alert\");\n  Slack.postToChannel.setTitleUrl(\"https://ifttt.apps-kronaby.com/map\");\n  Slack.postToChannel.setImageUrl(\"https://ifttt.apps-kronaby.com/map/image\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new file is starred in the Google Drive folder path \"/Documents/Important/Daily Reports\", automatically share it with the Slack channel \"#team-updates\" and include a message saying \"New daily report available\" along with the file's public URL.",
    "filter_code": "if (GoogleDrive.newStarredFile.Path === \"/Documents/Important/Daily Reports\") {\n  Slack.postToChannel.setMessage(\"New daily report available: \" + GoogleDrive.newStarredFile.FileUrl);\n  Slack.postToChannel.setTitle(GoogleDrive.newStarredFile.Filename);\n  Slack.postToChannel.setTitleUrl(GoogleDrive.newStarredFile.FileUrl);\n  Slack.postToChannel.setImageUrl(\"\");\n} else {\n  Slack.postToChannel.skip(\"The starred file is not in the /Documents/Important/Daily Reports folder.\");\n}"
  },
  {
    "intent": "Post a message to the #general channel on Slack with the title \"New FCC Notice\" and the message \"A new notice has been posted by the Federal Communications Commission: {{EntryTitle}} - {{EntryContent}}\" whenever a new notice is posted by the FCC that contains the keyword \"spectrum auction\", including a link to the notice {{EntryUrl}}.",
    "filter_code": "if (Fcc.newNotice.NoticeSubject.toLowerCase().includes(\"spectrum auction\")) {\n  Slack.postToChannel.setMessage(`A new notice has been posted by the Federal Communications Commission: ${Fcc.newNotice.NoticeRecipient} - ${Fcc.newNotice.NoticeSubject}`);\n  Slack.postToChannel.setTitle(\"New FCC Notice\");\n  Slack.postToChannel.setTitleUrl(Fcc.newNotice.Link);\n} else {\n  Slack.postToChannel.skip(\"The notice does not contain the keyword 'spectrum auction'.\");\n}"
  },
  {
    "intent": "When Ballotpedia publishes a new breaking news story with the keyword \"election\" in its title, send a notification to the Slack channel \"#news-updates\" with the message \"New breaking news: {{EntryTitle}}\", including a link to the full article at {{EntryUrl}}, and attach a thumbnail image from the article if available.",
    "filter_code": "if (Ballotpedia.breakingNews.EntryTitle.toLowerCase().includes(\"election\")) {\n  Slack.postToChannel.setMessage(\"New breaking news: \" + Ballotpedia.breakingNews.EntryTitle);\n  Slack.postToChannel.setTitle(Ballotpedia.breakingNews.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Ballotpedia.breakingNews.EntryUrl);\n  if (Ballotpedia.breakingNews.EntryContent.includes(\"img src\")) {\n    var imageUrl = Ballotpedia.breakingNews.EntryContent.match(/img src=\"([^\"]+)\"/)[1];\n    Slack.postToChannel.setImageUrl(imageUrl);\n  }\n  Slack.postToChannel.setChannel(\"#news-updates\");\n} else {\n  Slack.postToChannel.skip(\"Entry title does not contain the keyword 'election'.\");\n}"
  },
  {
    "intent": "Post the latest Environmental Protection Agency news to the #general Slack channel, including the entry title, content preview, and published date, but only if the entry contains the keyword \"climate change\" and was published after August 1, 2022.",
    "filter_code": "if (Epa.latestNews.EntryContentPreview.includes(\"climate change\") && new Date(Epa.latestNews.EntryPublished) > new Date(\"August 1, 2022\")) {\n  Slack.postToChannel.setMessage(`*${Epa.latestNews.EntryTitle}* - ${Epa.latestNews.EntryContentPreview} - Published: ${Epa.latestNews.EntryPublished}`);\n  Slack.postToChannel.setTitle(Epa.latestNews.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Epa.latestNews.EntryUrl);\n} else {\n  Slack.postToChannel.skip(\"Entry does not contain 'climate change' or was published before August 1, 2022.\");\n}"
  },
  {
    "intent": "When a new breaking news story is published on SFGATE with a title like \"Bay Bridge bike ride now goes halfway to SF 7 days a week\" and authored by someone like Mark Morford, post the entry title, URL, and content to the #breaking-news channel in Slack, including a thumbnail image if available, so that team members are always up-to-date with the latest news.",
    "filter_code": "Slack.postToChannel.setMessage(\"New breaking news story: \" + Sfgate.breakingNews.EntryTitle + \"\\n\" + Sfgate.breakingNews.EntryUrl + \"\\n\" + Sfgate.breakingNews.EntryContent);\nSlack.postToChannel.setTitle(Sfgate.breakingNews.EntryTitle);\nSlack.postToChannel.setTitleUrl(Sfgate.breakingNews.EntryUrl);\nif (Sfgate.breakingNews.EntryContent.includes(\"img src\")) {\n  var imageUrl = Sfgate.breakingNews.EntryContent.match(/img src=\"([^\"]+)\"/)[1];\n  Slack.postToChannel.setImageUrl(imageUrl);\n}\nSlack.postToChannel.setChannel(\"#breaking-news\");"
  },
  {
    "intent": "Post new Pew Research Center articles containing the keyword \"science\" to the Slack channel \"#general\" with the message \"New science article from Pew Research: {EntryTitle}\", including a link to the article {EntryUrl}, and an image thumbnail if available.",
    "filter_code": "if (PewResearch.uSPoliticsNews.EntryPreview.toLowerCase().includes(\"science\") || PewResearch.uSPoliticsNews.EntryTitle.toLowerCase().includes(\"science\")) {\n  Slack.postToChannel.setTitle(PewResearch.uSPoliticsNews.EntryTitle);\n  Slack.postToChannel.setMessage(`New science article from Pew Research: ${PewResearch.uSPoliticsNews.EntryTitle}`);\n  Slack.postToChannel.setTitleUrl(PewResearch.uSPoliticsNews.EntryUrl);\n  // Note: There's no direct ingredient for an image thumbnail in the provided trigger details.\n  // If an image URL is available, it should be accessed through a similar filter code method as other ingredients.\n  // For this example, we assume there might be an \"EntryImageUrl\" ingredient with its own filter code method.\n  // If such an ingredient exists, you can uncomment and use the following line:\n  // Slack.postToChannel.setImageUrl(PewResearch.uSPoliticsNews.EntryImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Article does not contain the keyword 'science'.\");\n}"
  },
  {
    "intent": "When the International Monetary Fund publishes a new fiscal monitor report with a title like \"Fiscal Monitor Report - October 2024\" and the entry is published after August 1, 2024, post a message to the #economics channel in Slack, including the report's title, a brief summary of its content, such as \"The latest fiscal monitor report highlights global economic trends and risks\", and a link to the full report, with an optional thumbnail image from https://example.com/fiscal-monitor-image.jpg.",
    "filter_code": "if (Imf.fiscalMonitorReports.Title.indexOf(\"Fiscal Monitor Report\") === 0 &&\n    new Date(Imf.fiscalMonitorReports.EntryPublished) > new Date('2024-08-01')) {\n  var message = `${Imf.fiscalMonitorReports.Title}: The latest fiscal monitor report highlights global economic trends and risks. Read more at ${Imf.fiscalMonitorReports.Link}`;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(Imf.fiscalMonitorReports.Title);\n  Slack.postToChannel.setTitleUrl(Imf.fiscalMonitorReports.Link);\n  Slack.postToChannel.setImageUrl(\"https://example.com/fiscal-monitor-image.jpg\");\n  Slack.postToChannel.setChannel(\"#economics\");\n} else {\n  Slack.postToChannel.skip(\"Does not match the required conditions.\");\n}"
  },
  {
    "intent": "When Caltrain publishes a new update with a title like \"SamTrans and Caltrain Get You to the San Mateo County Fair\" and the entry is published after August 23, 2010, at 11:01 PM, share the update's title, URL, and publication date to the #commuter-alerts Slack channel as a message that includes the title of the entry and a link to the full update.",
    "filter_code": "if (Caltrain.newUpdate.EntryPublished > \"August 23, 2010 at 11:01PM\" && Caltrain.newUpdate.EntryTitle === \"SamTrans and Caltrain Get You to the San Mateo County Fair\") {\n  Slack.postToChannel.setMessage(`New update: ${Caltrain.newUpdate.EntryTitle} - ${Caltrain.newUpdate.EntryUrl} published at ${Caltrain.newUpdate.EntryPublished}`);\n  Slack.postToChannel.setTitle(Caltrain.newUpdate.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Caltrain.newUpdate.EntryUrl);\n  Slack.postToChannel.channel = \"#commuter-alerts\";\n} else {\n  Slack.postToChannel.skip(\"Update does not match criteria.\");\n}"
  },
  {
    "intent": "Post a message to the #general Slack channel with the title \"New FCC Order\" and the link to the order when a new Federal Communications Commission order is published and contains the keyword \"Wireline Competition Bureau\".",
    "filter_code": "if (Fcc.order.PreviewContent.includes(\"Wireline Competition Bureau\")) {\n  Slack.postToChannel.setMessage(Fcc.order.Link);\n  Slack.postToChannel.setTitle(\"New FCC Order\");\n  Slack.postToChannel.setChannel(\"#general\");\n} else {\n  Slack.postToChannel.skip(\"Order does not contain the keyword 'Wireline Competition Bureau'.\");\n}"
  },
  {
    "intent": "When a new post is published on Longreads in the books category with an entry title containing the word \"Launch\" and the author is \"Linden Tibbets\", send a message to the Slack channel \"#productivity\" with the message \"New book alert: {EntryTitle} by {EntryAuthor}\", including a thumbnail URL of the entry's image, and set the title to \"Book Release\" with a link to the entry's URL.",
    "filter_code": "if (Longreads.anyNewPostOnLongreadsInBooks.EntryTitle.includes(\"Launch\") && Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor === \"Linden Tibbets\") {\n  Slack.postToChannel.setMessage(`New book alert: ${Longreads.anyNewPostOnLongreadsInBooks.EntryTitle} by ${Longreads.anyNewPostOnLongreadsInBooks.EntryAuthor}`);\n  Slack.postToChannel.setTitle(\"Book Release\");\n  Slack.postToChannel.setTitleUrl(Longreads.anyNewPostOnLongreadsInBooks.EntryUrl);\n  Slack.postToChannel.setImageUrl(Longreads.anyNewPostOnLongreadsInBooks.EntryImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Does not match the criteria.\");\n}"
  },
  {
    "intent": "Share new updates from the U.S. Energy Information Administration to the #energy-updates channel in Slack, including the entry title, content, and URL, whenever a new entry is published, using the message format \"New energy update: {{EntryTitle}} - {{EntryContent}} - Read more at {{EntryUrl}}\".",
    "filter_code": "Slack.postToChannel.setMessage(\"New energy update: \" + Eia.todayInEnergy.EntryTitle + \" - \" + Eia.todayInEnergy.EntryContent + \" - Read more at \" + Eia.todayInEnergy.EntryUrl);\nSlack.postToChannel.setTitle(Eia.todayInEnergy.EntryTitle);\nSlack.postToChannel.setTitleUrl(Eia.todayInEnergy.EntryUrl);"
  },
  {
    "intent": "When your Fitbit logs new sleep with a total time slept of 8 hours and you woke up at 7:00 AM, show a notification on your Glance Clock with the message \"You slept for 8 hours\" in a gentle animation with a blue color.",
    "filter_code": "if (Fitbit.newSleepLogged.TotalTimeSlept === \"8h 0m\" && Fitbit.newSleepLogged.AwokeAt.includes(\"07:00\")) {\n  Glanceclock.notice.setText(\"You slept for 8 hours\");\n  Glanceclock.notice.setAnimation(\"gentle\");\n  Glanceclock.notice.setColor(\"blue\");\n} else {\n  Glanceclock.notice.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new track is added to the \"Mid-2000s Jamz\" playlist on Spotify by Linden Tibbets, post a message to the \"#music-lovers\" channel on Slack with the track name \"Snow (Hey Oh)\" by Red Hot Chili Peppers, including a link to the track https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO and an image of the album cover https://i.scdn.co/image/60257f94086dfdcaa9730d3959aab66e1ce89f7d, along with the title \"New Jam Added\" and a title URL https://open.spotify.com/playlist/37i9dQZF1DX5trt9i14X7j.",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\" && Spotify.newTrackAddedToPlaylist.AddedBy === \"Linden Tibbets\" && Spotify.newTrackAddedToPlaylist.TrackName === \"Snow (Hey Oh)\" && Spotify.newTrackAddedToPlaylist.ArtistName === \"Red Hot Chili Peppers\") {\n  Slack.postToChannel.setMessage(`New track added: ${Spotify.newTrackAddedToPlaylist.TrackName} by ${Spotify.newTrackAddedToPlaylist.ArtistName}. Listen here: ${Spotify.newTrackAddedToPlaylist.TrackURL}`);\n  Slack.postToChannel.setTitle(\"New Jam Added\");\n  Slack.postToChannel.setTitleUrl(\"https://open.spotify.com/playlist/37i9dQZF1DX5trt9i14X7j\");\n  Slack.postToChannel.setImageUrl(Spotify.newTrackAddedToPlaylist.AlbumCoverURL);\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new photo is posted to the Facebook Page \"The ifttt Office\" with the hashtag #team in its caption, send a message to the Slack channel \"#general\" with the photo's caption \"New team photo!\" and include the full-sized image from the URL http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs229.snc1/7634_567487423564_7302486_33943077_6068537_n.jpg.",
    "filter_code": "if (FacebookPages.newHashtagPhotoFromPage.PageName === \"The ifttt Office\" && FacebookPages.newHashtagPhotoFromPage.Caption.includes(\"#team\")) {\n  Slack.postToChannel.setMessage(\"New team photo!\");\n  Slack.postToChannel.setTitle(\"Team Photo\");\n  Slack.postToChannel.setImageUrl(FacebookPages.newHashtagPhotoFromPage.ImageSource);\n  Slack.postToChannel.setTitleUrl(FacebookPages.newHashtagPhotoFromPage.Link);\n} else {\n  Slack.postToChannel.skip(\"The photo does not match the criteria.\");\n}"
  },
  {
    "intent": "When I receive a new SMS message from an unknown number on my Google Pixel 7 between 08:00 and 18:00, containing the keyword \"urgent\", forward the message text to the Slack channel #business-alerts with the title \"New Urgent Message\" and include a link to the message details at https://example.com/message-details.",
    "filter_code": "if (AndroidMessages.receivedAMessage.FromNumber !== AndroidMessages.contacts.getContact(AndroidMessages.receivedAMessage.ContactName).number\n    && Meta.currentUserTime.hour() >= 8\n    && Meta.currentUserTime.hour() < 18\n    && AndroidMessages.receivedAMessage.Text.toLowerCase().includes(\"urgent\")\n    && AndroidMessages.receivedAMessage.DeviceName === \"Google Pixel 7\") {\n  Slack.postToChannel.setMessage(AndroidMessages.receivedAMessage.Text);\n  Slack.postToChannel.setTitle(\"New Urgent Message\");\n  Slack.postToChannel.setTitleUrl(\"https://example.com/message-details\");\n  Slack.postToChannel.setImageUrl(\"\");\n} else {\n  Slack.postToChannel.skip(\"Does not match the conditions.\");\n}"
  },
  {
    "intent": "Post the latest bills passed by the Texas Legislature that contain the keyword \"education\" to the Slack channel #texas-legislature-updates, including the bill title, URL, and a brief description, every time a new bill is passed between 08:00 and 17:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  var query = \"education\";\n  if (TexasLegislature.todaySPassedBills.EntryContent.includes(query) || TexasLegislature.todaySPassedBills.EntryTitle.includes(query)) {\n    Slack.postToChannel.setMessage(\"New bill passed: \" + TexasLegislature.todaySPassedBills.EntryTitle + \". Read more at \" + TexasLegislature.todaySPassedBills.EntryUrl);\n    Slack.postToChannel.setTitle(TexasLegislature.todaySPassedBills.EntryTitle);\n    Slack.postToChannel.setTitleUrl(TexasLegislature.todaySPassedBills.EntryUrl);\n    Slack.postToChannel.channel = \"#texas-legislature-updates\";\n  } else {\n    Slack.postToChannel.skip(\"Bill does not contain the keyword '\" + query + \"'.\");\n  }\n} else {\n  Slack.postToChannel.skip(\"Outside of active hours (8 AM to 5 PM).\");\n}"
  },
  {
    "intent": "When the total time slept is less than 7.5 hours, as tracked by Fitbit, create a new task in Remember The Milk named \"Get to bed earlier tonight\" with a due time of 10:30 PM to remind yourself to head to bed at a reasonable hour and aim for a full 8 hours of sleep.",
    "filter_code": "if (Fitbit.sleepDurationBelow.TotalTimeSleptInSeconds < 7.5 * 60 * 60) {\n  Rememberthemilk.tasksAdd.setTask(\"Get to bed earlier tonight due:10:30PM\");\n}"
  },
  {
    "intent": "When the City of Tampa's police calls for service mention \"Dale Mabry Highway\" between 08:00 and 17:00, send a message to the Slack channel \"#office-alerts\" with the title \"Police Call Near Office\", including the call type and link to the call detail, such as \"Robbery at 123 Main St - http://tampa.gov/police/call/12345\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  if (Tampa.policeCallsForService.CallDetailHtml.includes(\"Dale Mabry Highway\")) {\n    var message = Tampa.policeCallsForService.CallType + \" at \" + Tampa.policeCallsForService.EntryContent + \" - \" + Tampa.policeCallsForService.Link;\n    Slack.postToChannel.setMessage(message);\n    Slack.postToChannel.setTitle(\"Police Call Near Office\");\n    Slack.postToChannel.setChannel(\"#office-alerts\");\n  } else {\n    Slack.postToChannel.skip(\"Call does not mention Dale Mabry Highway.\");\n  }\n} else {\n  Slack.postToChannel.skip(\"Outside of office hours (08:00 to 17:00).\");\n}"
  },
  {
    "intent": "Post a message to the #commute-alerts channel on Slack between 7:00 AM and 9:00 AM, Monday through Friday, when a new light rail advisory is posted for the Hudson-Bergen line, including the advisory time and a link to the full announcement.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar day = Meta.currentUserTime.day();\n\nif (day == 0 || day == 6) {\n  Slack.postToChannel.skip(\"Not a weekday\");\n}\n\nelse if (hour < 7 || hour > 9) {\n  Slack.postToChannel.skip(\"Not morning commute hours\");\n}\n\nif (NjTransit.newLightRailAdvisory.ContentHtml.indexOf(\"Hudson-Bergen\") === -1) {\n  Slack.postToChannel.skip(\"Advisory not for Hudson-Bergen line\");\n}\n\nSlack.postToChannel.setMessage(\"New light rail advisory posted at \" + NjTransit.newLightRailAdvisory.AdvisoryTimePosted + \": \" + NjTransit.newLightRailAdvisory.Link);\nSlack.postToChannel.setTitle(\"Commuter Alert: Hudson-Bergen Line\");\nSlack.postToChannel.setTitleUrl(NjTransit.newLightRailAdvisory.Link);"
  },
  {
    "intent": "Post a message to the #general channel on Slack with the title \"New Item Created\" and the message \"A new item named {title} has been created in the Cars app by Jim at 2020-07-08T04:17:06+05:00. View the item here: https://podio.com/company/demospace/apps/cool-app/items/4\" whenever a new item is created in the Podio app named \"Cars\".",
    "filter_code": "if (Podio.newAppItem.Title === \"Cars\") {\n  var message = `A new item named ${Podio.newAppItem.Title} has been created in the ${Podio.newAppItem.Title} app by ${Podio.newAppItem.CreatedByName} at ${Podio.newAppItem.CreatedAt}. View the item here: ${Podio.newAppItem.Link}`;\n  Slack.postToChannel.setMessage(message);\n  Slack.postToChannel.setTitle(\"New Item Created\");\n  Slack.postToChannel.setChannel(\"#general\");\n}"
  },
  {
    "intent": "Send a Slack message to the #general channel with the title \"New Call Recording from Biff McIftt\" and the message \"You have a new call recording from Biff McIftt, duration 03:21, on 2020-07-08T04:17:06+05:00\" whenever there is a new call recording in Zoom Phone with an unread status.",
    "filter_code": "if (ZoomPhone.newUserRecording.RecordingStatus === \"unread\") {\n  Slack.postToChannel.setMessage(`You have a new call recording from ${ZoomPhone.newUserRecording.CallerName}, duration ${ZoomPhone.newUserRecording.RecordingDuration}, on ${ZoomPhone.newUserRecording.CallDate}`);\n  Slack.postToChannel.setTitle(`New Call Recording from ${ZoomPhone.newUserRecording.CallerName}`);\n  Slack.postToChannel.setChannel(\"#general\");\n}"
  },
  {
    "intent": "When a new unread voicemail from an external caller is received on Zoom Phone, with a duration of more than 00:01:00 and the callee's name being Biff McIfttt, send a Slack message to the #notifications channel with the title \"New Voicemail\" and the message \"You have a new voicemail from {{caller_name}} at {{call_date}}. The voicemail is {{voicemail_duration}} long.\"",
    "filter_code": "if (ZoomPhone.newUserVoicemail.VoicemailStatus === \"unread\"\n    && ZoomPhone.newUserVoicemail.CalleeName === \"Biff McIfttt\"\n    && ZoomPhone.newUserVoicemail.CallerNumberType === \"external\"\n    && Zeit.parseDuration(ZoomPhone.newUserVoicemail.VoicemailDuration) > Zeit.parseDuration(\"00:01:00\")) {\n  Slack.postToChannel.setTitle(\"New Voicemail\");\n  Slack.postToChannel.setMessage(`You have a new voicemail from ${ZoomPhone.newUserVoicemail.CallerName} at ${ZoomPhone.newUserVoicemail.CallDate}. The voicemail is ${ZoomPhone.newUserVoicemail.VoicemailDuration} long.`);\n  Slack.postToChannel.setChannel(\"#notifications\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Set your Security Mode switch to \"Disarmed\" automatically every day at 7:00 AM, ensuring all Bosma devices are connected and set up properly.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() === 7 && DateAndTime.everyDayAt.CheckTime.minute() === 0) {\n  Bosma.switchSecurityMode.setMode(\"Disarmed\");\n} else {\n  Bosma.switchSecurityMode.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "When a new question is posted on the Ask FSIS forum with the keyword \"food recall\" in the Department of Agriculture channel, send a message to the #food-safety-alerts Slack channel with the entry title, entry content, and a link to the full entry, including an image thumbnail from the USDA website.",
    "filter_code": "if (Usda.newAskfsisEntry.EntryContent.includes(\"food recall\")) {\n  Slack.postToChannel.setMessage(`New question posted: ${Usda.newAskfsisEntry.EntryTitle}\\n${Usda.newAskfsisEntry.EntryContent}\\nRead more: ${Usda.newAskfsisEntry.EntryUrl}`);\n  Slack.postToChannel.setTitle(Usda.newAskfsisEntry.EntryTitle);\n  Slack.postToChannel.setTitleUrl(Usda.newAskfsisEntry.EntryUrl);\n  Slack.postToChannel.setImageUrl(\"https://www.usda.gov/themes/usda/img/usda-logo.png\");\n  Slack.postToChannel.setChannel(\"#food-safety-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Entry does not contain the keyword 'food recall'.\");\n}"
  },
  {
    "intent": "When the Warmup Smart Thermostat is in Sleep mode at my Home location and someone is present, turn off all Philips Hue lights in the Living Room.",
    "filter_code": "if (WarmupSmartThermostat.sleep.location === \"Home\" && WarmupSmartThermostat.sleep.someoneIsPresent) {\n  Hue.turnOnAllHue.skip(\"Sleep mode and someone is present at Home\");\n  Hue.turnOffAllHue.setLights(\"Living Room\");\n}"
  },
  {
    "intent": "When the Jaguar Watches pusher is pressed with a double press type at latitude 55.611947 and longitude 12.978337, send a Slack message to the #operations-alerts channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Urgent Pusher Alert\", title URL \"https://example.com/alert\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map\".",
    "filter_code": "if (JaguarWatches.pusherPressed.Latitude === \"55.611947\" && JaguarWatches.pusherPressed.Longitude === \"12.978337\" && JaguarWatches.pusherPressed.PressType === \"double\") {\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + JaguarWatches.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Urgent Pusher Alert\");\n  Slack.postToChannel.setTitleUrl(\"https://example.com/alert\");\n  Slack.postToChannel.setImageUrl(JaguarWatches.pusherPressed.MapImageUrl);\n} else {\n  Slack.postToChannel.skip(\"Pusher press does not match the specified conditions.\");\n}"
  },
  {
    "intent": "When the pusher is pressed with a double press type at latitude 55.611947 and longitude 12.978337, send a Slack message to the #general channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Pusher Alert\", title URL \"https://ifttt.apps-kronaby.com/map\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map_image\".",
    "filter_code": "if (LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.Longitude === \"12.978337\" && LotusWatches.pusherPressed.PressType === \"double\") {\n  Slack.postToChannel.setChannel(\"#general\");\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + LotusWatches.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Pusher Alert\");\n  Slack.postToChannel.setTitleUrl(\"https://ifttt.apps-kronaby.com/map\");\n  Slack.postToChannel.setImageUrl(\"https://ifttt.apps-kronaby.com/map_image\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Festina Watches pusher is pressed with a double press type at latitude 55.611947 and longitude 12.978337, send a Slack message to the #operations-alerts channel with the message \"Pusher pressed at 2020-07-08T04:17:06+05:00\", title \"Alert: Pusher Pressed\", title URL \"https://ifttt.apps-kronaby.com/map\", and thumbnail URL \"https://ifttt.apps-kronaby.com/map_image\".",
    "filter_code": "if (FestinaWatches.pusherPressed.Latitude === \"55.611947\" && FestinaWatches.pusherPressed.Longitude === \"12.978337\" && FestinaWatches.pusherPressed.PressType === \"double\") {\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n  Slack.postToChannel.setMessage(\"Pusher pressed at \" + FestinaWatches.pusherPressed.PressedAt);\n  Slack.postToChannel.setTitle(\"Alert: Pusher Pressed\");\n  Slack.postToChannel.setTitleUrl(\"https://ifttt.apps-kronaby.com/map\");\n  Slack.postToChannel.setImageUrl(\"https://ifttt.apps-kronaby.com/map_image\");\n} else {\n  Slack.postToChannel.skip(\"Pusher press does not match the specified conditions.\");\n}"
  },
  {
    "intent": "Set your Security Mode to \"Home\" automatically every day at 7:00 AM for the family \"My Household\".",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour === 7 && minute === 0) {\n  Bosma.switchSecurityMode.setMode(\"Home\");\n  Bosma.switchSecurityMode.setFamily(\"My Household\");\n} else {\n  Bosma.switchSecurityMode.skip(\"Not the scheduled time.\");\n}"
  },
  {
    "intent": "When I wake up, as detected by my Fitbit, read aloud the total time I slept, which is 8 hours and 0 minutes, using my Tochie Speaker named \"Living Room Speaker\" with the gentle chime.",
    "filter_code": "TochieSpeaker.ttsSpeaker.setText(\"You slept for \" + Fitbit.newSleepLogged.TotalTimeSlept);\nTochieSpeaker.ttsSpeaker.setChime(\"gentle\");\nTochieSpeaker.ttsSpeaker.setDeviceId(\"Living Room Speaker\");"
  },
  {
    "intent": "When my child sleeps for 8 hours or more, as tracked by Fitbit, boost them £5 in their RoosterMoney pot named \"Sleep Rewards\" with the description \"Great job sleeping well!\" and assign it to my child, Emily.",
    "filter_code": "if (parseFloat(Fitbit.sleepDurationBelow.TotalTimeSlept) >= 8) {\n  Roostermoney.boost.setAmount(\"5\");\n  Roostermoney.boost.setPot(\"Sleep Rewards\");\n  Roostermoney.boost.setDescription(\"Great job sleeping well!\");\n  Roostermoney.boost.setChild(\"Emily\");\n} else {\n  Roostermoney.boost.skip(\"Sleep duration is less than 8 hours.\");\n}"
  },
  {
    "intent": "When a 3-digit trigger code is entered as \"123\" during a call to the Woopla phone number +16282222790 from my phone number +49203987654321, and the recording transcript contains the keyword \"URGENT\", post a voice message with the title \"New Urgent Voice Message\" and the message \"Hello team, this is a new urgent voice message\" to the Slack channel #operations-alerts.",
    "filter_code": "if (Woopla.triggerRecording.TriggerCode === \"123\" && Woopla.triggerRecording.CalledNumber === \"+16282222790\" && Woopla.triggerRecording.PhoneNumber === \"+49203987654321\" && Woopla.triggerRecording.RecordingTranscript.includes(\"URGENT\")) {\n  Slack.postToChannel.setMessage(\"Hello team, this is a new urgent voice message\");\n  Slack.postToChannel.setTitle(\"New Urgent Voice Message\");\n  Slack.postToChannel.setChannel(\"#operations-alerts\");\n} else {\n  Slack.postToChannel.skip(\"Conditions not met for posting the urgent voice message.\");\n}"
  },
  {
    "intent": "When a new post is published in the NAACP news, share the entry title, content, and image URL in the #general Slack channel with the message \"New update from NAACP: {{EntryTitle}} - {{EntryContent}}\", including the entry's image if available.",
    "filter_code": "Slack.postToChannel.setMessage(\"New update from NAACP: \" + Naacp.newPostInNaacpNews.EntryTitle + \" - \" + Naacp.newPostInNaacpNews.EntryContent);\nSlack.postToChannel.setTitle(Naacp.newPostInNaacpNews.EntryTitle);\nSlack.postToChannel.setTitleUrl(Naacp.newPostInNaacpNews.EntryUrl);\nSlack.postToChannel.setImageUrl(Naacp.newPostInNaacpNews.EntryImageUrl);"
  },
  {
    "intent": "When the market closes, send a signal to my Das Keyboard device named \"Office Keyboard\" with the zone set to the number 1 key, colored in red, and display the message \"Market Close: GOOG stock price is $603.7\" to indicate the closing price of Google Inc. stock.",
    "filter_code": "Daskeyboardq.signals.setName(\"Office Keyboard\");\nDaskeyboardq.signals.setZone(1);\nDaskeyboardq.signals.setColor(\"red\");\nDaskeyboardq.signals.setMessage(\"Market Close: \" + Finance.priceAtCloseStocks.StockTicker + \" stock price is $\" + Finance.priceAtCloseStocks.Price);\nDaskeyboardq.signals.setDevice(\"Office Keyboard\");"
  },
  {
    "intent": "Create a new Trello card titled \"New Fiscal Monitor Report\" on the \"Economic Analysis\" board, in the \"To-Do\" list, at the top position, with the description \"A new Fiscal Monitor report has been published by the International Monetary Fund: http://example.com/imf-report\", and assign it to @johnDoe and @janeSmith, applying the labels \"IMF\" and \"Fiscal Monitor\".",
    "filter_code": "Trello.createCard.setTitle(\"New Fiscal Monitor Report\");\nTrello.createCard.setListName(\"To-Do\");\nTrello.createCard.setPos(\"top\");\nTrello.createCard.setDescription(\"A new Fiscal Monitor report has been published by the International Monetary Fund: \" + Imf.fiscalMonitorReports.Link);\nTrello.createCard.setMembers(\"@johnDoe, @janeSmith\");\nTrello.createCard.setLabels(\"IMF, Fiscal Monitor\");\nTrello.createCard.setBoard(\"Economic Analysis\");"
  },
  {
    "intent": "Monitor the stock price of Google Inc. (GOOG) and send a signal to the Das Keyboard device named \"Office Keyboard\" with the name \"Google Stock Rise\" when its price rises by 10%, coloring the center zone in red (#FF0000) with a blink effect, displaying the message \"Google stock has risen by 10%\".",
    "filter_code": "if (Finance.percentageRiseStocks.StockTicker === \"GOOG\" && Finance.percentageRiseStocks.PercentageChange >= 10) {\n  Daskeyboardq.signals.setName(\"Google Stock Rise\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setMessage(\"Google stock has risen by 10%\");\n  Daskeyboardq.signals.setEffect(\"blink\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met for Google stock rise signal.\");\n}"
  },
  {
    "intent": "Monitor the stock price of Google Inc. (GOOG) and send a signal to the Das Keyboard device named \"Office Keyboard\" with the name \"Google Stock Alert\" when it drops by 10%, coloring the center zone red, displaying the message \"Google stock price has dropped\", and applying a breathe effect.",
    "filter_code": "if (Finance.percentageRiseStocks.StockTicker === \"GOOG\" && Finance.percentageRiseStocks.PercentageChange <= -10) {\n  Daskeyboardq.signals.setName(\"Google Stock Alert\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"Google stock price has dropped\");\n  Daskeyboardq.signals.setEffect(\"breathe\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When the mold risk level from my Home - Living Room device exceeds 3, send a notification with the message \"Mold risk is high in the living room, current level is {mold risk level}\".",
    "filter_code": "if (Airthings.moldRiskAbove.MoldRisk > 3 && Airthings.moldRiskAbove.Device === \"Home - Living Room\") {\n  IfNotifications.sendNotification.setMessage(\"Mold risk is high in the living room, current level is \" + Airthings.moldRiskAbove.MoldRisk);\n} else {\n  IfNotifications.sendNotification.skip(\"Mold risk level is not high or device does not match.\");\n}"
  },
  {
    "intent": "When a new track is uploaded to SoundCloud with the search query \"electronic music\" and has tags including \"house\" or \"techno\", download the track from the URL provided in the track's SoundCloud page to the put.io folder with ID 12345.",
    "filter_code": "if (Soundcloud.newTrackFromSearch.search_query === \"electronic music\" && (Soundcloud.newTrackFromSearch.Tags.includes(\"house\") || Soundcloud.newTrackFromSearch.Tags.includes(\"techno\"))) {\n  Putio.newTransfer.setUrl(Soundcloud.newTrackFromSearch.TrackUrl);\n  Putio.newTransfer.setFolderId(12345);\n} else {\n  Putio.newTransfer.skip(\"Does not match the search query or tags.\");\n}"
  },
  {
    "intent": "Remove the currently running event on the Living Room Thermostat at 5:00 PM every day, provided the event is not a mandatory demand response event.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"5:00 PM\";\nif (currentTime === targetTime) {\n  Ecobee.resumeProgram.setThermostat(\"Living Room Thermostat\");\n  if (!Ecobee.isMandatoryDemandResponseEvent()) {\n    Ecobee.resumeProgram.skip(\"Removing currently running event on Living Room Thermostat at 5:00 PM.\");\n  }\n}"
  },
  {
    "intent": "Activate the \"Evening Mode\" scene on Automate Shades at sunset, when the temperature is above 18°C and the condition is Sunny, to close all shades in the living room.",
    "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  Automateshades.activateScene.setSceneID(\"Evening Mode\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not above 18°C or condition is not Sunny.\");\n}"
  },
  {
    "intent": "Activate the 'Morning Sunrise' scene in Automate Shades at sunrise when the temperature is above 18°C and the condition is Sunny, to open the shades.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 18 && Weather.sunRises.Condition === \"Sunny\") {\n  Automateshades.activateScene.setSceneID(\"Morning Sunrise\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not above 18°C or condition is not Sunny.\");\n}"
  },
  {
    "intent": "Activate the 'Close Shades' scene on Automate Shades when the temperature rises above 85 degrees Fahrenheit in New York City, as reported by Weather Underground, to keep the room cool on a hot day.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 85) {\n  Automateshades.activateScene.setSceneID(\"Close Shades\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not above 85 degrees Fahrenheit.\");\n}"
  },
  {
    "intent": "When the current UV index rises above 8 at your home location, activate the \"Close Shades\" scene on Automate Shades.",
    "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 8) {\n  Automateshades.activateScene.setSceneID(\"Close Shades\");\n} else {\n  Automateshades.activateScene.skip(\"UV index is not above 8.\");\n}"
  },
  {
    "intent": "When the sunset at my location is between 16:00 and 20:00 and the current temperature in degrees Fahrenheit is below 70, lower my \"Living Room Shades\" to position 100.",
    "filter_code": "var sunsetHour = new Date(Weather.sunSets.SunsetAt).getHours();\nvar tempFahrenheit = Weather.sunSets.TempFahrenheit;\nif (sunsetHour >= 16 && sunsetHour <= 20 && tempFahrenheit < 70) {\n  Soma.setShadePosition.setPosition(\"100\");\n  Soma.setShadePosition.setDeviceName(\"Living Room Shades\");\n} else {\n  Soma.setShadePosition.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When the temperature rises above 85°F in New York, activate the Living Room shades to close at 50% during sunny weather conditions.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 85 &&\n    Weather.currentTemperatureRisesAbove.Location === \"New York\" &&\n    Weather.currentTemperatureRisesAbove.Condition === \"Sunny\") {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"50\");\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Temperature or location conditions not met.\");\n}"
  },
  {
    "intent": "When the temperature rises above 82°F (28°C) in New York, and the current weather condition is Sunny, activate the \"Close Shades\" scene on your Automate Shades system to close all shades.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 82 && Weather.currentTemperatureRisesAbove.Condition === \"Sunny\") {\n  AutomateshadesV2.activateScene.setSceneID(\"Close Shades\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Temperature is not above 82°F or condition is not Sunny.\");\n}"
  },
  {
    "intent": "When the sunrise is at 6:00 AM in New York and the current weather condition is Sunny with a temperature of 64°F, automatically roll up the shades of the device named \"Living Room Shades\" to 0% closure so that you can wake up with the sun.",
    "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === 6 &&\n    Weather.sunRises.Condition === \"Sunny\" &&\n    Weather.sunRises.TempFahrenheit === \"64\" &&\n    location === \"New York\") {\n  Soma.setShadePosition.setPosition(\"0\");\n} else {\n  Soma.setShadePosition.skip(\"Conditions not met to roll up shades.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor detects your presence and you arrive home at any time, automatically open the Living Room shades using the Somfy myLink \"Open\" command.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  SomfyMylink.move.setCommand(\"Open\");\n  SomfyMylink.move.setTarget(\"Living Room shades\");\n}"
  },
  {
    "intent": "When the Bedroom sensor detects you've left home, close the Living Room shades using Somfy myLink with the \"Close\" command.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\" && SmartthingsV2.newPresentSmartthings.ArrivedAt.includes(\"left\")) {\n  SomfyMylink.move.setCommand(\"Close\");\n  SomfyMylink.move.setTarget(\"Living Room shades\");\n} else {\n  SomfyMylink.move.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "When the UV index at my location rises above 8, activate the \"Close All Shades\" scene on Automate Shades to close all shades.",
    "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 8) {\n  AutomateshadesV2.activateScene.setSceneID(\"Close All Shades\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"UV index is not above 8.\");\n}"
  },
  {
    "intent": "Adjust the living room shade and the bedroom shade to 50% at 07:30 every day.",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:30\";\nif (time === targetTime) {\n  LinkShades.setPercent.setPercent(\"50\");\n  LinkShades.setPercent.skip(\"Adjusted shades to 50% at \" + targetTime);\n} else {\n  LinkShades.setPercent.skip(\"Not adjustment time: \" + time + \". Expected \" + targetTime);\n}"
  },
  {
    "intent": "Close the \"Living Room Shades\" in the SOMA Smart Home system to position 100 when the Weather Underground forecast indicates the UV index at the location of \"Home\" is going to rise above 2, ensuring the room remains cool between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar uvIndex = Weather.currentUvIndexRisesAbove.UvIndex;\nvar location = \"Home\";\nvar deviceName = \"Living Room Shades\";\n\nif (location === \"Home\" && uvIndex > 2 && hour >= 7 && hour <= 19) {\n  Soma.setShadePosition.setPosition(\"100\");\n} else {\n  Soma.setShadePosition.skip(\"UV index is not above 2 or outside of active hours.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, activate the \"Morning Sunrise\" scene on Automate Shades and the \"Warm White\" scene on Philips Hue lights.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Automateshades.activateScene.setSceneID(\"Morning Sunrise\");\n  PhilipsHue.activateScene.setSceneID(\"Warm White\");\n} else {\n  Automateshades.activateScene.skip(\"Location does not match.\");\n  PhilipsHue.activateScene.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Activate the 'Evening Shades' scene in Automate Shades V2 at sunset, when the current temperature is 72 degrees Fahrenheit and the condition is Sunny, to close all shades in the living room and kitchen areas.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  AutomateshadesV2.activateScene.setsceneID(\"Evening Shades\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Temperature or condition does not match.\");\n}"
  },
  {
    "intent": "Activate the 'Morning Sunrise' scene on Automate Shades V2 at sunrise, when the current weather condition is Sunny and the temperature is above 18°C, to open the shades in the living room.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && parseFloat(Weather.sunRises.TempCelsius) > 18) {\n  AutomateshadesV2.activateScene.setSceneID(\"Morning Sunrise\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Conditions not met: either not sunny or temperature below 18°C.\");\n}"
  },
  {
    "intent": "Close the \"Living Room Shades\" Automate Shades device when the wind speed rises above 10 mph at the location of \"Home\" with a wind direction of \"North\", using the Weather Underground weather data.",
    "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 10 && Weather.windSpeedRisesAbove.WindDirection === \"North\" && Weather.windSpeedRisesAbove.location === \"Home\") {\n  Automateshades.moveTiltShade.setDeviceID(\"Living Room Shades\");\n  Automateshades.moveTiltShade.setMovementPosition(100);\n  Automateshades.moveTiltShade.skip();\n} else {\n  Automateshades.moveTiltShade.skip(\"Conditions not met to close the shades.\");\n}"
  },
  {
    "intent": "Close the living room shade every day at 7:00 PM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar desiredTime = \"7:00 PM\";\nif (checkTime !== desiredTime) {\n  LinkShades.close.skip(\"Not the desired time to close the shade.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor detects a temperature above 78°F, run the Good Morning scene on Automate Shades V2.",
    "filter_code": "if (SmartthingsV2.temperatureRisesAboveSmartthings.DeviceName !== \"Bedroom sensor\") {\n  AutomateshadesV2.activateScene.skip(\"Device is not Bedroom sensor\");\n} else if (SmartthingsV2.temperatureRisesAboveSmartthings.TemperatureFahrenheit <= 78) {\n  AutomateshadesV2.activateScene.skip(\"Temperature is not above 78°F\");\n} else {\n  var sceneID = \"Good Morning\";\n  AutomateshadesV2.activateScene.setsceneID(sceneID);\n}"
  },
  {
    "intent": "When the brightness measured by the Workshop light sensor drops below 100 lux, send a command to the Living Room shades to open via Somfy myLink.",
    "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.Brightness < 100 && SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Workshop light sensor\") {\n  SomfyMylink.move.setCommand(\"open\");\n  SomfyMylink.move.setTarget(\"Living Room shades\");\n} else {\n  SomfyMylink.move.skip(\"Brightness is not below 100 lux or device is not Workshop light sensor.\");\n}"
  },
  {
    "intent": "When the UV index in New York exceeds 11, activate the \"Sunset\" scene on Automate Shades V2.",
    "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 11) {\n  AutomateshadesV2.activateScene.setSceneID(\"Sunset\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"UV index is not above 11.\");\n}"
  },
  {
    "intent": "When the Drawing room bulb WeMo light turns on, lower the shades in the Living Room to 20% openness.",
    "filter_code": "if (WemoLighting.capabilityTurnOn.WemoLEDName === \"Drawing room bulb\") {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"20\");\n  AutomateshadesV2.activateRoom.skip();\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Not the Drawing room bulb.\");\n}"
  },
  {
    "intent": "Activate the 'Morning Sunrise' scene on Automate Shades to raise the shades when the 'Living Room Lamp' WeMo light turns off between 07:00 and 09:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (WemoLighting.capabilityTurnOff.WemoLEDName === \"Living Room Lamp\" && hour >= 7 && hour < 9) {\n  Automateshades.activateScene.setSceneID(\"Morning Sunrise\");\n} else {\n  Automateshades.activateScene.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Close the \"Living Room Shades\" Somfy-powered shades when the brightness measured by the \"Workshop light sensor\" device rises above 800 lux.",
    "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Workshop light sensor\" && SmartthingsV2.brightnessRisesAboveSmartthings.Brightness > 800) {\n  SomfyMylink.move.setCommand(\"close\");\n  SomfyMylink.move.setTarget(\"Living Room Shades\");\n} else {\n  SomfyMylink.move.skip(\"Conditions not met to close the shades.\");\n}"
  },
  {
    "intent": "When the WeMo light in the living room, with a macaddress of 00:11:22:33:44:55, has dimmed to 20%, move the shade with deviceid 1234567890 to 50% open and tilt it to 45 degrees.",
    "filter_code": "if (WemoLighting.capabilityBrightnessChange.WemoLEDDevice === \"living room\" &&\n    WemoLighting.capabilityBrightnessChange.macaddress === \"00:11:22:33:44:55\" &&\n    WemoLighting.capabilityBrightnessChange.subType === \"20%\") {\n  AutomateshadesV2.moveTiltShade.setMovementPosition(\"50\");\n  AutomateshadesV2.moveTiltShade.setTiltPosition(\"45\");\n  AutomateshadesV2.moveTiltShade.skip();\n} else {\n  AutomateshadesV2.moveTiltShade.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the WeMo light named \"Living Room Lamp\" turns on, lower the Automate shades in the room with ID \"Kitchen\" to 20% openness.",
    "filter_code": "if (WemoLighting.capabilityTurnOn.WemoLEDName === \"Living Room Lamp\") {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"20\");\n  AutomateshadesV2.activateRoom({roomID: \"Kitchen\"});\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Wrong WeMo light\");\n}"
  },
  {
    "intent": "Close the shades of your \"Living Room Window\" to position 100 when the brightness measured by the \"Workshop light sensor\" drops below 50 lux.",
    "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.Brightness < 50 && SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Workshop light sensor\") {\n  if (Soma.setShadePosition.setPosition !== \"100\" || Soma.setShadePosition.device_name !== \"Living Room Window\") {\n    Soma.setShadePosition.setPosition(\"100\");\n    Soma.setShadePosition.device_name = \"Living Room Window\";\n  }\n} else {\n  Soma.setShadePosition.skip(\"Brightness is above 50 lux or device name does not match.\");\n}"
  },
  {
    "intent": "Activate the 'Morning Scene' in Automate when the brightness measured by the 'Living Room Sensor' device in SmartThings rises above 800 lux.",
    "filter_code": "if (SmartthingsV2.brightnessRisesAboveSmartthings.DeviceName === \"Living Room Sensor\" && parseInt(SmartthingsV2.brightnessRisesAboveSmartthings.Brightness) > 800) {\n  AutomateshadesV2.activateScene.setSceneID(\"Morning Scene\");\n} else {\n  AutomateshadesV2.activateScene.skip(\"Conditions not met to activate the Morning Scene.\");\n}"
  },
  {
    "intent": "When the Drawing room bulb WeMo light turns on, activate the \"Evening Scene\" Automate Shade's scene to lower your shades.",
    "filter_code": "if (WemoLighting.capabilityTurnOn.WemoLEDName === \"Drawing room bulb\") {\n  Automateshades.activateScene.setSceneID(\"Evening Scene\");\n} else {\n  Automateshades.activateScene.skip(\"Not the Drawing room bulb.\");\n}"
  },
  {
    "intent": "When a SafeTrek alarm is triggered at a location like 38.6532135, -90.313673, call the phone number +14255551234 and play a message in English saying \"Hello, this is an emergency alert from Jane Doe. Please check the location https://www.google.com/maps/place/St.+Louis,+MO/@38.6532135,-90.313673,12z for more information.\"",
    "filter_code": "Woopla.ttsCallAny.setPhone_number(\"+14255551234\");\nWoopla.ttsCallAny.setLanguage(\"English\");\nWoopla.ttsCallAny.setTts(\"Hello, this is an emergency alert from \" + Safetrek.alertTriggered.Name + \". Please check the location \" + Safetrek.alertTriggered.LocationMapUrl + \" for more information.\");"
  },
  {
    "intent": "When the weather forecast for your location calls for rain tomorrow, with a high temperature of 18°C and a low of 10°C, and the condition is expected to be cloudy, send a push notification with the message \"Remember to bring an umbrella tomorrow, as there's a chance of rain in your area, with temperatures ranging from 10°C to 18°C.\"",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempCelsius === \"18\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempCelsius === \"10\" &&\n    Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Cloudy\") {\n  IfNotifications.sendNotification.setMessage(\"Remember to bring an umbrella tomorrow, as there's a chance of rain in your area, with temperatures ranging from 10°C to 18°C.\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions do not meet the criteria for sending a notification.\");\n}"
  },
  {
    "intent": "When the weather forecast for New York City calls for snow tomorrow with a high temperature below 32°F and a low temperature above 25°F, send a notification with the message \"Snow day ahead! Check the 5-day forecast here: http://www.weather.com/weather/5-day/GMXX1273\" to my phone.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Snow\"\n    && parseFloat(Weather.tomorrowsForecastCallsFor.HighTempFahrenheit) < 32\n    && parseFloat(Weather.tomorrowsForecastCallsFor.LowTempFahrenheit) > 25) {\n  IfNotifications.sendNotification.setMessage(\"Snow day ahead! Check the 5-day forecast here: \" + Weather.tomorrowsForecastCallsFor.ForecastUrl);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions do not meet snow day criteria.\");\n}"
  },
  {
    "intent": "If tomorrow's forecast in New York calls for rain with a high temperature of 60°F and a low of 50°F, add an event to my personal Google Calendar saying \"Bring umbrella and wear waterproof shoes to work\" at 7:00 AM.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"50\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Bring umbrella and wear waterproof shoes to work at 7:00 AM\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Tomorrow's forecast does not call for rain with specified temperatures.\");\n}"
  },
  {
    "intent": "When tomorrow's forecast in New York calls for snow with a high temperature above 32°F and a low temperature below 25°F, make a VoIP call to my device with the message \"Tomorrow will be snowy in New York, with a high of 35°F and a low of 20°F, check the 5-day forecast at http://www.weather.com/weather/5-day/GMXX1273 for more details.\"",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Snow\"\n    && parseFloat(Weather.tomorrowsForecastCallsFor.HighTempFahrenheit) > 32\n    && parseFloat(Weather.tomorrowsForecastCallsFor.LowTempFahrenheit) < 25) {\n  VoipCalls.callMyDevice.setMessage(\"Tomorrow will be snowy in New York, with a high of \"\n                                    + Weather.tomorrowsForecastCallsFor.HighTempFahrenheit\n                                    + \"°F and a low of \"\n                                    + Weather.tomorrowsForecastCallsFor.LowTempFahrenheit\n                                    + \"°F, check the 5-day forecast at \"\n                                    + Weather.tomorrowsForecastCallsFor.ForecastUrl\n                                    + \" for more details.\");\n} else {\n  VoipCalls.callMyDevice.skip(\"Tomorrow's forecast does not match the specified conditions.\");\n}"
  },
  {
    "intent": "When tomorrow's forecast calls for sunny weather with a high temperature of 75°F (24°C) in New York City, send a notification to my phone with the message \"Don't forget your sneakers, perfect walking day ahead!\" including a link to the five-day forecast at http://www.weather.com/weather/5-day/GMXX1273.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Sunny\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"75\" &&\n    Weather.tomorrowsForecastCallsFor.Location === \"New York City\") {\n  IfNotifications.sendNotification.setMessage(\"Don't forget your sneakers, perfect walking day ahead! Check the 5-day forecast: \" + Weather.tomorrowsForecastCallsFor.ForecastUrl);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met for notification.\");\n}"
  },
  {
    "intent": "Every day at 6:00 PM, add tomorrow's weather forecast to my iOS Calendar as an all-day event with the title \"Tomorrow's Weather\", including notes about the expected high and low temperatures in both Fahrenheit and Celsius, along with a link to the detailed forecast.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (hour === 18 && minute === 0) {\n  IosCalendar.createCalendarEvent.setStart_date(Weather.tomorrowsWeatherAtTime.TomorrowsDate);\n  IosCalendar.createCalendarEvent.setTitle(\"Tomorrow's Weather\");\n  IosCalendar.createCalendarEvent.setDuration(\"all-day\");\n  var notes = \"Tomorrow's forecast: \" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \". High of \" + Weather.tomorrowsWeatherAtTime.HighTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"°C), low of \" + Weather.tomorrowsWeatherAtTime.LowTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"°C). Detailed forecast: \" + Weather.tomorrowsWeatherAtTime.ForecastUrl;\n  IosCalendar.createCalendarEvent.setNotes(notes);\n  IosCalendar.createCalendarEvent.setUrl(Weather.tomorrowsWeatherAtTime.ForecastUrl);\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Not 6:00 PM\");\n}"
  },
  {
    "intent": "When tomorrow's forecast in New York calls for rain, add a task named \"Bring umbrella to work\" due by 08:00 to Remember The Milk.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") {\n  var taskName = \"Bring umbrella to work\";\n  var dueTime = \"08:00\";\n  Rememberthemilk.tasksAdd.setTask(taskName + \" due by \" + dueTime);\n}"
  },
  {
    "intent": "If Weather Underground reports rain condition tomorrow in New York City, with a high temperature of 72°F and a low of 60°F, do not water my backyard zone 1 and front yard zone 2 for today and the next 2 days using my Netro device named \"Home Lawn\", skipping watering with the reason \"rain expected\".",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\"\n    && Weather.tomorrowsForecastCallsFor.Location === \"New York City\"\n    && Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"72\"\n    && Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"60\") {\n  Netro.water.setZone(\"1\");\n  Netro.water.skip(\"rain expected\");\n  setTimeout(function() {\n    Netro.water.setZone(\"2\");\n    Netro.water.skip(\"rain expected\");\n  }, 86400000); // 24 hours\n  setTimeout(function() {\n    Netro.water.setZone(\"1\");\n    Netro.water.skip(\"rain expected\");\n  }, 172800000); // 48 hours\n  setTimeout(function() {\n    Netro.water.setZone(\"2\");\n    Netro.water.skip(\"rain expected\");\n  }, 172800000); // 48 hours\n}"
  },
  {
    "intent": "Set my Moonside lights to the raining light scene when tomorrow's weather forecast from Weather Underground calls for rain in New York City.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\") {\n  Moonside.setRainingScene();\n} else {\n  Moonside.setRainingScene.skip(\"Tomorrow's forecast does not call for rain.\");\n}"
  },
  {
    "intent": "Get tomorrow's weather report for New York City at 07:00, including the high and low temperatures in Celsius, and receive a notification with the forecast details and an image of the expected weather condition.",
    "filter_code": "if (Weather.tomorrowsWeatherAtTime.Location === \"New York City\" && Weather.tomorrowsWeatherAtTime.Time === \"07:00\") {\n  var message = \"Tomorrow's weather in New York City: \" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \", High: \" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"°C, Low: \" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"°C\";\n  IfNotifications.sendNotification.setMessage(message);\n  IfNotifications.sendNotification.setAttachment(Weather.tomorrowsWeatherAtTime.ConditionImageURL);\n} else {\n  IfNotifications.sendNotification.skip(\"Location or time does not match.\");\n}"
  },
  {
    "intent": "Send a rich notification with the title \"Low Temperature Alert\" and the message \"Tomorrow's low temperature in New York is expected to drop below 5°C\" if tomorrow's low temperature in degrees Celsius drops below 5°C in New York, including a link to the five-day forecast at http://www.weather.com/weather/5-day/GMXX1273 and an image of the sunny weather condition at http://www.ifttt.com/weather/sunny.png.",
    "filter_code": "if (Weather.tomorrowsLowDropsBelow.LowTempCelsius < 5) {\n  IfNotifications.sendRichNotification\n    .setTitle(\"Low Temperature Alert\")\n    .setMessage(`Tomorrow's low temperature in New York is expected to drop below 5°C`)\n    .setLinkUrl(\"http://www.weather.com/weather/5-day/GMXX1273\")\n    .setImageUrl(\"http://www.ifttt.com/weather/sunny.png\");\n} else {\n  IfNotifications.sendRichNotification.skip(\"Tomorrow's low temperature is not below 5°C\");\n}"
  },
  {
    "intent": "Add a task titled \"Rain Tomorrow\" with note \"Remember to carry an umbrella\" and tag \"weather\" to my Toodledo to-do list in the \"Personal\" folder with high priority if tomorrow's forecast in New York calls for rain, with a high temperature of 60°F and a low of 45°F.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Toodledo.addTask.setTitle(\"Rain Tomorrow\");\n  Toodledo.addTask.setNote(\"Remember to carry an umbrella\");\n  Toodledo.addTask.setTag(\"weather\");\n  Toodledo.addTask.setFolder(\"Personal\");\n  Toodledo.addTask.setPriority(\"High\");\n} else {\n  Toodledo.addTask.skip(\"Conditions do not meet the criteria.\");\n}"
  },
  {
    "intent": "When the weather forecast for tomorrow in New York indicates snow, send a Signal to the Das Keyboard 5Q device named \"Snow Alert\" with the zone set to the numeric keypad, colored in blue, and displaying the message \"Snow expected tomorrow\".",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.Condition === \"Snow\" && Weather.currentConditionIs.Location === \"New York\") {\n  Daskeyboardq.signals.setName(\"Snow Alert\");\n  Daskeyboardq.signals.setZone(\"Numeric Keypad\");\n  Daskeyboardq.signals.setColor(\"Blue\");\n  Daskeyboardq.signals.setMessage(\"Snow expected tomorrow\");\n} else {\n  Daskeyboardq.signals.skip(\"Tomorrow's forecast does not indicate snow in New York.\");\n}"
  },
  {
    "intent": "When the forecast for New York City indicates that tomorrow's weather will be rainy with a high temperature of 60°F and a low of 45°F, send a Signal to the Das Keyboard Q device named \"Weather Alert\" with a red color on the center zone, displaying the message \"Rain Tomorrow\" with a breathing effect.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\" &&\n    Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\" &&\n    Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"45\") {\n  Daskeyboardq.signals.setName(\"Weather Alert\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"Rain Tomorrow\");\n  Daskeyboardq.signals.setEffect(\"breathing\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a rich notification with tomorrow's weather report for New York City at 7:00 AM, including the forecast URL http://www.weather.com/weather/5-day/GMXX1273, tomorrow's condition which is expected to be Sunny, the condition image URL http://www.ifttt.com/weather/sunny.png, high temperature of 75°F (24°C), and low temperature of 60°F (16°C), with a link to the full forecast and an image of the weather condition.",
    "filter_code": "IfNotifications.sendRichNotification\n  .setMessage(\"Tomorrow's weather in New York City: \" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \", High of \" + Weather.tomorrowsWeatherAtTime.HighTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"°C), Low of \" + Weather.tomorrowsWeatherAtTime.LowTempFahrenheit + \"°F (\" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"°C)\")\n  .setTitle(\"Tomorrow's Weather Forecast\")\n  .setLinkUrl(Weather.tomorrowsWeatherAtTime.ForecastUrl)\n  .setImageUrl(Weather.tomorrowsWeatherAtTime.ConditionImageURL);"
  },
  {
    "intent": "Send a message to the #general channel in Microsoft Teams at 4:00 PM with the subject \"Tomorrow's Weather Forecast\" and the body \"Tomorrow's weather will be Sunny with a high of 72°F (18°C) and a low of 50°F (10°C).\", marked as Normal urgency, using the forecast from Weather Underground for the location of New York City.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour == 16) {\n  var messageSubject = \"Tomorrow's Weather Forecast\";\n  var tomorrowsCondition = Weather.tomorrowsWeatherAtTime.TomorrowsCondition;\n  var highTempFahrenheit = Weather.tomorrowsWeatherAtTime.HighTempFahrenheit;\n  var highTempCelsius = Weather.tomorrowsWeatherAtTime.HighTempCelsius;\n  var lowTempFahrenheit = Weather.tomorrowsWeatherAtTime.LowTempFahrenheit;\n  var lowTempCelsius = Weather.tomorrowsWeatherAtTime.LowTempCelsius;\n  var messageBody = \"Tomorrow's weather will be \" + tomorrowsCondition + \" with a high of \" + highTempFahrenheit + \"°F (\" + highTempCelsius + \"°C) and a low of \" + lowTempFahrenheit + \"°F (\" + lowTempCelsius + \"°C).\";\n  var messageUrgency = \"Normal\";\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(messageSubject);\n  MicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(messageUrgency);\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not 4:00 PM\");\n}"
  },
  {
    "intent": "If Weather Underground reports that it is raining now at my location, with a current condition of \"Rain\" and a temperature of 18°C, then do not water my yard using the Netro device named \"Front Yard Sprinkler\" for the next 2 days, skipping watering for zones 1 and 2.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.TempCelsius === \"18\") {\n  Netro.water.setZone(\"1\");\n  Netro.water.skip(\"Raining now, skipping watering for zone 1.\");\n  Netro.water.setZone(\"2\");\n  Netro.water.skip(\"Raining now, skipping watering for zone 2.\");\n}"
  },
  {
    "intent": "When the Netatmo weather station named \"My Rain gauge\" reports a rainfall amount exceeding 5mm, skip watering my yard's zone 1 for the next 2 days using my Netro device.",
    "filter_code": "if (Netatmo.rainTodayAmount.DeviceName === \"My Rain gauge\" && parseFloat(Netatmo.rainTodayAmount.MeasuredRainfallMM) > 5) {\n  Netro.water.setZone(\"1\");\n  Netro.water.skip(\"Rainfall exceeding 5mm, skipping watering for the next 2 days.\");\n}"
  },
  {
    "intent": "If tomorrow's forecast in New York calls for rain with a high temperature of 60°F and a low of 50°F, then stop the irrigation scenario in the backyard using the Gewiss Smart Home IoT system.",
    "filter_code": "if (Weather.tomorrowsForecastCallsFor.TomorrowsCondition === \"Rain\"\n    && Weather.tomorrowsForecastCallsFor.HighTempFahrenheit === \"60\"\n    && Weather.tomorrowsForecastCallsFor.LowTempFahrenheit === \"50\") {\n  GewissHome.invokeMethodAlwaysOnBehaviour.skip(\"Tomorrow's forecast in New York calls for rain with a high of 60°F and a low of 50°F, stopping irrigation scenario.\");\n}"
  },
  {
    "intent": "Every time your Fitbit syncs on a new day, such as 2023-03-08, append a new row to the Google Sheets spreadsheet named \"Fitness Tracker\" with the previous day's stats, including total steps taken (e.g., 10500), total floors climbed (e.g., 12), total calories burned from BMR and activity (e.g., 2200), total elevation gained in meters (e.g., 250), total distance covered in kilometers (e.g., 6.5), sedentary minutes (e.g., 25), lightly active minutes (e.g., 30), fairly active minutes (e.g., 20), and very active minutes (e.g., 15), using the formatted row \"Date|||Total Steps|||Total Floors Climbed|||Total Calories Burned|||Total Elevation Gained|||Total Distance Covered|||Sedentary Minutes|||Lightly Active Minutes|||Fairly Active Minutes|||Very Active Minutes\" and placing the file in the Drive folder path \"Fitness/2023\".",
    "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Fitness Tracker\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"Fitness/2023\");\nvar formattedRow = Fitbit.newDailyActivitySummary.Date + \"|||\" +\n                   Fitbit.newDailyActivitySummary.TotalSteps + \"|||\" +\n                   Fitbit.newDailyActivitySummary.TotalFloorsClimbed + \"|||\" +\n                   Fitbit.newDailyActivitySummary.TotalCaloriesBurned + \"|||\" +\n                   Fitbit.newDailyActivitySummary.TotalElevationGained + \" \" +\n                   Fitbit.newDailyActivitySummary.TotalElevationGainedUnit + \"|||\" +\n                   Fitbit.newDailyActivitySummary.TotalDistanceCovered + \" \" +\n                   Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit + \"|||\" +\n                   Fitbit.newDailyActivitySummary.SedentaryMinutes + \"|||\" +\n                   Fitbit.newDailyActivitySummary.LightlyActiveMinutes + \"|||\" +\n                   Fitbit.newDailyActivitySummary.FairlyActiveMinutes + \"|||\" +\n                   Fitbit.newDailyActivitySummary.VeryActiveMinutes;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);"
  },
  {
    "intent": "Create a new journal entry in my personal Day One journal titled \"Daily Fitness Summary\" when I receive a daily activity summary from Fitbit, including the total steps taken, which should be at least 10000, the total distance covered in kilometers, which should be more than 5 kilometers, and the total calories burned, which should be over 2000, and add tags like \"fitness\", \"workout\", and \"health\" to the entry, along with an image of my daily activity chart from Fitbit.",
    "filter_code": "if (Fitbit.newDailyActivitySummary.TotalSteps >= 10000 &&\n    parseFloat(Fitbit.newDailyActivitySummary.TotalDistanceCovered) > 5 &&\n    Fitbit.newDailyActivitySummary.TotalCaloriesBurned > 2000) {\n  DayOne.createJournalEntry.setBody(\"Total steps taken: \" + Fitbit.newDailyActivitySummary.TotalSteps +\n                                    \"\\nTotal distance covered: \" + Fitbit.newDailyActivitySummary.TotalDistanceCovered + \" \" +\n                                    Fitbit.newDailyActivitySummary.TotalDistanceCoveredUnit +\n                                    \"\\nTotal calories burned: \" + Fitbit.newDailyActivitySummary.TotalCaloriesBurned);\n  DayOne.createJournalEntry.setTags(\"fitness, workout, health\");\n  // Assuming the image URL of the daily activity chart from Fitbit is available as an ingredient\n  // Replace 'Fitbit.dailyActivityChartImage' with the actual Filter code for the image URL\n  DayOne.createJournalEntry.setImage(Fitbit.dailyActivityChartImage);\n} else {\n  DayOne.createJournalEntry.skip(\"Daily fitness goals not met.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, start the Watch TV activity on Harmony.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Incorrect gesture or device.\");\n}"
  },
  {
    "intent": "End the \"Watch TV\" Harmony Home activity when a Triple Knock gesture is detected on device KNC1-W-00000088.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Harmony.endActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.endActivity.skip(\"Invalid gesture or device.\");\n}"
  },
  {
    "intent": "When I press the button widget on my home screen at a location with latitude 37.8267 and longitude -122.4230, prioritize the online activity named \"Gaming\" on my TP-Link router named \"Living Room Router\".",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  TplinkRouter.prioritizeOnlineActivity.setQosModeName(\"Gaming\");\n  TplinkRouter.prioritizeOnlineActivity.setRouterName(\"Living Room Router\");\n} else {\n  TplinkRouter.prioritizeOnlineActivity.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When I complete a run of at least 5 kilometers or a ride of at least 10 kilometers on Strava, save $2 toward my Qapital goal named \"Fitness Fund\" using the round-up method.",
    "filter_code": "if ((Strava.newActivityByYou.ActivityType === \"Run\" && parseFloat(Strava.newActivityByYou.DistanceMeters) / 1000 >= 5) ||\n    (Strava.newActivityByYou.ActivityType === \"Ride\" && parseFloat(Strava.newActivityByYou.DistanceMeters) / 1000 >= 10)) {\n  Qapital.saveTowardGoal.setGoalName(\"Fitness Fund\");\n  Qapital.saveTowardGoal.setAmount(2);\n  Qapital.saveTowardGoal.setSaveMethod(\"Round-up\");\n} else {\n  Qapital.saveTowardGoal.skip(\"Activity distance or type does not meet criteria.\");\n}"
  },
  {
    "intent": "When a motion detection event with the text \"Motion Tag: Detected!\" is triggered at any time, start the Harmony Home \"Watch TV\" activity.",
    "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Motion detection event text does not match.\");\n}"
  },
  {
    "intent": "When my Fitbit tracker syncs for the first time today with yesterday's stats available, showing I took 10,000 steps, climbed 5 floors, burned 1,800 calories, gained 100 meters in elevation, covered a distance of 4 kilometers, spent 30 minutes being sedentary, 45 minutes lightly active, 20 minutes fairly active, and 15 minutes very active, then display a notice on my Glance Clock with the message \"Yesterday's Activity Summary: 10,000 steps, 5 floors, 1,800 calories burned, 100m elevation gain, 4km distance, 30min sedentary, 45min lightly active, 20min fairly active, 15min very active\" in a blue animation with a beep sound.",
    "filter_code": "if (\n  Fitbit.newDailyActivitySummary.TotalSteps === \"10,000\" &&\n  Fitbit.newDailyActivitySummary.TotalFloorsClimbed === \"5\" &&\n  Fitbit.newDailyActivitySummary.TotalCaloriesBurned === \"1,800\" &&\n  Fitbit.newDailyActivitySummary.TotalElevationGained === \"100\" &&\n  Fitbit.newDailyActivitySummary.TotalDistanceCovered === \"4\" &&\n  Fitbit.newDailyActivitySummary.SedentaryMinutes === \"30\" &&\n  Fitbit.newDailyActivitySummary.LightlyActiveMinutes === \"45\" &&\n  Fitbit.newDailyActivitySummary.FairlyActiveMinutes === \"20\" &&\n  Fitbit.newDailyActivitySummary.VeryActiveMinutes === \"15\"\n) {\n  Glanceclock.notice.setText(\n    `Yesterday's Activity Summary: ${Fitbit.newDailyActivitySummary.TotalSteps} steps, ${Fitbit.newDailyActivitySummary.TotalFloorsClimbed} floors, ${Fitbit.newDailyActivitySummary.TotalCaloriesBurned} calories burned, ${Fitbit.newDailyActivitySummary.TotalElevationGained}m elevation gain, ${Fitbit.newDailyActivitySummary.TotalDistanceCovered}km distance, ${Fitbit.newDailyActivitySummary.SedentaryMinutes}min sedentary, ${Fitbit.newDailyActivitySummary.LightlyActiveMinutes}min lightly active, ${Fitbit.newDailyActivitySummary.FairlyActiveMinutes}min fairly active, ${Fitbit.newDailyActivitySummary.VeryActiveMinutes}min very active`\n  );\n  Glanceclock.notice.setAnimation(\"blue\");\n  Glanceclock.notice.setSound(\"beep\");\n} else {\n  Glanceclock.notice.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Start the \"Watch TV\" Harmony activity when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value 1 of \"Green\" and the event was created after 19:00.",
    "filter_code": "var hour = new Date(Apilio.iftttActionReports.CreatedAt).getHours();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" && Apilio.iftttActionReports.ApilioValue1 === \"Green\" && hour >= 19) {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Conditions not met to start Watch TV activity.\");\n}"
  },
  {
    "intent": "When the Logitech POP button named \"Living Room\" with the identifier \"a0:e6:f8:8c:f5:33\" is short pressed and has a battery level of 100, run the My Leviton activity named \"Good Morning\".",
    "filter_code": "if (LogitechPop.shortPress.ButtonId === \"a0:e6:f8:8c:f5:33\" && LogitechPop.shortPress.Battery === \"100\" && LogitechPop.shortPress.Name === \"Living Room\") {\n  MyLeviton.runActivity.setname(\"Good Morning\");\n} else {\n  MyLeviton.runActivity.skip(\"Conditions not met for running 'Good Morning' activity.\");\n}"
  },
  {
    "intent": "End the Harmony Home \"Watch TV\" activity when a motion is detected, as indicated by the text \"Motion Tag: Detected!\" in the MESH event triggered at 08:00.",
    "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\" && Mesh.events.TriggeredAt.hour() === 8) {\n  Harmony.endActivity(\"Watch TV\");\n} else {\n  Harmony.endActivity.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Check on all household members daily at 8:00 PM and start a chat with them in Zuluchat to confirm who's at home, using the \"Family Check-in\" type.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (hour === 20 && minute === 0) {\n  Zuluhood.startChat.setHome(\"All\");\n  Zuluhood.startChat.setType(\"Family Check-in\");\n} else {\n  Zuluhood.startChat.skip(\"Not the scheduled check-in time.\");\n}"
  },
  {
    "intent": "When a call from my landline phone number, 14155551234, is missed on my Google Pixel 7 Android phone, between 07:00 and 22:00, immediately raise an alarm to my whole Tribe and all my Watchers on Zuluhood, selecting \"My Home\" as the home and \"Security Alert\" as the type.",
    "filter_code": "var hour = new Date(AndroidPhone.missAPhoneCall.OccurredAt).getHours();\nif (AndroidPhone.missAPhoneCall.FromNumber === \"14155551234\"\n    && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\"\n    && hour >= 7 && hour < 22) {\n  Zuluhood.raiseAlarm.setHome(\"My Home\");\n  Zuluhood.raiseAlarm.setType(\"Security Alert\");\n} else {\n  Zuluhood.raiseAlarm.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When an SMS is received on my Google Pixel 7 from the number 14155551234 containing the keyword \"URGENT\" between 07:00 and 19:00, raise an alarm in Zuluhood with the home selected as \"My Primary Residence\" and the type set to \"Security Breach\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (AndroidMessages.receivedAMessage.DeviceName === \"Google Pixel 7\"\n      && AndroidMessages.receivedAMessage.FromNumber === \"14155551234\") {\n    if (AndroidMessages.receivedAMessage.Text.includes(\"URGENT\")) {\n      Zuluhood.raiseAlarm.setHome(\"My Primary Residence\");\n      Zuluhood.raiseAlarm.setType(\"Security Breach\");\n    } else {\n      Zuluhood.raiseAlarm.skip(\"No URGENT keyword found in the message.\");\n    }\n  } else {\n    Zuluhood.raiseAlarm.skip(\"Message not from specified device or number.\");\n  }\n} else {\n  Zuluhood.raiseAlarm.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "If the indoor temperature at my Living Room thermostat drops below 65°F, ask John and Sarah to check on my home, see if all windows and doors are closed properly, and inform me directly in Zuluhood.",
    "filter_code": "if (Ecobee.indoorTemperatureBelow.IndoorTemperature < 65 && Ecobee.indoorTemperatureBelow.ThermostatName === \"Living Room\") {\n  Zuluhood.startChat.setHome(\"My Home\");\n  Zuluhood.startChat.setType(\"Check and Inform\");\n  Zuluhood.startChat.setMessage(\"Please check if all windows and doors are closed properly at my home and inform me directly in Zuluhood.\");\n  Zuluhood.startChat.setPeople([\"John\", \"Sarah\"]);\n} else {\n  Zuluhood.startChat.skip(\"Indoor temperature is not below 65°F or thermostat is not Living Room.\");\n}"
  },
  {
    "intent": "When NASA JPL's news feed shares a new discovery with the title containing the keyword \"Mars\" and the entry is published between 07:00 and 19:00, send me an email with the subject \"New NASA Discovery: {EntryTitle}\" and the body \"{EntryContent}\" to my inbox, including a link to the full entry at {EntryUrl}.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Feed.newFeedItem.EntryTitle.includes(\"Mars\")) {\n    Email.sendMeEmail.setSubject(\"New NASA Discovery: \" + Feed.newFeedItem.EntryTitle);\n    var body = Feed.newFeedItem.EntryContent + \"<br><br>Read the full entry at: <a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryUrl + \"</a>\";\n    Email.sendMeEmail.setBody(body);\n  } else {\n    Email.sendMeEmail.skip(\"Entry title does not contain 'Mars'.\");\n  }\n} else {\n  Email.sendMeEmail.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new breaking news alert is published by Fox News with a subject like \"WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET\" and the header reads \"Fox News Breaking News Alert\", between 07:00 and 22:00, trigger my Philips Hue lights in the living room to start blinking.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 22) {\n  if (Foxnews.breakingNewsFnc.Header === \"Fox News Breaking News Alert\" && Foxnews.breakingNewsFnc.Body.includes(\"WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET\")) {\n    Hue.blinkAllHue.setLights(\"Living room\");\n  } else {\n    Hue.blinkAllHue.skip(\"Does not match the specific breaking news alert.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "When a breaking news alert is published on Fox News with a subject like \"WATCH LIVE: Vice President Mike Pence speaks at CPAC at 7:30 p.m. ET\" and the header indicates it's a \"Fox News Breaking News Alert\", send a Signal to the Das Keyboard Q device named \"NewsAlert\" to the zone \"All Keys\" with the color \"Red\" and include the message \"Breaking News: {subject of the alert}\".",
    "filter_code": "if (Foxnews.breakingNewsFnc.Header === \"Fox News Breaking News Alert\" && Foxnews.breakingNewsFnc.Body.includes(\"WATCH LIVE\")) {\n  Daskeyboardq.signals.setName(\"NewsAlert\");\n  Daskeyboardq.signals.setZone(\"All Keys\");\n  Daskeyboardq.signals.setColor(\"Red\");\n  Daskeyboardq.signals.setMessage(\"Breaking News: \" + Foxnews.breakingNewsFnc.Body);\n} else {\n  Daskeyboardq.signals.skip(\"Does not match the breaking news criteria.\");\n}"
  },
  {
    "intent": "When you miss an incoming call from Jon Snow on your Google Pixel 7 between 08:00 and 20:00, blink all your LIFX lights red at maximum brightness 3 times, even if they are turned off.",
    "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"Jon Snow\"\n    && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\"\n    && Meta.currentUserTime.hour() >= 8\n    && Meta.currentUserTime.hour() < 20) {\n  Lifx.blink.setSelector(\"all\");\n  Lifx.blink.setColor(\"red\");\n  Lifx.blink.setBrightness(\"maximum\");\n  Lifx.blink.setNumberOfWeeks(3);\n  Lifx.blink.setBlinkIfOff(\"yes\");\n} else {\n  Lifx.blink.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a missed call is detected on my Google Pixel 7 at any time, and the caller's number is +14155551234, immediately initiate a call back to that number using Woopla phone calls and play a text message saying \"Hello, this is a call back from Jon Snow\" in English.",
    "filter_code": "if (AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\" && AndroidPhone.missAPhoneCall.FromNumber === \"+14155551234\") {\n  Woopla.ttsCallAny.setPhoneNumber(AndroidPhone.missAPhoneCall.FromNumber);\n  Woopla.ttsCallAny.setTts(\"Hello, this is a call back from Jon Snow\");\n  Woopla.ttsCallAny.setLanguage(\"English\");\n} else {\n  Woopla.ttsCallAny.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a message to the #general channel in Microsoft Teams with the subject \"Missed Call from Jon Snow\" and the body \"You missed a call from Jon Snow at 04:17:06 on your Google Pixel 7 from the number 14155551234\" when you miss a phone call from Jon Snow on your Android device, marking the message as Urgent.",
    "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"Jon Snow\") {\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Missed Call from Jon Snow\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(\"You missed a call from Jon Snow at \" + AndroidPhone.missAPhoneCall.OccurredAt + \" on your \" + AndroidPhone.missAPhoneCall.DeviceName + \" from the number \" + AndroidPhone.missAPhoneCall.FromNumber);\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Urgent\");\n} else {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not a call from Jon Snow.\");\n}"
  },
  {
    "intent": "When a call from Jon Snow to my Google Pixel 7 is missed at any time, turn off the Living Room Light.",
    "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"Jon Snow\" && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\") {\n  Lexi.deviceturnOff.setDevicelist(\"Living Room Light\");\n} else {\n  Lexi.deviceturnOff.skip(\"Conditions not met to turn off the Living Room Light.\");\n}"
  },
  {
    "intent": "Create a new task in Google Tasks with the title \"Missed call from Biff McIfttt\" and notes \"Call from 12345678 on 2020-07-08T04:17:06+05:00, call duration was 100 seconds and the call result was no answer\" when a missed call is logged in Zoom Phone with the caller name being Biff McIfttt, caller number being 12345678, and callee number being 12345678, and set the due date to today.",
    "filter_code": "if (ZoomPhone.newCallInCallLog.CallResult === \"no_answer\"\n    && ZoomPhone.newCallInCallLog.CallerName === \"Biff McIfttt\"\n    && ZoomPhone.newCallInCallLog.CallerNumber === \"12345678\"\n    && ZoomPhone.newCallInCallLog.CalleeNumber === \"12345678\") {\n  GoogleTasks.addTaskToTasklist.setTaskTitle(\"Missed call from \" + ZoomPhone.newCallInCallLog.CallerName);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(\"Call from \" + ZoomPhone.newCallInCallLog.CallerNumber\n                                            + \" on \" + ZoomPhone.newCallInCallLog.CallDate\n                                            + \", call duration was \" + ZoomPhone.newCallInCallLog.CallDuration\n                                            + \" seconds and the call result was \" + ZoomPhone.newCallInCallLog.CallResult);\n  GoogleTasks.addTaskToTasklist.setDueDate(Meta.currentUserTime.today());\n} else {\n  GoogleTasks.addTaskToTasklist.skip(\"Conditions not met for creating a task.\");\n}"
  },
  {
    "intent": "Create a new task in MeisterTask's \"Daily Tasks\" section when an event containing the keyword \"Meeting\" starts within 15 minutes on my primary Google Calendar, and include the event title, description, and location in the task description.",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.calendar === \"primary\" &&\n    (GoogleCalendar.eventFromSearchStarts.Title.includes(\"Meeting\") ||\n     GoogleCalendar.eventFromSearchStarts.Description.includes(\"Meeting\") ||\n     GoogleCalendar.eventFromSearchStarts.Where.includes(\"Meeting\")) &&\n    GoogleCalendar.eventFromSearchStarts.offset === \"15 minutes\") {\n  var taskDescription = \"Event Title: \" + GoogleCalendar.eventFromSearchStarts.Title + \"\\n\";\n  taskDescription += \"Event Description: \" + GoogleCalendar.eventFromSearchStarts.Description + \"\\n\";\n  taskDescription += \"Event Location: \" + GoogleCalendar.eventFromSearchStarts.Where;\n  Meistertask.createATask.setSectionId(\"Daily Tasks\");\n  Meistertask.createATask.setTaskName(GoogleCalendar.eventFromSearchStarts.Title);\n  Meistertask.createATask.setTaskDescription(taskDescription);\n} else {\n  Meistertask.createATask.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Create a new event in my iOS Calendar named \"Meeting with New Contact\" whenever a new contact is added to my address book, setting the location to \"Conference Room\" and the start date to \"Tomorrow at 2pm\" with a duration of 60 minutes, adding notes that include the contact's name, phone number, and email, and setting an alert for 15 minutes before the event.",
    "filter_code": "IosCalendar.createCalendarEvent.setTitle(\"Meeting with New Contact\");\nIosCalendar.createCalendarEvent.setLocation(\"Conference Room\");\nIosCalendar.createCalendarEvent.setStart_DATE(\"Tomorrow at 2pm\");\nIosCalendar.createCalendarEvent.setDuration(\"60\");\nvar notes = \"Name: \" + IosContacts.newContactAdded.Name + \", Phone Number: \" + IosContacts.newContactAdded.PhoneNumber + \", Email: \" + IosContacts.newContactAdded.Email;\nIosCalendar.createCalendarEvent.setNotes(notes);\nIosCalendar.createCalendarEvent.setAlert(\"15 minutes\");"
  },
  {
    "intent": "When I check in using Swarm by Foursquare at a venue like the Sydney Opera House, with a shout like \"Hanging out with my mates!\", add an event to my iOS Calendar named \"Social Events\" titled \"Checked in at Sydney Opera House\", located at \"Sydney Opera House\", starting at the time of check-in, lasting for 60 minutes, with notes including the shout message and venue URL http://4sq.com/67UmdR, and set an alert 15 minutes before the event.",
    "filter_code": "if (Foursquare.anyNewCheckin.VenueName === \"Sydney Opera House\" && Foursquare.anyNewCheckin.Shout === \"Hanging out with my mates!\") {\n  IosCalendar.createCalendarEvent.setNotes(`Checked in at ${Foursquare.anyNewCheckin.VenueName}! Shout: ${Foursquare.anyNewCheckin.Shout}. Venue URL: ${Foursquare.anyNewCheckin.VenueUrl}`);\n  IosCalendar.createCalendarEvent.setTitle(`Checked in at ${Foursquare.anyNewCheckin.VenueName}`);\n  IosCalendar.createCalendarEvent.setLocation(Foursquare.anyNewCheckin.VenueName);\n  IosCalendar.createCalendarEvent.setStart_date(Foursquare.anyNewCheckin.CheckinDate);\n  IosCalendar.createCalendarEvent.setDuration(\"60\");\n  IosCalendar.createCalendarEvent.setAlert(\"15 minutes\");\n  IosCalendar.createCalendarEvent.setUrl(Foursquare.anyNewCheckin.VenueUrl);\n} else {\n  IosCalendar.createCalendarEvent.skip(`Does not match the Sydney Opera House with shout \"Hanging out with my mates!\"`);\n}"
  },
  {
    "intent": "Create a Google Calendar event titled \"New Contact: {Name}\" on the day a new contact is added to my iOS address book, using the \"dinner with {Name} at {Address} tomorrow 7pm\" quick add format and selecting my default calendar.",
    "filter_code": "GoogleCalendar.quickAddEvent.setQuickAdd(\"dinner with \" + IosContacts.newContactAdded.Name + \" at \" + IosContacts.newContactAdded.Address + \" tomorrow 7pm\");"
  },
  {
    "intent": "Send a daily email digest at 8pm with the title \"Today's New Calendar Events\" to summarize all events added to the \"Personal\" calendar since the previous day, including event titles, start dates, end dates, locations, and notes.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 20) {\n  var title = \"Today's New Calendar Events\";\n  EmailDigest.sendDailyEmail.setTitle(title);\n\n  var message = \"\";\n  if (IosCalendar.newCalendarEvent.CalendarName === \"Personal\") {\n    message += \"<b>\" + IosCalendar.newCalendarEvent.Title + \"</b><br>\";\n    message += \"Start date: \" + IosCalendar.newCalendarEvent.StartDate + \"<br>\";\n    message += \"End date: \" + IosCalendar.newCalendarEvent.EndDate + \"<br>\";\n    message += \"Location: \" + IosCalendar.newCalendarEvent.Location + \"<br>\";\n    message += \"Notes: \" + IosCalendar.newCalendarEvent.Notes + \"<br><br>\";\n  }\n\n  EmailDigest.sendDailyEmail.setMessage(message);\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"8pm\");\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not 8pm\");\n}"
  },
  {
    "intent": "When a new contact named, for example, \"John Doe\" with the phone number \"(123) 456-7890\" and email \"john.doe@example.com\" is added to your iOS Contacts, automatically append a new row to a Google Sheets spreadsheet named \"Contacts Backup\" in the folder path \"IFTTT/AddressBook\", with a formatted row containing the contact's name, phone number, email, address \"123 Main St\", organization \"Example Inc.\", job title \"Manager\", date added \"January 1, 2024 at 12:00PM\", and any associated notes like \"Important client\".",
    "filter_code": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Contacts Backup\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/AddressBook\");\nvar formattedRow = IosContacts.newContactAdded.Name + \"|||\" + IosContacts.newContactAdded.PhoneNumber + \"|||\" + IosContacts.newContactAdded.Email + \"|||\" + IosContacts.newContactAdded.Address + \"|||\" + IosContacts.newContactAdded.Organization + \"|||\" + IosContacts.newContactAdded.JobTitle + \"|||\" + IosContacts.newContactAdded.DateAdded + \"|||\" + IosContacts.newContactAdded.Notes;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);"
  },
  {
    "intent": "When a reminder titled \"Pick up groceries\" with notes \"Get 1% for Rick\" and priority \"Medium\" is completed in the \"Shopping\" list, quickly add an event to my Google Calendar named \"Personal\" with the text \"Picked up groceries\".",
    "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Pick up groceries\"\n    && IosReminders.anyReminderCompleted.Notes === \"Get 1% for Rick\"\n    && IosReminders.anyReminderCompleted.Priority === \"Medium\"\n    && IosReminders.anyReminderCompleted.List === \"Shopping\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Picked up groceries\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Reminder does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new contact named John Doe with the phone number (123) 456-7890 and email john.doe@example.com is added to my iOS contacts, append a new row to my Google Sheets spreadsheet named \"Contacts\" in the folder path \"IFTTT/Contacts\", with the formatted row \"John Doe|||(123) 456-7890|||john.doe@example.com\".",
    "filter_code": "if (IosContacts.newContactAdded.Name === \"John Doe\" && IosContacts.newContactAdded.PhoneNumber === \"(123) 456-7890\" && IosContacts.newContactAdded.Email === \"john.doe@example.com\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Contacts\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Contacts\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\"John Doe|||(123) 456-7890|||john.doe@example.com\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Contact does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new calendar event titled \"Morning Exercise\" is created in my Personal calendar on the iOS Calendar, starting at 7:00 AM and ending at 8:00 AM, with notes containing the phrase \"Let's get moving\", send an activity to Welltory with data source set to \"Other\", data type set to \"Workout\", begin time set to the event's start date, end time set to the event's end date, and a comment saying \"Daily morning jog\".",
    "filter_code": "if (IosCalendar.newCalendarEvent.Title === \"Morning Exercise\" &&\n    IosCalendar.newCalendarEvent.CalendarName === \"Personal\" &&\n    IosCalendar.newCalendarEvent.StartDate.includes(\"7:00 AM\") &&\n    IosCalendar.newCalendarEvent.EndDate.includes(\"8:00 AM\") &&\n    IosCalendar.newCalendarEvent.Notes.includes(\"Let's get moving\")) {\n  Welltory.sendActivity\n    .setDataSource(\"Other\")\n    .setDataType(\"Workout\")\n    .setBegin(IosCalendar.newCalendarEvent.StartDate)\n    .setEnd(IosCalendar.newCalendarEvent.EndDate)\n    .setComment(\"Daily morning jog\");\n} else {\n  Welltory.sendActivity.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a reminder titled \"Pick up milk\" with notes \"Get 1% for Rick\" in the list \"Shopping\" and priority \"Medium\" is completed, create a new calendar event on the \"Personal\" calendar titled \"Completed: Pick up milk\", located at \"Home\", starting at the completion time of the reminder, lasting for 30 minutes, with notes \"Reminder completed: Get 1% for Rick\", and an alert set for 5 minutes before the event.",
    "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Pick up milk\" &&\n    IosReminders.anyReminderCompleted.Notes === \"Get 1% for Rick\" &&\n    IosReminders.anyReminderCompleted.List === \"Shopping\" &&\n    IosReminders.anyReminderCompleted.Priority === \"Medium\") {\n  IosCalendar.createCalendarEvent.setTitle(\"Completed: Pick up milk\");\n  IosCalendar.createCalendarEvent.setLocation(\"Home\");\n  IosCalendar.createCalendarEvent.setStartDate(IosReminders.anyReminderCompleted.CompletedDate);\n  IosCalendar.createCalendarEvent.setDuration(\"30 minutes\");\n  IosCalendar.createCalendarEvent.setNotes(\"Reminder completed: Get 1% for Rick\");\n  IosCalendar.createCalendarEvent.setAlert(\"5 minutes\");\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Reminder does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Every morning at 6 AM, add the weather report for New York City to my personal Google Calendar, including today's high and low temperatures in Fahrenheit, the current condition, and a URL to a five-day forecast.",
    "filter_code": "var currentTime = Meta.currentUserTime.hour();\nif (currentTime === 6) {\n  var location = \"New York City\";\n  var highTempFahrenheit = Weather.currentWeatherAtTime.HighTempFahrenheit;\n  var lowTempFahrenheit = Weather.currentWeatherAtTime.LowTempFahrenheit;\n  var currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  var forecastUrl = Weather.currentWeatherAtTime.ForecastUrl;\n\n  var quickAddText = `Weather report for ${location}: High of ${highTempFahrenheit}°F, Low of ${lowTempFahrenheit}°F, currently ${currentCondition}. Five-day forecast: ${forecastUrl}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not 6 AM\");\n}"
  },
  {
    "intent": "Every day at 7:00 AM, create a new event in the calendar named \"Weather Updates\" with the title \"Today's Weather\", location \"New York\", start date \"today\", duration \"30 minutes\", and notes \"High of 75°F, low of 50°F, sunny with a UV index of 6\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var title = \"Today's Weather\";\n  var location = \"New York\";\n  var startDate = \"today\";\n  var duration = \"30 minutes\";\n  var notes = \"High of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F, low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F, \" + Weather.currentWeatherAtTime.TodaysCondition + \" with a UV index of \" + Weather.currentWeatherAtTime.UvIndex;\n  IosCalendar.createCalendarEvent.setNotes(notes);\n  IosCalendar.createCalendarEvent.setTitle(title);\n  IosCalendar.createCalendarEvent.setLocation(location);\n  IosCalendar.createCalendarEvent.setStartDate(startDate);\n  IosCalendar.createCalendarEvent.setDuration(duration);\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "When an item titled like \"My Weekend Plans\" with a URL such as http://example.com and tags including \"travel, leisure\" is archived in Pocket between 08:00 and 20:00, quickly add an event to my default Google Calendar with the text \"Read article: My Weekend Plans about travel and leisure at http://example.com\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 20) {\n  if (Pocket.newReadItemRil.Title === \"My Weekend Plans\"\n    && Pocket.newReadItemRil.Url === \"http://example.com\"\n    && Pocket.newReadItemRil.Tags.includes(\"travel\")\n    && Pocket.newReadItemRil.Tags.includes(\"leisure\")) {\n    GoogleCalendar.quickAddEvent.setQuickAdd(\"Read article: My Weekend Plans about travel and leisure at http://example.com\");\n  } else {\n    GoogleCalendar.quickAddEvent.skip(\"Article does not match the specified criteria.\");\n  }\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Outside of active hours (08:00 to 20:00).\");\n}"
  },
  {
    "intent": "When a new photo is added to the \"Vacation\" album on my iOS device, send an event to Welltory with the data source set to \"iOS Photos\", data type set to \"Travel\", datetime set to the photo's taken date and time, value set to 1, and comment set to \"New vacation photo\".",
    "filter_code": "if (IosPhotos.newPhotoInCameraRoll.AlbumName === \"Vacation\") {\n  Welltory.sendEvent\n    .setDataSource(\"iOS Photos\")\n    .setDataType(\"Travel\")\n    .setDatetime(IosPhotos.newPhotoInCameraRoll.TakenDate)\n    .setValue(\"1\")\n    .setComment(\"New vacation photo\");\n} else {\n  Welltory.sendEvent.skip(\"Photo not added to Vacation album.\");\n}"
  },
  {
    "intent": "When a new task with a due date is created on Toodledo in the \"School To-dos\" folder with high priority and tags including \"homework, programming\", and the due date is before 19:00, automatically add an event to my Google Calendar's \"Personal\" calendar using Quick Add with the text \"Task due: Finish today's homework at 18:00\".",
    "filter_code": "if (Toodledo.taskAdded.Folder === \"School To-dos\"\n    && Toodledo.taskAdded.Priority === \"High\"\n    && Toodledo.taskAdded.Tags.includes(\"homework\")\n    && Toodledo.taskAdded.Tags.includes(\"programming\")) {\n  var dueDate = new Date(Toodledo.taskAdded.DueDate);\n  if (dueDate.getHours() < 19) {\n    GoogleCalendar.quickAddEvent.setQuickAdd(`Task due: ${Toodledo.taskAdded.Title} at ${dueDate.toLocaleTimeString()}`);\n    GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n  } else {\n    GoogleCalendar.quickAddEvent.skip(\"Due date is after 19:00.\");\n  }\n}"
  },
  {
    "intent": "When a new reminder is added to the \"Shopping\" list in iOS Reminders with a priority of \"Medium\" and title containing the keyword \"URGENT\", send an event to Welltory with the data source set to \"iOS Reminders\", data type set to \"Tasks\", datetime set to the reminder's created date, value set to \"1\", and comment set to \"New urgent shopping task added\".",
    "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\" && IosReminders.newReminderAdded.Priority === \"Medium\" && IosReminders.newReminderAdded.Title.includes(\"URGENT\")) {\n  Welltory.sendEvent\n    .setData_source(\"iOS Reminders\")\n    .setDataType(\"Tasks\")\n    .setDatetime(IosReminders.newReminderAdded.CreatedDate)\n    .setValue(\"1\")\n    .setComment(\"New urgent shopping task added\");\n} else {\n  Welltory.sendEvent.skip(\"Does not match the shopping list with medium priority and URGENT title.\");\n}"
  },
  {
    "intent": "When a new reminder titled \"Pick up groceries\" with notes \"Get eggs and milk\" is added to the \"Shopping\" list in the iOS Reminders app with a medium priority, add a task named \"Buy groceries at 10am today #shopping\" to Remember The Milk.",
    "filter_code": "if (IosReminders.newReminderAdded.Title === \"Pick up groceries\"\n    && IosReminders.newReminderAdded.Notes === \"Get eggs and milk\"\n    && IosReminders.newReminderAdded.List === \"Shopping\"\n    && IosReminders.newReminderAdded.Priority === \"Medium\") {\n  var currentDate = new Date();\n  var hours = currentDate.getHours();\n  var minutes = currentDate.getMinutes();\n  var taskName = \"Buy groceries at \" + hours + \":\" + minutes + \" today #shopping\";\n  Rememberthemilk.tasksAdd.setTask(taskName);\n} else {\n  Rememberthemilk.tasksAdd.skip(\"Reminder does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new reminder is added to the \"Shopping\" list in the iOS Reminders app with a priority of \"Medium\" and notes containing the keyword \"URGENT\", create a new event on the default calendar in the iOS Calendar app titled \"Reminder: Pick up milk\" starting at the current time, lasting for 60 minutes, and including the note \"Get 1% for Rick\".",
    "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\" && IosReminders.newReminderAdded.Priority === \"Medium\" && IosReminders.newReminderAdded.Notes.includes(\"URGENT\")) {\n  IosCalendar.createCalendarEvent.setTitle(\"Reminder: \" + IosReminders.newReminderAdded.Title);\n  IosCalendar.createCalendarEvent.setStart_date(\"now\");\n  IosCalendar.createCalendarEvent.setDuration(\"60\");\n  IosCalendar.createCalendarEvent.setNotes(IosReminders.newReminderAdded.Notes);\n} else {\n  IosCalendar.createCalendarEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Upload any new photo taken with your iOS device and saved to the \"Vacation\" album to your Unforgettable Me account as a JSON object with \"start_date\" and \"end_date\" fields set to the date the photo was taken, using the augmenter name \"iOSPhotoUpload\".",
    "filter_code": "if (IosPhotos.newPhotoInCameraRoll.AlbumName === \"Vacation\") {\n  var_takenDate = IosPhotos.newPhotoInCameraRoll.TakenDate;\n  UnforgettableMe.uploadData.setBody(JSON.stringify({\n    \"image_url\": IosPhotos.newPhotoInCameraRoll.PublicPhotoURL,\n    \"start_date\": var_takenDate,\n    \"end_date\": var_takenDate\n  }));\n  UnforgettableMe.uploadData.setAugmenterName(\"iOSPhotoUpload\");\n} else {\n  UnforgettableMe.uploadData.skip(\"Photo not in Vacation album.\");\n}"
  },
  {
    "intent": "When a new event is triggered at 07:00 with the text \"Motion Tag: Detected!\" in the MESH app, add an event to my primary Google Calendar with the quick add text \"meeting with John tomorrow 9am\".",
    "filter_code": "if (Mesh.events.TriggeredAt.hour() === 7 && Mesh.events.Text === \"Motion Tag: Detected!\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"meeting with John tomorrow 9am\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Event trigger time or text does not match the specified condition.\");\n}"
  },
  {
    "intent": "When my daily step goal of 10000 steps is reached on Fitbit, log a workout in iOS Health with the activity type set to 'Walking', duration of '60 minutes', energy expended of '225 calories', distance of '5 kilometers', and distance units set to 'Kilometers', starting from the current time.",
    "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  IosHealth.logWorkout.setActivityType(\"Walking\");\n  IosHealth.logWorkout.setDuration(\"60 minutes\");\n  IosHealth.logWorkout.setEnergy(\"225\");\n  IosHealth.logWorkout.setDistance(\"5\");\n  IosHealth.logWorkout.setDistanceUnits(\"Kilometers\");\n}"
  },
  {
    "intent": "Create a Google Calendar event with the task name \"Build the Asana Channel on IFTTT\" and notes \"Make it one of the best on IFTTT!\" when a new task is added to the \"Cool things to do with Asana!\" project in the \"Team Asana\" workspace, using the quick add text \"meeting with Biff McIFTTT tomorrow 10am\" and selecting the calendar \"My Calendar\".",
    "filter_code": "if (Asana.newTaskInProject.ProjectName === \"Cool things to do with Asana!\" &&\n    Asana.newTaskInProject.Workspace === \"Team Asana\" &&\n    Asana.newTaskInProject.TaskName === \"Build the Asana Channel on IFTTT\" &&\n    Asana.newTaskInProject.TaskNotes === \"Make it one of the best on IFTTT!\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"meeting with Biff McIFTTT tomorrow 10am\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"My Calendar\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Track the time spent in meetings and send the duration to Welltory as a 'Meeting' activity when a new calendar event is added to the 'Work' calendar on iOS Calendar, starting at the event's start date and ending at the event's end date, with a comment describing the meeting purpose.",
    "filter_code": "if (IosCalendar.newCalendarEvent.CalendarName === \"Work\") {\n  var startDate = IosCalendar.newCalendarEvent.StartDate;\n  var endDate = IosCalendar.newCalendarEvent.EndDate;\n  var meetingPurpose = IosCalendar.newCalendarEvent.Title;\n\n  Welltory.sendActivity.setBegin(startDate);\n  Welltory.sendActivity.setEnd(endDate);\n  Welltory.sendActivity.setComment(meetingPurpose);\n  Welltory.sendActivity.setDataSource(\"iOS Calendar\");\n  Welltory.sendActivity.setDataType(\"Meeting\");\n} else {\n  Welltory.sendActivity.skip(\"Calendar event is not from 'Work' calendar.\");\n}"
  },
  {
    "intent": "When a reminder titled \"Morning Routine\" is completed in the \"Daily Tasks\" list with a medium priority, send an event to Welltory with the data source as \"iOS Reminders\", data type as \"Productivity\", datetime as the completion date of the reminder, value as 1, and comment as \"Completed morning routine\".",
    "filter_code": "if (IosReminders.anyReminderCompleted.Title === \"Morning Routine\" &&\n    IosReminders.anyReminderCompleted.List === \"Daily Tasks\" &&\n    IosReminders.anyReminderCompleted.Priority === \"Medium\") {\n  Welltory.sendEvent\n    .setData_source(\"iOS Reminders\")\n    .setDataType(\"Productivity\")\n    .setDatetime(IosReminders.anyReminderCompleted.CompletedDate)\n    .setValue(\"1\")\n    .setComment(\"Completed morning routine\");\n}"
  },
  {
    "intent": "When a new episode of the podcast with ShowID \"The Daily\" is released on Spotify, automatically create a 60-minute calendar event in the \"Personal\" calendar on iOS Calendar at 8:00 AM, titled \"Listen to The Daily\", located at \"Home\", with notes \"New episode available\" and URL \"https://open.spotify.com/episode/19TIFzN141JLsIUFVPqS5Q\", setting an alert 15 minutes before the event.",
    "filter_code": "if (Spotify.newEpisode.ShowID === \"The Daily\") {\n  IosCalendar.createCalendarEvent.setTitle(\"Listen to The Daily\");\n  IosCalendar.createCalendarEvent.setLocation(\"Home\");\n  IosCalendar.createCalendarEvent.setStart Date(\"8:00 AM\");\n  IosCalendar.createCalendarEvent.setDuration(\"60\");\n  IosCalendar.createCalendarEvent.setNotes(\"New episode available\");\n  IosCalendar.createCalendarEvent.setUrl(Spotify.newEpisode.EpisodeUrl);\n  IosCalendar.createCalendarEvent.setAlert(\"15 minutes before\");\n  IosCalendar.createCalendarEvent.setCalendarName(\"Personal\");\n} else {\n  IosCalendar.createCalendarEvent.skip(\"The podcast is not 'The Daily'\");\n}"
  },
  {
    "intent": "When a new event titled \"Team Meeting\" is added to my Google Calendar, starting at 10:00 AM and ending at 11:30 AM, with the description \"Discuss project updates and goals for the quarter\", share the event details, including the title, description, location \"Conference Room\", start and end times, and a link to the event, in the Chatwork room \"#general\" with the message \"New team meeting scheduled for today at 10:00 AM - join us to discuss project updates and goals\".",
    "filter_code": "if (GoogleCalendar.newEventAdded.Title === \"Team Meeting\"\n    && GoogleCalendar.newEventAdded.Starts.startsWith(\"10:00\")\n    && GoogleCalendar.newEventAdded.Ends.startsWith(\"11:30\")\n    && GoogleCalendar.newEventAdded.Description === \"Discuss project updates and goals for the quarter\"\n    && GoogleCalendar.newEventAdded.Where === \"Conference Room\") {\n  var message = \"New team meeting scheduled for today at 10:00 AM - join us to discuss project updates and goals. \"\n              + \"Title: \" + GoogleCalendar.newEventAdded.Title + \", \"\n              + \"Description: \" + GoogleCalendar.newEventAdded.Description + \", \"\n              + \"Location: \" + GoogleCalendar.newEventAdded.Where + \", \"\n              + \"Starts: \" + GoogleCalendar.newEventAdded.Starts + \", \"\n              + \"Ends: \" + GoogleCalendar.newEventAdded.Ends + \", \"\n              + \"Event URL: \" + GoogleCalendar.newEventAdded.EventUrl;\n  Chatwork.postMessages.setRoom(\"#general\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the radon level in Bq/m3 goes above 150 at the Home - Living Room device, add an event to my primary Google Calendar with the quick add text \"High radon levels at 07:00\" including the timestamp and radon level.",
    "filter_code": "if (Airthings.radonAbove.MeasurementUnit !== \"Bq/m3\" || Airthings.radonAbove.Device !== \"Home - Living Room\" || parseFloat(Airthings.radonAbove.RadonLevel) <= 150) {\n  GoogleCalendar.quickAddEvent.skip(\"Radon level is not above 150 Bq/m3 at Home - Living Room.\");\n} else {\n  var quickAddText = \"High radon levels at \" + Airthings.radonAbove.CreatedAt.slice(11, 16) + \" (\" + Airthings.radonAbove.RadonLevel + \" Bq/m3)\";\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n}"
  },
  {
    "intent": "Post a reminder to the \"General\" room in Chatwork 15 minutes before any event starts in my \"Work\" calendar on Google Calendar, including the event title \"Team Meeting\", description \"Discuss new project details\", location \"Conference Room A\", and a link to the event.",
    "filter_code": "if (GoogleCalendar.anyEventStarts.calendar === \"Work\" && GoogleCalendar.anyEventStarts.offset === 15) {\n  var message = \"Reminder: Team Meeting starts soon. Title: \" + GoogleCalendar.anyEventStarts.Title + \", Description: \" + GoogleCalendar.anyEventStarts.Description + \", Location: \" + GoogleCalendar.anyEventStarts.Where + \", Event Link: \" + GoogleCalendar.anyEventStarts.EventUrl;\n  Chatwork.postMessages.setRoom(\"General\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When my Beeminder goal \"Stay Focused\" is in danger and the deadline is approaching, such as by 2023-03-15T14:30:00+00:00, add a new event to my Google Calendar's \"Work\" calendar with a quick add text like \"Focus time tomorrow at 8am\" to ensure I get back on track.",
    "filter_code": "if (Beeminder.anyGoalRed.Goal === \"Stay Focused\" && Beeminder.anyGoalRed.Deadline <= \"2023-03-15T14:30:00+00:00\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Focus time tomorrow at 8am\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"Work\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for adding event to calendar.\");\n}"
  },
  {
    "intent": "When a new article titled like \"Bay Bridge bike ride now goes halfway to SF 7 days a week\" and written by an author such as \"Mark Morford\" is posted on the SFGATE homepage, save it to your iOS reading list with the title \"New SFGATE Article: Bay Bridge Bike Ride\" and URL \"http://ift.tt/2p3XLwc\" for later reading, including a preview text that says \"Check out this new article from SFGATE about bay area news\".",
    "filter_code": "var title = Sfgate.sfgateHomepage.EntryTitle;\nvar url = Sfgate.sfgateHomepage.EntryUrl;\nvar author = Sfgate.sfgateHomepage.EntryAuthor;\nvar content = Sfgate.sfgateHomepage.EntryContent;\n\nIosReadingList.createReadingListItem.setTitle(\"New SFGATE Article: \" + title);\nIosReadingList.createReadingListItem.setUrl(url);\nIosReadingList.createReadingListItem.setPreviewText(\"Check out this new article from SFGATE about bay area news\");"
  },
  {
    "intent": "When I check in on Foursquare with the hashtag #gym at the Sydney Opera House, add a new event to my Google Calendar named \"Workout\" with the details \"Hanging out with my mates!\" and set the quick add text to \"gym session tomorrow 7pm\".",
    "filter_code": "if (Foursquare.newCheckinWithHashtag.VenueName === \"Sydney Opera House\" && Foursquare.newCheckinWithHashtag.Hashtag === \"#gym\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"gym session tomorrow 7pm\");\n  GoogleCalendar.quickAddEvent.skip();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Does not match the Sydney Opera House with #gym hashtag.\");\n}"
  },
  {
    "intent": "When the Kronaby pusher is pressed with a double press at latitude 55.611947 and longitude 12.978337, add a 60 minute event to my primary Google Calendar starting at the time of the press, titled \"Busy\", so that no one else can book me during this time.",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy at \" + Kronaby.pusherPressed.PressedAt + \" for 60 minutes\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new post is scheduled to go out on Buffer at exactly 3:00 PM with the text \"Meeting at the office\" and the first link being \"https://www.example.com\", add a new event to my Google Calendar named \"Social Media Post\" in the calendar \"My Schedule\" with the quick add text \"post meeting at 3:00 PM\".",
    "filter_code": "if (Buffer.newStatusItemBuffer.DueAt.hour() === 15 && Buffer.newStatusItemBuffer.Text === \"Meeting at the office\" && Buffer.newStatusItemBuffer.FirstLinkUrl === \"https://www.example.com\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"post meeting at 3:00 PM\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"My Schedule\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Post does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the Home Connect Washer named \"My Laundry Washer\" starts a cycle, add an event to my Google Calendar named \"Personal\" with the text \"Laundry cycle started at 2023-03-09 10:00:00+01:00\".",
    "filter_code": "if (HcWasher.washerCycleStarted.HaId === \"My Laundry Washer\") {\n  var createdAt = HcWasher.washerCycleStarted.CreatedAt;\n  var quickAddText = \"Laundry cycle started at \" + createdAt;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n}"
  },
  {
    "intent": "Create a new task in the \"Daily Tasks\" section of my MeisterTask project titled \"Team Meeting\" with the description \"Discuss upcoming projects and deadlines\" whenever a new event labeled as \"outOfOffice\" is added to my Google Calendar's \"Work\" calendar between 08:00 and 17:00, including the event's title, description, location, start and end times, and video call URL if available.",
    "filter_code": "if (GoogleCalendar.newEventAdded.EventType === \"outOfOffice\"\n    && GoogleCalendar.newEventAdded.calendar === \"Work\"\n    && Meta.currentUserTime.hour() >= 8\n    && Meta.currentUserTime.hour() < 17) {\n  var taskName = \"Team Meeting - \" + GoogleCalendar.newEventAdded.Title;\n  var taskDescription = \"Discuss upcoming projects and deadlines. Event Title: \"\n                      + GoogleCalendar.newEventAdded.Title + \". Description: \"\n                      + GoogleCalendar.newEventAdded.Description + \". Location: \"\n                      + GoogleCalendar.newEventAdded.Where + \". Starts: \"\n                      + GoogleCalendar.newEventAdded.Starts + \". Ends: \"\n                      + GoogleCalendar.newEventAdded.Ends;\n  if (GoogleCalendar.newEventAdded.VideoCallUrl) {\n    taskDescription += \". Video Call URL: \" + GoogleCalendar.newEventAdded.VideoCallUrl;\n  }\n  Meistertask.createATask.setSectionId(\"Daily Tasks\");\n  Meistertask.createATask.setTaskName(taskName);\n  Meistertask.createATask.setTaskDescription(taskDescription);\n} else {\n  Meistertask.createATask.skip(\"Event does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Create a new event in my personal Google Calendar whenever a submission is received from form 1234567890, titled \"My Contact Form\", and add the submission date time, form title, and rich text data to the event description, using quick add text \"New submission from My Contact Form on {submission_date_time}\".",
    "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" && Jotform.latestFormSubmission.FormTitle === \"My Contact Form\") {\n  var quickAddText = `New submission from ${Jotform.latestFormSubmission.FormTitle} on ${Jotform.latestFormSubmission.SubmissionDateTime}`;\n  var eventDescription = `Submission Date Time: ${Jotform.latestFormSubmission.SubmissionDateTime}\\nForm Title: ${Jotform.latestFormSubmission.FormTitle}\\nRich Text Data:\\n${Jotform.latestFormSubmission.RichTextData}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.setEventDescription(eventDescription);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Form ID or title does not match.\");\n}"
  },
  {
    "intent": "When my Home Connect dishwasher, labeled \"Kitchen Dishwasher\", starts a cycle, add an event to my Google Calendar named \"Personal\" with the quick add text \"Dishwasher cycle started at {{created_at}}\" to keep a record of all cycles.",
    "filter_code": "if (HcDishwasher.dishwasherCycleStarted.ha_id === \"Kitchen Dishwasher\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Dishwasher cycle started at \" + HcDishwasher.dishwasherCycleStarted.CreatedAt);\n  GoogleCalendar.quickAddEvent.skip(null); // Null reason to proceed with the action\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not the Kitchen Dishwasher.\");\n}"
  },
  {
    "intent": "Create a new task named \"Upcoming Event: {{Title}}\" in the MeisterTask project's \"Today\" section when any event on my Google Calendar starts within 15 minutes, including events titled \"Practice Presentation\", and set the task description to \"Event starts at {{Starts}} and ends at {{Ends}}, located at {{Where}}, with a video call URL of {{HangoutsUrl}} if available, and add this as a high-priority task for immediate attention.",
    "filter_code": "Meistertask.createATask.setTaskName(\"Upcoming Event: \" + GoogleCalendar.anyEventStarts.Title);\nMeistertask.createATask.setSectionId(\"Today\");\nvar taskDescription = \"Event starts at \" + GoogleCalendar.anyEventStarts.Starts + \" and ends at \" + GoogleCalendar.anyEventStarts.Ends + \", located at \" + GoogleCalendar.anyEventStarts.Where;\nif (GoogleCalendar.anyEventStarts.VideoCallUrl) {\n  taskDescription += \", with a video call URL of \" + GoogleCalendar.anyEventStarts.VideoCallUrl;\n}\nMeistertask.createATask.setTaskDescription(taskDescription);\nMeistertask.createATask.setPriority(\"high\");"
  },
  {
    "intent": "Every time my Home Connect dryer, named \"Laundry Room Dryer\", starts a cycle, add an event to my Google Calendar named \"Personal\" with the text \"Dryer cycle started at {created_at}\".",
    "filter_code": "if (HcDryer.dryerCycleStarted.ha_id === \"Laundry Room Dryer\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Dryer cycle started at \" + HcDryer.dryerCycleStarted.CreatedAt);\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Not the Laundry Room Dryer.\");\n}"
  },
  {
    "intent": "Create a Google Calendar event on my primary calendar when the anti-theft alarm is triggered on Tracker Bike, with a quick add text \"Tracker Bike stolen at 04:17:06\" to include the exact time of the alarm.",
    "filter_code": "if (InvoxiaTracker.alarm.Tracker === \"Tracker Bike\" && InvoxiaTracker.alarm.Event === \"anti-theft alarm\") {\n  var createdAt = new Date(InvoxiaTracker.alarm.CreatedAt);\n  var hours = createdAt.getHours();\n  var minutes = createdAt.getMinutes();\n  var seconds = createdAt.getSeconds();\n  var quickAddText = `Tracker Bike stolen at ${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n  GoogleCalendar.quickAddEvent.setCalendar(\"primary calendar\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new weight of 65.0 kilograms is logged on your Fitbit Aria with a BMI of 19.62, automatically add this weight to the Health app on iOS, setting the number of units to 65.0, the units to kilograms, and the occurred at date and time to the current timestamp, such as 2023-03-09T14:30:00+00:00.",
    "filter_code": "if (Fitbit.newWeightLogged.Weight === \"65.0\" && Fitbit.newWeightLogged.BMI === \"19.62\" && Fitbit.newWeightLogged.WeightUnit === \"kilograms\") {\n  IosHealth.logBodyMass.setNumberOfUnits(\"65.0\");\n  IosHealth.logBodyMass.setUnits(\"kilograms\");\n  IosHealth.logBodyMass.setOccurredAt(Meta.currentTime.toISOString());\n} else {\n  IosHealth.logBodyMass.skip(\"Weight or BMI does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the Invoxia GPS Tracker detects that the tracker \"Tracker Bike\" has entered or left the zone \"Home\" at latitude \"48.828011\" and longitude \"2.282976\", quickly add an event to the Google Calendar on the calendar \"Personal\" with the text \"Tracker Bike entered Home zone at 48.828011, 2.282976\".",
    "filter_code": "if (InvoxiaTracker.zone.Tracker === \"Tracker Bike\" && InvoxiaTracker.zone.Zone === \"Home\" && InvoxiaTracker.zone.Latitude === \"48.828011\" && InvoxiaTracker.zone.Longitude === \"2.282976\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Tracker Bike entered Home zone at 48.828011, 2.282976\");\n  GoogleCalendar.quickAddEvent.setCalendar(\"Personal\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Flic button named \"MyFlic\" is held, display the calendar on the Atmoph Window named \"LivingRoom\", and when the same button is held again, turn off the calendar.",
    "filter_code": "if (Flic.click.ButtonName === \"MyFlic\" && Flic.click.ClickType === \"hold\") {\n  if (Atmoph.isCalendarOn(\"LivingRoom\")) {\n    Atmoph.showCalendar.skip(\"Turning off the calendar on LivingRoom.\");\n  } else {\n    Atmoph.showCalendar.setWindowName(\"LivingRoom\");\n  }\n}"
  },
  {
    "intent": "When a new photo is uploaded to the \"Vacation\" album on my iOS device, send the temporary public URL of the photo, along with the message \"New vacation photo\", and the parameters \"photo taken\" and \"album name\" as Parameter 1 and Parameter 2 respectively, to all Intuiface experiences named \"MyTravelDiary\" running on devices named \"OfficeDisplay\" and tagged with \"travel\".",
    "filter_code": "if (IosPhotos.newPhotoInAlbum.AlbumName === \"Vacation\") {\n  Intuiface.sendMessage.setMsg(\"New vacation photo\");\n  Intuiface.sendMessage.setP1(\"photo taken: \" + IosPhotos.newPhotoInAlbum.TakenDate);\n  Intuiface.sendMessage.setP2(\"album name: \" + IosPhotos.newPhotoInAlbum.AlbumName);\n  Intuiface.sendMessage.setXpNames(\"MyTravelDiary\");\n  Intuiface.sendMessage.setDeviceNames(\"OfficeDisplay\");\n  Intuiface.sendMessage.setTags(\"travel\");\n  Intuiface.sendMessage.setMsg(IosPhotos.newPhotoInAlbum.TemporaryPublicPhotoURL);\n} else {\n  Intuiface.sendMessage.skip(\"Photo not uploaded to Vacation album.\");\n}"
  },
  {
    "intent": "When a new book is added to the \"Fiction\" best sellers list by The New York Times, with a rank of 1 and having been on the list for more than 10 weeks, add it to my iOS Reading List with the title set to the book's title, the URL set to the book's Amazon page, and the preview text set to the book's description.",
    "filter_code": "if (Nytimes.newBookOnABestSellerList.BestSellerCategory === \"Fiction\" && Nytimes.newBookOnABestSellerList.Rank === \"1\" && parseInt(Nytimes.newBookOnABestSellerList.WeeksOnList) > 10) {\n  IosReadingList.createReadingListItem.setTitle(Nytimes.newBookOnABestSellerList.Title);\n  IosReadingList.createReadingListItem.setUrl(\"https://www.amazon.com/dp/\" + Nytimes.newBookOnABestSellerList.ISBN);\n  IosReadingList.createReadingListItem.setPreviewText(Nytimes.newBookOnABestSellerList.Description);\n} else {\n  IosReadingList.createReadingListItem.skip(\"Does not match the Fiction best seller criteria.\");\n}"
  },
  {
    "intent": "When the button is pressed on Tracker Bike, create a Google Calendar event on my primary calendar with the description \"Button pressed at 48.828011, 2.282976\" using Quick Add.",
    "filter_code": "if (InvoxiaTracker.buttonPressed.Tracker === \"Tracker Bike\") {\n  var latitude = InvoxiaTracker.buttonPressed.Latitude;\n  var longitude = InvoxiaTracker.buttonPressed.Longitude;\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Button pressed at \" + latitude + \", \" + longitude);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"The button was not pressed on Tracker Bike.\");\n}"
  },
  {
    "intent": "When a new reminder is added to the \"Shopping\" list in iOS Reminders with a title like \"Pick up milk\" and notes such as \"Get 1% for Rick\", add a task titled \"Buy Milk for Rick\" to the \"Personal\" task list in Google Tasks, including the notes \"Remember to get 1% milk\" and setting the due date to today.",
    "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\") {\n  var taskTitle = \"Buy \" + IosReminders.newReminderAdded.Title;\n  if (IosReminders.newReminderAdded.Notes) {\n    taskTitle += \" for \" + IosReminders.newReminderAdded.Notes.split(\" \")[2];\n  }\n  GoogleTasks.addTaskToTasklist.setTaskTitle(taskTitle);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(\"Remember to get \" + IosReminders.newReminderAdded.Notes.split(\" \")[0] + \" \" + IosReminders.newReminderAdded.Title + \" milk\");\n  GoogleTasks.addTaskToTasklist.setDueDate(Meta.currentUserTime.format(\"YYYY-MM-DD\"));\n  GoogleTasks.addTaskToTasklist.setTasklistId(\"Personal\");\n}"
  },
  {
    "intent": "When a new event titled \"Vacation\" starts in my \"Personal\" calendar, set my smart home mode to \"Away\" on the \"Office\" device.",
    "filter_code": "if (IosCalendar.newCalendarEvent.Title === \"Vacation\" && IosCalendar.newCalendarEvent.CalendarName === \"Personal\") {\n  Myuplink.setSmartHomeMode.setSmartHomeMode(\"Away\");\n  Myuplink.setSmartHomeMode.setDevice(\"Office\");\n}"
  },
  {
    "intent": "When a Google Calendar event titled \"Vacation\" starts on my primary calendar, 15 minutes before the event begins, arm my Blink home security system.",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"Vacation\" && GoogleCalendar.eventFromSearchStarts.offset === \"-15\" && GoogleCalendar.eventFromSearchStarts.calendar === \"primary\") {\n  Blink.networkArm.setNetwork(\"home\");\n} else {\n  Blink.networkArm.skip(\"Event title is not 'Vacation' or offset/calendar does not match.\");\n}"
  },
  {
    "intent": "When the weather condition at my location changes to rain, snow, cloudy, or clear, and the current temperature is below 10°C, automatically activate the \"Good Morning\" Smart Life scene.",
    "filter_code": "if ([\"rain\", \"snow\", \"cloudy\", \"clear\"].includes(Weather.currentConditionIs.Condition.toLowerCase()) && parseFloat(Weather.currentConditionIs.TempCelsius) < 10) {\n  Smartlife.activateScene(\"Good Morning\");\n} else {\n  Smartlife.activateScene.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When I press the button, turn on the living room music light strip.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.OccurredAt !== undefined) {\n  Ewelink.switchAction.setSwitchQuery(\"Living Room Music Light Strip\");\n  Ewelink.switchAction.setOnoffActQuery(\"Turn On\");\n}"
  },
  {
    "intent": "When you leave, as indicated by the TMT Chow device named \"My Front Door\" being closed at a time like 2020-07-08T04:17:06+05:00, automatically activate your Beseye camera identified as \"Living Room Camera\".",
    "filter_code": "if (TmtChow.closed.DeviceName === \"My Front Door\" && TmtChow.closed.CreatedAt === \"2020-07-08T04:17:06+05:00\") {\n  Beseye.setCamStatusOff.skip(\"Camera activation skipped due to non-matching conditions.\");\n} else {\n  // No action is taken when conditions are not met, as per the given intent.\n}"
  },
  {
    "intent": "Close the gate with TMT Chow every day at 7:00 PM using the device named \"Front Gate\" and pin code 123456.",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour === 19 && minute === 0) {\n  TmtChow.closeDoor.setUuid(\"Front Gate\");\n  TmtChow.closeDoor.setPincode(123456);\n} else {\n  TmtChow.closeDoor.skip(\"Not the scheduled closing time.\");\n}"
  },
  {
    "intent": "Open the gate of device \"FrontGate\" with pin code \"123456\" every day at 7:00 AM using TMT Chow.",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 7 && minute === 0) {\n  TmtChow.openDoor.setUuid(\"FrontGate\");\n  TmtChow.openDoor.setPincode(\"123456\");\n} else {\n  TmtChow.openDoor.skip(\"Not the scheduled time.\");\n}"
  },
  {
    "intent": "Trigger TMT Chow to automatically activate Door 1 of ChowHub in cycle mode every day at 07:00, using the device named \"Kitchen Device\" and pin code \"1234\", as part of the daily routine.",
    "filter_code": "var time = DateAndTime.everyDayAt.CheckTime;\nvar hour = time.hour();\nvar minute = time.minute();\n\nif (hour == 7 && minute == 0) {\n  TmtChow.call1.setUuid(\"Kitchen Device\");\n  TmtChow.call1.setPincode(\"1234\");\n} else {\n  TmtChow.call1.skip(\"Not the scheduled daily routine time.\");\n}"
  },
  {
    "intent": "When I send an email to IFTTT with the subject \"Open Gate\" and the body containing the hashtag \"#gateopen\", and the email is received between 07:00 and 19:00, then open the gate using the TMT Chow device named \"Front Gate\" with the pin code \"123456\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Email.sendIftttAnEmailTagged.Subject === \"Open Gate\" && Email.sendIftttAnEmailTagged.Body.includes(\"#gateopen\")) {\n    TmtChow.openDoor.setUuid(\"Front Gate\");\n    TmtChow.openDoor.setPincode(\"123456\");\n  } else {\n    TmtChow.openDoor.skip(\"Subject or body does not match the required criteria.\");\n  }\n} else {\n  TmtChow.openDoor.skip(\"Outside of allowed hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the TMT Chow device named \"My Kitchen Door\" is opened, automatically turn on all Philips Hue lights in the living room.",
    "filter_code": "if (TmtChow.opening.DeviceName === \"My Kitchen Door\") {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Not the specified device.\");\n}"
  },
  {
    "intent": "Close the gate of my device named \"Front Gate\" with the pin code \"123456\" at sunset, which is today at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  TmtChow.closeDoor.setUuid(\"Front Gate\");\n  TmtChow.closeDoor.setPincode(\"123456\");\n} else {\n  TmtChow.closeDoor.skip(\"Conditions not met to close the gate.\");\n}"
  },
  {
    "intent": "When the TMT Chow device named \"My Front Door\" is opened, quickly add an event to my primary Google Calendar with the text \"Front door opened at 04:17:06+05:00 on July 8th\".",
    "filter_code": "if (TmtChow.opened.DeviceName === \"My Front Door\") {\n  var createdAt = TmtChow.opened.CreatedAt;\n  var date = new Date(createdAt);\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var day = date.getDate();\n  var month = date.toLocaleString('default', { month: 'long' });\n  var year = date.getFullYear();\n  var timezoneOffset = date.getTimezoneOffset();\n  var offsetHours = Math.floor(Math.abs(timezoneOffset) / 60);\n  var offsetMinutes = Math.abs(timezoneOffset) % 60;\n  var sign = timezoneOffset <= 0 ? '+' : '-';\n  var timezoneString = ` ${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n  var quickAddText = `Front door opened at ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}${timezoneString} on ${month} ${day}`;\n  GoogleCalendar.quickAddEvent.setQuickAdd(quickAddText);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Device name does not match \\\"My Front Door\\\".\");\n}"
  },
  {
    "intent": "When an overcurrent event is detected by the device named \"My Kitchen Device\" at any time, create a new event in my \"Personal\" Google Calendar with the quick add text \"Abnormal event occurred on My Kitchen Device\".",
    "filter_code": "if (TmtChow.overcurrent.DeviceName === \"My Kitchen Device\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Abnormal event occurred on My Kitchen Device\");\n  GoogleCalendar.quickAddEvent.skip();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Device name does not match \\\"My Kitchen Device\\\".\");\n}"
  },
  {
    "intent": "Trigger TMT Chow to automatically open Door 2 in cycle mode on ChowHub every day at 07:00 by calling the TMT Chow action with the door name set to \"Door 2\" and the pin code set to \"1234\".",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.substring(11, 16) !== targetTime) {\n  TmtChow.call2.skip(\"Not the target time\");\n} else {\n  TmtChow.call2.setUuid(\"Door 2\");\n  TmtChow.call2.setPincode(\"1234\");\n}"
  },
  {
    "intent": "Trigger TMT Chow to automatically activate the ChowHub in cycle mode on Door 3 every day at 7:00 AM, using the device named \"Kitchen Device\" and a pin code of \"1234\".",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour === 7 && minute === 0) {\n  TmtChow.call3.setUuid(\"Kitchen Device\");\n  TmtChow.call3.setPincode(\"1234\");\n} else {\n  TmtChow.call3.skip(\"Not the scheduled time.\");\n}"
  },
  {
    "intent": "When the door named \"My Front Door\" is closed, as indicated by the TMT Chow device, add a new event to my primary Google Calendar with the text \"Front door closed at 04:17:06+05:00 on July 8th\".",
    "filter_code": "if (TmtChow.closed.DeviceName === \"My Front Door\") {\n  var createdAt = TmtChow.closed.CreatedAt;\n  var dateString = new Date(createdAt).toLocaleString(\"en-US\", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });\n  GoogleCalendar.quickAddEvent.setQuickAdd(`Front door closed at ${dateString}`);\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Device name does not match 'My Front Door'.\");\n}"
  },
  {
    "intent": "When the Front Door lock at San Diego Beach House is unlocked by John Smith, turn on the Living Room Hue lights.",
    "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  Hue.turnOnAllHue.setLights(\"Living Room\");\n} else {\n  Hue.turnOnAllHue.skip(\"Conditions not met for turning on the Living Room lights.\");\n}"
  },
  {
    "intent": "When a new public track is uploaded by any artist you follow on SoundCloud, such as when the user \"gaga\" uploads a new track titled \"A cool track\" with tags like \"killer, noise\", send a Signal to your Das Keyboard device named \"Office Keyboard\" with the name \"New Track Alert\", setting the zone to the \"Q Key\" and coloring it red (#FF0000), including a message that says \"Check out gaga's new track: http://soundcloud.com/gaga-digi/john-maus-believer\", and applying a breathing effect.",
    "filter_code": "if (Soundcloud.followingNewPublicTrack.Username === \"gaga\" && Soundcloud.followingNewPublicTrack.Title === \"A cool track\" && Soundcloud.followingNewPublicTrack.Tags === \"killer, noise\") {\n  Daskeyboardq.signals.setName(\"New Track Alert\");\n  Daskeyboardq.signals.setZone(\"Q Key\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setMessage(\"Check out gaga's new track: \" + Soundcloud.followingNewPublicTrack.TrackUrl);\n  Daskeyboardq.signals.setEffect(\"Breathing\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Does not match the specified conditions.\");\n}"
  },
  {
    "intent": "When someone types '/ifttt lights off' in the #home_group Telegram chat between 17:00 and 20:00, turn off all the Living Room lights.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newGroupTextFilter.GroupTitle === \"#home_group\" &&\n    Telegram.newGroupTextFilter.Text.includes(\"/ifttt lights off\") &&\n    hour >= 17 && hour <= 20) {\n  Hue.turnOnAllHue.skip(\"Turning off Living Room lights as requested.\");\n} else {\n  Hue.turnOnAllHue.setLights(\"Living Room\").skip(\"Condition not met to turn off lights.\");\n}"
  },
  {
    "intent": "When the Flic button named \"Living Room Flic\" is double-clicked, toggle the MagicHue Smart Lights in the living room on or off.",
    "filter_code": "if (Flic.click.ButtonUuid === \"Living Room Flic\" && Flic.click.ClickType === \"double_click\") {\n  MagicHue.togglelight();\n} else {\n  MagicHue.togglelight.skip(\"Flic button 'Living Room Flic' was not double-clicked.\");\n}"
  },
  {
    "intent": "When the Flic button named \"Living Room Controller\" is double-clicked, toggle the MagicLight WiFi Smart Lights in the \"Bedroom\" on or off.",
    "filter_code": "if (Flic.click.ButtonUuid === \"Living Room Controller\" && Flic.click.ClickType === \"double_click\") {\n  MagicLight.togglelight.setWhichLights(\"Bedroom\");\n} else {\n  MagicLight.togglelight.skip(\"Flic button or click type does not match.\");\n}"
  },
  {
    "intent": "When the Front Door lock at my San Diego beach house is locked by John Smith, turn off the Living Room SwitchBot device.",
    "filter_code": "if (Augusthome.lockLocked.LockName === \"Front Door\" && Augusthome.lockLocked.HouseName === \"San Diego beach house\" && Augusthome.lockLocked.User === \"John Smith\") {\n  Switchbot.turnOffBot.setChoseADevice(\"Living Room\");\n} else {\n  Switchbot.turnOffBot.skip(\"Conditions not met for turning off the Living Room SwitchBot device.\");\n}"
  },
  {
    "intent": "Add new Google Sheets files added to the \"Recipes/Vegetables\" folder in Google Drive to the \"My Personal Recipes\" dataset on data.world, using the spreadsheet URL as the file URL and naming the file with the same name as the spreadsheet.",
    "filter_code": "if (GoogleSheets.newSpreadsheet.Path === \"Recipes/Vegetables\") {\n  Datadotworld.uploadFile.setFileName(GoogleSheets.newSpreadsheet.Filename);\n  Datadotworld.uploadFile.setFileUrl(GoogleSheets.newSpreadsheet.SpreadsheetUrl);\n  Datadotworld.uploadFile.setDatasetKey(\"My Personal Recipes\");\n} else {\n  Datadotworld.uploadFile.skip(\"Spreadsheet not in Recipes/Vegetables folder.\");\n}"
  },
  {
    "intent": "When my Google Pixel 7 is charging via AC power and the battery percentage is below 90%, lock the Living Room socket using LightwaveRF Power to prevent it from being turned off until the device is fully charged or the battery percentage reaches 100%.",
    "filter_code": "if (AndroidBattery.batteryPluggedIn.PowerSource === \"AC\" && AndroidBattery.batteryPluggedIn.DeviceName === \"Google Pixel 7\" && parseInt(AndroidBattery.batteryPluggedIn.BatteryPercentage) < 90) {\n  LightwaverfPower.lockDevice.setWhichDevice(\"Living Room socket\");\n} else {\n  LightwaverfPower.lockDevice.skip(\"Conditions not met to lock the Living Room socket.\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with the hashtag #BabyAlbum, send an email to grandma@example.com, grandpa@example.com, and cousin_sue@example.com with the subject \"New Baby Photo!\" and the body \"Check out the latest baby picture: http://instagr.am/p/NEWPHOTO/embed\". Attach the image file from the photo's source URL.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#BabyAlbum\")) {\n  var toAddresses = \"grandma@example.com, grandpa@example.com, cousin_sue@example.com\";\n  var subject = \"New Baby Photo!\";\n  var body = \"Check out the latest baby picture: \" + Instagram.newPhotoByYouTagged.EmbedCode;\n  var attachmentUrl = Instagram.newPhotoByYouTagged.SourceUrl;\n\n  Gmail.sendAnEmail.setSubject(subject);\n  Gmail.sendAnEmail.setBody(body);\n  Gmail.sendAnEmail.setTo(toAddresses);\n  Gmail.sendAnEmail.setAttachmentUrl(attachmentUrl);\n} else {\n  Gmail.sendAnEmail.skip(\"The photo does not contain the #BabyAlbum hashtag.\");\n}"
  },
  {
    "intent": "Send a notification via the IFTTT app with the message \"New World Economic Outlook report published: EntryTitle\" each time the IMF publishes a new report, including the report's title, link, and entry content, whenever the entry is published between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var message = \"New World Economic Outlook report published: \" + Imf.worldEconomicOutlook.Title + \". Link: \" + Imf.worldEconomicOutlook.Link + \". Content: \" + Imf.worldEconomicOutlook.EntryContent;\n  IfNotifications.sendNotification.setMessage(message);\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Adjust my ecobee Thermostat to 78 degrees Fahrenheit when ComEd PTS Hours are scheduled to start, specifically during the \"Scheduled\" stage.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\") {\n  Ecobee.holdIndefinite.setDesiredTemperature(78);\n}"
  },
  {
    "intent": "When the ComEd Peak Time Savings Hours end at their scheduled end time, resume the programmed schedule on my ecobee thermostat named \"Home Thermostat\".",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Ended\" && ComEd.ptsSavingsHours.EndTime <= new Date()) {\n  Ecobee.resumeProgram.setThermostat(\"Home Thermostat\");\n} else {\n  Ecobee.resumeProgram.skip(\"Not at the end of Peak Time Savings Hours.\");\n}"
  },
  {
    "intent": "When the ComEd Peak Time Savings Event is scheduled to start and it's an hour before the precooling time, update my ecobee Thermostat, named \"Home Thermostat\", to a desired temperature of 68 degrees Fahrenheit to precool before the event starts.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" &&\n    Meta.currentTime().before(ComEd.ptsSavingsHours.PrecoolTime) &&\n    Meta.currentTime().after(ComEd.ptsSavingsHours.PrecoolTime.minus({hours: 1}))) {\n  Ecobee.holdIndefinite.setDesiredTemperature(68).setThermostat(\"Home Thermostat\");\n}"
  },
  {
    "intent": "When the average price drops below 12 cents during the winter season, and this is the first time it goes under the threshold after a previous high, resume the schedule on my ecobee thermostat named \"Home Thermostat\" at any time.",
    "filter_code": "if (ComEd.averagePriceChange.AveragePrice < 12 && ComEd.averagePriceChange WHICH_SEASON === \"winter\" && ComEd.averagePriceChange.TRIGGER_TYPE === \"goes under\" && ComEd.averagePriceChange.HOW_OFTEN_TO_TRIGGER === \"first time it goes above or below the value\") {\n  Ecobee.resumeProgram.setThermostat(\"Home Thermostat\");\n} else {\n  Ecobee.resumeProgram.skip(\"Conditions not met to resume schedule.\");\n}"
  },
  {
    "intent": "When the Ecobee thermostat, located in the Living Room, switches to Smart Home mode at any time, immediately set the Aquanta device named \"Office Water Heater\" to its Home mode. If the Ecobee thermostat goes into Away mode between 08:00 and 17:00, delay the start of the Away mode on the Aquanta device by 30 minutes and have it last for 8 hours.",
    "filter_code": "var EventType = Ecobee.motionDetected.EventType.toLowerCase();\nvar ThermostatName = Ecobee.motionDetected.ThermostatName;\nvar DeviceName = \"Office Water Heater\";\nvar currentTime = Meta.currentUserTime.hour();\n\nif (ThermostatName === \"Living Room\" && EventType.indexOf(\"smart home\") != -1) {\n  Aquanta.home.skip();\n} else if (ThermostatName === \"Living Room\" && EventType.indexOf(\"away\") != -1 && currentTime >= 8 && currentTime <= 17) {\n  Aquanta.away.setStart(\"30 minutes\");\n  Aquanta.away.setEnd(\"8 hours\");\n  Aquanta.away.skip();\n}"
  },
  {
    "intent": "When the average price exceeds 15 cents during the summer season, between 7:00 AM and 10:00 PM, set my ecobee thermostat to 72°F.",
    "filter_code": "var averagePrice = parseFloat(ComEd.averagePriceChange.AveragePrice);\nvar fromHour = parseInt(ComEd.averagePriceChange.FromHour);\nvar toHour = parseInt(ComEd.averagePriceChange.ToHour);\nvar currentHour = Meta.currentUserTime.hour();\n\nif (averagePrice > 15 &&\n    ComEd.averagePriceChange.which_season === \"summer\" &&\n    currentHour >= 7 && currentHour <= 22) {\n  Ecobee.holdIndefinite.setDesiredTemperature(72);\n} else {\n  Ecobee.holdIndefinite.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Set the ecobee Comfort Profile to \"Home\" when ComEd PTS Hours are scheduled to start at 4:00 PM and end at 7:00 PM, using the thermostat named \"Living Room Thermostat\", for a period of 2 hours before the event starts, during the event, and 1 hour after the event ends.",
    "filter_code": "var startTime = ComEd.ptsSavingsHours.StartTime;\nvar endTime = ComEd.ptsSavingsHours.EndTime;\nvar stage = ComEd.ptsSavingsHours.Stage;\n\nif (stage === \"Scheduled\" && startTime.getHours() === 16 && endTime.getHours() === 19) {\n  var holdHoursBefore = 2;\n  var holdHoursDuring = (endTime - startTime) / 3600000;\n  var holdHoursAfter = 1;\n\n  Ecobee.climateHours.setHoldHours(holdHoursBefore + holdHoursDuring + holdHoursAfter);\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n  Ecobee.climateHours.setThermostat(\"Living Room Thermostat\");\n}"
  },
  {
    "intent": "When the Blue by ADT system is armed away, set the Ecobee thermostat named \"Living Room Thermostat\" to Away mode and hold the comfort profile until the next transition. If the system is disarmed, set the same thermostat to Home mode.",
    "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  Ecobee.holdNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.holdNextTransition.setHoldType(\"away\");\n} else if (Bluebyadt.armStateChange.EventType === \"Disarmed\") {\n  Ecobee.holdNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.holdNextTransition.setHoldType(\"home\");\n} else {\n  Ecobee.holdNextTransition.skip(\"Arm type is not Armed Away or Disarmed.\");\n}"
  },
  {
    "intent": "Adjust my ecobee Thermostat to the \"Home\" comfort profile when ComEd PTS Hours are scheduled to start at 04:17:06, holding for 4 hours.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && ComEd.ptsSavingsHours.StartTime.getHours() === 4 && ComEd.ptsSavingsHours.StartTime.getMinutes() === 17 && ComEd.ptsSavingsHours.StartTime.getSeconds() === 6) {\n  Ecobee.climateHours.setHoldHours(\"4\");\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with the hashtag #communityshare, add the photo to the \"Community Updates\" album on my Facebook page, and remove the hashtag from the caption.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#communityshare\")) {\n  var captionWithoutTag = Instagram.newPhotoByYouTagged.CaptionNoTag;\n  FacebookPages.createPhotoPage.setPhotoUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n  FacebookPages.createPhotoPage.setMessage(captionWithoutTag);\n  FacebookPages.createPhotoPage.setAlbum(\"Community Updates\");\n} else {\n  FacebookPages.createPhotoPage.skip(\"Post does not contain #communityshare hashtag.\");\n}"
  },
  {
    "intent": "Close the garage door identified as \"Main Garage Door\" when departing from the place named \"Home\" in the 1979 Pinto vehicle.",
    "filter_code": "if (Zubie.departures.Place === \"Home\" && Zubie.departures.Vehicle === \"1979 Pinto\") {\n  Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door.\");\n}"
  },
  {
    "intent": "When the front garage door opens, as detected by Garadget, create a new journal entry in my \"Home\" Day One journal with the tags \"garage door\", \"arrival\", and \"home\" at the location of my house (latitude: 37.7749, longitude: -122.4194), including an image of the garage door, and log the event with the text \"Front garage door opened at {created_at}\".",
    "filter_code": "if (Garadget.doorOpens.DoorId === \"front\") {\n  DayOne.createJournalEntry.setBody(\"Front garage door opened at \" + Garadget.doorOpens.CreatedAt);\n  DayOne.createJournalEntry.setTags(\"garage door, arrival, home\");\n  DayOne.createJournalEntry.setLatitude(37.7749);\n  DayOne.createJournalEntry.setLongitude(-122.4194);\n  DayOne.createJournalEntry.setPlacename(\"Home\");\n  DayOne.createJournalEntry.setImage(\"https://example.com/garage-door-image.jpg\"); // replace with actual image URL\n}"
  },
  {
    "intent": "When Marley's Fiat exits the Home circle, as recorded by Bouncie between 06:00 and 22:00, automatically close the Main Garage Door using Garadget.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Bouncie.geoCircleExit.VehicleName === \"Marley's Fiat\" &&\n    Bouncie.geoCircleExit.CircleName === \"Home\" &&\n    hour >= 6 && hour < 22) {\n  Garadget.closeDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Save the article titled \"Launch Day!\" from Longreads to Instapaper with the URL http://blog.ifttt.com/coming-soon, and add it to the folder \"My Favorites\" with the tags \"Longread\" and \"Interesting\".",
    "filter_code": "Instapaper.saveItem.setUrl(Longreads.anyNewPostOnLongreadsInBooks.EntryUrl);\nInstapaper.saveItem.setTitle(Longreads.anyNewPostOnLongreadsInBooks.EntryTitle);\nInstapaper.saveItem.setDescription(Longreads.anyNewPostOnLongreadsInBooks.EntryContent);\n// Note: The provided JSON does not contain methods for setting folder or tags directly in the filter code.\n// However, based on the action details, we can assume the following:\n// Instapaper.saveItem.setFolder(\"My Favorites\"); // This line is commented out because there's no direct method provided for it.\n// Instapaper.saveItem.setTags([\"Longread\", \"Interesting\"]); // Similarly, this line is commented out due to lack of a direct method.\n\n// Since direct methods for setting folder and tags are not provided in the action details,\n// we proceed with what is available, focusing on saving the item:\nInstapaper.saveItem();"
  },
  {
    "intent": "When the sun rises at your location, with a current temperature of 18 degrees Celsius and a sunny condition, turn off all Philips Hue bulbs in the living room.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempCelsius === \"18\") {\n  PhilipsHue.turnOffAllHue.skip(\"Sun has risen and it's sunny with a temperature of 18 degrees Celsius.\");\n}"
  },
  {
    "intent": "Send a message saying \"Lunch break, everyone!\" to the #general Telegram chat every Monday, Tuesday, Wednesday, Thursday, and Friday at 12:00 PM, and send a message saying \"Now back to work, you maggots!\" to the same chat every Monday, Tuesday, Wednesday, Thursday, and Friday at 1:00 PM.",
    "filter_code": "var hour = DateAndTime.everyWeekdayAt.CheckTime.hour();\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar chatId = \"YOUR_TELEGRAM_CHAT_ID\"; // Replace with the actual chat ID\n\nif (hour === 12 && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  Telegram.sendMessage.setText(\"Lunch break, everyone!\");\n  Telegram.sendMessage.setChatId(chatId);\n} else if (hour === 13 && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  Telegram.sendMessage.setText(\"Now back to work, you maggots!\");\n  Telegram.sendMessage.setChatId(chatId);\n} else {\n  Telegram.sendMessage.skip(\"Not the scheduled time or day for a message.\");\n}"
  },
  {
    "intent": "When the sunset at your location is today and the current temperature in degrees Fahrenheit is 72 or higher, turn on the SwitchBot device named \"Living Room Bot\".",
    "filter_code": "if (Weather.sunSets.SunsetAt.includes(new Date().toISOString().split('T')[0]) && parseInt(Weather.sunSets.TempFahrenheit) >= 72) {\n  Switchbot.turnOnBot.setChoseADevice(\"Living Room Bot\");\n} else {\n  Switchbot.turnOnBot.skip(\"Conditions not met to turn on the Living Room Bot.\");\n}"
  },
  {
    "intent": "When a new public photo titled \"Vacation Memories\" with the tags \"beach, summer\" is uploaded to Flickr between 08:00 and 20:00, save a copy of the image from the source URL http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg to the Dropbox folder path \"/Photos/Vacation\" with the filename \"Summer_Vacation_Picture\" if the photo was taken on August 15, 2022.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 20) {\n  if (Flickr.anyNewPublicPhoto.Title === \"Vacation Memories\"\n      && Flickr.anyNewPublicPhoto.Tags.includes(\"beach\")\n      && Flickr.anyNewPublicPhoto.Tags.includes(\"summer\")\n      && Flickr.anyNewPublicPhoto.TakenDate.includes(\"August 15, 2022\")) {\n    Dropbox.addFileFromUrl.setUrl(Flickr.anyNewPublicPhoto.SourceUrl);\n    Dropbox.addFileFromUrl.setFilename(\"Summer_Vacation_Picture\");\n    Dropbox.addFileFromUrl.setPath(\"/Photos/Vacation\");\n  } else {\n    Dropbox.addFileFromUrl.skip(\"Photo does not match the specified criteria.\");\n  }\n} else {\n  Dropbox.addFileFromUrl.skip(\"Upload is outside the specified time range (08:00-20:00).\");\n}"
  },
  {
    "intent": "When my Google Pixel 7 connects to the WiFi network named \"HomeNetwork\" at any time, toggle the Apilio variable identified as \"is_at_home\".",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"is_at_home\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Conditions not met to toggle is_at_home variable.\");\n}"
  },
  {
    "intent": "When my Google Pixel 7 device disconnects from the \"HomeNetwork\" WiFi at any time, toggle the Apilio variable identified as \"IsAtHome\" to update my presence status.",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"IsAtHome\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Not the HomeNetwork or not the Google Pixel 7 device.\");\n}"
  },
  {
    "intent": "When a new file is starred in the Google Drive folder path \"/Documents/Important\", automatically upload it to Dropbox using the file's public URL and add it to the \"/IFTTT/StarredFiles\" folder with the filename unchanged.",
    "filter_code": "if (GoogleDrive.newStarredFile.Path === \"/Documents/Important\") {\n  Dropbox.addFileFromUrl.setUrl(GoogleDrive.newStarredFile.FileUrl);\n  Dropbox.addFileFromUrl.setFilename(GoogleDrive.newStarredFile.Filename);\n  Dropbox.addFileFromUrl.setPath(\"/IFTTT/StarredFiles\");\n} else {\n  Dropbox.addFileFromUrl.skip(\"File is not from the /Documents/Important folder.\");\n}"
  },
  {
    "intent": "When the Flic button named \"OfficeButton\" is double-clicked, blink the living room lights green three times with a brightness of 80%, and then return to their original state.",
    "filter_code": "if (Flic.click.ButtonName === \"OfficeButton\" && Flic.click.ClickType === \"double_click\") {\n  Magichue.blinkLights.setWhichLights(\"living room\");\n  Magichue.blinkLights.setNumberOfBlinks(3);\n  Magichue.blinkLights.setColor(\"green\");\n  Magichue.blinkLights.setBrightness(80);\n  Magichue.blinkLights.setKeepAfterBlink(false);\n} else {\n  Magichue.blinkLights.skip(\"Flic button 'OfficeButton' was not double-clicked.\");\n}"
  },
  {
    "intent": "When the Flic button named \"OfficeButton\" is double-clicked, flash the living room MagicLights 3 times in green to signal a closed sale, and if it's between 12:00 and 13:00, change the color to orange for 5 minutes to indicate lunchtime, then revert to the original state.",
    "filter_code": "if (Flic.click.ButtonName === \"OfficeButton\" && Flic.click.ClickType === \"double_click\") {\n  if (Meta.currentUserTime.hour() >= 12 && Meta.currentUserTime.hour() < 13) {\n    MagicLight.blinkLights.setKeepAfterBlink(\"true\");\n    MagicLight.blinkLights.setColor(\"orange\");\n    MagicLight.blinkLights.setBrightness(100);\n    MagicLight.blinkLights.setNumberOfBlinks(0); // Turn on for 5 minutes\n    MagicLight.blinkLights.skip(\"Lunchtime\");\n    setTimeout(function() {\n      MagicLight.blinkLights.setKeepAfterBlink(\"false\");\n      MagicLight.blinkLights.setColor(\"green\");\n      MagicLight.blinkLights.setBrightness(100);\n      MagicLight.blinkLights.setNumberOfBlinks(3); // Blink 3 times\n    }, 300000); // 5 minutes\n  } else {\n    MagicLight.blinkLights.setKeepAfterBlink(\"false\");\n    MagicLight.blinkLights.setColor(\"green\");\n    MagicLight.blinkLights.setBrightness(100);\n    MagicLight.blinkLights.setNumberOfBlinks(3); // Blink 3 times\n  }\n}"
  },
  {
    "intent": "When the Blue by ADT system is armed away, as indicated by the event type \"System Armed Away\" and a formatted message like \"System Armed Away by Master User\", start the iRobot named \"Home Cleaner\" so that the floor is clean when you return home.",
    "filter_code": "if (Bluebyadt.issues.EventType === \"System Armed Away\" && Bluebyadt.issues.FormattedMessage.includes(\"System Armed Away by Master User\")) {\n  Irobot.startRobot.setRobotName(\"Home Cleaner\");\n} else {\n  Irobot.startRobot.skip(\"Conditions not met to start the robot.\");\n}"
  },
  {
    "intent": "When the Blue by ADT system is armed away by the Master User, start the Neato Botvac D7 Connected robot to clean the floor.",
    "filter_code": "if (Bluebyadt.issues.FormattedMessage === \"System Armed Away by Master User\") {\n  Neato.startCleaning.setSelectARobot(\"Botvac D7 Connected\");\n} else {\n  Neato.startCleaning.skip(\"Not armed away by Master User\");\n}"
  },
  {
    "intent": "Set your Security Mode switch to \"Away\" automatically every day at 8:00 AM for the \"Home\" family.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 8 || DateAndTime.everyDayAt.CheckTime.minute() !== 0) {\n  Bosma.switchSecurityMode.skip(\"Not 8:00 AM\");\n} else {\n  Bosma.switchSecurityMode.setMode(\"Away\");\n  Bosma.switchSecurityMode.setFamily(\"Home\");\n}"
  },
  {
    "intent": "Turn on the Home Connect Dryer, which is located in the laundry room, every Monday, Wednesday, and Friday at 8:00 AM to air fluff the clothes.",
    "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar time = DateAndTime.everyWeekdayAt.time;\n\nif (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\") {\n  if (time === \"8:00 AM\") {\n    HcDryer.dryerStartSelectedProgram.setHaId(\"laundry_room_dryer\");\n  } else {\n    HcDryer.dryerStartSelectedProgram.skip(\"Not the correct time\");\n  }\n} else {\n  HcDryer.dryerStartSelectedProgram.skip(\"Not a scheduled day\");\n}"
  },
  {
    "intent": "When the current weather condition in New York changes to Rain, Snow, Cloudy, or Clear, display a new notice on my Glance Clock with the message \"Weather update: the current condition is Sunny with a temperature of 18°C\" and play a gentle sound with a fade-in animation in blue color.",
    "filter_code": "if ([\"Rain\", \"Snow\", \"Cloudy\", \"Clear\"].includes(Weather.currentConditionIs.Condition)) {\n  Glanceclock.notice.setText(\"Weather update: the current condition is \" + Weather.currentConditionIs.Condition + \" with a temperature of \" + Weather.currentConditionIs.TempCelsius + \"°C\");\n  Glanceclock.notice.setSound(\"gentle\");\n  Glanceclock.notice.setAnimation(\"fade-in\");\n  Glanceclock.notice.setColor(\"blue\");\n} else {\n  Glanceclock.notice.skip(\"Current weather condition is not Rain, Snow, Cloudy, or Clear.\");\n}"
  },
  {
    "intent": "Every hour between 10am and 5pm, send a notification with the message \"Drink a glass of water\" eight times.",
    "filter_code": "var hour = DateAndTime.everyHourAt.CheckTime.hour();\nif (hour >= 10 && hour <= 17) {\n  for (var i = 0; i < 8; i++) {\n    IfNotifications.sendNotification.setMessage(\"Drink a glass of water\");\n    IfNotifications.sendNotification();\n  }\n}"
  },
  {
    "intent": "When the temperature drops below 5°C in New York, display the current temperature in Celsius on my Glance Clock with a red animation and a beep sound.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempCelsius < 5 && Weather.currentTemperatureRisesAbove.location === \"New York\") {\n  Glanceclock.notice.setText(\"Current temperature: \" + Weather.currentTemperatureRisesAbove.TempCelsius + \"°C\");\n  Glanceclock.notice.setAnimation(\"Red\");\n  Glanceclock.notice.setSound(\"Beep\");\n} else {\n  Glanceclock.notice.skip(\"Temperature not below 5°C or not in New York.\");\n}"
  },
  {
    "intent": "When the temperature in New York rises above 75 degrees Fahrenheit, display \"It's getting hot!\" on my Glance Clock with a sunny animation and a red color.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.location === \"New York\" && Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  Glanceclock.notice.setText(\"It's getting hot!\");\n  Glanceclock.notice.setAnimation(\"sunny\");\n  Glanceclock.notice.setColor(\"red\");\n} else {\n  Glanceclock.notice.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Every day at 7:00 AM, display the current time on my Glance Clock with a beep sound and a fade-in animation, using the default clock and red color.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 7 || DateAndTime.everyDayAt.CheckTime.minute() !== 0) {\n  Glanceclock.notice.skip(\"Not 7:00 AM\");\n} else {\n  Glanceclock.notice.setText(\"Current time: \" + DateAndTime.everyDayAt.CheckTime);\n  Glanceclock.notice.setSound(\"beep\");\n  Glanceclock.notice.setAnimation(\"fade-in\");\n  Glanceclock.notice.setColor(\"red\");\n}"
  },
  {
    "intent": "Show a message \"Device Opened\" on your Glance Clock, with a beep sound and flash animation in red color, every time the \"Bedroom contact\" SmartThings device is opened.",
    "filter_code": "if (SmartthingsV2.openedSmartthings.DeviceName === \"Bedroom contact\") {\n  Glanceclock.notice.setText(\"Device Opened\");\n  Glanceclock.notice.setSound(\"beep\");\n  Glanceclock.notice.setAnimation(\"flash\");\n  Glanceclock.notice.setColor(\"red\");\n} else {\n  Glanceclock.notice.skip(\"Not the Bedroom contact device.\");\n}"
  },
  {
    "intent": "Every day between 10:00 AM and 5:00 PM, send a notification to drink a glass of water every hour, for a total of 8 reminders, and simultaneously update a Google Sheets spreadsheet named \"Water Intake Tracker\" by adding a new row with the current date, time, and amount of water consumed, which is set to 1 glass.",
    "filter_code": "var currentTime = DateAndTime.everyHourAt.CheckTime;\nvar currentHour = currentTime.hour();\nif (currentHour >= 10 && currentHour <= 17) {\n  IfNotifications.sendNotification.setMessage(\"Drink a glass of water!\");\n  IfNotifications.sendNotification.skip(); // This line should actually be removed to send the notification, but it's here for demonstration purposes.\n\n  // Since the actual Google Sheets API integration details are not provided in the trigger or action sections,\n  // we'll simulate adding a new row to the \"Water Intake Tracker\" spreadsheet with the current date, time, and amount of water consumed (1 glass).\n  // In real scenarios, you would use the Google Sheets API endpoint provided by IFTTT.\n  var newRowData = {\n    \"Date\": currentTime.date(),\n    \"Time\": currentTime.time(),\n    \"Water Consumed\": \"1 glass\"\n  };\n\n  // Simulating the addition of a new row to the spreadsheet (actual implementation depends on Google Sheets API details).\n  console.log(\"Adding new row to Water Intake Tracker:\", newRowData);\n}"
  },
  {
    "intent": "Send a weekly email digest every Wednesday morning at 8:00 AM with the title \"The Hill's Weekly Political Digest\" and a message containing the latest news from The Hill's RSS feed, including the entry title, entry URL, and entry content, to subscribers who are interested in staying up-to-date on the latest political news.",
    "filter_code": "if (Meta.currentUserTime.day() === \"Wednesday\" && Meta.currentUserTime.hour() === 8) {\n  var message = \"Latest news from The Hill's RSS feed:<br>\";\n  message += \"<a href='\" + Feed.newFeedItem.EntryUrl + \"'>\" + Feed.newFeedItem.EntryTitle + \"</a><br>\";\n  message += Feed.newFeedItem.EntryContent;\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"8:00 AM\");\n  EmailDigest.sendWeeklyEmail.setTitle(\"The Hill's Weekly Political Digest\");\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Wednesday morning at 8:00 AM.\");\n}"
  },
  {
    "intent": "Send a weekly email digest to my inbox every Wednesday morning at 08:00 with updates from the Pew Research Center's RSS feed, including the entry title, entry URL, and entry content, and set the email title to \"Pew Research Center Weekly Updates\" with a link to the feed's regular page.",
    "filter_code": "if (Meta.currentUserTime.day() === \"Wednesday\" && Meta.currentUserTime.hour() === 8) {\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendWeeklyEmail.setTitle(\"Pew Research Center Weekly Updates\");\n  var message = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItem.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItem.EntryContent;\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  EmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.FeedUrl);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Wednesday at 08:00\");\n}"
  },
  {
    "intent": "Every Thursday at 10:00 AM, send a weekly email digest with the subject \"RHONY GIFs of the Week\" to subscribers, including an inline GIF and a link to the Giphy page of the latest GIFs tagged \"RHONY\" that were created after Wednesday, along with a brief message \"Turtle time! Check out these funny RHONY GIFs from this week:\".",
    "filter_code": "var day = Meta.currentUserTime.day();\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (day === 4 && hour === 10 && minute === 0) {\n  var tags = \"RHONY\";\n  var query = \"https://giphy.com/search/\" + tags;\n  var giphyUrl = \"https://giphy.com\";\n\n  var createdDate = Giphy.search.CreatedDate;\n  var wednesdayEpoch = new Date().setDate(new Date().getDate() - 1);\n  var wednesdayDate = new Date(wednesdayEpoch).toISOString();\n\n  if (createdDate > wednesdayDate) {\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Thursday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n    EmailDigest.sendWeeklyEmail.setTitle(\"RHONY GIFs of the Week\");\n    EmailDigest.sendWeeklyEmail.setMessage(\"<p>Turtle time! Check out these funny RHONY GIFs from this week:</p><br>\" + Giphy.search.EmailHTML);\n    EmailDigest.sendWeeklyEmail.setUrl(query);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No new RHONY GIFs were created after Wednesday.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not Thursday at 10:00 AM.\");\n}"
  },
  {
    "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"NASA JPL Robotic Space News\" and a message containing the EntryTitle, EntryContent, and EntryUrl of new feed items from the NASA JPL news feed, including an image from the EntryImageUrl if available.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 5) { // 5 represents Friday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (hour !== 10 || minute !== 0) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 10:00 AM.\");\n}\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"NASA JPL Robotic Space News\");\nvar message = \"New NASA JPL Robotic Space News:<br>\" + Feed.newFeedItem.EntryTitle + \"<br>\" + Feed.newFeedItem.EntryContent + \"<br>Read more at: \" + Feed.newFeedItem.EntryUrl;\nif (Feed.newFeedItem.EntryImageUrl !== \"\") {\n  message += \"<br><img src='\" + Feed.newFeedItem.EntryImageUrl + \"'>\";\n}\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.EntryUrl);"
  },
  {
    "intent": "When a new card titled \"Task Completed\" is added to the \"Done\" list on the \"My Projects\" board in Trello by user \"John Doe\", log the card's title, description, and URL in a Google Sheets spreadsheet named \"Completed Tasks\" with the formatted row \"||| Card Title: {{title}} ||| Card Description: {{description}} ||| Card URL: {{url}}\" and save it to the \"IFTTT/Task Manager\" folder.",
    "filter_code": "if (Trello.cardAddedToList.ListName === \"Done\" && Trello.cardAddedToList.BoardName === \"My Projects\" && Trello.cardAddedToList.Title === \"Task Completed\" && Trello.cardAddedToList.CreatorFullName === \"John Doe\") {\n  var formattedRow = \"||| Card Title: \" + Trello.cardAddedToList.Title + \" ||| Card Description: \" + Trello.cardAddedToList.Description + \" ||| Card URL: \" + Trello.cardAddedToList.CardURL;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Completed Tasks\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Task Manager\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Card does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, move the shutter up or down on the device named \"Living Room Shutter\" to the state \"UP\" if the button press occurs between 07:00 and 19:00.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  var hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n  if (hour >= 7 && hour < 19) {\n    ViewProd.upDownActionBlind.setState(\"UP\");\n    ViewProd.upDownActionBlind.setDevice(\"Living Room Shutter\");\n  } else {\n    ViewProd.upDownActionBlind.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  }\n}"
  },
  {
    "intent": "When I call the IFTTT phone number from my phone (415)-123-4567 and leave a voicemail message saying \"Hello, it's raining outside\", send the audio file to the Telegram chat #weather_updates with the caption \"Weather Update\" and title \"Rain Alert\".",
    "filter_code": "if (PhoneCall.leaveIftttAVoicemail.From === \"(415)-123-4567\" && PhoneCall.leaveIftttAVoicemail.Message.includes(\"Hello, it's raining outside\")) {\n  Telegram.sendMp3.setAudioUrl(PhoneCall.leaveIftttAVoicemail.Mp3Url);\n  Telegram.sendMp3.setCaption(\"Weather Update\");\n  Telegram.sendMp3.setTitle(\"Rain Alert\");\n  Telegram.sendMp3.setChatId(\"#weather_updates\");\n} else {\n  Telegram.sendMp3.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Move the living room shutter up at 7:30 AM and down at 6:00 PM, every weekday.",
    "filter_code": "var currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar currentHour = currentTime.hour();\nvar currentMinute = currentTime.minute();\n\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" ||\n    DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (currentHour === 7 && currentMinute === 30) {\n    ViewProd.upDownActionBlind.setState(\"up\");\n  } else if (currentHour === 18 && currentMinute === 0) {\n    ViewProd.upDownActionBlind.setState(\"down\");\n  } else {\n    ViewProd.upDownActionBlind.skip(\"Not the scheduled time.\");\n  }\n} else {\n  ViewProd.upDownActionBlind.skip(\"Not a weekday.\");\n}"
  },
  {
    "intent": "Activate the \"Good Morning\" routine on Niko Home Control when any movement is detected by the Fibaro motion sensor in the living room between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Fibaro.motionDetected.DeviceId === \"living_room_sensor_id\") {\n    Nikohomecontrol.activateRoutine.setRoutine(\"Good Morning\");\n  } else {\n    Nikohomecontrol.activateRoutine.skip(\"Movement detected in a different room.\");\n  }\n} else {\n  Nikohomecontrol.activateRoutine.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Set the temperature of your Atlantic connected radiators to 20°C every weekday at 07:00 and 19:00, using the \"Good Morning\" and \"Good Evening\" scenarios.",
    "filter_code": "var hour = DateAndTime.everyWeekdayAt.CheckTime.hour();\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nif ((hour === 7 || hour === 19) && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  if (hour === 7) {\n    ATLANTICCozytouch.launchActionGroup.setActionGroup(\"Good Morning\");\n    ATLANTICCozytouch.launchActionGroup.skip();\n  } else if (hour === 19) {\n    ATLANTICCozytouch.launchActionGroup.setActionGroup(\"Good Evening\");\n    ATLANTICCozytouch.launchActionGroup.skip();\n  }\n}"
  },
  {
    "intent": "Turn on the living room lamp, which is plugged into the Office Outlet, at sunset when the outside temperature is 72 degrees Fahrenheit and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  var device = \"Office Outlet\";\n  var value = \"On\";\n  if (Meta.currentUserTime.hour() >= Weather.sunSets.SunsetAt.hour()) {\n    LinkSmartHome.outletPowerSwitch.setDevice(device);\n    LinkSmartHome.outletPowerSwitch.setValue(value);\n  } else {\n    LinkSmartHome.outletPowerSwitch.skip(\"Not sunset yet.\");\n  }\n} else {\n  LinkSmartHome.outletPowerSwitch.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the sunrise occurs at your location, turn off the living room lamp.",
    "filter_code": "if (new Date() >= new Date(Weather.sunRises.SunriseAt)) {\n  LinkSmartHome.outletPowerSwitch.setDeviceId(\"living_room_lamp\");\n  LinkSmartHome.outletPowerSwitch.setValue(false);\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp TP-Link Smart Plug during Summer weekdays when the Fort Collins Utilities Time of Day Pricing enters peak rates at the start of the on-peak hours.",
    "filter_code": "if (FcuTod.timeOfDay.Season === \"Summer\" && FcuTod.timeOfDay.DayType === \"Weekday\" && FcuTod.timeOfDay.EventType === \"start\") {\n  Kasa.turnOff();\n}"
  },
  {
    "intent": "Turn off the living room fan, which is connected to a Smart Life plug, whenever the temperature in New York drops below 60°F.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 60) {\n  Smartlife.turnOff.skip(\"Temperature in New York dropped below 60°F.\");\n}"
  },
  {
    "intent": "Turn on my Living Room Fan, a Smart Life device, when the temperature in New York rises above 75°F.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit <= 75) {\n  Smartlife.turnOn.skip(\"Temperature is not above 75°F.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp TP-Link Smart Plug when off-peak hours begin during the Summer season on Weekdays, specifically at the end of the peak rate event.",
    "filter_code": "if (FcuTod.timeOfDay.EventType === \"end\" && FcuTod.timeOfDay.Season === \"Summer\" && FcuTod.timeOfDay.DayType === \"Weekday\") {\n  Kasa.turnOn();\n} else {\n  Kasa.turnOn.skip(\"Not the desired time or season.\");\n}"
  },
  {
    "intent": "Adjust the brightness of the Living Room Lamp to 50% when it starts raining in New York City.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\") {\n  Ewelink.lightBrightnessAction.setLightBrightnessQuery(50);\n  Ewelink.lightBrightnessAction.setLightBrightnessActionDevice(\"Living Room Lamp\");\n} else {\n  Ewelink.lightBrightnessAction.skip(\"Not raining.\");\n}"
  },
  {
    "intent": "When you favorite an article titled \"My first blog post\" on Pocket, with the URL http://blog.ifttt.com and tags like \"neato, cool, video\", send an email to your friends at john.doe@example.com and jane.smith@example.com with the subject \"Check out this interesting article!\" and body \"I just favorited an article about something cool on Pocket: http://blog.ifttt.com. Thought you might find it interesting too!\".",
    "filter_code": "if (Pocket.newFavoriteItemPocket.Title === \"My first blog post\" &&\n    Pocket.newFavoriteItemPocket.Url === \"http://blog.ifttt.com\" &&\n    Pocket.newFavoriteItemPocket.Tags.includes(\"neato\") &&\n    Pocket.newFavoriteItemPocket.Tags.includes(\"cool\") &&\n    Pocket.newFavoriteItemPocket.Tags.includes(\"video\")) {\n  Gmail.sendAnEmail.setSubject(\"Check out this interesting article!\");\n  Gmail.sendAnEmail.setBody(`I just favorited an article about something cool on Pocket: ${Pocket.newFavoriteItemPocket.Url}. Thought you might find it interesting too!`);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with the hashtag #CatchMeIfYouCan, send an email to john.doe@example.com, jane.smith@example.com, and bob.johnson@example.com with the subject \"New Photo Alert\" and the body containing the full caption and a link to the photo, including the image as an attachment.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.indexOf(\"#CatchMeIfYouCan\") !== -1) {\n  Gmail.sendAnEmail.setSubject(\"New Photo Alert\");\n  var body = \"Check out my new photo: \" + Instagram.newPhotoByYouTagged.Caption + \"\\n\" + Instagram.newPhotoByYouTagged.Url;\n  Gmail.sendAnEmail.setBody(body);\n  Gmail.sendAnEmail.setAttachmentUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com, bob.johnson@example.com\");\n} else {\n  Gmail.sendAnEmail.skip(\"The photo does not contain the #CatchMeIfYouCan hashtag.\");\n}"
  },
  {
    "intent": "Send an email to john.doe@example.com, jane.smith@example.com with the subject \"New ACLU Update\" and body \"Check out the latest news from the ACLU: EntryTitle - EntryContent\" whenever a new item is posted to the ACLU RSS feed at https://www.aclu.org/news/feed.",
    "filter_code": "Gmail.sendAnEmail.setSubject(\"New ACLU Update\");\nGmail.sendAnEmail.setBody(\"Check out the latest news from the ACLU: \" + Feed.newFeedItem.EntryTitle + \" - \" + Feed.newFeedItem.EntryContent);\nGmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");"
  },
  {
    "intent": "When you post a new video on Instagram with a caption like \"A cool video\" and it's between 07:00 and 19:00, send an email to john.doe@example.com and jane.smith@example.com with the subject \"New Video Posted\" and the body containing the video's short URL http://instagr.am/p/CTGBw/ and its thumbnail image URL http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_7.jpg, also including the video source URL http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4 as an attachment.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var caption = Instagram.anyNewVideoByYouInstagram.Caption;\n  if (caption === \"A cool video\") {\n    Gmail.sendAnEmail.setSubject(\"New Video Posted\");\n    var body = \"Check out my new video: \" + Instagram.anyNewVideoByYouInstagram.URL + \"\\nThumbnail: \" + Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL;\n    Gmail.sendAnEmail.setBody(body);\n    Gmail.sendAnEmail.setAttachmentUrl(Instagram.anyNewVideoByYouInstagram.VideoSourceURL);\n    Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");\n  } else {\n    Gmail.sendAnEmail.skip(\"Caption does not match.\");\n  }\n} else {\n  Gmail.sendAnEmail.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new post is published in the NAACP news, share the entry title, content, and image URL with your friends in the GroupMe group named \"Friends\" by sending a message that includes the entry title, a brief summary of the entry content, and the entry image URL.",
    "filter_code": "var entryTitle = Naacp.newPostInNaacpNews.EntryTitle;\nvar entryContent = Naacp.newPostInNaacpNews.EntryContent;\nvar entryImageUrl = Naacp.newPostInNaacpNews.EntryImageUrl;\n\n// Brief summary of the entry content (first 100 characters)\nvar briefSummary = entryContent.substring(0, 100) + \"...\";\n\n// Construct the message text\nvar messageText = entryTitle + \": \" + briefSummary + \" \" + entryImageUrl;\n\nGroupme.postMessage.setGroupName(\"Friends\");\nGroupme.postMessage.setMessageText(messageText);"
  },
  {
    "intent": "When I post a new photo on Instagram with a caption like \"A cool photo\", send an email to my friends at john.doe@example.com and jane.smith@example.com with the subject \"My Latest Instagram Photo\" and include the photo's short URL http://instagr.am/p/CTGBw/ in the body, along with the HTML embed code for the photo <iframe src=\"http://instagr.am/p/CTGBw/embed\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>, and attach the image file from the source URL http://distillery.s3.amazonaws.com/media/2011/03/16/f22fa6e93e244449b1177c98e8a7a6cf_7.jpg.",
    "filter_code": "if (Instagram.anyNewPhotoByYou.Caption === \"A cool photo\") {\n  Gmail.sendAnEmail.setSubject(\"My Latest Instagram Photo\");\n  var body = \"Check out my latest photo: \" + Instagram.anyNewPhotoByYou.Url + \"\\n\\n\";\n  body += Instagram.anyNewPhotoByYou.EmbedCode;\n  Gmail.sendAnEmail.setBody(body);\n  Gmail.sendAnEmail.setAttachmentUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Gmail.sendAnEmail.setTo(\"john.doe@example.com, jane.smith@example.com\");\n} else {\n  Gmail.sendAnEmail.skip(\"Caption does not match.\");\n}"
  },
  {
    "intent": "Turn off the Wi-Fi on our ASUS Router at 6:00 PM every day for family time, allowing us to spend quality time together without modern world interference.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 18 && minute === 0) {\n  // No need to skip, this is the condition to turn off WiFi\n} else {\n  Asusrouter.turnWifiOff.skip(\"It's not family time yet.\");\n}"
  },
  {
    "intent": "When my Litter-Robot, named \"My Litter Robot\", detects a litter box cleaning event at 07:00, start my iRobot Roomba, named \"Living Room Roomba\", to clean the floor.",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Litter Robot\" && Whisker.lr3Events.EventType === \"Litter box cleaning\" && new Date(Whisker.lr3Events.CreatedAt).getHours() === 7) {\n  Irobot.startRobot.setRobotName(\"Living Room Roomba\");\n} else {\n  Irobot.startRobot.skip(\"Conditions not met for starting the Roomba.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location like 37.8267, -122.4230, and at a time such as 04:17:06, change all Philips Hue lights in the living room to a vibrant color like #FF69B4.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" && Meta.currentUserTime.hour() === 4 && Meta.currentUserTime.minute() === 17) {\n  Hue.setColorAllHue.setColor(\"#FF69B4\");\n} else {\n  Hue.setColorAllHue.skip(\"Location or time does not match.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, start the robot named \"Home Cleaner\" immediately.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Irobot.startRobot.setRobotName(\"Home Cleaner\");\n} else {\n  Irobot.startRobot.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Set the wallpaper of my Android device to the image from each new Instagram post I make, using the photo's Source URL as the image source.",
    "filter_code": "AndroidDevice.setWallpaper.setPhotoUrl(Instagram.anyNewPhotoByYou.SourceUrl);"
  },
  {
    "intent": "Every morning at 6:00 AM, send a mobile notification with the message \"Today's weather forecast: High of 75°F and Low of 50°F with a condition of Sunny\" and the title \"Weather Update\". The notification will include a link to the Weather Underground forecast for the user's location and an image of the current weather condition. Tap the notification to open the forecast in the default web browser.",
    "filter_code": "IfNotifications.sendRichNotification\n  .setMessage(\"Today's weather forecast: High of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and Low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F with a condition of \" + Weather.currentWeatherAtTime.TodaysCondition)\n  .setTitle(\"Weather Update\")\n  .setLinkUrl(Weather.currentWeatherAtTime.ForecastUrl)\n  .setImageUrl(Weather.currentWeatherAtTime.TodaysConditionImageURL);"
  },
  {
    "intent": "When a new photo is taken with the Camera widget at latitude 37.78346333333333 and longitude -122.42301220000003, share it on Telegram in the #general chat with the photo URL https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf and the caption \"A cool photo taken at 2020-07-08T04:17:06+05:00\".",
    "filter_code": "if (DoCamera.doCameraNewPhoto.Latitude === \"37.78346333333333\" && DoCamera.doCameraNewPhoto.Longitude === \"-122.42301220000003\") {\n  Telegram.sendPhoto.setChatId(\"#general\");\n  Telegram.sendPhoto.setPhotoUrl(DoCamera.doCameraNewPhoto.PublicPhotoURL);\n  Telegram.sendPhoto.setCaption(\"A cool photo taken at \" + DoCamera.doCameraNewPhoto.OccurredAt);\n} else {\n  Telegram.sendPhoto.skip(\"Latitude or longitude does not match.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, send a photo to the Telegram chat @home_notifications with a map image of the current location, accessed via https://maps.google.com/?ll=37.78308,-122.417236667&z=21, and include a caption \"Current Location: 37.8267, -122.4230\" to notify family members.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Telegram.sendPhoto.setChatId(\"@home_notifications\");\n  Telegram.sendPhoto.setPhotoUrl(DoButton.doButtonNewCommandCommon.LocationMapImageURL);\n  Telegram.sendPhoto.setCaption(\"Current Location: 37.8267, -122.4230\");\n} else {\n  Telegram.sendPhoto.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Call my device at 07:30 and read the current weather report for New York, including the current temperature in degrees Fahrenheit, the current condition, and today's high and low temperatures.",
    "filter_code": "var currentTime = Meta.currentUserTime();\nvar currentHour = currentTime.hour();\nvar currentMinute = currentTime.minute();\n\nif (currentHour == 7 && currentMinute == 30) {\n  var currentTempFahrenheit = Weather.currentWeatherAtTime.CurrentTempFahrenheit;\n  var currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  var highTempFahrenheit = Weather.currentWeatherAtTime.HighTempFahrenheit;\n  var lowTempFahrenheit = Weather.currentWeatherAtTime.LowTempFahrenheit;\n\n  var message = \"Good morning! The current weather in New York is \" + currentCondition + \" with a temperature of \" + currentTempFahrenheit + \" degrees Fahrenheit. Today's high will be \" + highTempFahrenheit + \" degrees Fahrenheit and the low will be \" + lowTempFahrenheit + \" degrees Fahrenheit.\";\n  VoipCalls.callMyDevice.setMessage(message);\n} else {\n  VoipCalls.callMyDevice.skip(\"Not the scheduled call time.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, dim all Philips Hue lights in the living room to a brightness of 50.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 22 &&\n    Math.abs(latitude - 37.8267) < 0.001 &&\n    Math.abs(longitude - (-122.4230)) < 0.001) {\n  Hue.setBrightnessAllHue.setLights(\"Living room\");\n  Hue.setBrightnessAllHue.setBrightness(\"50\");\n} else {\n  Hue.setBrightnessAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the Wi-Fi on my D-Link Wi-Fi Router, which is device number 1, every day at 7:00 AM.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nif (hour !== 7) {\n  DlinkWifiRouter.turnOnWifi.skip(\"Not 7:00 AM.\");\n}\nvar mydlinkNo = \"1\"; // Device number as specified in the intent\nDlinkWifiRouter.turnOnWifi.setMydlinkNo(mydlinkNo);"
  },
  {
    "intent": "When the wind speed rises above 50 kph at the home location, park the Husqvarna Automower until further notice.",
    "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedKph > 50) {\n  Automower.parkUntilFurtherNotice.skip(\"Wind speed is above 50 kph\");\n}"
  },
  {
    "intent": "Send an email to my inbox with the subject \"New Universe Today Article\" and the body containing the entry title, entry content, and a link to the entry URL whenever a new article is published on the Universe Today RSS feed.",
    "filter_code": "Email.sendMeEmail.setSubject(\"New Universe Today Article\");\nEmail.sendMeEmail.setBody(Feed.newFeedItem.EntryTitle + \"<br>\" + Feed.newFeedItem.EntryContent + \"<br><a href='\" + Feed.newFeedItem.EntryUrl + \"'>Read more</a>\");"
  },
  {
    "intent": "Send a weekly email digest every Friday at 10:00 AM with the latest posts from the 101 Cookbooks RSS feed, including the entry title, entry URL, and entry content, and set the email title to \"Weekly Recipe Inspiration\" with a message that says \"Plan your meals for the week ahead with these fresh and delicious recipes from 101 Cookbooks\".",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== \"Friday\") {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\n\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (!(hour === 10 && minute === 0)) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 10:00 AM.\");\n}\n\nEmailDigest.sendWeeklyEmail.setTitle(\"Weekly Recipe Inspiration\");\nEmailDigest.sendWeeklyEmail.setMessage(\"Plan your meals for the week ahead with these fresh and delicious recipes from 101 Cookbooks\");\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItem.FeedUrl);\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\n\nvar entryInfo = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItem.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItem.EntryContent;\nEmailDigest.sendWeeklyEmail.setMessage(EmailDigest.sendWeeklyEmail.getMessage() + \"\\n\\n\" + entryInfo);"
  },
  {
    "intent": "When the button widget on your smartphone is pressed at a location with latitude 37.8267 and longitude -122.4230, open the garage door labeled \"Main Entrance\" using the Garadget service.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Garadget.openDoor.setDoorId(\"Main Entrance\");\n} else {\n  Garadget.openDoor.skip(\"Button pressed at incorrect location\");\n}"
  },
  {
    "intent": "Close the garage door using the Garadget channel when the button widget on your smartphone is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring at 04:17:06+05:00, and share the event via https://ifttt.com/share/McFwJfDH9Ns.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" &&\n    DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" &&\n    DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\" &&\n    DoButton.doButtonNewCommandCommon.ShareURL === \"https://ifttt.com/share/McFwJfDH9Ns\") {\n  Garadget.closeDoor.skip(\"Garage door closed via button widget\");\n} else {\n  Garadget.closeDoor.skip(\"Conditions not met to close the garage door\");\n}"
  },
  {
    "intent": "Send a daily email digest at 9:00 AM with the title \"Today's Senate Floor Schedule\" and the message \"Bills and resolutions scheduled for the Senate floor today: {{EntryContent}}\" to subscribers who have opted-in to receive updates from Congress.gov, including the feed title \"Congress.gov Updates\" and the entry URL \"{{EntryUrl}}\", when a new feed item is published.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 9) {\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"09:00\");\n  EmailDigest.sendDailyEmail.setTitle(\"Today's Senate Floor Schedule\");\n  EmailDigest.sendDailyEmail.setMessage(\"Bills and resolutions scheduled for the Senate floor today: \" + Feed.newFeedItem.EntryContent);\n  EmailDigest.sendDailyEmail.setUrl(Feed.newFeedItem.EntryUrl);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not 9:00 AM\");\n}"
  },
  {
    "intent": "Every day at 7:00 AM, create a draft journal entry in Day One titled \"Morning Reflections\" and send a push notification with the message \"Start your day by reflecting on your thoughts and goals\" to remind you to write.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour == 7 && minute == 0) {\n  DayOne.createDraftJournalEntry.setTitle(\"Morning Reflections\");\n  IfNotifications.sendNotification.setMessage(\"Start your day by reflecting on your thoughts and goals\");\n} else {\n  IfNotifications.sendNotification.skip(\"Not the scheduled time for reflection.\");\n}"
  },
  {
    "intent": "Save 1p to my 'Savings' pot on Monzo for every 10 meters I cycle or run using Strava, but only when the activity type is either 'Ride' or 'Run', and the distance covered is more than 1000 meters.",
    "filter_code": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar activityType = Strava.newActivityByYou.ActivityType;\nif ((activityType === \"Ride\" || activityType === \"Run\") && distance > 1000) {\n  var amount = (distance / 10) * 0.01; // calculate amount in GBP\n  Monzo.potDeposit.setAmount(amount.toFixed(2));\n  Monzo.potDeposit.skip(); // This line should be removed as it will skip the action, instead we should let the action proceed with the calculated amount\n} else {\n  Monzo.potDeposit.skip(\"Activity type is not 'Ride' or 'Run', or distance is less than 1000 meters.\");\n}"
  },
  {
    "intent": "Every Saturday at 10:00 AM, send a weekly email digest with the title \"Saturday Style Updates\" to subscribers, including a list of the most popular articles from The New York Times Style section published between Friday at 12:00 AM and Saturday at 12:00 AM, along with their titles, authors, blurbs, article URLs, and image URLs, and set the email message to \"Check out this week's top style stories\".",
    "filter_code": "var day = Meta.currentUserTime.day();\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (day === 6 && hour === 10 && minute === 0) {\n  var articles = [];\n  var section = \"Style\";\n  var startDate = new Date();\n  startDate.setDate(startDate.getDate() - 1);\n  startDate.setHours(0, 0, 0, 0);\n  var endDate = new Date();\n  endDate.setHours(0, 0, 0, 0);\n\n  if (Nytimes.anyNewPopularArticleToday.Section === section &&\n      Nytimes.anyNewPopularArticleToday.PublishedDate >= startDate.toISOString() &&\n      Nytimes.anyNewPopularArticleToday.PublishedDate < endDate.toISOString()) {\n    articles.push({\n      title: Nytimes.anyNewPopularArticleToday.Title,\n      author: Nytimes.anyNewPopularArticleToday.Author,\n      blurb: Nytimes.anyNewPopularArticleToday.Blurb,\n      articleUrl: Nytimes.anyNewPopularArticleToday.ArticleUrl,\n      imageUrl: Nytimes.anyNewPopularArticleToday.ImageUrl\n    });\n  }\n\n  if (articles.length > 0) {\n    var title = \"Saturday Style Updates\";\n    var message = \"Check out this week's top style stories\";\n    var url = \"\";\n    EmailDigest.sendWeeklyEmail.setTitle(title);\n    EmailDigest.sendWeeklyEmail.setMessage(message);\n    EmailDigest.sendWeeklyEmail.setUrl(url);\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\n\n    var articleList = \"\";\n    for (var i = 0; i < articles.length; i++) {\n      articleList += \"<p><a href='\" + articles[i].articleUrl + \"'>\" + articles[i].title + \"</a> by \" + articles[i].author + \": \" + articles[i].blurb + \" <img src='\" + articles[i].imageUrl + \"'></p>\";\n    }\n    EmailDigest.sendWeeklyEmail.setMessage(message + \"<br>\" + articleList);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No new articles found.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Saturday at 10:00 AM.\");\n}"
  },
  {
    "intent": "When you add the tag \"Important\" to an Evernote note, a new entry will be created in your \"Personal\" Day One journal with the note title as the entry title, the HTML note body as the entry body, and tags including \"from_evernote\" and \"important_note\", without specifying a location or image.",
    "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"Important\")) {\n  DayOne.createJournalEntry.setBody(Evernote.addTagToNote.BodyHTML);\n  DayOne.createJournalEntry.setTags(\"from_evernote, important_note\");\n  // Assuming the journal_id is set to \"Personal\" by default or through other means\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, change the comfort profile of the \"Living Room Thermostat\" ecobee to a desired temperature of 22°C.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Ecobee.holdNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.holdNextTransition.setDesiredTemperature(22);\n} else {\n  Ecobee.holdNextTransition.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Turn on the 'Living Room Lights' shortcut from Wink: Shortcuts every day at sunset, as reported by Weather Underground for my location, when the current condition is Sunny and the temperature is above 18°C.",
    "filter_code": "if (Weather.sunSets.Condition === \"Sunny\" && parseFloat(Weather.sunSets.TempCelsius) > 18) {\n  WinkShortcuts.activateScene({ scene_id: \"Living Room Lights\" });\n} else {\n  WinkShortcuts.activateScene.skip(\"Condition or temperature does not meet the criteria.\");\n}"
  },
  {
    "intent": "Send a daily email digest at 9:00 AM at congress@example.com with the subject \"Today's Congressional Schedule\" and the message \"Bills and resolutions scheduled for the House floor today: {{EntryTitle}} ({{EntryUrl}})\" whenever a new item is published in the Congress.gov RSS feed, including the entry title, URL, and publication date.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 9) {\n  var message = \"Bills and resolutions scheduled for the House floor today: \" + Feed.newFeedItem.EntryTitle + \" (\" + Feed.newFeedItem.EntryUrl + \")\";\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"9:00 AM\");\n  EmailDigest.sendDailyEmail.setTitle(\"Today's Congressional Schedule\");\n  EmailDigest.sendDailyEmail.setMessage(message);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not 9:00 AM\");\n}"
  },
  {
    "intent": "When the sun sets in New York City, make a VoIP call to my device with a voice message saying \"Good evening, the current weather is Sunny with a temperature of 72 degrees Fahrenheit and today's high will be 75 degrees Fahrenheit while the low will be 65 degrees Fahrenheit, for more details check http://www.weather.com/weather/5-day/GMXX1273\".",
    "filter_code": "var location = \"New York City\";\nvar condition = Weather.sunSets.Condition;\nvar tempFahrenheit = Weather.sunSets.TempFahrenheit;\nvar highTempFahrenheit = Weather.sunSets.HighTempFahrenheit;\nvar lowTempFahrenheit = Weather.sunSets.LowTempFahrenheit;\nvar forecastUrl = Weather.sunSets.ForecastUrl;\n\nif (location === \"New York City\" && Weather.sunSets.SunsetAt) {\n  var message = `Good evening, the current weather is ${condition} with a temperature of ${tempFahrenheit} degrees Fahrenheit and today's high will be ${highTempFahrenheit} degrees Fahrenheit while the low will be ${lowTempFahrenheit} degrees Fahrenheit, for more details check ${forecastUrl}`;\n  VoipCalls.callMyDevice.setMessage(message);\n} else {\n  VoipCalls.callMyDevice.skip(\"Sun has not set in New York City yet.\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with the hashtag #journal, automatically create a new journal entry in Day One's \"Personal\" journal, including the caption without the hashtag and the image from the Instagram post.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#journal\")) {\n  DayOne.createJournalEntry.setBody(Instagram.newPhotoByYouTagged.CaptionNoTag);\n  DayOne.createJournalEntry.setImage(Instagram.newPhotoByYouTagged.SourceUrl);\n  DayOne.createJournalEntry.setTags(\"instagram, journal\");\n} else {\n  DayOne.createJournalEntry.skip(\"Post does not contain #journal hashtag.\");\n}"
  },
  {
    "intent": "Send a daily email at 08:00 with the title \"Morning Giphy Delight\" and including an in-line GIF from the search query \"cute cats playing\", using the HTML provided by Giphy for embedding, to brighten up the recipient's day.",
    "filter_code": "EmailDigest.sendDailyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendDailyEmail.setTitle(\"Morning Giphy Delight\");\nvar searchQuery = \"cute cats playing\";\nEmailDigest.sendDailyEmail.setMessage(Giphy.translate.EmailHTML);\nEmailDigest.sendDailyEmail.setUrl(Giphy.translate.URL);"
  },
  {
    "intent": "When you post a new video with the hashtag #mynewvideo on Instagram, send the video to the Telegram chat @mychatroom with the caption \"Check out my latest video!\" and include the video URL http://instagr.am/p/CTGBw/.",
    "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"#mynewvideo\")) {\n  var videoUrl = \"http://instagr.am/p/CTGBw/\";\n  var caption = \"Check out my latest video!\";\n  Telegram.sendVideo.setVideoUrl(videoUrl);\n  Telegram.sendVideo.setCaption(caption);\n} else {\n  Telegram.sendVideo.skip(\"The Instagram post does not contain the hashtag #mynewvideo.\");\n}"
  },
  {
    "intent": "Send me a weekly email digest every Sunday at 10:00 AM with New York Times articles matching the search term \"climate change\" and including the article title, author, blurb, and URL, with the email titled \"Weekly Climate Change News\" and a message \"Stay updated on the latest climate change news\".",
    "filter_code": "var searchTerm = \"climate change\";\nvar dayOfWeek = \"Sunday\";\nvar timeOfDay = \"10:00 AM\";\nvar title = \"Weekly Climate Change News\";\nvar message = \"Stay updated on the latest climate change news\";\n\nif (Nytimes.newArticleMatchingSearch.term === searchTerm) {\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(dayOfWeek);\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(timeOfDay);\n  EmailDigest.sendWeeklyEmail.setTitle(title);\n  var articleInfo = \"Title: \" + Nytimes.newArticleMatchingSearch.Title + \"<br>\" +\n                    \"Author: \" + Nytimes.newArticleMatchingSearch.Author + \"<br>\" +\n                    \"Blurb: \" + Nytimes.newArticleMatchingSearch.Blurb + \"<br>\" +\n                    \"URL: <a href='\" + Nytimes.newArticleMatchingSearch.ArticleUrl + \"'>Read more</a>\";\n  EmailDigest.sendWeeklyEmail.setMessage(message + \"<br><br>\" + articleInfo);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No matching articles found for '\" + searchTerm + \"'\");\n}"
  },
  {
    "intent": "When it is Christmas Day in the Eastern Standard Time timezone, set the \"Winter Wonderland\" Scene on your Nanoleaf Aurora.",
    "filter_code": "if (Isitchristmas.christmas.Answer === \"YES\" && Isitchristmas.christmas.timezone === \"Eastern Standard Time\") {\n  Nanoleaf.turnOnScene.setMyScenes(\"Winter Wonderland\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"It's not Christmas Day in the Eastern Standard Time timezone.\");\n}"
  },
  {
    "intent": "Toggle all Philips Hue lights in the living room when the button widget is pressed at 37.82666360000001 latitude and -122.42301220000003 longitude.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Hue.toggleAllHue.setLights(\"Living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Location does not match living room coordinates.\");\n}"
  },
  {
    "intent": "Every day at 5:00 PM, send a daily email digest with the latest Winter Olympic news coverage to my inbox, including articles from The New York Times that match the search term \"Winter Olympics\" and are published in the Sports section, with a title like \"Today's Winter Olympics Updates\", and a message that says \"Stay up-to-date with the latest Winter Olympics news\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (hour === 17 && minute === 0) {\n  var searchTerm = \"Winter Olympics\";\n  var section = \"Sports\";\n  var title = \"Today's Winter Olympics Updates\";\n  var message = \"Stay up-to-date with the latest Winter Olympics news\";\n\n  if (Nytimes.newArticleMatchingSearch.Term === searchTerm && Nytimes.newArticleMatchingSearch.Section === section) {\n    EmailDigest.sendDailyEmail.setTimeOfDay(\"5:00 PM\");\n    EmailDigest.sendDailyEmail.setTitle(title);\n    EmailDigest.sendDailyEmail.setMessage(message);\n    EmailDigest.sendDailyEmail.setUrl(Nytimes.newArticleMatchingSearch.ArticleUrl);\n  } else {\n    EmailDigest.sendDailyEmail.skip(\"No matching articles found.\");\n  }\n} else {\n  EmailDigest.sendDailyEmail.skip(\"Not the scheduled time.\");\n}"
  },
  {
    "intent": "When the sun rises at my location, which is set to New York City, and the current temperature is above 60°F, turn on my LIFX bulbs in the living room with a warm white color, at 80% brightness, and a fade-in duration of 10 seconds.",
    "filter_code": "if (Weather.sunRises.TempFahrenheit > 60) {\n  Lifx.turnOn.setSelector(\"Living Room\");\n  Lifx.turnOn.setColor(\"Warm White\");\n  Lifx.turnOn.setBrightness(0.8);\n  Lifx.turnOn.setFadeInDuration(10);\n} else {\n  Lifx.turnOn.skip(\"Temperature is not above 60°F\");\n}"
  },
  {
    "intent": "Turn on the living room Nanoleaf lights to daylight white at 7:00 AM every day to start the morning with a refreshing ambiance.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 7 || DateAndTime.everyDayAt.CheckTime.minute() !== 0) {\n  Nanoleaf.changeColorRequest.skip(\"Not 7:00 AM\");\n} else {\n  Nanoleaf.changeColorRequest.setValue(\"daylight white\");\n}"
  },
  {
    "intent": "When a new app is found in the Apple App Store with a search query for \"photography\" and its category is \"Productivity\", append a new row to a Google Sheets spreadsheet named \"New_Apps\" in the folder path \"IFTTT/Applications\", with a formatted row containing the app's name, description, price, rating, and version, separated by \"|||\", such as \"IFTTT|||An app that brings services together|||$9.99|||5 stars|||2.1.3\".",
    "filter_code": "if (AppStore.newAppFromSearch.SearchQuery === \"photography\" && AppStore.newAppFromSearch.Category === \"Productivity\") {\n  var formattedRow = AppStore.newAppFromSearch.Name + \"|||\" + AppStore.newAppFromSearch.Description + \"|||\" + AppStore.newAppFromSearch.Price + \"|||\" + AppStore.newAppFromSearch.Rating + \"|||\" + AppStore.newAppFromSearch.Version;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"New_Apps\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Applications\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"App does not match the search query or category.\");\n}"
  },
  {
    "intent": "Append notes tagged with \"Important\" from Evernote to a Google Doc named \"Daily Notes\" in the \"Notes\" folder, including the note title, body HTML, public URL, tags, and creation time, whenever the \"Drive\" tag is added to a note.",
    "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"Drive\") && Evernote.addTagToNote.Tags.includes(\"Important\")) {\n  GoogleDocs.appendToGoogleDoc.setFilename(\"Daily Notes\");\n  GoogleDocs.appendToGoogleDoc.setPath(\"Notes\");\n  var noteContent = \"<h1>\" + Evernote.addTagToNote.Title + \"</h1>\";\n  noteContent += Evernote.addTagToNote.BodyHTML;\n  noteContent += \"<p>Public URL: <a href='\" + Evernote.addTagToNote.PublicUrl + \"'>\" + Evernote.addTagToNote.PublicUrl + \"</a></p>\";\n  noteContent += \"<p>Tags: \" + Evernote.addTagToNote.Tags + \"</p>\";\n  noteContent += \"<p>Created at: \" + Evernote.addTagToNote.CreatedAt + \"</p>\";\n  GoogleDocs.appendToGoogleDoc.setBody(noteContent);\n} else {\n  GoogleDocs.appendToGoogleDoc.skip(\"Note is not tagged with both 'Drive' and 'Important'.\");\n}"
  },
  {
    "intent": "Send a weekly email digest with new GIFs tagged \"Taco\" from Giphy to my inbox every Tuesday at 12:00 PM, including the GIF image URL and a title that says \"Taco Tuesday Fun\".",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day === \"Tuesday\") {\n  var tags = Giphy.search.Tags;\n  if (tags.includes(\"Taco\")) {\n    EmailDigest.sendWeeklyEmail.setDayOfWeek(\"Tuesday\");\n    EmailDigest.sendWeeklyEmail.setTimeOfDay(\"12:00 PM\");\n    EmailDigest.sendWeeklyEmail.setTitle(\"Taco Tuesday Fun\");\n    EmailDigest.sendWeeklyEmail.setMessage(Giphy.search.ImageURL);\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No Taco tagged GIFs found.\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Tuesday.\");\n}"
  },
  {
    "intent": "Turn on the SwitchBot device named \"Living Room Bot\" when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, and send a notification with the map image of the location.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 22) {\n  Switchbot.turnOnBot.setChoseADevice(\"Living Room Bot\");\n} else {\n  Switchbot.turnOnBot.skip(\"Location or time does not match the criteria.\");\n}\n\nvar locationMapImageURL = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n// Assuming there's a way to send notifications with images,\n// for simplicity, we'll just log it here. In real scenarios,\n// you'd replace this with actual notification sending code.\nconsole.log(\"Notification: Turned on Living Room Bot at \" + locationMapImageURL);"
  },
  {
    "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"Universe Today News\" and a message containing the entry titles and URLs from the Universe Today RSS feed, including images if available.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== \"Friday\") {\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nif (!(hour === 10 && minute === 0)) {\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 10:00 AM.\");\n}\n\nvar message = \"Universe Today News:<br/>\";\nvar entries = Feed.newFeedItem;\nfor (var i = 0; i < entries.length; i++) {\n  var title = entries[i].EntryTitle;\n  var url = entries[i].EntryUrl;\n  var image = entries[i].EntryImageUrl;\n  message += \"<a href='\" + url + \"'>\" + title + \"</a><br/>\";\n  if (image) {\n    message += \"<img src='\" + image + \"'/><br/>\";\n  }\n}\n\nEmailDigest.sendWeeklyEmail.setTitle(\"Universe Today News\");\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");"
  },
  {
    "intent": "When the gust speed exceeds 38.6 km/h, as measured by my Netatmo device named \"My Home - Wind gauge\", append a new row to the Google Sheets spreadsheet named \"Stormy Days\" with the formatted row containing the date and time of measurement, the device name, and the target gust speed, and place this spreadsheet in the Drive folder path \"Weather/Reports\".",
    "filter_code": "if (Netatmo.gustSpeedAbove.GustSpeedKmh > 38.6 && Netatmo.gustSpeedAbove.DeviceName === \"My Home - Wind gauge\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Stormy Days\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Weather/Reports\");\n  var formattedRow = Netatmo.gustSpeedAbove.MeasuredAt + \"|||\" + Netatmo.gustSpeedAbove.DeviceName + \"|||\" + Netatmo.gustSpeedAbove.TargetGustSpeedKmh;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Gust speed is not above threshold or device name does not match.\");\n}"
  },
  {
    "intent": "When the Library of Congress publishes a new post to \"Picture this\" with a title like \"Sumo Sights\" and an image URL such as \"http://blogs.loc.gov/picturethis/files/2017/05/3g14324u.jpg\", set the Android wallpaper to the image from the post's image URL.",
    "filter_code": "if (Loc.newPictureThisPost.PostImageUrl !== \"http://blogs.loc.gov/picturethis/files/placeholder_image.jpg\") {\n  AndroidDevice.setWallpaper.setPhotoUrl(Loc.newPictureThisPost.PostImageUrl);\n} else {\n  AndroidDevice.setWallpaper.skip(\"No image available in the post.\");\n}"
  },
  {
    "intent": "Send a notification with the title, link, and preview content of the latest news release from the Federal Communications Commission when it contains the keyword \"spectrum auction\" or \"5G deployment\".",
    "filter_code": "if (Fcc.newNewsRelease.PreviewContent.toLowerCase().includes(\"spectrum auction\") || Fcc.newNewsRelease.PreviewContent.toLowerCase().includes(\"5g deployment\")) {\n  IfNotifications.sendNotification.setMessage(Fcc.newNewsRelease.Title + \": \" + Fcc.newNewsRelease.Link + \". Preview: \" + Fcc.newNewsRelease.PreviewContent);\n} else {\n  IfNotifications.sendNotification.skip(\"Does not contain 'spectrum auction' or '5G deployment'.\");\n}"
  },
  {
    "intent": "Call my device every morning at 07:00 with a voice message saying \"Today's weather forecast is Sunny with a high of 75°F and a low of 50°F, the current UV index is 6, wind speed is 5 mph from the North, and humidity is 60%.\"",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var message = \"Today's weather forecast is \" + Weather.currentWeatherAtTime.TodaysCondition + \" with a high of \" + Weather.currentWeatherAtTime.HighTempFahrenheit + \"°F and a low of \" + Weather.currentWeatherAtTime.LowTempFahrenheit + \"°F, the current UV index is \" + Weather.currentWeatherAtTime.UvIndex + \", wind speed is \" + Weather.currentWeatherAtTime.WindSpeedMph + \" mph from the \" + Weather.currentWeatherAtTime.WindDirection + \", and humidity is \" + Weather.currentWeatherAtTime.Humidity + \"%.\";\n  VoipCalls.callMyDevice.setMessage(message);\n} else {\n  VoipCalls.callMyDevice.skip(\"Not morning time\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, turn the living room light on if it's off, or off if it's on, using the Vimar VIEW device named \"Living Room Lamp\".",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 22) {\n  ViewProd.onOffActionLight.setDevice(\"Living Room Lamp\");\n  var currentState = ViewProd.onOffActionLight.getState();\n  if (currentState === \"on\") {\n    ViewProd.onOffActionLight.setState(\"off\");\n  } else {\n    ViewProd.onOffActionLight.setState(\"on\");\n  }\n} else {\n  ViewProd.onOffActionLight.skip(\"Button pressed outside of specified location or time.\");\n}"
  },
  {
    "intent": "Turn off the sprinklers controlled by Rachio on the \"Front Yard\" device when the wind speed from the Ambient Weather device named \"Backyard Station\" exceeds 15 mph.",
    "filter_code": "if (AmbientWeather.windspdmphGt.WindSpeed > 15 && AmbientWeather.windspdmphGt.Device === \"Backyard Station\" && RachioIro.stopWatering.device_id === \"Front Yard\") {\n  RachioIro.stopWatering.skip(\"Wind speed exceeds 15 mph.\");\n}"
  },
  {
    "intent": "Turn on the SwitchBot Device 1 with SwitchBot Hub Plus via infrared when the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, and share the event on https://ifttt.com/share/McFwJfDH9Ns.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar shareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 19) {\n  if (shareUrl === \"https://ifttt.com/share/McFwJfDH9Ns\") {\n    Switchbot.turnOnBot.skip(\"SwitchBot Device 1\");\n  } else {\n    Switchbot.turnOnBot.skip(\"Sharing URL does not match.\");\n  }\n} else {\n  Switchbot.turnOnBot.skip(\"Outside of specified location or time.\");\n}"
  },
  {
    "intent": "When a new article is favorited in Pocket with the title \"My Blog Post\", URL \"http://blog.ifttt.com\", excerpt \"This is an interesting blog post about IFTTT.\", image URL \"http://example.com/image.jpg\", and tags \"technology, innovation, apps\", add it to Buffer as a new update with the message \"Check out this great article: My Blog Post - http://blog.ifttt.com\" including the image.",
    "filter_code": "if (Pocket.newFavoriteItemPocket.Title === \"My Blog Post\" &&\n    Pocket.newFavoriteItemPocket.Url === \"http://blog.ifttt.com\" &&\n    Pocket.newFavoriteItemPocket.Excerpt === \"This is an interesting blog post about IFTTT.\" &&\n    Pocket.newFavoriteItemPocket.ImageUrl === \"http://example.com/image.jpg\" &&\n    Pocket.newFavoriteItemPocket.Tags === \"technology, innovation, apps\") {\n  var message = \"Check out this great article: \" + Pocket.newFavoriteItemPocket.Title + \" - \" + Pocket.newFavoriteItemPocket.Url;\n  Buffer.addToBuffer.setMessage(message);\n  Buffer.addToBuffer.setThumbnailUrl(Pocket.newFavoriteItemPocket.ImageUrl);\n} else {\n  Buffer.addToBuffer.skip(\"The favorited article does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the occurrence time is between 07:00 and 19:00, activate the scene on device \"Living Room Lights\" using the Vimar VIEW channel.",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nvar device = \"Living Room Lights\";\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 19) {\n  ViewProd.sceneAction.setDevice(device);\n} else {\n  ViewProd.sceneAction.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "If the gust speed exceeds 40 km/h at My Home - Wind gauge, then set all Philips Hue lights in the Living Room to red (#FF0000).",
    "filter_code": "if (Netatmo.gustSpeedAbove.DeviceName === \"My Home - Wind gauge\" && Netatmo.gustSpeedAbove.GustSpeedKmh > 40) {\n  Hue.setColorAllHue.setLights(\"Living Room\");\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Gust speed is below threshold or device is not My Home - Wind gauge.\");\n}"
  },
  {
    "intent": "Set aside £20 into my \"Savings\" pot on the 15th of every month at 08:00.",
    "filter_code": "if (DateAndTime.everyMonthOnThe.month_day !== \"15\" || DateAndTime.everyMonthOnThe.time !== \"08:00\") {\n  Monzo.potDeposit.skip(\"Not the scheduled time for savings transfer.\");\n} else {\n  Monzo.potDeposit.setPot(\"Savings\");\n  Monzo.potDeposit.setAmount(\"20\");\n}"
  },
  {
    "intent": "Start the \"Morning News\" preset media at 07:30 on the \"Living Room Triby\" every Monday, Tuesday, Wednesday, Thursday, and Friday.",
    "filter_code": "var weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\nvar currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (weekdays.includes(dayOfWeek) && hour === 7 && minute === 30) {\n  InvoxiaTriby.playMediaPresetOnSpecifiedTriby.setTriby(\"Living Room Triby\");\n  InvoxiaTriby.playMediaPresetOnSpecifiedTriby.setPreset(\"Morning News\");\n} else {\n  InvoxiaTriby.playMediaPresetOnSpecifiedTriby.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a weekly email digest every Sunday at 10:00 AM with the subject \"Drag Race GIFs\" and a message containing the HTML of new Giphy GIFs tagged with \"drag race\", including their inline images, to be sent via Email Digest.",
    "filter_code": "var tags = Giphy.search.Tags;\nif (tags.includes(\"drag race\")) {\n  var emailHTML = Giphy.search.EmailHTML;\n  var title = \"Drag Race GIFs\";\n  var message = emailHTML;\n  var dayOfWeek = \"Sunday\";\n  var timeOfDay = \"10:00 AM\";\n\n  EmailDigest.sendWeeklyEmail.setTitle(title);\n  EmailDigest.sendWeeklyEmail.setMessage(message);\n  EmailDigest.sendWeeklyEmail.setDayOfWeek(dayOfWeek);\n  EmailDigest.sendWeeklyEmail.setTimeOfDay(timeOfDay);\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"No drag race GIFs found.\");\n}"
  },
  {
    "intent": "When you press the button on your phone at a location like 37.82666360000001 latitude and -122.42301220000003 longitude, set your living room Signature thermostat to 22°C for the next 2 hours.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  NVentNuheat.setTemperature.setThermostat(\"living room\");\n  NVentNuheat.setTemperature.setScale(\"Celsius\");\n  NVentNuheat.setTemperature.setSetpointTemperature(\"22\");\n  NVentNuheat.setTemperature.setDuration(\"2 hours\");\n} else {\n  NVentNuheat.setTemperature.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Send a message with \"#tvon\" to the \"@IFTTT\" bot in the \"Living Room\" group on Telegram to turn on the Harmony connected TV using the \"Watch TV\" activity.",
    "filter_code": "if (Telegram.newGroupTextFilter.Text === \"#tvon\" && Telegram.newGroupTextFilter.GroupTitle === \"Living Room\") {\n  Harmony.startActivity.setActivity(\"Watch TV\");\n} else {\n  Harmony.startActivity.skip(\"Invalid command or group.\");\n}"
  },
  {
    "intent": "When the wind speed measured by my Netatmo device named \"My Home - Wind gauge\" exceeds 24 km/h, send a notification with the message \"High wind warning: wind speed is above 24 km/h\".",
    "filter_code": "if (Netatmo.windAverageAbove.WindSpeedKmh > Netatmo.windAverageAbove.TargetWindSpeedKmh) {\n  IfNotifications.sendNotification.setMessage(\"High wind warning: wind speed is above \" + Netatmo.windAverageAbove.TargetWindSpeedKmh + \" km/h\");\n} else {\n  IfNotifications.sendNotification.skip(\"Wind speed is not above threshold.\");\n}"
  },
  {
    "intent": "When the IFTTT Do button is pressed at a location like 37.8267, -122.4230, turn on the living room air conditioning using AirTouch.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Airtouch.acPower.setPowerOnOff(\"on\");\n  Airtouch.acPower.skip();\n}"
  },
  {
    "intent": "When the Flic button named \"MyFlicButton\" is single-clicked, turn on the Atmoph Window, and if it's double-clicked within 5 seconds by the same user at a location with longitude 18.0649000 and latitude 59.3325800, put the screen to sleep.",
    "filter_code": "var lastClickTime = null;\nvar lastClickType = null;\nvar lastLongitude = null;\nvar lastLatitude = null;\n\nif (Flic.click.ClickType === 'click' && Flic.click.ButtonUuid === 'MyFlicButton') {\n  Atmoph.turnOn();\n} else if (Flic.click.ClickType === 'double_click' && Flic.click.ButtonUuid === 'MyFlicButton'\n           && Flic.click.Longitude === 18.0649000 && Flic.click.Latitude === 59.3325800) {\n  var currentTime = new Date(Flic.click.ClickedAt).getTime();\n  if (lastClickTime !== null && lastClickType === 'click' && lastLongitude === 18.0649000\n      && lastLatitude === 59.3325800 && (currentTime - lastClickTime) / 1000 <= 5) {\n    Atmoph.sleep();\n  }\n  lastClickTime = currentTime;\n  lastClickType = Flic.click.ClickType;\n  lastLongitude = Flic.click.Longitude;\n  lastLatitude = Flic.click.Latitude;\n} else {\n  Atmoph.turnOn.skip('Not a single click or double click within 5 seconds');\n}"
  },
  {
    "intent": "Turn on the Living Room WIFIPLUG switch at sunset every day, based on the Weather Underground forecast for New York City.",
    "filter_code": "if (Weather.sunSets.SunsetAt) {\n  Wifiplug.turnOn.setWhichSwitch(\"Living Room\");\n} else {\n  Wifiplug.turnOn.skip(\"It's not sunset yet.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, turn on the Living Room Fan device using the Fanimation service.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Fansync.onOff.setDevice(\"Living Room Fan\");\n  Fansync.onOff.setOnOff(\"on\");\n} else {\n  Fansync.onOff.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Reboot the D-Link Wi-Fi Router, specifically device number 1, every day at 3:00 AM to refresh the network.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 3 && minute === 0) {\n  DlinkWifiRouter.reboot.setMydlinkNo(1);\n} else {\n  DlinkWifiRouter.reboot.skip(\"Not 3:00 AM\");\n}"
  },
  {
    "intent": "When the IFTTT Do button is pressed at a location like 37.82666360000001 latitude and -122.42301220000003 longitude, turn off the living room air conditioning using AirTouch.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Airtouch.acPower.setAcIndex(\"living_room\");\n  Airtouch.acPower.setPowerOnOff(\"off\");\n} else {\n  Airtouch.acPower.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Close the awning when the wind speed rises above 10mph in New York to prevent damage.",
    "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 10 && Weather.windSpeedRisesAbove.Location === \"New York\") {\n  SomfyMylink.move.setCommand(\"close\");\n} else {\n  SomfyMylink.move.skip(\"Wind speed is below 10mph or not in New York.\");\n}"
  },
  {
    "intent": "When you tag an item with the tag \"ReadLater\" in Pocket, a task named \"Read My first blog post later\" will be added to Remember The Milk to remind you to read http://blog.ifttt.com later.",
    "filter_code": "if (Pocket.newTaggedItemPocket.Tags.includes(\"ReadLater\")) {\n  var taskName = \"Read \" + Pocket.newTaggedItemPocket.Title + \" later\";\n  Rememberthemilk.tasksAdd.setTask(taskName);\n  Rememberthemilk.tasksAdd.setUrl(Pocket.newTaggedItemPocket.Url);\n}"
  },
  {
    "intent": "When a new task labeled \"Groceries\" is created in the \"Shopping\" project on Todoist with a due date today and priority set to \"Priority 1\", send a message to the Telegram chat \"#household\" that includes the task content, task description, and a link to the task, and enable web page preview for any URLs included in the message.",
    "filter_code": "if (Todoist.newTaskCreated.Labels.includes(\"Groceries\")\n    && Todoist.newTaskCreated.Project === \"Shopping\"\n    && Todoist.newTaskCreated.DueDate.startsWith(new Date().toISOString().split('T')[0])\n    && Todoist.newTaskCreated.Priority === \"Priority 1\") {\n  var messageText = `Task: ${Todoist.newTaskCreated.TaskContent}\\nDescription: ${Todoist.newTaskCreated.TaskDescription}\\nLink: ${Todoist.newTaskCreated.LinkToTask}`;\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, close the Skylink Atoms Garage Door Opener associated with the hub device named \"MyGarage\" using the hub password \"MySecurePassword123\".",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Skylinknet.gdoClose.setHubDev(\"MyGarage\");\n  Skylinknet.gdoClose.setKey(\"MySecurePassword123\");\n} else {\n  Skylinknet.gdoClose.skip(\"Button press not at the specified location.\");\n}"
  },
  {
    "intent": "Wake me up softly every day at 07:00 by switching the Bedroom Light to a dim level of 20 using my LightwaveRF Dimmer, providing a gentle start to the morning and avoiding the jarring effect of a traditional alarm clock.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.hour() == 7 && currentTime.minute() == 0) {\n  LightwaverfLighting.dimALight.setWhatDimLevel(\"20\");\n  LightwaverfLighting.dimALight.skip(\"Woke up softly at 07:00\");\n} else {\n  LightwaverfLighting.dimALight.skip(\"Not wake-up time\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, between 07:00 and 19:00, set the Heatzy device named \"Living Room Thermostat\" to heat mode.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && latitude === \"37.82666360000001\" && longitude === \"-122.42301220000003\") {\n  Heatzy.aSetHeatMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetHeatMode.skip(\"Outside of specified location or time.\");\n}"
  },
  {
    "intent": "When the Flic button named \"My New Flic\" is double-clicked at a location with latitude 59.3325800 and longitude 18.0649000, open the Garadget door identified as \"Main Garage Door\".",
    "filter_code": "if (Flic.tag.FlicName === \"My New Flic\" &&\n    Flic.tag.ClickType === \"double_click\" &&\n    Flic.tag.Latitude === \"59.3325800\" &&\n    Flic.tag.Longitude === \"18.0649000\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Conditions not met to open the garage door.\");\n}"
  },
  {
    "intent": "When my Google Pixel 7 connects to the Wifi network named \"HomeNetwork\" at any time, the QNAP Device named \"LivingRoomQNAP\" will start playing the \"MorningPlaylist\" from Music Station using the \"HDMI\" audio interface.",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Qnap.controlMusicOnQnapDevice.setAudioInterface(\"HDMI\");\n  Qnap.controlMusicOnQnapDevice.setFunction(\"play\");\n  Qnap.controlMusicOnQnapDevice.setPlaylist(\"MorningPlaylist\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp device using LinkJapan eHome when the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and it's between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 &&\n    Math.abs(lat - 37.8267) < 0.001 &&\n    Math.abs(lon - (-122.4230)) < 0.001) {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Outside of active hours or incorrect location.\");\n}"
  },
  {
    "intent": "When the Flic button named \"My New Flic\" is double-clicked at a location with longitude 18.0649000 and latitude 59.3325800, close the garage door.",
    "filter_code": "if (Flic.tag.FlicName === \"My New Flic\" &&\n    Flic.tag.ClickType === \"double_click\" &&\n    Flic.tag.Longitude === \"18.0649000\" &&\n    Flic.tag.Latitude === \"59.3325800\") {\n  Garadget.closeDoor.skip(\"Flic button double-clicked at specified location.\");\n} else {\n  Garadget.closeDoor.setDoorId(null);\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, start the Home Connect Coffee Machine with the program set to Cappuccino, strength set to medium, size set to large, and milk amount set to extra foamy, using the coffee machine named MyMorningBrew.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setHaId(\"MyMorningBrew\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setProgram(\"Cappuccino\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setBeanAmount(\"medium\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setFillQuantity(\"large\");\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.setMilkAmount(\"extra foamy\");\n} else {\n  HcCoffeeMachine.coffeeMakerStartMilkMixProgram.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Turn on the living room light every weekday at 7:00 AM and turn it off at 6:00 PM using the Vimar VIEW device.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.getHours() === 7) {\n  ViewProd.onOffActionLight.setState(\"on\");\n} else if (DateAndTime.everyWeekdayAt.CheckTime.getHours() === 18) {\n  ViewProd.onOffActionLight.setState(\"off\");\n}"
  },
  {
    "intent": "Turn off my WIFIPLUG switch, labeled \"Living Room Lamp\", every day at sunrise.",
    "filter_code": "if (Weather.sunRises.SunriseAt !== null && Weather.sunRises.SunriseAt !== undefined) {\n  Wifiplug.turnOff.setWhichSwitch(\"Living Room Lamp\");\n} else {\n  Wifiplug.turnOff.skip(\"Sunrise time is not available.\");\n}"
  },
  {
    "intent": "Activate the 'Good Morning' scene on my 'Living Room' Vimar VIEW device every weekday at 7:00 AM.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() === 7 && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Saturday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Sunday\") {\n  ViewProd.sceneAction.setDevice(\"Living Room\");\n  ViewProd.sceneAction.setScene(\"Good Morning\");\n} else {\n  ViewProd.sceneAction.skip(\"Not the scheduled time or day for the 'Good Morning' scene.\");\n}"
  },
  {
    "intent": "When the Flic button named \"MyOfficeButton\" is double-clicked between 07:00 and 19:00, and the click occurs within a 1km radius of latitude 59.3325800 and longitude 18.0649000, turn on the Atmoph Window named \"LivingRoomView\". If the same button is clicked again with the same conditions, turn off the Atmoph Window.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = Flic.click.Latitude;\nvar longitude = Flic.click.Longitude;\nvar clickType = Flic.click.ClickType;\n\nif (hour >= 7 && hour < 19 &&\n    Math.abs(latitude - 59.3325800) <= 0.009 &&\n    Math.abs(longitude - 18.0649000) <= 0.009 &&\n    Flic.click.ButtonUuid === \"MyOfficeButton\") {\n  if (clickType === \"double_click\") {\n    Atmoph.turnOn.setWindowName(\"LivingRoomView\");\n  } else if (clickType === \"click\" && Atmoph.getWindowName() === \"LivingRoomView\") {\n    Atmoph.turnOff.skip(\"Turning off LivingRoomView\");\n  }\n}"
  },
  {
    "intent": "Turn on the living room lights and play a gentle morning playlist from https://www.npr.org/podcasts/510310/morning-edition on the Sonos speaker in the bedroom at 7:00 AM every day.",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\n\nif (hour === 7 && minute === 0) {\n  // Turn on the living room lights\n  // NOTE: The provided JSON does not contain information about controlling lights.\n  // This part of the intent cannot be implemented with the given data.\n\n  // Play a gentle morning playlist from https://www.npr.org/podcasts/510310/morning-edition on the Sonos speaker in the bedroom\n  Sonos.playStream.setUrl(\"https://www.npr.org/podcasts/510310/morning-edition\");\n  Sonos.playStream.setName(\"Morning Edition\");\n  Sonos.playStream.setImageUrl(\"https://www.npr.org/assets/img/2021/07/13/morning-edition_podcast-art.png\"); // Replace with the actual image URL if needed\n  Sonos.playStream.setRoom(\"Bedroom\"); // Assuming \"Bedroom\" is a valid room name\n  Sonos.playStream.setIncludeGroupedRooms(false); // Play in this room only\n} else {\n  Sonos.playStream.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "Deactivate Away Mode every day at 7:00 AM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 7 && minute === 0) {\n  WiserHeat.setAway.setAwayMode(\"Off\");\n} else {\n  WiserHeat.setAway.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "When a new submission is received from form 1234567890 on JotForm, specifically when the question filter \"Email\" is filled out and the submission date time is between 07:00 and 19:00, create a new contact or update an existing one in MailChimp list \"My Newsletter\" with the email address provided in the form data, including the first name \"John\" and last name \"Doe\" if available.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Jotform.latestFormSubmission.FormID === \"1234567890\" &&\n    Jotform.latestFormSubmission.FilteredRichTextData.includes(\"Email\") &&\n    hour >= 7 && hour <= 19) {\n  var email = Jotform.latestFormSubmission.FilteredRichTextData.match(/<td>E-mail</td>(.*?)</tr>/)[1].trim();\n  var firstName = Jotform.latestFormSubmission.FilteredRichTextData.match(/<td>First Name</td>(.*?)</tr>/);\n  var lastName = Jotform.latestFormSubmission.FilteredRichTextData.match(/<td>Last Name</td>(.*?)</tr>/);\n\n  if (email) {\n    Mailchimp.addNewSubscriber.setWhatEmailAddress(email);\n    if (firstName) Mailchimp.addNewSubscriber.setFirstName(firstName[1].trim());\n    if (lastName) Mailchimp.addNewSubscriber.setLast_name(lastName[1].trim());\n  } else {\n    Mailchimp.addNewSubscriber.skip(\"No email address found in the form data.\");\n  }\n} else {\n  Mailchimp.addNewSubscriber.skip(\"Form ID or question filter does not match, or outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new task is created in the \"Household Tasks\" project on Todoist with the label \"to_follow_up\" and priority \"Priority 1\", add the task to the \"Personal Tasks\" task list on Google Tasks with the task title set to the content of the Todoist task, notes including the description and link to the task, and due date matching the one set in Todoist.",
    "filter_code": "if (Todoist.newTaskCreated.Project === \"Household Tasks\" && Todoist.newTaskCreated.Labels.includes(\"to_follow_up\") && Todoist.newTaskCreated.Priority === \"Priority 1\") {\n  GoogleTasks.addTaskToTasklist.setTaskTitle(Todoist.newTaskCreated.TaskContent);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(Todoist.newTaskCreated.TaskDescription + \"\\n\" + Todoist.newTaskCreated.LinkToTask);\n  if (Todoist.newTaskCreated.DueDate) {\n    GoogleTasks.addTaskToTasklist.setDueDate(Todoist.newTaskCreated.DueDate);\n  }\n} else {\n  GoogleTasks.addTaskToTasklist.skip(\"Task does not match the specified conditions.\");\n}"
  },
  {
    "intent": "Run the \"Morning Routine\" Logicblock in Apilio every time the button widget is tapped on the phone, using the location where the button was pressed, which is latitude 37.8267 and longitude -122.4230, and the current date and time, such as 2020-07-08T04:17:06+05:00, to trigger the evaluation of the Logicblock.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Apilio.logicblockEvaluationRequests.setLogicblockIdentifier(\"Morning Routine\");\n  Apilio.logicblockEvaluationRequests.skip();\n} else {\n  Apilio.logicblockEvaluationRequests.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp device with one click using the IFTTT app button widget when the button is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, and record the event with a share URL https://ifttt.com/share/McFwJfDH9Ns and occurred at date and time 2020-07-08T04:17:06+05:00.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  SmartHomeSolution.turnDeviceOn.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  SmartHomeSolution.turnDeviceOn.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, turn off the Heatzy device named \"Living Room Heater\" if the current time is between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour <= 19) {\n  Heatzy.aTurnOff.setDevice(\"Living Room Heater\");\n} else {\n  Heatzy.aTurnOff.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp device with one click using the IFTTT app button widget when pressed at a location with latitude 37.8267 and longitude -122.4230, and record the event with a share URL https://ifttt.com/share/McFwJfDH9Ns and occurrence time 2020-07-08T04:17:06+05:00.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  SmartHomeSolution.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n  var shareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\n  var occurredAt = DoButton.doButtonNewCommandCommon.OccurredAt;\n  // Assuming recording the event is handled externally or implicitly\n} else {\n  SmartHomeSolution.turnDeviceOff.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "If the current temperature in degrees Fahrenheit at your location drops below 55°F, then set your Wiser Air device to heat mode.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 55) {\n  WiserAir.setThermostatsSystemMode.setMode(\"heat\");\n}"
  },
  {
    "intent": "When you complete a task named \"Pick up the groceries\" with high priority in your \"Shopping\" list on Remember The Milk, your Philips Hue lights in the living room will blink.",
    "filter_code": "if (Rememberthemilk.taskCompleted.Name === \"Pick up the groceries\" &&\n    Rememberthemilk.taskCompleted.Priority === \"High\" &&\n    Rememberthemilk.taskCompleted.List === \"Shopping\") {\n  Hue.blinkAllHue.setLights(\"Living room\");\n} else {\n  Hue.blinkAllHue.skip(\"Task does not match the criteria.\");\n}"
  },
  {
    "intent": "When the IFTTT Do button is pressed at a location like 37.8267, -122.4230, turn on the home air conditioning unit indexed as \"Living Room AC\" and set it to cool mode.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Airtouch.acMode.setAcIndex(\"Living Room AC\");\n  Airtouch.acMode.setMode(\"cool\");\n} else {\n  Airtouch.acMode.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When the oven named \"Kitchen Oven\" has finished, then set the \"Relax\" scene with your Philips Hue lights.",
    "filter_code": "if (HcOven.ovenFinished.HaId === \"Kitchen Oven\") {\n  Hue.setScene.setScene(\"Relax\");\n} else {\n  Hue.setScene.skip(\"Oven name does not match 'Kitchen Oven'\");\n}"
  },
  {
    "intent": "When you press the button widget at a location with latitude 37.8267 and longitude -122.4230, turn on the Heatzy device named \"Living Room Thermostat\" to cool mode.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Heatzy.aSetCoolMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetCoolMode.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Close the garage door when the wind speed rises above 10 mph at my home location in any direction.",
    "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 10) {\n  Garadget.closeDoor.skip(\"Wind speed is above 10 mph\");\n}"
  },
  {
    "intent": "If the outdoor temperature in New York rises above 75°F, then set your Living Room Wiser Air device to cool mode.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 75) {\n  WiserAir.setThermostatsSystemMode.setMode(\"cool\");\n}"
  },
  {
    "intent": "Turn on the living room air conditioning in cool mode at 7:00 AM every Monday, Tuesday, Wednesday, Thursday, and Friday.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Monday\" &&\n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Tuesday\" &&\n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Wednesday\" &&\n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Thursday\" &&\n    DateAndTime.everyWeekdayAt.DayOfWeek !== \"Friday\") {\n  Airtouch.acMode.skip(\"Not a weekday\");\n} else if (Meta.currentUserTime.hour() !== 7) {\n  Airtouch.acMode.skip(\"Not 7:00 AM\");\n} else {\n  Airtouch.acMode.setAcIndex(\"living room\");\n  Airtouch.acMode.setMode(\"cool\");\n}"
  },
  {
    "intent": "When the IFTTT Do button is pressed at a location like 37.8267, -122.4230, turn on the home air conditioning unit indexed as 1 and set it to heat mode.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Airtouch.acMode.setAcIndex(1);\n  Airtouch.acMode.setMode(\"heat\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, then activate the programmation hebdomadaire on the Heatzy device named \"Living Room Thermostat\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\n\nif (hour >= 7 && hour < 19 && latitude === \"37.8267\" && longitude === \"-122.4230\") {\n  Heatzy.aSetHeatMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetHeatMode.skip(\"Outside of active hours or incorrect location.\");\n}"
  },
  {
    "intent": "Activate Away Mode every day at 7:30 PM to run until switched off.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar minute = checkTime.minute();\n\nif (hour === 19 && minute === 30) {\n  WiserHeat.setAway.skip(); // Activate Away Mode\n} else {\n  WiserHeat.setAway.skip(\"Not the specified time\");\n}"
  },
  {
    "intent": "Send a photo to the #general channel in Microsoft Teams with the subject \"New Photo\" and the message body \"Check out this new photo taken at 37.78346333333333 latitude and -122.42301220000003 longitude on 2020-07-08T04:17:06+05:00\" when a new photo is taken with the Camera widget, including the Temporary Public Photo URL https://locker.ifttt.com/public/4bfc930c-ac73-11e2-b086-22000a9730cf and marked as Important.",
    "filter_code": "MicrosoftTeams.postMessageToChannel.setTeamAndChannelIds(\"your_team_id\", \"general\");\nMicrosoftTeams.postMessageToChannel.setMessageSubject(\"New Photo\");\nvar messageBody = \"Check out this new photo taken at \" + DoCamera.doCameraNewPhoto.Latitude + \" latitude and \" + DoCamera.doCameraNewPhoto.Longitude + \" longitude on \" + DoCamera.doCameraNewPhoto.OccurredAt + \". Photo: \" + DoCamera.doCameraNewPhoto.TemporaryPublicPhotoURL;\nMicrosoftTeams.postMessageToChannel.setMessageBody(messageBody);\nMicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");"
  },
  {
    "intent": "Play the best song on your Android device when the Living Room Light iotty smart home device is turned on.",
    "filter_code": "if (Iottysmarthome.deviceOnOff.DeviceName === \"Living Room Light\" && Iottysmarthome.deviceOnOff.LightState === \"on\") {\n  AndroidDevice.playBestSong();\n} else {\n  AndroidDevice.playBestSong.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "If the current outdoor temperature in degrees Fahrenheit at your location drops below 68°F, then set your Wiser Air device to auto-changeover mode.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit < 68) {\n  WiserAir.setThermostatsSystemMode.setMode(\"auto-changeover\");\n}"
  },
  {
    "intent": "Arm my Blink security system named \"Home Security\" when I double-click my Flic button named \"Security Button\" between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Flic.click.ClickType === \"double_click\" && Flic.click.ButtonUuid === \"Security Button\") {\n    Blink.networkArm.setNetwork(\"Home Security\");\n  } else {\n    Blink.networkArm.skip(\"Either not a double click or wrong Flic button.\");\n  }\n} else {\n  Blink.networkArm.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Share a message with the Sales Team group in Orion at 8:00 AM and 5:00 PM every day, saying \"Good morning, daily briefing upcoming\" in the morning and \"Reminder, tomorrow's tasks are pending\" in the evening, so that everyone in the group hears it.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nvar message;\n\nif (hour === 8) {\n  message = \"Good morning, daily briefing upcoming\";\n} else if (hour === 17) {\n  message = \"Reminder, tomorrow's tasks are pending\";\n} else {\n  Orion.sendVoiceMessage.skip(\"Not the scheduled time.\");\n  return;\n}\n\nOrion.sendVoiceMessage.setGroup(\"Sales Team\");\nOrion.sendVoiceMessage.setUser(\"everyone\");\nOrion.sendVoiceMessage.setMessage(message);"
  },
  {
    "intent": "When the Flic button named \"MyFlicButton\" is double-clicked at a location with longitude 18.0649000 and latitude 59.3325800, arm the Blink network system named \"HomeSecurity\".",
    "filter_code": "if (Flic.click.ButtonUuid === \"MyFlicButton\" && Flic.click.ClickType === \"double_click\" && Flic.click.Longitude === \"18.0649000\" && Flic.click.Latitude === \"59.3325800\") {\n  Blink.networkArm.setNetwork(\"HomeSecurity\");\n} else {\n  Blink.networkArm.skip(\"Conditions not met for arming the network.\");\n}"
  },
  {
    "intent": "If the outdoor temperature in New York rises above 55°F, then set your Living Room Wiser Air to auto-changeover mode.",
    "filter_code": "if (Weather.currentTemperatureRisesAbove.TempFahrenheit > 55) {\n  WiserAir.setThermostatsSystemMode.setMode(\"auto-changeover\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp device when the IFTTT app button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring between 07:00 and 22:00.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 22) {\n  Viva.turnDeviceOff.setDeviceAddress(\"Living Room Lamp\");\n} else {\n  Viva.turnDeviceOff.skip(\"Conditions not met to turn on the device.\");\n}"
  },
  {
    "intent": "When a new submission is received on form 1234567890, and the question \"Email\" is answered, create a new record in Airtable base \"My Base\" and table \"Submissions\", with the record content set to \"::airtable::Name::{Name} ::airtable::Email::{Email} ::airtable::Message::{Message}\", where {Name}, {Email}, and {Message} are the corresponding values from the JotForm submission.",
    "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" && Jotform.latestFormSubmission.FilteredRichTextData.includes(\"Email\")) {\n  var name = \"\";\n  var email = \"\";\n  var message = \"\";\n\n  // Parse the rich text data to extract the values\n  var lines = Jotform.latestFormSubmission.RichTextData.split(\"<tr>\");\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    if (line.includes(\"Name\")) {\n      name = line.split(\"</td>\")[1].split(\"<\")[0].trim();\n    } else if (line.includes(\"Email\")) {\n      email = line.split(\"</td>\")[1].split(\"<\")[0].trim();\n    } else if (line.includes(\"Message\")) {\n      message = line.split(\"</td>\")[1].split(\"<\")[0].trim();\n    }\n  }\n\n  // Create a new record in Airtable\n  var recordContent = `::airtable::Name::${name} ::airtable::Email::${email} ::airtable::Message::${message}`;\n  Airtable.createRecord.setRecordContent(recordContent);\n  Airtable.createRecord.setBaseID(\"My Base\");\n  Airtable.createRecord.setTableID(\"Submissions\");\n} else {\n  Airtable.createRecord.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "If your Google Pixel 7 disconnects from the linksys WiFi network at any time, then turn off the Living Room AC using Ambi Climate.",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"linksys\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Ambiclimate.devicePowerOff.setDeviceName(\"Living Room AC\");\n  Ambiclimate.devicePowerOff.skip(\"Google Pixel 7 disconnected from linksys WiFi network\");\n}"
  },
  {
    "intent": "Add photos from Instagram with the hashtag #vacation to the \"Summer Memories\" album in iOS Photos.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.indexOf(\"#vacation\") === -1) {\n  IosPhotos.createPhotoIosPhotos.skip(\"Photo does not contain #vacation hashtag.\");\n} else {\n  IosPhotos.createPhotoIosPhotos.setPhotoUrl(Instagram.newPhotoByYouTagged.SourceUrl);\n  IosPhotos.createPhotoIosPhotos.setAlbum(\"Summer Memories\");\n}"
  },
  {
    "intent": "When the Netatmo Weather Station at \"My Home - Wind gauge\" measures wind speeds above 24 km/h, turn on the WiZ light in the \"Living Room\" and set it to yellow with a brightness of 80%.",
    "filter_code": "if (Netatmo.windAverageAbove.DeviceName === \"My Home - Wind gauge\" && Netatmo.windAverageAbove.WindSpeedKmh > 24) {\n  Wiz.turnOn.setMode(\"yellow\");\n  Wiz.turnOn.setDimming(\"80%\");\n  Wiz.turnOn.skip(null);\n} else {\n  Wiz.turnOn.skip(\"Wind speed is not above 24 km/h or device name does not match.\");\n}"
  },
  {
    "intent": "When the button widget on your phone is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 19:00, change the mode of your LinkJapan eHome device named \"Living Room Thermostat\" to \"Cooling\" mode.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  LinkJapanEHome.mode.setThermostatControlSetModeString(\"Cooling\");\n  LinkJapanEHome.mode.setDeviceinfo(\"Living Room Thermostat\");\n} else {\n  LinkJapanEHome.mode.skip(\"Button press does not match the specified conditions.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, set the Heatzy device named \"Living Room Thermostat\" to manual mode, disabling its weekly programming schedule.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Heatzy.aSetManualMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetManualMode.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "Open the garage door labeled \"Main Garage\" when arriving at the place named \"Home\" in the vehicle named \"Mom's Van\".",
    "filter_code": "if (Zubie.arrivals.Place === \"Home\" && Zubie.arrivals.Vehicle === \"Mom's Van\") {\n  Garadget.openDoor.setDoorId(\"Main Garage\");\n} else {\n  Garadget.openDoor.skip(\"Not arriving at Home in Mom's Van.\");\n}"
  },
  {
    "intent": "When a new item titled \"My Favorite Article\" with the URL \"http://blog.ifttt.com/my-favorite-article\" and excerpt \"This is an amazing article about something cool.\" is favorited in Pocket, with tags \"neato, cool, article\" and an image URL \"http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg\", add it to my Buffer Queue with the message \"Check out this great article: http://blog.ifttt.com/my-favorite-article\" and attach the image from the provided URL.",
    "filter_code": "if (Pocket.newFavoriteItemPocket.Title === \"My Favorite Article\"\n    && Pocket.newFavoriteItemPocket.Url === \"http://blog.ifttt.com/my-favorite-article\"\n    && Pocket.newFavoriteItemPocket.Excerpt === \"This is an amazing article about something cool.\"\n    && Pocket.newFavoriteItemPocket.Tags === \"neato, cool, article\"\n    && Pocket.newFavoriteItemPocket.ImageUrl === \"http://blogs.seattleweekly.com/reverb/assets_c/2012/07/the%20cure-thumb-500x330.jpg\") {\n  Buffer.addToBuffer.setMessage(\"Check out this great article: http://blog.ifttt.com/my-favorite-article\");\n  Buffer.addToBuffer.setPictureUrl(Pocket.newFavoriteItemPocket.ImageUrl);\n} else {\n  Buffer.addToBuffer.skip(\"The favorited item does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When I call the Woopla trigger hotline at +16282222790 and enter the 3-digit trigger code 421, disarm my Arlo camera named \"Front Door Cam\".",
    "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" && Woopla.triggerCall.TriggerCode === \"421\") {\n  Arlo.disarm.setDeviceName(\"Front Door Cam\");\n} else {\n  Arlo.disarm.skip(\"Incorrect trigger code or called number.\");\n}"
  },
  {
    "intent": "When I call the Woopla trigger hotline at +16282222790 and enter the trigger code 142, arm my Arlo camera named \"Front Door Cam\".",
    "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" && Woopla.triggerCall.TriggerCode === \"142\") {\n  Arlo.arm.setDeviceName(\"Front Door Cam\");\n} else {\n  Arlo.arm.skip(\"Trigger code or called number does not match.\");\n}"
  },
  {
    "intent": "When the Flic button named \"Living Room Controller\" is double-clicked between 18:00 and 22:00, prioritize the device \"Samsung QLED TV\" on the Google Wifi network to boost Netflix streaming.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ButtonUuid === \"Living Room Controller\" && Flic.click.ClickType === \"double_click\" && hour >= 18 && hour <= 22) {\n  GoogleWifi.prioritizeDevice.setDeviceName(\"Samsung QLED TV\");\n} else {\n  GoogleWifi.prioritizeDevice.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Open the garage door named \"Main Garage Door\" when my Google Pixel 7 Android phone reconnects to the home WiFi network with the SSID \"HomeNetwork\" between 06:00 and 22:00.",
    "filter_code": "var hour = new Date(AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt).getHours();\nvar ssid = AndroidDevice.connectToWifiNetworkWithSsid.SSID;\nvar deviceName = AndroidDevice.connectToWifiNetworkWithSsid.DeviceName;\n\nif (ssid === \"HomeNetwork\" && deviceName === \"Google Pixel 7\" && hour >= 6 && hour < 22) {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Conditions not met to open the garage door.\");\n}"
  },
  {
    "intent": "When a call is made to the trigger hotline at +16282222790 from phone number +49203987654321, and the 3-digit trigger code entered during the call is 123, start a 300-second video recording on the Arlo device named \"Front Door Camera\".",
    "filter_code": "if (Woopla.triggerCall.CalledNumber === \"+16282222790\" && Woopla.triggerCall.PhoneNumber === \"+49203987654321\" && Woopla.triggerCall.TriggerCode === \"123\") {\n  Arlo.record.setDeviceName(\"Front Door Camera\");\n  Arlo.record.setDuration(300);\n} else {\n  Arlo.record.skip(\"Trigger conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the WiZ light in the \"Living Room\" to 75% brightness with the \"Relax\" mode whenever motion is detected by the Withings Home device named \"Motion Detector\" between 07:00 and 22:00.",
    "filter_code": "var hour = Withingshome.motiondetection.DateAndTime.hour();\nvar deviceName = Withingshome.motiondetection.DeviceName;\nvar entity = \"Living Room\";\nvar mode = \"Relax\";\nvar dimming = \"75%\";\n\nif (deviceName === \"Motion Detector\" && hour >= 7 && hour < 22) {\n  Wiz.turnOn.setMode(mode);\n  Wiz.turnOn.setDimming(dimming);\n} else {\n  Wiz.turnOn.skip(\"Either not between 07:00 and 22:00 or wrong device.\");\n}"
  },
  {
    "intent": "When the Netatmo weather station named \"My Home - Wind gauge\" reports a wind speed above 25 mph, skip watering my yard for today using the Netro device named \"Front Yard Sprinkler\", which is set to water all zones with a default duration of 30 minutes.",
    "filter_code": "if (Netatmo.windAverageAbove.WindSpeedMph > 25 && Netatmo.windAverageAbove.DeviceName === \"My Home - Wind gauge\") {\n  Netro.water.skip(\"High wind speed, skipping watering for today.\");\n}"
  },
  {
    "intent": "When the Xtactor wristband receives the command \"I SD\" between 07:00 and 22:00, decrease the volume on the Sonos speaker in the \"Living Room\" and include grouped rooms.",
    "filter_code": "var hour = new Date(Xtactor.command.CreatedAt).getHours();\nif (hour >= 7 && hour < 22) {\n  if (Xtactor.command.shortname === \"I SD\") {\n    Sonos.decreaseVolume.setRoom(\"Living Room\");\n    Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n  } else {\n    Sonos.decreaseVolume.skip(\"Invalid command.\");\n  }\n} else {\n  Sonos.decreaseVolume.skip(\"Outside of allowed hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "When the Xtactor wristband receives the command \"I SU VOLUMEUP\" between 07:00 and 22:00, increase the volume on the Sonos speaker in the \"Living Room\" and include grouped rooms.",
    "filter_code": "var hour = Xtactor.command.CreatedAt.hour();\nvar minute = Xtactor.command.CreatedAt.minute();\nif (hour >= 7 && hour < 22) {\n  if (Xtactor.command.shortname === \"I SU VOLUMEUP\") {\n    Sonos.decreaseVolume.setRoom(\"Living Room\");\n    Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n    Sonos.decreaseVolume.skip(\"Increasing volume as per command.\");\n  }\n}"
  },
  {
    "intent": "When the uHoo sensor in My Home detects that the CO2 level exceeds 800 ppm, turn on the Living Room light to 50% brightness using the Lutron Caséta and RA2 Select.",
    "filter_code": "if (Uhoo.sensorNotification.UhooName === \"My Home\" && Uhoo.sensorNotification.SensorName === \"Carbon Dioxide (CO2)\" && parseFloat(Uhoo.sensorNotification.SensorValue) > 800) {\n  LutronCasetaWireless.setLightLevel.setZone(\"Living Room\");\n  LutronCasetaWireless.setLightLevel.setLevel(50);\n} else {\n  LutronCasetaWireless.setLightLevel.skip(\"CO2 level is not exceeded or uHoo sensor is not in My Home.\");\n}"
  },
  {
    "intent": "When I post a photo on Instagram with the tag #vacationmode, create a new journal entry in my \"Travel\" journal on Day One that includes the caption without the tag, the date and time the photo was taken, and the short URL to the photo's Instagram page as the body, with tags \"travel\", \"photography\", and the location set to the latitude and longitude of the photo.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#vacationmode\")) {\n  var captionWithoutTag = Instagram.newPhotoByYouTagged.CaptionNoTag;\n  var body = `${captionWithoutTag}\\nPosted on: ${Instagram.newPhotoByYouTagged.CreatedAt}\\nImage URL: ${Instagram.newPhotoByYouTagged.Url}`;\n  DayOne.createJournalEntry.setBody(body);\n  DayOne.createJournalEntry.setTags(\"travel, photography\");\n  // Note: The location (latitude and longitude) is not directly available from the Instagram trigger.\n  // If you have the location information in a different format or service, you would set it like this:\n  // DayOne.createJournalEntry.setLatitude(latitude);\n  // DayOne.createJournalEntry.setLongitude(longitude);\n} else {\n  DayOne.createJournalEntry.skip(\"The photo does not contain the #vacationmode tag.\");\n}"
  },
  {
    "intent": "If your Google Pixel 7 Android device connects to your home WiFi network with SSID \"MyHomeNetwork\" then turn on your Living Room AC in comfort mode using Ambi Climate.",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"MyHomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room AC\");\n} else {\n  Ambiclimate.deviceModeComfort.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "When your Android device, specifically a Google Pixel 7, disconnects from the WiFi network named \"HomeNetwork\" at any time, launch the \"Goodbye\" action group on your SAUTER Cozytouch system to automatically turn off the radiateurs connectés.",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" && AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\" && !AndroidDevice.connectToWifiNetworkWithSsid.OccurredAt) {\n  SAUTERCozytouch.launchActionGroup.setActionGroup(\"Goodbye\");\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Conditions not met to launch Goodbye action group.\");\n}"
  },
  {
    "intent": "When a visitor checks in at the Stark Industries HQ location on the Envoy application, send a voice message to the entire Orion Group saying \"Visitor Nick Fury has arrived and is being hosted by Tony Stark, please welcome them.\"",
    "filter_code": "if (Envoy.entryCreated.LocationName === \"Stark Industries HQ\") {\n  var message = `Visitor ${Envoy.entryCreated.FullName} has arrived and is being hosted by ${Envoy.entryCreated.HostName}, please welcome them.`;\n  Orion.sendVoiceMessage.setMessage(message);\n  Orion.sendVoiceMessage.setGroup(\"Orion Group\");\n  Orion.sendVoiceMessage.setUser(\"Everyone\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and it's between 07:00 and 19:00, then close the child lock mode on the Heatzy device named \"Living Room Thermostat\".",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Heatzy.aCloseChildLockMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aCloseChildLockMode.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When you press the button widget at a location like 37.8267, -122.4230, turn on the child lock mode of your Heatzy device named \"Living Room Thermostat\" and switch off its control LEDs.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Heatzy.aCloseChildLockMode.setDevice(\"Living Room Thermostat\");\n  // Note: The provided API does not explicitly support switching off control LEDs.\n  // If such functionality is available, it should be used here.\n}"
  },
  {
    "intent": "Every day at 8:00 AM, send signal number 105 to the Office sRemo device based on the current time.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 AM\";\nif (currentTime.indexOf(targetTime) === -1) {\n  SRemo.sendSignalT.skip(\"Not the target time\");\n} else {\n  SRemo.sendSignalT.setSignalNumber(\"105\");\n  SRemo.sendSignalT();\n}"
  },
  {
    "intent": "When the Xtactor wristband receives the command \"I T\" where T is editable, toggle on or off all Philips Hue lights.",
    "filter_code": "var command = Xtactor.command.Text;\nif (command === \"I T\") {\n  Hue.toggleAllHue();\n}"
  },
  {
    "intent": "If the wind speed in mph is greater than 20 at my location, which is set to New York, with a wind direction of North, then skip watering all zones on my Netro device today.",
    "filter_code": "if (Weather.windSpeedRisesAbove.WindSpeedMph > 20 && Weather.windSpeedRisesAbove.WindDirection === \"North\" && Weather.windSpeedRisesAbove.Location === \"New York\") {\n  Netro.water.skip(\"Wind speed is too high, skipping watering for today.\");\n}"
  },
  {
    "intent": "Turn off the Wi-Fi on my D-Link Wi-Fi Router, specifically device number 1, every day at 10:00 PM.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (hour === 22 && minute === 0) {\n  DlinkWifiRouter.turnOffWifi.setMydlinkNo(1);\n} else {\n  DlinkWifiRouter.turnOffWifi.skip(\"Not 10:00 PM.\");\n}"
  },
  {
    "intent": "When the button with ID \"1\" on Thinga is clicked with a click type of \"click\", open the garage door identified as \"Main Garage Door\" using Garadget.",
    "filter_code": "if (Thinga.thingaIsClicked.ButtonID === \"1\" && Thinga.thingaIsClicked.ThingaClickType === \"click\") {\n  Garadget.openDoor.setDoorId(\"Main Garage Door\");\n} else {\n  Garadget.openDoor.skip(\"Button ID or click type does not match the specified conditions.\");\n}"
  },
  {
    "intent": "When a new form is created in Typeform with the title \"My New Form\" and the form ID \"456\", append a row to the Google Sheets spreadsheet named \"Typeform Logs\" in the folder path \"Documents/IFTTT/Typeform\", including the form title, form URL \"https://subdomain.typeform.com/to/def456\", and form status as \"Public\" if the form is public or \"Draft\" if it's not, using the formatted row \"Form Title|||Form URL|||Form Status\" to log the creation of this new form for easy access.",
    "filter_code": "if (Typeform.newForm.FormTitle === \"My New Form\" && Typeform.newForm.FormId === \"456\") {\n  var formStatus = Typeform.newForm.FormIsPublic === \"true\" ? \"Public\" : \"Draft\";\n  var formattedRow = `${Typeform.newForm.FormTitle}|||${Typeform.newForm.FormUrl}|||${formStatus}`;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Typeform Logs\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Documents/IFTTT/Typeform\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Form title or ID does not match.\");\n}"
  },
  {
    "intent": "When a 3-digit trigger code is entered as \"123\" during a call to our hotline at \"+16282222790\" from any phone number, record the audio message and send both the MP3 audio file from the URL provided by Woopla and its transcription to the Telegram chat \"#office_notifications\" with a caption \"New voice message from +49203987654321\" and performer \"Hotline Bot\", but only if the recording confidence is above 0.8 and the recording language is set to \"en-US\".",
    "filter_code": "if (Woopla.triggerRecording.TriggerCode === \"123\"\n    && Woopla.triggerRecording.CalledNumber === \"+16282222790\"\n    && Woopla.triggerRecording.RecordingConfidence > 0.8\n    && Woopla.triggerRecording.RecordingLanguage === \"en-US\") {\n  var caption = \"New voice message from \" + Woopla.triggerRecording.PhoneNumber;\n  Telegram.sendMp3.setAudioUrl(Woopla.triggerRecording.RecordingUrl);\n  Telegram.sendMp3.setCaption(caption);\n  Telegram.sendMp3.setPerformer(\"Hotline Bot\");\n  Telegram.sendMp3.setTitle(\"Voice Message\");\n  Telegram.sendMp3.chatId = \"#office_notifications\";\n} else {\n  Telegram.sendMp3.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new item is posted to the \"ifttt Blog\" feed, located at http://blog.ifttt.com/, send a message to the \"@IFTTT_News\" chat on Telegram with the text \"<b>New Post:</b> <a href='{{EntryUrl}}'>{{EntryTitle}}</a> by {{EntryAuthor}}\" and include a web page preview.",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var messageText = `<b>New Post:</b> <a href='${Feed.newFeedItem.EntryUrl}'>${Feed.newFeedItem.EntryTitle}</a> by ${Feed.newFeedItem.EntryAuthor}`;\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip();\n} else {\n  Telegram.sendMessage.skip(\"Feed does not match or is not from the specified URL.\");\n}"
  },
  {
    "intent": "When I save a new track to \"Your Music\" on Spotify, such as \"Happy\" by Pharrell Williams from the album \"G I R L\", send a message to my Telegram chat \"#MusicLovers\" with the text \"Just discovered a new song: <b>Happy</b> by <i>Pharrell Williams</i>! Check it out: https://open.spotify.com/track/2aibwv5hGXSgw7Yru8IYTO\" and include a web page preview of the track.",
    "filter_code": "Telegram.sendMessage.setText(\"Just discovered a new song: <b>\" + Spotify.newSavedTrack.TrackName + \"</b> by <i>\" + Spotify.newSavedTrack.ArtistName + \"</i>! Check it out: \" + Spotify.newSavedTrack.TrackURL);\nTelegram.sendMessage.setIncludeWebPagePreview(\"Yes\");"
  },
  {
    "intent": "When a new post is published on WordPress with the title \"New Update\" and containing the keyword \"urgent\", send a message to the Telegram chat \"#office-notifications\" with the text \"<b>New Post:</b> {{PostTitle}} - {{PostContent}}\" and include a web page preview of the post URL.",
    "filter_code": "if (Wordpress.anyNewPostWp.PostTitle === \"New Update\" && Wordpress.anyNewPostWp.PostContent.includes(\"urgent\")) {\n  Telegram.sendMessage.setText(`<b>New Post:</b> ${Wordpress.anyNewPostWp.PostTitle} - ${Wordpress.anyNewPostWp.PostContent}`);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.skip(`Post titled \"${Wordpress.anyNewPostWp.PostTitle}\" does not match the criteria.`);\n}"
  },
  {
    "intent": "Automatically send new photos you post on Instagram to the Telegram group \"@Friends\" with a caption including the original photo's caption and the short URL to the photo's Instagram page, using the image file URL as the photo source.",
    "filter_code": "Telegram.sendPhoto.setChatId(\"@Friends\");\nTelegram.sendPhoto.setPhotoUrl(Instagram.anyNewPhotoByYou.SourceUrl);\nvar caption = Instagram.anyNewPhotoByYou.Caption + \" \" + Instagram.anyNewPhotoByYou.Url;\nTelegram.sendPhoto.setCaption(caption);"
  },
  {
    "intent": "When a new note is created in the \"Personal\" notebook on Evernote, send a message to the \"#family\" chat on Telegram with the note title, including a web page preview if the note contains a URL.",
    "filter_code": "if (Evernote.newNoteInNotebook.notebook === \"Personal\") {\n  var text = Evernote.newNoteInNotebook.Title;\n  Telegram.sendMessage.setText(text);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n  Telegram.sendMessage.chatId = \"#family\";\n}"
  },
  {
    "intent": "When a new event titled \"Team Meeting\" is added to my Google Calendar, starting between 09:00 and 17:00, send a notification message \"New team meeting scheduled at Building A, Room 101. Join via https://meet.google.com\" to the #general room in Chatwork.",
    "filter_code": "if (GoogleCalendar.newEventAdded.Title === \"Team Meeting\" &&\n    GoogleCalendar.newEventAdded.Starts.hour() >= 9 &&\n    GoogleCalendar.newEventAdded.Starts.hour() <= 17) {\n  var message = \"New team meeting scheduled at \" + GoogleCalendar.newEventAdded.Where + \". Join via \" + GoogleCalendar.newEventAdded.VideoCallUrl;\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "毎週金曜日の19:00に、グループチャットルーム「#general」に「今夜の予定は？」というリマインドメッセージを通知します。",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Friday\" || DateAndTime.everyWeekdayAt.CheckTime.hour() !== 19) {\n  Chatwork.postMessages.skip(\"Not Friday at 7 PM.\");\n} else {\n  Chatwork.postMessages.setMessage(\"今夜の予定は？\");\n  Chatwork.postMessages.setRoom(\"#general\");\n}"
  },
  {
    "intent": "When an event titled \"Team Meeting\" starts in 15 minutes on my Google Calendar, send a reminder message to the #general room in Chatwork with the text \"Reminder: Team Meeting is about to start at Building A, Room 101\".",
    "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Team Meeting\" && GoogleCalendar.anyEventStarts.offset === 15) {\n  var message = \"Reminder: Team Meeting is about to start at \" + GoogleCalendar.anyEventStarts.Where;\n  Chatwork.postMessages.setMessage(message);\n  Chatwork.postMessages.setRoom(\"#general\");\n} else {\n  Chatwork.postMessages.skip(\"Event title or offset does not match.\");\n}"
  },
  {
    "intent": "When a new row is added to the Google Sheets spreadsheet located at https://docs.google.com/spreadsheets/d/1va_bpHMbOIwbQb77orUzAQVs0ZGsyqHqgeyYXssa6Z0/edit#gid=0, send a message to the Chatwork room \"General\" with the information from columns A to J of the newly added row, including the values in columns A (e.g., 1234), B (e.g., $99), C (e.g., Towel), D (e.g., Blue), E (e.g., FREE SHIPPING), F (e.g., FREE SHIPPING), G (e.g., Delivery Date), H (e.g., November 7th, 2017), I (e.g., Delivery Address), and J (e.g., 923 Market St. San Francisco, CA 94117).",
    "filter_code": "var message = \"New row added to spreadsheet: \\n\" +\n               \"Column A: \" + GoogleSheets.newRowInSpreadsheet.ColumnA + \"\\n\" +\n               \"Column B: \" + GoogleSheets.newRowInSpreadsheet.ColumnB + \"\\n\" +\n               \"Column C: \" + GoogleSheets.newRowInSpreadsheet.ColumnC + \"\\n\" +\n               \"Column D: \" + GoogleSheets.newRowInSpreadsheet.ColumnD + \"\\n\" +\n               \"Column E: \" + GoogleSheets.newRowInSpreadsheet.ColumnE + \"\\n\" +\n               \"Column F: \" + GoogleSheets.newRowInSpreadsheet.ColumnF + \"\\n\" +\n               \"Column G: \" + GoogleSheets.newRowInSpreadsheet.ColumnG + \"\\n\" +\n               \"Column H: \" + GoogleSheets.newRowInSpreadsheet.ColumnH + \"\\n\" +\n               \"Column I: \" + GoogleSheets.newRowInSpreadsheet.ColumnI + \"\\n\" +\n               \"Column J: \" + GoogleSheets.newRowInSpreadsheet.ColumnJ;\nChatwork.postMessages.setRoom(\"General\");\nChatwork.postMessages.setMessage(message);"
  },
  {
    "intent": "毎月15日、19:00に、「#general」グループチャットに「今月のタスクを確認してください」というリマインドメッセージを通知します。",
    "filter_code": "if (DateAndTime.everyMonthOnThe.month_day === \"15\" && DateAndTime.everyMonthOnThe.time === \"19:00\") {\n  Chatwork.postMessages.setMessage(\"今月のタスクを確認してください\");\n  Chatwork.postMessages.setRoom(\"#general\");\n} else {\n  Chatwork.postMessages.skip(\"Not the scheduled time for reminder.\");\n}"
  },
  {
    "intent": "毎日7:00に、東京の今日の天気、最高気温、最低気温を「#weather_updates」チャットルームに通知します。",
    "filter_code": "if (Meta.currentUserTime.hour() === 7) {\n  var message = \"東京の今日の天気: \" + Weather.currentWeatherAtTime.TodaysCondition + \"\\n\"\n                + \"最高気温: \" + Weather.currentWeatherAtTime.HighTempCelsius + \"度\\n\"\n                + \"最低気温: \" + Weather.currentWeatherAtTime.LowTempCelsius + \"度\";\n  Chatwork.postMessages.setMessage(message);\n  Chatwork.postMessages.setRoom(\"#weather_updates\");\n} else {\n  Chatwork.postMessages.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "When a new card titled \"Book Hotel\" is added to the Trello board named \"New Zealand Trip\" by John Smith, send a notification to the Chatwork room \"#team-discussion\" with the message \"John Smith added a new card 'Book Hotel' to the New Zealand Trip board: https://trello.com/c/example\".",
    "filter_code": "if (Trello.cardAddedToBoard.Title === \"Book Hotel\" && Trello.cardAddedToBoard.BoardName === \"New Zealand Trip\" && Trello.cardAddedToBoard.CreatorFullName === \"John Smith\") {\n  Chatwork.postMessages.setMessage(`John Smith added a new card 'Book Hotel' to the New Zealand Trip board: ${Trello.cardAddedToBoard.CardURL}`);\n} else {\n  Chatwork.postMessages.skip(\"Card title, board name, or creator does not match.\");\n}"
  },
  {
    "intent": "When a new entry titled \"New Blog Post\" is published on the ChatWork公式ブログ RSS feed at http://blog.chatwork.com/, send a message to the #general room in Chatwork with the entry title, author, and URL, including an image if available.",
    "filter_code": "if (Feed.newFeedItem.FeedUrl === \"http://blog.chatwork.com/\" && Feed.newFeedItem.EntryTitle === \"New Blog Post\") {\n  var message = `New blog post: ${Feed.newFeedItem.EntryTitle} by ${Feed.newFeedItem.EntryAuthor}. Read more at ${Feed.newFeedItem.EntryUrl}`;\n  if (Feed.newFeedItem.EntryImageUrl) {\n    message += ` Image: ${Feed.newFeedItem.EntryImageUrl}`;\n  }\n  Chatwork.postMessages.setRoom(\"#general\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Entry does not match the specified title or feed URL.\");\n}"
  },
  {
    "intent": "Send the daily BrainyQuote quote from Voltaire to the Telegram chat named \"Motivational Quotes\" with a web page preview included, using the quote \"Je pense, donc je suis\" as the message text.",
    "filter_code": "if (Brainyquote.todaySQuote.Source === \"Voltaire\" && Brainyquote.todaySQuote.Quote === \"\\\"Je pense, donc je suis\\\"\") {\n  Telegram.sendMessage.setText(Brainyquote.todaySQuote.Quote + \" - \" + Brainyquote.todaySQuote.Source);\n  Telegram.sendMessage.setChatId(\"Motivational Quotes\");\n  Telegram.sendMessage.setIncludeWebPagePreview(\"yes\");\n} else {\n  Telegram.sendMessage.skip(\"The quote is not from Voltaire or does not match the expected text.\");\n}"
  },
  {
    "intent": "When a new item is published in the \"ifttt Blog\" RSS feed, located at http://blog.ifttt.com/, send a message to the \"General\" room in Chatwork with the entry title, author, and URL. The message should include the text: \"New blog post by {EntryAuthor}: {EntryTitle} - {EntryUrl}\".",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"ifttt Blog\" && Feed.newFeedItem.FeedUrl === \"http://blog.ifttt.com/\") {\n  var message = \"New blog post by \" + Feed.newFeedItem.EntryAuthor + \": \" + Feed.newFeedItem.EntryTitle + \" - \" + Feed.newFeedItem.EntryUrl;\n  Chatwork.postMessages.setRoom(\"General\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Feed title or URL does not match.\");\n}"
  },
  {
    "intent": "毎日07:00に、東京の明日の天気、最高気温18度、最低気温10度を、#weather-alertsグループチャットに通知します。",
    "filter_code": "if (Meta.currentUserTime.hour() === 7 && Weather.tomorrowsWeatherAtTime.TomorrowsCondition !== \"\" && Weather.tomorrowsWeatherAtTime.HighTempCelsius === \"18\" && Weather.tomorrowsWeatherAtTime.LowTempCelsius === \"10\") {\n  Chatwork.postMessages.setMessage(\"東京の明日の天気は、\" + Weather.tomorrowsWeatherAtTime.TomorrowsCondition + \"です。最高気温は\" + Weather.tomorrowsWeatherAtTime.HighTempCelsius + \"度、最低気温は\" + Weather.tomorrowsWeatherAtTime.LowTempCelsius + \"度です。\");\n  Chatwork.postMessages.setRoom(\"#weather-alerts\");\n} else {\n  Chatwork.postMessages.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new file named \"example_file.txt\" is added to the \"/Important_Documents\" subfolder in Dropbox after 08:00 and before 18:00, send a notification to the \"#general\" room in Chatwork with the message \"New file uploaded: example_file.txt, File URL: https://www.dropbox.com/s/qp3cqdjqachyr2x/example_file.txt, Modified Date: 2023-03-09T10:00:00+09:00\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (Dropbox.newTextFileInFolder.Filename === \"example_file.txt\" && Dropbox.newTextFileInFolder.path === \"/Important_Documents\") {\n    var message = \"New file uploaded: \" + Dropbox.newTextFileInFolder.Filename + \", File URL: \" + Dropbox.newTextFileInFolder.FileUrl + \", Modified Date: \" + Dropbox.newTextFileInFolder.ModifiedDate;\n    Chatwork.postMessages.setMessage(message);\n    Chatwork.postMessages.setRoom(\"#general\");\n  } else {\n    Chatwork.postMessages.skip(\"File does not match the specified name or subfolder.\");\n  }\n} else {\n  Chatwork.postMessages.skip(\"Outside of notification hours (08:00 to 18:00).\");\n}"
  },
  {
    "intent": "When a new file named \"example_document\" is added to the Google Drive folder path \"/Documents/Shared/Team Files\" and the filename contains the keyword \"report\", post a message in the Chatwork room \"#general\" with the text \"New report uploaded: example_document\".",
    "filter_code": "if (GoogleDrive.newFileFromSearch.Path === \"/Documents/Shared/Team Files\" && GoogleDrive.newFileFromSearch.Filename === \"example_document\" && GoogleDrive.newFileFromSearch.Filename.includes(\"report\")) {\n  Chatwork.postMessages.setMessage(\"New report uploaded: \" + GoogleDrive.newFileFromSearch.Filename);\n} else {\n  Chatwork.postMessages.skip(\"Filename does not match the criteria.\");\n}"
  },
  {
    "intent": "毎週木曜日、18:00に、「#general」というグループチャットルームで、タスク「プロジェクトレポートの提出」を設定し、3日後の期限を設け、すべてのチームメンバーに割り当てます。",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" && DateAndTime.everyWeekdayAt.CheckTime.getHours() === 18) {\n  Chatwork.postTasks.setRoom(\"#general\");\n  Chatwork.postTasks.setContents(\"プロジェクトレポートの提出\");\n  Chatwork.postTasks.setLimit(\"3\");\n  Chatwork.postTasks.setToIds(\"all\");\n} else {\n  Chatwork.postTasks.skip(\"Not Thursday at 18:00.\");\n}"
  },
  {
    "intent": "Post a reminder message \"Monthly team meeting at 2 PM\" to the Chatwork room \"General\" every month on the 15th at 10:00 AM.",
    "filter_code": "if (DateAndTime.everyMonthOnThe.month_day === \"15\" && DateAndTime.everyMonthOnThe.time === \"10:00 AM\") {\n  Chatwork.postMessages.setMessage(\"Monthly team meeting at 2 PM\");\n  Chatwork.postMessages.setRoom(\"General\");\n} else {\n  Chatwork.postMessages.skip(\"Not the scheduled time for the monthly reminder.\");\n}"
  },
  {
    "intent": "When a new motion is detected by the MESH app, as indicated by the event text \"Motion Tag: Detected!\" and triggered at any time, post a message to the \"#general\" room in Chatwork saying \"Movement alert: Motion detected in the area at 04:17:06+05:00\".",
    "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  var triggeredAt = Mesh.events.TriggeredAt;\n  var message = \"Movement alert: Motion detected in the area at \" + triggeredAt.substring(11, 19) + \" on \" + triggeredAt.substring(0, 10);\n  Chatwork.postMessages.setRoom(\"#general\");\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Motion not detected.\");\n}"
  },
  {
    "intent": "When a new item is published in the RSS feed with the URL https://www.example.com/news, and the entry title contains the keyword \"Breaking News\", post a message to the Chatwork room named \"News Updates\" with the message \"New news alert: {EntryTitle} - {EntryContent}\", including the entry's title and content.",
    "filter_code": "if (Feed.newFeedItem.FeedUrl === \"https://www.example.com/news\" && Feed.newFeedItem.EntryTitle.includes(\"Breaking News\")) {\n  Chatwork.postMessages.setMessage(`New news alert: ${Feed.newFeedItem.EntryTitle} - ${Feed.newFeedItem.EntryContent}`);\n  Chatwork.postMessages.setRoom(\"News Updates\");\n} else {\n  Chatwork.postMessages.skip(\"Entry does not match the filter criteria.\");\n}"
  },
  {
    "intent": "When a Google Calendar event containing the keyword \"Meeting\" starts in 15 minutes, send a reminder notification to the \"#general\" room in Chatwork with the message \"Upcoming meeting: {{Title}} at {{Where}}\".",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.offset === \"15\" && GoogleCalendar.eventFromSearchStarts.Title.includes(\"Meeting\")) {\n  var message = \"Upcoming meeting: \" + GoogleCalendar.eventFromSearchStarts.Title + \" at \" + GoogleCalendar.eventFromSearchStarts.Where;\n  Chatwork.postMessages.setMessage(message);\n} else {\n  Chatwork.postMessages.skip(\"Event does not match the condition.\");\n}"
  },
  {
    "intent": "毎日19時00分に、グループチャットルーム「general」に「本日のタスクを確認してください」というリマインドメッセージを通知します。",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nvar minute = DateAndTime.everyDayAt.CheckTime.minute();\nif (hour == 19 && minute == 0) {\n  Chatwork.postMessages.setMessage(\"本日のタスクを確認してください\");\n  Chatwork.postMessages.setRoom(\"general\");\n} else {\n  Chatwork.postMessages.skip(\"Not 7:00 PM\");\n}"
  },
  {
    "intent": "When a notification from the Twitter app containing the keyword \"mentioned\" is received on my Google Pixel 7 device, forward the notification message and title to the #ifttt_test_chat Telegram chat, including a web page preview if available.",
    "filter_code": "if (AndroidDevice.newNotificationFromApp.AppName === \"Twitter\" &&\n    AndroidDevice.newNotificationFromApp.DeviceName === \"Google Pixel 7\" &&\n    AndroidDevice.newNotificationFromApp.NotificationMessage.includes(\"mentioned\")) {\n  var messageText = `<b>${AndroidDevice.newNotificationFromApp.NotificationTitle}</b>\\n${AndroidDevice.newNotificationFromApp.NotificationMessage}`;\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n} else {\n  Telegram.sendMessage.skip(\"Notification does not match the filter criteria.\");\n}"
  },
  {
    "intent": "Post a daily reminder to the \"General\" room in Chatwork at 08:00 every weekday, with the message \"Good morning, today is Friday, please review your tasks\".",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.includes(\"08:00\") && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(DateAndTime.everyWeekdayAt.DayOfWeek)) {\n  Chatwork.postMessages.setMessage(`Good morning, today is ${DateAndTime.everyWeekdayAt.DayOfWeek}, please review your tasks.`);\n  Chatwork.postMessages.setRoom(\"General\");\n} else {\n  Chatwork.postMessages.skip(\"Not the scheduled time or day.\");\n}"
  },
  {
    "intent": "When a new RSS feed item is published on the \"IFTTT Blog\" feed, and the entry title contains the keyword \"URGENT\", send a message to the \"#general\" room in Chatwork with the message \"New urgent post: {{EntryTitle}} - {{EntryUrl}}\" including the entry title and URL.",
    "filter_code": "if (Feed.newFeedItem.FeedTitle === \"IFTTT Blog\" && Feed.newFeedItem.EntryTitle.includes(\"URGENT\")) {\n  Chatwork.postMessages.setMessage(`New urgent post: ${Feed.newFeedItem.EntryTitle} - ${Feed.newFeedItem.EntryUrl}`);\n  Chatwork.postMessages.setRoom(\"#general\");\n} else {\n  Chatwork.postMessages.skip(\"Does not match the feed title or keyword.\");\n}"
  },
  {
    "intent": "Send a message to the #FactChecker chat on Telegram with the title, URL, and content of new articles from The Washington Post's Fact Checker RSS feed, including a web page preview, whenever a new article is published.",
    "filter_code": "Telegram.sendMessage.setChatId(\"#FactChecker\");\nTelegram.sendMessage.setText(\"New Article: \" + Feed.newFeedItem.EntryTitle + \"\\n\" + Feed.newFeedItem.EntryUrl + \"\\n\\n\" + Feed.newFeedItem.EntryContent);\nTelegram.sendMessage.setIncludeWebPagePreview(\"true\");"
  },
  {
    "intent": "Post the latest Caltrain news update, including the entry title and URL, to a designated Telegram chat, such as \"@caltrain_updates\", whenever a new update is published, including a web page preview of the entry URL in the message.",
    "filter_code": "var telegramChat = \"@caltrain_updates\";\nvar entryTitle = Caltrain.newUpdate.EntryTitle;\nvar entryUrl = Caltrain.newUpdate.EntryUrl;\nvar messageText = \"<b>\" + entryTitle + \"</b>: \" + entryUrl;\n\nTelegram.sendMessage.setText(messageText);\nTelegram.sendMessage.setIncludeWebPagePreview(\"Enabled\");\nTelegram.sendMessage.setChatId(telegramChat);"
  },
  {
    "intent": "Set a weekly reminder every Monday and Thursday at 08:00 to the #general channel in Microsoft Teams with the subject \"Weekly Task Reminder\" and the message body \"Remember to review your tasks for the week.\", marked as Important.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek !== \"Monday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Thursday\") {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not scheduled for today.\");\n} else if (DateAndTime.everyWeekdayAt.CheckTime.getHours() !== 8) {\n  MicrosoftTeams.postMessageToChannel.skip(\"Not the scheduled time.\");\n} else {\n  MicrosoftTeams.postMessageToChannel.setMessageSubject(\"Weekly Task Reminder\");\n  MicrosoftTeams.postMessageToChannel.setMessageBody(\"Remember to review your tasks for the week.\");\n  MicrosoftTeams.postMessageToChannel.setMessageUrgency(\"Important\");\n}"
  },
  {
    "intent": "Send a Telegram message to the #commute_alerts chat with the text \"DART Rider Alert: <EntryTitle>\" including a web page preview, but only between 7:00 AM and 10:00 AM or 5:00 PM and 7:00 PM on weekdays when a new DART rider alert is published.",
    "filter_code": "var Hour = Meta.currentUserTime.hour();\nvar Day = Meta.currentUserTime.day();\n\n// Skip outside of 7-10am and 5-7pm\nif (Hour < 7 || (Hour > 10 && Hour < 17) || Hour > 19) {\n  Telegram.sendMessage.skip(\"Outside of commuting hours\");\n}\n\n// Skip on weekends\nif (Day == 6 || Day == 7) {\n  Telegram.sendMessage.skip(\"Not a weekday\");\n}\n\nTelegram.sendMessage.setChatId(\"#commute_alerts\");\nTelegram.sendMessage.setText(\"DART Rider Alert: \" + Dart.newDartRiderAlert.EntryTitle);\nTelegram.sendMessage.setIncludeWebPagePreview(\"Yes\");"
  },
  {
    "intent": "Send a daily SMS to phone number +1-555-1234 with the love quote of the day from BrainyQuote, including the quote and its source, such as \"Voltaire\" saying \"\\\"Je pense, donc je suis\\\"\".",
    "filter_code": "AndroidMessages.sendAMessage.setText(`\"${Brainyquote.loveQuotes.Source}\" says: ${Brainyquote.loveQuotes.Quote}`);\nAndroidMessages.sendAMessage.setPhoneNumber(\"+1-555-1234\");"
  },
  {
    "intent": "Send a push notification with the art quote of the day from BrainyQuote, including the quote \"Je pense, donc je suis\" by Voltaire, and the URL https://www.brainyquote.com/quotes/authors/f/frank_sinatra.html, as the daily message.",
    "filter_code": "IfNotifications.sendNotification.setMessage(Brainyquote.artQuotes.Quote + \" by \" + Brainyquote.artQuotes.Source + \". Read more at \" + Brainyquote.artQuotes.QuoteUrl);"
  },
  {
    "intent": "Create a new journal entry in my personal Day One journal with the quote of the day from BrainyQuote, including the quote \"Je pense, donc je suis\" by Voltaire, and add relevant tags like #QOTD and #Inspiration, along with a photo of a serene landscape to set a contemplative mood.",
    "filter_code": "DayOne.createJournalEntry.setBody(Brainyquote.todaySQuote.Quote + \"\\n\\n\" + \"— \" + Brainyquote.todaySQuote.Source);\nDayOne.createJournalEntry.setTags(\"#QOTD #Inspiration\");\nDayOne.createJournalEntry.setImage(\"https://example.com/serene-landscape.jpg\");"
  },
  {
    "intent": "When a new love quote is available from BrainyQuote, call the phone number +14250000000 via Woopla and play the text of the quote, such as \"\\\"Je pense, donc je suis\\\"\", and its source, for example, \"Voltaire\", in English.",
    "filter_code": "Woopla.ttsCallAny.setPhoneNumber(\"+14250000000\");\nWoopla.ttsCallAny.setLanguage(\"English\");\nvar quoteText = Brainyquote.loveQuotes.Quote + \" by \" + Brainyquote.loveQuotes.Source;\nWoopla.ttsCallAny.setTts(quoteText);"
  },
  {
    "intent": "When the sunset occurs at my location, with a temperature of 18 degrees Celsius and a condition of Sunny, close the Electric Curtains relay device.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  LightwaverfPower.closeRelay.setWhichRelay(\"Electric Curtains\");\n} else {\n  LightwaverfPower.closeRelay.skip(\"Temperature or condition does not match.\");\n}"
  },
  {
    "intent": "When the temperature drops below 5°C at My Home - Indoor station, send the Indego Connect to dock with the reason \"Cold weather conditions\".",
    "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 5) {\n  Indegoconnect.sendDock.skip(\"Cold weather conditions\");\n}"
  },
  {
    "intent": "When the LifeShield system is armed away, set the Living Room Nest Thermostat to 22°C. When the LifeShield system is disarmed, set the Living Room Nest Thermostat to 20°C.",
    "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"22\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.skip();\n} else if (Bluebyadt.armStateChange.EventType === \"Disarmed\") {\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"20\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.skip();\n}"
  },
  {
    "intent": "When the Blue by ADT system is armed away, set the Honeywell Total Connect thermostat temperature to 72 degrees Fahrenheit for heating, and when disarmed, set it to 68 degrees Fahrenheit for cooling.",
    "filter_code": "if (Bluebyadt.armStateChange.EventType === \"Armed Away\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"72\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureType(\"Heat\");\n} else if (Bluebyadt.armStateChange.EventType === \"Disarmed\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"68\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureType(\"Cool\");\n}"
  },
  {
    "intent": "When an event containing the keyword \"LinkJapan\" is about to start in 15 minutes on my Google Calendar's \"Work\" calendar, turn on the LinkJapan device named \"Living Room Light\".",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.query === \"LinkJapan\" && GoogleCalendar.eventFromSearchStarts.calendar === \"Work\" && GoogleCalendar.eventFromSearchStarts.offset === \"15 minutes\") {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n  LinkJapanEHome.powerState.setDeviceinfo(\"Living Room Light\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, arm the smanos system named \"Home Security\" in away mode, and send a notification with the share URL https://ifttt.com/share/McFwJfDH9Ns and the location map image URL http://maps.google.com/maps/api/staticmap?center=37.78308,-122.417236667&zoom=21&size=710x440&maptype=roadmap&sensor=false&markers=color:red%7C37.78308,-122.417236667.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar shareUrl = DoButton.doButtonNewCommandCommon.ShareURL;\nvar locationMapImageUrl = DoButton.doButtonNewCommandCommon.LocationMapImageURL;\n\nif (hour >= 7 && hour <= 19 && latitude === \"37.8267\" && longitude === \"-122.4230\") {\n  Smanos.armAway.setWhichSystem(\"Home Security\");\n  Notification.sendNotification.setMessage(\"Arming Home Security in away mode at \" + latitude + \", \" + longitude);\n  Notification.sendNotification.setAttachment(shareUrl);\n  Notification.sendNotification.setImage(locationMapImageUrl);\n} else {\n  Smanos.armAway.skip(\"Not arming system: outside of active hours or incorrect location\");\n}"
  },
  {
    "intent": "When the Bedroom sensor detects motion, send a notification to Angelcam with the event title \"Motion Detected in Bedroom\" and the exact timestamp of detection, then mark this event on the camera timeline and start recording for 5 minutes.",
    "filter_code": "if (SmartthingsV2.anyNewMotionSmartthings.DeviceName === \"Bedroom sensor\") {\n  var occurredAt = SmartthingsV2.anyNewMotionSmartthings.DetectedAt;\n  var title = \"Motion Detected in Bedroom\";\n  Angelcam.receiveEvent.setOccurredAt(occurredAt);\n  Angelcam.receiveEvent.setTitle(title);\n  // Assuming there's a method to start recording for 5 minutes\n  // This part might need adjustment based on actual Angelcam API\n  Angelcam.startRecordingForDuration(300); // 300 seconds = 5 minutes\n} else {\n  Angelcam.receiveEvent.skip(\"Motion not detected by Bedroom sensor\");\n}"
  },
  {
    "intent": "When the Netatmo Weather Station at \"My Home - Wind gauge\" records gusts above 38.6 km/h, change the WiZ light in the \"Living Room\" to yellow with a brightness of 80%, serving as a warning to secure outdoor items and exercise caution on the road.",
    "filter_code": "if (Netatmo.gustSpeedAbove.DeviceName === \"My Home - Wind gauge\" && Netatmo.gustSpeedAbove.GustSpeedKmh > 38.6) {\n  Wiz.turnOn.setEntity(\"Living Room\");\n  Wiz.turnOn.setMode(\"yellow\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"Gust speed is not above 38.6 km/h or device name does not match.\");\n}"
  },
  {
    "intent": "Upload a 10-second video to the cloud from the \"Living Room Camera\" every hour, at 15 minutes past the hour.",
    "filter_code": "if (DateAndTime.everyHourAt.CheckTime.getMinutes() !== 15) {\n  Wyzecam.uploadAlarmVideo.skip(\"Not 15 minutes past the hour.\");\n} else if (serialize_device_info !== \"Living Room Camera\") {\n  Wyzecam.uploadAlarmVideo.skip(\"Device is not the Living Room Camera.\");\n} else {\n  var videoDuration = 10; // seconds\n  Wyzecam.uploadAlarmVideo.setDuration(videoDuration);\n}"
  },
  {
    "intent": "When the \"Arm House\" shortcut is run in Futurehome at \"Home\" site, play the \"Morning Music\" Sonos favorite in the \"Living Room\" and include grouped rooms.",
    "filter_code": "if (Futurehome.shortcutRun.Shortcut === \"Arm House\" && Futurehome.shortcutRun.SiteName === \"Home\") {\n  Sonos.playFavorite.setFavorite(\"Morning Music\");\n  Sonos.playFavorite.setRoom(\"Living Room\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When ComEd's PTS Hours start, set the target temperature of my Honeywell Home thermostat to 78 degrees Fahrenheit for cooling.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\") {\n  HoneywellLyric.setsystemtemperature.setTemperatureType(\"cool\");\n  HoneywellLyric.setsystemtemperature.setTargetTemperature(78);\n  HoneywellLyric.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"Not during ComEd's PTS Hours start.\");\n}"
  },
  {
    "intent": "When the ComEd Peak Time Savings Hours end at their scheduled end time, such as 2020-07-08T04:17:06+05:00, set the target temperature to 72 degrees Fahrenheit on my Honeywell Home thermostat, ensuring it's in auto mode to effectively adjust between heating and cooling as necessary.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Ended\" && ComEd.ptsSavingsHours.EndTime === new Date()) {\n  HoneywellLyric.setsystemtemperature.setTemperatureType(\"cool\");\n  HoneywellLyric.setsystemtemperature.setTargetTemperature(72);\n  HoneywellLyric.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellLyric.setsystemtemperature.skip();\n}"
  },
  {
    "intent": "Set the living room Honeywell Thermostat to cool at 68 degrees Fahrenheit one hour before the ComEd Peak Time Savings Event starts, using the precool time provided by ComEd.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && Meta.currentUserTime.iso8601() < ComEd.ptsSavingsHours.PrecoolTime) {\n  if (Meta.currentUserTime.iso8601() >= ComEd.ptsSavingsHours.PrecoolTime - 3600000) { // one hour before precool time\n    HoneywellLyric.setsystemtemperature.setSystem(\"living room\");\n    HoneywellLyric.setsystemtemperature.setTemperatureType(\"cool\");\n    HoneywellLyric.setsystemtemperature.setTargetTemperature(68);\n    HoneywellLyric.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  } else {\n    HoneywellLyric.setsystemtemperature.skip(\"Not yet time to precool.\");\n  }\n} else {\n  HoneywellLyric.setsystemtemperature.skip(\"ComEd Peak Time Savings Event not scheduled or already started.\");\n}"
  },
  {
    "intent": "Update my ecobee Thermostat to the \"Home\" comfort profile 1 hour before the Peak Time Savings Event starts, to precool by lowering the setpoint to 68 degrees Fahrenheit, using my \"Living Room Thermostat\" and holding for 2 hours.",
    "filter_code": "var startTime = new Date(ComEd.ptsSavingsHours.StartTime);\nvar precoolTime = new Date(startTime.getTime() - 60 * 60 * 1000); // 1 hour before start time\nvar currentTime = new Date();\n\nif (currentTime >= precoolTime && currentTime < startTime) {\n  Ecobee.climateHours.setHoldHours(\"2\");\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n  Ecobee.climateHours.setThermostat(\"Living Room Thermostat\");\n  Ecobee.climateHours.setSetpoint(68);\n} else {\n  Ecobee.climateHours.skip(\"Not within precooling time frame.\");\n}"
  },
  {
    "intent": "When the ComEd Peak Time Savings (PTS) Hours start at the scheduled time, such as 2020-07-08T04:17:06+05:00, automatically turn off the specified Philips Hue lights in the living room and kitchen.",
    "filter_code": "if (ComEd.ptsSavingsHours.Stage === \"Scheduled\" && ComEd.ptsSavingsHours.StartTime <= new Date()) {\n  Hue.turnOffAllHue.setLights([\"living room\", \"kitchen\"]).skip(\"Peak Time Savings Hours have started\");\n}"
  },
  {
    "intent": "When the pusher on your Jaguar watch is pressed with a double press at latitude 55.611947 and longitude 12.978337, toggle all Philips Hue lights.",
    "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\" &&\n    JaguarWatches.pusherPressed.Latitude === \"55.611947\" &&\n    JaguarWatches.pusherPressed.Longitude === \"12.978337\") {\n  Hue.toggleAllHue();\n} else {\n  Hue.toggleAllHue.skip(\"Push type or location does not match.\");\n}"
  },
  {
    "intent": "When the pusher on your Lotus watch is pressed with a double press at 12:00 PM, toggle all Philips Hue lights in the living room on or off.",
    "filter_code": "var hour = new Date(LotusWatches.pusherPressed.PressedAt).getHours();\nvar pressType = LotusWatches.pusherPressed.PressType;\nif (hour === 12 && pressType === \"double\") {\n  Hue.toggleAllHue.setLights(\"living room\");\n} else {\n  Hue.toggleAllHue.skip(\"Not a double press at 12:00 PM.\");\n}"
  },
  {
    "intent": "When the pusher on my Lotus watch is pressed with a double press, add a new row to my Google Sheets spreadsheet named \"Location Log\" in the folder \"IFTTT/My Locations\", with the formatted row containing the current date and time in ISO8601 format, latitude, longitude, and map image URL, separated by \"|||\", such as \"{{PressedAt}}|||{{Latitude}}|||{{Longitude}}|||{{MapImageUrl}}\" to keep track of my locations.",
    "filter_code": "if (LotusWatches.pusherPressed.PressType !== \"double\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Not a double press\");\n}\n\nvar formattedRow = LotusWatches.pusherPressed.PressedAt + \"|||\" + LotusWatches.pusherPressed.Latitude + \"|||\" + LotusWatches.pusherPressed.Longitude + \"|||\" + LotusWatches.pusherPressed.MapImageUrl;\n\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Location Log\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/My Locations\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);"
  },
  {
    "intent": "Send a daily reminder to my Festina watch at 08:00 to take my daily medication, with the notification message \"Remember to take your morning pill\".",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 8) {\n  FestinaWatches.notify.skip(\"Not the scheduled reminder time.\");\n} else {\n  FestinaWatches.notify.setBody(\"Remember to take your morning pill\");\n}"
  },
  {
    "intent": "When the pusher is pressed with a double press type on the Jaguar Watches, add a 60 minute event in my primary Google Calendar with the quick add text \"Busy - Do not book\" to prevent others from scheduling over it.",
    "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy - Do not book\");\n  GoogleCalendar.quickAddEvent.setDuration(60);\n}"
  },
  {
    "intent": "When the pusher on your Lotus watch is pressed with a double press at latitude 55.611947 and longitude 12.978337, toggle your LIFX living room lights on and off with a transition duration of 5 seconds.",
    "filter_code": "if (LotusWatches.pusherPressed.PressType === \"double\" && LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.Longitude === \"12.978337\") {\n  Lifx.toggle.setSelector(\"living room\");\n  Lifx.toggle.setAdvancedOptions(\"transition_duration: 5\");\n} else {\n  Lifx.toggle.skip(\"Conditions not met for toggling living room lights.\");\n}"
  },
  {
    "intent": "When the pusher on your Lotus watch is pressed with a double press at any time, toggle your WeMo Insight Switch located at the office, which has the macaddress 00:11:22:33:44:55, on and off.",
    "filter_code": "if (LotusWatches.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.setMacaddress(\"00:11:22:33:44:55\");\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press.\");\n}"
  },
  {
    "intent": "When the pusher on your Jaguar watch is pressed with a double press at latitude 55.611947 and longitude 12.978337, turn off your WeMo Insight switch named \"Living Room Switch\" and also turn off your LIFX lights.",
    "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\" &&\n    JaguarWatches.pusherPressed.Latitude === \"55.611947\" &&\n    JaguarWatches.pusherPressed.Longitude === \"12.978337\") {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOff();\n}"
  },
  {
    "intent": "Send a daily reminder to my Lotus watch at 08:00 to take medication, with the notification message \"Don't forget to take your morning pills\".",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = checkTime.hour();\nif (hour === 8) {\n  LotusWatches.notify.setBody(\"Don't forget to take your morning pills\");\n} else {\n  LotusWatches.notify.skip(\"Not the scheduled time for medication reminder.\");\n}"
  },
  {
    "intent": "When the pusher on your Jaguar watch is pressed with a double press at 12:00 PM, toggle your WeMo Insight Switch located in the living room.",
    "filter_code": "var hour = JaguarWatches.pusherPressed.PressedAt.hour();\nvar minutes = JaguarWatches.pusherPressed.PressedAt.minute();\nvar pressType = JaguarWatches.pusherPressed.PressType;\nif (hour === 12 && minutes === 0 && pressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete();\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press at 12:00 PM.\");\n}"
  },
  {
    "intent": "When the pusher on your Lotus watch is pressed with a double press at any time, and you are within a 1-mile radius of home, defined by latitude 37.7749 and longitude -122.4194, then turn on the Mr.Coffee WeMo Coffeemaker device to start brewing.",
    "filter_code": "var pressType = LotusWatches.pusherPressed.PressType;\nvar latitude = parseFloat(LotusWatches.pusherPressed.Latitude);\nvar longitude = parseFloat(LotusWatches.pusherPressed.Longitude);\nvar homeLatitude = 37.7749;\nvar homeLongitude = -122.4194;\nvar distance = getDistanceFromLatLonInMiles(homeLatitude, homeLongitude, latitude, longitude);\n\nif (pressType === \"double\" && distance <= 1) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"on\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Push type is not double press or out of range.\");\n}\n\nfunction getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {\n  var R = 3959; // Radius of the earth in miles\n  var dLat = deg2rad(lat2 - lat1);\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}"
  },
  {
    "intent": "When the pusher on your Jaguar watch is pressed with a double press, add a new row to your Google Sheets spreadsheet named \"Daily Locations\" in the folder \"IFTTT/Watch Logs\", with the formatted row containing the current date and time in ISO8601 format, latitude, longitude, and map image URL, separated by \"|||\", such as \"{{pressed_at}}|||{{latitude}}|||{{longitude}}|||{{map_image_url}}\".",
    "filter_code": "if (JaguarWatches.pusherPressed.PressType !== \"double\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Push type was not double press.\");\n}\n\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Daily Locations\");\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Watch Logs\");\nvar formattedRow = JaguarWatches.pusherPressed.PressedAt + \"|||\" + JaguarWatches.pusherPressed.Latitude + \"|||\" + JaguarWatches.pusherPressed.Longitude + \"|||\" + JaguarWatches.pusherPressed.MapImageUrl;\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);"
  },
  {
    "intent": "When the Lotus pusher is pressed with a double press at 12.978337 longitude and 55.611947 latitude, set the Google Nest Thermostat device named \"Living Room Thermostat\" to 18 degrees Celsius.",
    "filter_code": "if (LotusWatches.pusherPressed.Longitude === \"12.978337\" && LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.PressType === \"double\") {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room Thermostat\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"18\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the pusher is pressed with a double press type on the Jaguar watch at any time, and the geographic location is within a 1 km radius of home, then set the WeMo Coffeemaker with MAC address 34:12:64:11:23:45 to brew a fresh pot of coffee.",
    "filter_code": "var latitude = JaguarWatches.pusherPressed.Latitude;\nvar longitude = JaguarWatches.pusherPressed.Longitude;\nvar pressType = JaguarWatches.pusherPressed.PressType;\n\n// Assuming home location is predefined as variables homeLatitude and homeLongitude\nvar homeLatitude = 55.612347; // Replace with actual home latitude\nvar homeLongitude = 12.979031; // Replace with actual home longitude\n\nfunction distanceBetweenTwoPoints(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n  var dLat = (lat2 - lat1) * Math.PI / 180;\n  var dLon = (lon2 - lon1) * Math.PI / 180;\n  var lat1Rad = lat1 * Math.PI / 180;\n  var lat2Rad = lat2 * Math.PI / 180;\n\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1Rad) * Math.cos(lat2Rad);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n}\n\nvar distanceFromHome = distanceBetweenTwoPoints(homeLatitude, homeLongitude, latitude, longitude);\n\nif (pressType === \"double\" && distanceFromHome <= 1) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"brew\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Conditions not met for brewing coffee.\");\n}"
  },
  {
    "intent": "When the pusher on your Festina watch is pressed with a double press at any time, turn off your WeMo Insight switch named \"Living Room Switch\" and also switch off your LIFX lights.",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOffLights();\n}"
  },
  {
    "intent": "When the Festina pusher is pressed with a double press at any time, and the current location's latitude is between 40.7128 and 51.5074, set the Google Nest Thermostat, located in the living room, to 18 degrees Celsius.",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\" &&\n    FestinaWatches.pusherPressed.Latitude >= 40.7128 &&\n    FestinaWatches.pusherPressed.Latitude <= 51.5074) {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"living room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"18\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the pusher on your Festina watch is pressed with a double press type at any time, toggle your LIFX lights in the \"Living Room\" selector on and off, using a transition duration of 2 seconds for a smooth fade.",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  Lifx.toggle.setSelector(\"Living Room\");\n  Lifx.toggle.setAdvancedOptions(\"transition_duration: 2\");\n  Lifx.toggle.skip();\n}"
  },
  {
    "intent": "When the pusher is pressed with a double press type on the Lotus Watches, and the geographic latitude is 55.611947 and the geographic longitude is 12.978337, add a 60-minute event to my primary Google Calendar with the quick add text \"Busy - Unavailable\" to prevent others from booking me during this time.",
    "filter_code": "if (LotusWatches.pusherPressed.PressType === \"double\" && LotusWatches.pusherPressed.Latitude === \"55.611947\" && LotusWatches.pusherPressed.Longitude === \"12.978337\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy - Unavailable for 60 minutes\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Send a daily reminder to my Jaguar watch at 08:00 to take medication, with the notification message \"Remember to take your morning pills\".",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nif (hour === 8) {\n  JaguarWatches.notify.setBody(\"Remember to take your morning pills\");\n} else {\n  JaguarWatches.notify.skip(\"Not the scheduled reminder time.\");\n}"
  },
  {
    "intent": "When the Jaguar pusher is double-pressed between 07:00 and 19:00, set the Living Room Nest Thermostat to 15°C.",
    "filter_code": "var pressType = JaguarWatches.pusherPressed.PressType;\nvar hour = Meta.currentUserTime.hour();\nif (pressType === \"double\" && hour >= 7 && hour < 19) {\n  GoogleNestThermostat.setHotTemperature.setDevice(\"Living Room\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Celsius\");\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"15\");\n} else {\n  GoogleNestThermostat.setHotTemperature.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When the pusher on your Jaguar watch is pressed with a double press type at any time, toggle your Living Room LIFX light on or off.",
    "filter_code": "if (JaguarWatches.pusherPressed.PressType === \"double\") {\n  Lifx.toggle.setSelector(\"Living Room\");\n  Lifx.toggle.skip();\n}"
  },
  {
    "intent": "When the pusher on my Festina watch is pressed with a double press at any time, toggle my WeMo Insight Switch, which is named \"Living Room Lamp\".",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.setMacaddress(\"Living Room Lamp\");\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press.\");\n}"
  },
  {
    "intent": "When the Festina Watches pusher is pressed with a double press at latitude 55.611947 and longitude 12.978337, add a 60 minute event to my primary Google Calendar titled \"Busy\" so that no one else can book me.",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\" && FestinaWatches.pusherPressed.Latitude === \"55.611947\" && FestinaWatches.pusherPressed.Longitude === \"12.978337\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Busy for 60 minutes\");\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for adding event.\");\n}"
  },
  {
    "intent": "When the pusher on your Festina watch is pressed with a double press, and the current time is between 06:00 and 10:00, then start brewing coffee using your WeMo Coffeemaker device named \"Kitchen Coffee Maker\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar pressType = FestinaWatches.pusherPressed.PressType;\nif (pressType === \"double\" && hour >= 6 && hour < 10) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.setMacaddress(\"Kitchen Coffee Maker\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Either not a double press or outside of brewing hours (06:00-10:00).\");\n}"
  },
  {
    "intent": "When the pusher on your Lotus watch is pressed with a double press at 12:00 PM and you are within 1 kilometer of latitude 55.611947 and longitude 12.978337, turn off your WeMo Insight switch named \"Living Room Switch\" and also turn off your LIFX lights.",
    "filter_code": "var pressedAt = LotusWatches.pusherPressed.PressedAt;\nvar pressType = LotusWatches.pusherPressed.PressType;\nvar latitude = parseFloat(LotusWatches.pusherPressed.Latitude);\nvar longitude = parseFloat(LotusWatches.pusherPressed.Longitude);\nvar targetLatitude = 55.611947;\nvar targetLongitude = 12.978337;\nvar distance = getDistanceFromLatLonInKm(latitude, longitude, targetLatitude, targetLongitude);\n\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2 - lat1);\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nif (pressType === \"double\" && getHour(pressedAt) === 12 && distance <= 1) {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOffAllLights();\n} else {\n  WemoInsightSwitch.attributeINSIGHTOFF.skip(\"Conditions not met.\");\n  LIFX.turnOffAllLights.skip(\"Conditions not met.\");\n}\n\nfunction getHour(dateString) {\n  var date = new Date(dateString);\n  return date.getHours();\n}"
  },
  {
    "intent": "When the pusher on your Festina watch is pressed with a double press, add a new row to your Google Sheets spreadsheet named \"Location Log\" in the folder path \"IFTTT/Logs\", with the formatted row containing the current date and time, latitude, longitude, and map image URL, using the format \"2023-03-09 14:30:00|||55.611947|||12.978337|||https://ifttt.apps-kronaby.com/map\".",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  var formattedRow = FestinaWatches.pusherPressed.PressedAt + \"|||\" + FestinaWatches.pusherPressed.Latitude + \"|||\" + FestinaWatches.pusherPressed.Longitude + \"|||\" + FestinaWatches.pusherPressed.MapImageUrl;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Location Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"IFTTT/Logs\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Push type was not double press.\");\n}"
  },
  {
    "intent": "When the pusher on your Festina watch is pressed with a double press action at any time, toggle all Philips Hue lights.",
    "filter_code": "if (FestinaWatches.pusherPressed.PressType === \"double\") {\n  Hue.toggleAllHue();\n}"
  },
  {
    "intent": "When a new task named \"Urgent Project Update\" is assigned to me in the \"Marketing Campaigns\" project on Asana, located in the \"Team Workspace\" workspace, and due on or before 2023-03-15, send a Signal to my Das Keyboard device named \"Office Keyboard\", with the name \"New Task Alert\", zoning the key with color #FF0000 (red), displaying an effect of \"Breathe\", and including a message \"Task due soon: URGENT\".",
    "filter_code": "if (Asana.newTaskAssignedToYou.TaskName === \"Urgent Project Update\"\n    && Asana.newTaskAssignedToYou.ProjectName === \"Marketing Campaigns\"\n    && Asana.newTaskAssignedToYou.Workspace === \"Team Workspace\"\n    && new Date(Asana.newTaskAssignedToYou.DueOn) <= new Date(\"2023-03-15\")) {\n  Daskeyboardq.signals.setName(\"New Task Alert\");\n  Daskeyboardq.signals.setZone(\"Office Keyboard\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setEffect(\"Breathe\");\n  Daskeyboardq.signals.setMessage(\"Task due soon: URGENT\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met for sending signal.\");\n}"
  },
  {
    "intent": "Turn on the Nanoleaf Light Panels to the Sunrise scene every weekday at 7:00 AM.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.CheckTime.hour() === 7 && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Saturday\" && DateAndTime.everyWeekdayAt.DayOfWeek !== \"Sunday\") {\n  Nanoleaf.turnOnScene.setMyScenes(\"Sunrise\");\n} else {\n  Nanoleaf.turnOnScene.skip(\"Not the scheduled time or day for turning on the Sunrise scene.\");\n}"
  },
  {
    "intent": "When the temperature in New York drops below 5°C, send a Signal to the Das Keyboard 5Q device named \"Office Keyboard\" with the name \"Cold Weather Alert\", zoning it to the function keys, coloring them red, and displaying an effect of breathing, accompanied by the message \"Temperature has dropped below 5°C\".",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Daskeyboardq.signals.setName(\"Cold Weather Alert\");\n  Daskeyboardq.signals.setZone(\"Function Keys\");\n  Daskeyboardq.signals.setColor(\"Red\");\n  Daskeyboardq.signals.setEffect(\"Breathing\");\n  Daskeyboardq.signals.setMessage(\"Temperature has dropped below 5°C\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Start the \"Morning Delight\" program on your Home Connect Coffee Machine, with a strength of \"Medium\" and size of \"Large\", when you press the Button widget at a location with latitude 37.8267 and longitude -122.4230, and it's between 07:00 and 10:00.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  var hour = Meta.currentUserTime.hour();\n  if (hour >= 7 && hour < 10) {\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setHaId(\"YourCoffeeMachineID\");\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setProgram(\"Morning Delight\");\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setBeanAmount(\"Medium\");\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.setFillQuantity(\"Large\");\n  } else {\n    HcCoffeeMachine.coffeeMakerStartWorldProgram.skip(\"Outside of the specified time range (07:00-10:00).\");\n  }\n} else {\n  HcCoffeeMachine.coffeeMakerStartWorldProgram.skip(\"Button press location does not match the specified coordinates.\");\n}"
  },
  {
    "intent": "Every day at 8am, calculate the total of today's date by adding the day, month, and year (e.g., 24th May 2019 would be 2+4+5+2+0+1+9 = 23), then move this total as pence into my \"Savings\" Pot on Monzo.",
    "filter_code": "var momentObject = Meta.currentUserTime;\n\nvar day = momentObject.date();\nvar month = momentObject.month() + 1;\nvar year = Number(momentObject.format(\"YYYY\"));\n\n// Calculate the sum of digits for each part of the date\nvar daySum = Array.from(String(day), Number).reduce((a, b) => a + b, 0);\nvar monthSum = Array.from(String(month), Number).reduce((a, b) => a + b, 0);\nvar yearSum = Array.from(String(year), Number).reduce((a, b) => a + b, 0);\n\n// Calculate the total sum\nvar totalSum = daySum + monthSum + yearSum;\n\n// Convert the total to pence (as a string)\nvar depositAmountString = (totalSum / 100).toFixed(2);\n\nMonzo.potDeposit.setAmount(depositAmountString);"
  },
  {
    "intent": "Save an amount equal to the current day of the year in pence to my \"Savings\" pot on Monzo every day at 08:00, starting from 1p on January 1st and increasing by 1p each day, so that on December 31st, I save £3.65.",
    "filter_code": "var day_of_year = Meta.currentUserTime.format('DDD');\nvar amount = parseInt(day_of_year) / 100;\nMonzo.potDeposit.setAmount(amount.toFixed(2));\nMonzo.potDeposit.skip(\"Not saving to pot today\");\nif (DateAndTime.everyDayAt.CheckTime.getHours() === 8) {\n  Monzo.potDeposit.setPot(\"Savings\");\n} else {\n  Monzo.potDeposit.skip(\"Wrong time of day\");\n}"
  },
  {
    "intent": "When a new cycling activity is logged on Strava with a distance of at least 10 meters, reward myself by withdrawing 1p from the \"Savings\" pot on Monzo.",
    "filter_code": "var distance = parseInt(Strava.newActivityByYou.DistanceMeters);\nvar activityType = Strava.newActivityByYou.ActivityType;\nif (activityType === \"Ride\" && distance >= 10) {\n  var amount = (distance / 10) * 0.01; // 1p for every 10 meters\n  Monzo.potWithdraw.setPot(\"Savings\");\n  Monzo.potWithdraw.setAmount(amount.toFixed(2));\n} else {\n  Monzo.potWithdraw.skip(\"Activity type is not cycling or distance is less than 10 meters.\");\n}"
  },
  {
    "intent": "Save $5 toward my \"Vacation Fund\" goal in Qapital every time I reach my daily step goal of 10,000 steps on Fitbit.",
    "filter_code": "if (Fitbit.dailyStepGoal.StepGoal === \"10000\" && Fitbit.dailyStepGoal.Steps >= Fitbit.dailyStepGoal.StepGoal) {\n  Qapital.saveTowardGoal.setGoalName(\"Vacation Fund\");\n  Qapital.saveTowardGoal.setAmount(\"5\");\n  Qapital.saveTowardGoal.skip(false);\n}"
  },
  {
    "intent": "When the \"Commuter Alert\" button is pressed on the Do Button widget at a location like 37.8267, -122.4230, send a message to the #commuter-updates Slack channel saying \"Running late due to traffic, will arrive soon\" with a title \"Traffic Alert\" and a link to the current location map https://maps.google.com/?ll=37.78308,-122.417236667&z=21.",
    "filter_code": "Slack.postToChannel.setMessage(\"Running late due to traffic, will arrive soon\");\nSlack.postToChannel.setTitle(\"Traffic Alert\");\nSlack.postToChannel.setTitleUrl(\"https://maps.google.com/?ll=\" + DoButton.doButtonNewCommandCommon.Latitude + \",\" + DoButton.doButtonNewCommandCommon.Longitude + \"&z=21\");\nSlack.postToChannel.setChannel(\"#commuter-updates\");"
  },
  {
    "intent": "When a new story is published by the WWF on their RSS feed at https://www.worldwildlife.org/feed, with an entry title containing the keyword \"conservation\" and an entry author named \"WWF Staff\", save the article to Pocket with the URL from the entry, tags set to \"conservation, wildlife, WWF\", so it can be read later.",
    "filter_code": "if (Feed.newFeedItem.EntryTitle.includes(\"conservation\") && Feed.newFeedItem.EntryAuthor === \"WWF Staff\") {\n  Pocket.readItLater.setUrl(Feed.newFeedItem.EntryUrl);\n  Pocket.readItLater.setTags(\"conservation, wildlife, WWF\");\n} else {\n  Pocket.readItLater.skip(\"Entry title does not contain 'conservation' or author is not 'WWF Staff'\");\n}"
  },
  {
    "intent": "When a new event titled \"Team Meeting\" is added to the \"Personal\" calendar on iOS Calendar, with a start date of February 12th, 2024 at 10:00AM and an end date of February 12th, 2024 at 11:30AM, and invitees including John and Emily, create a detailed event on Google Calendar in the \"Work\" calendar, setting the title to \"Team Meeting\", start time to 10:00AM, end time to 11:30AM, and attendees to john@example.com, emily@example.com.",
    "filter_code": "if (IosCalendar.newCalendarEvent.Title === \"Team Meeting\"\n    && IosCalendar.newCalendarEvent.CalendarName === \"Personal\"\n    && IosCalendar.newCalendarEvent.StartDate === \"February 12th, 2024 at 10:00AM\"\n    && IosCalendar.newCalendarEvent.EndDate === \"February 12th, 2024 at 11:30AM\"\n    && IosCalendar.newCalendarEvent.Invitees.includes(\"John\")\n    && IosCalendar.newCalendarEvent.Invitees.includes(\"Emily\")) {\n  GoogleCalendar.addDetailedEvent.setStart_time(\"10:00AM\");\n  GoogleCalendar.addDetailedEvent.setEnd_time(\"11:30AM\");\n  GoogleCalendar.addDetailedEvent.setTitle(\"Team Meeting\");\n  GoogleCalendar.addDetailedEvent.setAttendees(\"john@example.com, emily@example.com\");\n} else {\n  GoogleCalendar.addDetailedEvent.skip(\"Conditions not met for Team Meeting event.\");\n}"
  },
  {
    "intent": "When a new event is added to my Personal calendar on iOS Calendar, such as \"Coffee with Max\" at \"Machine Coffee & Deli\" starting at 10:30AM and ending at 11:00AM, with notes like \"Let's get together and talk!\", then add a detailed event to my Work calendar on Google Calendar with the same title, start time, end time, location, and description, and invite attendees like Eric, Jon, Max, and Zhe.",
    "filter_code": "if (IosCalendar.newCalendarEvent.CalendarName === \"Personal\") {\n  var title = IosCalendar.newCalendarEvent.Title;\n  var start_time = IosCalendar.newCalendarEvent.StartDate;\n  var end_time = IosCalendar.newCalendarEvent.EndDate;\n  var location = IosCalendar.newCalendarEvent.Location;\n  var description = IosCalendar.newCalendarEvent.Notes;\n  var attendees = IosCalendar.newCalendarEvent.Invitees;\n\n  GoogleCalendar.addDetailedEvent.setStart Time(start_time);\n  GoogleCalendar.addDetailedEvent.setEnd Time(end_time);\n  GoogleCalendar.addDetailedEvent.setTitle(title);\n  GoogleCalendar.addDetailedEvent.setDescription(description);\n  GoogleCalendar.addDetailedEvent.setLocation(location);\n  GoogleCalendar.addDetailedEvent.setAttendees(attendees);\n}"
  },
  {
    "intent": "When I complete a 30-minute ride on Strava, save $5 toward my 'Summer Vacation' goal on Qapital.",
    "filter_code": "if (Strava.newActivityByYou.ElapsedTimeInSeconds >= 1800 && Strava.newActivityByYou.ActivityType === \"Ride\") {\n  Qapital.saveTowardGoal.setGoalName(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n}"
  },
  {
    "intent": "When a new top post is made in the subreddit \"worldnews\" on Reddit, save the post's URL to Instapaper with the title set to the post's title and add it to the folder \"News\" with the tags \"World News\" and \"Breaking News\".",
    "filter_code": "if (Reddit.newTopPostInSubreddit.Subreddit === \"worldnews\") {\n  Instapaper.saveItem.setUrl(Reddit.newTopPostInSubreddit.PostURL);\n  Instapaper.saveItem.setTitle(Reddit.newTopPostInSubreddit.Title);\n  Instapaper.saveItem.setDescription(\"\");\n  // Note: The provided JSON does not include a method for setting the folder or tags.\n  // If such methods were available, they would be used as follows:\n  // Instapaper.saveItem.setFolder(\"News\");\n  // Instapaper.saveItem.setTags([\"World News\", \"Breaking News\"]);\n} else {\n  Instapaper.saveItem.skip(\"Post not from 'worldnews' subreddit.\");\n}"
  },
  {
    "intent": "Activate the 'Close Shades' scene on Automate Shades when the temperature in New York drops below 80°F (27°C) during sunny weather conditions.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 80 && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\") {\n  Automateshades.activateScene.setSceneID(\"Close Shades\");\n} else {\n  Automateshades.activateScene.skip(\"Temperature is not below 80°F or it's not sunny.\");\n}"
  },
  {
    "intent": "When the UV index rises above 8 at my home location, activate the \"Close All Shades\" scene on Automate Shades to close all the shades.",
    "filter_code": "if (Weather.currentHumidityRisesAbove.UVIndex > 8) {\n  Automateshades.activateScene.setSceneID(\"Close All Shades\");\n} else {\n  Automateshades.activateScene.skip(\"UV index is not above 8.\");\n}"
  },
  {
    "intent": "When the temperature in New York drops below 75°F on a sunny day, activate the Living Room shades in Automate Pulse to close them at 80% during the hottest part of the day.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 75 && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\" && Meta.currentUserTime.hour() >= 11 && Meta.currentUserTime.hour() <= 15) {\n  AutomateshadesV2.activateRoom.setMovementPosition(\"20\");\n  AutomateshadesV2.activateRoom.skip(\"Temperature is below threshold on a sunny day.\");\n} else {\n  AutomateshadesV2.activateRoom.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When you miss an incoming call from Jon Snow on your Google Pixel 7, blink all your LIFX lights red at maximum brightness 3 times, even if they are off.",
    "filter_code": "if (AndroidPhone.receiveAPhoneCallFromNumber.ContactName === \"Jon Snow\" && AndroidPhone.receiveAPhoneCallFromNumber.DeviceName === \"Google Pixel 7\" && AndroidPhone.receiveAPhoneCallFromNumber.CallLength === \"0\") {\n  Lifx.blink.setSelector(\"all\");\n  Lifx.blink.setColor(\"red\");\n  Lifx.blink.setBrightness(\"maximum\");\n  Lifx.blink.setNumber_Of_Blinks(\"3\");\n  Lifx.blink.setBlink_If_Off(\"yes\");\n}"
  },
  {
    "intent": "Track the time spent in meetings with the keyword \"team\" or \"project\" in the title, and where I am the organizer, on my Personal calendar, between 09:00 and 17:00, and send this data to Welltory as a \"meeting\" activity type from the \"iOS Calendar\" service, starting when the event begins, ending when it ends, with a comment saying \"Daily team meeting\".",
    "filter_code": "if (IosCalendar.newCalendarEventFromSearch.Title.includes(\"team\") || IosCalendar.newCalendarEventFromSearch.Title.includes(\"project\")) {\n  if (IosCalendar.newCalendarEventFromSearch.Organizer === Meta.currentUserFullName) {\n    if (IosCalendar.newCalendarEventFromSearch.CalendarName === \"Personal\") {\n      var startTime = new Date(IosCalendar.newCalendarEventFromSearch.StartDate);\n      var endTime = new Date(IosCalendar.newCalendarEventFromSearch.EndDate);\n      if (startTime.getHours() >= 9 && startTime.getHours() < 17) {\n        if (endTime.getHours() >= 9 && endTime.getHours() < 17) {\n          Welltory.sendActivity.setDataSource(\"iOS Calendar\");\n          Welltory.sendActivity.setDataType(\"meeting\");\n          Welltory.sendActivity.setBegin(IosCalendar.newCalendarEventFromSearch.StartDate);\n          Welltory.sendActivity.setEnd(IosCalendar.newCalendarEventFromSearch.EndDate);\n          Welltory.sendActivity.setComment(\"Daily team meeting\");\n        } else {\n          Welltory.sendActivity.skip(\"Meeting ends outside of working hours.\");\n        }\n      } else {\n        Welltory.sendActivity.skip(\"Meeting starts outside of working hours.\");\n      }\n    } else {\n      Welltory.sendActivity.skip(\"Event is not on the Personal calendar.\");\n    }\n  } else {\n    Welltory.sendActivity.skip(\"You are not the organizer of this event.\");\n  }\n} else {\n  Welltory.sendActivity.skip(\"The keywords 'team' or 'project' were not found in the title.\");\n}"
  },
  {
    "intent": "When my Beeminder goal \"productivehours\" is in danger and the deadline is approaching, such as by 2023-03-15T14:30:00+00:00, add a new event to my Google Calendar named \"Personal\" with the quick add text \"Beeminder alert for productivehours goal due soon\".",
    "filter_code": "if (Beeminder.goalRed.Goal === \"productivehours\" && Beeminder.goalRed.Deadline <= \"2023-03-15T14:30:00+00:00\") {\n  GoogleCalendar.quickAddEvent.setQuickAdd(\"Beeminder alert for productivehours goal due soon\");\n  GoogleCalendar.quickAddEvent.run();\n} else {\n  GoogleCalendar.quickAddEvent.skip(\"Conditions not met for Beeminder goal 'productivehours' alert.\");\n}"
  },
  {
    "intent": "When a new reminder is added to the \"Shopping\" list in iOS Reminders with a title like \"Pick up milk\" and notes such as \"Get 1% for Rick\", add a task titled \"Buy Milk for Rick\" with notes \"Remember to get 1% milk\" to the \"Personal\" task list in Google Tasks, due today.",
    "filter_code": "if (IosReminders.newReminderAddedToList.List === \"Shopping\") {\n  var taskTitle = \"Buy \" + IosReminders.newReminderAddedToList.Title;\n  if (IosReminders.newReminderAddedToList.Notes.includes(\"Get 1% for Rick\")) {\n    taskTitle += \" for Rick\";\n    var taskNotes = \"Remember to get 1% milk\";\n  } else {\n    taskNotes = IosReminders.newReminderAddedToList.Notes;\n  }\n\n  GoogleTasks.addTaskToTasklist.setTaskTitle(taskTitle);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(taskNotes);\n  GoogleTasks.addTaskToTasklist.setDueDate(\"Today\");\n}"
  },
  {
    "intent": "When a Google Calendar event titled \"vacation\" starts on my primary calendar, 15 minutes before the event begins, arm the Blink system named \"Home Security\".",
    "filter_code": "if (GoogleCalendar.eventFromSearchStarts.Title === \"vacation\" && GoogleCalendar.eventFromSearchStarts.offset === \"-PT15M\" && GoogleCalendar.eventFromSearchStarts.calendar === \"primary\") {\n  Blink.networkArm.setNetwork(\"Home Security\");\n} else {\n  Blink.networkArm.skip(\"Conditions not met to arm the Blink system.\");\n}"
  },
  {
    "intent": "When the Front Door lock at my San Diego Beach House is unlocked by John Smith, turn on the Living Room Hue lights.",
    "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  PhilipsHue.turnOnLights();\n} else {\n  PhilipsHue.turnOnLights.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When anyone types '/ifttt lights off' in the #office-chat group on Telegram between 17:00 and 19:00, turn off all the living room lights.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newGroupTextFilter.GroupTitle === \"#office-chat\" &&\n    Telegram.newGroupTextFilter.Text.includes(\"/ifttt lights off\") &&\n    hour >= 17 && hour < 19) {\n  Hue.turnOffAllHue.setLights(\"living room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Save the Longreads article titled \"Launch Day!\" with URL \"http://blog.ifttt.com/coming-soon\" by author \"Linden Tibbets\" to Instapaper with the description \"Well here we are on, blah, blah...\" and title \"New Article\", in the folder \"My Favorite Articles\" with tags \"Longreads\" and \"Must Read\".",
    "filter_code": "Instapaper.saveItem.setUrl(Longreads.anyNewPostOnLongreads.EntryUrl);\nInstapaper.saveItem.setDescription(\"Well here we are on, blah, blah...\");\nInstapaper.saveItem.setTitle(\"Launch Day!\");\n// Note: Folder and Tags are not directly supported in the provided Filter code methods.\n// The following lines are based on the assumption that such functionality could be added or is already available through other means not specified in the provided JSON structure.\n// Instapaper.saveItem.setFolder(\"My Favorite Articles\");\n// Instapaper.saveItem.setTags([\"Longreads\", \"Must Read\"]);"
  },
  {
    "intent": "When the sun rises at my location, which is set to New York City, and the current weather condition is Sunny with a temperature of 72 degrees Fahrenheit, turn off all Philips Hue bulbs in my Living Room lights.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.TempFahrenheit === \"72\" && Weather.sunRises.SunriseAt) {\n  Hue.turnOffAllHue.setLights(\"Living Room lights\");\n}"
  },
  {
    "intent": "When the temperature drops below 5°C in New York, display \"It's getting cold! Current temperature is {{temp_celsius}}°C\" on my Glance Clock with a red animation.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Glanceclock.notice.setText(\"It's getting cold! Current temperature is \" + Weather.currentTemperatureDropsBelow.TempCelsius + \"°C\");\n  Glanceclock.notice.setAnimation(\"red\");\n} else {\n  Glanceclock.notice.skip(\"Temperature not below 5°C or location not New York.\");\n}"
  },
  {
    "intent": "Display the temperature on my Glance Clock whenever it rises above 75 degrees Fahrenheit in New York, using the Celsius scale for the display and including a sunny condition image.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Glanceclock.notice.setText(\"Temperature: \" + Weather.currentTemperatureDropsBelow.TempCelsius + \"°C, Condition: Sunny\");\n  Glanceclock.notice.setImage(Weather.currentTemperatureDropsBelow.ConditionImageURL);\n}"
  },
  {
    "intent": "Send a weekly email digest every Wednesday morning at 8:00 AM with the title \"The Hill's Weekly Political Update\" and a message containing the latest news on topics related to \"Congress\" and \"Politics\", retrieved from the RSS feed at \"https://thehill.com/rss/syndication\", including the entry title, entry URL, entry author, entry content, and entry image URL.",
    "filter_code": "if (Meta.currentUserTime.day() !== \"Wednesday\" || Meta.currentUserTime.hour() !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Wednesday at 8:00 AM\");\n}\n\nvar feedUrl = \"https://thehill.com/rss/syndication\";\nvar keyword = \"Congress, Politics\";\n\nif (Feed.newFeedItemMatches.feed_url !== feedUrl || !Feed.newFeedItemMatches.EntryContent.includes(keyword)) {\n  EmailDigest.sendWeeklyEmail.skip(\"Does not match the required feed or keywords\");\n}\n\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Wednesday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"8:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"The Hill's Weekly Political Update\");\nEmailDigest.sendWeeklyEmail.setMessage(\n  \"<h2>\" + Feed.newFeedItemMatches.EntryTitle + \"</h2>\" +\n  \"<p>By \" + Feed.newFeedItemMatches.EntryAuthor + \"</p>\" +\n  \"<p>\" + Feed.newFeedItemMatches.EntryContent + \"</p>\" +\n  \"<img src='\" + Feed.newFeedItemMatches.EntryImageUrl + \"'/>\" +\n  \"<p>Read more at <a href='\" + Feed.newFeedItemMatches.EntryUrl + \"'>\" + Feed.newFeedItemMatches.EntryUrl + \"</a></p>\"\n);\nEmailDigest.sendWeeklyEmail.setUrl(Feed.newFeedItemMatches.FeedUrl);"
  },
  {
    "intent": "Turn off my portable AC unit, which is connected to a Smart Life plug, whenever the temperature in New York drops below 60°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 60) {\n  Smartlife.turnOff.skip(\"Temperature dropped below 60°F.\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the press occurs between 07:00 and 19:00, change the comfort profile of the \"Living Room Thermostat\" ecobee to \"Home\" to quickly and easily adjust the temperature for comfort.",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 19) {\n  Ecobee.climateNextTransition.setThermostat(\"Living Room Thermostat\");\n  Ecobee.climateNextTransition.setComfortProfile(\"Home\");\n} else {\n  Ecobee.climateNextTransition.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new article is favorited in Pocket with the title starting with \"Morning News\" and containing the tag \"news\", add it to Buffer with the photo from the item's image URL and a message including the item's excerpt, between 8:00 AM and 5:00 PM.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  var title = Pocket.newFavoriteItemPocket.Title;\n  var tags = Pocket.newFavoriteItemPocket.Tags;\n  var excerpt = Pocket.newFavoriteItemPocket.Excerpt;\n  var imageUrl = Pocket.newFavoriteItemPocket.ImageUrl;\n\n  if (title.startsWith(\"Morning News\") && tags.includes(\"news\")) {\n    Buffer.addToBufferWithPhoto.setPhotoUrl(imageUrl);\n    Buffer.addToBufferWithPhoto.setMessage(excerpt);\n  } else {\n    Buffer.addToBufferWithPhoto.skip(\"Article does not match the criteria.\");\n  }\n} else {\n  Buffer.addToBufferWithPhoto.skip(\"Outside of active hours (8 AM to 5 PM).\");\n}"
  },
  {
    "intent": "When my Google Pixel 7 connects to the Wifi network with SSID \"HomeNetwork\" at any time, play the \"FavoriteTracks\" playlist on the QNAP device using the default audio interface.",
    "filter_code": "if (AndroidDevice.connectToWifiNetworkWithSsid.SSID === \"HomeNetwork\" &&\n    AndroidDevice.connectToWifiNetworkWithSsid.DeviceName === \"Google Pixel 7\") {\n  Qnap.playMusicOnQnapDevice.setOptionPlaylist(\"FavoriteTracks\");\n  Qnap.playMusicOnQnapDevice.setAudioInterface(\"default\");\n} else {\n  Qnap.playMusicOnQnapDevice.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, start the Cappuccino program on my Home Connect Coffee Machine with a fill quantity of medium size.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.setHaId(\"your_ha_id\"); // Replace \"your_ha_id\" with the actual Home Connect Coffee Machine ID\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.setProgram(\"Cappuccino\");\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.setFillQuantity(\"medium\");\n} else {\n  HcCoffeeMachine.coffeeMakerStartMilkProgram.skip(\"Button not pressed at the specified location.\");\n}"
  },
  {
    "intent": "If the outdoor temperature in New York drops below 55°F, then set your Living Room Wiser Air to heat mode.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 55) {\n  WiserAir.setThermostatsSystemMode.setMode(\"heat\");\n}"
  },
  {
    "intent": "Turn on the Living Room Light switch at sunset when the outside temperature is 72 degrees Fahrenheit and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  Ecobee.turnSwitchOn.setName(\"Living Room Light\");\n} else {\n  Ecobee.turnSwitchOn.skip(\"Conditions not met to turn on the Living Room Light switch.\");\n}"
  },
  {
    "intent": "Send an email to my inbox with the subject \"New Article from TechCrunch\" and the body containing the entry title, entry URL, and entry content whenever a new article is published in the TechCrunch RSS feed that mentions the company name \"Apple\".",
    "filter_code": "if (Feed.newFeedItemMatches.EntryContent.includes(\"Apple\") || Feed.newFeedItemMatches.EntryTitle.includes(\"Apple\")) {\n  Email.sendMeEmail.setSubject(\"New Article from TechCrunch\");\n  var body = \"Entry Title: \" + Feed.newFeedItemMatches.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItemMatches.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItemMatches.EntryContent;\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"Article does not mention Apple.\");\n}"
  },
  {
    "intent": "When a new file named \"meeting_notes.txt\" is saved in the Dropbox folder \"/Office/Meetings\" after 08:00 and before 18:00, send a Signal to the Das Keyboard device \"Conference Room Keyboard\" with the name \"New Meeting Notes\", zone set to \"Key 1\", color set to \"Red\", message \"Check meeting notes\", effect \"Blink\", and the file's public URL as \"https://www.dropbox.com/s/qp3cqdjqachyr2x/meeting_notes.txt\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (Dropbox.newTextFileInFolder.path === \"/Office/Meetings\" && Dropbox.newTextFileInFolder.Filename === \"meeting_notes.txt\") {\n    Daskeyboardq.signals.setName(\"New Meeting Notes\");\n    Daskeyboardq.signals.setZone(\"Key 1\");\n    Daskeyboardq.signals.setColor(\"Red\");\n    Daskeyboardq.signals.setMessage(\"Check meeting notes\");\n    Daskeyboardq.signals.setEffect(\"Blink\");\n    Daskeyboardq.signals.setDevice(\"Conference Room Keyboard\");\n    Daskeyboardq.signals.setMessage(Dropbox.newTextFileInFolder.FileUrl);\n  } else {\n    Daskeyboardq.signals.skip(\"Filename or path does not match.\");\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Outside of office hours (8 AM to 6 PM).\");\n}"
  },
  {
    "intent": "When the sunset at New York occurs and the temperature is below 18 degrees Celsius, turn on my WeMo Smart Plug switch named \"Living Room Lamp\".",
    "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius < 18) {\n  WemoSwitch.attributeSocketOnOffDiscrete.setMacaddress(\"Living Room Lamp\");\n} else {\n  WemoSwitch.attributeSocketOnOffDiscrete.skip(\"Conditions not met to turn on the switch.\");\n}"
  },
  {
    "intent": "When a new file named \"example_document.txt\" is added to the \"/Documents/Work\" subfolder in Dropbox after 08:00 and before 18:00, download the file from its public URL https://www.dropbox.com/s/qp3cqdjqachyr2x/example_document.txt to the QNAP device in the shared folder \"Shared/Downloads\", saving it with the filename \"example_document\" in the subfolder path \"office/documents\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  if (Dropbox.newTextFileInFolder.Filename === \"example_document.txt\" && Dropbox.newTextFileInFolder.path === \"/Documents/Work\") {\n    Qnap.downloadFileFromUrl.setFileUrl(Dropbox.newTextFileInFolder.FileUrl);\n    Qnap.downloadFileFromUrl.setFileName(\"example_document\");\n    Qnap.downloadFileFromUrl.setFolderPath(\"office/documents\");\n    Qnap.downloadFileFromUrl.setOptionSharedFolder(\"Shared/Downloads\");\n  } else {\n    Qnap.downloadFileFromUrl.skip(\"Filename or path does not match.\");\n  }\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Outside of active hours (8 AM to 6 PM).\");\n}"
  },
  {
    "intent": "When a new video is uploaded to Instagram with a caption containing the keyword \"newvideo\" and the video source URL starts with \"http://distilleryimage7.s3.amazonaws.com/\", automatically download the video file from the provided VideoSourceURL to the QNAP device, saving it in the shared folder named \"MyInstagramVideos\" with the filename set to \"instagram_video_<CreatedAt>.mp4\", where <CreatedAt> is the date and time the video was taken, formatted as YYYYMMDD_HHMMSS, and store it in the subfolder path \"videos/instagram/downloads\".",
    "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"newvideo\") && Instagram.anyNewVideoByYouInstagram.VideoSourceURL.startsWith(\"http://distilleryimage7.s3.amazonaws.com/\")) {\n  var createdAt = Instagram.anyNewVideoByYouInstagram.CreatedAt;\n  var dateParts = createdAt.split(\" \");\n  var month = dateParts[0];\n  var day = dateParts[1].replace(\",\", \"\");\n  var year = dateParts[2];\n  var timeParts = dateParts[3].split(\":\");\n  var hour = timeParts[0];\n  var minute = timeParts[1];\n  var seconds = \"00\";\n  var formattedDate = year + getMonthNumber(month) + padZero(day) + \"_\" + padZero(hour) + padZero(minute) + seconds;\n  Qnap.downloadFileFromUrl.setFileUrl(Instagram.anyNewVideoByYouInstagram.VideoSourceURL);\n  Qnap.downloadFileFromUrl.setFileName(\"instagram_video_\" + formattedDate + \".mp4\");\n  Qnap.downloadFileFromUrl.setFolderPath(\"videos/instagram/downloads\");\n  Qnap.downloadFileFromUrl.setOptionSharedFolder(\"MyInstagramVideos\");\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Does not match the conditions.\");\n}\n\nfunction getMonthNumber(month) {\n  var monthNumbers = {\n    \"January\": \"01\",\n    \"February\": \"02\",\n    \"March\": \"03\",\n    \"April\": \"04\",\n    \"May\": \"05\",\n    \"June\": \"06\",\n    \"July\": \"07\",\n    \"August\": \"08\",\n    \"September\": \"09\",\n    \"October\": \"10\",\n    \"November\": \"11\",\n    \"December\": \"12\"\n  };\n  return monthNumbers[month];\n}\n\nfunction padZero(value) {\n  if (value < 10) {\n    return \"0\" + value;\n  } else {\n    return value.toString();\n  }\n}"
  },
  {
    "intent": "Send a weekly email digest every Saturday at 7:00 AM with the title \"This Week's Longreads\" and a message containing the full content of all new posts from Longreads, including their titles, authors, and images, to subscribers who want to stay updated on the latest articles.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 6) { // 6 represents Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Saturday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nif (hour !== 7) { // 7 represents 7:00 AM\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 7:00 AM yet.\");\n}\nvar title = \"This Week's Longreads\";\nvar message = \"\";\nvar entries = [\n  {\"title\": Longreads.anyNewPostOnLongreads.EntryTitle,\n   \"author\": Longreads.anyNewPostOnLongreads.EntryAuthor,\n   \"content\": Longreads.anyNewPostOnLongreads.EntryContent,\n   \"image\": Longreads.anyNewPostOnLongreads.EntryImageUrl}\n];\nfor (var i = 0; i < entries.length; i++) {\n  message += \"<h2>\" + entries[i].title + \"</h2>\";\n  message += \"<p>By \" + entries[i].author + \"</p>\";\n  message += \"<img src='\" + entries[i].image + \"' />\";\n  message += \"<div>\" + entries[i].content + \"</div>\";\n}\nEmailDigest.sendWeeklyEmail.setTitle(title);\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"7:00 AM\");"
  },
  {
    "intent": "When the sunset at New York occurs and the current temperature is 72 degrees Fahrenheit, turn on channel 1 of your eWeLink 4 Channels Switch.",
    "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempFahrenheit === \"72\") {\n  Ewelink.switches3Action.setSwitches3Query(\"eWeLink 4 Channels Switch\");\n  Ewelink.switches3Action.setSwitches3OutletQuery(\"Channel 1\");\n  Ewelink.switches3Action.setOnoffActQuery(\"Turn on\");\n} else {\n  Ewelink.switches3Action.skip(\"Conditions not met to turn on the switch.\");\n}"
  },
  {
    "intent": "When you post a new video on Instagram with a caption like \"Summer Vibes\" and it's between 10:00 AM and 5:00 PM, automatically add the video to your Buffer Queue as an update with the message \"New video alert: check out our latest post at http://instagr.am/p/CTGBw/\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 10 && hour <= 17) {\n  if (Instagram.anyNewVideoByYouInstagram.Caption === \"Summer Vibes\") {\n    var message = \"New video alert: check out our latest post at \" + Instagram.anyNewVideoByYouInstagram.URL;\n    Buffer.addToBuffer.setMessage(message);\n  } else {\n    Buffer.addToBuffer.skip(\"Caption does not match 'Summer Vibes'.\");\n  }\n} else {\n  Buffer.addToBuffer.skip(\"Outside of active hours (10 AM to 5 PM).\");\n}"
  },
  {
    "intent": "Send me an email with the subject \"New Blog Post\" and the body containing the entry title, entry content, and entry image URL whenever a new entry is published in the RSS feed located at http://blog.ifttt.com/ that matches the keyword \"IFTTT\".",
    "filter_code": "if (Feed.newFeedItemMatches.feed_url === \"http://blog.ifttt.com/\" && Feed.newFeedItemMatches.EntryContent.includes(\"IFTTT\")) {\n  Email.sendMeEmail.setSubject(\"New Blog Post\");\n  var body = \"Entry Title: \" + Feed.newFeedItemMatches.EntryTitle + \"<br><br>\" + Feed.newFeedItemMatches.EntryContent + \"<br><br>Entry Image URL: \" + Feed.newFeedItemMatches.EntryImageUrl;\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"Does not match the criteria.\");\n}"
  },
  {
    "intent": "Send a notification to the user's IFTTT app with the message \"Chicago Transit Alert: Elevator at Cumberland Temporarily Out-of-Service (Elevator Status)\" when there's an alert from the Chicago Transit Authority during their morning commute, which is between 7:00 AM and 9:00 AM on weekdays.",
    "filter_code": "var Day = Meta.currentUserTime.day()\nvar Hour = Meta.currentUserTime.hour()\nvar AlertTitle = Cta.newPurpleLineAlert.AlertTitle\n\nif (Day == 6 || Day == 7) {\n  IfNotifications.sendNotification.skip(\"Not a weekday\")\n}\n\nif (Hour < 7 || Hour > 9) {\n  IfNotifications.sendNotification.skip(\"Not commuting hours\")\n}\n\nIfNotifications.sendNotification.setMessage(\"Chicago Transit Alert: \" + AlertTitle)"
  },
  {
    "intent": "Send a weekly email digest every Saturday at 7:00 AM with the title \"This Week's Longreads\" and a message containing links to all new Longreads posts from the past week, including their entry titles, entry URLs, and entry authors.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 6) { // 6 represents Saturday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Saturday.\");\n}\nvar hour = Meta.currentUserTime.hour();\nif (hour !== 7) { // 7 represents 7:00 AM\n  EmailDigest.sendWeeklyEmail.skip(\"It's not 7:00 AM yet.\");\n}\nvar title = \"This Week's Longreads\";\nvar message = \"\";\nvar entries = []; // Assuming this is where new Longreads posts are stored\nfor (var i = 0; i < entries.length; i++) {\n  var entryTitle = Longreads.anyNewPostOnLongreads.EntryTitle;\n  var entryUrl = Longreads.anyNewPostOnLongreads.EntryUrl;\n  var entryAuthor = Longreads.anyNewPostOnLongreads.EntryAuthor;\n  message += \"<p><a href='\" + entryUrl + \"'>\" + entryTitle + \"</a> by \" + entryAuthor + \"</p>\";\n}\nEmailDigest.sendWeeklyEmail.setTitle(title);\nEmailDigest.sendWeeklyEmail.setMessage(message);\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Saturday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"7:00 AM\");"
  },
  {
    "intent": "When a new subscriber joins your Twitch channel, change the color of your Kasa light bulb to a warm white at 2700K with a transition duration of 2 seconds.",
    "filter_code": "Kasa.changeColorTemp.setKelvin(\"2700\");\nKasa.changeColorTemp.setTransitionDuration(\"2000\");"
  },
  {
    "intent": "Turn on the living room lamp, which is connected to channel 1 of my 3-channel switch, at sunset today when the temperature is 72 degrees Fahrenheit and the condition is sunny.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  if (new Date() >= new Date(Weather.sunSets.SunsetAt)) {\n    Ewelink.switches3Action.setSwitches3Query(\"My 3-Channel Switch\");\n    Ewelink.switches3Action.setSwitches3OutletQuery(\"Channel 1\");\n    Ewelink.switches3Action.setOnoffActQuery(\"Turn on\");\n  } else {\n    Ewelink.switches3Action.skip(\"Not sunset yet or conditions not met.\");\n  }\n}"
  },
  {
    "intent": "When the stock price of Google Inc. (GOOG) rises by more than 10% compared to its last closing price, turn on the living room WiZ Colors lights in green color at 80% brightness.",
    "filter_code": "if (Finance.percentageRiseStocks.StockName === \"Google Inc.\" && Finance.percentageRiseStocks.StockTicker === \"GOOG\" && parseFloat(Finance.percentageRiseStocks.PercentageChange) > 10) {\n  Wiz.turnOn.setMode(\"green\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new Twitch stream from \"Ninja\" goes live, change the color of my \"Living Room Lamp\" to a warm white (2700K) with a transition duration of 2 seconds.",
    "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"Ninja\") {\n  Kasa.changeColorTemp.setKelvin(\"2700\");\n  Kasa.changeColorTemp.setTransitionDuration(\"2000\");\n  Kasa.changeColorTemp.skip();\n} else {\n  Kasa.changeColorTemp.skip(\"Stream is not from Ninja.\");\n}"
  },
  {
    "intent": "When the stock price of Google Inc. (GOOG) falls by more than 10% compared to the previous closing price, turn on the living room WiZ Colors light in red mode at 50% brightness.",
    "filter_code": "if (Finance.percentageRiseStocks.StockName === \"Google Inc.\" && Finance.percentageRiseStocks.StockTicker === \"GOOG\" && parseFloat(Finance.percentageRiseStocks.PercentageChange) < -10) {\n  Wiz.turnOn.setMode(\"red\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When the CO₂ level measured by the Netatmo Weather Station at \"My Home - Indoor station\" rises above 1000ppm, change the WiZ light in the \"Living Room\" to red with a brightness of 50%.",
    "filter_code": "if (Netatmo.co2LevelRisesAbove.MeasuredCO2Level > 1000 && Netatmo.co2LevelRisesAbove.DeviceName === \"My Home - Indoor station\") {\n  Wiz.turnOn.setMode(\"red\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"CO₂ level is below 1000ppm or device name does not match.\");\n}"
  },
  {
    "intent": "Turn on the WeMo dimmer located in the living room at sunrise when the outside temperature is above 60°F and the weather condition is sunny.",
    "filter_code": "if (Weather.sunRises.TempFahrenheit > 60 && Weather.sunRises.Condition === \"Sunny\") {\n  WemoDimmer.attributeDimmerOnDiscrete.setMacaddress(\"living_room_dimmer\");\n} else {\n  WemoDimmer.attributeDimmerOnDiscrete.skip(\"Temperature is not above 60°F or weather condition is not sunny.\");\n}"
  },
  {
    "intent": "At sunrise in New York, turn on channel 1 of the Living Room Switch.",
    "filter_code": "if (Weather.sunRises.Location === \"New York\") {\n  Ewelink.switches3Action.setSwitches3Query(\"Living Room Switch\");\n  Ewelink.switches3Action.setSwitches3OutletQuery(1);\n  Ewelink.switches3Action.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.switches3Action.skip(\"Sunrise not in New York\");\n}"
  },
  {
    "intent": "Turn off the outside lights connected to the abode light switch at sunrise, which is at 04:17:06+05:00 today, when the temperature in New York is expected to be around 72 degrees Fahrenheit and the weather condition is sunny.",
    "filter_code": "Abode.turnOnSwitch.skip(\"Outside lights are turned off at sunrise.\");"
  },
  {
    "intent": "Turn off the kitchen hood light every evening at 10:00 PM.",
    "filter_code": "var triggerTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"10:00 PM\";\nif (triggerTime.indexOf(targetTime) === -1) {\n  HcHood.hoodTurnOffFunctionalLight.skip(\"Not the target time\");\n}"
  },
  {
    "intent": "When a new article is published in the Reason magazine RSS feed, https://reason.com/feed, containing the keyword \"Libertarian policy\", send me an email with the subject \"New Reason Article: {{EntryTitle}}\" and the body \"<h2>{{EntryTitle}}</h2><p>{{EntryContent}}</p><p>Read the full article at <a href='{{EntryUrl}}'>{{EntryUrl}}</a></p>\".",
    "filter_code": "var feedUrl = \"https://reason.com/feed\";\nvar keyword = \"Libertarian policy\";\n\nif (Feed.newFeedItemMatches.feed_url === feedUrl && Feed.newFeedItemMatches.EntryContent.includes(keyword)) {\n  var subject = \"New Reason Article: \" + Feed.newFeedItemMatches.EntryTitle;\n  var body = \"<h2>\" + Feed.newFeedItemMatches.EntryTitle + \"</h2><p>\" + Feed.newFeedItemMatches.EntryContent + \"</p><p>Read the full article at <a href='\" + Feed.newFeedItemMatches.EntryUrl + \"'>\" + Feed.newFeedItemMatches.EntryUrl + \"</a></p>\";\n  Email.sendMeEmail.setSubject(subject);\n  Email.sendMeEmail.setBody(body);\n} else {\n  Email.sendMeEmail.skip(\"Article does not match the keyword or feed.\");\n}"
  },
  {
    "intent": "When a new track is found on SoundCloud with the search query \"electronic music\" and the track's title contains the word \"summer\", add it to the Spotify playlist named \"My Favorite Tracks\" if the track is available.",
    "filter_code": "if (Soundcloud.newTrackFromSearch.search_query === \"electronic music\" && Soundcloud.newTrackFromSearch.Title.includes(\"summer\")) {\n  var trackId = Soundcloud.newTrackFromSearch.TrackId;\n  Spotify.addATrackToAPlaylistByTrackId.setPlaylist(\"My Favorite Tracks\");\n  Spotify.addATrackToAPlaylistByTrackId.setTrack(trackId);\n} else {\n  Spotify.addATrackToAPlaylistByTrackId.skip(\"The track does not match the search query or title criteria.\");\n}"
  },
  {
    "intent": "When a new video is posted on Instagram with a caption containing the keyword \"workout\" and the video's thumbnail image URL starts with \"http://distilleryimage\", send an event to Welltory with the data source set to \"Instagram\", data type set to \"Fitness\", datetime set to the time the video was taken, value set to 1, and a comment saying \"New workout video posted\".",
    "filter_code": "if (Instagram.anyNewVideoByYouInstagram.Caption.includes(\"workout\") && Instagram.anyNewVideoByYouInstagram.ImageThumbnailURL.startsWith(\"http://distilleryimage\")) {\n  Welltory.sendEvent\n    .setDataSource(\"Instagram\")\n    .setDataType(\"Fitness\")\n    .setDatetime(Instagram.anyNewVideoByYouInstagram.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"New workout video posted\");\n}"
  },
  {
    "intent": "Turn on my Nanoleaf lights in the living room when the SmartThings motion sensor named 'Living Room Sensor' detects motion between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = SmartthingsV2.anyNewMotionSmartthings.DeviceName;\nif (deviceName === \"Living Room Sensor\" && hour >= 7 && hour < 22) {\n  // Do nothing, let the action proceed\n} else {\n  Nanoleaf.turnOnRequest.skip(\"Either not in living room or outside of desired hours (07:00 to 22:00).\");\n}"
  },
  {
    "intent": "When the \"iH\" button on the iHome device is pressed, turn off all Philips Hue Lights.",
    "filter_code": "if (IhomeEnhance.enhanceButton.ButtonName === \"iH\") {\n  Hue.turnOffAllHue();\n}"
  },
  {
    "intent": "Start zone 3 on the RainMachine for 30 minutes when the outside temperature rises above 75°F in New York.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit <= 75) {\n  RainMachine.startZone.skip(\"Outside temperature is not above 75°F.\");\n} else {\n  var zoneNumber = 3;\n  var durationMinutes = 30;\n  RainMachine.startZone.setZoneNumber(zoneNumber);\n  RainMachine.startZone.setTime(durationMinutes);\n}"
  },
  {
    "intent": "When I check in at San Francisco International Airport on Foursquare, send an SMS to 555-1234 saying \"Just landed, can you pick me up?\" from my Android device.",
    "filter_code": "if (Foursquare.newCheckinByYouAtLocation.VenueName === \"San Francisco International Airport\") {\n  AndroidMessages.sendAMessage.setText(\"Just landed, can you pick me up?\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"555-1234\");\n}"
  },
  {
    "intent": "Every time the temperature drops below 32°F in New York, save $5 toward my Summer Vacation goal.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 32 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature is above 32°F or not in New York.\");\n}"
  },
  {
    "intent": "Save $5 toward my Summer Vacation goal every time the temperature in New York exceeds 75℉.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  Qapital.saveTowardGoal.setGoal(\"Summer Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Temperature in New York is not above 75℉.\");\n}"
  },
  {
    "intent": "When the temperature in Copenhagen drops below 5°C, park the Husqvarna Automower until further notice.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5) {\n  Automower.parkUntilFurtherNotice.skip(\"Temperature in Copenhagen dropped below 5°C.\");\n}"
  },
  {
    "intent": "Turn off the night light of the Bedroom Lamp at sunrise, which is today at 04:17:06+05:00, when the temperature is expected to be around 18 degrees Celsius and the condition is Sunny.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar currentTime = new Date();\nif (currentTime >= sunriseTime) {\n  Idevices.turnNightlightOff.setWhatDevice(\"Bedroom Lamp\");\n  Idevices.turnNightlightOff.skip(\"Turning off night light at sunrise.\");\n}"
  },
  {
    "intent": "Configure a Nexia automation named \"Summer Mode\" to run when the outdoor temperature in New York rises above 75 degrees Fahrenheit.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75) {\n  Nexia.nexiaAutomation.setNexiaAutomationName(\"Summer Mode\");\n  Nexia.nexiaAutomation.skip(\"Running Summer Mode automation.\");\n}"
  },
  {
    "intent": "When the current temperature in degrees Fahrenheit exceeds 80 at home, change the living room air conditioning mode to cool.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 80) {\n  Airtouch.acMode.setMode(\"cool\");\n}"
  },
  {
    "intent": "Add my favorite track with ID \"4iV5W9uYEdYUVa79Axb7Rh\" to the playlist named \"Weekly Favorites\" every Friday at 15:00.",
    "filter_code": "if (DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\" && DateAndTime.everyWeekdayAt.CheckTime.hour() === 15) {\n  Spotify.addATrackToAPlaylistByTrackId.setPlaylist(\"Weekly Favorites\");\n  Spotify.addATrackToAPlaylistByTrackId.setTrack(\"4iV5W9uYEdYUVa79Axb7Rh\");\n} else {\n  Spotify.addATrackToAPlaylistByTrackId.skip(\"Not Friday at 15:00.\");\n}"
  },
  {
    "intent": "Turn off all Philips Hue lights in the living room when Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00.",
    "filter_code": "if (WithingsSleep.bedin.DeviceUser === \"Tom\" &&\n    WithingsSleep.bedin.DateandTime.hour() >= 22 ||\n    WithingsSleep.bedin.DateandTime.hour() <= 6) {\n  Hue.turnOffAllHue.setLights(\"Living room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Not Tom's device or outside of time range.\");\n}"
  },
  {
    "intent": "Send a personalized birthday wish via a phone call to +1234567890 every year on August 23rd at 11:01 PM, speaking in English, with the text \"Happy Birthday, have a wonderful day and year ahead!\"",
    "filter_code": "if (DateAndTime.everyYearOn.CheckTime === \"August 23 at 11:01PM\") {\n  Woopla.ttsCallAny.setTts(\"Happy Birthday, have a wonderful day and year ahead!\");\n  Woopla.ttsCallAny.setLanguage(\"English\");\n  Woopla.ttsCallAny.setPhoneNumber(\"+1234567890\");\n} else {\n  Woopla.ttsCallAny.skip(\"It's not the birthday time.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, turn down the volume in the Living Room, including all grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.decreaseVolume.setRoom(\"Living Room\");\n  Sonos.decreaseVolume.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.decreaseVolume.skip(\"Incorrect gesture or device.\");\n}"
  },
  {
    "intent": "Disarm the Arlo security system on the \"Living Room Camera\" when the Hubitat mode changes to \"Day\".",
    "filter_code": "if (Hubitat.triggerMode.Mode === \"Day\") {\n  Arlo.disarm.setDeviceName(\"Living Room Camera\");\n} else {\n  Arlo.disarm.skip(\"Not disarming because mode is not 'Day'.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my device KNC1-W-00000088, increase the volume in the Living Room and include grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.increaseVolume.setRoom(\"Living Room\");\n  Sonos.increaseVolume.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.increaseVolume.skip(\"Invalid gesture or device.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my Knocki device KNC1-W-00000088, unmute the Sonos speaker in the Living Room, including all grouped rooms.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  Sonos.mute.setRoom(\"Living Room\");\n  Sonos.mute.setIncludeGroupedRooms(\"true\");\n  Sonos.unmute();\n} else {\n  Sonos.mute.skip(\"Incorrect gesture or device.\");\n}"
  },
  {
    "intent": "When a new event titled \"Morning Jog\" is added to my \"Personal\" calendar on iOS, starting at 7:00 AM and ending at 8:00 AM, with invitees including myself, track this activity in Welltory as an \"Exercise\" data type from \"iOS Calendar\", beginning at the event's start time and ending at the event's end time, and add a comment \"Daily morning run\".",
    "filter_code": "if (IosCalendar.newCalendarEventInCalendar.Title === \"Morning Jog\" &&\n    IosCalendar.newCalendarEventInCalendar.CalendarName === \"Personal\" &&\n    IosCalendar.newCalendarEventInCalendar.StartDate.includes(\"7:00 AM\") &&\n    IosCalendar.newCalendarEventInCalendar.EndDate.includes(\"8:00 AM\") &&\n    IosCalendar.newCalendarEventInCalendar.Invitees.includes(\"myself\")) {\n  Welltory.sendActivity.setDataSource(\"iOS Calendar\");\n  Welltory.sendActivity.setDataType(\"Exercise\");\n  Welltory.sendActivity.setBegin(IosCalendar.newCalendarEventInCalendar.StartDate);\n  Welltory.sendActivity.setEnd(IosCalendar.newCalendarEventInCalendar.EndDate);\n  Welltory.sendActivity.setComment(\"Daily morning run\");\n} else {\n  Welltory.sendActivity.skip(\"Does not match the 'Morning Jog' event criteria.\");\n}"
  },
  {
    "intent": "When a message containing the text \"/ifttt lights off\" is sent in the \"#officechat\" Telegram group by anyone, turn off all the living room lights connected to Philips Hue.",
    "filter_code": "if (Telegram.newGroupText.GroupTitle === \"#officechat\" && Telegram.newGroupText.Text.includes(\"/ifttt lights off\")) {\n  Hue.turnOffAllHue.setLights(\"Living Room\");\n} else {\n  Hue.turnOffAllHue.skip(\"Message does not contain '/ifttt lights off' or is not from '#officechat'\");\n}"
  },
  {
    "intent": "When you press the button on your phone at a location like 37.8267, -122.4230, set your Signature thermostat, located in the living room, to 22°C.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  NVentNuheat.decreaseTemperature.setThermostat(\"Living Room\");\n  NVentNuheat.decreaseTemperature.setScale(\"Celsius\");\n  NVentNuheat.decreaseTemperature.setDelta(\"-2\"); // Assuming current temperature is around 24°C to reach 22°C\n}"
  },
  {
    "intent": "When Pavel Durov sends a message to @IFTTT with the keyword #tvon via Telegram between 18:00 and 22:00, turn on the Living Room TV activity using Harmony.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newPmTextFilter.AuthorName === \"Pavel Durov\" &&\n    Telegram.newPmTextFilter.Text.includes(\"#tvon\") &&\n    hour >= 18 && hour <= 22) {\n  // Do nothing, let the action proceed\n} else {\n  Harmony.startActivity.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, then set the Heatzy device \"Living Room Thermostat\" to auto mode.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Heatzy.aSetAutoMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetAutoMode.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When you send \"#partymode\" to @IFTTT in Telegram between 18:00 and 23:00, your living room Hue lights will start a color loop with the color \"#FF69B4\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 18 && hour < 23) {\n  if (Telegram.newPmTextFilter.Text.includes(\"#partymode\")) {\n    Hue.setColorAllHue.setLights(\"Living room\");\n    Hue.setColorAllHue.setColor(\"#FF69B4\");\n  } else {\n    Hue.setColorAllHue.skip(\"Message does not contain #partymode.\");\n  }\n} else {\n  Hue.setColorAllHue.skip(\"Outside of party hours (6 PM to 11 PM).\");\n}"
  },
  {
    "intent": "Message the @IFTTT bot on Telegram with '#color #ff99cc' to set all Philips Hue lights in the living room to a pastel pink color. If the message contains the keyword '#color' followed by an unrecognized color name or code, the lights will default to white.",
    "filter_code": "var text = Telegram.newPmTextFilter.Text;\nvar colorMatch = text.match(/#color\\s*(.*)/i);\nif (colorMatch) {\n  var color = colorMatch[1].trim();\n  if (color === \"#ff99cc\") {\n    Hue.setColorAllHue.setColor(color);\n  } else {\n    Hue.setColorAllHue.skip(\"Unrecognized color. Defaulting to white.\");\n    Hue.setColorAllHue.setColor(\"#ffffff\");\n  }\n}"
  },
  {
    "intent": "Turn on motion detection on the Living Room Camera with sound detection type set to Baby Crying at 07:00 every day.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"07:00\";\nif (currentTime.hour() === 7 && currentTime.minute() === 0) {\n  Smitch.turnOnSoundDetection.setCamera(\"Living Room Camera\");\n  Smitch.turnOnSoundDetection.setSoundDetectionType(\"Baby Crying\");\n} else {\n  Smitch.turnOnSoundDetection.skip(\"Not the target time\");\n}"
  },
  {
    "intent": "Every day at 10:30 PM, turn on the living room lamp plugged into channel 1 of my eWeLink 4 Channels Plug to remind me it's time to go to sleep.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() !== 22 || DateAndTime.everyDayAt.CheckTime.minute() !== 30) {\n  Ewelink.plugs2Action.skip(\"Not the designated bedtime reminder time.\");\n} else {\n  Ewelink.setPlugs2Query(\"eWeLink 4 Channels Plug\");\n  Ewelink.setPlugs2OutletQuery(\"Channel 1\");\n  Ewelink.setOnoffActQuery(\"Turn on\");\n}"
  },
  {
    "intent": "When the Bedroom sensor in SmartThings no longer detects presence, start the Roomba i7+ robot to clean the house.",
    "filter_code": "if (SmartthingsV2.newNotPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n  Irobot.startRobot.setRobotName(\"Roomba i7+\");\n} else {\n  Irobot.startRobot.skip(\"Device is not the Bedroom sensor.\");\n}"
  },
  {
    "intent": "Turn off the kitchen hood light every evening at 10:00 PM.",
    "filter_code": "var checkTime = DateAndTime.everyDayAt.CheckTime;\nvar targetHour = 22; // 10:00 PM in 24-hour format\nif (checkTime.hour() === targetHour && checkTime.minute() === 0) {\n  HcHood.hoodTurnOnFunctionalLight.skip(\"Turning off kitchen hood light at 10:00 PM.\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the press occurs between 07:00 and 22:00, activate the Super Cooling mode of the Home Connect Fridge Freezer, specifically the fridge located in the kitchen.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 22) {\n  HcFridge.refrigeratorActivateSuperCooling.setHaId(\"kitchen_fridge\");\n} else {\n  HcFridge.refrigeratorActivateSuperCooling.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00, activate the Super Freezing mode of the Home Connect Fridge Freezer, identified as \"My Kitchen Fridge\", at the occurred time, such as 2020-07-08T04:17:06+05:00.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 22) {\n  HcFridge.refrigeratorActivateSuperCooling.setHaId(\"My Kitchen Fridge\");\n} else {\n  HcFridge.refrigeratorActivateSuperCooling.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the night light of my Living Room Lamp after sunset, which is typically around 04:17:06+05:00 in my location, when the temperature cools down to 18 degrees Celsius and the condition becomes darker.",
    "filter_code": "if (Weather.sunSets.SunsetAt >= new Date() && Weather.sunSets.TempCelsius <= 18) {\n  Idevices.turnNightlightOn.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnNightlightOn.skip(\"Not sunset or too warm.\");\n}"
  },
  {
    "intent": "When the sunset at your location occurs, with a temperature of 18 degrees Celsius and the condition being Sunny, update the Apilio variable \"SunsetNotifier\" to toggle its boolean state.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Apilio.booleanVariableToggleUpdates.skip(\"Updated by sunset notifier\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Conditions not met for sunset notifier\");\n}"
  },
  {
    "intent": "When the sunrise is detected at my location, with a current temperature of 18°C and a condition of Sunny, trigger Apilio to toggle the variable identified as \"Sunrise_Status\" to update the boolean status, indicating that the sun has risen.",
    "filter_code": "if (Weather.sunRises.TempCelsius === \"18\" && Weather.sunRises.Condition === \"Sunny\") {\n  Apilio.booleanVariableToggleUpdates.setVariableIdentifier(\"Sunrise_Status\");\n} else {\n  Apilio.booleanVariableToggleUpdates.skip(\"Conditions not met for sunrise status update.\");\n}"
  },
  {
    "intent": "Set the living room Nuheat thermostat to 22°C indefinitely when the button widget is pressed at any time.",
    "filter_code": "var thermostatLocation = \"living room\";\nvar desiredTemperature = 22;\nvar scale = \"Celsius\";\n\nNVentNuheat.setThermostatTemperature.setThermostat(thermostatLocation);\nNVentNuheat.setThermostatTemperature.setSetpoint(desiredTemperature);\nNVentNuheat.setThermostatTemperature.setScale(scale);\nNVentNuheat.setThermostatTemperature.setDuration(\"indefinite\");"
  },
  {
    "intent": "When the sunset at New York occurs and the temperature is above 18 degrees Celsius, turn on my WeMo Smart Plug switch named \"Living Room Lamp\".",
    "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius > 18) {\n  WemoSwitch.attributeSocketOnDiscrete.setMacaddress(\"Living Room Lamp\");\n} else {\n  WemoSwitch.attributeSocketOnDiscrete.skip(\"Conditions not met to turn on the switch.\");\n}"
  },
  {
    "intent": "When you miss an incoming call from Jon Snow on your Google Pixel 7 Android phone, blink all lights in the living room to red at maximum brightness 3 times, even if they are off.",
    "filter_code": "if (AndroidPhone.missAPhoneCallFromNumber.ContactName === \"Jon Snow\" && AndroidPhone.missAPhoneCallFromNumber.DeviceName === \"Google Pixel 7\") {\n  Lifx.blink.setSelector(\"all lights in the living room\");\n  Lifx.blink.setColor(\"red\");\n  Lifx.blink.setBrightness(\"maximum\");\n  Lifx.blink.setNumber_of_Blinks(\"3\");\n  Lifx.blink.setBlink_If_Off(\"yes\");\n}"
  },
  {
    "intent": "When the noise level at My Home - Indoor station exceeds 60 decibels, start a color loop on all Philips Hue lights.",
    "filter_code": "if (Netatmo.noiseRisesAbove.MeasuredNoiseLevel > 60 && Netatmo.noiseRisesAbove.DeviceName === \"My Home - Indoor station\") {\n  Hue.colorloopAllHue.skip();\n} else {\n  Hue.colorloopAllHue.skip(\"Noise level is below threshold or not measured at My Home - Indoor station.\");\n}"
  },
  {
    "intent": "When a new track is added to the \"Mid-2000s Jamz\" playlist on Spotify by user \"Linden Tibbets\", start a color loop on all Philips Hue lights.",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\" && Spotify.newTrackAddedToPlaylist.AddedBy === \"Linden Tibbets\") {\n  Hue.colorloopAllHue.skip();\n} else {\n  Hue.colorloopAllHue.skip(\"Conditions not met to start color loop.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, set the TP-Link LB130 smart wifi light bulb in the living room to a bright yellow color (#FFFF00) with 75% brightness and a transition duration of 2 seconds.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  Kasa.changeColor.setDevice(\"Living Room\");\n  Kasa.changeColor.setColor(\"#FFFF00\");\n  Kasa.changeColor.setBrightness(\"75\");\n  Kasa.changeColor.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColor.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When you send \"#partymode\" to @IFTTT in Telegram between 18:00 and 22:00, and the message contains the keyword \"party\", your Hue lights, specifically the living room lamps, will start a color loop.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar text = Telegram.newPmTextFilter.Text;\nif (text.includes(\"party\") && Telegram.newPmTextFilter.Text.includes(\"#partymode\") && hour >= 18 && hour < 22) {\n  // Do nothing, let the action proceed\n} else {\n  Hue.colorloopAllHue.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, set the color of the TP-Link Kasa device \"Living Room Bulb\" to red, with brightness at 75%, and a transition duration of 2 seconds.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  Kasa.changeColor.setDevice(\"Living Room Bulb\");\n  Kasa.changeColor.setColor(\"red\");\n  Kasa.changeColor.setBrightness(\"75%\");\n  Kasa.changeColor.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColor.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When the Green Light Signal service reports a low CO2 index in the postcode area LE6 7TR, and the current CO2 level value is 0, turn on the living room lights to green with a brightness of 50% and a transition duration of 5 seconds, even if they are turned off.",
    "filter_code": "if (GreenLightSignal.co2Level.Co2Index === \"Low\" && GreenLightSignal.co2Level.Co2LevelValue === \"0\" && postcode === \"LE6 7TR\") {\n  Lifx.color.setSelector(\"living room\");\n  Lifx.color.setColor(\"green\");\n  Lifx.color.setBrightness(50);\n  Lifx.color.setColorIfOff(\"Yes\");\n  Lifx.color.setTransitionDuration(5);\n}"
  },
  {
    "intent": "When a message containing the key phrase '/ifttt lights off' is sent in the Telegram group, turn off all Philips Hue lights.",
    "filter_code": "if (Telegram.newPmTextFilter.Text === \"/ifttt lights off\") {\n  Hue.turnOffAllHue();\n} else {\n  Hue.turnOffAllHue.skip(\"Key phrase '/ifttt lights off' not found in the message.\");\n}"
  },
  {
    "intent": "When the UV index rises above 8 in New York, set the Aurora device to red (#FF0000).",
    "filter_code": "if (Weather.currentUvIndexRisesAbove.UvIndex > 8 && Weather.currentUvIndexRisesAbove.location === \"New York\") {\n  Nanoleaf.changeColorRequest.setValue(\"#FF0000\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"UV index is not above 8 or location is not New York.\");\n}"
  },
  {
    "intent": "When the sunset at New York occurs and the current temperature is 18 degrees Celsius, turn on the first channel of your eWeLink 4 Channels Switch.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.SunsetAt) {\n  Ewelink.switchAction.setSwitchQuery(\"first channel\");\n  Ewelink.switchAction.setOnoffActQuery(\"turn on\");\n} else {\n  Ewelink.switchAction.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When the Wyze Cam named \"Living Room Camera\" detects a smoke alarm ringing, Noonlight will immediately send the fire department to the location at latitude 37.7749 and longitude -122.4194.",
    "filter_code": "if (Wyzecam.smokeTrigger.SmokeDetected === \"Smoke alarm detected on your wyze camera.\" && Wyzecam.serialize_device_info === \"Living Room Camera\") {\n  Safetrek.alert.setLat(\"37.7749\");\n  Safetrek.alert.setLon(\"-122.4194\");\n} else {\n  Safetrek.alert.skip(\"Conditions not met for sending fire department.\");\n}"
  },
  {
    "intent": "When the Wyze camera detects a CO alarm at your location, between 07:00 and 22:00, and you are home, send the fire department to your exact latitude 37.7749 and longitude -122.4194 using Noonlight.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  var coDetected = Wyzecam.coTrigger.CoDetected;\n  if (coDetected === \"CO alarm detected on your wyze camera.\") {\n    var lat = \"37.7749\";\n    var lon = \"-122.4194\";\n    Safetrek.alert.setLat(lat);\n    Safetrek.alert.setLon(lon);\n  } else {\n    Safetrek.alert.skip(\"No CO alarm detected.\");\n  }\n} else {\n  Safetrek.alert.skip(\"Outside of active hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "When the sunset at your location occurs, as determined by Weather Underground, and the current temperature is 18 degrees Celsius, update the Apilio variable identified as \"sunset_notification\" to false.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.SunsetAt <= new Date()) {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Sunset notification updated to false\");\n} else {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Conditions not met for sunset notification update\");\n}"
  },
  {
    "intent": "When the sun rises at my location, which is New York City, and the current temperature is above 60°F, update the Apilio variable \"Sunrise_Notified\" to false.",
    "filter_code": "if (Weather.sunRises.Location === \"New York City\" && parseFloat(Weather.sunRises.TempFahrenheit) > 60) {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Sun has risen and temperature is above 60°F\");\n} else {\n  Apilio.booleanVariableToFalseUpdates.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "Disarm the Wireless Tag labeled \"My Office Door\" at sunrise time in New York City, which is obtained from the Weather Underground's weather forecast for that location.",
    "filter_code": "if (Weather.sunRises.SunriseAt.getHours() === new Date().getHours() &&\n    Weather.sunRises.SunriseAt.getMinutes() === new Date().getMinutes()) {\n  Wirelesstag.disarm.setTagid(\"My Office Door\");\n}"
  }
]