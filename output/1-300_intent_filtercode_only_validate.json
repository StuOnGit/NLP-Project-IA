[
  {
    "intent": "When the temperature in Paris drops below 5°C, switch my Heatzy pilot to weekly programming mode on the device named \"Living Room Thermostat\".",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.Location === \"Paris\") {\n  Heatzy.aSetAutoMode.setDevice(\"Living Room Thermostat\");\n} else {\n  Heatzy.aSetAutoMode.skip(\"Temperature in Paris is not below 5°C or location is not Paris.\");\n}"
  },
  {
    "intent": "When a new task is completed in the \"Trip to Japan\" project on Asana, located in the \"Team Asana\" workspace, send a Signal to the \"Office Keyboard\" device on Das Keyboard Q, coloring the \"Top\" zone with the color \"Red\", and displaying the message \"Task completed: Build the Asana Channel on IFTTT\" with a \"Blink\" effect.",
    "filter_code": "if (Asana.newTaskCompleted.ProjectName === \"Trip to Japan\" && Asana.newTaskCompleted.Workspace === \"Team Asana\") {\n  Daskeyboardq.signals.setName(\"New Task Completed\");\n  Daskeyboardq.signals.setMessage(\"Task completed: \" + Asana.newTaskCompleted.TaskName);\n  Daskeyboardq.signals.setZone(\"Top\");\n  Daskeyboardq.signals.setColor(\"Red\");\n  Daskeyboardq.signals.setEffect(\"Blink\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Project or workspace does not match.\");\n}"
  },
  {
    "intent": "When the PM2.5 level in my home, as reported by the Central Air Monitor named \"Living Room\", falls below the threshold of 12, which indicates healthy air quality according to HAVEN recommended ranges, then set my Lennox iComfort central air fan, associated with the system named \"Home Heating and Cooling\", back to Auto mode.",
    "filter_code": "if (HavenIaq.pm25Event.CamName === \"Living Room\" && HavenIaq.pm25Event.Value < 12 && HavenIaq.pm25Event.Rising === \"False\") {\n  Lennoxicomfort.fanmodeauto.setSystems(\"Home Heating and Cooling\");\n} else {\n  Lennoxicomfort.fanmodeauto.skip(\"Conditions not met to set fan mode to Auto.\");\n}"
  },
  {
    "intent": "Turn off the Kasa smart switch attached to the purification device when the PM2.5 level drops below 12 at the Basement Central Air Monitor.",
    "filter_code": "if (HavenIaq.pm25Event.CamName === \"Basement\" && HavenIaq.pm25Event.Value < 12 && HavenIaq.pm25Event.Rising === \"False\") {\n  Kasa.turnOff.skip(\"PM2.5 level dropped below 12 at Basement Central Air Monitor.\");\n}"
  },
  {
    "intent": "When the PM2.5 level in your home exceeds 12, as detected by the Central Air Monitor named \"Living Room\", turn on the Lennox iComfort fan in the system labeled \"Upstairs\" to increase air filtration.",
    "filter_code": "if (HavenIaq.pm25Event.Value > 12 && HavenIaq.pm25Event.CamName === \"Living Room\") {\n  Lennoxicomfort.fanmodeon.setSystems(\"Upstairs\");\n} else {\n  Lennoxicomfort.fanmodeon.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "When the PM2.5 level in your home exceeds 12, as detected by the Central Air Monitor named \"Living Room\", turn on the Honeywell Total Connect central blower fan to ensure more air is filtered, and keep it on until the levels drop below 11.7.",
    "filter_code": "if (HavenIaq.pm25Event.Value > 12 && HavenIaq.pm25Event.CamName === \"Living Room\") {\n  HoneywellTotalConnectComfort.setfan.setFanState(\"On\");\n} else if (HavenIaq.pm25Event.Value <= 11.7 && HavenIaq.pm25Event.CamName === \"Living Room\") {\n  HoneywellTotalConnectComfort.setfan.skip(\"PM2.5 levels are back to normal.\");\n}"
  },
  {
    "intent": "Set the Ecobee thermostat named \"Living Room Thermostat\" to a new indefinite temperature point of 22°C when the Apilio event \"run_only_at_nighttime\" is triggered between 20:00 and 06:00 with a custom value of \"Green\" for Apilio value1.",
    "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && Apilio.iftttActionReports.ApilioValue1 === \"Green\"\n    && Meta.currentUserTime.hour() >= 20 || Meta.currentUserTime.hour() < 6) {\n  if (Ecobee.selectedThermostat !== \"Living Room Thermostat\") {\n    Ecobee.holdIndefinite.skip(\"Thermostat not set to Living Room Thermostat\");\n  } else {\n    Ecobee.holdIndefinite.setDesiredTemperature(22);\n  }\n} else {\n  Ecobee.holdIndefinite.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "Turn on the Living Room Light switch at sunset when the temperature is 72 degrees Fahrenheit and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  Ecobee.turnSwitchOn.setSwitchName(\"Living Room Light\");\n} else {\n  Ecobee.turnSwitchOn.skip(\"Temperature is not 72 degrees Fahrenheit or condition is not Sunny.\");\n}"
  },
  {
    "intent": "Turn off the living room light switch at sunrise when the outside temperature is above 18 degrees Celsius.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 18) {\n  Ecobee.turnSwitchOff.setName(\"living room light switch\");\n} else {\n  Ecobee.turnSwitchOff.skip(\"Outside temperature is not above 18 degrees Celsius.\");\n}"
  },
  {
    "intent": "When the average electricity price exceeds 15 cents per hour during the summer season, set my ecobee thermostat to the \"Home\" comfort profile for 4 hours.",
    "filter_code": "if (ComEd.averagePriceChange.AveragePrice > 15 && ComEd.averagePriceChange.which_season === \"summer\") {\n  Ecobee.climateHours.setHoldHours(\"4\");\n  Ecobee.climateHours.setComfortProfile(\"Home\");\n} else {\n  Ecobee.climateHours.skip(\"Average price is not above 15 cents or it's not summer.\");\n}"
  },
  {
    "intent": "Send a weekly email digest every Friday at 10:00 AM with the title \"SpaceX Weekly News\" to subscribers, containing a list of New York Times articles published between Monday and Friday of the same week, where the search term is \"SpaceX\" and the section is \"Business\" or \"Technology\", including the article title, author, blurb, and URL, and an optional image URL if available.",
    "filter_code": "var day = Meta.currentUserTime.day();\nif (day !== 5) { // 5 represents Friday\n  EmailDigest.sendWeeklyEmail.skip(\"Today is not Friday.\");\n}\n\nvar searchTerm = \"SpaceX\";\nvar section = [\"Business\", \"Technology\"];\nvar articles = [];\n\n// Filter articles based on search term and section\nif (Nytimes.newArticleMatchingSearch.Term === searchTerm && section.includes(Nytimes.newArticleMatchingSearch.Section)) {\n  var article = {\n    title: Nytimes.newArticleMatchingSearch.Title,\n    author: Nytimes.newArticleMatchingSearch.Author,\n    blurb: Nytimes.newArticleMatchingSearch.Blurb,\n    url: Nytimes.newArticleMatchingSearch.ArticleUrl,\n    imageUrl: Nytimes.newArticleMatchingSearch.ImageUrl\n  };\n  articles.push(article);\n}\n\n// Set email digest details\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Friday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"10:00 AM\");\nEmailDigest.sendWeeklyEmail.setTitle(\"SpaceX Weekly News\");\n\n// Create message content\nvar message = \"<ul>\";\narticles.forEach(function(article) {\n  message += `<li><a href='${article.url}'>${article.title}</a> by ${article.author}<br>${article.blurb}</li>`;\n});\nmessage += \"</ul>\";\n\n// Add optional image URL if available\nif (Nytimes.newArticleMatchingSearch.ImageUrl) {\n  message += `<img src='${Nytimes.newArticleMatchingSearch.ImageUrl}'/>`;\n}\n\nEmailDigest.sendWeeklyEmail.setMessage(message);"
  },
  {
    "intent": "When a new note titled \"Blog Idea\" is created in my Evernote \"Ideas\" notebook with the tags \"blog, idea, draft\", and containing the text \"Connect Evernote to hundreds of apps\" in the body, create a new draft post in WordPress with the title \"New Blog Post\", body \"<p>This is a great idea for a blog post</p>\", categories \"drafts, ideas\", tags \"blog, writing, evernote\", and set the post status to \"draft\".",
    "filter_code": "if (Evernote.newNoteInNotebook.Title === \"Blog Idea\"\n    && Evernote.newNoteInNotebook.Tags.includes(\"blog\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"idea\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"draft\")\n    && Evernote.newNoteInNotebook.BodyHTML.includes(\"Connect Evernote to hundreds of apps\")) {\n  Wordpress.createPostWp.setTitle(\"New Blog Post\");\n  Wordpress.createPostWp.setBody(\"<p>This is a great idea for a blog post</p>\");\n  Wordpress.createPostWp.setCategories(\"drafts, ideas\");\n  Wordpress.createPostWp.setTags(\"blog, writing, evernote\");\n  Wordpress.createPostWp.setPostStatus(\"draft\");\n} else {\n  Wordpress.createPostWp.skip(\"Note does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the \"Living Room Lamp\" SmartThings device is turned off between 18:00 and 22:00, turn on the \"Kitchen Light\" eWeLink Smart Home 1-channel switch.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nvar switchName = SmartthingsV2.switchedOnSmartthings.SwitchName;\nif (switchName === \"Living Room Lamp\" &&\n    SmartthingsV2.switchedOnSmartthings.SwitchedOnAt.includes(\"off\") &&\n    (hour >= 18 || (hour === 17 && minute >= 60)) &&\n    (hour <= 22 || (hour === 23 && minute === 0))) {\n  Ewelink.lightSwitchAction.setDevice(\"Kitchen Light\");\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the \"Bedroom switch\" SmartThings device is turned on at 8:00 PM, turn on the \"Living Room Light\" eWeLink Support 1-channel switch.",
    "filter_code": "if (SmartthingsV2.switchedOnSmartthings.SwitchName === \"Bedroom switch\" &&\n    Meta.currentUserTime.hour() === 20 &&\n    SmartthingsV2.switchedOnSmartthings.SwitchedOnAt.includes(\"8:00 PM\")) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the kitchen hood is turned on, turn on all Philips Hue lights in the living room.",
    "filter_code": "if (HcHood.hoodPowerOn.ha_id === \"kitchen_hood\") {\n  Hue.turnOnAllHue.setLights(\"living_room\");\n}"
  },
  {
    "intent": "Turn on the \"Living Room Lamp\" device at 07:00 every day and turn it off at 19:00.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\n\nif (hour === 7) {\n  Tantiv4.turnOnOff.setDeviceName(\"Living Room Lamp\");\n  Tantiv4.turnOnOff.setTurnOnOff(true);\n} else if (hour === 19) {\n  Tantiv4.turnOnOff.setDeviceName(\"Living Room Lamp\");\n  Tantiv4.turnOnOff.setTurnOnOff(false);\n} else {\n  Tantiv4.turnOnOff.skip(\"Not the scheduled time.\");\n}"
  },
  {
    "intent": "When the kitchen hood, labeled \"Main Hood\", is turned off between 06:00 and 22:00, turn off all Philips Hue lights in the living room.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (HcHood.hoodPowerOff.ha_id === \"Main Hood\" && hour >= 6 && hour <= 22) {\n  if (Hue.turnOffAllHue !== undefined) {\n    Hue.turnOffAllHue.setLights(\"living room\");\n  } else {\n    Hue.turnOffAllHue.skip(\"Unable to turn off lights: Invalid or missing action method.\");\n  }\n} else {\n  Hue.turnOffAllHue.skip(\"Condition not met: Either hood ID is incorrect or outside of time range (06:00-22:00).\");\n}"
  },
  {
    "intent": "Send me an email with the subject \"New Article from TechCrunch\" and the body containing the entry title, entry URL, and entry content whenever a new article is published in the TechCrunch RSS feed that mentions \"Apple\", with the email sent to my inbox between 08:00 and 18:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour < 18) {\n  var entryContent = Feed.newFeedItem.EntryContent;\n  var entryTitle = Feed.newFeedItem.EntryTitle;\n  var entryUrl = Feed.newFeedItem.EntryUrl;\n  if (entryContent.toLowerCase().includes(\"apple\") || entryTitle.toLowerCase().includes(\"apple\")) {\n    Email.sendMeEmail.setSubject(\"New Article from TechCrunch\");\n    Email.sendMeEmail.setBody(\"Entry Title: \" + entryTitle + \"\\nEntry URL: \" + entryUrl + \"\\nEntry Content: \" + entryContent);\n  } else {\n    Email.sendMeEmail.skip(\"Article does not mention Apple.\");\n  }\n} else {\n  Email.sendMeEmail.skip(\"Outside of active hours (8 AM to 6 PM).\");\n}"
  },
  {
    "intent": "When a new track is saved on Spotify, such as \"Happy\" by Pharrell Williams from the album \"G I R L\", create a new journal entry in Day One's \"Music Diary\" with the track information, including its name, artist, album, and a link to the track, and embed the Spotify player for the track. Additionally, include tags like \"music\", \"spotify\", and \"favorite\", and set the location to \"Home\" with coordinates 37.7749° N, 122.4194° W.",
    "filter_code": "DayOne.createJournalEntry.setBody(`Listened to ${Spotify.newSavedTrack.TrackName} by ${Spotify.newSavedTrack.ArtistName} from the album ${Spotify.newSavedTrack.AlbumName}. Track URL: ${Spotify.newSavedTrack.TrackURL}`);\nDayOne.createJournalEntry.setTags(\"music, spotify, favorite\");\nDayOne.createJournalEntry.setPlacename(\"Home\");\nDayOne.createJournalEntry.setLatitude(37.7749);\nDayOne.createJournalEntry.setLongitude(-122.4194);"
  },
  {
    "intent": "When a new item is added to Pocket with a title containing the keyword \"blog\" and has an image, create a new journal entry in Day One's \"Personal\" journal with the body set to the item's excerpt and title, tags set to \"pocket, blog\", and include the item's image URL.",
    "filter_code": "if (Pocket.newItemAddedPocket.Title.includes(\"blog\") && Pocket.newItemAddedPocket.ImageUrl) {\n  DayOne.createJournalEntry.setBody(Pocket.newItemAddedPocket.Excerpt + \" \" + Pocket.newItemAddedPocket.Title);\n  DayOne.createJournalEntry.setTags(\"pocket, blog\");\n  DayOne.createJournalEntry.setImage(Pocket.newItemAddedPocket.ImageUrl);\n  DayOne.createJournalEntry.setJournalId(\"Personal\");\n} else {\n  DayOne.createJournalEntry.skip(\"Title does not contain 'blog' or no image found.\");\n}"
  },
  {
    "intent": "Automatically save new Instagram photos to my personal Day One journal, including the photo image from the Source URL, with a body containing the caption and a link to the Instagram post, tagged as \"Instagram\" and \"Photos\", and located at my home coordinates of 37.7749 latitude and -122.4194 longitude, whenever I post between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  var caption = Instagram.anyNewPhotoByYou.Caption;\n  var sourceUrl = Instagram.anyNewPhotoByYou.SourceUrl;\n  var url = Instagram.anyNewPhotoByYou.Url;\n  DayOne.createJournalEntry.setBody(\"Caption: \" + caption + \"\\nLink: \" + url);\n  DayOne.createJournalEntry.setImage(sourceUrl);\n  DayOne.createJournalEntry.setTags(\"Instagram, Photos\");\n  DayOne.createJournalEntry.setLatitude(37.7749);\n  DayOne.createJournalEntry.setLongitude(-122.4194);\n} else {\n  DayOne.createJournalEntry.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new task is completed in the \"Household Tasks\" project on Todoist, with a priority of \"Priority 1\" and labels including \"to_follow_up\", create a new journal entry in Day One's \"Personal\" journal, including the task content, description, and link to the task, and tag it with \"completed_task\" and \"todoist_integration\".",
    "filter_code": "if (Todoist.newCompletedTask.Project === \"Household Tasks\" && Todoist.newCompletedTask.Priority === \"Priority 1\" && Todoist.newCompletedTask.Labels.includes(\"to_follow_up\")) {\n  var body = `### Task Completed: ${Todoist.newCompletedTask.TaskContent}\\n\\n${Todoist.newCompletedTask.TaskDescription}\\n\\n[View Task](${Todoist.newCompletedTask.LinkToTask})`;\n  DayOne.createJournalEntry.setBody(body);\n  DayOne.createJournalEntry.setTags(\"completed_task, todoist_integration\");\n} else {\n  DayOne.createJournalEntry.skip(\"Does not match the specified project, priority, or labels.\");\n}"
  },
  {
    "intent": "When a new link is saved to Instapaper with a title like \"The Computer for the 21st Century\", description containing keywords like \"profound technologies\", and a URL such as \"http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html\", create a new entry in Day One's default journal, including the link's title, description, and URL in the body, tagging it with keywords like \"technology, innovation\", and setting the location to the user's current place if available.",
    "filter_code": "DayOne.createJournalEntry.setBody(`Title: ${Instapaper.newLinkSaved.Title}\\n\\n${Instapaper.newLinkSaved.Description}\\n\\nURL: ${Instapaper.newLinkSaved.URL}`);\nDayOne.createJournalEntry.setTags(\"technology, innovation\");"
  },
  {
    "intent": "When a new article titled \"My Morning Routine\" with the URL http://blog.ifttt.com and tags \"productivity, morning\" is saved to Pocket, create a new task in Todoist with the project set to \"Personal Development\", task content \"Read about morning routines\", note \"Interesting article about boosting productivity\", due date \"tomorrow at 8:00 AM\", and priority set to \"High\".",
    "filter_code": "if (Pocket.newItemAddedPocket.Title === \"My Morning Routine\" &&\n    Pocket.newItemAddedPocket.Url === \"http://blog.ifttt.com\" &&\n    Pocket.newItemAddedPocket.Tags === \"productivity, morning\") {\n  Todoist.createTask.setProjectId(\"Personal Development\");\n  Todoist.createTask.setTaskContent(\"Read about morning routines\");\n  Todoist.createTask.setNote(\"Interesting article about boosting productivity\");\n  Todoist.createTask.setDueDate(\"tomorrow at 8:00 AM\");\n  Todoist.createTask.setPriority(\"High\");\n} else {\n  Todoist.createTask.skip(\"Article does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new track is saved on Spotify, such as \"Happy\" by Pharrell Williams from the album \"G I R L\", with an album cover available at https://i.scdn.co/image/ab67616d0000b27306c1f7a6aa5e2fc3b4aa3df9, upload the track details to Unforgettable Me with an augmenter name like \"SpotifySavedTrack\" and a body containing the track's ID, name, artist, album, and save time in JSON format, for instance: {\"track_id\": \"3aibwv5hGXSgw7Yru8IYTO\", \"track_name\": \"Happy\", \"artist_name\": \"Pharrell Williams\", \"album_name\": \"G I R L\", \"saved_at\": \"2024-09-16T14:30:00+02:00\"}.",
    "filter_code": "UnforgettableMe.uploadData.setAugmenterName(\"SpotifySavedTrack\");\nvar trackDetails = {\n  \"track_id\": Spotify.newSavedTrack.TrackId,\n  \"track_name\": Spotify.newSavedTrack.TrackName,\n  \"artist_name\": Spotify.newSavedTrack.ArtistName,\n  \"album_name\": Spotify.newSavedTrack.AlbumName,\n  \"saved_at\": Spotify.newSavedTrack.SavedAt\n};\nUnforgettableMe.uploadData.setBody(JSON.stringify(trackDetails));"
  },
  {
    "intent": "When a new public favorite track is uploaded to SoundCloud by user \"gaga\" with tags including \"killer\" and description containing the word \"sweet\", download the track from the URL http://soundcloud.com/ribbonmusic/john-maus-believer into folder ID 123456 in put.io.",
    "filter_code": "if (Soundcloud.newPublicFavoriteTrack.Username === \"gaga\"\n    && Soundcloud.newPublicFavoriteTrack.Tags.includes(\"killer\")\n    && Soundcloud.newPublicFavoriteTrack.Description.includes(\"sweet\")) {\n  Putio.newTransfer.setUrl(\"http://soundcloud.com/ribbonmusic/john-maus-believer\");\n  Putio.newTransfer.setFolderId(\"123456\");\n} else {\n  Putio.newTransfer.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new file named like \"report\" is saved in the Dropbox folder \"/Office/Documents\", send a Signal to the Das Keyboard device \"My Work Keyboard\" with the name \"New File Alert\", setting the color of the \"Space\" zone to \"#008000\" and displaying the message \"A new file has been uploaded: {{Filename}}\".",
    "filter_code": "if (Dropbox.newFileInFolder.FilenameNoExt === \"report\" && Dropbox.newFileInFolder.path === \"/Office/Documents\") {\n  Daskeyboardq.signals.setName(\"New File Alert\");\n  Daskeyboardq.signals.setMessage(\"A new file has been uploaded: \" + Dropbox.newFileInFolder.Filename);\n  Daskeyboardq.signals.setZone(\"Space\");\n  Daskeyboardq.signals.setColor(\"#008000\");\n} else {\n  Daskeyboardq.signals.skip(\"File does not match the report criteria.\");\n}"
  },
  {
    "intent": "When a new item is added to Pocket with a title containing the keyword \"article\" and having an excerpt longer than 50 characters, create a new Link Card in the Zoho Notebook named \"My Favorite Articles\" with the notecard name set to the Pocket item's title, the link URL set to the Pocket item's URL, and tags set to the Pocket item's tags plus the additional tag \"read-later\".",
    "filter_code": "if (Pocket.newItemAddedPocket.Title.indexOf(\"article\") !== -1 && Pocket.newItemAddedPocket.Excerpt.length > 50) {\n  Notebook.createLinkCard.setNotecardName(Pocket.newItemAddedPocket.Title);\n  Notebook.createLinkCard.setLinkUrl(Pocket.newItemAddedPocket.Url);\n  var tags = Pocket.newItemAddedPocket.Tags + \",read-later\";\n  Notebook.createLinkCard.setTags(tags);\n} else {\n  Notebook.createLinkCard.skip(\"Title does not contain 'article' or excerpt is too short.\");\n}"
  },
  {
    "intent": "When a new public track is uploaded by a user like \"gaga\" to SoundCloud, with a track title such as \"A cool track\", description containing \"This track is sweet\", and tags including \"killer, noise\", and the track's URL is \"http://soundcloud.com/ribbonmusic/john-maus-believer\", then initiate a new transfer on put.io to download the track into folder ID \"12345\".",
    "filter_code": "if (Soundcloud.followingNewPublicTrack.Username === \"gaga\" &&\n    Soundcloud.followingNewPublicTrack.Title === \"A cool track\" &&\n    Soundcloud.followingNewPublicTrack.Description.includes(\"This track is sweet\") &&\n    Soundcloud.followingNewPublicTrack.Tags === \"killer, noise\" &&\n    Soundcloud.followingNewPublicTrack.TrackUrl === \"http://soundcloud.com/ribbonmusic/john-maus-believer\") {\n  Putio.newTransfer.setUrl(Soundcloud.followingNewPublicTrack.TrackUrl);\n  Putio.newTransfer.setFolderId(\"12345\");\n} else {\n  Putio.newTransfer.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new item is liked on Instapaper with a title like \"The Computer for the 21st Century\", a description containing keywords like \"technology\" and \"innovation\", and a URL such as \"http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html\", created between 07:00 and 19:00, then create a new journal entry in Day One's \"Personal\" journal with the body containing the liked item's title, description, and URL, add tags like \"instapaper\", \"liked\", and \"technology\", and include an image from the URL if available.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var title = Instapaper.newLikedItem.Title;\n  var description = Instapaper.newLikedItem.Description;\n  var url = Instapaper.newLikedItem.URL;\n\n  if (title.includes(\"The Computer for the 21st Century\") &&\n      (description.includes(\"technology\") || description.includes(\"innovation\")) &&\n      url === \"http://www.ubiq.com/hypertext/weiser/SciAmDraft3.html\") {\n    DayOne.createJournalEntry.setBody(`Title: ${title}\\nDescription: ${description}\\nURL: ${url}`);\n    DayOne.createJournalEntry.setTags(\"instapaper, liked, technology\");\n    // Assuming the image URL is available in the description or as a separate ingredient\n    // For demonstration purposes, let's assume it's available as a separate ingredient named \"Image URL\"\n    // var imageUrl = Instapaper.newLikedItem.ImageURL;\n    // DayOne.createJournalEntry.setImage(imageUrl);\n  } else {\n    DayOne.createJournalEntry.skip(\"The liked item does not match the specified criteria.\");\n  }\n} else {\n  DayOne.createJournalEntry.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When a new item is favorited in Pocket with the title starting with \"My\" and containing the tag \"neato\", save it to the Raindrop.io collection named \"Favorites\" with the URL, excerpt, and image from the Pocket item.",
    "filter_code": "if (Pocket.newFavoriteItemPocket.Title.startsWith(\"My\") && Pocket.newFavoriteItemPocket.Tags.includes(\"neato\")) {\n  Raindrop.raindrop.setLink(Pocket.newFavoriteItemPocket.Url);\n  Raindrop.raindrop.setTitle(Pocket.newFavoriteItemPocket.Title);\n  Raindrop.raindrop.setExcerpt(Pocket.newFavoriteItemPocket.Excerpt);\n  Raindrop.raindrop.setCover(Pocket.newFavoriteItemPocket.ImageUrl);\n  Raindrop.raindrop.setTags(Pocket.newFavoriteItemPocket.Tags);\n} else {\n  Raindrop.raindrop.skip(\"Title does not start with 'My' or tags do not include 'neato'.\");\n}"
  },
  {
    "intent": "Whenever you post a new photo on Instagram with a caption containing the keyword \"vacation\" and the photo was taken between 08:00 and 18:00, a copy of the image will be saved to a folder named \"Instagram Archives\" in your Google Drive, using the photo's Source URL as the file URL and the filename \"Vacation Photo - {CreatedAt}\" where {CreatedAt} is the date and time the photo was taken.",
    "filter_code": "var hour = Instagram.anyNewPhotoByYou.CreatedAt.hour();\nif (hour >= 8 && hour < 18) {\n  if (Instagram.anyNewPhotoByYou.Caption.includes(\"vacation\")) {\n    GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n    GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(\"Vacation Photo - \" + Instagram.anyNewPhotoByYou.CreatedAt);\n    GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"Instagram Archives\");\n  } else {\n    GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"Caption does not contain 'vacation'.\");\n  }\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"Photo was not taken between 08:00 and 18:00.\");\n}"
  },
  {
    "intent": "Record any new item saved to Pocket with the title, URL, excerpt, image URL, tags, and added date, and upload it to Unforgettable Me as a JSON body with an augmenter name \"PocketItem\" including start_date and end_date fields set to the current date.",
    "filter_code": "var currentDate = new Date();\nvar startDate = currentDate.toISOString().split('T')[0];\nvar endDate = startDate;\n\nvar pocketItem = {\n  \"title\": Pocket.newItemAddedPocket.Title,\n  \"url\": Pocket.newItemAddedPocket.Url,\n  \"excerpt\": Pocket.newItemAddedPocket.Excerpt,\n  \"image_url\": Pocket.newItemAddedPocket.ImageUrl,\n  \"tags\": Pocket.newItemAddedPocket.Tags,\n  \"added_at\": Pocket.newItemAddedPocket.AddedAt,\n  \"start_date\": startDate,\n  \"end_date\": endDate\n};\n\nvar pocketItemJson = JSON.stringify(pocketItem);\n\nUnforgettableMe.uploadData.setBody(pocketItemJson);\nUnforgettableMe.uploadData.setAugmenterName(\"PocketItem\");"
  },
  {
    "intent": "When a new photo is uploaded to the Facebook Page named \"My Personal Page\" with a caption containing the keyword \"vacation\", automatically save a copy of the photo to a Dropbox folder named \"Facebook Photos/2024 Vacations\" using the photo's original filename and the full-sized image source URL.",
    "filter_code": "if (FacebookPages.newPhotoFromPage.PageName === \"My Personal Page\" && FacebookPages.newPhotoFromPage.Caption.toLowerCase().includes(\"vacation\")) {\n  Dropbox.addFileFromUrl.setUrl(FacebookPages.newPhotoFromPage.ImageSource);\n  Dropbox.addFileFromUrl.setFilename(null); // Use the original filename\n  Dropbox.addFileFromUrl.setPath(\"Facebook Photos/2024 Vacations\");\n} else {\n  Dropbox.addFileFromUrl.skip(\"Does not match the specified page or caption criteria.\");\n}"
  },
  {
    "intent": "Save articles from The New York Times to Instapaper when they match the search term \"climate change\" and are published in the section \"World News\" with keywords including \"global warming\" or \"sustainability\", and save them to the folder \"News\" with the tags \"Environment\" and \"Science\".",
    "filter_code": "if (Nytimes.newArticleMatchingSearch.Section === \"World News\"\n    && Nytimes.newArticleMatchingSearch.Keywords.includes(\"global warming\")\n    && (Nytimes.newArticleMatchingSearch.Keywords.includes(\"sustainability\")\n        || Nytimes.newArticleMatchingSearch.Title.includes(\"climate change\"))\n    && Nytimes.newArticleMatchingSearch.term === \"climate change\") {\n  Instapaper.saveItem.setUrl(Nytimes.newArticleMatchingSearch.ArticleUrl);\n  Instapaper.saveItem.setTitle(Nytimes.newArticleMatchingSearch.Title);\n  Instapaper.saveItem.setDescription(Nytimes.newArticleMatchingSearch.Blurb);\n} else {\n  Instapaper.saveItem.skip(\"Article does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the current air quality index (AQI) in New York is 50 or higher, append a new row to a Google Spreadsheet named \"Air Quality Log\" with the formatted row containing the location \"New York\", the current AQI value, and the date and time of the reading, and save this spreadsheet in the Drive folder path \"Environmental Data/Air Quality\".",
    "filter_code": "if (Kaiterra.locationAqi.Aqi >= 50 && Kaiterra.locationAqi.Location === \"New York\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Air Quality Log\");\n  var formattedRow = \"New York|||\" + Kaiterra.locationAqi.Aqi + \"|||\" + Kaiterra.locationAqi.CreatedAt;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Environmental Data/Air Quality\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"AQI is below 50 or location is not New York.\");\n}"
  },
  {
    "intent": "Start the dryer located in the living room with the program set to 'Cotton' and drying target 'Extra Dry' when the electricity price is cheap, specifically below 150 DKK per kWh, in the West Denmark region, between 07:00 and 19:00.",
    "filter_code": "if (TrueEnergyDK.electricityPriceCheap.Price < 150 &&\n    TrueEnergyDK.electricityPriceCheap.Region === \"West Denmark\" &&\n    Meta.currentUserTime.hour() >= 7 &&\n    Meta.currentUserTime.hour() <= 19) {\n  HcDryer.dryerStartProgram.setHaId(\"living_room_dryer\");\n  HcDryer.dryerStartProgram.setProgram(\"Cotton\");\n  HcDryer.dryerStartProgram.setDryingTarget(\"Extra Dry\");\n} else {\n  HcDryer.dryerStartProgram.skip(\"Electricity price is not cheap or outside of desired time frame.\");\n}"
  },
  {
    "intent": "When the sunset at New York occurs, and the current temperature is 18 degrees Celsius with a condition of Sunny, turn on all Philips Hue bulbs in the living room.",
    "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  PhilipsHue.turnOnAllHue.setLights(\"Living Room\");\n}"
  },
  {
    "intent": "Save new Flickr photos titled like \"Summer Vacation\" and described as \"Taken at the beach\" to a Google Drive folder named \"Flickr Photos\" at the path \"Photos/Vacations\", using the largest available image file source URL.",
    "filter_code": "if (Flickr.anyNewPublicPhoto.Title === \"Summer Vacation\" && Flickr.anyNewPublicPhoto.Description === \"Taken at the beach\") {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setUrl(Flickr.anyNewPublicPhoto.SourceUrl);\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setFilename(Flickr.anyNewPublicPhoto.Title + \".jpg\");\n  GoogleDrive.uploadFileFromUrlGoogleDrive.setPath(\"Photos/Vacations\");\n} else {\n  GoogleDrive.uploadFileFromUrlGoogleDrive.skip(\"Photo does not match the specified title and description.\");\n}"
  },
  {
    "intent": "Turn on my WeMo Light Switch located in the living room at sunset every day when the outside temperature is above 18 degrees Celsius and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  WemoLightSwitch.attributeLsOnDiscrete.set(\"on\");\n} else {\n  WemoLightSwitch.attributeLsOnDiscrete.skip(\"Temperature is not above 18°C or condition is not Sunny.\");\n}"
  },
  {
    "intent": "When a new photo is posted on Instagram with the caption containing the keyword \"newpost\" and the photo is taken between 08:00 and 18:00, upload the photo to the Facebook Page's album named \"Instagram Photos\" with the message \"Check out my latest Instagram post!\".",
    "filter_code": "var hour = new Date(Instagram.anyNewPhotoByYou.CreatedAt).getHours();\nif (hour >= 8 && hour <= 18 && Instagram.anyNewPhotoByYou.Caption.includes(\"newpost\")) {\n  FacebookPages.createPhotoPage.setAlbum(\"Instagram Photos\");\n  FacebookPages.createPhotoPage.setMessage(\"Check out my latest Instagram post!\");\n  FacebookPages.createPhotoPage.setPhotoUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n} else {\n  FacebookPages.createPhotoPage.skip(\"Does not match the specified conditions.\");\n}"
  },
  {
    "intent": "When a new photo is posted to my Tumblr Tumblelog named \"staff\" with the tag \"Sky\", automatically upload the full-size image from the URL https://64.media.tumblr.com/fd654c32f041cb02c757b5646c1cf9e1/a4c5782524284f82-d5/s1280x1920/8e97caae5a975889b3e170e42ea064b68410300a.jpg to a Dropbox folder named \"Tumblr_Backups\" with the filename \"staff_sky_photo\" if the post body text contains the word \"backup\".",
    "filter_code": "if (Tumblr.newPhotoPost.Tumblelog === \"staff\" && Tumblr.newPhotoPost.PostTags.includes(\"Sky\") && Tumblr.newPhotoPost.PostBodyText.includes(\"backup\")) {\n  Dropbox.addFileFromUrl.setUrl(Tumblr.newPhotoPost.FullImageUrl);\n  Dropbox.addFileFromUrl.setFilename(\"staff_sky_photo\");\n  Dropbox.addFileFromUrl.setPath(\"Tumblr_Backups\");\n} else {\n  Dropbox.addFileFromUrl.skip(\"Conditions not met for uploading photo to Dropbox.\");\n}"
  },
  {
    "intent": "When my Roomba named Living Room Cleaner completes a cleaning job of at least 900 square feet, blink all the Philips Hue lights in the living room.",
    "filter_code": "if (Irobot.missionReport.SquareFootage >= 900 && Irobot.missionReport.RobotName === \"Living Room Cleaner\") {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Conditions not met for blinking lights.\");\n}"
  },
  {
    "intent": "Turn on the living room WiZ lights to a warm white mode with 75% brightness 15 minutes before sunset when the current weather condition is Sunny and the temperature is above 18°C.",
    "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar fifteenMinutesBeforeSunset = new Date(sunsetTime.getTime() - 15 * 60 * 1000);\nvar currentTime = new Date();\nif (currentTime >= fifteenMinutesBeforeSunset && Weather.sunSets.Condition === \"Sunny\" && parseFloat(Weather.sunSets.TempCelsius) > 18) {\n  Wiz.turnOn.setEntity(\"living room\");\n  Wiz.turnOn.setMode(\"warm white\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the sunset at New York occurs and the temperature is above 65°F, turn on my Living Room WeMo Smart Plug.",
    "filter_code": "if (Weather.sunSets.SunsetAt !== null && Weather.sunSets.TempFahrenheit > 65) {\n  WemoSwitch.attributeSocketToggleDiscrete.setMacaddress(\"Living Room\");\n} else {\n  WemoSwitch.attributeSocketToggleDiscrete.skip(\"Conditions not met to turn on the WeMo Smart Plug.\");\n}"
  },
  {
    "intent": "When a new note is created in the \"Personal\" notebook on Evernote with the tags \"important, todo\" and containing the keyword \"meeting\", create a new card on the Trello board \"Work Tasks\" in the list \"To-Do\" at the top position, with the note title as the card title, the note body HTML as the card description, and assign it to members @johnDoe and @janeDoe, applying the labels \"Urgent\" and \"High Priority\", and attach the note's public URL as a photo.",
    "filter_code": "if (Evernote.newNoteInNotebook.Notebook === \"Personal\"\n    && Evernote.newNoteInNotebook.Tags.includes(\"important\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"todo\")\n    && (Evernote.newNoteInNotebook.Title.includes(\"meeting\") || Evernote.newNoteInNotebook.BodyHTML.includes(\"meeting\"))) {\n  Trello.createCard.setBoard(\"Work Tasks\");\n  Trello.createCard.setListName(\"To-Do\");\n  Trello.createCard.setPos(\"top\");\n  Trello.createCard.setTitle(Evernote.newNoteInNotebook.Title);\n  Trello.createCard.setDescription(Evernote.newNoteInNotebook.BodyHTML);\n  Trello.createCard.setMembers(\"@johnDoe, @janeDoe\");\n  Trello.createCard.setLabels(\"Urgent, High Priority\");\n  Trello.createCard.setUrl(Evernote.newNoteInNotebook.PublicUrl);\n} else {\n  Trello.createCard.skip(\"Note does not match the specified criteria.\");\n}"
  },
  {
    "intent": "Mute my Android device and trigger a quick vibration every time I get into bed, as detected by Tom's Withings Sleep sensor, between 22:00 and 07:00, and send a notification with a vibration pattern.",
    "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nvar deviceUser = WithingsSleep.bedin.DeviceUser;\nif (deviceUser === \"Tom\" && (hour >= 22 || hour < 7)) {\n  AndroidDevice.muteDevice.setVibrate(\"pattern\");\n} else {\n  AndroidDevice.muteDevice.skip(\"Not Tom's device or outside of bed time\");\n}"
  },
  {
    "intent": "Turn off the living room WiZ lamp 10 minutes before sunrise when the current weather condition is Sunny and the temperature is above 18 degrees Celsius.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar tenMinutesBeforeSunrise = new Date(sunriseTime.getTime() - 10 * 60 * 1000);\nvar currentTime = new Date();\nvar currentCondition = Weather.sunRises.Condition;\nvar currentTempCelsius = Weather.sunRises.TempCelsius;\n\nif (currentTime >= tenMinutesBeforeSunrise &&\n    currentCondition === \"Sunny\" &&\n    currentTempCelsius > 18) {\n  Wiz.turnOff.skip(\"Turning off the living room WiZ lamp 10 minutes before sunrise.\");\n}"
  },
  {
    "intent": "When Tom's Withings Sleep detects that he gets into bed between 22:00 and 23:59, log the date and time (in ISO8601 format) in a new row of the Google Spreadsheet named \"Sleep Tracker\", with the formatted row containing the values \"Date|||Time|||Device User\" where Date is the current date (e.g., 2020-07-08), Time is the current time (e.g., 22:45), and Device User is Tom, in the folder path \"Health/Withings Data\".",
    "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nvar minute = WithingsSleep.bedin.DateandTime.minute();\nif (hour === 22 || (hour === 23 && minute <= 59)) {\n  if (WithingsSleep.bedin.DeviceUser === \"Tom\") {\n    var date = WithingsSleep.bedin.DateandTime.date();\n    var time = WithingsSleep.bedin.DateandTime.time();\n    GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Sleep Tracker\");\n    GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Health/Withings Data\");\n    GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(date + \"|||\" + time + \"|||Tom\");\n  } else {\n    GoogleSheets.appendToGoogleSpreadsheet.skip(\"Device user is not Tom.\");\n  }\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Not between 22:00 and 23:59.\");\n}"
  },
  {
    "intent": "Every time Tom's Nokia Sleep detects you get out of bed between 07:00 and 22:00, the date and time will be logged in a row of a Google Spreadsheet named \"Sleep Patterns\" with a formatted row containing the date, time, and device user, and saved in the \"Health Tracking\" folder.",
    "filter_code": "var hour = WithingsSleep.bedout.DateandTime.hour();\nif (hour >= 7 && hour < 22) {\n  var filename = \"Sleep Patterns\";\n  var formattedRow = WithingsSleep.bedout.DateandTime + \"|||\" + WithingsSleep.bedout.DeviceUser;\n  var path = \"Health Tracking\";\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(filename);\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(path);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Outside of logging hours (7 AM to 10 PM).\");\n}"
  },
  {
    "intent": "When a new file named like \"document_2023\" is added to the \"/Office/Documents\" subfolder in Dropbox, automatically download it from its public URL to the \"Shared/Downloads\" folder on your QNAP device, naming the file as \"document_2023.pdf\" without needing any further extension.",
    "filter_code": "if (Dropbox.newFileInFolder.FilenameNoExt === \"document_2023\" && Dropbox.newFileInFolder.path === \"/Office/Documents\") {\n  Qnap.downloadFileFromUrl.setFileUrl(Dropbox.newFileInFolder.FileUrl);\n  Qnap.downloadFileFromUrl.setFileName(\"document_2023.pdf\");\n  Qnap.downloadFileFromUrl.setFolderPath(\"Shared/Downloads\");\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Filename or path does not match.\");\n}"
  },
  {
    "intent": "When the message \"#partymode\" is sent by anyone to the \"@IFTTT\" bot in the \"Friends Chat\" Telegram group, and the message is received between 18:00 and 23:00, then start a color loop on all Philips Hue lights in the living room.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Telegram.newGroupTextFilter.GroupTitle === \"Friends Chat\" &&\n    Telegram.newGroupTextFilter.Text.includes(\"#partymode\") &&\n    hour >= 18 && hour <= 23) {\n  Hue.setColorAllHue.skip(\"Starting party mode\");\n  Hue.setColorAllHue.setColor(\"colorloop\");\n} else {\n  Hue.setColorAllHue.skip(\"Not starting party mode\");\n}"
  },
  {
    "intent": "Create a new Google Doc named \"New Note from Evernote\" in the folder \"IFTTT/Evernote/Notes\" on Google Drive whenever a new note titled \"Meeting Notes\" with tags \"urgent, meeting\" is created in the \"Work\" notebook on Evernote, and include the note's body HTML content.",
    "filter_code": "if (Evernote.newNoteInNotebook.Title === \"Meeting Notes\" && Evernote.newNoteInNotebook.Tags.includes(\"urgent\") && Evernote.newNoteInNotebook.Tags.includes(\"meeting\") && Evernote.newNoteInNotebook.notebook === \"Work\") {\n  GoogleDocs.createGoogleDoc.setFilename(\"New Note from Evernote\");\n  GoogleDocs.createGoogleDoc.setBody(Evernote.newNoteInNotebook.BodyHTML);\n  GoogleDocs.createGoogleDoc.setPath(\"IFTTT/Evernote/Notes\");\n} else {\n  GoogleDocs.createGoogleDoc.skip(\"Note does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the noise level at my Netatmo Weather Station, named \"My Home - Indoor station\", rises above 60 decibels, activate a color loop on all my Philips Hue lights in the living room, setting them to a vibrant orange color, #FFA07A.",
    "filter_code": "if (Netatmo.noiseRisesAbove.MeasuredNoiseLevel > Netatmo.noiseRisesAbove.TargetNoiseLevel && Netatmo.noiseRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.noiseRisesAbove.TargetNoiseLevel == 60) {\n  if (Hue.setColorAllHue.lights !== \"living room\") {\n    Hue.setColorAllHue.skip(\"Lights are not in the living room.\");\n  } else {\n    Hue.setColorAllHue.setColor(\"#FFA07A\");\n  }\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp BroadLink device when the sun sets in New York, if the current temperature is above 18 degrees Celsius and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  Broadlink.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  Broadlink.powerState.skip(\"Conditions not met to turn on the device.\");\n}"
  },
  {
    "intent": "When a new card titled \"Book Flight\" is added to the list \"To dos\" on the Trello board \"New Zealand Trip\" by John Smith, create a new task in Todoist with the project set to \"Personal\", task content as \"Book flight to New Zealand\", note as \"Check various airline websites for deals\", due date as \"today\", and priority as \"High\".",
    "filter_code": "if (Trello.cardAddedToList.Title === \"Book Flight\" && Trello.cardAddedToList.ListName === \"To dos\" && Trello.cardAddedToList.BoardName === \"New Zealand Trip\" && Trello.cardAddedToList.CreatorFullName === \"John Smith\") {\n  Todoist.createTask.setProject(\"Personal\");\n  Todoist.createTask.setTaskContent(\"Book flight to New Zealand\");\n  Todoist.createTask.setNote(\"Check various airline websites for deals\");\n  Todoist.createTask.setDueDate(\"today\");\n  Todoist.createTask.setPriority(\"High\");\n} else {\n  Todoist.createTask.skip(\"Card does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When my iRobot Roomba named \"Kitchen Cleaner\" starts cleaning at any time, turn up the volume on my Sonos speaker in the \"Living Room\" and include all grouped rooms.",
    "filter_code": "if (Irobot.robotStart.RobotName === \"Kitchen Cleaner\") {\n  Sonos.increaseVolume.setRoom(\"Living Room\");\n  Sonos.increaseVolume.setIncludeGroupedRooms(\"true\");\n  Sonos.increaseVolume.skip();\n}"
  },
  {
    "intent": "When you press the Button widget at a location like 37.8267, -122.4230, turn on the Home Connect coffee machine named \"MyMorningBrew\" and run the rinsing program.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcCoffeeMachine.coffeeMakerTurnOn.setHaId(\"MyMorningBrew\");\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When the battery of your Google Pixel 7 drops below 15%, send a text message with the content \"Low Battery: Plug in your device\" to phone number +1234567890.",
    "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage < 15 && AndroidBattery.batteryLow.DeviceName === \"Google Pixel 7\") {\n  AndroidMessages.sendAMessage.setText(\"Low Battery: Plug in your device\");\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Battery level is not below 15% or device is not Google Pixel 7\");\n}"
  },
  {
    "intent": "When a new track is added to the \"Party Mix\" playlist on Spotify by any user, change the color of all Philips Hue lights in the \"Living Room\" group to a vibrant orange color (#FFA07A).",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Party Mix\") {\n  Hue.setColorAllHue.skip(null);\n  Hue.setColorAllHue.setColor(\"#FFA07A\");\n} else {\n  Hue.setColorAllHue.skip(\"Playlist is not 'Party Mix'\");\n}"
  },
  {
    "intent": "When the Twitch channel \"Ninja\" starts streaming a game of \"Fortnite\", turn all the lights in the living room to purple.",
    "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"Ninja\" && Twitch.streamGoingLiveForChannelYouFollow.Game === \"Fortnite\") {\n  Hue.setColorAllHue.setColor(\"purple\");\n} else {\n  Hue.setColorAllHue.skip(\"Condition not met: Channel is not 'Ninja' or game is not 'Fortnite'.\");\n}"
  },
  {
    "intent": "When the \"Front Door\" is opened, as detected by the abode sensor, record a 30-second video clip using the \"Living Room Camera\" on Arlo.",
    "filter_code": "if (Abode.doorOpened.DoorName === \"Front Door\") {\n  Arlo.record.setDeviceName(\"Living Room Camera\");\n  Arlo.record.setDuration(30);\n} else {\n  Arlo.record.skip(\"Not the Front Door\");\n}"
  },
  {
    "intent": "When you upload a new video to Instagram with the caption containing \"#IFTTT\" and it's between 07:00 and 19:00, automatically download the video file from the URL http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4 to the QNAP device in the shared folder \"MyVideos\" with the file name \"instagram_video_123\" and subfolder path \"videos/2023\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var caption = Instagram.newVideoByYouTaggedInstagram.Caption;\n  if (caption.includes(\"#IFTTT\")) {\n    Qnap.downloadFileFromUrl.setFileUrl(\"http://distilleryimage7.s3.amazonaws.com/a15ba0acddd011e2a9ea22000ae81462_101.mp4\");\n    Qnap.downloadFileFromUrl.setFileName(\"instagram_video_123\");\n    Qnap.downloadFileFromUrl.setFolderPath(\"videos/2023\");\n    Qnap.downloadFileFromUrl.setOptionSharedFolder(\"MyVideos\");\n  } else {\n    Qnap.downloadFileFromUrl.skip(\"Caption does not contain #IFTTT.\");\n  }\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Turn off the porch lights when the sunrise is at 6:00 AM and the current temperature is above 64°F, using the Futurehome device named \"Porch Lights\".",
    "filter_code": "var sunriseHour = new Date(Weather.sunRises.SunriseAt).getHours();\nvar currentTempF = parseFloat(Weather.sunRises.TempFahrenheit);\nif (sunriseHour === 6 && currentTempF > 64) {\n  Futurehome.powerOff.setDevice(\"Porch Lights\");\n} else {\n  Futurehome.powerOff.skip(\"Sunrise not at 6:00 AM or temperature not above 64°F.\");\n}"
  },
  {
    "intent": "Turn on the outside light at my home in New York when the sun sets when the current temperature is 68 degrees Fahrenheit and the weather condition is partly cloudy.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"68\" && Weather.sunSets.Condition === \"Partly Cloudy\") {\n  Futurehome.powerOn.setDevice(\"Outside light\");\n} else {\n  Futurehome.powerOn.skip(\"Temperature or weather condition does not match.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp BroadLink device when the sun rises in New York City and the current temperature is above 18 degrees Celsius.",
    "filter_code": "if (Weather.sunRises.TempCelsius > 18) {\n  Broadlink.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  Broadlink.powerState.skip(\"Temperature is not above 18 degrees Celsius.\");\n}"
  },
  {
    "intent": "When the sunset at your location is within 15 minutes and the current temperature is above 18 degrees Celsius, switch on the Living Room Dimmer light.",
    "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar currentTime = new Date();\nvar fifteenMinutesBeforeSunset = new Date(sunsetTime.getTime() - 15 * 60 * 1000);\nvar temperature = Weather.sunSets.TempCelsius;\n\nif (currentTime >= fifteenMinutesBeforeSunset && currentTime <= sunsetTime && temperature > 18) {\n  LightwaverfLighting.switchOnLight.setWhichLight(\"Living Room Dimmer\");\n} else {\n  LightwaverfLighting.switchOnLight.skip(\"Conditions not met to switch on the light.\");\n}"
  },
  {
    "intent": "When the battery percentage of my Google Pixel 7 falls below 15%, send a Signal to my Das Keyboard named \"Low Battery Alert\" with the message \"Charge your phone\" and set the zone to the numeric keypad, color to red, effect to blink, and device to Office Keyboard.",
    "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage < 15 && AndroidBattery.batteryLow.DeviceName === \"Google Pixel 7\") {\n  Daskeyboardq.signals.setName(\"Low Battery Alert\");\n  Daskeyboardq.signals.setMessage(\"Charge your phone\");\n  Daskeyboardq.signals.setZone(\"numeric keypad\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setEffect(\"blink\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Battery percentage is not below 15% or device is not Google Pixel 7\");\n}"
  },
  {
    "intent": "When the sun sets at your location, with a temperature of 18°C and a condition of Sunny, turn on channel 1 of your eWeLink 4 Channels Switch.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Ewelink.switches4Action.setSwitches4Query(\"Your 4-Channel Switch\");\n  Ewelink.switches4Action.setSwitches4OutletQuery(\"Channel 1\");\n  Ewelink.switches4Action.setOnoffActQuery(\"Turn on\");\n} else {\n  Ewelink.switches4Action.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the temperature in New York is above 75°F, change the color of the top-left key on your Das Keyboard to red.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Daskeyboardq.signals.setName(\"High Temperature\");\n  Daskeyboardq.signals.setZone(\"Top-left key\");\n  Daskeyboardq.signals.setColor(\"Red\");\n} else {\n  Daskeyboardq.signals.skip(\"Temperature in New York is not above 75°F.\");\n}"
  },
  {
    "intent": "Whenever you upload a new photo on Instagram with a caption containing the keyword \"vacation\", download the image file from its source URL to the QNAP device in the shared folder named \"Photos\" and subfolder \"2024 Vacations\", and save it as \"Instagram_Photo_YYYYMMDD_HHMMSS.jpg\" where YYYYMMDD_HHMMSS represents the date and time the photo was taken.",
    "filter_code": "if (Instagram.anyNewPhotoByYou.Caption.includes(\"vacation\")) {\n  var fileName = \"Instagram_Photo_\" + Instagram.anyNewPhotoByYou.CreatedAt.replace(\" at \", \"_\").replace(\",\", \"\").replace(\":\", \"\") + \".jpg\";\n  Qnap.downloadFileFromUrl.setFileUrl(Instagram.anyNewPhotoByYou.SourceUrl);\n  Qnap.downloadFileFromUrl.setFileName(fileName);\n  Qnap.downloadFileFromUrl.setFolderPath(\"Photos/2024 Vacations\");\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Caption does not contain 'vacation'.\");\n}"
  },
  {
    "intent": "When the battery of my Google Pixel 7 drops below 15%, change the color of my Nanoleaf Aurora to Red (#FF0000) at 07:00 to remind me to plug it in and charge.",
    "filter_code": "if (AndroidBattery.batteryLow.BatteryPercentage < 15 && AndroidBattery.batteryLow.DeviceName === \"Google Pixel 7\" && Meta.currentUserTime.hour() === 7) {\n  Nanoleaf.changeColorRequest.setValue(\"Red\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "When a new post titled \"Launch Day!\" is published on my WordPress blog at http://blog.ifttt.com/coming-soon, with the tags \"neato, really cool\" and containing the image http://ifttt.com/images/no_image_card.png, automatically submit it as a link post to the r/technology subreddit on Reddit.",
    "filter_code": "if (Wordpress.anyNewPostWp.PostTitle === \"Launch Day!\"\n    && Wordpress.anyNewPostWp.PostUrl === \"http://blog.ifttt.com/coming-soon\"\n    && Wordpress.anyNewPostWp.TagsAndCategories === \"neato, really cool\"\n    && Wordpress.anyNewPostWp.PostImageUrl === \"http://ifttt.com/images/no_image_card.png\") {\n  Reddit.submitLinkReddit.setTitle(Wordpress.anyNewPostWp.PostTitle);\n  Reddit.submitLinkReddit.setLink(Wordpress.anyNewPostWp.PostUrl);\n  Reddit.submitLinkReddit.setSubreddit(\"technology\");\n} else {\n  Reddit.submitLinkReddit.skip(\"Post does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new submission is received from form 1234567890, specifically the \"My Contact Form\" with an IP address of 192.168.0.100 and where the question filter is set to \"Email\", append the filtered rich text data in a tabulated HTML format to a Google Sheets spreadsheet named \"Contact Submissions\" with a formatted row that includes \"Name|||Email|||Message\" and save it to the \"Submissions/2023\" folder.",
    "filter_code": "if (Jotform.latestFormSubmission.FormID === \"1234567890\" &&\n    Jotform.latestFormSubmission.FormTitle === \"My Contact Form\" &&\n    Jotform.latestFormSubmission.IP === \"192.168.0.100\" &&\n    Jotform.latestFormSubmission.question_filter === \"Email\") {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Contact Submissions\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(\"Name|||Email|||Message\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Submissions/2023\");\n  GoogleSheets.appendToGoogleSpreadsheet.skip(null);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the current temperature in New York drops below 5°C, turn on the WiZ light in the Living Room to turquoise at 50% brightness.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  Wiz.turnOn.setMode(\"turquoise\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Temperature in New York is not below 5°C.\");\n}"
  },
  {
    "intent": "When the Wyze Cam named \"Living Room Camera\" detects a smoke alarm ringing, send the fire department to 123 Main Street, Apt 101, New York, NY 10001.",
    "filter_code": "if (Wyzecam.smokeTrigger.SmokeDetected && Wyzecam.smokeTrigger.serialize_device_info === \"Living Room Camera\") {\n  Safetrek.alertAddress.setAddressLine1(\"123 Main Street\");\n  Safetrek.alertAddress.setAddressLine2(\"Apt 101\");\n  Safetrek.alertAddress.setCity(\"New York\");\n  Safetrek.alertAddress.setState(\"NY\");\n  Safetrek.alertAddress.setZip(\"10001\");\n} else {\n  Safetrek.alertAddress.skip(\"Smoke detected but device is not 'Living Room Camera' or address is not set.\");\n}"
  },
  {
    "intent": "When the current weather condition in New York changes to \"rain\" as reported by Weather Underground, turn on the WiZ light in the living room, setting it to blue mode with a brightness of 50%.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"rain\" && Weather.currentConditionIs.Location === \"New York\") {\n  Wiz.turnOn.setMode(\"blue\");\n  Wiz.turnOn.setDimming(\"50%\");\n  Wiz.turnOn.skip();\n} else {\n  Wiz.turnOn.skip(\"Current weather condition is not rain or location is not New York.\");\n}"
  },
  {
    "intent": "Close the garage door number 1 every day at 8:00 PM, but only if it is currently open, to ensure the garage remains secure overnight.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"8:00 PM\";\nif (currentTime === targetTime) {\n  var doorStatus = Gogogate.getDoorStatus(1);\n  if (doorStatus === \"open\") {\n    Gogogate.closeDoor.setDoorNumber(1);\n  } else {\n    Gogogate.closeDoor.skip(\"Door is already closed.\");\n  }\n}"
  },
  {
    "intent": "When the Twitch channel \"Ninja\" goes live and is streaming \"Fortnite\", send a notification to the \"Office Keyboard\" device on the Das Keyboard Q, setting the zone to \"Key 1\" with the color \"#FF0000\" and displaying the message \"Ninja is live on Twitch\" with a \"Breathe\" effect.",
    "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"Ninja\" && Twitch.streamGoingLiveForChannelYouFollow.Game === \"Fortnite\") {\n  Daskeyboardq.signals.setName(\"Ninja Live Notification\");\n  Daskeyboardq.signals.setZone(\"Key 1\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setMessage(\"Ninja is live on Twitch\");\n  Daskeyboardq.signals.setEffect(\"Breathe\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met for Ninja Fortnite stream\");\n}"
  },
  {
    "intent": "When a new track is added to the \"My Favorites\" playlist on Spotify, send a photo with a caption including the track name and artist to the \"#music-sharing\" chat on Telegram.",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"My Favorites\") {\n  var caption = `${Spotify.newTrackAddedToPlaylist.TrackName} by ${Spotify.newTrackAddedToPlaylist.ArtistName}`;\n  Telegram.sendPhoto.setCaption(caption);\n  Telegram.sendPhoto.setPhotoUrl(Spotify.newTrackAddedToPlaylist.AlbumCoverURL);\n  Telegram.sendPhoto.skip = false;\n} else {\n  Telegram.sendPhoto.skip(\"The track was not added to the 'My Favorites' playlist.\");\n}"
  },
  {
    "intent": "When the Google Pixel 7 is plugged into an AC power source and the battery percentage is below 80, at any time after 07:00 and before 22:00, set the Android device to mute with vibrate enabled.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (AndroidBattery.batteryPluggedIn.PowerSource === \"AC\" &&\n      parseInt(AndroidBattery.batteryPluggedIn.BatteryPercentage) < 80 &&\n      AndroidBattery.batteryPluggedIn.DeviceName === \"Google Pixel 7\") {\n    AndroidDevice.muteDevice.setVibrate(\"enabled\");\n  } else {\n    AndroidDevice.muteDevice.skip(\"Conditions not met.\");\n  }\n}"
  },
  {
    "intent": "Turn on the Philips Hue living room lights when the Futurehome mode is set to \"home\" between 17:00 and 22:00 at the \"Home\" site.",
    "filter_code": "var hour = new Date(Futurehome.modeSwitched.TriggeredAt).getHours();\nif (Futurehome.modeSwitched.Mode === \"home\" &&\n    Futurehome.modeSwitched.SiteName === \"Home\" &&\n    hour >= 17 && hour < 22) {\n  // No action to skip, but we need to turn on the lights\n  // Unfortunately, the provided API endpoint slug is for turning off the lights\n  // We assume there's another method like \"Hue.turnOnAllHue\" or a similar one\n  // Since it's not provided, let's comment out what should be done instead of skipping\n  // Hue.turnOnLivingRoomLights(); // This line should be uncommented if available\n} else {\n  PhilipsHue.turnOffAllHue.skip(\"Conditions not met to turn on the living room lights.\");\n}"
  },
  {
    "intent": "When a call from an unknown number, like 14155551234, is missed on my Google Pixel 7 at any time, add a task to Remember The Milk with the name \"Follow up with unknown caller 14155551234\" to remind me to return the call.",
    "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"\" && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\" && AndroidPhone.missAPhoneCall.FromNumber === \"14155551234\") {\n  Rememberthemilk.tasksAdd.setTask(\"Follow up with unknown caller \" + AndroidPhone.missAPhoneCall.FromNumber);\n} else {\n  Rememberthemilk.tasksAdd.skip(\"Not a call from an unknown number on the Google Pixel 7.\");\n}"
  },
  {
    "intent": "If the current temperature in New York exceeds 75 degrees Fahrenheit, then turn on the living room WiZ light to orange at 80% brightness.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  Wiz.turnOn.setMode(\"orange\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"Temperature in New York is not above 75 degrees Fahrenheit.\");\n}"
  },
  {
    "intent": "When I post a new video on Instagram with the caption containing the hashtag #IFTTT and the tag \"newvideo\", add the video's short URL to my Buffer Queue as a new update with the message \"Check out my latest Instagram video: http://instagr.am/p/CTGBw/\".",
    "filter_code": "if (Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"#IFTTT\") && Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"newvideo\")) {\n  Buffer.addToBuffer.setMessage(\"Check out my latest Instagram video: \" + Instagram.newVideoByYouTaggedInstagram.URL);\n} else {\n  Buffer.addToBuffer.skip(\"The caption does not contain #IFTTT and the tag 'newvideo'.\");\n}"
  },
  {
    "intent": "When the radon level from my Airthings device named \"Home - Living Room\" exceeds 150 Bq/m3, briefly blink all Philips Hue lights in the living room.",
    "filter_code": "if (Airthings.radonAbove.RadonLevel > 150 && Airthings.radonAbove.MeasurementUnit === \"Bq/m3\" && Airthings.radonAbove.Device === \"Home - Living Room\") {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Radon level is within safe limits or device/unit does not match.\");\n}"
  },
  {
    "intent": "When a call from an unknown number, like 14155551234, is missed on my Google Pixel 7 at any time, add a task to Remember The Milk with the name \"Follow up with unknown caller 14155551234\" to remind me to return the call.",
    "filter_code": "if (AndroidPhone.missAPhoneCall.ContactName === \"\" && AndroidPhone.missAPhoneCall.FromNumber === \"14155551234\" && AndroidPhone.missAPhoneCall.DeviceName === \"Google Pixel 7\") {\n  Rememberthemilk.tasksAdd.setTask(\"Follow up with unknown caller \" + AndroidPhone.missAPhoneCall.FromNumber);\n} else {\n  Rememberthemilk.tasksAdd.skip(\"Not a call from unknown number 14155551234 on Google Pixel 7.\");\n}"
  },
  {
    "intent": "If the current temperature in New York exceeds 75 degrees Fahrenheit, then turn on the living room WiZ light to orange at 80% brightness.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  Wiz.turnOn.setMode(\"orange\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"Temperature in New York is not above 75 degrees Fahrenheit.\");\n}"
  },
  {
    "intent": "When I post a new video on Instagram with the caption containing the hashtag #IFTTT and the tag \"newvideo\", add the video's short URL to my Buffer Queue as a new update with the message \"Check out my latest Instagram video: http://instagr.am/p/CTGBw/\".",
    "filter_code": "if (Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"#IFTTT\") && Instagram.newVideoByYouTaggedInstagram.Caption.includes(\"newvideo\")) {\n  Buffer.addToBuffer.setMessage(\"Check out my latest Instagram video: \" + Instagram.newVideoByYouTaggedInstagram.URL);\n} else {\n  Buffer.addToBuffer.skip(\"The caption does not contain #IFTTT or the tag 'newvideo'.\");\n}"
  },
  {
    "intent": "When the radon level from my Airthings device named \"Home - Living Room\" exceeds 150 Bq/m3, briefly blink all Philips Hue lights in the living room.",
    "filter_code": "if (Airthings.radonAbove.RadonLevel > 150 && Airthings.radonAbove.MeasurementUnit === \"Bq/m3\" && Airthings.radonAbove.Device === \"Home - Living Room\") {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Radon level is below threshold or device/unit does not match.\");\n}"
  },
  {
    "intent": "When the Home Connect washer, labeled as \"Laundry Room Washer\", finishes its cycle, Homey, specifically the \"Living Room Homey\" device, will speak the text \"The laundry is done\".",
    "filter_code": "if (HcWasher.ha_id === \"Laundry Room Washer\") {\n  Homey.letHomeySpeak.setWhatText(\"The laundry is done\");\n  Homey.letHomeySpeak.skip(null);\n} else {\n  Homey.letHomeySpeak.skip(\"Not the intended washer.\");\n}"
  },
  {
    "intent": "When a motion detection event with the text \"Motion Tag: Detected!\" is triggered at any time, press the SwitchBoth device on SwitchBot.",
    "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  Switchbot.pressBot.setChoseADevice(\"SwitchBoth\");\n} else {\n  Switchbot.pressBot.skip(\"Motion detection event text does not match.\");\n}"
  },
  {
    "intent": "When a new item titled \"My Weekly News\" with the URL \"http://news.ifttt.com\" and tags \"news, weekly\" is saved in Pocket at 8:00 AM, add a task named \"Read My Weekly News at 7:00 PM today #reading\" to Remember The Milk.",
    "filter_code": "if (Pocket.newItemAddedPocket.Title === \"My Weekly News\" &&\n    Pocket.newItemAddedPocket.Url === \"http://news.ifttt.com\" &&\n    Pocket.newItemAddedPocket.Tags === \"news, weekly\" &&\n    Meta.currentUserTime.hour() === 8) {\n  Rememberthemilk.tasksAdd.setTask(\"Read My Weekly News at 7:00 PM today #reading\");\n} else {\n  Rememberthemilk.tasksAdd.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new Trello card is assigned to me on the \"New Zealand Trip\" board, specifically in the \"To dos\" list, and the card's title contains the keyword \"URGENT\", send a signal to my Das Keyboard device named \"Office Desk Keyboard\", setting the zone to the numeric keypad, coloring it red, and displaying the message \"New urgent task assigned: Weigh suitcases before leaving for airport\" with a breathing effect.",
    "filter_code": "if (Trello.cardAssignedToMe.BoardName === \"New Zealand Trip\" && Trello.cardAssignedToMe.ListName === \"To dos\" && Trello.cardAssignedToMe.Title.includes(\"URGENT\")) {\n  Daskeyboardq.signals.setName(\"Office Desk Keyboard\");\n  Daskeyboardq.signals.setZone(\"Numeric Keypad\");\n  Daskeyboardq.signals.setColor(\"Red\");\n  Daskeyboardq.signals.setMessage(\"New urgent task assigned: \" + Trello.cardAssignedToMe.Title);\n  Daskeyboardq.signals.setEffect(\"Breathing\");\n} else {\n  Daskeyboardq.signals.skip(\"Card does not match the specified conditions.\");\n}"
  },
  {
    "intent": "Append new Reddit posts from the \"programming\" subreddit to the \"social_media_posts\" stream in the \"my_social_media_dataset\" dataset on data.world, where the post contains the keyword \"python\" and was posted after 12:00 PM, with a record including the post title, author, content, and image URL.",
    "filter_code": "const post = (Reddit.newPostFromSearchReddit as any);\nif (post.Subreddit === \"programming\" && post.PostedAt.includes(\"PM\") && post.Content.includes(\"python\")) {\n  const pairs = [\n    \"title||\" + post.Title,\n    \"author||\" + post.Author,\n    \"content||\" + post.Content,\n    \"image_url||\" + post.ImageURL\n  ];\n  Datadotworld.append.setStreamName(\"social_media_posts\");\n  Datadotworld.append.setDatasetKey(\"my_social_media_dataset\");\n  Datadotworld.append.setPayload(pairs.join(\"|||\"));\n} else {\n  Datadotworld.append.skip(\"Post does not match the filter criteria.\");\n}"
  },
  {
    "intent": "Turn on the WiZ lights in the Living Room to Wake-up mode at 75% brightness within 15 minutes of sunrise when the temperature is above 18°C and the weather condition is Sunny.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nvar fifteenMinutesAfterSunrise = new Date(sunriseTime.getTime() + 15 * 60 * 1000);\nvar currentTime = new Date();\nvar temperature = parseFloat(Weather.sunRises.TempCelsius);\nvar condition = Weather.sunRises.Condition;\n\nif (currentTime >= sunriseTime && currentTime <= fifteenMinutesAfterSunrise && temperature > 18 && condition === \"Sunny\") {\n  Wiz.turnOn.setMode(\"Wake-up\");\n  Wiz.turnOn.setDimming(\"75%\");\n  Wiz.turnOn.setEntity(\"Living Room\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When the temperature in New York rises above 25 degrees Celsius, close the Living Room blinds using Connector.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius > 25 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  DooyaConnector.closeBlinds.setWhichBlinds(\"Living Room\");\n} else {\n  DooyaConnector.closeBlinds.skip(\"Temperature in New York is not above 25 degrees Celsius or location does not match.\");\n}"
  },
  {
    "intent": "Turn off the TV using Logitech Harmony Remote when the mode is set to sleep at Home site, specifically when the mode switched to \"sleep\" between 22:00 and 07:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Futurehome.modeSwitched.Mode === \"sleep\" && Futurehome.modeSwitched.SiteName === \"Home\" && (hour >= 22 || hour < 7)) {\n  // No need to skip, this is the condition to turn off the TV\n} else {\n  Harmony.endActivity.skip(\"Mode or time does not match sleep mode at Home between 10 PM and 7 AM.\");\n}"
  },
  {
    "intent": "When the outside temperature rises above 75°F in New York, change the setpoint temperature of your GE Appliances Window AC to 68°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit > 75 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  GeAppliancesWac.wacSetTargetTemp.setSetTargetTemp(68);\n} else {\n  GeAppliancesWac.wacSetTargetTemp.skip(\"Outside temperature is not above 75°F or location is not New York.\");\n}"
  },
  {
    "intent": "Activate the output of your cloudBit device named \"Office CloudBit\" for 3 seconds when a motion detection event with the text \"Motion Tag: Detected!\" is triggered at any time.",
    "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\" && Littlebits.selectedDeviceId === \"Office CloudBit\") {\n  Littlebits.output.setDuration(3);\n} else {\n  Littlebits.output.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the living room lamp, which is connected to my eWeLink Smart Home 1-channel switch, at sunset when the outside temperature is 18 degrees Celsius and the condition is sunny.",
    "filter_code": "if (Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.lightSwitchAction.skip(\"Temperature or condition does not match.\");\n}"
  },
  {
    "intent": "When the humidity level in the Home - Living room device from Airthings exceeds 60%, briefly blink all Philips Hue lights.",
    "filter_code": "if (Airthings.humidityAbove.Device === \"Home - Living room\" && parseInt(Airthings.humidityAbove.Humidity) > 60) {\n  Hue.blinkAllHue();\n} else {\n  Hue.blinkAllHue.skip(\"Humidity level is below threshold or device does not match.\");\n}"
  },
  {
    "intent": "When it starts raining, as reported by my Netatmo Rain gauge named \"My Rain gauge\", send my Indego Connect to the dock.",
    "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  Indegoconnect.sendDock.skip(\"Rain has started, returning to dock.\");\n}"
  },
  {
    "intent": "Close the garage door number 1 every day at 8:00 PM, but only if it is currently open, to ensure the garage remains secure overnight.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar hour = currentTime.hour();\nvar minute = currentTime.minute();\n\nif (hour == 20 && minute == 0) {\n  var doorNumber = 1;\n  Gogogate.getDoorStatus(doorNumber, function(status) {\n    if (status === 'open') {\n      Gogogate.closeDoor.setDoorNumber(doorNumber);\n    } else {\n      Gogogate.closeDoor.skip('Garage door is already closed.');\n    }\n  });\n}"
  },
  {
    "intent": "When the temperature in New York drops below 5°C, send a Signal named \"Cold Weather\" with a red color to the Das Keyboard Q device, specifically to the center zone, displaying the message \"It's getting cold outside\" and applying a breathing effect.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 5 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  Daskeyboardq.signals.setName(\"Cold Weather\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"It's getting cold outside\");\n  Daskeyboardq.signals.setEffect(\"breathing\");\n  Daskeyboardq.signals.setDevice(\"Das Keyboard Q\");\n} else {\n  Daskeyboardq.signals.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "When a new note is created in the \"Personal\" notebook on Evernote with tags including \"urgent\" and \"todo\", create a task in Google Tasks on the \"Today\" task list, setting the task title to the note's title, such as \"Pick up groceries\", adding notes from the note's body HTML, like \"<p>Buy milk and eggs</p>\", and setting the due date to the note's creation time, for example, \"2023-03-15T14:30:00.000Z\".",
    "filter_code": "if (Evernote.newNoteInNotebook.Tags.includes(\"urgent\") && Evernote.newNoteInNotebook.Tags.includes(\"todo\") && Evernote.newNoteInNotebook.notebook === \"Personal\") {\n  GoogleTasks.addTaskToTasklist.setTaskTitle(Evernote.newNoteInNotebook.Title);\n  GoogleTasks.addTaskToTasklist.setTaskNotes(Evernote.newNoteInNotebook.BodyHTML);\n  GoogleTasks.addTaskToTasklist.setDueDate(Evernote.newNoteInNotebook.CreatedAt);\n  GoogleTasks.addTaskToTasklist.setTasklist(\"Today\");\n} else {\n  GoogleTasks.addTaskToTasklist.skip(\"Note does not match the criteria.\");\n}"
  },
  {
    "intent": "When the CO2 level in my area is low, as indicated by the Green Light Signal for postcode LE6 7TR, turn on my LIFX lights in the living room to green (#00e600) at full brightness with a transition duration of 0 seconds, but if the CO2 level is not low, turn off the lights.",
    "filter_code": "var co2Index = GreenLightSignal.co2Level.Co2Index;\nvar postcode = \"LE6 7TR\";\n\nif (co2Index === \"low\" || co2Index === \"very low\") {\n  Lifx.color.setAdvancedOptions('color: #00e600; brightness: 1; transition_duration: 0');\n  Lifx.color.setColorIfOff(\"Yes\");\n} else {\n  Lifx.color.setAdvancedOptions('color: #ffffff; brightness: 0; transition_duration: 0');\n}"
  },
  {
    "intent": "Download the last 5 photos from my Flickr photostream at http://www.flickr.com/photos/ltibbets/ to the \"Vacation\" subfolder in the \"Photos\" shared folder on my QNAP device, naming the files with the format \"photo1.jpg\", \"photo2.jpg\", etc.",
    "filter_code": "if (Flickr.newPublicPhotosBatch.PhotoCount >= 5) {\n  for (var i = 0; i < 5; i++) {\n    var photoUrl = Flickr.newPublicPhotosBatch.LastSourceUrl;\n    var fileName = \"photo\" + (i + 1) + \".jpg\";\n    Qnap.downloadFileFromUrl.setFileUrl(photoUrl);\n    Qnap.downloadFileFromUrl.setFileName(fileName);\n    Qnap.downloadFileFromUrl.setFolderPath(\"Photos/Vacation\");\n  }\n} else {\n  Qnap.downloadFileFromUrl.skip(\"Less than 5 new photos in the photostream.\");\n}"
  },
  {
    "intent": "When the stock price of Google Inc. (GOOG) rises by more than 10% compared to its last closing price, turn on the living room WiZ Colors lights with a green color and set the brightness to 75%.",
    "filter_code": "if (Finance.percentageDropStocks.StockName === \"Google Inc.\" && Finance.percentageDropStocks.StockTicker === \"GOOG\" && parseFloat(Finance.percentageDropStocks.PercentageChange) > 10) {\n  Wiz.turnOn.setMode(\"green\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Get the current weather condition and temperature in degrees Fahrenheit for New York City at 7:00 AM and send an image of the current weather condition to my Office Triby.",
    "filter_code": "if (Meta.currentUserTime.hour() === 7 && Weather.currentWeatherAtTime.Location === \"New York City\") {\n  var imageUrl = Weather.currentWeatherAtTime.CurrentConditionImageURL;\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.setImageUrl(imageUrl);\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.setTriby(\"Office Triby\");\n} else {\n  InvoxiaTriby.sendAnImageToSpecifiedTriby.skip(\"Not 7:00 AM or not New York City\");\n}"
  },
  {
    "intent": "When The New York Times publishes a new movie review with a Critics' Pick rating, and the review is written by a critic like Alexander P. Tibbets, add a new card to the \"Movie Recommendations\" list on the \"Entertainment\" board in Trello, with the title set to the movie title, such as \"Exit Through the Gift Shop\", and the description set to the review headline, like \"On the Street, at the Corner of Art and Trash\", along with the review URL, and assign it to members like @johnDoe and @janeDoe, applying labels like \"Critics' Pick\" and \"New Release\".",
    "filter_code": "if (Nytimes.newMovieReview.Author === \"Alexander P. Tibbets\" && Nytimes.newMovieReview.MPAARating === \"Critics' Pick\") {\n  Trello.createCard.setListName(\"Movie Recommendations\");\n  Trello.createCard.setBoard(\"Entertainment\");\n  Trello.createCard.setTitle(Nytimes.newMovieReview.MovieTitle);\n  Trello.createCard.setDescription(Nytimes.newMovieReview.ReviewHeadline + \"\\n\" + Nytimes.newMovieReview.ReviewUrl);\n  Trello.createCard.setMembers(\"@johnDoe, @janeDoe\");\n  Trello.createCard.setLabels(\"Critics' Pick, New Release\");\n} else {\n  Trello.createCard.skip(\"The review is not a Critics' Pick or not written by Alexander P. Tibbets.\");\n}"
  },
  {
    "intent": "Append the Library of Congress's Today in History update for May 26, with the title \"Today in History - May 26\" and post content \"On May 26, 1864, President Lincoln signed...\", to the \"history-updates\" stream in the \"us-history\" dataset on data.world, creating a new record with keys \"date\" and \"event\" and values \"May 26\" and \"President Lincoln signs\", respectively.",
    "filter_code": "Datadotworld.append.setDatasetKey(\"us-history\");\nDatadotworld.append.setStreamName(\"history-updates\");\nvar payload = \"date||May 26|||event||\" + Loc.todayInHistory.PostContentHtml.replace(/.*On May 26, (\\d{4}).*President Lincoln signed.*/, \"President Lincoln signs $1\");\nif (Loc.todayInHistory.Title === \"Today in History - May 26\") {\n  Datadotworld.append.setPayload(payload);\n} else {\n  Datadotworld.append.skip(\"Not today's update.\");\n}"
  },
  {
    "intent": "When you favorite a public photo titled \"A beautiful landscape\" on Flickr, containing tags like \"sunset\" and \"mountains\", this applet will automatically download the image from the URL http://farm5.static.flickr.com/4133/5193728540_55ed27e276_b.jpg to your QNAP device in the shared folder \"Photos\" with the file name \"Landscape_Sunset\" and subfolder path \"Vacation/Pictures\".",
    "filter_code": "if (Flickr.newFavoritePublicPhoto.Title === \"A beautiful landscape\" && Flickr.newFavoritePublicPhoto.Tags.includes(\"sunset\") && Flickr.newFavoritePublicPhoto.Tags.includes(\"mountains\")) {\n  Qnap.downloadFileFromUrl.setFileUrl(Flickr.newFavoritePublicPhoto.SourceUrl);\n  Qnap.downloadFileFromUrl.setFileName(\"Landscape_Sunset\");\n  Qnap.downloadFileFromUrl.setFolderPath(\"Vacation/Pictures\");\n  Qnap.downloadFileFromUrl.setOptionSharedFolder(\"Photos\");\n} else {\n  Qnap.downloadFileFromUrl.skip(\"The photo does not match the specified title or tags.\");\n}"
  },
  {
    "intent": "When a new Twitch stream from \"Ninja\" goes live with the game \"Fortnite\", change the color of my Kasa light bulb named \"Living Room Lamp\" to blue, set the brightness to 75%, and transition between colors over a duration of 2 seconds.",
    "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"Ninja\" && Twitch.streamGoingLiveForChannelYouFollow.Game === \"Fortnite\") {\n  Kasa.changeColor.setDevice(\"Living Room Lamp\");\n  Kasa.changeColor.setColor(\"blue\");\n  Kasa.changeColor.setBrightness(\"75%\");\n  Kasa.changeColor.setTransitionDuration(\"2000\");\n} else {\n  Kasa.changeColor.skip(\"Stream does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new item is tagged as \"files\" in Pocket with the title containing the word \"report\", excerpt longer than 100 characters, and added after August 1, 2022, upload the file to the data.world dataset named \"Company Reports\" with the filename being the last part of the URL (e.g., \"example.pdf\") and the file URL set to the item's original URL.",
    "filter_code": "if (Pocket.newTaggedItemPocket.Title.indexOf(\"report\") !== -1\n    && Pocket.newTaggedItemPocket.Excerpt.length > 100\n    && new Date(Pocket.newTaggedItemPocket.AddedAt) > new Date('2022-08-01')\n    && Pocket.newTaggedItemPocket.Tags.includes(\"files\")) {\n  let filename = Pocket.newTaggedItemPocket.Url;\n  if (filename.indexOf(\"?\") != -1) {\n    filename = filename.substr(0, filename.indexOf=\"?\"));\n  }\n  filename = filename.substr(filename.lastIndexOf(\"/\")+1);\n\n  Datadotworld.uploadFile.setFileName(filename);\n  Datadotworld.uploadFile.setFileUrl(Pocket.newTaggedItemPocket.Url);\n  Datadotworld.uploadFile.setDatasetKey(\"Company Reports\");\n} else {\n  Datadotworld.uploadFile.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new popular article is published on The New York Times in the Sports section, with an author like Alexander P. Tibbets and containing the keyword \"URGENT\" in its title, send a Signal to your Das Keyboard named \"NYT Sports Alert\" to the Zone labeled \"Key 1\" with the color red, including a message that says \"New article: {Title}\" by {Author}, and apply a breathing effect on the device named \"Office Keyboard\".",
    "filter_code": "if (Nytimes.anyNewPopularArticleToday.Section === \"Sports\"\n    && Nytimes.anyNewPopularArticleToday.Author.includes(\"Alexander P. Tibbets\")\n    && Nytimes.anyNewPopularArticleToday.Title.includes(\"URGENT\")) {\n  Daskeyboardq.signals.setName(\"NYT Sports Alert\");\n  Daskeyboardq.signals.setZone(\"Key 1\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(`New article: ${Nytimes.anyNewPopularArticleToday.Title} by ${Nytimes.anyNewPopularArticleToday.Author}`);\n  Daskeyboardq.signals.setEffect(\"breathing\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Article does not match the criteria.\");\n}"
  },
  {
    "intent": "When a live stream starts on Twitch by the channel \"John's Channel\" and the game being streamed is \"StarCraft II: Heart of the Swarm\", turn on the WiZ lights in the \"Living Room\" group, set the mode to \"Concentrate\" and adjust the brightness to 75%.",
    "filter_code": "if (Twitch.streamGoingLiveForChannelYouFollow.ChannelName === \"John's Channel\" && Twitch.streamGoingLiveForChannelYouFollow.Game === \"StarCraft II: Heart of the Swarm\") {\n  Wiz.turnOn.setEntity(\"Living Room\");\n  Wiz.turnOn.setMode(\"Concentrate\");\n  Wiz.turnOn.setDimming(\"75%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the pollen count in New York rises above 8, send a Signal to my Das Keyboard device named \"Home Office Keyboard\" with the name \"High Pollen Alert\", setting the color of the center zone to red, and displaying the message \"Pollen count is high\" with a breathe effect.",
    "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 8 && Weather.currentPollenCountRisesAbove.location === \"New York\") {\n  Daskeyboardq.signals.setName(\"High Pollen Alert\");\n  Daskeyboardq.signals.setZone(\"center\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"Pollen count is high\");\n  Daskeyboardq.signals.setEffect(\"breathe\");\n  Daskeyboardq.signals.setDevice(\"Home Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Pollen count is not above 8 or location is not New York\");\n}"
  },
  {
    "intent": "When the pollen count in New York rises above 8, as reported by Weather Underground, turn on the living room WiZ light and set it to lime color with a brightness of 75%.",
    "filter_code": "if (Weather.currentPollenCountRisesAbove.PollenCount > 8 && Weather.currentPollenCountRisesAbove.Location === \"New York\") {\n  Wiz.turnOn.setMode(\"lime\");\n  Wiz.turnOn.setDimming(\"75%\");\n  Wiz.turnOn.skip();\n} else {\n  Wiz.turnOn.skip(\"Pollen count not above threshold or location not New York.\");\n}"
  },
  {
    "intent": "When a new track is added to the \"Mid-2000s Jamz\" playlist on Spotify, send a Signal to the Das Keyboard Q device named \"NewTrackAdded\" with a red color and the message \"New track: {track_name} by {artist_name}\" to the zone \"Key 1\" with a breathing effect.",
    "filter_code": "if (Spotify.newTrackAddedToPlaylist.PlaylistName === \"Mid-2000s Jamz\") {\n  Daskeyboardq.signals.setName(\"NewTrackAdded\");\n  Daskeyboardq.signals.setZone(\"Key 1\");\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(`New track: ${Spotify.newTrackAddedToPlaylist.TrackName} by ${Spotify.newTrackAddedToPlaylist.ArtistName}`);\n  Daskeyboardq.signals.setEffect(\"breathing\");\n} else {\n  Daskeyboardq.signals.skip(\"Playlist does not match 'Mid-2000s Jamz'.\");\n}"
  },
  {
    "intent": "When the outside temperature drops below 18 degrees Celsius in the location of New York, set the target temperature of the GE Appliances Window AC named \"Living Room AC\" to 22 degrees Celsius.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius < 18 && Weather.currentTemperatureDropsBelow.Location === \"New York\") {\n  GeAppliancesWac.wacSetTargetTemp.setSetTargetTemp(22);\n} else {\n  GeAppliancesWac.wacSetTargetTemp.skip(\"Outside temperature is not below 18 degrees Celsius or location is not New York.\");\n}"
  },
  {
    "intent": "Turn on the living room WiZ lights to 'Warm White' mode with 75% brightness whenever motion is detected by the Wyze Cam in the hallway between 18:00 and 22:00.",
    "filter_code": "var triggerHour = Wyzecam.motionTrigger.TriggerTime.getHours();\nvar livingRoomLight = \"living room\";\nvar warmWhiteMode = \"Warm White\";\nvar seventyFivePercentBrightness = \"75%\";\n\nif (Wyzecam.motionTrigger.MotionDetected === \"Motion detected on your wyze camera.\" &&\n    triggerHour >= 18 && triggerHour <= 22) {\n  Wiz.turnOn.setEntity(livingRoomLight);\n  Wiz.turnOn.setMode(warmWhiteMode);\n  Wiz.turnOn.setDimming(seventyFivePercentBrightness);\n} else {\n  Wiz.turnOn.skip(\"Motion detected outside of scheduled hours or not in the hallway.\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with the hashtag #Hue, set the color of all my Philips Hue lights to match the dominant color of the image, using the 'Color mode' that best represents the mood of the photo, and apply this change to all the lights in my living room.",
    "filter_code": "if (Instagram.newPhotoByYouTagged.Caption.includes(\"#Hue\")) {\n  var imageUrl = Instagram.newPhotoByYouTagged.SourceUrl;\n  var colorMode = \"Mood\";\n  Hue.setColorFromImageAllHue.setImageUrl(imageUrl);\n  Hue.setColorFromImageAllHue.setColorMode(colorMode);\n  Hue.setColorFromImageAllHue.setLights(\"Living room\");\n} else {\n  Hue.setColorFromImageAllHue.skip(\"Post does not contain #Hue hashtag.\");\n}"
  },
  {
    "intent": "Append today's weather report to the \"weather-underground-today\" stream in the dataset at 07:00, including current temperature in degrees Fahrenheit, current condition, and UV index, with location set to New York City.",
    "filter_code": "const time = \"07:00\";\nif (Meta.currentUserTime.hour() === 7 && Meta.currentUserTime.minute() === 0) {\n  const location = \"New York City\";\n  const currentTempFahrenheit = Weather.currentWeatherAtTime.CurrentTempFahrenheit;\n  const currentCondition = Weather.currentWeatherAtTime.CurrentCondition;\n  const uvIndex = Weather.currentWeatherAtTime.UvIndex;\n\n  const payload = `location||${location}|||current_temp_fahrenheit||${currentTempFahrenheit}|||current_condition||${currentCondition}|||uv_index||${uvIndex}`;\n  Datadotworld.append.setStreamName(\"weather-underground-today\");\n  Datadotworld.append.setPayload(payload);\n} else {\n  Datadotworld.append.skip(\"Not 07:00\");\n}"
  },
  {
    "intent": "Create a new issue on the IFTTT/StatsD repository in GitHub with the title \"Motion Detection Alert\" and body \"A motion tag was detected at 04:17:06+05:00 on July 8, 2020, with the event ID MESH-12345 and text contents 'Motion Tag: Detected!'\" whenever a new event is triggered in the MESH app with the EventID MESH-12345.",
    "filter_code": "if (Mesh.events.event_id === \"MESH-12345\") {\n  var title = \"Motion Detection Alert\";\n  var body = `A motion tag was detected at ${Mesh.events.TriggeredAt} with the event ID ${Mesh.events.event_id} and text contents '${Mesh.events.Text}'`;\n  Github.createNewIssueForRepository.setRepository(\"IFTTT/StatsD\");\n  Github.createNewIssueForRepository.setIssueTitle(title);\n  Github.createNewIssueForRepository.setIssueBody(body);\n} else {\n  Github.createNewIssueForRepository.skip(\"Event ID does not match.\");\n}"
  },
  {
    "intent": "When a smoke alarm is detected by your Wyze camera in the living room at any time, turn on the WiZ lights in the kitchen to bright red at maximum brightness.",
    "filter_code": "if (Wyzecam.smokeTrigger.SmokeDetected === \"Smoke alarm detected on your wyze camera.\" && Wyzecam.smokeTrigger.TriggerTime !== null) {\n  if (serialize_device_info === \"Living Room\") {\n    Wiz.turnOn.setEntity(\"Kitchen\");\n    Wiz.turnOn.setMode(\"Bright Red\");\n    Wiz.turnOn.setDimming(\"Maximum\");\n    Wiz.turnOn.skip();\n  } else {\n    Wiz.turnOn.skip(\"Smoke detected in a different room.\");\n  }\n}"
  },
  {
    "intent": "When the stock price of Google Inc. (GOOG) falls by more than 10% compared to the previous closing price, turn on the WiZ Colors light in the Living Room to red at 50% brightness.",
    "filter_code": "if (Finance.percentageDropStocks.StockTicker === \"GOOG\" && Finance.percentageDropStocks.PercentageChange < -10) {\n  Wiz.turnOn.setMode(\"red\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When an email with the subject \"Meeting Reminder\" and tagged as #urgent is received from somebody@gmail.com, send the email body to http://media.ifttt.com/emails/363-black_and_white.jpg and activate the \"Good Morning\" scene in BeoLiving Intelligence.",
    "filter_code": "if (Email.sendIftttAnEmailTagged.Subject === \"Meeting Reminder\" && Email.sendIftttAnEmailTagged.tag === \"#urgent\" && Email.sendIftttAnEmailTagged.From === \"somebody@gmail.com\") {\n  var requestBody = {\n    \"body\": Email.sendIftttAnEmailTagged.Body\n  };\n  fetch(Email.sendIftttAnEmailTagged.AttachmentTemporaryUrl, {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: { 'Content-Type': 'application/json' }\n  });\n  BangOlufsensBeoLinkGateway.boPress.setBoButton(\"Good Morning\");\n} else {\n  BangOlufsensBeoLinkGateway.boPress.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Bedroom sensor device in SmartThings no longer detects presence, start the Roomba robot to begin cleaning.",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName !== \"Bedroom sensor\") {\n  Irobot.startRobot.skip(\"Not the Bedroom sensor\");\n} else {\n  var arrivedAt = SmartthingsV2.newPresentSmartthings.ArrivedAt;\n  // Assuming presence is no longer detected if ArrivedAt is older than a minute\n  var currentTime = new Date();\n  var arrivalTime = new Date(arrivedAt);\n  var timeDiff = (currentTime - arrivalTime) / 1000 / 60; // in minutes\n\n  if (timeDiff > 1) {\n    Irobot.startRobot.setRobotName(\"Roomba\");\n  } else {\n    Irobot.startRobot.skip(\"Presence still detected\");\n  }\n}"
  },
  {
    "intent": "When a new video is posted by the Twitch channel \"Ninja\" on their live streams, add a task to the Todoist project \"My Videos to Watch\" with the task content set to \"Watch {{video_title}}\", note as \"{{video_description}}\", due date as \"today\", and priority as \"High\".",
    "filter_code": "if (Twitch.newVideoByChannelYouFollow.VideoChannel === \"Ninja\" && Twitch.newVideoByChannelYouFollow.what_kind_of_videos === \"Live Streams\") {\n  Todoist.createTask.setTaskContent(\"Watch \" + Twitch.newVideoByChannelYouFollow.VideoTitle);\n  Todoist.createTask.setNote(Twitch.newVideoByChannelYouFollow.VideoDescription);\n  Todoist.createTask.setDueDate(\"today\");\n  Todoist.createTask.setPriority(\"High\");\n  Todoist.createTask.setProjectId(\"My Videos to Watch\");\n} else {\n  Todoist.createTask.skip(\"The video is not from Ninja's live streams.\");\n}"
  },
  {
    "intent": "When a new message is pinned in the #general channel on Discord, append a row to a Google Sheets spreadsheet named \"Pinned Messages\" with the message author, the message content, and a link to the message, using the format \"Author|||Message|||Link\" and save it in the folder path \"Discord Logs/Important Messages\".",
    "filter_code": "if (Discord.newMessageInChannel.Channel !== \"#general\") {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Not from #general channel.\");\n}\n\nvar formattedRow = Discord.newMessageInChannel.Author + \"|||\" + Discord.newMessageInChannel.Message + \"|||\" + Discord.newMessageInChannel.LinkToMessage;\nGoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Pinned Messages\");\nGoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\nGoogleSheets.appendToGoogleSpreadsheet.setPath(\"Discord Logs/Important Messages\");"
  },
  {
    "intent": "When the oven door of my Home Oven is opened, blink all the Philips Hue lights in the Living Room.",
    "filter_code": "if (HcOven.ovenDoorOpened.ha_id === \"Home Oven\") {\n  Hue.blinkAllHue.setLights(\"Living Room\");\n} else {\n  Hue.blinkAllHue.skip(\"Not the Home Oven.\");\n}"
  },
  {
    "intent": "Add any new file uploaded to the Google Drive folder path \"Documents/Photos/Receipts\" to the data.world dataset key \"my_financial_reports\" with the file name being the original filename from Google Drive, such as \"receipt_2022.jpg\", and the file URL being the public URL of the file on Google Drive, like \"https://drive.google.com/file/d/1234567890abcdefghijklmnopqrstuvwxyz\".",
    "filter_code": "Datadotworld.uploadFile.setDatasetKey(\"my_financial_reports\");\nDatadotworld.uploadFile.setFileName(GoogleDrive.anyNewFile.Filename);\nDatadotworld.uploadFile.setFileUrl(GoogleDrive.anyNewFile.FileUrl);"
  },
  {
    "intent": "Send a daily Signal to the Das Keyboard device named \"Office Keyboard\" at 08:00 with the exchange rate between USD and EUR, displaying the message \"Daily Exchange Rate: 1 USD = 0.85 EUR\" in the color red on zone 1 with a blink effect.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 8) {\n  if (Finance.currencyExchangeRateStocks.InputCurrency === \"USD\" && Finance.currencyExchangeRateStocks.OutputCurrency === \"EUR\") {\n    Daskeyboardq.signals.setName(\"Office Keyboard\");\n    Daskeyboardq.signals.setZone(1);\n    Daskeyboardq.signals.setColor(\"red\");\n    Daskeyboardq.signals.setEffect(\"blink\");\n    var exchangeRateMessage = \"Daily Exchange Rate: 1 USD = \" + Finance.currencyExchangeRateStocks.ExchangeRate + \" EUR\";\n    Daskeyboardq.signals.setMessage(exchangeRateMessage);\n  } else {\n    Daskeyboardq.signals.skip(\"The currencies do not match the intended exchange rate.\");\n  }\n} else {\n  Daskeyboardq.signals.skip(\"Signal sending is not scheduled for this time.\");\n}"
  },
  {
    "intent": "Add the newly uploaded file from the Dropbox folder named \"My Documents\" to the data.world dataset with the key \"mydataset123\", using the filename provided by Dropbox, such as \"example.txt\", and the file's public URL, like \"https://www.dropbox.com/s/qp3cqdjqachyr2x/ifttt_wordmark.png\", ensuring the file name includes a proper extension.",
    "filter_code": "Datadotworld.uploadFile.setDatasetKey(\"mydataset123\");\nDatadotworld.uploadFile.setFileName(Dropbox.newFileInFolder.Filename);\nDatadotworld.uploadFile.setFileUrl(Dropbox.newFileInFolder.FileUrl);"
  },
  {
    "intent": "Turn on the living room WiZ light to 75% brightness with the 'Relax' mode whenever Tom's Nokia Sleep detects that he is getting out of bed between 06:00 and 08:00.",
    "filter_code": "var hour = WithingsSleep.bedout.DateandTime.getHours();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nvar entity = \"Living Room\";\nvar mode = \"Relax\";\nvar dimming = \"75%\";\n\nif (deviceUser === \"Tom\" && hour >= 6 && hour < 8) {\n  Wiz.turnOn.setEntity(entity);\n  Wiz.turnOn.setMode(mode);\n  Wiz.turnOn.setDimming(dimming);\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn off the Living Room WiZ light when Tom's Withings Sleep detects that he gets into bed between 22:00 and 06:00.",
    "filter_code": "var hour = WithingsSleep.bedin.DateandTime.hour();\nvar deviceUser = WithingsSleep.bedin.DeviceUser;\nvar entity = \"Living Room\";\n\nif (deviceUser === \"Tom\" && (hour >= 22 || hour < 6)) {\n  Wiz.turnOff(entity);\n} else {\n  Wiz.turnOff.skip(\"Not Tom's device or outside of specified hours\");\n}"
  },
  {
    "intent": "When the weather forecast indicates a high chance of rain in New York City and the current temperature is below 15°C, set the color temperature of the living room smart light to cool white.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.TempCelsius < 15) {\n  LinkSmartHome.lightColorTemperature.setValue(\"cool white\");\n}"
  },
  {
    "intent": "When the weather condition is \"Rain\" at the location \"Home\", and the current temperature is below 15°C, turn on the WiZ light in the \"Living Room\" with warm white mode and set the brightness to 75%.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Weather.currentConditionIs.TempCelsius < 15) {\n  Wiz.turnOn.setMode(\"warm_white\");\n  Wiz.turnOn.setDimming(\"75%\");\n  Wiz.turnOn.skip(\"Not turning on light as condition not met.\");\n} else {\n  Wiz.turnOn();\n}"
  },
  {
    "intent": "When Dad's Honda departs from Home, close the Front Garage Door.",
    "filter_code": "if (Zubie.departures.Vehicle === \"Dad's Honda\" && Zubie.departures.Place === \"Home\") {\n  Garageio.closeGarageDoor.setDoorToClose(\"Front Garage Door\");\n} else {\n  Garageio.closeGarageDoor.skip(\"Conditions not met to close the garage door.\");\n}"
  },
  {
    "intent": "Turn off the WiZ living room lamp when the Wyze motion sensor in the hallway becomes clear between 20:00 and 07:00.",
    "filter_code": "var triggerHour = new Date(Wyzecam.motionSensorNoDetectsTrigger.TriggerTime).getHours();\nif (Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName === \"your wyze motion sensor\" &&\n    Wiz.turnOff.entity === \"living room lamp\" &&\n    (triggerHour >= 20 || triggerHour < 7)) {\n  // No need to skip, this is the condition to turn off\n} else {\n  Wiz.turnOff.skip(\"Conditions not met to turn off the living room lamp.\");\n}"
  },
  {
    "intent": "When the hour with the lowest CO2 intensity in electricity production between 07:00 and 19:00 at Herstedøstervej 23 is reached, change the color of all Philips Hue lights in the living room to green (#008000).",
    "filter_code": "if (Watts.lowcarbon.LocationName === \"Herstedøstervej 23\" &&\n    Meta.currentUserTime.hour() >= 7 &&\n    Meta.currentUserTime.hour() <= 19) {\n  var lowestCo2Hour = null;\n  var lowestCo2Level = Infinity;\n\n  for (var hour = 7; hour <= 19; hour++) {\n    var co2Level = Watts.lowcarbon.Co2Level; // Assuming this is an array or object with CO2 levels for each hour\n    if (co2Level < lowestCo2Level) {\n      lowestCo2Hour = hour;\n      lowestCo2Level = co2Level;\n    }\n  }\n\n  if (Meta.currentUserTime.hour() === lowestCo2Hour) {\n    Hue.setColorAllHue.setColor(\"#008000\");\n  } else {\n    Hue.setColorAllHue.skip(\"Not the hour with the lowest CO2 intensity.\");\n  }\n}"
  },
  {
    "intent": "When the Litter-Robot named \"My Office Litter Robot\" reports that its waste drawer is full, as indicated by the \"Waste Drawer Full\" event type at any time, blink all Philips Hue lights in the living room.",
    "filter_code": "if (Whisker.lr3Events.LitterRobotName === \"My Office Litter Robot\" && Whisker.lr3Events.EventType === \"Waste Drawer Full\") {\n  Hue.blinkAllHue.setLights(\"living room\");\n} else {\n  Hue.blinkAllHue.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the SwitchBot device named \"Office Bot\" when the August lock named \"Front Door\" at the \"San Diego Beach House\" is unlocked by John Smith.",
    "filter_code": "if (Augusthome.lockUnlocked.LockName === \"Front Door\" && Augusthome.lockUnlocked.HouseName === \"San Diego Beach House\" && Augusthome.lockUnlocked.User === \"John Smith\") {\n  Switchbot.turnOnBot.setChoseADevice(\"Office Bot\");\n} else {\n  Switchbot.turnOnBot.skip(\"Unlock event does not match the specified conditions.\");\n}"
  },
  {
    "intent": "Turn on the WeMo Light Switch with Mac address 00:11:22:33:44:55 when a MESH event with EventID \"12345\" and text contents \"Motion Tag: Detected!\" is triggered between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Mesh.events.Text === \"Motion Tag: Detected!\" && Mesh.events.event_id === \"12345\") {\n    WemoLightSwitch.attributeLsOnDiscrete.setMacaddress(\"00:11:22:33:44:55\");\n  } else {\n    WemoLightSwitch.attributeLsOnDiscrete.skip(\"Event text or ID does not match.\");\n  }\n} else {\n  WemoLightSwitch.attributeLsOnDiscrete.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the \"Office Button\" on device \"Main Fetchit Device\" is pressed or long pressed, turn on all Philips Hue lights in the living room.",
    "filter_code": "if (Tantiv4.whenFetchitButtonPress.ButtonName === \"Office Button\" && Tantiv4.whenFetchitButtonPress.DeviceName === \"Main Fetchit Device\") {\n  if ([\"press\", \"long_press\"].includes(Tantiv4.whenFetchitButtonPress.button_event_id)) {\n    Hue.turnOnAllHue.setLights(\"living room\");\n  } else {\n    Hue.turnOnAllHue.skip(\"Button event is not press or long press.\");\n  }\n} else {\n  Hue.turnOnAllHue.skip(\"Button or device does not match.\");\n}"
  },
  {
    "intent": "Turn off the WeMo Light Switch with Mac address 00:11:22:33:44:55 when a MESH event with EventID \"12345\" and text contents \"Motion Tag: Detected!\" is triggered between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Mesh.events.Text === \"Motion Tag: Detected!\" && Mesh.events.event_id === \"12345\" && hour >= 7 && hour < 19) {\n  // Do nothing, let the action proceed\n} else {\n  WemoLightSwitch.attributeLsOffDiscrete.skip(\"Condition not met\");\n}"
  },
  {
    "intent": "Turn on the kitchen coffee machine and run the default rinsing program every morning at sunrise when the temperature is above 18°C, so it's ready to make your favorite coffee.",
    "filter_code": "if (Weather.sunRises.SunriseAt && Weather.sunRises.TempCelsius > 18) {\n  HcCoffeeMachine.coffeeMakerTurnOn();\n  // Assuming the default rinsing program is triggered by turning on the machine\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Temperature is not above 18°C or sunrise time not available\");\n}"
  },
  {
    "intent": "When a motion detection event with the text \"Motion Tag: Detected!\" is triggered at any time, deactivate the output of the cloudBit device named \"Office CloudBit\".",
    "filter_code": "if (Mesh.events.Text === \"Motion Tag: Detected!\") {\n  Littlebits.deactivateOutput.setDeviceId(\"Office CloudBit\");\n  Littlebits.deactivateOutput.skip();\n}"
  },
  {
    "intent": "When the sunset at New York occurs, as reported by Weather Underground, and the current temperature is 18 degrees Celsius, turn on all Lexi lights with a brightness of 80% and a color of #FFC107.",
    "filter_code": "if (Weather.sunSets.SunsetAt && Weather.sunSets.TempCelsius === \"18\") {\n  Lexi.deviceTurnOnAll.setBrightness(80);\n  Lexi.deviceTurnOnAll.setColor(\"#FFC107\");\n} else {\n  Lexi.deviceTurnOnAll.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Report the rainfall measurement of 10.92 mm from My Rain gauge, which was measured yesterday at 04:17:06+05:00, to Netro device Garden Controller, setting the date to 2020-07-08, the rain amount to 10.92 mm, and the rain probability to 100.",
    "filter_code": "Netro.reportWeather.setDevice(\"Garden Controller\")\nNetro.reportWeather.setDate(\"2020-07-08\")\nNetro.reportWeather.setRain(Netatmo.rainYesterdayAmount.MeasuredRainfallMM)\nNetro.reportWeather.setRainProb(\"100\")\nNetro.reportWeather.setCondition(\"Rain\")"
  },
  {
    "intent": "Turn on the WiZ light in the Living Room to 75% brightness with the Warm White mode when SmartThings detects presence from the Bedroom sensor between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Bedroom sensor\") {\n    Wiz.turnOn.setDimming(\"75%\");\n    Wiz.turnOn.setMode(\"Warm White\");\n    Wiz.turnOn.skip(null); // No reason to skip, so pass null\n  } else {\n    Wiz.turnOn.skip(\"Incorrect device: expected Bedroom sensor\");\n  }\n} else {\n  Wiz.turnOn.skip(\"Outside of active hours (7 AM to 7 PM)\");\n}"
  },
  {
    "intent": "When the CO₂ level measured by my Netatmo Weather Station, located in \"My Home - Indoor station\", rises above 1000ppm at any time, turn on the WiZ light in the \"Living Room\" and set it to red color with a brightness of 80%.",
    "filter_code": "if (Netatmo.co2RisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.co2RisesAbove.MeasuredCO2 > 1000) {\n  Wiz.turnOn.setMode(\"red\");\n  Wiz.turnOn.setDimming(\"80%\");\n} else {\n  Wiz.turnOn.skip(\"CO₂ level is not above 1000ppm or device is not 'My Home - Indoor station'\");\n}"
  },
  {
    "intent": "Turn on the WiZ lights in the Living Room to Warm White mode with 75% brightness whenever the Wyze Motion Sensor named \"Office Motion\" detects motion between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  var motionSensorName = Wyzecam.motionSensorNoDetectsTrigger.MotionSensorName;\n  if (motionSensorName === \"Office Motion\") {\n    Wiz.turnOn.setMode(\"Warm White\");\n    Wiz.turnOn.setDimming(\"75%\");\n    Wiz.turnOn.skip();\n  } else {\n    Wiz.turnOn.skip(\"Motion detected by wrong sensor.\");\n  }\n} else {\n  Wiz.turnOn.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Close the garage door number 1 every day at 8:00 PM if it is open, to ensure the garage remains secure overnight.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar doorNumber = 1; // As specified in the intent\nif (currentTime.getHours() === 20 && currentTime.getMinutes() === 0) {\n  Garagewifi.closeDoor.setDoorNumber(doorNumber);\n} else {\n  Garagewifi.closeDoor.skip(\"Not the scheduled time to close the garage door.\");\n}"
  },
  {
    "intent": "Open the garage door number 1 every day at 7:30 AM, but only if it's currently closed, to ensure easy access during morning hours.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar desiredTime = \"7:30 AM\";\nif (currentTime === desiredTime) {\n  var doorNumber = 1;\n  Gogogate.getDoorStatus(function(status) {\n    if (status !== \"open\") {\n      Gogogate.openDoor.setDoorNumber(doorNumber);\n    } else {\n      Gogogate.openDoor.skip(\"Garage door is already open.\");\n    }\n  });\n}"
  },
  {
    "intent": "When rain is detected by my Netatmo Rain gauge named \"My Rain gauge\" at any time, stop all watering on the RainMachine device named \"Front Yard Sprinkler\".",
    "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  RainMachine.stopAllWatering.skip(\"Rain detected by Netatmo Rain gauge. Stopping all watering on Front Yard Sprinkler.\");\n}"
  },
  {
    "intent": "Notify me on my phone with a message \"Instrument State Changed\" whenever the state of my instrument \"Lab Instrument 1\" changes to \"Running\" or \"Idle\" between 08:00 and 17:00, including the current time of the event and the name of the instrument that triggered the notification.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 8 && hour <= 17) {\n  var instrumentName = TecanConnect.instrumentState.InstrumentName;\n  var currentState = TecanConnect.instrumentState.InstrumentState;\n  if (instrumentName === \"Lab Instrument 1\" && (currentState === \"Running\" || currentState === \"Idle\")) {\n    var message = \"Instrument State Changed at \" + TecanConnect.instrumentState.TimeOfEvent + \": \" + instrumentName;\n    IfNotifications.sendNotification.setMessage(message);\n  } else {\n    IfNotifications.sendNotification.skip(\"Conditions not met\");\n  }\n} else {\n  IfNotifications.sendNotification.skip(\"Outside of notification hours (08:00 to 17:00)\");\n}"
  },
  {
    "intent": "Send a daily weather report to my Telegram chat at 7:00 AM, including the current temperature in degrees Fahrenheit, the current weather condition, and a web page preview of the forecast for New York City.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour === 7) {\n  var messageText = \"Current temperature: \" + Weather.currentWeatherAtTime.CurrentTempFahrenheit + \"°F, Current condition: \" + Weather.currentWeatherAtTime.CurrentCondition + \", Forecast: https://www.weather.com/weather/today/l/40.7128,-74.0060\";\n  Telegram.sendMessage.setText(messageText);\n  Telegram.sendMessage.setIncludeWebPagePreview(\"true\");\n} else {\n  Telegram.sendMessage.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "When you create a new public bookmark on Diigo with the tag \"new\" and the title contains the word \"IFTTT\", send a Signal to your Das Keyboard device named \"Office Keyboard\" in the zone \"Top\" with the color \"#FF0000\" and the message \"New IFTTT Bookmark: {{Title}}\".",
    "filter_code": "if (Diigo.newBookmarkTaggedDiigo.Tags.includes(\"new\") && Diigo.newBookmarkTaggedDiigo.Title.includes(\"IFTTT\")) {\n  Daskeyboardq.signals.setName(\"Office Keyboard\");\n  Daskeyboardq.signals.setZone(\"Top\");\n  Daskeyboardq.signals.setColor(\"#FF0000\");\n  Daskeyboardq.signals.setMessage(\"New IFTTT Bookmark: \" + Diigo.newBookmarkTaggedDiigo.Title);\n} else {\n  Daskeyboardq.signals.skip(\"Bookmark does not match the criteria.\");\n}"
  },
  {
    "intent": "When the temperature at my Netatmo Weather Station, specifically the \"My Home - Indoor station\" device, drops below 0 degrees Celsius, change the WiZ light in the \"Living Room\" to blue with a brightness of 50%, serving as a frost warning notification.",
    "filter_code": "if (Netatmo.temperatureDropsBelow.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureDropsBelow.MeasuredTemperatureC < 0) {\n  Wiz.turnOn.setMode(\"blue\");\n  Wiz.turnOn.setDimming(\"50%\");\n} else {\n  Wiz.turnOn.skip(\"Temperature is not below 0 degrees Celsius or device does not match.\");\n}"
  },
  {
    "intent": "When Noonlight triggers an alarm for Jane Doe at a location like 38.6532135, -90.313673, between 07:00 and 22:00, turn on the WiZ lights in the Living Room to Daylight mode with full brightness.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  var latitude = Safetrek.alertTriggered.Latitude;\n  var longitude = Safetrek.alertTriggered.Longitude;\n  var name = Safetrek.alertTriggered.Name;\n  if (name === \"Jane Doe\" && latitude === \"38.6532135\" && longitude === \"-90.313673\") {\n    Wiz.turnOn.setEntity(\"Living Room\");\n    Wiz.turnOn.setMode(\"Daylight\");\n    Wiz.turnOn.setDimming(\"Full\");\n  } else {\n    Wiz.turnOn.skip(\"Conditions not met.\");\n  }\n}"
  },
  {
    "intent": "When the Withings Home device named \"Living Room\" detects an air quality level of 3000 ppm or higher, change the WiZ Colors light in the room named \"Office\" to orange color with a brightness of 80% and keep this mode for at least 30 minutes to visually signal the poor air quality.",
    "filter_code": "if (Withingshome.airquality.DeviceName === \"Living Room\" && parseInt(Withingshome.airquality.AirQualityLevel) >= 3000) {\n  Wiz.turnOn.setMode(\"orange\");\n  Wiz.turnOn.setDimming(\"80%\");\n  // Keep the mode for at least 30 minutes\n  var currentTime = new Date().getTime();\n  var timer = setTimeout(function() {\n    Wiz.turnOn.skip(\"Air quality alert has ended.\");\n  }, 30 * 60 * 1000); // 30 minutes in milliseconds\n}"
  },
  {
    "intent": "Turn on the living room fan 15 minutes after sunrise in New York when the temperature is above 18°C and the condition is Sunny.",
    "filter_code": "var sunriseTime = new Date(Weather.sunRises.SunriseAt);\nsunriseTime.setMinutes(sunriseTime.getMinutes() + 15);\n\nif (Meta.currentUserTime.isAfter(sunriseTime) &&\n    Weather.sunRises.TempCelsius > 18 &&\n    Weather.sunRises.Condition === \"Sunny\" &&\n    Fansync.device === \"living room fan\") {\n  Fansync.onOff.setOnOff(\"on\");\n} else {\n  Fansync.onOff.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the refrigerator door is opened, as indicated by the GE Appliances Refrigerator event \"refrigerator-door-freshfood-open\" from appliance \"D828C901A076\", turn on the LIFX bulb in the kitchen to red (#FF0000) at 50% brightness with a transition duration of 2 seconds, even if the light is currently off.",
    "filter_code": "if (GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.Event === \"refrigerator-door-freshfood-open\" && GeAppliancesRefrigerator.refrigeratorDoorFreshfoodOpen.Appliance === \"D828C901A076\") {\n  Lifx.color.setAdvancedOptions(\"color: #FF0000; brightness: 0.5; duration: 2\");\n  Lifx.color.setColorIfOff(\"Yes\");\n}"
  },
  {
    "intent": "Save New York Times articles about climate change to a Google Sheets spreadsheet named \"NYT Climate News\" in the folder path \"News/Environment\", with each row formatted as \"|||Title|||Author|||Published Date|||Article Url\", whenever a new article is published with keywords including \"global warming\" or \"sustainability\".",
    "filter_code": "if (Nytimes.newArticleMatchingSearch.Keywords.includes(\"global warming\") || Nytimes.newArticleMatchingSearch.Keywords.includes(\"sustainability\")) {\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"NYT Climate News\");\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"News/Environment\");\n  var formattedRow = Nytimes.newArticleMatchingSearch.Title + \"|||\" + Nytimes.newArticleMatchingSearch.Author + \"|||\" + Nytimes.newArticleMatchingSearch.PublishedDate + \"|||\" + Nytimes.newArticleMatchingSearch.ArticleUrl;\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Article does not match climate change keywords.\");\n}"
  },
  {
    "intent": "When the Netatmo Weather Station at \"My Home - Indoor station\" records a temperature above 25 degrees Celsius, turn on the WiZ light in the \"Living Room\" and set it to orange with a brightness of 80%.",
    "filter_code": "if (Netatmo.temperatureRisesAbove.DeviceName === \"My Home - Indoor station\" && Netatmo.temperatureRisesAbove.MeasuredTemperatureC > 25) {\n  Wiz.turnOn.setMode(\"orange\");\n  Wiz.turnOn.setDimming(\"80%\");\n  Wiz.turnOn.skip();\n} else {\n  Wiz.turnOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on my Living Room Lamp device when the sun sets in New York, if the current temperature is above 15°C and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunSets.Condition === \"Sunny\" && parseFloat(Weather.sunSets.TempCelsius) > 15) {\n  LinkJapanEHome.powerState.setPowerControlChangePowerStateString(\"On\");\n} else {\n  LinkJapanEHome.powerState.skip(\"Conditions not met to turn on the device.\");\n}"
  },
  {
    "intent": "When my Roomba robot named 'Living Room Cleaner' starts running, play the Sonos favorite 'Morning Boost' in the 'Kitchen' room and include grouped rooms.",
    "filter_code": "if (Irobot.robotStart.RobotName === \"Living Room Cleaner\") {\n  Sonos.playFavorite.setFavorite(\"Morning Boost\");\n  Sonos.playFavorite.setRoom(\"Kitchen\");\n  Sonos.playFavorite.setIncludeGroupedRooms(\"true\");\n} else {\n  Sonos.playFavorite.skip(\"Robot name does not match 'Living Room Cleaner'.\");\n}"
  },
  {
    "intent": "When the Bedroom lock smart device is unlocked at any time, send a signal named \"Unlock Alert\" to the Das Keyboard Device, specifically to zone 1, with the color set to red, including the message \"Device Unlocked\", using the breathe effect on the Office Keyboard device.",
    "filter_code": "if (SmartthingsV2.unlockedSmartthings.DeviceName === \"Bedroom lock\") {\n  Daskeyboardq.signals.setName(\"Unlock Alert\");\n  Daskeyboardq.signals.setZone(1);\n  Daskeyboardq.signals.setColor(\"red\");\n  Daskeyboardq.signals.setMessage(\"Device Unlocked\");\n  Daskeyboardq.signals.setEffect(\"breathe\");\n  Daskeyboardq.signals.setDevice(\"Office Keyboard\");\n} else {\n  Daskeyboardq.signals.skip(\"Not the Bedroom lock device.\");\n}"
  },
  {
    "intent": "When the outside temperature drops below 50°F in New York, set the target temperature of your GE Appliances Window AC to 72°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 50 && Weather.currentTemperatureDropsBelow.location === \"New York\") {\n  GeAppliancesWac.wacSetTargetTemp.setSetTargetTemp(72);\n} else {\n  GeAppliancesWac.wacSetTargetTemp.skip(\"Outside temperature is not below 50°F or location is not New York.\");\n}"
  },
  {
    "intent": "When motion is detected on your Wyze Cam at 1377 Oak Street, Apt 3B, San Francisco, CA 94105, between the hours of 07:00 and 22:00, Noonlight will send help to that address.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar detectedAddress = \"1377 Oak Street, Apt 3B, San Francisco, CA 94105\";\nif (Wyzecam.motionTrigger.MotionDetected && hour >= 7 && hour < 22) {\n  Safetrek.alertAddress.setAddressLine1(\"1377 Oak Street\");\n  Safetrek.alertAddress.setAddressLine2(\"Apt 3B\");\n  Safetrek.alertAddress.setCity(\"San Francisco\");\n  Safetrek.alertAddress.setState(\"CA\");\n  Safetrek.alertAddress.setZip(\"94105\");\n} else {\n  Safetrek.alertAddress.skip(\"Motion detected outside of active hours (7 AM to 10 PM) or address not set.\");\n}"
  },
  {
    "intent": "Turn on the WiZ light in the living room to 75% brightness with the warm white mode whenever the motion sensor in my office detects movement between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  var sensorName = EnergenieMiHome.motionStarted.MotionSensorName;\n  if (sensorName === \"Motion sensor in my office\") {\n    Wiz.turnOn.setMode(\"Warm white\");\n    Wiz.turnOn.setDimming(\"75%\");\n  } else {\n    Wiz.turnOn.skip(\"Not the motion sensor in my office.\");\n  }\n} else {\n  Wiz.turnOn.skip(\"Outside of desired hours (07:00 to 22:00).\");\n}"
  },
  {
    "intent": "When the Flic button named \"Living Room\" is double-clicked, start recording with the Arlo device named \"Front Door Camera\" for 300 seconds.",
    "filter_code": "if (Flic.click.ClickType === 'double_click' && Flic.click.ButtonUuid === 'Living Room') {\n  Arlo.record.setDeviceName('Front Door Camera');\n  Arlo.record.setDuration(300);\n} else {\n  Arlo.record.skip('Incorrect button or click type.');\n}"
  },
  {
    "intent": "When the Netatmo Rain Gauge named \"My Rain gauge\" detects rain, turn on the WiZ light in the \"Living Room\" and set it to purple with a brightness of 80%.",
    "filter_code": "if (Netatmo.rainHasStarted.DeviceName === \"My Rain gauge\") {\n  Wiz.turnOn.setMode(\"purple\");\n  Wiz.turnOn.setDimming(\"80%\");\n  Wiz.turnOn.skip();\n}"
  },
  {
    "intent": "When the air quality index from my Kaiterra Laseregg device exceeds 100, change the color of all my Philips Hue lights in the living room to a deep purple, #6c003b, and when it's between 50 and 100, set the color to a vibrant orange, #ff9900, but if the air quality index is below 50, keep the lights at a soothing green, #25aa68.",
    "filter_code": "let aqi = parseInt(Kaiterra.lasereggAqi.Aqi)\n\nif (aqi < 50) {\n  Hue.setColorAllHue.setColor(\"#25aa68\")\n} else if (aqi >= 50 && aqi <= 100) {\n  Hue.setColorAllHue.setColor(\"#ff9900\")\n} else {\n  Hue.setColorAllHue.setColor(\"#6c003b\")\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected on my KNC1-W-00000088 device between 07:00 and 19:00, toggle the WeMo Insight Switch with macaddress 001122334455 to switch it on if it's currently off, or off if it's currently on.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n    WemoInsightSwitch.attributeInsightToggleDiscrete.setMacaddress(\"001122334455\");\n  } else {\n    WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Incorrect gesture or device.\");\n  }\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and it occurs at 04:17:06 on July 8th, turn on the SkylinkNet light switch named \"Living Room\" using the hub password \"MyHouse123\".",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" &&\n    DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" &&\n    DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\") {\n  Skylinknet.devOn.setHubDev(\"Living Room\");\n  Skylinknet.devOn.setKey(\"MyHouse123\");\n} else {\n  Skylinknet.devOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Button Widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the current time is between 07:00 and 19:00, toggle the WeMo Light Switch with macaddress 00:11:22:33:44:55 on and off.",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour >= 7 && hour <= 19) {\n  WemoLightSwitch.attributeLsToggleDiscrete.setMacaddress(\"00:11:22:33:44:55\");\n} else {\n  WemoLightSwitch.attributeLsToggleDiscrete.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn on the WeMo dimmer located in the living room at sunrise when the current weather condition is Sunny and the temperature is above 18°C.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && parseFloat(Weather.sunRises.TempCelsius) > 18) {\n  // No need to skip, as we want the action to happen under these conditions\n} else {\n  WemoDimmer.attributeDimmerToggleDiscrete.skip(\"Not turning on because it's either not sunny or temperature is below 18°C.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, toggle the WeMo light switch with macaddress 00:11:22:33:44:55 on or off.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  WemoLightSwitch.attributeLsToggleDiscrete.setMacaddress(\"00:11:22:33:44:55\");\n} else {\n  WemoLightSwitch.attributeLsToggleDiscrete.skip(\"Invalid gesture or device.\");\n}"
  },
  {
    "intent": "Brighten the living room lights connected to my WeMo Dimmer to 75% at sunset when the outside temperature is above 18°C and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  WemoDimmer.attributeDimmerBrightnessChangeDiscrete.setSubType(\"75%\");\n} else {\n  WemoDimmer.attributeDimmerBrightnessChangeDiscrete.skip(\"Conditions not met\");\n}"
  },
  {
    "intent": "Turn on the outdoor porch light at sunset when the temperature is above 18°C and the weather condition is Sunny, using the Hager IoT device named \"Porch Light\".",
    "filter_code": "if (Weather.sunSets.TempCelsius > 18 && Weather.sunSets.Condition === \"Sunny\") {\n  HagerIot.switchon.setCid(\"Porch Light\");\n} else {\n  HagerIot.switchon.skip(\"Temperature is not above 18°C or weather condition is not Sunny.\");\n}"
  },
  {
    "intent": "Turn on the Living Room WeMo Insight Switch when a Triple Knock gesture is detected by the KNC1-W-00000088 Device on the Knocki.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  WemoInsightSwitch.attributeInsightOnDiscrete.setMacaddress(\"Living Room\");\n} else {\n  WemoInsightSwitch.attributeInsightOnDiscrete.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088 at any time, turn off the WeMo light switch named LivingRoomSwitch.",
    "filter_code": "if (Knocki.knocki.Gesture === \"Triple Knock\" && Knocki.knocki.Device === \"KNC1-W-00000088\") {\n  WemoLightSwitch.attributeLsOffDiscrete.setMacaddress(\"LivingRoomSwitch\");\n} else {\n  WemoLightSwitch.attributeLsOffDiscrete.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "Turn off the outdoor porch light when the sun rises at my location, which is set to New York, and the current weather condition is Sunny, ensuring a beautiful day ahead.",
    "filter_code": "if (Weather.sunRises.Condition === \"Sunny\" && Weather.sunRises.Location === \"New York\") {\n  HagerIot.switchoff.skip(\"Sun has risen in New York and it's sunny.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Philips Hue light when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value of \"Green\" between 19:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minutes = Meta.currentUserTime.minute();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && apilioValue1 === \"Green\") {\n  if (hour >= 19 && hour < 22) {\n    // Do nothing and let the action proceed\n  } else {\n    Hue.turnOnLight.skip(\"Not within the specified nighttime hours (7 PM to 10 PM).\");\n  }\n} else {\n  Hue.turnOnLight.skip(\"Event name or Apilio value does not match.\");\n}"
  },
  {
    "intent": "When the pusher on your Kronaby watch is pressed with a double press at any time, toggle your WeMo Insight Switch located at the office, which has the macaddress 00:11:22:33:44:55, on or off.",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\") {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.setMacaddress(\"00:11:22:33:44:55\");\n} else {\n  WemoInsightSwitch.attributeInsightToggleDiscrete.skip(\"Not a double press.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp when Apilio receives the \"run_only_at_nighttime\" event between 20:00 and 06:00 with a custom value of \"Green\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && Apilio.iftttActionReports.ApilioValue1 === \"Green\"\n    && (hour >= 20 || hour < 6)) {\n  // Do nothing, let the action proceed\n} else {\n  Hue.turnOffAllHue.skip(\"Conditions not met for turning off the light.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the press occurs between 07:00 and 19:00, turn on the living room fan using the SwitchBot device.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 19) {\n  Switchbot.pressBot.setChoseADevice(\"Living Room Fan\");\n} else {\n  Switchbot.pressBot.skip(\"Button press does not match the specified location or time.\");\n}"
  },
  {
    "intent": "When the EasyControl of Bosch device with ID \"1234567890\" enters away mode, as indicated by the \"Away mode\" event text, switch off all Philips Hue lights in the living room.",
    "filter_code": "if (EasycontrolBosch.awayModeOn.deviceId === \"1234567890\" && EasycontrolBosch.awayModeOn.EventText === \"Away mode\") {\n  Hue.turnOffAllHue.setLights(\"living room\");\n}"
  },
  {
    "intent": "When the EasyControl device with ID \"1234567890\" enters home mode, as detected by the \"EasyControl of Bosch\" system at a time like \"2023-03-15T18:00:00+01:00\", switch on all Philips Hue lights in the living room.",
    "filter_code": "if (EasycontrolBosch.homeModeOn.deviceId === \"1234567890\" && EasycontrolBosch.homeModeOn.EventText === \"Home mode\") {\n  Hue.turnOnAllHue.setLights(\"Living room\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp when the temperature in New York drops below 50°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 50) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"off\");\n  Ewelink.lightSwitchAction.skip(\"Temperature in New York dropped below 50°F.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp TP-Link Kasa device when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value 1 of \"Green\" and the event was created between 19:00 and 23:00.",
    "filter_code": "var hour = Apilio.iftttActionReports.CreatedAt.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && apilioValue1 === \"Green\" && hour >= 19 && hour <= 23) {\n  // No need to skip, let the action proceed\n} else {\n  Kasa.turnOn.skip(\"Conditions not met for turning on the Living Room Lamp.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp TP-Link Kasa device when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value 1 of \"Green\" and the event was created between 19:00 and 23:00.",
    "filter_code": "var hour = new Date(Apilio.iftttActionReports.CreatedAt).getHours();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && Apilio.iftttActionReports.ApilioValue1 === \"Green\"\n    && hour >= 19 && hour <= 23) {\n  // Do nothing, let the action proceed\n} else {\n  Kasa.turnOff.skip(\"Conditions not met to turn off the device.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, occurring at 04:17:06 on July 8, 2020, turn on the Hubitat device named \"Living Room Light\".",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" &&\n    DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\" &&\n    DoButton.doButtonNewCommandCommon.OccurredAt === \"2020-07-08T04:17:06+05:00\") {\n  Hubitat.actionOn.setDevice(\"Living Room Light\");\n} else {\n  Hubitat.actionOn.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp when the temperature in New York drops below 50°F.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempFahrenheit < 50) {\n  Ewelink.lightSwitchAction.setOnoffActQuery(\"off\");\n  Ewelink.lightSwitchAction.skip(\"Turning off Living Room Lamp due to temperature drop.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp TP-Link Kasa device when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value 1 of \"Green\" and the event was created between 19:00 and 23:00.",
    "filter_code": "var hour = Apilio.iftttActionReports.CreatedAt.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && apilioValue1 === \"Green\" && hour >= 19 && hour <= 23) {\n  // Do nothing, let the action proceed\n} else {\n  Kasa.turnOn.skip(\"Conditions not met for turning on the Living Room Lamp.\");\n}"
  },
  {
    "intent": "Turn off the Living Room Lamp TP-Link Kasa device when an Apilio event named \"run_only_at_nighttime\" is triggered with a custom value 1 of \"Green\" and the event was created between 19:00 and 23:00.",
    "filter_code": "var hour = Apilio.iftttActionReports.CreatedAt.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && apilioValue1 === \"Green\" && hour >= 19 && hour <= 23) {\n  // No action needed, let the action proceed\n} else {\n  Kasa.turnOff.skip(\"Conditions not met to turn off the device.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Lamp, which is controlled by the eWeLink 1-Channel Switch, when Apilio triggers the \"good_morning\" event between 07:00 and 08:00, and set the lamp to turn off automatically after 30 minutes if the event's custom value 1 is \"Daytime\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"good_morning\" && hour >= 7 && hour < 8) {\n  if (apilioValue1 === \"Daytime\") {\n    Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n    // Automatically turn off after 30 minutes\n    var delay = 30 * 60 * 1000; // 30 minutes in milliseconds\n    setTimeout(function() {\n      Ewelink.lightSwitchAction.setOnoffActQuery(\"off\");\n    }, delay);\n  } else {\n    Ewelink.lightSwitchAction.setOnoffActQuery(\"on\");\n  }\n} else {\n  Ewelink.lightSwitchAction.skip(\"Event name or time does not match.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 from Apilio is \"Green\", turn on channel 1 of the eWeLink 2-Channel Switch named \"Living Room Lights\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" &&\n    (hour >= 20 || hour < 6) &&\n    apilioValue1 === \"Green\") {\n  Ewelink.switches4Action.setSwitches4Query(\"Living Room Lights\");\n  Ewelink.switches4Action.setSwitches4OutletQuery(1);\n  Ewelink.switches4Action.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.switches4Action.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event \"run_only_at_nighttime\" is triggered between 20:00 and 06:00 with a custom value of \"Green\" for Apilio value1, turn off the MagicHue light named \"Living Room Lamp\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && Apilio.iftttActionReports.ApilioValue1 === \"Green\"\n    && (hour >= 20 || hour < 6)) {\n  if (MagicHue.whichLights !== \"Living Room Lamp\") {\n    MagicHue.poweroff.skip(\"Not the Living Room Lamp.\");\n  } else {\n    // No need to skip, let the action proceed\n  }\n} else {\n  MagicHue.poweroff.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 received from Apilio is \"Green\", switch on the MagicHue light in the living room with a brightness level of 75% and set the color to Blue.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6) && apilioValue1 === \"Green\") {\n  MagicHue.poweron.setWhichLights(\"Living room\");\n  MagicHue.poweron.setColor(\"Blue\");\n  MagicHue.poweron.setBrightness(75);\n} else {\n  MagicHue.poweron.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Flic button named \"Office Button\" is double clicked between 07:00 and 19:00, turn on the Hubitat device \"Living Room Light\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ButtonUuid === \"Office Button\" && Flic.click.ClickType === \"double_click\" && hour >= 7 && hour < 19) {\n  if (hour < 7 || hour > 19) {\n    Hubitat.actionOn.skip(\"Outside of active hours (7 AM to 7 PM).\");\n  } else {\n    Hubitat.actionOn.setDevice(\"Living Room Light\");\n  }\n} else {\n  Hubitat.actionOn.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When the Flic button named \"MyOfficeButton\" is double clicked between 07:00 and 19:00, turn off the Hubitat device \"LivingRoomLight\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Flic.click.ButtonUuid === \"MyOfficeButton\" && Flic.click.ClickType === \"double_click\" && hour >= 7 && hour < 19) {\n  Hubitat.actionOff.setDevice(\"LivingRoomLight\");\n} else {\n  Hubitat.actionOff.skip(\"Condition not met.\");\n}"
  },
  {
    "intent": "When the Bedroom switch SmartThing device is switched on at 7:00 PM, turn on the Living Room AC in comfort mode.",
    "filter_code": "var hour = SmartthingsV2.switchedOnSmartthings.SwitchedOnAt.hour();\nvar switchName = SmartthingsV2.switchedOnSmartthings.SwitchName;\nif (switchName === \"Bedroom switch\" && hour === 19) {\n  Ambiclimate.deviceModeComfort.setDeviceName(\"Living Room AC\");\n} else {\n  Ambiclimate.deviceModeComfort.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a Triple Knock gesture is detected by the Knocki device KNC1-W-00000088, adjust the brightness of the WeMo lighting device with macaddress 00:11:22:33:44:55 to a dimmed level of 50%, but only if the gesture occurs between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Knocki.knocki.Device === \"KNC1-W-00000088\" && Knocki.knocki.Gesture === \"Triple Knock\") {\n    WemoLighting.ledBrightnessChange.setSubType(\"50%\");\n  } else {\n    WemoLighting.ledBrightnessChange.skip(\"Either not the correct device or gesture.\");\n  }\n} else {\n  WemoLighting.ledBrightnessChange.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Turn on the WeMo light with macaddress 00:11:22:33:44:55 when motion is detected or a door is opened, as reported by the Blue by ADT sensor named 'Living Room Sensor', between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Bluebyadt.sensor.EventType === \"Motion\" || Bluebyadt.sensor.EventType === \"Open\") {\n    if (Bluebyadt.sensor.device_name === \"Living Room Sensor\") {\n      WemoLighting.ledTurnOn.setMacaddress(\"00:11:22:33:44:55\");\n    } else {\n      WemoLighting.ledTurnOn.skip(\"Device name does not match 'Living Room Sensor'.\");\n    }\n  } else {\n    WemoLighting.ledTurnOn.skip(\"Event type is not 'Motion' or 'Open'.\");\n  }\n} else {\n  WemoLighting.ledTurnOn.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 from Apilio is \"Green\", turn on channel 1 of the eWeLink 3-Channel Switch named \"Living Room Lights\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && (hour >= 20 || hour < 6)\n    && Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  if (Ewelink.switches4Action === \"On\") {\n    Ewelink.switches4Action.setSwitches4Query(\"Living Room Lights\");\n    Ewelink.switches4Action.setSwitches4OutletQuery(1);\n  } else {\n    Ewelink.switches4Action.skip(\"Not turning on the switch as per conditions.\");\n  }\n} else {\n  Ewelink.switches4Action.skip(\"Conditions not met to turn on the switch.\");\n}"
  },
  {
    "intent": "When the pusher on your Kronaby watch is pressed with a double press type at any time, and you are within the latitude range of 55.611947 and longitude range of 12.978337, then turn on the WeMo Coffeemaker device named \"KitchenBrew\" to start brewing coffee.",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" &&\n    Kronaby.pusherPressed.Latitude >= 55.611947 &&\n    Kronaby.pusherPressed.Latitude <= 55.611947 &&\n    Kronaby.pusherPressed.Longitude >= 12.978337 &&\n    Kronaby.pusherPressed.Longitude <= 12.978337) {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.set(\"KitchenBrew\", \"brew\");\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the pusher on your Kronaby watch is double-pressed at latitude 55.611947 and longitude 12.978337, turn off the WeMo Insight switch named \"Living Room Switch\" and also turn off all LIFX lights.",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\" && Kronaby.pusherPressed.Latitude === \"55.611947\" && Kronaby.pusherPressed.Longitude === \"12.978337\") {\n  WemoInsightSwitch.attributeINSIGHTOFF.setMacaddress(\"Living Room Switch\");\n  LIFX.turnOffAllLights.skip(\"Double press at specified location.\");\n}"
  },
  {
    "intent": "Turn on the temperature control zone with serial number 'SN12345' and set to 'Heating' mode when the measured temperature from device 'Living Room Sensor' exceeds 22°C.",
    "filter_code": "if (ViewProd.sensorTemperature.Device === \"Living Room Sensor\" && ViewProd.sensorTemperature.State > 22) {\n  Kumocloud.turnOn.setSerial(\"SN12345\");\n  Kumocloud.turnOn.setMode(\"Heating\");\n} else {\n  Kumocloud.turnOn.skip(\"Conditions not met to turn on the temperature control zone.\");\n}"
  },
  {
    "intent": "When the Scout Alarm is dismissed in Away mode by Dave via IFTTT, turn off the Living Room Light device on Hubitat.",
    "filter_code": "if (Scoutalarm.modeDismissed.Name === \"Away\" && Scoutalarm.modeDismissed.By === \"Dave via IFTTT\") {\n  Hubitat.actionOff.setDevice(\"Living Room Light\");\n} else {\n  Hubitat.actionOff.skip(\"Conditions not met to turn off the Living Room Light.\");\n}"
  },
  {
    "intent": "Turn on the WeMo lights in the Living Room group when motion is detected by the Front Door camera between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = IspyAgent.motionDetected.Device;\nvar groupId = \"Living Room\"; // Assuming this is the ID for the Living Room group\nvar frontDoorCamera = \"Front Door camera\"; // Assuming this is the exact name of the Front Door camera\n\nif (deviceName !== frontDoorCamera) {\n  WemoLighting.groupLedTurnOn.skip(\"Motion detected by a different camera.\");\n} else if (hour < 7 || hour > 22) {\n  WemoLighting.groupLedTurnOn.skip(\"Outside of desired hours (07:00 to 22:00).\");\n} else {\n  // No need for additional code here; the action will proceed as normal\n}"
  },
  {
    "intent": "Start a brew cycle with the WeMo Coffeemaker when a motion detection event is triggered at home between 06:00 and 10:00, as indicated by the text \"Motion Tag: Detected!\" from the MESH app.",
    "filter_code": "var hour = new Date(Mesh.events.TriggeredAt).getHours();\nif (Mesh.events.Text === \"Motion Tag: Detected!\" && hour >= 6 && hour < 10) {\n  // Do nothing, let the action proceed\n} else {\n  WemoCoffeemaker.attributeCoffeeMakerBrewMode.skip(\"Not a motion detection event or outside of the specified time frame.\");\n}"
  },
  {
    "intent": "When the battery percentage of my Google Pixel 7 device falls below 15% after 20:00, switch on the Living Room Lamp using OSUM SMART to alert me about the critical battery health status.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar batteryPercentage = AndroidBattery.batteryLow.BatteryPercentage;\nvar deviceName = AndroidBattery.batteryLow.DeviceName;\n\nif (deviceName === \"Google Pixel 7\" && batteryPercentage < 15 && hour >= 20) {\n  Osumsmart.switchOn.setDeviceList(\"Living Room Lamp\");\n} else {\n  Osumsmart.switchOn.skip(\"Conditions not met for alert.\");\n}"
  },
  {
    "intent": "When the SmartThings sensor named \"Living Room Sensor\" detects presence at 3:00 PM, then turn on the SwitchBot device named \"Office Light Bot\".",
    "filter_code": "if (SmartthingsV2.newPresentSmartthings.DeviceName === \"Living Room Sensor\" &&\n    Meta.currentUserTime.hour() === 15 &&\n    SmartthingsV2.newPresentSmartthings.ArrivedAt.includes(\"3:00 PM\")) {\n  Switchbot.turnOnBot.setChoseADevice(\"Office Light Bot\");\n} else {\n  Switchbot.turnOnBot.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a note is tagged with \"Important\" in Evernote, create a text file named \"Urgent_Note_{Title}\" in the \"/Documents/Notes\" folder of Dropbox, containing the note body in HTML format, including line breaks as needed.",
    "filter_code": "if (Evernote.addTagToNote.Tags.includes(\"Important\")) {\n  var filename = \"Urgent_Note_\" + Evernote.addTagToNote.Title;\n  var body = Evernote.addTagToNote.BodyHTML.replace(/<br>/g, \"\\n\");\n  Dropbox.createTextFileDb.setFilename(filename);\n  Dropbox.createTextFileDb.setBody(body);\n  Dropbox.createTextFileDb.setPath(\"/Documents/Notes\");\n} else {\n  Dropbox.createTextFileDb.skip(\"Note is not tagged with 'Important'.\");\n}"
  },
  {
    "intent": "Create a new note card in my \"Personal Notes\" Zoho Notebook with the HTML content of the email body, titled with the subject line \"Important Update\", and tagged with \"#email\" whenever I receive an email from \"john.doe@example.com\" with the keyword \"URGENT\" in the email body.",
    "filter_code": "if (Email.sendIftttAnEmailTagged.From === \"john.doe@example.com\" && Email.sendIftttAnEmailTagged.Body.includes(\"URGENT\")) {\n  Notebook.createNotecardWithHtml.setNoteContent(Email.sendIftttAnEmailTagged.BodyHTML);\n  Notebook.createNotecardWithHtml.setNotecardName(\"Important Update\");\n  Notebook.createNotecardWithHtml.setTags(\"#email\");\n} else {\n  Notebook.createNotecardWithHtml.skip(\"Does not match the criteria.\");\n}"
  },
  {
    "intent": "Create a new task in the \"Inbox\" section of MeisterTask whenever a note titled \"Today's Tasks\" and tagged with \"urgent, todo\" is created in the \"Tasks\" notebook in Evernote, using the note title as the task name and the first 100 characters of the note body HTML as the task description.",
    "filter_code": "if (Evernote.newNoteInNotebook.Notebook === \"Tasks\" &&\n    Evernote.newNoteInNotebook.Title === \"Today's Tasks\" &&\n    Evernote.newNoteInNotebook.Tags.includes(\"urgent\") &&\n    Evernote.newNoteInNotebook.Tags.includes(\"todo\")) {\n  var taskName = Evernote.newNoteInNotebook.Title;\n  var taskDescription = Evernote.newNoteInNotebook.BodyHTML.substring(0, 100);\n  Meistertask.createATask.setTaskName(taskName);\n  Meistertask.createATask.setSectionId(\"Inbox\");\n  Meistertask.createATask.setTaskDescription(taskDescription);\n} else {\n  Meistertask.createATask.skip(\"Note does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When a new transfer is finished on put.io with the type 'Video' and the name contains 'Movie', create a new task in Todoist with the project set to 'Watchlist', task content as 'Watch {{name}}', note as 'Download from: {{download_url}}', due date as 'today', and priority as 'High'.",
    "filter_code": "if (Putio.transferFinished.Type === \"Video\" && Putio.transferFinished.Name.includes(\"Movie\")) {\n  Todoist.createTask.setProjectId(\"Watchlist\");\n  Todoist.createTask.setTaskContent(\"Watch \" + Putio.transferFinished.Name);\n  Todoist.createTask.setNote(\"Download from: \" + Putio.transferFinished.DownloadUrl);\n  Todoist.createTask.setDueDate(\"today\");\n  Todoist.createTask.setPriority(\"High\");\n} else {\n  Todoist.createTask.skip(\"Transfer type is not 'Video' or name does not contain 'Movie'.\");\n}"
  },
  {
    "intent": "Create a new task in Asana's \"My Projects\" workspace, with the project name set to \"New Submissions\", and the task name set to \"Process JotForm Submission {{form_title}} from {{ip}}\". Add notes to the task including the submission date time \"{{submission_date_time}}\" and rich text data \"{{rich_text_data}}\". Set the due date to tomorrow and assign the task to \"John Doe\". Also, attach the uploaded file from the form submission available at \"{{file_url}}\".",
    "filter_code": "Asana.createTask.setWorkspace(\"My Projects\");\nAsana.createTask.setProjectName(\"New Submissions\");\nAsana.createTask.setTaskName(`Process JotForm Submission ${Jotform.latestFormSubmission.FormTitle} from ${Jotform.latestFormSubmission.IP}`);\nAsana.createTask.setNotes(`Submission Date Time: ${Jotform.latestFormSubmission.SubmissionDateTime}\\nRich Text Data:\\n${Jotform.latestFormSubmission.RichTextData}`);\nvar dueDate = new Date(Jotform.latestFormSubmission.SubmissionDateTime);\ndueDate.setDate(dueDate.getDate() + 1);\nAsana.createTask.setDueOn(dueDate.toISOString().split('T')[0]);\nAsana.createTask.setAssignee(\"John Doe\");\nAsana.createTask.setAttachAFile(Jotform.latestFormSubmission.FileUrl);"
  },
  {
    "intent": "When a new note is created in the Evernote notebook named \"Personal Notes\" with a title containing the word \"meeting\" and including the tags \"work, office\", copy its HTML content and create a new notecard in the Zoho Notebook named \"Work Notes\" with the notecard name set to the original note's title and add the tags \"important, followup\".",
    "filter_code": "if (Evernote.newNoteInNotebook.Notebook === \"Personal Notes\"\n    && Evernote.newNoteInNotebook.Title.includes(\"meeting\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"work\")\n    && Evernote.newNoteInNotebook.Tags.includes(\"office\")) {\n  Notebook.createNotecardWithHtml.setNoteContent(Evernote.newNoteInNotebook.BodyHTML);\n  Notebook.createNotecardWithHtml.setNotecardName(Evernote.newNoteInNotebook.Title);\n  Notebook.createNotecardWithHtml.setTags(\"important, followup\");\n} else {\n  Notebook.createNotecardWithHtml.skip(\"Note does not match the specified criteria.\");\n}"
  },
  {
    "intent": "When the Wireless Tag sensor for the \"Cellar\" tag detects a humidity level of 10.1% or lower, and the math expression \"RH-50\" evaluates to -40 or less, indicating the soil is too dry, start watering zone 3 on the Rachio Irrigation Controller for 10 minutes.",
    "filter_code": "if (Wirelesstag.tooDry.HumidityPercentage <= 10.1 && Wirelesstag.tooDry.TagName === \"Cellar\" && parseFloat(Wirelesstag.tooDry.Answer) <= -40) {\n  RachioIro.startZone.setDuration(\"10\");\n  RachioIro.startZone.setZoneId(\"3\");\n} else {\n  RachioIro.startZone.skip(\"Soil moisture conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 received from Apilio is \"Green\", then turn on the eWeLink 1-Channel Plug named \"Living Room Lamp\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\nvar plugQuery = \"Living Room Lamp\";\n\nif (eventName === \"run_only_at_nighttime\" &&\n    (hour >= 20 || hour < 6) &&\n    apilioValue1 === \"Green\") {\n  // No need to skip, let the action proceed\n} else {\n  Ewelink.plugAction.skip(\"Conditions not met for turning on the plug.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 from Apilio is \"Green\", then turn on channel 1 of the eWeLink 2-Channel Plug named \"Living Room Lamp\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\" &&\n    (hour >= 20 || hour < 6) &&\n    Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  if (Ewelink.plugs3Action !== undefined) {\n    Ewelink.plugs3Action.setPlugs3Query(\"Living Room Lamp\");\n    Ewelink.plugs3Action.setPlugs3OutletQuery(1);\n    Ewelink.plugs3Action.setOnoffActQuery(\"on\");\n  } else {\n    Ewelink.plugs3Action.skip(\"eWeLink 2-Channel Plug action is not supported.\");\n  }\n} else {\n  Ewelink.plugs3Action.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered between 20:00 and 06:00, and the custom value 1 from Apilio is \"Green\", turn on channel 1 of the eWeLink 3-Channel Plug named \"Living Room Lights\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar eventName = Apilio.iftttActionReports.EventName;\nvar apilioValue1 = Apilio.iftttActionReports.ApilioValue1;\n\nif (eventName === \"run_only_at_nighttime\" && (hour >= 20 || hour < 6) && apilioValue1 === \"Green\") {\n  Ewelink.plugs3Action.setPlugs3Query(\"Living Room Lights\");\n  Ewelink.plugs3Action.setPlugs3OutletQuery(1);\n  Ewelink.plugs3Action.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.plugs3Action.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Apilio event named \"run_only_at_nighttime\" is triggered at 20:00 and has a custom value of \"Green\", turn on channel 1 of the eWeLink 4-Channel Plug named \"Living Room Devices\".",
    "filter_code": "if (Apilio.iftttActionReports.EventName === \"run_only_at_nighttime\"\n    && Apilio.iftttActionReports.CreatedAt.getHours() === 20\n    && Apilio.iftttActionReports.ApilioValue1 === \"Green\") {\n  Ewelink.plugs3Action.setPlugs3Query(\"Living Room Devices\");\n  Ewelink.plugs3Action.setPlugs3OutletQuery(1);\n  Ewelink.plugs3Action.setOnoffActQuery(\"on\");\n} else {\n  Ewelink.plugs3Action.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Ohm hour starts at 04:17 on July 8th, and the Honeywell thermostat is set to cool, change the target temperature to 72 degrees Fahrenheit with a temperature scale of Fahrenheit for 3 hours.",
    "filter_code": "if (Ohmconnect.ohmHourEnd.OhmHourStart === \"2020-07-08T04:17:06+05:00\" && HoneywellTotalConnectComfort.getsystemmode() === \"cool\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"72\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setHours(\"3\");\n} else {\n  HoneywellTotalConnectComfort.setsystemtemperature.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When Tom's Withings Sleep detects him getting out of bed between 06:00 and 09:00, turn on his Home Connect Coffee Machine.",
    "filter_code": "var hour = WithingsSleep.bedout.DateandTime.hour();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nif (deviceUser === \"Tom\" && hour >= 6 && hour < 9) {\n  // No need to skip, the conditions are met\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Either not Tom or outside of desired hours (06:00-09:00).\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, turn off the Home Connect coffee machine named \"MyMorningBrew\" at the occurred time.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcCoffeeMachine.coffeeMakerTurnOff.setHaId(\"MyMorningBrew\");\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOff.skip(\"Latitude and longitude do not match the specified location.\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.82666360000001 and longitude -122.42301220000003, start the \"Espresso\" program on the coffee machine located in the kitchen with a bean amount set to \"Strong\" and a fill quantity of \"Double Shot\".",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  HcCoffeeMachine.coffeeMakerStartProgram.setHaId(\"kitchen_coffee_machine\");\n  HcCoffeeMachine.coffeeMakerStartProgram.setProgram(\"Espresso\");\n  HcCoffeeMachine.coffeeMakerStartProgram.setBeanAmount(\"Strong\");\n  HcCoffeeMachine.coffeeMakerStartProgram.setFillQuantity(\"Double Shot\");\n} else {\n  HcCoffeeMachine.coffeeMakerStartProgram.skip(\"Button press not at the specified location.\");\n}"
  },
  {
    "intent": "Start the Home Connect Dishwasher, which is identified as \"Kitchen Dishwasher\", with the \"Eco\" program every evening at 20:00, but only if remote start is activated and the door is closed.",
    "filter_code": "if (DateAndTime.everyDayAt.CheckTime.hour() === 20 && DateAndTime.everyDayAt.CheckTime.minute() === 0) {\n  var haId = \"Kitchen Dishwasher\";\n  var program = \"Eco\";\n  if (HcDishwasher.remoteStartActivated() && HcDishwasher.doorClosed()) {\n    HcDishwasher.dishwasherStartProgram.setHaId(haId);\n    HcDishwasher.dishwasherStartProgram.setProgram(program);\n  } else {\n    HcDishwasher.dishwasherStartProgram.skip(\"Remote start is not activated or the door is not closed.\");\n  }\n}"
  },
  {
    "intent": "Set the temperature of your connected Sauter radiators to 22°C every weekday at 07:00 and 19:00, using the \"Good Morning\" scenario on Mondays, Wednesdays, and Fridays, and the \"Good Evening\" scenario on Tuesdays and Thursdays.",
    "filter_code": "var time = DateAndTime.everyWeekdayAt.CheckTime;\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar hour = time.hour();\n\nif ((hour === 7 || hour === 19) && (dayOfWeek === \"Monday\" || dayOfWeek === \"Wednesday\" || dayOfWeek === \"Friday\")) {\n  if (hour === 7) {\n    SAUTERCozytouch.launchActionGroup.set({ action_group: \"Good Morning\" });\n  } else if (hour === 19) {\n    SAUTERCozytouch.launchActionGroup.set({ action_group: \"Good Evening\" });\n  }\n} else if ((hour === 7 || hour === 19) && (dayOfWeek === \"Tuesday\" || dayOfWeek === \"Thursday\")) {\n  if (hour === 7) {\n    SAUTERCozytouch.launchActionGroup.set({ action_group: \"Good Morning\" });\n  } else if (hour === 19) {\n    SAUTERCozytouch.launchActionGroup.set({ action_group: \"Good Evening\" });\n  }\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Not the right time or day\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, activate the Super Cooling mode of the Home Connect Fridge Freezer with ID MyKitchenFridge.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.8267\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.4230\") {\n  HcFridge.freezerActivateSuperCooling.setHaId(\"MyKitchenFridge\");\n} else {\n  HcFridge.freezerActivateSuperCooling.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When the Flic button named \"MorningStart\" is double-clicked between 06:00 and 09:00, turn on the Home Connect coffee machine named \"KitchenCoffee\".",
    "filter_code": "if (Flic.click.ButtonUuid !== \"MorningStart\" || Flic.click.ClickType !== \"double_click\") {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Invalid button or click type\");\n} else if (Meta.currentUserTime.hour() < 6 || Meta.currentUserTime.hour() > 9) {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Outside of desired time range (06:00-09:00)\");\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.setHaId(\"KitchenCoffee\");\n}"
  },
  {
    "intent": "When the Button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, and the press occurs between 07:00 and 22:00, activate the Super Freezing mode of the Home Connect Fridge Freezer, specifically the fridge with ID \"KitchenFridge\", without providing any reason.",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar occurredAtHour = new Date(DoButton.doButtonNewCommandCommon.OccurredAt).getHours();\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && occurredAtHour >= 7 && occurredAtHour < 22) {\n  HcFridge.freezerActivateSuperCooling.setHaId(\"KitchenFridge\");\n} else {\n  HcFridge.freezerActivateSuperCooling.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When my Jawbone JAMBOX Bluetooth device connects at 07:00, set the dimming level of my OSUM SMART device named \"Living Room Lamp\" to 50%.",
    "filter_code": "if (AndroidDevice.bluetoothConnected.DeviceName === \"Jawbone JAMBOX\" && AndroidDevice.bluetoothConnected.OccurredAt.hour() === 7) {\n  Osumsmart.setLevel.setDeviceList(\"Living Room Lamp\");\n  Osumsmart.setLevel.setLevels(50);\n} else {\n  Osumsmart.setLevel.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the Flic button named \"MorningStart\" is double-clicked at a location with longitude 18.0649000 and latitude 59.3325800, start the \"Espresso\" program on the Home Connect coffee machine located in the kitchen with a bean amount set to \"Strong\" and a fill quantity of \"Large\", but only if the click occurs between 07:00 and 10:00.",
    "filter_code": "if (Flic.click.ButtonUuid === \"MorningStart\" &&\n    Flic.click.ClickType === \"double_click\" &&\n    Flic.click.Longitude === \"18.0649000\" &&\n    Flic.click.Latitude === \"59.3325800\" &&\n    Meta.currentUserTime.hour() >= 7 &&\n    Meta.currentUserTime.hour() < 10) {\n  HcCoffeeMachine.coffeeMakerStartProgram.setHaId(\"kitchen_coffee_machine\");\n  HcCoffeeMachine.coffeeMakerStartProgram.setProgram(\"Espresso\");\n  HcCoffeeMachine.coffeeMakerStartProgram.setBeanAmount(\"Strong\");\n  HcCoffeeMachine.coffeeMakerStartProgram.setFillQuantity(\"Large\");\n} else {\n  HcCoffeeMachine.coffeeMakerStartProgram.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When I send an SMS from my Google Pixel 7 to the number 14155551234 with the text \"HeatUp\" between 07:00 and 19:00, change the temperature of my living room radiator connected to Sauter Cozytouch to 22°C using the \"Comfort\" scenario.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar deviceName = AndroidMessages.sentAMessageMatchingSearch.DeviceName;\nvar toNumber = AndroidMessages.sentAMessageMatchingSearch.ToNumber;\nvar text = AndroidMessages.sentAMessageMatchingSearch.Text;\n\nif (deviceName === \"Google Pixel 7\" && toNumber === \"14155551234\" && text === \"HeatUp\" && hour >= 7 && hour < 19) {\n  SAUTERCozytouch.launchActionGroup.setaction_group(\"Comfort\");\n  // Assuming there's a way to set the temperature, but it's not provided in the action details\n  // If there's an action detail for setting temperature, use it like this:\n  // SAUTERCozytouch.launchActionGroup.settemperature(22);\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Adjust the Honeywell thermostat to 68 degrees Fahrenheit 2 hours before summer on-peak hours start on weekdays, and set it to cool mode to pre-cool your home.",
    "filter_code": "if (FcuTod.afterTimeOfDayStarts.Season === \"Summer\" && FcuTod.afterTimeOfDayStarts.EventType === \"start\" && FcuTod.afterTimeOfDayStarts.HoursAfter === \"2\" && FcuTod.afterTimeOfDayStarts.DayType === \"Weekday\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"68\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setHours(\"2\");\n}"
  },
  {
    "intent": "Set the temperature of your Thermor connected radiators to 20°C every weekday at 07:00 and 19:00, using the \"Morning\" and \"Evening\" scenarios.",
    "filter_code": "var time = DateAndTime.everyWeekdayAt.CheckTime;\nvar hour = time.hour();\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\n\nif ((hour === 7 || hour === 19) && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  if (hour === 7) {\n    THERMORCozytouch.launchActionGroup.setActionGroup(\"Morning\");\n    THERMORCozytouch.launchActionGroup.setTemperature(20);\n  } else if (hour === 19) {\n    THERMORCozytouch.launchActionGroup.setActionGroup(\"Evening\");\n    THERMORCozytouch.launchActionGroup.setTemperature(20);\n  }\n} else {\n  THERMORCozytouch.launchActionGroup.skip(\"Not the scheduled time or day.\");\n}"
  },
  {
    "intent": "When an event titled \"Practice Presentation\" starts in my Google Calendar, and the event is taking place at \"Building A, Room 101\", adjust the temperature of my Sauter connected radiators to 22°C by launching the \"Good Morning\" action group on my SAUTER Cozytouch, 15 minutes before the event begins.",
    "filter_code": "if (GoogleCalendar.anyEventStarts.Title === \"Practice Presentation\" && GoogleCalendar.anyEventStarts.Where === \"Building A, Room 101\") {\n  if (Meta.currentUserTime.hour() === new Date(GoogleCalendar.anyEventStarts.Starts).getHours() - 1 ||\n      (Meta.currentUserTime.hour() === new Date(GoogleCalendar.anyEventStarts.Starts).getHours() && Meta.currentUserTime.minute() <= new Date(GoogleCalendar.anyEventStarts.Starts).getMinutes())) {\n    SAUTERCozytouch.launchActionGroup.setTemperature(22);\n  } else {\n    SAUTERCozytouch.launchActionGroup.skip(\"Not 15 minutes before the event starts.\");\n  }\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Event title or location does not match.\");\n}"
  },
  {
    "intent": "Play the song \"Happy\" by Pharrell Williams on your Android device connected via Bluetooth when your Home Connect Cookit, located in the kitchen, starts preparing a recipe between 17:00 and 20:00.",
    "filter_code": "var hour = HcCookProcessor.cookProcessorStarted.CreatedAt.hour();\nif (hour >= 17 && hour <= 20) {\n  AndroidDevice.playBestSong.setSong(\"Happy by Pharrell Williams\");\n} else {\n  AndroidDevice.playBestSong.skip(\"Outside of desired hours (5 PM to 8 PM).\");\n}"
  },
  {
    "intent": "If the state of My Instrument changes to Running during a run and user interaction is required, then change the color of the Office Nanoleaf device to Red (#FF0000).",
    "filter_code": "if (TecanConnect.instrumentState.InstrumentName === \"My Instrument\" &&\n    TecanConnect.instrumentState.InstrumentState === \"Running\" &&\n    TecanConnect.instrumentState.User === \"IFTTT_Demo_user\") {\n  Nanoleaf.changeColorRequest.setMyDevices(\"Office\");\n  Nanoleaf.changeColorRequest.setValue(\"Red (#FF0000)\");\n} else {\n  Nanoleaf.changeColorRequest.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Lorsque vous recevez une notification de l'application Twitter contenant le mot-clé \"urgence\" sur votre téléphone Google Pixel 7, activez le scénario \"Chauffage maximum\" sur vos radiateurs connectés Sauter.",
    "filter_code": "if (AndroidDevice.newNotificationFromApp.AppName === \"Twitter\"\n    && AndroidDevice.newNotificationFromApp.DeviceName === \"Google Pixel 7\"\n    && (AndroidDevice.newNotificationFromApp.NotificationMessage.includes(\"urgence\")\n        || AndroidDevice.newNotificationFromApp.NotificationTitle.includes(\"urgence\"))) {\n  SAUTERCozytouch.launchActionGroup.setActionGroup(\"Chauffage maximum\");\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Notification does not match the filter criteria.\");\n}"
  },
  {
    "intent": "When the myStrom Button with MAC address 00:11:22:33:44:55 is pressed in a single click manner, trigger an evaluation of the Apilio logic block identified as \"Morning Routine\" to automate tasks.",
    "filter_code": "if (Mystrom.button.type === \"single_click\" && Mystrom.button.mac === \"00:11:22:33:44:55\") {\n  Apilio.logicblockEvaluationRequests.setLogicblockIdentifier(\"Morning Routine\");\n} else {\n  Apilio.logicblockEvaluationRequests.skip(\"Button press does not match the single click of the specified myStrom Button.\");\n}"
  },
  {
    "intent": "When the average price exceeds 15 cents between 07:00 and 19:00 during summer, set the living room Honeywell thermostat to 72°F for 2 hours to cool.",
    "filter_code": "if (ComEd.averagePriceChange.AveragePrice > 15 && ComEd.averagePriceChange.FromHour >= 7 && ComEd.averagePriceChange.ToHour <= 19) {\n  if (new Date(ComEd.averagePriceChange.Timestamp).getMonth() === 5 || new Date(ComEd.averagePriceChange.Timestamp).getMonth() === 6 || new Date(ComEd.averagePriceChange.Timestamp).getMonth() === 7) {\n    HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"72\");\n    HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n    HoneywellTotalConnectComfort.setsystemtemperature.setHours(\"2\");\n    HoneywellTotalConnectComfort.setsystemtemperature();\n  } else {\n    HoneywellTotalConnectComfort.setsystemtemperature.skip(\"Not summer season.\");\n  }\n} else {\n  HoneywellTotalConnectComfort.setsystemtemperature.skip(\"Average price not exceeded or outside of time range.\");\n}"
  },
  {
    "intent": "When the electricity price in West Denmark is cheap, below 170 DKK per kWh and with a CO2 emission of less than 110 grams per kWh, turn on the Home Connect Dishwasher named \"Kitchen Dishwasher\" and then start the \"Eco\" program.",
    "filter_code": "if (TrueEnergyDK.electricityPriceCheap.Region === \"West Denmark\"\n    && parseFloat(TrueEnergyDK.electricityPriceCheap.Price) < 170\n    && parseFloat(TrueEnergyDK.electricityPriceCheap.Co2Emission) < 110) {\n  HcDishwasher.dishwasherTurnOn.skip(\"Turning on dishwasher due to cheap electricity price.\");\n  HcDishwasher.selectProgram.setProgram(\"Eco\");\n} else {\n  HcDishwasher.dishwasherTurnOn.skip(\"Electricity price or CO2 emission not within desired range.\");\n}"
  },
  {
    "intent": "When a run is completed on the instrument named \"Run Completed Successfully\" by user \"IFTTT_Demo_user\" with a completion message of \"Run Completed Successfully\" at any time, trigger a Nanoleaf Smarter Series device named \"Office Lights\" to blink with a red color (#FF0000) for 300 seconds.",
    "filter_code": "if (TecanConnect.runCompletionMessage.InstrumentName === \"Run Completed Successfully\" && TecanConnect.runCompletionMessage.User === \"IFTTT_Demo_user\" && TecanConnect.runCompletionMessage.RunCompletionMessage === \"Run Completed Successfully\") {\n  Nanoleaf.colorNotificationRequest.setMyDevices(\"Office Lights\");\n  Nanoleaf.colorNotificationRequest.setNotificationType(\"Blinking\");\n  Nanoleaf.colorNotificationRequest.setValue(\"#FF0000\");\n  Nanoleaf.colorNotificationRequest.setDuration(\"300\");\n} else {\n  Nanoleaf.colorNotificationRequest.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a run is completed on the \"Lab Instrument 1\" at any time, and the run completion message is \"Run Completed Successfully\", then automatically blink all Philips Hue lights in the living room.",
    "filter_code": "if (TecanConnect.runCompletionMessage.InstrumentName === \"Lab Instrument 1\" && TecanConnect.runCompletionMessage.RunCompletionMessage === \"Run Completed Successfully\") {\n  if (PhilipsHueWhichLightToBlink === \"all lights in the living room\") {\n    Hue.blinkAllHue();\n  } else {\n    Hue.blinkAllHue.skip(\"Not blinking because the light selection does not match 'all lights in the living room'.\");\n  }\n} else {\n  Hue.blinkAllHue.skip(\"Run not completed on 'Lab Instrument 1' or run completion message is not 'Run Completed Successfully'.\");\n}"
  },
  {
    "intent": "When the Fibaro Button labeled \"Kitchen Button\" is clicked twice between 06:00 and 10:00, turn on the Home Connect Coffee Machine named \"Morning Brew\".",
    "filter_code": "var hour = new Date(Fibaro.buttonClicked.CreatedAt).getHours();\nif (Fibaro.buttonClicked.DeviceId === \"Kitchen Button\" && Fibaro.buttonClicked.Parameter1 === \"2 clicks\" && hour >= 6 && hour < 10) {\n  if (HcCoffeeMachine.coffeeMakerTurnOn() !== true) {\n    HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Failed to turn on the coffee machine.\");\n  } else {\n    // Assuming the action details ha_id needs to be set\n    var haId = \"Morning Brew\";\n    HcCoffeeMachine.coffeeMakerTurnOn.setHaId(haId);\n  }\n} else {\n  HcCoffeeMachine.coffeeMakerTurnOn.skip(\"Conditions not met to turn on the coffee machine.\");\n}"
  },
  {
    "intent": "When the average price drops below 14 cents in the summer season, and this is the first time it goes under the threshold during an hour, update my Honeywell Total Connect Comfort thermostat system to resume its schedule.",
    "filter_code": "if (ComEd.averagePriceChange.AveragePrice < 14 && ComEd.averagePriceChange.which_season === \"summer\" && ComEd.averagePriceChange.trigger_type === \"goes under\" && ComEd.averagePriceChange.how_often_to_trigger === \"first time\") {\n  HoneywellTotalConnectComfort.settoschedule();\n} else {\n  HoneywellTotalConnectComfort.settoschedule.skip(\"Conditions not met to resume schedule.\");\n}"
  },
  {
    "intent": "When the state of \"My Instrument\" changes to \"Running\" and it's between 07:00 and 19:00, change all Philips Hue lights in the living room to the color \"#FF0000\" as an alert.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar instrumentName = TecanConnect.instrumentState.InstrumentName;\nvar instrumentState = TecanConnect.instrumentState.InstrumentState;\n\nif (instrumentName === \"My Instrument\" && instrumentState === \"Running\" && hour >= 7 && hour < 19) {\n  Hue.setColorAllHue.setColor(\"#FF0000\");\n} else {\n  Hue.setColorAllHue.skip(\"Instrument state or time does not match the condition.\");\n}"
  },
  {
    "intent": "Send a text message to phone number +1234567890 with the message \"A new client computer has connected to your DIR-2660 router at 07:00\" when a client connects to your D-Link Wi-Fi Router between 07:00 and 19:00.",
    "filter_code": "var hour = DlinkWifiRouter.routerClientConnect.CreatedAt.hour();\nif (hour >= 7 && hour <= 19) {\n  var message = \"A new client \" + DlinkWifiRouter.routerClientConnect.ClientName + \" has connected to your \" + DlinkWifiRouter.routerClientConnect.DeviceName + \" router at \" + DlinkWifiRouter.routerClientConnect.CreatedAt.hour() + \":00\";\n  AndroidMessages.sendAMessage.setText(message);\n  AndroidMessages.sendAMessage.setPhoneNumber(\"+1234567890\");\n} else {\n  AndroidMessages.sendAMessage.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When the Fort Collins Utilities Time of Day Pricing indicates it's summer and on-peak hours start, increase the temperature of your Honeywell Total Connect Comfort system by 3 degrees to 75°F to save on cooling costs, and then reset the temperature back to its previous setting when on-peak hours end.",
    "filter_code": "if (FcuTod.timeOfDay.Season === \"Summer\" && FcuTod.timeOfDay.EventType === \"start\") {\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(\"75\");\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n} else if (FcuTod.timeOfDay.EventType === \"end\") {\n  // Assuming there's a way to get the previous temperature setting\n  // For demonstration purposes, let's assume it's stored in a variable named 'previousTemperature'\n  var previousTemperature = 72; // Replace with actual logic to retrieve previous temperature\n  HoneywellTotalConnectComfort.setsystemtemperature.setTargetTemperature(previousTemperature.toString());\n  HoneywellTotalConnectComfort.setsystemtemperature.setTemperatureScale(\"Fahrenheit\");\n}"
  },
  {
    "intent": "When a custom message is sent by \"My Laboratory Instrument\" on the Tecan Connect, and the message type is \"Error\" with content containing the keyword \"urgent\", and the event time is between 08:00 and 17:00, then send a notification to my primary device with the message \"Instrument Alert: Error occurred - {{custom_message}}\".",
    "filter_code": "var hour = TecanConnect.customMessage.TimeOfEvent.hour();\nvar instrumentName = TecanConnect.customMessage.InstrumentName;\nvar customMessageType = TecanConnect.customMessage.CustomMessage.split(\":\")[0].trim();\nvar customMessageContent = TecanConnect.customMessage.CustomMessage;\n\nif (instrumentName === \"My Laboratory Instrument\"\n    && customMessageType === \"Error\"\n    && customMessageContent.toLowerCase().includes(\"urgent\")\n    && hour >= 8 && hour < 17) {\n  IfNotifications.sendNotification.setMessage(\"Instrument Alert: Error occurred - \" + customMessageContent);\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Start the dishwasher in the kitchen, which is connected to Home Connect, using the \"Eco\" program when the electricity price in West Denmark is below 150 DKK per kWh and the CO2 emission is less than 120 grams per kWh, ensuring it finishes by 07:00 for breakfast.",
    "filter_code": "if (TrueEnergyDK.electricityPriceCheap.Region === \"West Denmark\"\n    && parseFloat(TrueEnergyDK.electricityPriceCheap.Price) < 150\n    && parseFloat(TrueEnergyDK.electricityPriceCheap.Co2Emission) < 120) {\n  HcDishwasher.dishwasherStartProgram.setHaId(\"kitchen_dishwasher\");\n  HcDishwasher.dishwasherStartProgram.setProgram(\"Eco\");\n} else {\n  HcDishwasher.dishwasherStartProgram.skip(\"Electricity price or CO2 emission not optimal.\");\n}"
  },
  {
    "intent": "Arm the smanos security system to away mode when the Logitech POP button named \"Living Room\" is short pressed, with a battery level above 50, and the trigger source is from a physical button.",
    "filter_code": "if (LogitechPop.shortPress.Name === \"Living Room\" && LogitechPop.shortPress.Battery > 50 && LogitechPop.shortPress.Source === \"btn\") {\n  Smanos.armAway();\n} else {\n  Smanos.armAway.skip(\"Conditions not met to arm the smanos security system.\");\n}"
  },
  {
    "intent": "When the Cookit with ID \"Kitchen_Cookit\" has finished cooking, as indicated by the creation time of the event being after 12:00 PM, let Homey \"Living_Room_Homey\" speak the text \"Cooking is done, please remove your food from the Cookit\".",
    "filter_code": "var createdAt = HcCookProcessor.cookProcessorFinished.CreatedAt;\nvar hour = new Date(createdAt).getHours();\nif (hour >= 12 && HcCookProcessor.cookProcessorFinished.ha_id === \"Kitchen_Cookit\") {\n  Homey.letHomeySpeak.setWhatText(\"Cooking is done, please remove your food from the Cookit\");\n  Homey.letHomeySpeak.setWhichHomey(\"Living_Room_Homey\");\n} else {\n  Homey.letHomeySpeak.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When an event titled \"Team Meeting\" ends in my primary Google Calendar, adjust the temperature of my living room Sauter radiators to 22°C as part of the \"Coming Home\" action group.",
    "filter_code": "if (GoogleCalendar.anyEventEnds.Title === \"Team Meeting\" && GoogleCalendar.anyEventEnds.Calendar === \"primary\") {\n  SAUTERCozytouch.launchActionGroup.setTemperature(22);\n  SAUTERCozytouch.launchActionGroup.setActionGroup(\"Coming Home\");\n} else {\n  SAUTERCozytouch.launchActionGroup.skip(\"Event title or calendar does not match.\");\n}"
  },
  {
    "intent": "When you press the button on your phone at a location like 37.82666360000001 latitude and -122.42301220000003 longitude, set your Mapeheat Thermo Connect thermostat, which you use frequently, to 22 degrees Celsius for 2 hours.",
    "filter_code": "if (DoButton.doButtonNewCommandCommon.Latitude === \"37.82666360000001\" && DoButton.doButtonNewCommandCommon.Longitude === \"-122.42301220000003\") {\n  MapeiMapeheat.setTemperature.setSetpointTemperature(\"22\");\n  MapeiMapeheat.setTemperature.setScale(\"Celsius\");\n  MapeiMapeheat.setTemperature.setDuration(\"2 hours\");\n} else {\n  MapeiMapeheat.setTemperature.skip(\"Location does not match.\");\n}"
  },
  {
    "intent": "When Phyn detects a freeze warning alert at my Vacation home, turn up the heat on my Living Room Thermostat to 72 degrees Fahrenheit.",
    "filter_code": "if (Phyn.alertRaised.AlertType === \"Freeze Warning\" && Phyn.alertRaised.HomeName === \"Vacation home\") {\n  GoogleNestThermostat.setHotTemperature.setDegrees(\"72\");\n  GoogleNestThermostat.setHotTemperature.setTemperatureUnit(\"Fahrenheit\");\n  GoogleNestThermostat.setHotTemperature.skip();\n}"
  },
  {
    "intent": "When the temperature outside reaches 18 degrees Celsius in London, and the weather condition is Sunny, turn down the temperature of your Living Room Thermostat to 22.5 degrees Celsius.",
    "filter_code": "if (Weather.currentTemperatureDropsBelow.TempCelsius === \"18\" && Weather.currentTemperatureDropsBelow.Condition === \"Sunny\" && Weather.currentTemperatureDropsBelow.location === \"London\") {\n  LightwaverfHeating.setTemperature.setWhatTemperature(\"22.5\");\n  LightwaverfHeating.setTemperature.skip(\"Temperature set to 22.5 degrees Celsius for Living Room Thermostat\");\n}"
  },
  {
    "intent": "Schließe die Rollläden, wenn die Raumtemperatur über 25 Grad Celsius steigt, an einem sonnigen Tag, in deinem Wohnzimmer, zwischen 07:00 und 19:00 Uhr, mit einer Qbox-Aktion, die den Code \"ROLL_LADEN_SCHLIESSEN\" ausführt.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Weather.currentTemperatureDropsBelow.TempCelsius > 25) {\n    if (Weather.currentTemperatureDropsBelow.Condition === \"Sunny\") {\n      Coqon.simpleRuleAction.set(\"action_code\", \"ROLL_LADEN_SCHLIESSEN\");\n    } else {\n      Coqon.simpleRuleAction.skip(\"Not a sunny day.\");\n    }\n  } else {\n    Coqon.simpleRuleAction.skip(\"Temperature is not above 25 degrees Celsius.\");\n  }\n} else {\n  Coqon.simpleRuleAction.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When motion is detected by my Living Room Wyze camera between 07:00 and 22:00, update the 'Someone_Is_Home' Apilio variable to true.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (Wyzecam.motionTrigger.MotionDetected === \"Motion detected on your wyze camera.\" && Wyzecam.motionTrigger.TriggerTime !== null) {\n  var triggerHour = new Date(Wyzecam.motionTrigger.TriggerTime).getHours();\n  if (triggerHour >= 7 && triggerHour < 22 && Wyzecam.serialize_device_info === \"Living Room\") {\n    Apilio.booleanVariableToTrueUpdates.setVariableIdentifier(\"Someone_Is_Home\");\n  } else {\n    Apilio.booleanVariableToTrueUpdates.skip(\"Outside of specified hours or wrong device.\");\n  }\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"No motion detected or invalid trigger time.\");\n}"
  },
  {
    "intent": "Every day at 07:00, if the current time is between 07:00 and 19:00, deposit £13.70 into the \"Savings\" pot on Monzo to avoid wasting £5,000 in a year.",
    "filter_code": "var hour = DateAndTime.everyDayAt.CheckTime.hour();\nif (hour >= 7 && hour < 19) {\n  Monzo.potDeposit.setPot(\"Savings\");\n  Monzo.potDeposit.setAmount(\"13.70\");\n} else {\n  Monzo.potDeposit.skip(\"Not within deposit hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Send a daily email digest at 08:00 to my inbox with the title \"New Podcasts\" and a message containing the show name, description, and URL, including a link to the show on Spotify, for all new shows found on Spotify with the keyword \"technology\" or topic \"innovation\", including shows like \"Darknet Diaries\" or \"How I Built This\".",
    "filter_code": "var timeOfDay = \"08:00\";\nvar title = \"New Podcasts\";\nvar message = \"Check out these new podcasts: \";\nvar url = Spotify.searchShow.ShowUrl;\n\nif (Spotify.searchShow.Query === \"technology\" || Spotify.searchShow.Query === \"innovation\") {\n  if (Meta.currentUserTime.hour() === 8 && Meta.currentUserTime.minute() === 0) {\n    EmailDigest.sendDailyEmail.setTimeOfDay(timeOfDay);\n    EmailDigest.sendDailyEmail.setTitle(title);\n    message += \"<b>\" + Spotify.searchShow.ShowName + \"</b>: \" + Spotify.searchShow.ShowDescription + \". Listen now at: <a href='\" + url + \"'>\" + url + \"</a>\";\n    EmailDigest.sendDailyEmail.setMessage(message);\n    EmailDigest.sendDailyEmail.setUrl(url);\n  } else {\n    EmailDigest.sendDailyEmail.skip(\"Not sending email outside of scheduled time.\");\n  }\n} else {\n  EmailDigest.sendDailyEmail.skip(\"No matching query found.\");\n}"
  },
  {
    "intent": "When the button widget is pressed at a location with latitude 37.8267 and longitude -122.4230, between 15:00 and 16:00, liquidate all positions using Alpaca.",
    "filter_code": "var latitude = DoButton.doButtonNewCommandCommon.Latitude;\nvar longitude = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\n\nif (latitude === \"37.8267\" && longitude === \"-122.4230\" && hour === 15) {\n  Alpaca.liquidatePositions();\n} else if (hour === 16 && minute === 0) {\n  Alpaca.liquidatePositions();\n} else {\n  Alpaca.liquidatePositions.skip(\"Button press not within specified time or location.\");\n}"
  },
  {
    "intent": "Run the \"Security Checker\" Logicblock evaluation in Apilio every time the noise level rises above 60 decibels at the \"Living Room\" Netatmo Weather Station, triggering a check between 20:00 and 06:00 to potentially turn on the home security system.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar measuredNoiseLevel = Netatmo.noiseRisesAbove.MeasuredNoiseLevel;\nvar deviceName = Netatmo.noiseRisesAbove.DeviceName;\n\nif (deviceName === \"Living Room\" && measuredNoiseLevel > 60 && (hour >= 20 || hour < 6)) {\n  // Run the Security Checker Logicblock evaluation\n  Apilio.logicblockEvaluationRequests.setLogicblockIdentifier(\"Security Checker\");\n} else {\n  Apilio.logicblockEvaluationRequests.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Blink all Hue Lights in the living room when a notification from Twitter contains the keyword \"URGENT\" and is received on the Google Pixel 7 between 07:00 and 22:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 22) {\n  if (AndroidDevice.newNotificationFromApp.DeviceName === \"Google Pixel 7\"\n      && AndroidDevice.newNotificationFromApp.AppName === \"Twitter\"\n      && AndroidDevice.newNotificationFromApp.NotificationMessage.includes(\"URGENT\")) {\n    Hue.blinkAllHue.setLights([\"Living room\"]);\n  } else {\n    Hue.blinkAllHue.skip(\"Conditions not met\");\n  }\n}"
  },
  {
    "intent": "Get a notification with the episode name, description, and a link to the episode on Spotify whenever a new episode about \"Technology\" is released between 07:00 and 19:00, limited to 5 notifications per day, with an image of the episode cover art and a title saying \"New Tech Episode\".",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  var query = \"Technology\";\n  if (Spotify.searchEpisode.Query === query) {\n    var episodeName = Spotify.searchEpisode.EpisodeName;\n    var episodeDescription = Spotify.searchEpisode.EpisodeDescription;\n    var episodeUrl = Spotify.searchEpisode.EpisodeUrl;\n    var episodeCoverUrl = Spotify.searchEpisode.EpisodeCoverUrl;\n\n    IfNotifications.sendRichNotification\n      .setMessage(\"New episode: \" + episodeName + \". Description: \" + episodeDescription)\n      .setLinkUrl(episodeUrl)\n      .setTitle(\"New Tech Episode\")\n      .setImageUrl(episodeCoverUrl);\n\n    // Limit notifications to 5 per day\n    var count = Meta.filterCount;\n    if (count < 5) {\n      IfNotifications.sendRichNotification.skip();\n    } else {\n      IfNotifications.sendRichNotification.setLimitReached(true);\n    }\n  }\n}"
  },
  {
    "intent": "Save £1 to my Dozens savings account every time it rains in London, as reported by Weather Underground at 7:00 AM.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Rain\" && Meta.currentUserTime.hour() === 7) {\n  Dozens.save.setAmount(\"1\");\n} else {\n  Dozens.save.skip(\"It's not raining in London at 7:00 AM.\");\n}"
  },
  {
    "intent": "Simulate a gentle sunrise every weekday at 7:00 AM by gradually increasing the brightness of the Yeelight device in the living room from dim yellow to bright yellow over a period of 15 minutes.",
    "filter_code": "var currentTime = DateAndTime.everyWeekdayAt.CheckTime;\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar targetHour = 7;\nvar targetMinute = 0;\n\nif (currentTime.hour() === targetHour && currentTime.minute() === targetMinute && [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"].includes(dayOfWeek)) {\n  var yeelightDevice = \"Yeelight device in the living room\";\n  for (var i = 0; i < 15; i++) {\n    Yeelight.setColor.setRGB(yeelightDevice, { r: 255, g: 255 * (i / 14), b: 0 });\n    wait(60000); // wait for 1 minute\n  }\n} else {\n  Yeelight.setColor.skip(\"Not the target time or day.\");\n}"
  },
  {
    "intent": "When it's 7:00 AM, gradually increase the brightness of the Bedroom Light from 1% to 100% within 15 minutes.",
    "filter_code": "var currentTime = DateAndTime.everyDayAt.CheckTime;\nvar targetTime = \"7:00 AM\";\nif (currentTime.substring(0, 5) === targetTime) {\n  Yeelight.changeBright.setBright(1);\n  // Gradually increase brightness over 15 minutes\n  for (var i = 2; i <= 100; i++) {\n    setTimeout(function(bright) {\n      Yeelight.changeBright.setBright(bright);\n    }, (i - 1) * 9000, i); // 9000 ms = 9 seconds, 15 minutes / 100 steps\n  }\n} else {\n  Yeelight.changeBright.skip(\"Not 7:00 AM\");\n}"
  },
  {
    "intent": "On Christmas Day, at 07:00 in the New York timezone, set all Philips Hue lights in the living room to loop through colors.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nvar minute = Meta.currentUserTime.minute();\nvar timezoneOffset = -5; // New York timezone offset\nvar currentTime = new Date().getTime() + (timezoneOffset * 60 * 60 * 1000);\nvar christmasTime = new Date(Isitchristmas.christmas.CreatedAt).getTime() + (timezoneOffset * 60 * 60 * 1000);\nvar targetTime = new Date(christmasTime);\ntargetTime.setHours(7, 0, 0);\n\nif (hour === 7 && minute === 0 && Isitchristmas.christmas.Answer === \"YES\") {\n  Hue.setColorAllHue.skip(\"Color looping on Christmas Day\");\n  Hue.setColorAllHue.setColor(\"loop\");\n}"
  },
  {
    "intent": "When the date is the last day of the month and the time is 8:00 AM, send a push notification with the message \"Reminder: Rent is due today, please pay up to avoid late fees.\"",
    "filter_code": "var currentTime = DateAndTime.everyMonthOnThe.CheckTime;\nvar currentHour = currentTime.hour();\nvar currentDay = currentTime.day();\nvar daysInMonth = currentTime.daysInMonth();\n\nif (currentDay === daysInMonth && currentHour === 8) {\n  IfNotifications.sendNotification.setMessage(\"Reminder: Rent is due today, please pay up to avoid late fees.\");\n} else {\n  IfNotifications.sendNotification.skip(\"Not the last day of the month or not 8:00 AM.\");\n}"
  },
  {
    "intent": "Every day, deposit an amount into my Monzo pot named \"Savings\" that corresponds to the number of days left in the year plus one, divided by 100, so on January 1st it's £3.65, on January 2nd it's £3.64, and so on until December 31st when it's 1p, using the pot named \"Savings\" to store these daily savings.",
    "filter_code": "const today = Meta.currentUserTime;\n\n// How many days are there this year?\nconst days_in_year = today.isLeapYear() ? 366 : 365\n\nconst day_of_year = today.format('DDD');\n\n// Figure out how many days are left in the year\nconst days_left_in_the_year = days_in_year-parseInt(day_of_year);\n\n// Move to pot the number of days left in the year + 1 (so that 1st of Jan is £3.65 and 31st December is 1p)\n// Divide by 100 for pence\nconst amount = (days_left_in_the_year+1) / 100;\n\nMonzo.potDeposit.setAmount(amount.toFixed(2));\nMonzo.potDeposit.setPot(\"Savings\");"
  },
  {
    "intent": "Send me a weekly email digest with updates from the Environmental Protection Agency, filtered by the keyword \"climate change\", every Monday at 08:00, with the title \"EPA Weekly Updates\", and include a link to the EPA's latest news page.",
    "filter_code": "if (Epa.latestNews.EntryContentPreview.indexOf(\"climate change\") === -1) {\n  EmailDigest.sendWeeklyEmail.skip(\"Does not contain 'climate change'\");\n}\n\nvar currentTime = Meta.currentUserTime;\nvar currentDay = currentTime.day();\nvar currentHour = currentTime.hour();\n\nif (currentDay !== \"Monday\" || currentHour !== 8) {\n  EmailDigest.sendWeeklyEmail.skip(\"Not Monday at 08:00\");\n}\n\nEmailDigest.sendWeeklyEmail.setTitle(\"EPA Weekly Updates\");\nEmailDigest.sendWeeklyEmail.setDayOfWeek(\"Monday\");\nEmailDigest.sendWeeklyEmail.setTimeOfDay(\"08:00\");\nEmailDigest.sendWeeklyEmail.setMessage(Epa.latestNews.EntryContentPreview);\nEmailDigest.sendWeeklyEmail.setUrl(Epa.latestNews.EntryUrl);"
  },
  {
    "intent": "Get an email with the subject \"New Reason Magazine Article\" and the body containing the entry title, entry URL, and entry content whenever a new article is published in the Reason magazine RSS feed that matches the keyword \"Libertarian economics\", sent to your email address between 07:00 and 19:00 every day.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour <= 19) {\n  if (Feed.newFeedItem.EntryContent.includes(\"Libertarian economics\") || Feed.newFeedItem.EntryTitle.includes(\"Libertarian economics\")) {\n    var subject = \"New Reason Magazine Article\";\n    var body = \"Entry Title: \" + Feed.newFeedItem.EntryTitle + \"\\nEntry URL: \" + Feed.newFeedItem.EntryUrl + \"\\nEntry Content: \" + Feed.newFeedItem.EntryContent;\n    Email.sendMeEmail.setSubject(subject);\n    Email.sendMeEmail.setBody(body);\n  } else {\n    Email.sendMeEmail.skip(\"Article does not match the keyword 'Libertarian economics'.\");\n  }\n} else {\n  Email.sendMeEmail.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "Toggle the boolean variable \"OfficeMode\" in Apilio between TRUE and FALSE every Monday, Wednesday, and Friday at 08:00.",
    "filter_code": "var dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nvar officeModeCurrentValue = Apilio.getBooleanVariableValue(\"OfficeMode\");\n\nif ([\"Monday\", \"Wednesday\", \"Friday\"].includes(dayOfWeek) && DateAndTime.everyWeekdayAt.CheckTime.hour() === 8) {\n  if (officeModeCurrentValue) {\n    Apilio.booleanVariableToFalseUpdates(\"OfficeMode\");\n  } else {\n    Apilio.booleanVariableToTrueUpdates(\"OfficeMode\");\n  }\n} else {\n  Apilio.booleanVariableToTrueUpdates.skip(\"Not the specified day or time.\");\n}"
  },
  {
    "intent": "Send a daily email digest at 08:00 to my inbox with the title \"Today's Reminders\" and a message containing all new iOS reminders from the \"Shopping\" list with medium priority, including their titles, notes, and creation dates.",
    "filter_code": "if (IosReminders.newReminderAdded.List === \"Shopping\" && IosReminders.newReminderAdded.Priority === \"Medium\") {\n  EmailDigest.sendDailyEmail.setTimeOfDay(\"08:00\");\n  EmailDigest.sendDailyEmail.setTitle(\"Today's Reminders\");\n  var message = \"New reminders from Shopping list with medium priority:<br>\";\n  message += \"<b>\" + IosReminders.newReminderAdded.Title + \"</b><br>\";\n  message += \"Notes: \" + IosReminders.newReminderAdded.Notes + \"<br>\";\n  message += \"Created: \" + IosReminders.newReminderAdded.CreatedDate;\n  EmailDigest.sendDailyEmail.setMessage(message);\n} else {\n  EmailDigest.sendDailyEmail.skip(\"No new reminders match the filter criteria.\");\n}"
  },
  {
    "intent": "Turn the living room Philips Hue light bulb to green (#00FF00) when the Fort Collins Utilities Time of Day Pricing event is \"start\" and the day type is \"Weekday\" during the Summer season, indicating off-peak hours.",
    "filter_code": "if (FcuTod.timeOfDay.EventType === \"start\" && FcuTod.timeOfDay.DayType === \"Weekday\" && FcuTod.timeOfDay.Season === \"Summer\") {\n  Hue.setColorAllHue.setColor(\"#00FF00\");\n} else {\n  Hue.setColorAllHue.skip(\"Not off-peak hours or incorrect day/season.\");\n}"
  },
  {
    "intent": "When a sell transaction of 1.5 BTC is detected from the wallet bbf394c-193b-5b2a-9155-3b4732659ede, resulting in a payout of $200.00 at 2020-07-08T04:17:06+05:00, save $50.00 to Dozens savings account.",
    "filter_code": "if (Coinbase.walletSellDetected.CryptcourrencyAmount === \"1.5\" &&\n    Coinbase.walletSellDetected.Wallet === \"bbf394c-193b-5b2a-9155-3b4732659ede\" &&\n    Coinbase.walletSellDetected.PaidAmount === \"200.00\" &&\n    Coinbase.walletSellDetected.PayoutAt === \"2020-07-08T04:17:06+05:00\") {\n  Dozens.save.setAmount(\"50.00\");\n} else {\n  Dozens.save.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Toggle the living room light by pressing the IFTTT widget button when you are at home, located at latitude 37.8267 and longitude -122.4230, between 07:00 and 22:00.",
    "filter_code": "var lat = DoButton.doButtonNewCommandCommon.Latitude;\nvar lon = DoButton.doButtonNewCommandCommon.Longitude;\nvar hour = Meta.currentUserTime.hour();\n\nif (lat === \"37.8267\" && lon === \"-122.4230\" && hour >= 7 && hour < 22) {\n  // No action needed, proceed with the toggle\n} else {\n  Magichue.togglelight.skip(\"Not at home or outside of allowed hours\");\n}"
  },
  {
    "intent": "Turn on the Living Room Light device within 15 minutes of the sunset at your location, when the current temperature is above 18 degrees Celsius and the weather condition is Sunny.",
    "filter_code": "var sunsetTime = new Date(Weather.sunSets.SunsetAt);\nvar fifteenMinutesAfterSunset = new Date(sunsetTime.getTime() + 15 * 60 * 1000);\nvar currentTime = new Date();\nvar currentTempCelsius = Weather.sunSets.TempCelsius;\nvar weatherCondition = Weather.sunSets.Condition;\n\nif (currentTime >= sunsetTime && currentTime <= fifteenMinutesAfterSunset && currentTempCelsius > 18 && weatherCondition === \"Sunny\") {\n  // Turn on the Living Room Light device\n  Kasa.turnOn.setDevice(\"Living Room Light\");\n} else {\n  Kasa.turnOn.skip(\"Conditions not met to turn on the light.\");\n}"
  },
  {
    "intent": "Every Monday, deposit an amount equal to the current week of the year into my Monzo pot named \"Weekly Savings\", for example, £1 in Week 1, £2 in Week 2, and so on, starting from the current week.",
    "filter_code": "var week_of_year = Meta.currentUserTime.format('w');\nvar dayOfWeek = DateAndTime.everyWeekdayAt.DayOfWeek;\nif (dayOfWeek === \"Monday\") {\n  var amount = parseInt(week_of_year);\n  Monzo.potDeposit.setAmount(amount.toFixed(2));\n  Monzo.potDeposit.setPot(\"Weekly Savings\");\n}"
  },
  {
    "intent": "When the humidity level rises above 80% in New York, and the current temperature is higher than 75°F, send a notification with the message \"High humidity and warm weather alert: remember to stay hydrated and wear sunscreen, as the UV Index is expected to be high.\"",
    "filter_code": "if (Weather.currentHumidityRisesAbove.Humidity > 80 && Weather.currentHumidityRisesAbove.TempFahrenheit > 75 && Weather.currentHumidityRisesAbove.Location === \"New York\") {\n  IfNotifications.sendNotification.setMessage(\"High humidity and warm weather alert: remember to stay hydrated and wear sunscreen, as the UV Index is expected to be high.\");\n} else {\n  IfNotifications.sendNotification.skip(\"Conditions do not meet the threshold for a notification.\");\n}"
  },
  {
    "intent": "When the weather condition changes to Sunny at my home location, and the temperature is above 18 degrees Celsius, automatically apply the Relax scene on my Yeelight devices.",
    "filter_code": "if (Weather.currentConditionIs.Condition === \"Sunny\" && Weather.currentConditionIs.TempCelsius > 18) {\n  Yeelight.setScene.setBundleId(\"Relax\");\n} else {\n  Yeelight.setScene.skip(\"Weather condition or temperature does not match the criteria.\");\n}"
  },
  {
    "intent": "Turn on my Living Room Lamp at sunset when the temperature is 72 degrees Fahrenheit and the weather condition is Sunny.",
    "filter_code": "if (Weather.sunSets.TempFahrenheit === \"72\" && Weather.sunSets.Condition === \"Sunny\") {\n  Idevices.turnDeviceOn.setWhatDevice(\"Living Room Lamp\");\n} else {\n  Idevices.turnDeviceOn.skip(\"Temperature or weather condition does not match.\");\n}"
  },
  {
    "intent": "Turn on the TP-Link Kasa device named \"Living Room Lamp\" when a triple knock gesture is detected by Knocki between 07:00 and 19:00.",
    "filter_code": "var hour = Meta.currentUserTime.hour();\nif (hour >= 7 && hour < 19) {\n  if (Knocki.knocki.Gesture === \"Triple Knock\") {\n    Kasa.turnOn.setDevice(\"Living Room Lamp\");\n  } else {\n    Kasa.turnOn.skip(\"Incorrect gesture. Expected 'Triple Knock'.\");\n  }\n} else {\n  Kasa.turnOn.skip(\"Outside of active hours (7 AM to 7 PM).\");\n}"
  },
  {
    "intent": "When I post a new photo on Instagram with a caption containing the keyword \"productivity\" and the image is taken between 08:00 and 17:00, send an event to Welltory with the data source set to \"Social Media\", data type set to \"Post Engagement\", datetime set to the time the photo was posted, value set to 1, and a comment describing the applet as \"Tracking Instagram posts about productivity\".",
    "filter_code": "if (Instagram.anyNewPhotoByYou.Caption.includes(\"productivity\")\n    && Instagram.anyNewPhotoByYou.CreatedAt-hour >= 8\n    && Instagram.anyNewPhotoByYou.CreatedAt-hour <= 17) {\n  Welltory.sendEvent\n    .setDataSource(\"Social Media\")\n    .setDataType(\"Post Engagement\")\n    .setDatetime(Instagram.anyNewPhotoByYou.CreatedAt)\n    .setValue(\"1\")\n    .setComment(\"Tracking Instagram posts about productivity\");\n} else {\n  Welltory.sendEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "Save $5 toward my \"Dream Vacation\" goal in Qapital every time I upload a new photo to Instagram with a caption containing the word \"travel\".",
    "filter_code": "if (Instagram.anyNewPhotoByYou.Caption.toLowerCase().includes(\"travel\")) {\n  Qapital.saveTowardGoal.setGoal(\"Dream Vacation\");\n  Qapital.saveTowardGoal.setAmount(5);\n} else {\n  Qapital.saveTowardGoal.skip(\"Caption does not contain 'travel'.\");\n}"
  },
  {
    "intent": "Turn on the Living Room Hue light when Tom's Withings Sleep detects that he gets out of bed between 07:00 and 22:00.",
    "filter_code": "var hour = WithingsSleep.bedout.DateandTime.hour();\nvar deviceUser = WithingsSleep.bedout.DeviceUser;\nvar livingRoomLight = \"Living Room\";\n\nif (deviceUser === \"Tom\" && hour >= 7 && hour < 22) {\n  Hue.turnOnLight.setLight(livingRoomLight);\n} else {\n  Hue.turnOnLight.skip(\"Not Tom or outside of time range.\");\n}"
  },
  {
    "intent": "When I receive a phone call from Jon Snow on my Google Pixel 7 between 08:00 and 18:00, and the call lasts more than 10 seconds, send an event to Welltory with data source as \"Phone Calls\", data type as \"Productivity\", datetime set to the time of the call, value as \"1\" for one entry per event, and comment as \"Influential Call from Jon Snow\".",
    "filter_code": "if (AndroidPhone.receiveAPhoneCall.ContactName === \"Jon Snow\"\n    && AndroidPhone.receiveAPhoneCall.DeviceName === \"Google Pixel 7\"\n    && new Date(AndroidPhone.receiveAPhoneCall.OccurredAt).getHours() >= 8\n    && new Date(AndroidPhone.receiveAPhoneCall.OccurredAt).getHours() < 18\n    && parseInt(AndroidPhone.receiveAPhoneCall.CallLength) > 10) {\n  Welltory.sendEvent.setData Source(\"Phone Calls\");\n  Welltory.sendEvent.setData Type(\"Productivity\");\n  Welltory.sendEvent.setDatetime(AndroidPhone.receiveAPhoneCall.OccurredAt);\n  Welltory.sendEvent.setValue(\"1\");\n  Welltory.sendEvent.setComment(\"Influential Call from Jon Snow\");\n} else {\n  Welltory.sendEvent.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When a new track is found on Soundcloud with the search query \"electronic music\" and tags including \"killer, noise\", add it to my Spotify playlist named \"New Music\" if the track is available, using the song title from the Soundcloud track's title and including the artist name \"Daft Punk\" in the search query.",
    "filter_code": "if (Soundcloud.newTrackFromSearch.Tags.includes(\"killer, noise\") && Soundcloud.newTrackFromSearch.search_query === \"electronic music\") {\n  Spotify.addATrackToAPlaylist.setPlaylist(\"New Music\");\n  Spotify.addATrackToAPlaylist.setSearchQuery(Soundcloud.newTrackFromSearch.Title + \" \" + \"Daft Punk\");\n  Spotify.addATrackToAPlaylist.setArtistName(\"Daft Punk\");\n} else {\n  Spotify.addATrackToAPlaylist.skip(\"Track does not match search query or tags.\");\n}"
  },
  {
    "intent": "Record the air quality data from my uHoo sensor named \"Living Room\" whenever the PM2.5 level exceeds 15 ug/m3, and append this data to a Google Sheets spreadsheet named \"Air Quality Log\" with a formatted row including the timestamp, sensor name, and sensor value, in a folder path \"Air Quality Records/2024\".",
    "filter_code": "if (Uhoo.sensorNotification.UhooName === \"Living Room\" && Uhoo.sensorNotification.SensorName === \"PM2.5\" && parseFloat(Uhoo.sensorNotification.SensorValue) > 15) {\n  var formattedRow = Uhoo.sensorNotification.CreatedAt + \"|||\" + Uhoo.sensorNotification.UhooName + \"|||\" + Uhoo.sensorNotification.SensorName + \"|||\" + Uhoo.sensorNotification.SensorValue + \" \" + Uhoo.sensorNotification.SensorUnit;\n  GoogleSheets.appendToGoogleSpreadsheet.setFilename(\"Air Quality Log\");\n  GoogleSheets.appendToGoogleSpreadsheet.setFormattedRow(formattedRow);\n  GoogleSheets.appendToGoogleSpreadsheet.setPath(\"Air Quality Records/2024\");\n} else {\n  GoogleSheets.appendToGoogleSpreadsheet.skip(\"Conditions not met.\");\n}"
  },
  {
    "intent": "When the pusher on your Kronaby watch is pressed with a double press at any time, toggle your Living Room LIFX lights on and off with a 2-second fade duration.",
    "filter_code": "if (Kronaby.pusherPressed.PressType === \"double\") {\n  Lifx.toggle.setAdvancedOptions(\"transition_duration: 2\");\n  Lifx.toggle.skip();\n}"
  },
  {
    "intent": "When a phone call is made from my Google Pixel 7 to Jon Snow at 14155551234 and the call lasts for more than 10 seconds, log an event in Welltory with the data source as \"Phone Call\", data type as \"Productivity\", datetime as the time the call occurred, value as \"1\" to track each call, and a comment saying \"Incoming call from Jon Snow\".",
    "filter_code": "if (AndroidPhone.placeAPhoneCall.DeviceName === \"Google Pixel 7\"\n    && AndroidPhone.placeAPhoneCall.ContactName === \"Jon Snow\"\n    && AndroidPhone.placeAPhoneCall.ToNumber === \"14155551234\"\n    && parseInt(AndroidPhone.placeAPhoneCall.CallLength) > 10) {\n  Welltory.sendEvent\n    .setDataSource(\"Phone Call\")\n    .setDataType(\"Productivity\")\n    .setDatetime(AndroidPhone.placeAPhoneCall.OccurredAt)\n    .setValue(\"1\")\n    .setComment(\"Incoming call from Jon Snow\");\n} else {\n  Welltory.sendEvent.skip(\"Conditions not met for logging the event.\");\n}"
  },
  {
    "intent": "Turn on the night light of my Living Room Lamp after sunset, which is at 04:17:06+05:00, when the temperature is 18 degrees Celsius and the condition is Sunny.",
    "filter_code": "if (Weather.sunSets.SunsetAt === \"2020-07-08T04:17:06+05:00\" && Weather.sunSets.TempCelsius === \"18\" && Weather.sunSets.Condition === \"Sunny\") {\n  Idevices.turnNightlightOn();\n} else {\n  Idevices.turnNightlightOn.skip(\"Conditions not met\");\n}"
  }
]