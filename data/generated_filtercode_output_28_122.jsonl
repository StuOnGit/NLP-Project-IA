{"original_description": "Turn on your Philips Hue lights when your mui board turned off night mode.", "trigger_channel": "mui", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "muilab.nightmode_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Mui\nDropdown list", "description": "Dropdown list", "details": {"Label": "mui board", "Helper text": "select target mui board", "Slug": "mui", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Muilab.nightmodeOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Mui name\nname of the mui board which turned off night mode", "description": "name of the mui board which turned off night mode", "details": {"Slug": "mui_name", "Filter code": "Muilab.nightmodeOff.MuiName", "Type": "String", "Example": "living room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ": Personalizza la regola per spegnere i filamenti Philips Hue solo quando il mui board si spacca la notte e la stanza in questione è la \"living room\".", "filter_code_generated": "**Struttura di Output Principale**\n\n\n```\nif (Muilab.nightmodeOff.CreatedAt.getHours() < 22 || Muilab.nightmodeOff.CreatedAt.getHours() > 6) {\n  Hue.turnOffAllHue.skip(\"Outside of active hours\")\n} else if (Muilab.nightmodeOff.MuiName !== \"living room\") {\n  Hue.turnOffAllHue.setLights([\"living room\", \"kitchen\"])\n} else {\n  Hue.turnOffAllHue()\n}\n```"}
{"original_description": "When the smanos security system is armed, your Philip Hue lights will be turned off automatically.", "trigger_channel": "smanos connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smanos.tg_arm_away"}, "trigger_details": [{"section": "Trigger fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created time\ncreated time", "description": "created time", "details": {"Slug": "created_time", "Filter code": "Smanos.tgArmAway.CreatedTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\ndevice name", "description": "device name", "details": {"Slug": "device_name", "Filter code": "Smanos.tgArmAway.DeviceName", "Type": "String", "Example": "device name"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ": When the Smanos security system is armed in Away mode, turn off all Philips Hue lights automatically.", "filter_code_generated": "**Struttura di Output Principale**\n\n```\nvar Triggers = smanos.connect.tg_arm_away;\nif (Triggers[0].which_system === \"arm_away\") {\n  Hue.turnOffAllHue({\"reason\": \"Armed Away Mode\"});\n}\n```"}
{"original_description": "Save energy by making sure all lights are turned off when thermostat mode is set to Away.", "trigger_channel": "Warmup Smart Thermostat", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "warmup_smart_thermostat.away"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nDropdown list", "description": "Dropdown list", "details": {"Label": "Location", "Slug": "location", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WarmupSmartThermostat.away.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ": This filter code specifically saves energy by turning off lights in the \"Living Room\" when the thermostat mode is set to \"Away\" and the time is outside of active hours (7am-7pm).", "filter_code_generated": "```\nif (Trigger.location === \"Away\") {\n  var createdAt = Trigger.createdAt;\n  if (createdAt <= 7 || createdAt >= 23) {\n    Action.lights.startsWith(\"Living Room\").skip(\"Only turn off lights outside of active hours\");\n  } else {\n    Action.turnOffAllHue();\n  }\n}\n```"}
{"original_description": "Selected Lexi group lights will be turned off daily at 12:00 am.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.groupTurnOn", "Filter code method": "Lexi.groupTurnOn.skip(string?: reason)", "Runtime method": "runAction(\"lexi.groupTurnOn\", {})"}, "action_details": [{"section": "Action fields", "title": "Group\nDropdown list", "description": "Dropdown list", "details": {"Label": "Group List", "Slug": "group", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}], "filter_code": "", "intent": "", "filter_code_generated": "**Struttura di Output Principale**\n\n```javascript\n#FILTERCODE\nvar Time = DateAndTime.everyDayAt.CheckTime;\nif (parseInt(Time.slice(11, 13)) < 0 || parseInt(Time.slice(11, 13)) > 23) {\n  Lexi.groupTurnOn.skip(\"Time is not between 12:00 AM and 11:59 PM\");\n} else {\n  Lexi.groupTurnOn();\n}\n#INTENT: Disable Lexi group lights outside of 12:00 AM to 11:59 PM\n```\n\nNota: La condizione `if` controlla se l'ora è compresa tra 12:00 AM e 11:59 PM. Se la condizione non è soddisfatta, l'aziona Lexi.groupTurnOn è saltata con un messaggio di errore. Altrimenti, l'azione viene eseguita correttamente."}
{"original_description": "All Lexi lights will be turned off daily at 12:00 am", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Lexi", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lexi.deviceTurnOnAll", "Filter code method": "Lexi.deviceTurnOnAll.skip(string?: reason)", "Runtime method": "runAction(\"lexi.deviceTurnOnAll\", {})"}, "action_details": [{"section": "Action fields", "title": "Brightness\nDropdown list", "description": "Dropdown list", "details": {"Label": "Brightness", "Slug": "brightness", "Required": "true", "Can have default value": "true"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Temp\nDropdown list", "description": "Dropdown list", "details": {"Label": "Temperature", "Helper text": "*Please select Temperature as 0% to apply color on the light", "Slug": "temp", "Required": "true", "Can have default value": "true"}}], "filter_code": "", "intent": ": Automatizzare l'estinguersi di tutti i luci di Lexi alla mezzanotte ogni giorno.\n\nIl filter code JavaScript verifica la data e l'ora attuale e, se è mezzanotte, chiamerà la funzione `Lexi.deviceTurnOnAll.skip(\"Daily scheduled power off at midnight\")` per spegnere tutte le luci. Questo codice considera la possibile personalizzazione della regola tramite un filtercode in linguaggio naturale, come specificato nel campo `INTENT`.", "filter_code_generated": "**Struttura di Output Principale**\n```\n// Define the function to check the current time\nfunction CheckTime() {\n  var currentTime = Meta.currentUserTime.datetime();\n  if (currentTime.getHours() == 0) {\n    // Turn off all lights\n    Lexi.deviceTurnOnAll.skip(\"Daily scheduled power off at midnight\");\n  }\n}\n\n// Call the CheckTime function\nCheckTime();\n```"}
{"original_description": "device gets turned On/Off on scheduled time set by the user.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "ThingaOS", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "tantiv4.turn_on_off", "Filter code method": "Tantiv4.turnOnOff.skip(string?: reason)", "Runtime method": "runAction(\"tantiv4.turn_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Device", "Helper text": "Turn On/Off action will be sent to the device selected by user.", "Slug": "device_name", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn device On/Off", "Helper text": "Update device status to be On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true"}}], "filter_code": "", "intent": ": Filter code for turning On/Off a device on a scheduled time set by the user.", "filter_code_generated": "**Struttura di Output Principale**\n\n```\nvar Time = Meta.currentUserTime.String()\nif (Time.includes Trigger.time) {\n  var DeviceName = [Device name].toLowerCase()\n  var TurnOnOff = [Turn on off].toLowerCase()\n  if (TurnOnOff == \"on\") Tantiv4.turnOnOff(true, DeviceName)\n  else Tantiv4.turnOnOff(false, DeviceName)\n} else Tantiv4.turnOnOff.skip(\"Not on scheduled time\")\n```"}
{"original_description": "When a 1-channel eWeLink support switch is turned on, turn on a Kasa device. ", "trigger_channel": "eWeLink Smart Home", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ewelink.switches2_trigger"}, "trigger_details": [{"section": "Trigger fields", "title": "Switches2 query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which 2-Channel Switch?", "Slug": "switches2_query", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Switches2 outlet query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which channel?", "Slug": "switches2_outlet_query", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turned on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Ewelink.switches2Trigger.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nName of eWeLink device.", "description": "Name of eWeLink device.", "details": {"Slug": "devicename_is", "Filter code": "Ewelink.switches2Trigger.DeviceName", "Type": "String", "Example": "E.g. eWeLinkSmartHomeDevice-01"}}, {"section": "Ingredients", "title": "Onor off\nOperation of eWeLink device.", "description": "Operation of eWeLink device.", "details": {"Slug": "onoffact_is", "Filter code": "Ewelink.switches2Trigger.OnorOff", "Type": "String", "Example": "E.g. on"}}, {"section": "Ingredients", "title": "Channel\nChannel of eWeLink device.", "description": "Channel of eWeLink device.", "details": {"Slug": "outlet_is", "Filter code": "Ewelink.switches2Trigger.Channel", "Type": "String", "Example": "E.g. channel 1"}}, {"section": "Ingredients", "title": "Track url\nTrack url of eWeLink device.", "description": "Track url of eWeLink device.", "details": {"Slug": "trackurl_is", "Filter code": "Ewelink.switches2Trigger.TrackUrl", "Type": "Web URL", "Example": "E.g. http://www.ewelink.cc/en"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_on", "Filter code method": "Kasa.turnOn.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn on", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ": When a 1-channel eWeLink support switch is turned on, turn on the corresponding Kasa device.", "filter_code_generated": "```\nif (Ewelink.switches2Trigger.OnorOff === \"on\") {\n  Kasa.turnOn(Kasa.getDeviceFromUserAccount(Ewelink.switches2Trigger.DeviceName).id)\n}\n```"}
{"original_description": "If you turn off your Hood, your Philips Hue lights will also turn off.", "trigger_channel": "Home Connect Hood", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_hood.hood_power_off"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcHood.hoodPowerOff.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ": If the hood is turned off, but it's not within active hours (6am-10pm), the Philips Hue lights will remain on; otherwise, they will be turned off.", "filter_code_generated": ":\n```\nif (HcHood.hoodPowerOff.CreatedAt.getHours() < 22 || HcHood.hoodPowerOff.CreatedAt.getHours() > 6) {\n  Hue.turnOffAllHue.skip(\"Outside of active hours\")\n} else {\n  Hue.turnOffAllHue.run()\n}\n```"}
{"original_description": "A pre-set mode will be turned on at time set everyday.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Asuka IoT", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "asukaiot.activate_scene_linkmode_on", "Filter code method": "Asukaiot.activateSceneLinkmodeOn.skip(string?: reason)", "Runtime method": "runAction(\"asukaiot.activate_scene_linkmode_on\", {})"}, "action_details": [{"section": "Action fields", "title": "Activate scene list\nDropdown list", "description": "Dropdown list", "details": {"Label": "Activate Scene List", "Slug": "activate_scene_list", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "intent": ": Automate scene activation according to time of day, using the AM/PM designations to determine the mode.", "filter_code_generated": "```\nif (DateAndTime.everyDayAt.CheckTime.includes('AM') && DateAndTime.everyDayAt.CheckTime.split(' ')[1] === '12') {\n  Asukaiot.activateSceneLinkmodeOn('Noon Mode');\n} else if (DateAndTime.everyDayAt.CheckTime.includes('AM') && DateAndTime.everyDayAt.CheckTime.split(' ')[1] !== '12') {\n  Asukaiot.activateSceneLinkmodeOn('Early Morning Mode');\n} else if (DateAndTime.everyDayAt.CheckTime.includes('PM') && DateAndTime.everyDayAt.CheckTime.split(' ')[1] === '12') {\n  Asukaiot.activateSceneLinkmodeOn('Afternoon Mode');\n} else if (DateAndTime.everyDayAt.CheckTime.includes('PM') && DateAndTime.everyDayAt.CheckTime.split(' ')[1] !== '12') {\n  Asukaiot.activateSceneLinkmodeOn('Late Evening Mode');\n} else {\n  Asukaiot.activateSceneLinkmodeOn.skip('Unknown time detected');\n}\n```"}
{"original_description": "When an event in your Google Calendar named Vacation starts the system is turned to Away mode", "trigger_channel": "Google Calendar", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "google_calendar.event_from_search_starts"}, "trigger_details": [{"section": "Trigger fields", "title": "Calendar\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which calendar?", "Slug": "calendar", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Query\nText input > Other", "description": "Text input > Other", "details": {"Label": "Keyword or phrase", "Slug": "query", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Offset\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time before event starts", "Helper text": "Specify how much time before the event starts you'd like the Applet to trigger", "Slug": "offset", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title\nThe event's title.", "description": "The event's title.", "details": {"Slug": "Title", "Filter code": "GoogleCalendar.eventFromSearchStarts.Title", "Type": "String", "Example": "Practice Presentation"}}, {"section": "Ingredients", "title": "Description\nThe event's description.", "description": "The event's description.", "details": {"Slug": "Description", "Filter code": "GoogleCalendar.eventFromSearchStarts.Description", "Type": "String", "Example": "Make a presentation about new channels on ifttt"}}, {"section": "Ingredients", "title": "Where\nThe location where the event takes place.", "description": "The location where the event takes place.", "details": {"Slug": "Where", "Filter code": "GoogleCalendar.eventFromSearchStarts.Where", "Type": "String", "Example": "Building A, Room 101"}}, {"section": "Ingredients", "title": "Starts\nDate and time the event starts.", "description": "Date and time the event starts.", "details": {"Slug": "Starts", "Filter code": "GoogleCalendar.eventFromSearchStarts.Starts", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Ends\nDate and time the event ends.", "description": "Date and time the event ends.", "details": {"Slug": "Ends", "Filter code": "GoogleCalendar.eventFromSearchStarts.Ends", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event url\nThe URL to the event on Google Calendar.", "description": "The URL to the event on Google Calendar.", "details": {"Slug": "EventUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventUrl", "Type": "Web URL", "Example": "https://www.google.com/calendar/event?eid=bmpmaDhnMm"}}, {"section": "Ingredients", "title": "Video call url\nA URL to the video call for the event if it exists.", "description": "A URL to the video call for the event if it exists.", "details": {"Slug": "HangoutsUrl", "Filter code": "GoogleCalendar.eventFromSearchStarts.VideoCallUrl", "Type": "Web URL", "Example": "https://meet.google.com"}}, {"section": "Ingredients", "title": "Event type\nThe type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "description": "The type of the event. Can be \"birthday\", \"default\", \"focusTime\", \"fromGmail\", \"outOfOffice\", and \"workingLocation\".", "details": {"Slug": "EventType", "Filter code": "GoogleCalendar.eventFromSearchStarts.EventType", "Type": "String", "Example": "outOfOffice"}}], "action_channel": "myUplink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myuplink.set_smart_home_mode", "Filter code method": "Myuplink.setSmartHomeMode.skip(string?: reason)", "Runtime method": "runAction(\"myuplink.set_smart_home_mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Smart home mode\nDropdown list", "description": "Dropdown list", "details": {"Label": "Smart home mode", "Slug": "smart_home_mode", "Required": "true", "Can have default value": "true", "Filter code method": "Myuplink.setSmartHomeMode.setSmart Home Mode(string: smart_home_mode)"}}], "filter_code": "", "intent": ": When a Google Calendar event named \"Vacation\" starts, the IFTTT applet will set the smart home mode to \"Away\".", "filter_code_generated": "**Struttura di Output Principale**\n```\n// When an event in your Google Calendar named Vacation starts the system is turned to Away mode\nif (GoogleCalendar.eventFromSearchStarts.Title == \"Vacation\") {\n  Myuplink.setSmartHomeMode.setSmartHomeMode(\"Away\");\n}\n```"}
{"original_description": "Just pop in the company name you'd like to track, and articles in TC that mention it will be sent straight to your inbox. ", "trigger_channel": "RSS Feed", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "feed.new_feed_item"}, "trigger_details": [{"section": "Trigger fields", "title": "Feed url\nText input > Other", "description": "Text input > Other", "details": {"Label": "Feed URL", "Helper text": "for feed URL requirements, <a class=\"open-native\" href=\"https://help.ifttt.com/hc/en-us/articles/115010396768-My-RSS-feed-is-not-working-correctly\" target=\"_blank\">visit the help page</a>", "Slug": "feed_url", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Entry title\nThe entry's title.", "description": "The entry's title.", "details": {"Slug": "EntryTitle", "Filter code": "Feed.newFeedItem.EntryTitle", "Type": "String", "Example": "Launch Day!"}}, {"section": "Ingredients", "title": "Entry url\nThe entry's URL.", "description": "The entry's URL.", "details": {"Slug": "EntryUrl", "Filter code": "Feed.newFeedItem.EntryUrl", "Type": "String", "Example": "http://blog.ifttt.com/coming-soon"}}, {"section": "Ingredients", "title": "Entry author\nThe entry's author name.", "description": "The entry's author name.", "details": {"Slug": "EntryAuthor", "Filter code": "Feed.newFeedItem.EntryAuthor", "Type": "String", "Example": "Linden Tibbets"}}, {"section": "Ingredients", "title": "Entry content\nThe entry's content, may contain HTML.", "description": "The entry's content, may contain HTML.", "details": {"Slug": "EntryContent", "Filter code": "Feed.newFeedItem.EntryContent", "Type": "String", "Example": "Well here we are on, blah, blah..."}}, {"section": "Ingredients", "title": "Entry image url\nURL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "description": "URL for the first image in the entry. If the entry doesn't have an image will point to a placeholder image.", "details": {"Slug": "EntryImageUrl", "Filter code": "Feed.newFeedItem.EntryImageUrl", "Type": "String", "Example": "http://ifttt.com/images/no_image_card.png"}}, {"section": "Ingredients", "title": "Entry published\nDate entry was created.", "description": "Date entry was created.", "details": {"Slug": "EntryPublished", "Filter code": "Feed.newFeedItem.EntryPublished", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Feed title\nThe title of the feed.", "description": "The title of the feed.", "details": {"Slug": "FeedTitle", "Filter code": "Feed.newFeedItem.FeedTitle", "Type": "String", "Example": "ifttt Blog"}}, {"section": "Ingredients", "title": "Feed url\nURL to the feed's regular page.", "description": "URL to the feed's regular page.", "details": {"Slug": "FeedUrl", "Filter code": "Feed.newFeedItem.FeedUrl", "Type": "String", "Example": "http://blog.ifttt.com/"}}], "action_channel": "Email", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email.send_me_email", "Filter code method": "Email.sendMeEmail.skip(string?: reason)", "Runtime method": "runAction(\"email.send_me_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Subject\nText input > Title", "description": "Text input > Title", "details": {"Label": "Subject", "Slug": "subject", "Required": "true", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setSubject(string: subject)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Slug": "body", "Required": "false", "Can have default value": "true", "Filter code method": "Email.sendMeEmail.setBody(string: body)"}}], "filter_code": "", "intent": ": This filter code will send emails with articles related to a specific company name when new articles are published in the RSS feed. It checks if the article title contains the company name and sends a personalized email with the article title and link if it does.", "filter_code_generated": ":\n```javascript\nvar FeedUrl = Feed.newFeedItem.FeedUrl;\nvar EntryTitle = Feed.newFeedItem.EntryTitle;\nvar EntryContent = Feed.newFeedItem.EntryContent;\nvar CompanyNameInput = Feed_url; // Extract company name from Feed_url\n\nif (EntryTitle.toLowerCase().includes(CompanyNameInput.toLowerCase())) {\n  Email.sendMeEmail.setSubject(\"Articles about \" + CompanyNameInput);\n  Email.sendMeEmail.setBody(\"<html><body>Here is an article about <a href='\" + EntryUrl + \"'>\" + EntryTitle + \"</a></body></html>\");\n} else {\n  Email.sendMeEmail.skip(\"Article does not mention company name\");\n}\n```"}
