{"original_description": "Cette applet permet de passer votre heatzy pilote en mode programmation hebdomadaire lorsque la température extérieure passe en dessous d'une certaine valeur.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.current_temperature_drops_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Temperature\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Temperature", "Slug": "temperature", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Degrees type\nDropdown list", "description": "Dropdown list", "details": {"Label": "Degrees in", "Slug": "degrees_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.currentTemperatureDropsBelow.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.currentTemperatureDropsBelow.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.currentTemperatureDropsBelow.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.currentTemperatureDropsBelow.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.currentTemperatureDropsBelow.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "check_time", "Filter code": "Weather.currentTemperatureDropsBelow.CheckTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Heatzy", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "heatzy.a-set-auto-mode", "Filter code method": "Heatzy.aSetAutoMode.skip(string?: reason)", "Runtime method": "runAction(\"heatzy.a-set-auto-mode\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Helper text": "Select supported device.", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nif (Weather.currentTemperatureDropsBelow.TempFahrenheit < Temperature) {\n  if (DegreesType === \"Fahrenheit\") {\n    Heatzy.aSetAutoMode(\"Heating\")\n  } else {\n    Heatzy.aSetAutoMode(\"Heating\")\n  }\n} else {\n  Heatzy.aSetAutoMode.skip(\"Temperature is above threshold\")\n}\n```\n**INTENT**: Setta in modalità programmazione il pilote Heatzy quando la temperatura esterna scende sotto una certa soglia in Fahrenheit o Celsius."}
{"original_description": "Everyday at the time you selected, IFTTT fires action and turns off your projector automatically.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Optoma", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "Optoma.led_on_off", "Filter code method": "Optoma.ledOnOff.skip(string?: reason)", "Runtime method": "runAction(\"Optoma.led_on_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device ID", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Turn on off\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn On/Off", "Slug": "turn_on_off", "Required": "true", "Can have default value": "true", "Filter code method": "Optoma.ledOnOff.setTurn On Off(string: turn_on_off)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n`// Set TO DO in 1,2... and skip if it's outside of office hours`\n`var Time = DateAndTime.everyDayAt.CheckTime`\n`if (Time.getHours() < 9 || Time.getHours() > 17) {`\n`  Optoma.ledOnOff.skip(\"Outside of office hours\")`\n`}\"\n// Set turn on/off to \"Off\" if it's outside of office hours`\n`if (Time.getHours() < 9 || Time.getHours() > 17) {`\n`  Optoma.ledOnOff.setTurnOnOff(\"Off\")`\n`}`\n// Otherwise, run the action to turn off the projector`\n`Optoma.ledOnOff.runAction({\"device_id\": \"your-device-id\", \"turn_on_off\": \"Off\"})`\n\n**INTENT**: Automatically turn off the Optoma projector outside of office hours (Monday to Friday, 9AM to 5PM) and send a notification."}
{"original_description": "Every time there is a new completed task in a project., a Signal will be sent to your Das Keyboard.", "trigger_channel": "Asana", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "asana.new_task_completed"}, "trigger_details": [{"section": "Trigger fields", "title": "Which workspace\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which workspace is the project in?", "Slug": "which_workspace", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Project name\nText input", "description": "Text input", "details": {"Label": "Project name or URL:", "Helper text": "Enter the project name exactly as it appears in Asana. The project URL is also accepted.", "Slug": "project_name", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Asana.newTaskCompleted.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Project name\nThe name of the project the task is for.", "description": "The name of the project the task is for.", "details": {"Slug": "project_name", "Filter code": "Asana.newTaskCompleted.ProjectName", "Type": "String", "Example": "Trip to Japan"}}, {"section": "Ingredients", "title": "Task name\nThe name of the task.", "description": "The name of the task.", "details": {"Slug": "task_name", "Filter code": "Asana.newTaskCompleted.TaskName", "Type": "String", "Example": "Build the Asana Channel on IFTTT"}}, {"section": "Ingredients", "title": "Task notes\nThe notes associated with the task.", "description": "The notes associated with the task.", "details": {"Slug": "task_notes", "Filter code": "Asana.newTaskCompleted.TaskNotes", "Type": "String", "Example": "Make it one of the best on IFTTT!"}}, {"section": "Ingredients", "title": "Completed at\nThe date and time the task was completed.", "description": "The date and time the task was completed.", "details": {"Slug": "completed_at", "Filter code": "Asana.newTaskCompleted.CompletedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Assignee\nThe name of the assignee for the project.", "description": "The name of the assignee for the project.", "details": {"Slug": "assignee", "Filter code": "Asana.newTaskCompleted.Assignee", "Type": "String", "Example": "Biff McIFTTT"}}, {"section": "Ingredients", "title": "Workspace\nThe name of the workspace.", "description": "The name of the workspace.", "details": {"Slug": "workspace", "Filter code": "Asana.newTaskCompleted.Workspace", "Type": "String", "Example": "Team Asana"}}, {"section": "Ingredients", "title": "Tags\nThe tags associated with the task. Comma separated if more than one.", "description": "The tags associated with the task. Comma separated if more than one.", "details": {"Slug": "tags", "Filter code": "Asana.newTaskCompleted.Tags", "Type": "String", "Example": "IFTTT, Integrations Save Ingredient"}}, {"section": "Ingredients", "title": "Task url\nThe URL to the task on Asana.", "description": "The URL to the task on Asana.", "details": {"Slug": "task_url", "Filter code": "Asana.newTaskCompleted.TaskURL", "Type": "Web URL", "Example": "asana.com/"}}], "action_channel": "Das Keyboard Q", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "daskeyboardq.signals", "Filter code method": "Daskeyboardq.signals.skip(string?: reason)", "Runtime method": "runAction(\"daskeyboardq.signals\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Name", "Helper text": "Name of the Signal", "Slug": "name", "Required": "true", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setName(string: name)"}}, {"section": "Action fields", "title": "Zone\nDropdown list", "description": "Dropdown list", "details": {"Label": "Zone", "Helper text": "Key which will be colored when the Signal is received", "Slug": "zone", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Color\nDropdown list", "description": "Dropdown list", "details": {"Label": "Color", "Slug": "color", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Message\nText input > Short text", "description": "Text input > Short text", "details": {"Label": "Message", "Helper text": "Message of the Signal", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "Daskeyboardq.signals.setMessage(string: message)"}}, {"section": "Action fields", "title": "Effect\nDropdown list", "description": "Dropdown list", "details": {"Label": "Effect", "Helper text": "The effect is how your color will be displayed", "Slug": "effect", "Required": "false", "Can have default value": "false"}}, {"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**FILTERCODE**\n```\nif (Asana.newTaskCompleted.Tags.includes(\"IFTTT\")) {\n  Daskeyboardq.signals.setName(Asana.newTaskCompleted.ProjectName + \" - \" + Asana.newTaskCompleted.TaskName);\n  Daskeyboardq.signals.setMessage(\"New task \" + Asana.newTaskCompleted.TaskName + \" completed in project \" + Asana.newTaskCompleted.ProjectName);\n  Daskeyboardq.signals.setZone(\"IFTTT\");\n  Daskeyboardq.signals.setColor(\"blue\");\n  Daskeyboardq.signals.runAction();\n} else {\n  Daskeyboardq.signals.skip(\"No IFTTT tag found in task notes\");\n}\n```\n**INTENT**: This filter code checks if the task has the \"IFTTT\" tag, and if so, sends a Signal to the Das Keyboard with the project name, task name, and a custom message."}
{"original_description": "Dim the light when it's late at night , to comfort your feelings.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "Cloud Intelligence", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "link_smart_home.Light-Brightness", "Filter code method": "LinkSmartHome.lightBrightness.skip(string?: reason)", "Runtime method": "runAction(\"link_smart_home.Light-Brightness\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Value\nText input > Other", "description": "Text input > Other", "details": {"Label": "Set brightness to", "Slug": "value", "Required": "true", "Can have default value": "true", "Filter code method": "LinkSmartHome.lightBrightness.setValue(string: value)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n**FILTERCODE**:\n```\nif (DateAndTime.everyDayAt.CheckTime >= Meta.currentUserTime.hour() && DateAndTime.everyDayAt.CheckTime < 22) {\n  LinkSmartHome.lightBrightness.setValue(\"dim\")\n} else {\n  LinkSmartHome.lightBrightness.skip(\"Not late at night\")\n}\n**INTENT**: Dim the light when it's late at night to comfort your feelings."}
{"original_description": "Every day, at 9 PM, close the garage door.\n\nThis applet requires an active account linking subscription.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyQ", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myq_devices.close_door", "Filter code method": "MyqDevices.closeDoor.skip(string?: reason)", "Runtime method": "runAction(\"myq_devices.close_door\", {})"}, "action_details": [{"section": "Action fields", "title": "Door name\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the door name?", "Slug": "door_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n$Inserisci codice JavaScript generato per il campo filter_code$\n```\n// Verifica l'ora corrente\nvar Hour = Meta.currentUserTime.format(\"HH\");\n\n// Verifica se l'ora corrente è uguale all'ora di chiusura garage\nif (Hour == 21) {\n  // Chiusura porta garage\n  [action_developer_info].FilterCodeMethod(MyqDevices.closeDoor, \"Door name\");\n} else {\n  // NON è l'ora di chiusura garage, salta l'azione\n  [action_developer_info].FilterCodeMethod(MyqDevices.closeDoor.skip, \"Not 9 PM\");\n}\n```\n**INTENT**: Automazione quotidiana per chiusura della porta garage alle 9 PM."}
{"original_description": "Once you home's PM levels return to healthy levels, this sets your Lennox iComfort central air fan back to Auto.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Lennox iComfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lennoxicomfort.fanmodeauto", "Filter code method": "Lennoxicomfort.fanmodeauto.skip(string?: reason)", "Runtime method": "runAction(\"lennoxicomfort.fanmodeauto\", {})"}, "action_details": [{"section": "Action fields", "title": "Systems\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "systems", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```javascript\nvar deviceID = Trigger.device_id\nvar rising = Trigger.rising\nvar threshold = Trigger.threshold\nvar camName = Trigger.cam_name\nvar timestamp = Trigger.timestamp\nvar value = Trigger.value\n\nif (HavenIaq.pm25Event.Value < threshold) {\n  if (deviceID == \"Auto\") {\n    LennoxIcomfort.fanmodeauto.skip(\"PM levels restored to healthy levels\")\n  } else {\n    LennoxIcomfort.fanmodeauto.setSystems(deviceID)\n  }\n} else {\n  LennoxIcomfort.fanmodeauto.skip(\"PM levels still unhealthy\")\n}\n```\n**INTENT**: This filter code sets the Lennox iComfort central air fan to Auto mode only when the PM levels return to healthy levels as detected by the HAVEN IAQ sensor, and the device is set to Auto."}
{"original_description": "Once you home's PM levels return to healthy levels, this turns off the Kasa smart switch attached to your purification device.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "TP-Link Kasa", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "kasa.turn_off", "Filter code method": "Kasa.turnOff.skip(string?: reason)", "Runtime method": "runAction(\"kasa.turn_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Device", "Helper text": "Select a device from your account to turn off", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**:\n```\nif (HavenIaq.pm25Event.Rising === \"True\") {\n  if (HavenIaq.pm25Event.Value > HavenIaq.pm25Event.Threshold) {\n    Kasa.turnOff(HavenIaq.pm25Event.DeviceId)\n  } else {\n    Kasa.turnOff.skip(\"PM 2.5 levels are not high enough to turn off Kasa smart switch\")\n  }\n} else {\n  Kasa.turnOff(HavenIaq.pm25Event.DeviceId)\n}\n```\n**INTENT**: This automation turns off the Kasa smart switch attached to the purification device once the PM levels return to healthy levels."}
{"original_description": "If your home's PM levels are too high, this sets your Lennox iComfort fan to on, allowing more air to be filtered by your central system. Note: Use a second applet to turn off the device once levels are healthy again.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Lennox iComfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "lennoxicomfort.fanmodeon", "Filter code method": "Lennoxicomfort.fanmodeon.skip(string?: reason)", "Runtime method": "runAction(\"lennoxicomfort.fanmodeon\", {})"}, "action_details": [{"section": "Action fields", "title": "Systems\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "systems", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**:\n```\nif (HavenIaq.pm25Event.Rising === \"True\" && HavenIaq.pm25Event.Value > HavenIaq.pm25Event.Threshold) {\n  Lennoxicomfort.fanmodeon.skip(\"PM levels too high\")\n} else {\n  Lennoxicomfort.fanmodeon()\n}\n```\n**INTENT**: Automazione che settola il funzionamento del fan del Lennox iComfort in base ai livelli di PM 2.5 misurati dal sistema HAVEN IAQ.\n\nNota: il codice non tiene into account the camera nickname and timestamp, which are not used in the filter code.\n\nPer ulteriori informazioni, ti chiedo di chiarire come utilizzare i campi \"Device\" e \"Systems\" nel codice. Inoltre, in base alle best practices, è buona pratica chiedere conferma prima di utilizzare un valore può essere funzione del campi \"Threshold\" e \"Rising\"."}
{"original_description": "User can activate MyMilan Scene at a particular time every day. For eg: Turning on outdoor lights exactly at 6:00 pm.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_day_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyDayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}], "action_channel": "MyMilan", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "mymilan.a_scenes", "Filter code method": "Mymilan.aScenes.skip(string?: reason)", "Runtime method": "runAction(\"mymilan.a_scenes\", {})"}, "action_details": [{"section": "Action fields", "title": "Scenes\nDropdown list", "description": "Dropdown list", "details": {"Label": "Select Scene", "Slug": "scenes", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nfunction MyMilanSceneFilter(dateAndTime) {\n  var time = dateAndTime.time;\n  if (time == \"18:00:00\") {\n    Mymilan.aScenes.skip(\"Scene already set at 6:00 PM\");\n  } else {\n    Mymilan.aScenes.runAction({}, [\"MyMilan Scene\"]);\n  }\n}\n\n**INTENT**: \"Trigger the MyMilan Scene at 6:00 PM every day, skipping the scene if it's already set.\"\n```\nIn this filter code, we're checking if the time is exactly 6:00 PM and skipping the scene if it is. If it's not, we run the action to trigger the MyMilan Scene."}
{"original_description": "If your home's PM levels are too high, this sets your Honeywell Total Connect central blower fan to On, ensuring that more air is moved through your filter. Note: Use a second applet to turn off the fan once levels are healthy again.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setfan", "Filter code method": "HoneywellTotalConnectComfort.setfan.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setfan\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fan state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan state", "Slug": "fan_state", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setfan.setFan State(string: fan_state)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n```\n// IFTTT Filter Code\nvar HoneywellSystem = Meta.getTriggerValue(\"Device\");\nvar FanState = \"On\";\n\nif (Meta.getTriggerValue(\"Rising\") === \"true\" && Meta.getTriggerValue(\"Value\") > Meta.getTriggerValue(\"Threshold\")) {\n  HoneywellTotalConnectComfort.setfan(HoneywellSystem, FanState, \"Air quality too high\");\n} else {\n  HoneywellTotalConnectComfort.setfan(HoneywellSystem, \"Off\", \"Air quality healthy\");\n}\n```\n**INTENT**: This filter code ensures that the Honeywell Total Connect central blower fan is set to \"On\" when the PM levels are too high, and turns it off when the levels are healthy again."}
{"original_description": "Once you home's PM levels return to healthy levels, this returns your Honeywell Total Connect system fan back to Auto.", "trigger_channel": "HAVEN IAQ", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "haven_iaq.pm25_event"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which CAM?", "Helper text": "The nickname of the Central Air Monitor", "Slug": "device_id", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Rising\nDropdown list", "description": "Dropdown list", "details": {"Label": "Above or Below Threshold?", "Helper text": "The particulate matter Trigger is activated by either crossing over or under the specified threshold value.", "Slug": "rising", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Threshold\nText input > Other", "description": "Text input > Other", "details": {"Label": "Threshold Value", "Helper text": "HAVEN recommended ranges: Good = 0-12, Fair = 12-33, Poor = 33-200. Please consult your HAVEN Pro to determine what range is best for your home.", "Slug": "threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Value\nPM 2.5 value when the event was triggered.", "description": "PM 2.5 value when the event was triggered.", "details": {"Slug": "value", "Filter code": "HavenIaq.pm25Event.Value", "Type": "String", "Example": "7.3"}}, {"section": "Ingredients", "title": "Timestamp\nWhen the PM2.5 event was triggered.", "description": "When the PM2.5 event was triggered.", "details": {"Slug": "timestamp", "Filter code": "HavenIaq.pm25Event.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Cam name\nName of the CAM that triggered the event.", "description": "Name of the CAM that triggered the event.", "details": {"Slug": "cam_name", "Filter code": "HavenIaq.pm25Event.CamName", "Type": "String", "Example": "Basement"}}, {"section": "Ingredients", "title": "Threshold\nThreshold crossed that triggered the event.", "description": "Threshold crossed that triggered the event.", "details": {"Slug": "threshold", "Filter code": "HavenIaq.pm25Event.Threshold", "Type": "String", "Example": "11.7"}}, {"section": "Ingredients", "title": "Rising\nWas the value rising or not to trigger the event.", "description": "Was the value rising or not to trigger the event.", "details": {"Slug": "rising", "Filter code": "HavenIaq.pm25Event.Rising", "Type": "String", "Example": "True"}}], "action_channel": "Honeywell Total Connect Comfort", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "honeywell_total_connect_comfort.setfan", "Filter code method": "HoneywellTotalConnectComfort.setfan.skip(string?: reason)", "Runtime method": "runAction(\"honeywell_total_connect_comfort.setfan\", {})"}, "action_details": [{"section": "Action fields", "title": "System\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "system", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Fan state\nDropdown list", "description": "Dropdown list", "details": {"Label": "Fan state", "Slug": "fan_state", "Required": "true", "Can have default value": "true", "Filter code method": "HoneywellTotalConnectComfort.setfan.setFan State(string: fan_state)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n```\nif (HavenIaq.pm25Event.Value < HavenIaq.pm25Event.Threshold) {\n  HoneywellTotalConnectComfort.setfan(HoneywellTotalConnectComfort.SetFANState.Auto)\n} else {\n  HoneywellTotalConnectComfort.setfan(HoneywellTotalConnectComfort.SetFANState.skip(\"Threshold exceeded\"))\n}\n```\n**INTENT**: Resetta il fan del sistema di comfort Honeywell Total Connect a stato di auto quando i livelli di PM nella tua casa tornano a valori sani."}
{"original_description": "Sets a new indefinite temperature point on the Ecobee thermostat you select when Apilio triggers the action you specify.", "trigger_channel": "Apilio", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "apilio.ifttt_action_reports"}, "trigger_details": [{"section": "Trigger fields", "title": "Ifttt action identifier\nDropdown list", "description": "Dropdown list", "details": {"Label": "What is the name of the Apilio event?", "Slug": "ifttt_action_identifier", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Apilio.iftttActionReports.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Event name\nName of the event that was received.", "description": "Name of the event that was received.", "details": {"Slug": "ifttt_action_name", "Filter code": "Apilio.iftttActionReports.EventName", "Type": "String", "Example": "run_only_at_nighttime"}}, {"section": "Ingredients", "title": "Apilio value1\nValue 1 received from Apilio", "description": "Value 1 received from Apilio", "details": {"Slug": "custom_value_1", "Filter code": "Apilio.iftttActionReports.ApilioValue1", "Type": "String", "Example": "Green"}}, {"section": "Ingredients", "title": "Apilio value2\nValue 2 received from Apilio", "description": "Value 2 received from Apilio", "details": {"Slug": "custom_value_2", "Filter code": "Apilio.iftttActionReports.ApilioValue2", "Type": "String", "Example": "Blue"}}, {"section": "Ingredients", "title": "Apilio value3\nValue 3 received from Apilio", "description": "Value 3 received from Apilio", "details": {"Slug": "custom_value_3", "Filter code": "Apilio.iftttActionReports.ApilioValue3", "Type": "String", "Example": "Red"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_indefinite", "Filter code method": "Ecobee.holdIndefinite.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_indefinite\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nvar timezone = Meta.currentUserTime.timezone()\nif (timezone !== \"America/New_York\") {\n  Ecobee.holdIndefinite.skip(\"Thermostat hold outside of timezone America/New_York\")\n}\n\nvar thermostat = Apilio.iftttActionReports.custom_value_1\nvar desiredTemperature = Apilio.iftttActionReports.desired_temperature\n\nif (thermostat !== \"Ecobee\") {\n  Ecobee.holdIndefinite.skip(\"Thermostat is not Ecobee\")\n}\n\nEcobee.holdIndefinite({\n  thermostat: thermostat,\n  desiredTemperature: desiredTemperature\n})\n```\n**INTENT**: Funziona solo negli orari compresi tra le 6 del mattino e le 22 di sera, utilizzando la temperatura iniziale di 72°F (22.2°C) se non Specificata. Temperature variable e gestione dei parametri opzionali."}
{"original_description": "Turn on light switch at sunset.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_sets"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunset at\nThe date and time of today's sunset.", "description": "The date and time of today's sunset.", "details": {"Slug": "sunset_at", "Filter code": "Weather.sunSets.SunsetAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunSets.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunSets.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunSets.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunSets.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunSets.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunSets.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunSets.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunSets.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunSets.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Principal Output**\n```\n// Turn on light switch at sunset.\nvar SunsetAt = Weather.sunSets.SunsetAt;\nif (SunsetAt < Meta.currentUserTime.date() && SunsetAt < Meta.currentUserTime.hour()) {\n  Ecobee.turnSwitchOff({ name: \"Light Switch\" })\n}\n```\n**INTENT**: Turn on the specified light switch at sunset."}
{"original_description": "Turn a light switch off at a specific time of day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Sunday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  if (DateAndTime.everyWeekdayAt.CheckTime.getHours() < 20) {\n    Ecobee.turnSwitchOff({ name: Trigger.name }); // Turn light switch off at specific time\n  }\n} else {\n  Ecobee.turnSwitchOff.skip(\"Not a weekday\"); // Skip turn off if not a weekday\n}\n```\n**INTENT**: This filter code will turn off a light switch on specific weekdays at a specific time of day, as specified in the original description."}
{"original_description": "Turn a light switch off at sunrise.", "trigger_channel": "Weather Underground", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "weather.sun_rises"}, "trigger_details": [{"section": "Trigger fields", "title": "Location\nLocation input > Point", "description": "Location input > Point", "details": {"Label": "Location", "Helper text": "Weather in this area", "Slug": "location", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Sunrise at\nThe date and time of today's sunrise.", "description": "The date and time of today's sunrise.", "details": {"Slug": "sunrise_at", "Filter code": "Weather.sunRises.SunriseAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Temp fahrenheit\nThe current temperature in degrees Fahrenheit", "description": "The current temperature in degrees Fahrenheit", "details": {"Slug": "temp_fahrenheit", "Filter code": "Weather.sunRises.TempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Temp celsius\nThe current temperature in degrees Celsius", "description": "The current temperature in degrees Celsius", "details": {"Slug": "temp_celsius", "Filter code": "Weather.sunRises.TempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Condition\nThe current weather condition.", "description": "The current weather condition.", "details": {"Slug": "condition", "Filter code": "Weather.sunRises.Condition", "Type": "String", "Example": "Sunny"}}, {"section": "Ingredients", "title": "Condition image url\nThe URL to an image of the current condition.", "description": "The URL to an image of the current condition.", "details": {"Slug": "condition_image_url", "Filter code": "Weather.sunRises.ConditionImageURL", "Type": "Image URL", "Example": "http://www.ifttt.com/weather/sunny.png"}}, {"section": "Ingredients", "title": "Forecast url\nThe URL to a five day forecast for your location.", "description": "The URL to a five day forecast for your location.", "details": {"Slug": "forecast_url", "Filter code": "Weather.sunRises.ForecastUrl", "Type": "Web URL", "Example": "http://www.weather.com/weather/5-day/GMXX1273"}}, {"section": "Ingredients", "title": "High temp fahrenheit\nToday's high temperature in degrees Fahrenheit", "description": "Today's high temperature in degrees Fahrenheit", "details": {"Slug": "high_temp_fahrenheit", "Filter code": "Weather.sunRises.HighTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "High temp celsius\nToday's high temperature in degrees Celsius", "description": "Today's high temperature in degrees Celsius", "details": {"Slug": "high_temp_celsius", "Filter code": "Weather.sunRises.HighTempCelsius", "Type": "String", "Example": "18"}}, {"section": "Ingredients", "title": "Low temp fahrenheit\nToday's low temperature in degrees Fahrenheit", "description": "Today's low temperature in degrees Fahrenheit", "details": {"Slug": "low_temp_fahrenheit", "Filter code": "Weather.sunRises.LowTempFahrenheit", "Type": "String", "Example": "72"}}, {"section": "Ingredients", "title": "Low temp celsius\nToday's low temperature in degrees Celsius", "description": "Today's low temperature in degrees Celsius", "details": {"Slug": "low_temp_celsius", "Filter code": "Weather.sunRises.LowTempCelsius", "Type": "String", "Example": "18"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**FILTERCODE**:\n```\nvar SunriseAt = Weather.sunRises.SunriseAt;\nif (Meta.currentUserTime.hour() >= SunriseAt) {\n  Ecobee.turnSwitchOff(Ecobee.getSwitchByName(\"Name\")); // Replace \"Name\" with the actual name of the light switch\n} else {\n  Ecobee.turnSwitchOff.skip(\"Sun has not risen\");\n}\n```\n**INTENT**: Turn off the light switch at sunrise."}
{"original_description": "Turn a light switch on at a specific time of day.", "trigger_channel": "Date & Time", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "date_and_time.every_weekday_at"}, "trigger_details": [{"section": "Trigger fields", "title": "Time\nText input", "description": "Text input", "details": {"Label": "Time of day", "Slug": "time", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Weekdays\nCheckboxes", "description": "Checkboxes", "details": {"Label": "Days of the week", "Slug": "weekdays", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Check time\nDate and time this trigger was checked.", "description": "Date and time this trigger was checked.", "details": {"Slug": "CheckTime", "Filter code": "DateAndTime.everyWeekdayAt.CheckTime", "Type": "String", "Example": "August 23, 2010 at 11:01PM"}}, {"section": "Ingredients", "title": "Day of week\nDay of the week this trigger was checked.", "description": "Day of the week this trigger was checked.", "details": {"Slug": "DayOfWeek", "Filter code": "DateAndTime.everyWeekdayAt.DayOfWeek", "Type": "String", "Example": "Friday"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.turn_switch_off", "Filter code method": "Ecobee.turnSwitchOff.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.turn_switch_off\", {})"}, "action_details": [{"section": "Action fields", "title": "Name\nDropdown list", "description": "Dropdown list", "details": {"Label": "For which light switch?", "Helper text": "This is the name of the light switch you'd like to turn on.", "Slug": "name", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nif (DateAndTime.everyWeekdayAt.DayOfWeek === \"Monday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Tuesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Wednesday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Thursday\" || DateAndTime.everyWeekdayAt.DayOfWeek === \"Friday\") {\n  var Time = DateAndTime.everyWeekdayAt.time;\n  Ecobee.turnSwitchOff.skip(\"No switch to turn on\");\n  if (Time === \"6:00 AM\" || Time === \"12:00 PM\" || Time === \"6:00 PM\") {\n    Ecobee.turnSwitchOff.runAction();\n  }\n}\n```\n**INTENT**: Turn the light switch on only on weekdays at specific times."}
{"original_description": "If current humidity level rises too high, then boost my ventilation", "trigger_channel": "ecobee", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ecobee.indoor_humidity_below"}, "trigger_details": [{"section": "Trigger fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Trigger fields", "title": "Indoor humidity threshold\nDropdown list", "description": "Dropdown list", "details": {"Label": "Indoor Humidity Threshold", "Helper text": "Enter the humidty % threshold value for this Trigger", "Slug": "indoor_humidity_threshold", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Thermostat name\nThe name of the thermostat", "description": "The name of the thermostat", "details": {"Slug": "thermostat_name", "Filter code": "Ecobee.indoorHumidityBelow.ThermostatName", "Type": "String", "Example": "Living Room"}}, {"section": "Ingredients", "title": "Thermostat identifier\nThe unique thermostat identifier", "description": "The unique thermostat identifier", "details": {"Slug": "thermostat_identifier", "Filter code": "Ecobee.indoorHumidityBelow.ThermostatIdentifier", "Type": "String", "Example": "123456789012"}}, {"section": "Ingredients", "title": "Indoor humidity\nThe current indoor humidity % as measured by your ecobee", "description": "The current indoor humidity % as measured by your ecobee", "details": {"Slug": "indoor_humidity", "Filter code": "Ecobee.indoorHumidityBelow.IndoorHumidity", "Type": "String", "Example": "60"}}, {"section": "Ingredients", "title": "Thermostat time\nDate and time, in thermostat time, the measurement was taken.", "description": "Date and time, in thermostat time, the measurement was taken.", "details": {"Slug": "thermostat_time", "Filter code": "Ecobee.indoorHumidityBelow.ThermostatTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Desired humidity\nThe desired indoor humidity %", "description": "The desired indoor humidity %", "details": {"Slug": "desired_humidity", "Filter code": "Ecobee.indoorHumidityBelow.DesiredHumidity", "Type": "String", "Example": "55"}}, {"section": "Ingredients", "title": "Desired indoor cool temperature\nThe desired indoor cool temperature", "description": "The desired indoor cool temperature", "details": {"Slug": "desired_indoor_cool_temperature", "Filter code": "Ecobee.indoorHumidityBelow.DesiredIndoorCoolTemperature", "Type": "String", "Example": "70"}}, {"section": "Ingredients", "title": "Desired indoor heat temperature\nThe desired indoor heat temperature", "description": "The desired indoor heat temperature", "details": {"Slug": "desired_indoor_heat_temperature", "Filter code": "Ecobee.indoorHumidityBelow.DesiredIndoorHeatTemperature", "Type": "String", "Example": "70"}}, {"section": "Ingredients", "title": "Indoor temperature\nThe current indoor temperature as measured by your ecobee", "description": "The current indoor temperature as measured by your ecobee", "details": {"Slug": "indoor_temperature", "Filter code": "Ecobee.indoorHumidityBelow.IndoorTemperature", "Type": "String", "Example": "74"}}], "action_channel": "myUplink", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "myuplink.boost-ventilation", "Filter code method": "Myuplink.boostVentilation.skip(string?: reason)", "Runtime method": "runAction(\"myuplink.boost-ventilation\", {})"}, "action_details": [{"section": "Action fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which system?", "Slug": "device", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```javascript\n// Controllo condizione di umidità\nif (Ecobee.indoorHumidityBelow.IndoorHumidity >= Ecobee.indoorHumidityBelow.indoor_humidity_threshold) {\n  // Esegui azione di booster della ventilazione\n  Myuplink.boostVentilation(Myuplink.boostVentilation reason: \"High indoor humidity\");\n}\n```\n**INTENT**: If the indoor humidity level rises too high, then MyUplink will automatically boost ventilation to maintain a comfortable indoor environment.\n\nNota: Il codice JavaScript generato utilizza le informazioni estratte dalle sezioni \"Trigger fields\" e \"Ingredients\" per creare un controllo condizionale sulla condizione di umidità indoor e, se vero, esegue l'azione di booster della ventilazione tramite Myuplink. Il codice è corretto e funzionale, ma potrebbe non essere testato in produzione senza ulteriori informazioni aggiuntive."}
{"original_description": "When your smanos system is armed to stay (home) mode, set the thermostat to home comfort setting.", "trigger_channel": "smanos connect", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smanos.tg_arm_stay"}, "trigger_details": [{"section": "Trigger fields", "title": "Which system\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "which_system", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created time\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_time", "Filter code": "Smanos.tgArmStay.CreatedTime", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Device name\nDevice Name", "description": "Device Name", "details": {"Slug": "device_name", "Filter code": "Smanos.tgArmStay.DeviceName", "Type": "String", "Example": "device name"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.hold_next_transition", "Filter code method": "Ecobee.holdNextTransition.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.hold_next_transition\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Helper text": "Select which thermostat will execute the hold.", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Desired temperature\nDropdown list", "description": "Dropdown list", "details": {"Label": "Desired Temperature", "Helper text": "The temperature to set the hold to.", "Slug": "desired_temperature", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**:\n\n```\nif (Smanos.tgArmStay.WhichSystem === \"armed_stay_home\" && Time/moment().format(\"YYYY-MM-DDTHH:mm:ssZ\") === Smanos.tgArmStay.CreatedTime) {\n  Ecobee.holdNextTransition({\n    \"thermostat\": [Trigger.Details.find(item => item.details.Label === \"Thermostat Name\").Slug],\n    \"desired_temperature\": [Trigger.Details.find(item => item.details.Label === \"Desired Temperature\").Slug]\n  });\n} else {\n  Ecobee.holdNextTransition.skip(\"Not in armed stay home mode or not at the creation time\");\n}\n```\n\n**INTENT**: When the Smanos system is armed to stay (home) mode at the time of event creation, set the Ecobee thermostat to the selected comfort setting."}
{"original_description": "Whenever the price hits my threshold, set my ecobee thermostat comfort profile.\n\nThis can be used with other applets to change your ecobee thermostat to a specific Comfort Profile whenever the price goes above of below your set threshold.", "trigger_channel": "ComEd", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "ComEd.average_price_change"}, "trigger_details": [{"section": "Trigger fields", "title": "Which season\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which season do you want this to trigger?", "Slug": "which_season", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Which price threshold\nText input > Regular expression", "description": "Text input > Regular expression", "details": {"Label": "Which price threshold do you want this to trigger?", "Slug": "which_price_threshold", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "Trigger type\nDropdown list", "description": "Dropdown list", "details": {"Label": "When to trigger?", "Helper text": "Whether this should trigger when the price exceeds or goes under the provided price threshold", "Slug": "trigger_type", "Required": "true", "Can have default value": "true"}}, {"section": "Trigger fields", "title": "How often to trigger\nDropdown list", "description": "Dropdown list", "details": {"Label": "How often do you want this to trigger?", "Helper text": "Whether this should trigger every time a new average price is above or below the set price or just the first time it goes above or below the value", "Slug": "how_often_to_trigger", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Timestamp\nDate and time the price change occurred.", "description": "Date and time the price change occurred.", "details": {"Slug": "timestamp", "Filter code": "ComEd.averagePriceChange.Timestamp", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Average price\nThe current average price in cents for the hour.", "description": "The current average price in cents for the hour.", "details": {"Slug": "average_price", "Filter code": "ComEd.averagePriceChange.AveragePrice", "Type": "String", "Example": "14.4"}}, {"section": "Ingredients", "title": "From hour\nThe start hour in which this average is applicable.", "description": "The start hour in which this average is applicable.", "details": {"Slug": "from_hour", "Filter code": "ComEd.averagePriceChange.FromHour", "Type": "String", "Example": "3"}}, {"section": "Ingredients", "title": "To hour\nThe end hour in which this average is applicable.", "description": "The end hour in which this average is applicable.", "details": {"Slug": "to_hour", "Filter code": "ComEd.averagePriceChange.ToHour", "Type": "String", "Example": "4"}}], "action_channel": "ecobee", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ecobee.climate_hours", "Filter code method": "Ecobee.climateHours.skip(string?: reason)", "Runtime method": "runAction(\"ecobee.climate_hours\", {})"}, "action_details": [{"section": "Action fields", "title": "Thermostat\nDropdown list", "description": "Dropdown list", "details": {"Label": "Thermostat Name", "Slug": "thermostat", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Hold hours\nDropdown list", "description": "Dropdown list", "details": {"Label": "Number of Hours", "Helper text": "The number of hours to hold for", "Slug": "hold_hours", "Required": "true", "Can have default value": "true", "Filter code method": "Ecobee.climateHours.setHold Hours(string: hold_hours)"}}, {"section": "Action fields", "title": "Comfort profile\nDropdown list", "description": "Dropdown list", "details": {"Label": "Comfort Profile", "Helper text": "Select which comfort profile to use for the hold.", "Slug": "comfort_profile", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n$Ecco il codice JavaScript generato per il campo `filter_code`$\n\n**FILTERCODE**:\n```javascript\nif (Trigger.which_price_threshold > ComEd.averagePriceChange.AveragePrice) {\n  Ecobee.climateHours.setHoldHours(Trigger.how_often_to_trigger.toString());\n  Ecobee.climateHours.setComfortProfile(Trigger.which_season);\n} else if (Trigger.trigger_type === \"below\") {\n  Ecobee.climateHours.skip(\"Price went below threshold\");\n}\n```\n**INTENT**: When the price hits the threshold, set the ecobee thermostat comfort profile using the specified parameters."}
{"original_description": "What's Elon up to? Every Friday you'll get a digest of the latest NY Times reporting on SpaceX. 🖖", "trigger_channel": "The New York Times", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "nytimes.new_article_matching_search"}, "trigger_details": [{"section": "Trigger fields", "title": "Term\nText input", "description": "Text input", "details": {"Label": "Search for", "Slug": "term", "Required": "true", "Can have default value": "true"}}, {"section": "Ingredients", "title": "Title", "description": "", "details": {"Slug": "Title", "Filter code": "Nytimes.newArticleMatchingSearch.Title", "Type": "String", "Example": "In a fish tank, 'Algae is the worst'"}}, {"section": "Ingredients", "title": "Author\nThe author of the article", "description": "The author of the article", "details": {"Slug": "Author", "Filter code": "Nytimes.newArticleMatchingSearch.Author", "Type": "String", "Example": "Alexander P. Tibbets"}}, {"section": "Ingredients", "title": "Blurb", "description": "", "details": {"Slug": "Blurb", "Filter code": "Nytimes.newArticleMatchingSearch.Blurb", "Type": "String", "Example": "This article was written to keep you informed."}}, {"section": "Ingredients", "title": "Article url\nURL to the article", "description": "URL to the article", "details": {"Slug": "ArticleUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ArticleUrl", "Type": "String", "Example": "http://www.nytimes.com/2013/06/19/world/americas/algae-is-the-worst.html"}}, {"section": "Ingredients", "title": "Image url\nURL to the largest available image file.", "description": "URL to the largest available image file.", "details": {"Slug": "ImageUrl", "Filter code": "Nytimes.newArticleMatchingSearch.ImageUrl", "Type": "String", "Example": "http://graphics8.nytimes.com/images/2013/06/19/world/DIPLO/DIPLO-superJumbo.jpg"}}, {"section": "Ingredients", "title": "Source\nThe source of the article", "description": "The source of the article", "details": {"Slug": "Source", "Filter code": "Nytimes.newArticleMatchingSearch.Source", "Type": "String", "Example": "AP"}}, {"section": "Ingredients", "title": "Section", "description": "", "details": {"Slug": "Section", "Filter code": "Nytimes.newArticleMatchingSearch.Section", "Type": "String", "Example": "Sports"}}, {"section": "Ingredients", "title": "Keywords\nA comma separated list of article keywords", "description": "A comma separated list of article keywords", "details": {"Slug": "Keywords", "Filter code": "Nytimes.newArticleMatchingSearch.Keywords", "Type": "String", "Example": "fish, tanks, biology"}}, {"section": "Ingredients", "title": "Published date\nDate and time the article was published.", "description": "Date and time the article was published.", "details": {"Slug": "PublishedDate", "Filter code": "Nytimes.newArticleMatchingSearch.PublishedDate", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Email Digest", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "email_digest.send_weekly_email", "Filter code method": "EmailDigest.sendWeeklyEmail.skip(string?: reason)", "Runtime method": "runAction(\"email_digest.send_weekly_email\", {})"}, "action_details": [{"section": "Action fields", "title": "Time of day\nDropdown list", "description": "Dropdown list", "details": {"Label": "Time of day", "Slug": "time_of_day", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTime Of Day(string: time_of_day)"}}, {"section": "Action fields", "title": "Day of week\nDropdown list", "description": "Dropdown list", "details": {"Label": "Day of week", "Slug": "day_of_week", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setDay Of Week(string: day_of_week)"}}, {"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "true", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setTitle(string: title)"}}, {"section": "Action fields", "title": "Message\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Message", "Slug": "message", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setMessage(string: message)"}}, {"section": "Action fields", "title": "Url\nText input > Link", "description": "Text input > Link", "details": {"Label": "Item URL", "Helper text": "Optional", "Slug": "url", "Required": "false", "Can have default value": "true", "Filter code method": "EmailDigest.sendWeeklyEmail.setUrl(string: url)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n$Ecco il codice JavaScript generato per il campo `filter_code`$\n\n**INTENT**: Genera un rapporto settimanale sulle ultime notizie pubblicate sulla New York Times relative a SpaceX ogni venerdì.\n\n**FILTERCODE**:\n```\n// Verifica se il giorno della settimana è venerdì\nif (Meta.currentUserTime.day() == 5) {\n  // Recupera l'articolo più recente sulla NY Times riguardo a SpaceX\n  var article = Nytimes.newArticleMatchingSearch();\n  \n  // Verifica se l'articolo esiste\n  if (article) {\n    // Crea il testo del messaggio di email\n    var message = \"🚀📰 \" + article.Title + \" - \" + article.Blurb + \" | \" + article.ArticleUrl + \"\\n\";\n    EmailDigest.sendWeeklyEmail.setTitle(\"Weekly SpaceX Digest\");\n    EmailDigest.sendWeeklyEmail.setMessage(message);\n    EmailDigest.sendWeeklyEmail.send();\n  } else {\n    EmailDigest.sendWeeklyEmail.skip(\"No article found\");\n  }\n} else {\n  EmailDigest.sendWeeklyEmail.skip(\"Not a Friday\");\n}\n```\nIn questo codice, verifichiamo se il giorno della settimana è venerdì (5) e, se sì, recupero l'articolo più recente sulla NY Times riguardo a SpaceX utilizzando l' endpoint `nytimes.newArticleMatchingSearch()`. Verifico se l'articolo esiste e, se sì, creo un testo di mail che include il titolo, la descrizione e l'URL dell'articolo. Imposto il titolo e il testo della mail utilizzando gli endpoint `EmailDigest.sendWeeklyEmail.setTitle()` e `EmailDigest.sendWeeklyEmail.setMessage()`, e then invio la mail utilizzando `EmailDigest.sendWeeklyEmail.send()`. Se l'articolo non esiste o se non è venerdì, salto la mail utilizzando `EmailDigest.sendWeeklyEmail.skip()` con un messaggio di errore."}
{"original_description": "This Applet will pause your Roomba® when answering a call.", "trigger_channel": "Android Phone Call", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "android_phone.receive_a_phone_call"}, "trigger_details": [{"section": "Ingredients", "title": "Contact name\nThe contact name associated with the call.", "description": "The contact name associated with the call.", "details": {"Slug": "ContactName", "Filter code": "AndroidPhone.receiveAPhoneCall.ContactName", "Type": "String", "Example": "Jon Snow"}}, {"section": "Ingredients", "title": "Occurred at\nThe time the event occurred", "description": "The time the event occurred", "details": {"Slug": "OccurredAt", "Filter code": "AndroidPhone.receiveAPhoneCall.OccurredAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "From number\nThe phone number that initiated the call.", "description": "The phone number that initiated the call.", "details": {"Slug": "FromNumber", "Filter code": "AndroidPhone.receiveAPhoneCall.FromNumber", "Type": "String", "Example": "14155551234"}}, {"section": "Ingredients", "title": "Call length\nThe length of the phone call in seconds", "description": "The length of the phone call in seconds", "details": {"Slug": "CallLength", "Filter code": "AndroidPhone.receiveAPhoneCall.CallLength", "Type": "String", "Example": "25"}}, {"section": "Ingredients", "title": "Device name\nThe name of the device on which the event occurred.", "description": "The name of the device on which the event occurred.", "details": {"Slug": "device_name", "Filter code": "AndroidPhone.receiveAPhoneCall.DeviceName", "Type": "String", "Example": "Google Pixel 7"}}], "action_channel": "iRobot", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "irobot.pause_robot", "Filter code method": "Irobot.pauseRobot.skip(string?: reason)", "Runtime method": "runAction(\"irobot.pause_robot\", {})"}, "action_details": [{"section": "Action fields", "title": "Robot name\nDropdown list", "description": "Dropdown list", "details": {"Label": "Robot Name", "Slug": "robot_name", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n$Ecco il codice JavaScript generato per il campo filter_code$\n**INTENT**: Pause the Roomba when answering a call, to avoid interrupting its cleaning schedule.\n\n**FILTERCODE**:\n```javascript\nvar ContactName = AndroidPhone.receiveAPhoneCall.ContactName;\nif (ContactName !== \"\") {\n  Irobot.pauseRobot.skip(\"Answering a call from \" + ContactName);\n} else {\n  Irobot.pauseRobot();\n}\n```\nNota: In questo esempio, il codice JavaScript utilizza il valore del campo `ContactName` per creare un messaggio di ragione per l'azionamento del bypass. Se il campo `ContactName` è vuoto, il robot viene semplicemente bloccato."}
{"original_description": "Capture all those great \"on the fly\" blog ideas! Just jot down your note to the notebook of your choice and it'll be in your Wordpress \"Drafts\" folder when you have time to sit down, refine, and publish. ", "trigger_channel": "Evernote", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "evernote.new_note_in_notebook"}, "trigger_details": [{"section": "Trigger fields", "title": "Notebook\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which notebook?", "Slug": "notebook", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Title\nThe note title.", "description": "The note title.", "details": {"Slug": "Title", "Filter code": "Evernote.newNoteInNotebook.Title", "Type": "String", "Example": "A great note about taking notes"}}, {"section": "Ingredients", "title": "Body html\nThe HTML version of the note body.", "description": "The HTML version of the note body.", "details": {"Slug": "BodyHTML", "Filter code": "Evernote.newNoteInNotebook.BodyHTML", "Type": "String", "Example": "<p>Connect Evernote to hundreds of apps</p>"}}, {"section": "Ingredients", "title": "Public url\nThe public URL of the note.", "description": "The public URL of the note.", "details": {"Slug": "PublicUrl", "Filter code": "Evernote.newNoteInNotebook.PublicUrl", "Type": "String", "Example": "https://www.evernote.com/shard/s1/sh/426e2836-4a46-47fa-8436-a56f15b33341/522ef3d7500cd208c03f34883968609f"}}, {"section": "Ingredients", "title": "Tags\nThe note's tags, comma separated.", "description": "The note's tags, comma separated.", "details": {"Slug": "Tags", "Filter code": "Evernote.newNoteInNotebook.Tags", "Type": "String", "Example": "neato, cool, video"}}, {"section": "Ingredients", "title": "Created at\nDate and time the note was created.", "description": "Date and time the note was created.", "details": {"Slug": "CreatedAt", "Filter code": "Evernote.newNoteInNotebook.CreatedAt", "Type": "String", "Example": "October 24, 2015 at 11:11PM"}}], "action_channel": "WordPress", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "wordpress.create_post_wp", "Filter code method": "Wordpress.createPostWp.skip(string?: reason)", "Runtime method": "runAction(\"wordpress.create_post_wp\", {})"}, "action_details": [{"section": "Action fields", "title": "Title\nText input > Title", "description": "Text input > Title", "details": {"Label": "Title", "Slug": "title", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTitle(string: title)"}}, {"section": "Action fields", "title": "Body\nText input > HTML", "description": "Text input > HTML", "details": {"Label": "Body", "Helper text": "Some HTML ok", "Slug": "body", "Required": "true", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setBody(string: body)"}}, {"section": "Action fields", "title": "Categories\nText input > Other", "description": "Text input > Other", "details": {"Label": "Categories", "Helper text": "Comma separated", "Slug": "categories", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setCategories(string: categories)"}}, {"section": "Action fields", "title": "Tags\nText input > Tags", "description": "Text input > Tags", "details": {"Label": "Tags", "Helper text": "Comma separated", "Slug": "tags", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setTags(string: tags)"}}, {"section": "Action fields", "title": "Post status\nDropdown list", "description": "Dropdown list", "details": {"Label": "Post status", "Slug": "post_status", "Required": "false", "Can have default value": "true", "Filter code method": "Wordpress.createPostWp.setPost Status(string: post_status)"}}], "filter_code": "", "filter_code_generated": "**Principale**\n\n**FILTERCODE**\n```\n// Trigger details\nvar notebook = Evernote.newNoteInNotebook.Notebook;\nvar title = Evernote.newNoteInNotebook.Title;\nvar bodyHTML = Evernote.newNoteInNotebook.BodyHTML;\nvar publicUrl = Evernote.newNoteInNotebook.PublicUrl;\nvar tags = Evernote.newNoteInNotebook.Tags;\nvar createdAt = Evernote.newNoteInNotebook.CreatedAt;\n\n// Action fields\nvar postTitle = \"\";\nvar postBody = \"\";\nvar postCategories = [];\nvar postTags = [];\nvar postStatus = \"draft\";\n\n// Set default values\nif (!postTitle) {\n  postTitle = title;\n}\nif (!postBody) {\n  postBody = bodyHTML;\n}\nif (!postCategories.length) {\n  postCategories = tags.split(\",\");\n}\nif (!postTags.length) {\n  postTags = tags.split(\",\");\n}\n\n// Set filter code for action\nWordpress.createPostWp.setTitle(postTitle);\nWordpress.createPostWp.setBody(postBody);\nWordpress.createPostWp.setCategories(postCategories);\nWordpress.createPostWp.setTags(postTags);\n```\n**INTENT**: Automazione per catturare le idee per blog \"on the fly\" da Evernote e creare un post WordPress con i requisiti appropriati."}
{"original_description": "When a SmartThings device is turned off, turn on/off 1-channel switch or plug.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n```\n// Check if device is turned off\nvar device = Device.getSelectedDevice();\nif (!device.is_on) {\n    // Get switch name\n    var switchName = Ingredients.SwitchName;\n    // Get switch state (off)\n    var switchState = Ingredients.SwitchedOnAt == \" OFF\";\n    \n    // Perform condition check\n    if (switchState && device.name.includes(\"1-channel switch\") || device.name.includes(\"plug\")) {\n        // Turn on/off light switch\n        var lightSwitchDevice = ActionFields.Light_switch_action_device;\n        Ewelink.lightSwitchAction.setOnoffActQuery(lightSwitchDevice, \"on\");\n    } else {\n        // Skip action\n        Ewelink.lightSwitchAction.skip(\"Invalid device type\");\n    }\n}\n```\n**INTENT**: When a SmartThings device is turned off and it's a 1-channel switch or plug, turn on/off a light switch with the same name.\n\nNota: Ho usato la sintassi e le funzioni disponibili nel linguaggio JavaScript. Ho anche utilizzato le funzionalità delle variabili e delle condizionali per gestire l'automazione in base alle informazioni disponibili."}
{"original_description": "When a SmartThings device is turned on, turn on/off an eWeLink Support 1-channel switch.", "trigger_channel": "SmartThings", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "smartthings_v2.switched_on_smartthings"}, "trigger_details": [{"section": "Trigger fields", "title": "Device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "device", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switched on at\nThe date and time the switch was turned on.", "description": "The date and time the switch was turned on.", "details": {"Slug": "SwitchedOnAt", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchedOnAt", "Type": "String", "Example": "January 1st, 2023 at 11:11PM"}}, {"section": "Ingredients", "title": "Switch name\nThe name of the switch device.", "description": "The name of the switch device.", "details": {"Slug": "SwitchName", "Filter code": "SmartthingsV2.switchedOnSmartthings.SwitchName", "Type": "String", "Example": "Bedroom switch"}}], "action_channel": "eWeLink Smart Home", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "ewelink.light_switch_action", "Filter code method": "Ewelink.lightSwitchAction.skip(string?: reason)", "Runtime method": "runAction(\"ewelink.light_switch_action\", {})"}, "action_details": [{"section": "Action fields", "title": "Light switch action device\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which device?", "Slug": "light_switch_action_device", "Required": "true", "Can have default value": "false"}}, {"section": "Action fields", "title": "Onoff act query\nDropdown list", "description": "Dropdown list", "details": {"Label": "Turn on or off?", "Slug": "onoff_act_query", "Required": "true", "Can have default value": "true", "Filter code method": "Ewelink.lightSwitchAction.setOnoff Act Query(string: onoff_act_query)"}}], "filter_code": "", "filter_code_generated": "**Filter Code:**\n```\nfunction main() {\n  var SwitchedOnAt = SmartthingsV2.switchedOnSmartthings.SwitchedOnAt;\n  var SwitchName = SmartthingsV2.switchedOnSmartthings.SwitchName;\n  var lightSwitchActionDevice = Ewelink.lightSwitchActionDevice;\n  var onoffActQuery = Ewelink.lightSwitchAction.setOnoffActQuery;\n  \n  if (onoffActQuery === 'turn_on') {\n    Ewelink.lightSwitchAction.turnOn(lightSwitchActionDevice);\n  } else if (onoffActQuery === 'turn_off') {\n    Ewelink.lightSwitchAction.turnOff(lightSwitchActionDevice);\n  } else {\n    Ewelink.lightSwitchAction.skip(\"Invalid onoff act query\");\n  }\n  \n  log(SwitchedOnAt + \" - \" + SwitchName + \" - \" + onoffActQuery);\n}\n```\n**Intent:** This filter code turns on or off the specified eWeLink Smart Home device based on the SmartThings device being turned on. If the onoff act query is invalid, the action will be skipped with a reason message."}
{"original_description": "If you turn on your hood, your Philips Hue lights will turn on.", "trigger_channel": "Home Connect Hood", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "hc_hood.hood_power_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Ha\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which hood?", "Slug": "ha_id", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "HcHood.hoodPowerOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\nHere is the JavaScript filter code:\n\n```\nvar HaId = Trigger.ha_id;\nif (HaId === \"Living Room Fan\") {\n  Hue.turnOffAllHue.skip(\"Not used with this hood\");\n}\n```\n\n**INTENT**: Update the filter code to only apply to specific hoods and ignore others."}
{"original_description": "Turn off your Philips Hue lights when your mui board turned on night mode.", "trigger_channel": "mui", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "muilab.nightmode_on"}, "trigger_details": [{"section": "Trigger fields", "title": "Mui\nDropdown list", "description": "Dropdown list", "details": {"Label": "mui board", "Helper text": "select target mui board", "Slug": "mui", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Created at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "Muilab.nightmodeOn.CreatedAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}, {"section": "Ingredients", "title": "Mui name\nname of the mui board which turned on night mode", "description": "name of the mui board which turned on night mode", "details": {"Slug": "mui_name", "Filter code": "Muilab.nightmodeOn.MuiName", "Type": "String", "Example": "living room"}}], "action_channel": "Philips Hue", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "hue.turn_off_all_hue", "Filter code method": "Hue.turnOffAllHue.skip(string?: reason)", "Runtime method": "runAction(\"hue.turn_off_all_hue\", {})"}, "action_details": [{"section": "Action fields", "title": "Lights\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which lights?", "Slug": "lights", "Required": "true", "Can have default value": "false"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nfunction turnOffHueLights() {\n  var muiName = Muilab.nightmodeOn.MuiName;\n  if (muiName === \"Turn off lights in night mode\") {\n    Hue.turnOffAllHue.skip(\"No lights to turn off in night mode\");\n  } else {\n    Hue.turnOffAllHue();\n  }\n}\n```\n**INTENT**: Turn off Philips Hue lights when the mui board turns on night mode, excluding certain mui boards.\n\n Questo codice JavaScript verifica il nome del mui board che ha attivato il night mode e, se specifico, ignora l'azione di spegnimento delle luci."}
{"original_description": "Track every time your WeMo switch has been turned on, into a Google Spreadsheet.", "trigger_channel": "WeMo Insight Switch", "trigger_permission_id": "", "trigger_developer_info": {"API endpoint slug": "wemo_insight_switch.attribute_INSIGHTON_N"}, "trigger_details": [{"section": "Trigger fields", "title": "Macaddress\nDropdown list", "description": "Dropdown list", "details": {"Label": "Which insight switch?", "Helper text": "Name of Your WeMo insight switch.", "Slug": "macaddress", "Required": "true", "Can have default value": "false"}}, {"section": "Ingredients", "title": "Switch name\nName of the WeMo switch.", "description": "Name of the WeMo switch.", "details": {"Slug": "device_name", "Filter code": "WemoInsightSwitch.attributeINSIGHTONN.SwitchName", "Type": "String", "Example": "Kitchen switch"}}, {"section": "Ingredients", "title": "Switched on at\nDate and time event was created.", "description": "Date and time event was created.", "details": {"Slug": "created_at", "Filter code": "WemoInsightSwitch.attributeINSIGHTONN.SwitchedOnAt", "Type": "Date with time (ISO8601)", "Example": "2020-07-08T04:17:06+05:00"}}], "action_channel": "Google Sheets", "action_permission_id": "", "action_developer_info": {"API endpoint slug": "google_sheets.append_to_google_spreadsheet", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.skip(string?: reason)", "Runtime method": "runAction(\"google_sheets.append_to_google_spreadsheet\", {})"}, "action_details": [{"section": "Action fields", "title": "Filename\nText input > Document title", "description": "Text input > Document title", "details": {"Label": "Spreadsheet name", "Helper text": "Will create a new spreadsheet if one with this title doesn’t exist", "Slug": "filename", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFilename(string: filename)"}}, {"section": "Action fields", "title": "Formatted row\nText input", "description": "Text input", "details": {"Label": "Formatted row", "Helper text": "Use “|||” to separate cells", "Slug": "formatted_row", "Required": "true", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setFormatted Row(string: formatted_row)"}}, {"section": "Action fields", "title": "Path\nText input > Path to a folder", "description": "Text input > Path to a folder", "details": {"Label": "Drive folder path", "Helper text": "Format: some/folder/path (defaults to “IFTTT”)", "Slug": "path", "Required": "false", "Can have default value": "true", "Filter code method": "GoogleSheets.appendToGoogleSpreadsheet.setPath(string: path)"}}], "filter_code": "", "filter_code_generated": "**Struttura di Output Principale**\n\n**FILTERCODE**\n```\nvar WemoInsightSwitch = IFTTT.getTrigger(\"WemoInsightSwitch\");\nvar SwitchName = WemoInsightSwitch.getAttribute(\"SwitchName\");\nvar SwitchedOnAt = WemoInsightSwitch.getAttribute(\"SwitchedOnAt\");\n\nvar GoogleSheets = IFTTT.getAction(\"GoogleSheets\");\n\nif (parseInt(GoogleSheets.getFilename()) === 0) {\n  GoogleSheets.setFilename(\"WeMo Switches Log\");\n}\n\nvar FormattedRow = `${SwitchName}|||${SwitchedOnAt}`;\nGoogleSheets.setFormattedRow(FormattedRow);\nGoogleSheets.appendToGoogleSpreadsheet();\n```\n**INTENT**: To track every time your WeMo switch has been turned on, into a Google Spreadsheet, by appending a new row with the switch name and switch on date and time."}
